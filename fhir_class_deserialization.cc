typedef struct ResourceTypeString8Pair {
	ResourceType type;
	String8 str;
} ResourceTypeString8Pair;

ResourceTypeString8Pair resource_type_pairs[] = {
	{ResourceType::Resource, Str8Lit("Resource")},
	{ResourceType::Account, Str8Lit("Account")},
	{ResourceType::Account_Coverage, Str8Lit("Account_Coverage")},
	{ResourceType::Account_Guarantor, Str8Lit("Account_Guarantor")},
	{ResourceType::ActivityDefinition, Str8Lit("ActivityDefinition")},
	{ResourceType::ActivityDefinition_Participant, Str8Lit("ActivityDefinition_Participant")},
	{ResourceType::ActivityDefinition_DynamicValue, Str8Lit("ActivityDefinition_DynamicValue")},
	{ResourceType::AdverseEvent, Str8Lit("AdverseEvent")},
	{ResourceType::AdverseEvent_SuspectEntity, Str8Lit("AdverseEvent_SuspectEntity")},
	{ResourceType::AdverseEvent_SuspectEntity_Causality, Str8Lit("AdverseEvent_SuspectEntity_Causality")},
	{ResourceType::AllergyIntolerance, Str8Lit("AllergyIntolerance")},
	{ResourceType::AllergyIntolerance_Reaction, Str8Lit("AllergyIntolerance_Reaction")},
	{ResourceType::Appointment, Str8Lit("Appointment")},
	{ResourceType::Appointment_Participant, Str8Lit("Appointment_Participant")},
	{ResourceType::AppointmentResponse, Str8Lit("AppointmentResponse")},
	{ResourceType::AuditEvent, Str8Lit("AuditEvent")},
	{ResourceType::AuditEvent_Agent, Str8Lit("AuditEvent_Agent")},
	{ResourceType::AuditEvent_Agent_Network, Str8Lit("AuditEvent_Agent_Network")},
	{ResourceType::AuditEvent_Source, Str8Lit("AuditEvent_Source")},
	{ResourceType::AuditEvent_Entity, Str8Lit("AuditEvent_Entity")},
	{ResourceType::AuditEvent_Entity_Detail, Str8Lit("AuditEvent_Entity_Detail")},
	{ResourceType::Basic, Str8Lit("Basic")},
	{ResourceType::Binary, Str8Lit("Binary")},
	{ResourceType::BiologicallyDerivedProduct, Str8Lit("BiologicallyDerivedProduct")},
	{ResourceType::BiologicallyDerivedProduct_Collection, Str8Lit("BiologicallyDerivedProduct_Collection")},
	{ResourceType::BiologicallyDerivedProduct_Processing, Str8Lit("BiologicallyDerivedProduct_Processing")},
	{ResourceType::BiologicallyDerivedProduct_Manipulation, Str8Lit("BiologicallyDerivedProduct_Manipulation")},
	{ResourceType::BiologicallyDerivedProduct_Storage, Str8Lit("BiologicallyDerivedProduct_Storage")},
	{ResourceType::BodyStructure, Str8Lit("BodyStructure")},
	{ResourceType::Bundle, Str8Lit("Bundle")},
	{ResourceType::Bundle_Link, Str8Lit("Bundle_Link")},
	{ResourceType::Bundle_Entry, Str8Lit("Bundle_Entry")},
	{ResourceType::Bundle_Entry_Search, Str8Lit("Bundle_Entry_Search")},
	{ResourceType::Bundle_Entry_Request, Str8Lit("Bundle_Entry_Request")},
	{ResourceType::Bundle_Entry_Response, Str8Lit("Bundle_Entry_Response")},
	{ResourceType::CapabilityStatement, Str8Lit("CapabilityStatement")},
	{ResourceType::CapabilityStatement_Software, Str8Lit("CapabilityStatement_Software")},
	{ResourceType::CapabilityStatement_Implementation, Str8Lit("CapabilityStatement_Implementation")},
	{ResourceType::CapabilityStatement_Rest, Str8Lit("CapabilityStatement_Rest")},
	{ResourceType::CapabilityStatement_Rest_Security, Str8Lit("CapabilityStatement_Rest_Security")},
	{ResourceType::CapabilityStatement_Rest_Resource, Str8Lit("CapabilityStatement_Rest_Resource")},
	{ResourceType::CapabilityStatement_Rest_Resource_Interaction, Str8Lit("CapabilityStatement_Rest_Resource_Interaction")},
	{ResourceType::CapabilityStatement_Rest_Resource_SearchParam, Str8Lit("CapabilityStatement_Rest_Resource_SearchParam")},
	{ResourceType::CapabilityStatement_Rest_Resource_Operation, Str8Lit("CapabilityStatement_Rest_Resource_Operation")},
	{ResourceType::CapabilityStatement_Rest_Interaction, Str8Lit("CapabilityStatement_Rest_Interaction")},
	{ResourceType::CapabilityStatement_Messaging, Str8Lit("CapabilityStatement_Messaging")},
	{ResourceType::CapabilityStatement_Messaging_Endpoint, Str8Lit("CapabilityStatement_Messaging_Endpoint")},
	{ResourceType::CapabilityStatement_Messaging_SupportedMessage, Str8Lit("CapabilityStatement_Messaging_SupportedMessage")},
	{ResourceType::CapabilityStatement_Document, Str8Lit("CapabilityStatement_Document")},
	{ResourceType::CarePlan, Str8Lit("CarePlan")},
	{ResourceType::CarePlan_Activity, Str8Lit("CarePlan_Activity")},
	{ResourceType::CarePlan_Activity_Detail, Str8Lit("CarePlan_Activity_Detail")},
	{ResourceType::CareTeam, Str8Lit("CareTeam")},
	{ResourceType::CareTeam_Participant, Str8Lit("CareTeam_Participant")},
	{ResourceType::CatalogEntry, Str8Lit("CatalogEntry")},
	{ResourceType::CatalogEntry_RelatedEntry, Str8Lit("CatalogEntry_RelatedEntry")},
	{ResourceType::ChargeItem, Str8Lit("ChargeItem")},
	{ResourceType::ChargeItem_Performer, Str8Lit("ChargeItem_Performer")},
	{ResourceType::ChargeItemDefinition, Str8Lit("ChargeItemDefinition")},
	{ResourceType::ChargeItemDefinition_Applicability, Str8Lit("ChargeItemDefinition_Applicability")},
	{ResourceType::ChargeItemDefinition_PropertyGroup, Str8Lit("ChargeItemDefinition_PropertyGroup")},
	{ResourceType::ChargeItemDefinition_PropertyGroup_PriceComponent, Str8Lit("ChargeItemDefinition_PropertyGroup_PriceComponent")},
	{ResourceType::Claim, Str8Lit("Claim")},
	{ResourceType::Claim_Related, Str8Lit("Claim_Related")},
	{ResourceType::Claim_Payee, Str8Lit("Claim_Payee")},
	{ResourceType::Claim_CareTeam, Str8Lit("Claim_CareTeam")},
	{ResourceType::Claim_SupportingInfo, Str8Lit("Claim_SupportingInfo")},
	{ResourceType::Claim_Diagnosis, Str8Lit("Claim_Diagnosis")},
	{ResourceType::Claim_Procedure, Str8Lit("Claim_Procedure")},
	{ResourceType::Claim_Insurance, Str8Lit("Claim_Insurance")},
	{ResourceType::Claim_Accident, Str8Lit("Claim_Accident")},
	{ResourceType::Claim_Item, Str8Lit("Claim_Item")},
	{ResourceType::Claim_Item_Detail, Str8Lit("Claim_Item_Detail")},
	{ResourceType::Claim_Item_Detail_SubDetail, Str8Lit("Claim_Item_Detail_SubDetail")},
	{ResourceType::ClaimResponse, Str8Lit("ClaimResponse")},
	{ResourceType::ClaimResponse_Item, Str8Lit("ClaimResponse_Item")},
	{ResourceType::ClaimResponse_Item_Adjudication, Str8Lit("ClaimResponse_Item_Adjudication")},
	{ResourceType::ClaimResponse_Item_Detail, Str8Lit("ClaimResponse_Item_Detail")},
	{ResourceType::ClaimResponse_Item_Detail_SubDetail, Str8Lit("ClaimResponse_Item_Detail_SubDetail")},
	{ResourceType::ClaimResponse_AddItem, Str8Lit("ClaimResponse_AddItem")},
	{ResourceType::ClaimResponse_AddItem_Detail, Str8Lit("ClaimResponse_AddItem_Detail")},
	{ResourceType::ClaimResponse_AddItem_Detail_SubDetail, Str8Lit("ClaimResponse_AddItem_Detail_SubDetail")},
	{ResourceType::ClaimResponse_Total, Str8Lit("ClaimResponse_Total")},
	{ResourceType::ClaimResponse_Payment, Str8Lit("ClaimResponse_Payment")},
	{ResourceType::ClaimResponse_ProcessNote, Str8Lit("ClaimResponse_ProcessNote")},
	{ResourceType::ClaimResponse_Insurance, Str8Lit("ClaimResponse_Insurance")},
	{ResourceType::ClaimResponse_Error, Str8Lit("ClaimResponse_Error")},
	{ResourceType::ClinicalImpression, Str8Lit("ClinicalImpression")},
	{ResourceType::ClinicalImpression_Investigation, Str8Lit("ClinicalImpression_Investigation")},
	{ResourceType::ClinicalImpression_Finding, Str8Lit("ClinicalImpression_Finding")},
	{ResourceType::CodeSystem, Str8Lit("CodeSystem")},
	{ResourceType::CodeSystem_Filter, Str8Lit("CodeSystem_Filter")},
	{ResourceType::CodeSystem_Property, Str8Lit("CodeSystem_Property")},
	{ResourceType::CodeSystem_Concept, Str8Lit("CodeSystem_Concept")},
	{ResourceType::CodeSystem_Concept_Designation, Str8Lit("CodeSystem_Concept_Designation")},
	{ResourceType::CodeSystem_Concept_Property, Str8Lit("CodeSystem_Concept_Property")},
	{ResourceType::Communication, Str8Lit("Communication")},
	{ResourceType::Communication_Payload, Str8Lit("Communication_Payload")},
	{ResourceType::CommunicationRequest, Str8Lit("CommunicationRequest")},
	{ResourceType::CommunicationRequest_Payload, Str8Lit("CommunicationRequest_Payload")},
	{ResourceType::CompartmentDefinition, Str8Lit("CompartmentDefinition")},
	{ResourceType::CompartmentDefinition_Resource, Str8Lit("CompartmentDefinition_Resource")},
	{ResourceType::Composition, Str8Lit("Composition")},
	{ResourceType::Composition_Attester, Str8Lit("Composition_Attester")},
	{ResourceType::Composition_RelatesTo, Str8Lit("Composition_RelatesTo")},
	{ResourceType::Composition_Event, Str8Lit("Composition_Event")},
	{ResourceType::Composition_Section, Str8Lit("Composition_Section")},
	{ResourceType::ConceptMap, Str8Lit("ConceptMap")},
	{ResourceType::ConceptMap_Group, Str8Lit("ConceptMap_Group")},
	{ResourceType::ConceptMap_Group_Element, Str8Lit("ConceptMap_Group_Element")},
	{ResourceType::ConceptMap_Group_Element_Target, Str8Lit("ConceptMap_Group_Element_Target")},
	{ResourceType::ConceptMap_Group_Element_Target_DependsOn, Str8Lit("ConceptMap_Group_Element_Target_DependsOn")},
	{ResourceType::ConceptMap_Group_Unmapped, Str8Lit("ConceptMap_Group_Unmapped")},
	{ResourceType::Condition, Str8Lit("Condition")},
	{ResourceType::Condition_Stage, Str8Lit("Condition_Stage")},
	{ResourceType::Condition_Evidence, Str8Lit("Condition_Evidence")},
	{ResourceType::Consent, Str8Lit("Consent")},
	{ResourceType::Consent_Policy, Str8Lit("Consent_Policy")},
	{ResourceType::Consent_Verification, Str8Lit("Consent_Verification")},
	{ResourceType::Consent_Provision, Str8Lit("Consent_Provision")},
	{ResourceType::Consent_Provision_Actor, Str8Lit("Consent_Provision_Actor")},
	{ResourceType::Consent_Provision_Data, Str8Lit("Consent_Provision_Data")},
	{ResourceType::Contract, Str8Lit("Contract")},
	{ResourceType::Contract_ContentDefinition, Str8Lit("Contract_ContentDefinition")},
	{ResourceType::Contract_Term, Str8Lit("Contract_Term")},
	{ResourceType::Contract_Term_SecurityLabel, Str8Lit("Contract_Term_SecurityLabel")},
	{ResourceType::Contract_Term_Offer, Str8Lit("Contract_Term_Offer")},
	{ResourceType::Contract_Term_Offer_Party, Str8Lit("Contract_Term_Offer_Party")},
	{ResourceType::Contract_Term_Offer_Answer, Str8Lit("Contract_Term_Offer_Answer")},
	{ResourceType::Contract_Term_Asset, Str8Lit("Contract_Term_Asset")},
	{ResourceType::Contract_Term_Asset_Context, Str8Lit("Contract_Term_Asset_Context")},
	{ResourceType::Contract_Term_Asset_ValuedItem, Str8Lit("Contract_Term_Asset_ValuedItem")},
	{ResourceType::Contract_Term_Action, Str8Lit("Contract_Term_Action")},
	{ResourceType::Contract_Term_Action_Subject, Str8Lit("Contract_Term_Action_Subject")},
	{ResourceType::Contract_Signer, Str8Lit("Contract_Signer")},
	{ResourceType::Contract_Friendly, Str8Lit("Contract_Friendly")},
	{ResourceType::Contract_Legal, Str8Lit("Contract_Legal")},
	{ResourceType::Contract_Rule, Str8Lit("Contract_Rule")},
	{ResourceType::Coverage, Str8Lit("Coverage")},
	{ResourceType::Coverage_Class, Str8Lit("Coverage_Class")},
	{ResourceType::Coverage_CostToBeneficiary, Str8Lit("Coverage_CostToBeneficiary")},
	{ResourceType::Coverage_CostToBeneficiary_Exception, Str8Lit("Coverage_CostToBeneficiary_Exception")},
	{ResourceType::CoverageEligibilityRequest, Str8Lit("CoverageEligibilityRequest")},
	{ResourceType::CoverageEligibilityRequest_SupportingInfo, Str8Lit("CoverageEligibilityRequest_SupportingInfo")},
	{ResourceType::CoverageEligibilityRequest_Insurance, Str8Lit("CoverageEligibilityRequest_Insurance")},
	{ResourceType::CoverageEligibilityRequest_Item, Str8Lit("CoverageEligibilityRequest_Item")},
	{ResourceType::CoverageEligibilityRequest_Item_Diagnosis, Str8Lit("CoverageEligibilityRequest_Item_Diagnosis")},
	{ResourceType::CoverageEligibilityResponse, Str8Lit("CoverageEligibilityResponse")},
	{ResourceType::CoverageEligibilityResponse_Insurance, Str8Lit("CoverageEligibilityResponse_Insurance")},
	{ResourceType::CoverageEligibilityResponse_Insurance_Item, Str8Lit("CoverageEligibilityResponse_Insurance_Item")},
	{ResourceType::CoverageEligibilityResponse_Insurance_Item_Benefit, Str8Lit("CoverageEligibilityResponse_Insurance_Item_Benefit")},
	{ResourceType::CoverageEligibilityResponse_Error, Str8Lit("CoverageEligibilityResponse_Error")},
	{ResourceType::DetectedIssue, Str8Lit("DetectedIssue")},
	{ResourceType::DetectedIssue_Evidence, Str8Lit("DetectedIssue_Evidence")},
	{ResourceType::DetectedIssue_Mitigation, Str8Lit("DetectedIssue_Mitigation")},
	{ResourceType::Device, Str8Lit("Device")},
	{ResourceType::Device_UdiCarrier, Str8Lit("Device_UdiCarrier")},
	{ResourceType::Device_DeviceName, Str8Lit("Device_DeviceName")},
	{ResourceType::Device_Specialization, Str8Lit("Device_Specialization")},
	{ResourceType::Device_Version, Str8Lit("Device_Version")},
	{ResourceType::Device_Property, Str8Lit("Device_Property")},
	{ResourceType::DeviceDefinition, Str8Lit("DeviceDefinition")},
	{ResourceType::DeviceDefinition_UdiDeviceIdentifier, Str8Lit("DeviceDefinition_UdiDeviceIdentifier")},
	{ResourceType::DeviceDefinition_DeviceName, Str8Lit("DeviceDefinition_DeviceName")},
	{ResourceType::DeviceDefinition_Specialization, Str8Lit("DeviceDefinition_Specialization")},
	{ResourceType::DeviceDefinition_Capability, Str8Lit("DeviceDefinition_Capability")},
	{ResourceType::DeviceDefinition_Property, Str8Lit("DeviceDefinition_Property")},
	{ResourceType::DeviceDefinition_Material, Str8Lit("DeviceDefinition_Material")},
	{ResourceType::DeviceMetric, Str8Lit("DeviceMetric")},
	{ResourceType::DeviceMetric_Calibration, Str8Lit("DeviceMetric_Calibration")},
	{ResourceType::DeviceRequest, Str8Lit("DeviceRequest")},
	{ResourceType::DeviceRequest_Parameter, Str8Lit("DeviceRequest_Parameter")},
	{ResourceType::DeviceUseStatement, Str8Lit("DeviceUseStatement")},
	{ResourceType::DiagnosticReport, Str8Lit("DiagnosticReport")},
	{ResourceType::DiagnosticReport_Media, Str8Lit("DiagnosticReport_Media")},
	{ResourceType::DocumentManifest, Str8Lit("DocumentManifest")},
	{ResourceType::DocumentManifest_Related, Str8Lit("DocumentManifest_Related")},
	{ResourceType::DocumentReference, Str8Lit("DocumentReference")},
	{ResourceType::DocumentReference_RelatesTo, Str8Lit("DocumentReference_RelatesTo")},
	{ResourceType::DocumentReference_Content, Str8Lit("DocumentReference_Content")},
	{ResourceType::DocumentReference_Context, Str8Lit("DocumentReference_Context")},
	{ResourceType::DomainResource, Str8Lit("DomainResource")},
	{ResourceType::EffectEvidenceSynthesis, Str8Lit("EffectEvidenceSynthesis")},
	{ResourceType::EffectEvidenceSynthesis_SampleSize, Str8Lit("EffectEvidenceSynthesis_SampleSize")},
	{ResourceType::EffectEvidenceSynthesis_ResultsByExposure, Str8Lit("EffectEvidenceSynthesis_ResultsByExposure")},
	{ResourceType::EffectEvidenceSynthesis_EffectEstimate, Str8Lit("EffectEvidenceSynthesis_EffectEstimate")},
	{ResourceType::EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, Str8Lit("EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate")},
	{ResourceType::EffectEvidenceSynthesis_Certainty, Str8Lit("EffectEvidenceSynthesis_Certainty")},
	{ResourceType::EffectEvidenceSynthesis_Certainty_CertaintySubcomponent, Str8Lit("EffectEvidenceSynthesis_Certainty_CertaintySubcomponent")},
	{ResourceType::Encounter, Str8Lit("Encounter")},
	{ResourceType::Encounter_StatusHistory, Str8Lit("Encounter_StatusHistory")},
	{ResourceType::Encounter_ClassHistory, Str8Lit("Encounter_ClassHistory")},
	{ResourceType::Encounter_Participant, Str8Lit("Encounter_Participant")},
	{ResourceType::Encounter_Diagnosis, Str8Lit("Encounter_Diagnosis")},
	{ResourceType::Encounter_Hospitalization, Str8Lit("Encounter_Hospitalization")},
	{ResourceType::Encounter_Location, Str8Lit("Encounter_Location")},
	{ResourceType::Endpoint, Str8Lit("Endpoint")},
	{ResourceType::EnrollmentRequest, Str8Lit("EnrollmentRequest")},
	{ResourceType::EnrollmentResponse, Str8Lit("EnrollmentResponse")},
	{ResourceType::EpisodeOfCare, Str8Lit("EpisodeOfCare")},
	{ResourceType::EpisodeOfCare_StatusHistory, Str8Lit("EpisodeOfCare_StatusHistory")},
	{ResourceType::EpisodeOfCare_Diagnosis, Str8Lit("EpisodeOfCare_Diagnosis")},
	{ResourceType::EventDefinition, Str8Lit("EventDefinition")},
	{ResourceType::Evidence, Str8Lit("Evidence")},
	{ResourceType::EvidenceVariable, Str8Lit("EvidenceVariable")},
	{ResourceType::EvidenceVariable_Characteristic, Str8Lit("EvidenceVariable_Characteristic")},
	{ResourceType::ExampleScenario, Str8Lit("ExampleScenario")},
	{ResourceType::ExampleScenario_Actor, Str8Lit("ExampleScenario_Actor")},
	{ResourceType::ExampleScenario_Instance, Str8Lit("ExampleScenario_Instance")},
	{ResourceType::ExampleScenario_Instance_Version, Str8Lit("ExampleScenario_Instance_Version")},
	{ResourceType::ExampleScenario_Instance_ContainedInstance, Str8Lit("ExampleScenario_Instance_ContainedInstance")},
	{ResourceType::ExampleScenario_Process, Str8Lit("ExampleScenario_Process")},
	{ResourceType::ExampleScenario_Process_Step, Str8Lit("ExampleScenario_Process_Step")},
	{ResourceType::ExampleScenario_Process_Step_Operation, Str8Lit("ExampleScenario_Process_Step_Operation")},
	{ResourceType::ExampleScenario_Process_Step_Alternative, Str8Lit("ExampleScenario_Process_Step_Alternative")},
	{ResourceType::ExplanationOfBenefit, Str8Lit("ExplanationOfBenefit")},
	{ResourceType::ExplanationOfBenefit_Related, Str8Lit("ExplanationOfBenefit_Related")},
	{ResourceType::ExplanationOfBenefit_Payee, Str8Lit("ExplanationOfBenefit_Payee")},
	{ResourceType::ExplanationOfBenefit_CareTeam, Str8Lit("ExplanationOfBenefit_CareTeam")},
	{ResourceType::ExplanationOfBenefit_SupportingInfo, Str8Lit("ExplanationOfBenefit_SupportingInfo")},
	{ResourceType::ExplanationOfBenefit_Diagnosis, Str8Lit("ExplanationOfBenefit_Diagnosis")},
	{ResourceType::ExplanationOfBenefit_Procedure, Str8Lit("ExplanationOfBenefit_Procedure")},
	{ResourceType::ExplanationOfBenefit_Insurance, Str8Lit("ExplanationOfBenefit_Insurance")},
	{ResourceType::ExplanationOfBenefit_Accident, Str8Lit("ExplanationOfBenefit_Accident")},
	{ResourceType::ExplanationOfBenefit_Item, Str8Lit("ExplanationOfBenefit_Item")},
	{ResourceType::ExplanationOfBenefit_Item_Adjudication, Str8Lit("ExplanationOfBenefit_Item_Adjudication")},
	{ResourceType::ExplanationOfBenefit_Item_Detail, Str8Lit("ExplanationOfBenefit_Item_Detail")},
	{ResourceType::ExplanationOfBenefit_Item_Detail_SubDetail, Str8Lit("ExplanationOfBenefit_Item_Detail_SubDetail")},
	{ResourceType::ExplanationOfBenefit_AddItem, Str8Lit("ExplanationOfBenefit_AddItem")},
	{ResourceType::ExplanationOfBenefit_AddItem_Detail, Str8Lit("ExplanationOfBenefit_AddItem_Detail")},
	{ResourceType::ExplanationOfBenefit_AddItem_Detail_SubDetail, Str8Lit("ExplanationOfBenefit_AddItem_Detail_SubDetail")},
	{ResourceType::ExplanationOfBenefit_Total, Str8Lit("ExplanationOfBenefit_Total")},
	{ResourceType::ExplanationOfBenefit_Payment, Str8Lit("ExplanationOfBenefit_Payment")},
	{ResourceType::ExplanationOfBenefit_ProcessNote, Str8Lit("ExplanationOfBenefit_ProcessNote")},
	{ResourceType::ExplanationOfBenefit_BenefitBalance, Str8Lit("ExplanationOfBenefit_BenefitBalance")},
	{ResourceType::ExplanationOfBenefit_BenefitBalance_Financial, Str8Lit("ExplanationOfBenefit_BenefitBalance_Financial")},
	{ResourceType::FamilyMemberHistory, Str8Lit("FamilyMemberHistory")},
	{ResourceType::FamilyMemberHistory_Condition, Str8Lit("FamilyMemberHistory_Condition")},
	{ResourceType::Flag, Str8Lit("Flag")},
	{ResourceType::Goal, Str8Lit("Goal")},
	{ResourceType::Goal_Target, Str8Lit("Goal_Target")},
	{ResourceType::GraphDefinition, Str8Lit("GraphDefinition")},
	{ResourceType::GraphDefinition_Link, Str8Lit("GraphDefinition_Link")},
	{ResourceType::GraphDefinition_Link_Target, Str8Lit("GraphDefinition_Link_Target")},
	{ResourceType::GraphDefinition_Link_Target_Compartment, Str8Lit("GraphDefinition_Link_Target_Compartment")},
	{ResourceType::Group, Str8Lit("Group")},
	{ResourceType::Group_Characteristic, Str8Lit("Group_Characteristic")},
	{ResourceType::Group_Member, Str8Lit("Group_Member")},
	{ResourceType::GuidanceResponse, Str8Lit("GuidanceResponse")},
	{ResourceType::HealthcareService, Str8Lit("HealthcareService")},
	{ResourceType::HealthcareService_Eligibility, Str8Lit("HealthcareService_Eligibility")},
	{ResourceType::HealthcareService_AvailableTime, Str8Lit("HealthcareService_AvailableTime")},
	{ResourceType::HealthcareService_NotAvailable, Str8Lit("HealthcareService_NotAvailable")},
	{ResourceType::ImagingStudy, Str8Lit("ImagingStudy")},
	{ResourceType::ImagingStudy_Series, Str8Lit("ImagingStudy_Series")},
	{ResourceType::ImagingStudy_Series_Performer, Str8Lit("ImagingStudy_Series_Performer")},
	{ResourceType::ImagingStudy_Series_Instance, Str8Lit("ImagingStudy_Series_Instance")},
	{ResourceType::Immunization, Str8Lit("Immunization")},
	{ResourceType::Immunization_Performer, Str8Lit("Immunization_Performer")},
	{ResourceType::Immunization_Education, Str8Lit("Immunization_Education")},
	{ResourceType::Immunization_Reaction, Str8Lit("Immunization_Reaction")},
	{ResourceType::Immunization_ProtocolApplied, Str8Lit("Immunization_ProtocolApplied")},
	{ResourceType::ImmunizationEvaluation, Str8Lit("ImmunizationEvaluation")},
	{ResourceType::ImmunizationRecommendation, Str8Lit("ImmunizationRecommendation")},
	{ResourceType::ImmunizationRecommendation_Recommendation, Str8Lit("ImmunizationRecommendation_Recommendation")},
	{ResourceType::ImmunizationRecommendation_Recommendation_DateCriterion, Str8Lit("ImmunizationRecommendation_Recommendation_DateCriterion")},
	{ResourceType::ImplementationGuide, Str8Lit("ImplementationGuide")},
	{ResourceType::ImplementationGuide_DependsOn, Str8Lit("ImplementationGuide_DependsOn")},
	{ResourceType::ImplementationGuide_Global, Str8Lit("ImplementationGuide_Global")},
	{ResourceType::ImplementationGuide_Definition, Str8Lit("ImplementationGuide_Definition")},
	{ResourceType::ImplementationGuide_Definition_Grouping, Str8Lit("ImplementationGuide_Definition_Grouping")},
	{ResourceType::ImplementationGuide_Definition_Resource, Str8Lit("ImplementationGuide_Definition_Resource")},
	{ResourceType::ImplementationGuide_Definition_Page, Str8Lit("ImplementationGuide_Definition_Page")},
	{ResourceType::ImplementationGuide_Definition_Parameter, Str8Lit("ImplementationGuide_Definition_Parameter")},
	{ResourceType::ImplementationGuide_Definition_Template, Str8Lit("ImplementationGuide_Definition_Template")},
	{ResourceType::ImplementationGuide_Manifest, Str8Lit("ImplementationGuide_Manifest")},
	{ResourceType::ImplementationGuide_Manifest_Resource, Str8Lit("ImplementationGuide_Manifest_Resource")},
	{ResourceType::ImplementationGuide_Manifest_Page, Str8Lit("ImplementationGuide_Manifest_Page")},
	{ResourceType::InsurancePlan, Str8Lit("InsurancePlan")},
	{ResourceType::InsurancePlan_Contact, Str8Lit("InsurancePlan_Contact")},
	{ResourceType::InsurancePlan_Coverage, Str8Lit("InsurancePlan_Coverage")},
	{ResourceType::InsurancePlan_Coverage_Benefit, Str8Lit("InsurancePlan_Coverage_Benefit")},
	{ResourceType::InsurancePlan_Coverage_Benefit_Limit, Str8Lit("InsurancePlan_Coverage_Benefit_Limit")},
	{ResourceType::InsurancePlan_Plan, Str8Lit("InsurancePlan_Plan")},
	{ResourceType::InsurancePlan_Plan_GeneralCost, Str8Lit("InsurancePlan_Plan_GeneralCost")},
	{ResourceType::InsurancePlan_Plan_SpecificCost, Str8Lit("InsurancePlan_Plan_SpecificCost")},
	{ResourceType::InsurancePlan_Plan_SpecificCost_Benefit, Str8Lit("InsurancePlan_Plan_SpecificCost_Benefit")},
	{ResourceType::InsurancePlan_Plan_SpecificCost_Benefit_Cost, Str8Lit("InsurancePlan_Plan_SpecificCost_Benefit_Cost")},
	{ResourceType::Invoice, Str8Lit("Invoice")},
	{ResourceType::Invoice_Participant, Str8Lit("Invoice_Participant")},
	{ResourceType::Invoice_LineItem, Str8Lit("Invoice_LineItem")},
	{ResourceType::Invoice_LineItem_PriceComponent, Str8Lit("Invoice_LineItem_PriceComponent")},
	{ResourceType::Library, Str8Lit("Library")},
	{ResourceType::Linkage, Str8Lit("Linkage")},
	{ResourceType::Linkage_Item, Str8Lit("Linkage_Item")},
	{ResourceType::List, Str8Lit("List")},
	{ResourceType::List_Entry, Str8Lit("List_Entry")},
	{ResourceType::Location, Str8Lit("Location")},
	{ResourceType::Location_Position, Str8Lit("Location_Position")},
	{ResourceType::Location_HoursOfOperation, Str8Lit("Location_HoursOfOperation")},
	{ResourceType::Measure, Str8Lit("Measure")},
	{ResourceType::Measure_Group, Str8Lit("Measure_Group")},
	{ResourceType::Measure_Group_Population, Str8Lit("Measure_Group_Population")},
	{ResourceType::Measure_Group_Stratifier, Str8Lit("Measure_Group_Stratifier")},
	{ResourceType::Measure_Group_Stratifier_Component, Str8Lit("Measure_Group_Stratifier_Component")},
	{ResourceType::Measure_SupplementalData, Str8Lit("Measure_SupplementalData")},
	{ResourceType::MeasureReport, Str8Lit("MeasureReport")},
	{ResourceType::MeasureReport_Group, Str8Lit("MeasureReport_Group")},
	{ResourceType::MeasureReport_Group_Population, Str8Lit("MeasureReport_Group_Population")},
	{ResourceType::MeasureReport_Group_Stratifier, Str8Lit("MeasureReport_Group_Stratifier")},
	{ResourceType::MeasureReport_Group_Stratifier_Stratum, Str8Lit("MeasureReport_Group_Stratifier_Stratum")},
	{ResourceType::MeasureReport_Group_Stratifier_Stratum_Component, Str8Lit("MeasureReport_Group_Stratifier_Stratum_Component")},
	{ResourceType::MeasureReport_Group_Stratifier_Stratum_Population, Str8Lit("MeasureReport_Group_Stratifier_Stratum_Population")},
	{ResourceType::Media, Str8Lit("Media")},
	{ResourceType::Medication, Str8Lit("Medication")},
	{ResourceType::Medication_Ingredient, Str8Lit("Medication_Ingredient")},
	{ResourceType::Medication_Batch, Str8Lit("Medication_Batch")},
	{ResourceType::MedicationAdministration, Str8Lit("MedicationAdministration")},
	{ResourceType::MedicationAdministration_Performer, Str8Lit("MedicationAdministration_Performer")},
	{ResourceType::MedicationAdministration_Dosage, Str8Lit("MedicationAdministration_Dosage")},
	{ResourceType::MedicationDispense, Str8Lit("MedicationDispense")},
	{ResourceType::MedicationDispense_Performer, Str8Lit("MedicationDispense_Performer")},
	{ResourceType::MedicationDispense_Substitution, Str8Lit("MedicationDispense_Substitution")},
	{ResourceType::MedicationKnowledge, Str8Lit("MedicationKnowledge")},
	{ResourceType::MedicationKnowledge_RelatedMedicationKnowledge, Str8Lit("MedicationKnowledge_RelatedMedicationKnowledge")},
	{ResourceType::MedicationKnowledge_Monograph, Str8Lit("MedicationKnowledge_Monograph")},
	{ResourceType::MedicationKnowledge_Ingredient, Str8Lit("MedicationKnowledge_Ingredient")},
	{ResourceType::MedicationKnowledge_Cost, Str8Lit("MedicationKnowledge_Cost")},
	{ResourceType::MedicationKnowledge_MonitoringProgram, Str8Lit("MedicationKnowledge_MonitoringProgram")},
	{ResourceType::MedicationKnowledge_AdministrationGuidelines, Str8Lit("MedicationKnowledge_AdministrationGuidelines")},
	{ResourceType::MedicationKnowledge_AdministrationGuidelines_Dosage, Str8Lit("MedicationKnowledge_AdministrationGuidelines_Dosage")},
	{ResourceType::MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics, Str8Lit("MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics")},
	{ResourceType::MedicationKnowledge_MedicineClassification, Str8Lit("MedicationKnowledge_MedicineClassification")},
	{ResourceType::MedicationKnowledge_Packaging, Str8Lit("MedicationKnowledge_Packaging")},
	{ResourceType::MedicationKnowledge_DrugCharacteristic, Str8Lit("MedicationKnowledge_DrugCharacteristic")},
	{ResourceType::MedicationKnowledge_Regulatory, Str8Lit("MedicationKnowledge_Regulatory")},
	{ResourceType::MedicationKnowledge_Regulatory_Substitution, Str8Lit("MedicationKnowledge_Regulatory_Substitution")},
	{ResourceType::MedicationKnowledge_Regulatory_Schedule, Str8Lit("MedicationKnowledge_Regulatory_Schedule")},
	{ResourceType::MedicationKnowledge_Regulatory_MaxDispense, Str8Lit("MedicationKnowledge_Regulatory_MaxDispense")},
	{ResourceType::MedicationKnowledge_Kinetics, Str8Lit("MedicationKnowledge_Kinetics")},
	{ResourceType::MedicationRequest, Str8Lit("MedicationRequest")},
	{ResourceType::MedicationRequest_DispenseRequest, Str8Lit("MedicationRequest_DispenseRequest")},
	{ResourceType::MedicationRequest_DispenseRequest_InitialFill, Str8Lit("MedicationRequest_DispenseRequest_InitialFill")},
	{ResourceType::MedicationRequest_Substitution, Str8Lit("MedicationRequest_Substitution")},
	{ResourceType::MedicationStatement, Str8Lit("MedicationStatement")},
	{ResourceType::MedicinalProduct, Str8Lit("MedicinalProduct")},
	{ResourceType::MedicinalProduct_Name, Str8Lit("MedicinalProduct_Name")},
	{ResourceType::MedicinalProduct_Name_NamePart, Str8Lit("MedicinalProduct_Name_NamePart")},
	{ResourceType::MedicinalProduct_Name_CountryLanguage, Str8Lit("MedicinalProduct_Name_CountryLanguage")},
	{ResourceType::MedicinalProduct_ManufacturingBusinessOperation, Str8Lit("MedicinalProduct_ManufacturingBusinessOperation")},
	{ResourceType::MedicinalProduct_SpecialDesignation, Str8Lit("MedicinalProduct_SpecialDesignation")},
	{ResourceType::MedicinalProductAuthorization, Str8Lit("MedicinalProductAuthorization")},
	{ResourceType::MedicinalProductAuthorization_JurisdictionalAuthorization, Str8Lit("MedicinalProductAuthorization_JurisdictionalAuthorization")},
	{ResourceType::MedicinalProductAuthorization_Procedure, Str8Lit("MedicinalProductAuthorization_Procedure")},
	{ResourceType::MedicinalProductContraindication, Str8Lit("MedicinalProductContraindication")},
	{ResourceType::MedicinalProductContraindication_OtherTherapy, Str8Lit("MedicinalProductContraindication_OtherTherapy")},
	{ResourceType::MedicinalProductIndication, Str8Lit("MedicinalProductIndication")},
	{ResourceType::MedicinalProductIndication_OtherTherapy, Str8Lit("MedicinalProductIndication_OtherTherapy")},
	{ResourceType::MedicinalProductIngredient, Str8Lit("MedicinalProductIngredient")},
	{ResourceType::MedicinalProductIngredient_SpecifiedSubstance, Str8Lit("MedicinalProductIngredient_SpecifiedSubstance")},
	{ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength, Str8Lit("MedicinalProductIngredient_SpecifiedSubstance_Strength")},
	{ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, Str8Lit("MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength")},
	{ResourceType::MedicinalProductIngredient_Substance, Str8Lit("MedicinalProductIngredient_Substance")},
	{ResourceType::MedicinalProductInteraction, Str8Lit("MedicinalProductInteraction")},
	{ResourceType::MedicinalProductInteraction_Interactant, Str8Lit("MedicinalProductInteraction_Interactant")},
	{ResourceType::MedicinalProductManufactured, Str8Lit("MedicinalProductManufactured")},
	{ResourceType::MedicinalProductPackaged, Str8Lit("MedicinalProductPackaged")},
	{ResourceType::MedicinalProductPackaged_BatchIdentifier, Str8Lit("MedicinalProductPackaged_BatchIdentifier")},
	{ResourceType::MedicinalProductPackaged_PackageItem, Str8Lit("MedicinalProductPackaged_PackageItem")},
	{ResourceType::MedicinalProductPharmaceutical, Str8Lit("MedicinalProductPharmaceutical")},
	{ResourceType::MedicinalProductPharmaceutical_Characteristics, Str8Lit("MedicinalProductPharmaceutical_Characteristics")},
	{ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration, Str8Lit("MedicinalProductPharmaceutical_RouteOfAdministration")},
	{ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, Str8Lit("MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies")},
	{ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, Str8Lit("MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod")},
	{ResourceType::MedicinalProductUndesirableEffect, Str8Lit("MedicinalProductUndesirableEffect")},
	{ResourceType::MessageDefinition, Str8Lit("MessageDefinition")},
	{ResourceType::MessageDefinition_Focus, Str8Lit("MessageDefinition_Focus")},
	{ResourceType::MessageDefinition_AllowedResponse, Str8Lit("MessageDefinition_AllowedResponse")},
	{ResourceType::MessageHeader, Str8Lit("MessageHeader")},
	{ResourceType::MessageHeader_Destination, Str8Lit("MessageHeader_Destination")},
	{ResourceType::MessageHeader_Source, Str8Lit("MessageHeader_Source")},
	{ResourceType::MessageHeader_Response, Str8Lit("MessageHeader_Response")},
	{ResourceType::MolecularSequence, Str8Lit("MolecularSequence")},
	{ResourceType::MolecularSequence_ReferenceSeq, Str8Lit("MolecularSequence_ReferenceSeq")},
	{ResourceType::MolecularSequence_Variant, Str8Lit("MolecularSequence_Variant")},
	{ResourceType::MolecularSequence_Quality, Str8Lit("MolecularSequence_Quality")},
	{ResourceType::MolecularSequence_Quality_Roc, Str8Lit("MolecularSequence_Quality_Roc")},
	{ResourceType::MolecularSequence_Repository, Str8Lit("MolecularSequence_Repository")},
	{ResourceType::MolecularSequence_StructureVariant, Str8Lit("MolecularSequence_StructureVariant")},
	{ResourceType::MolecularSequence_StructureVariant_Outer, Str8Lit("MolecularSequence_StructureVariant_Outer")},
	{ResourceType::MolecularSequence_StructureVariant_Inner, Str8Lit("MolecularSequence_StructureVariant_Inner")},
	{ResourceType::NamingSystem, Str8Lit("NamingSystem")},
	{ResourceType::NamingSystem_UniqueId, Str8Lit("NamingSystem_UniqueId")},
	{ResourceType::NutritionOrder, Str8Lit("NutritionOrder")},
	{ResourceType::NutritionOrder_OralDiet, Str8Lit("NutritionOrder_OralDiet")},
	{ResourceType::NutritionOrder_OralDiet_Nutrient, Str8Lit("NutritionOrder_OralDiet_Nutrient")},
	{ResourceType::NutritionOrder_OralDiet_Texture, Str8Lit("NutritionOrder_OralDiet_Texture")},
	{ResourceType::NutritionOrder_Supplement, Str8Lit("NutritionOrder_Supplement")},
	{ResourceType::NutritionOrder_EnteralFormula, Str8Lit("NutritionOrder_EnteralFormula")},
	{ResourceType::NutritionOrder_EnteralFormula_Administration, Str8Lit("NutritionOrder_EnteralFormula_Administration")},
	{ResourceType::Observation, Str8Lit("Observation")},
	{ResourceType::Observation_ReferenceRange, Str8Lit("Observation_ReferenceRange")},
	{ResourceType::Observation_Component, Str8Lit("Observation_Component")},
	{ResourceType::ObservationDefinition, Str8Lit("ObservationDefinition")},
	{ResourceType::ObservationDefinition_QuantitativeDetails, Str8Lit("ObservationDefinition_QuantitativeDetails")},
	{ResourceType::ObservationDefinition_QualifiedInterval, Str8Lit("ObservationDefinition_QualifiedInterval")},
	{ResourceType::OperationDefinition, Str8Lit("OperationDefinition")},
	{ResourceType::OperationDefinition_Parameter, Str8Lit("OperationDefinition_Parameter")},
	{ResourceType::OperationDefinition_Parameter_Binding, Str8Lit("OperationDefinition_Parameter_Binding")},
	{ResourceType::OperationDefinition_Parameter_ReferencedFrom, Str8Lit("OperationDefinition_Parameter_ReferencedFrom")},
	{ResourceType::OperationDefinition_Overload, Str8Lit("OperationDefinition_Overload")},
	{ResourceType::OperationOutcome, Str8Lit("OperationOutcome")},
	{ResourceType::OperationOutcome_Issue, Str8Lit("OperationOutcome_Issue")},
	{ResourceType::Organization, Str8Lit("Organization")},
	{ResourceType::Organization_Contact, Str8Lit("Organization_Contact")},
	{ResourceType::OrganizationAffiliation, Str8Lit("OrganizationAffiliation")},
	{ResourceType::Parameters, Str8Lit("Parameters")},
	{ResourceType::Parameters_Parameter, Str8Lit("Parameters_Parameter")},
	{ResourceType::Patient, Str8Lit("Patient")},
	{ResourceType::Patient_Contact, Str8Lit("Patient_Contact")},
	{ResourceType::Patient_Communication, Str8Lit("Patient_Communication")},
	{ResourceType::Patient_Link, Str8Lit("Patient_Link")},
	{ResourceType::PaymentNotice, Str8Lit("PaymentNotice")},
	{ResourceType::PaymentReconciliation, Str8Lit("PaymentReconciliation")},
	{ResourceType::PaymentReconciliation_Detail, Str8Lit("PaymentReconciliation_Detail")},
	{ResourceType::PaymentReconciliation_ProcessNote, Str8Lit("PaymentReconciliation_ProcessNote")},
	{ResourceType::Person, Str8Lit("Person")},
	{ResourceType::Person_Link, Str8Lit("Person_Link")},
	{ResourceType::PlanDefinition, Str8Lit("PlanDefinition")},
	{ResourceType::PlanDefinition_Goal, Str8Lit("PlanDefinition_Goal")},
	{ResourceType::PlanDefinition_Goal_Target, Str8Lit("PlanDefinition_Goal_Target")},
	{ResourceType::PlanDefinition_Action, Str8Lit("PlanDefinition_Action")},
	{ResourceType::PlanDefinition_Action_Condition, Str8Lit("PlanDefinition_Action_Condition")},
	{ResourceType::PlanDefinition_Action_RelatedAction, Str8Lit("PlanDefinition_Action_RelatedAction")},
	{ResourceType::PlanDefinition_Action_Participant, Str8Lit("PlanDefinition_Action_Participant")},
	{ResourceType::PlanDefinition_Action_DynamicValue, Str8Lit("PlanDefinition_Action_DynamicValue")},
	{ResourceType::Practitioner, Str8Lit("Practitioner")},
	{ResourceType::Practitioner_Qualification, Str8Lit("Practitioner_Qualification")},
	{ResourceType::PractitionerRole, Str8Lit("PractitionerRole")},
	{ResourceType::PractitionerRole_AvailableTime, Str8Lit("PractitionerRole_AvailableTime")},
	{ResourceType::PractitionerRole_NotAvailable, Str8Lit("PractitionerRole_NotAvailable")},
	{ResourceType::Procedure, Str8Lit("Procedure")},
	{ResourceType::Procedure_Performer, Str8Lit("Procedure_Performer")},
	{ResourceType::Procedure_FocalDevice, Str8Lit("Procedure_FocalDevice")},
	{ResourceType::Provenance, Str8Lit("Provenance")},
	{ResourceType::Provenance_Agent, Str8Lit("Provenance_Agent")},
	{ResourceType::Provenance_Entity, Str8Lit("Provenance_Entity")},
	{ResourceType::Questionnaire, Str8Lit("Questionnaire")},
	{ResourceType::Questionnaire_Item, Str8Lit("Questionnaire_Item")},
	{ResourceType::Questionnaire_Item_EnableWhen, Str8Lit("Questionnaire_Item_EnableWhen")},
	{ResourceType::Questionnaire_Item_AnswerOption, Str8Lit("Questionnaire_Item_AnswerOption")},
	{ResourceType::Questionnaire_Item_Initial, Str8Lit("Questionnaire_Item_Initial")},
	{ResourceType::QuestionnaireResponse, Str8Lit("QuestionnaireResponse")},
	{ResourceType::QuestionnaireResponse_Item, Str8Lit("QuestionnaireResponse_Item")},
	{ResourceType::QuestionnaireResponse_Item_Answer, Str8Lit("QuestionnaireResponse_Item_Answer")},
	{ResourceType::RelatedPerson, Str8Lit("RelatedPerson")},
	{ResourceType::RelatedPerson_Communication, Str8Lit("RelatedPerson_Communication")},
	{ResourceType::RequestGroup, Str8Lit("RequestGroup")},
	{ResourceType::RequestGroup_Action, Str8Lit("RequestGroup_Action")},
	{ResourceType::RequestGroup_Action_Condition, Str8Lit("RequestGroup_Action_Condition")},
	{ResourceType::RequestGroup_Action_RelatedAction, Str8Lit("RequestGroup_Action_RelatedAction")},
	{ResourceType::ResearchDefinition, Str8Lit("ResearchDefinition")},
	{ResourceType::ResearchElementDefinition, Str8Lit("ResearchElementDefinition")},
	{ResourceType::ResearchElementDefinition_Characteristic, Str8Lit("ResearchElementDefinition_Characteristic")},
	{ResourceType::ResearchStudy, Str8Lit("ResearchStudy")},
	{ResourceType::ResearchStudy_Arm, Str8Lit("ResearchStudy_Arm")},
	{ResourceType::ResearchStudy_Objective, Str8Lit("ResearchStudy_Objective")},
	{ResourceType::ResearchSubject, Str8Lit("ResearchSubject")},
	{ResourceType::RiskAssessment, Str8Lit("RiskAssessment")},
	{ResourceType::RiskAssessment_Prediction, Str8Lit("RiskAssessment_Prediction")},
	{ResourceType::RiskEvidenceSynthesis, Str8Lit("RiskEvidenceSynthesis")},
	{ResourceType::RiskEvidenceSynthesis_SampleSize, Str8Lit("RiskEvidenceSynthesis_SampleSize")},
	{ResourceType::RiskEvidenceSynthesis_RiskEstimate, Str8Lit("RiskEvidenceSynthesis_RiskEstimate")},
	{ResourceType::RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, Str8Lit("RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate")},
	{ResourceType::RiskEvidenceSynthesis_Certainty, Str8Lit("RiskEvidenceSynthesis_Certainty")},
	{ResourceType::RiskEvidenceSynthesis_Certainty_CertaintySubcomponent, Str8Lit("RiskEvidenceSynthesis_Certainty_CertaintySubcomponent")},
	{ResourceType::Schedule, Str8Lit("Schedule")},
	{ResourceType::SearchParameter, Str8Lit("SearchParameter")},
	{ResourceType::SearchParameter_Component, Str8Lit("SearchParameter_Component")},
	{ResourceType::ServiceRequest, Str8Lit("ServiceRequest")},
	{ResourceType::Slot, Str8Lit("Slot")},
	{ResourceType::Specimen, Str8Lit("Specimen")},
	{ResourceType::Specimen_Collection, Str8Lit("Specimen_Collection")},
	{ResourceType::Specimen_Processing, Str8Lit("Specimen_Processing")},
	{ResourceType::Specimen_Container, Str8Lit("Specimen_Container")},
	{ResourceType::SpecimenDefinition, Str8Lit("SpecimenDefinition")},
	{ResourceType::SpecimenDefinition_TypeTested, Str8Lit("SpecimenDefinition_TypeTested")},
	{ResourceType::SpecimenDefinition_TypeTested_Container, Str8Lit("SpecimenDefinition_TypeTested_Container")},
	{ResourceType::SpecimenDefinition_TypeTested_Container_Additive, Str8Lit("SpecimenDefinition_TypeTested_Container_Additive")},
	{ResourceType::SpecimenDefinition_TypeTested_Handling, Str8Lit("SpecimenDefinition_TypeTested_Handling")},
	{ResourceType::StructureDefinition, Str8Lit("StructureDefinition")},
	{ResourceType::StructureDefinition_Mapping, Str8Lit("StructureDefinition_Mapping")},
	{ResourceType::StructureDefinition_Context, Str8Lit("StructureDefinition_Context")},
	{ResourceType::StructureDefinition_Snapshot, Str8Lit("StructureDefinition_Snapshot")},
	{ResourceType::StructureDefinition_Differential, Str8Lit("StructureDefinition_Differential")},
	{ResourceType::StructureMap, Str8Lit("StructureMap")},
	{ResourceType::StructureMap_Structure, Str8Lit("StructureMap_Structure")},
	{ResourceType::StructureMap_Group, Str8Lit("StructureMap_Group")},
	{ResourceType::StructureMap_Group_Input, Str8Lit("StructureMap_Group_Input")},
	{ResourceType::StructureMap_Group_Rule, Str8Lit("StructureMap_Group_Rule")},
	{ResourceType::StructureMap_Group_Rule_Source, Str8Lit("StructureMap_Group_Rule_Source")},
	{ResourceType::StructureMap_Group_Rule_Target, Str8Lit("StructureMap_Group_Rule_Target")},
	{ResourceType::StructureMap_Group_Rule_Target_Parameter, Str8Lit("StructureMap_Group_Rule_Target_Parameter")},
	{ResourceType::StructureMap_Group_Rule_Dependent, Str8Lit("StructureMap_Group_Rule_Dependent")},
	{ResourceType::Subscription, Str8Lit("Subscription")},
	{ResourceType::Subscription_Channel, Str8Lit("Subscription_Channel")},
	{ResourceType::Substance, Str8Lit("Substance")},
	{ResourceType::Substance_Instance, Str8Lit("Substance_Instance")},
	{ResourceType::Substance_Ingredient, Str8Lit("Substance_Ingredient")},
	{ResourceType::SubstanceNucleicAcid, Str8Lit("SubstanceNucleicAcid")},
	{ResourceType::SubstanceNucleicAcid_Subunit, Str8Lit("SubstanceNucleicAcid_Subunit")},
	{ResourceType::SubstanceNucleicAcid_Subunit_Linkage, Str8Lit("SubstanceNucleicAcid_Subunit_Linkage")},
	{ResourceType::SubstanceNucleicAcid_Subunit_Sugar, Str8Lit("SubstanceNucleicAcid_Subunit_Sugar")},
	{ResourceType::SubstancePolymer, Str8Lit("SubstancePolymer")},
	{ResourceType::SubstancePolymer_MonomerSet, Str8Lit("SubstancePolymer_MonomerSet")},
	{ResourceType::SubstancePolymer_MonomerSet_StartingMaterial, Str8Lit("SubstancePolymer_MonomerSet_StartingMaterial")},
	{ResourceType::SubstancePolymer_Repeat, Str8Lit("SubstancePolymer_Repeat")},
	{ResourceType::SubstancePolymer_Repeat_RepeatUnit, Str8Lit("SubstancePolymer_Repeat_RepeatUnit")},
	{ResourceType::SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, Str8Lit("SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation")},
	{ResourceType::SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation, Str8Lit("SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation")},
	{ResourceType::SubstanceProtein, Str8Lit("SubstanceProtein")},
	{ResourceType::SubstanceProtein_Subunit, Str8Lit("SubstanceProtein_Subunit")},
	{ResourceType::SubstanceReferenceInformation, Str8Lit("SubstanceReferenceInformation")},
	{ResourceType::SubstanceReferenceInformation_Gene, Str8Lit("SubstanceReferenceInformation_Gene")},
	{ResourceType::SubstanceReferenceInformation_GeneElement, Str8Lit("SubstanceReferenceInformation_GeneElement")},
	{ResourceType::SubstanceReferenceInformation_Classification, Str8Lit("SubstanceReferenceInformation_Classification")},
	{ResourceType::SubstanceReferenceInformation_Target, Str8Lit("SubstanceReferenceInformation_Target")},
	{ResourceType::SubstanceSourceMaterial, Str8Lit("SubstanceSourceMaterial")},
	{ResourceType::SubstanceSourceMaterial_FractionDescription, Str8Lit("SubstanceSourceMaterial_FractionDescription")},
	{ResourceType::SubstanceSourceMaterial_Organism, Str8Lit("SubstanceSourceMaterial_Organism")},
	{ResourceType::SubstanceSourceMaterial_Organism_Author, Str8Lit("SubstanceSourceMaterial_Organism_Author")},
	{ResourceType::SubstanceSourceMaterial_Organism_Hybrid, Str8Lit("SubstanceSourceMaterial_Organism_Hybrid")},
	{ResourceType::SubstanceSourceMaterial_Organism_OrganismGeneral, Str8Lit("SubstanceSourceMaterial_Organism_OrganismGeneral")},
	{ResourceType::SubstanceSourceMaterial_PartDescription, Str8Lit("SubstanceSourceMaterial_PartDescription")},
	{ResourceType::SubstanceSpecification, Str8Lit("SubstanceSpecification")},
	{ResourceType::SubstanceSpecification_Moiety, Str8Lit("SubstanceSpecification_Moiety")},
	{ResourceType::SubstanceSpecification_Property, Str8Lit("SubstanceSpecification_Property")},
	{ResourceType::SubstanceSpecification_Structure, Str8Lit("SubstanceSpecification_Structure")},
	{ResourceType::SubstanceSpecification_Structure_Isotope, Str8Lit("SubstanceSpecification_Structure_Isotope")},
	{ResourceType::SubstanceSpecification_Structure_Isotope_MolecularWeight, Str8Lit("SubstanceSpecification_Structure_Isotope_MolecularWeight")},
	{ResourceType::SubstanceSpecification_Structure_Representation, Str8Lit("SubstanceSpecification_Structure_Representation")},
	{ResourceType::SubstanceSpecification_Code, Str8Lit("SubstanceSpecification_Code")},
	{ResourceType::SubstanceSpecification_Name, Str8Lit("SubstanceSpecification_Name")},
	{ResourceType::SubstanceSpecification_Name_Official, Str8Lit("SubstanceSpecification_Name_Official")},
	{ResourceType::SubstanceSpecification_Relationship, Str8Lit("SubstanceSpecification_Relationship")},
	{ResourceType::SupplyDelivery, Str8Lit("SupplyDelivery")},
	{ResourceType::SupplyDelivery_SuppliedItem, Str8Lit("SupplyDelivery_SuppliedItem")},
	{ResourceType::SupplyRequest, Str8Lit("SupplyRequest")},
	{ResourceType::SupplyRequest_Parameter, Str8Lit("SupplyRequest_Parameter")},
	{ResourceType::Task, Str8Lit("Task")},
	{ResourceType::Task_Restriction, Str8Lit("Task_Restriction")},
	{ResourceType::Task_Input, Str8Lit("Task_Input")},
	{ResourceType::Task_Output, Str8Lit("Task_Output")},
	{ResourceType::TerminologyCapabilities, Str8Lit("TerminologyCapabilities")},
	{ResourceType::TerminologyCapabilities_Software, Str8Lit("TerminologyCapabilities_Software")},
	{ResourceType::TerminologyCapabilities_Implementation, Str8Lit("TerminologyCapabilities_Implementation")},
	{ResourceType::TerminologyCapabilities_CodeSystem, Str8Lit("TerminologyCapabilities_CodeSystem")},
	{ResourceType::TerminologyCapabilities_CodeSystem_Version, Str8Lit("TerminologyCapabilities_CodeSystem_Version")},
	{ResourceType::TerminologyCapabilities_CodeSystem_Version_Filter, Str8Lit("TerminologyCapabilities_CodeSystem_Version_Filter")},
	{ResourceType::TerminologyCapabilities_Expansion, Str8Lit("TerminologyCapabilities_Expansion")},
	{ResourceType::TerminologyCapabilities_Expansion_Parameter, Str8Lit("TerminologyCapabilities_Expansion_Parameter")},
	{ResourceType::TerminologyCapabilities_ValidateCode, Str8Lit("TerminologyCapabilities_ValidateCode")},
	{ResourceType::TerminologyCapabilities_Translation, Str8Lit("TerminologyCapabilities_Translation")},
	{ResourceType::TerminologyCapabilities_Closure, Str8Lit("TerminologyCapabilities_Closure")},
	{ResourceType::TestReport, Str8Lit("TestReport")},
	{ResourceType::TestReport_Participant, Str8Lit("TestReport_Participant")},
	{ResourceType::TestReport_Setup, Str8Lit("TestReport_Setup")},
	{ResourceType::TestReport_Setup_Action, Str8Lit("TestReport_Setup_Action")},
	{ResourceType::TestReport_Setup_Action_Operation, Str8Lit("TestReport_Setup_Action_Operation")},
	{ResourceType::TestReport_Setup_Action_Assert, Str8Lit("TestReport_Setup_Action_Assert")},
	{ResourceType::TestReport_Test, Str8Lit("TestReport_Test")},
	{ResourceType::TestReport_Test_Action, Str8Lit("TestReport_Test_Action")},
	{ResourceType::TestReport_Teardown, Str8Lit("TestReport_Teardown")},
	{ResourceType::TestReport_Teardown_Action, Str8Lit("TestReport_Teardown_Action")},
	{ResourceType::TestScript, Str8Lit("TestScript")},
	{ResourceType::TestScript_Origin, Str8Lit("TestScript_Origin")},
	{ResourceType::TestScript_Destination, Str8Lit("TestScript_Destination")},
	{ResourceType::TestScript_Metadata, Str8Lit("TestScript_Metadata")},
	{ResourceType::TestScript_Metadata_Link, Str8Lit("TestScript_Metadata_Link")},
	{ResourceType::TestScript_Metadata_Capability, Str8Lit("TestScript_Metadata_Capability")},
	{ResourceType::TestScript_Fixture, Str8Lit("TestScript_Fixture")},
	{ResourceType::TestScript_Variable, Str8Lit("TestScript_Variable")},
	{ResourceType::TestScript_Setup, Str8Lit("TestScript_Setup")},
	{ResourceType::TestScript_Setup_Action, Str8Lit("TestScript_Setup_Action")},
	{ResourceType::TestScript_Setup_Action_Operation, Str8Lit("TestScript_Setup_Action_Operation")},
	{ResourceType::TestScript_Setup_Action_Operation_RequestHeader, Str8Lit("TestScript_Setup_Action_Operation_RequestHeader")},
	{ResourceType::TestScript_Setup_Action_Assert, Str8Lit("TestScript_Setup_Action_Assert")},
	{ResourceType::TestScript_Test, Str8Lit("TestScript_Test")},
	{ResourceType::TestScript_Test_Action, Str8Lit("TestScript_Test_Action")},
	{ResourceType::TestScript_Teardown, Str8Lit("TestScript_Teardown")},
	{ResourceType::TestScript_Teardown_Action, Str8Lit("TestScript_Teardown_Action")},
	{ResourceType::ValueSet, Str8Lit("ValueSet")},
	{ResourceType::ValueSet_Compose, Str8Lit("ValueSet_Compose")},
	{ResourceType::ValueSet_Compose_Include, Str8Lit("ValueSet_Compose_Include")},
	{ResourceType::ValueSet_Compose_Include_Concept, Str8Lit("ValueSet_Compose_Include_Concept")},
	{ResourceType::ValueSet_Compose_Include_Concept_Designation, Str8Lit("ValueSet_Compose_Include_Concept_Designation")},
	{ResourceType::ValueSet_Compose_Include_Filter, Str8Lit("ValueSet_Compose_Include_Filter")},
	{ResourceType::ValueSet_Expansion, Str8Lit("ValueSet_Expansion")},
	{ResourceType::ValueSet_Expansion_Parameter, Str8Lit("ValueSet_Expansion_Parameter")},
	{ResourceType::ValueSet_Expansion_Contains, Str8Lit("ValueSet_Expansion_Contains")},
	{ResourceType::VerificationResult, Str8Lit("VerificationResult")},
	{ResourceType::VerificationResult_PrimarySource, Str8Lit("VerificationResult_PrimarySource")},
	{ResourceType::VerificationResult_Attestation, Str8Lit("VerificationResult_Attestation")},
	{ResourceType::VerificationResult_Validator, Str8Lit("VerificationResult_Validator")},
	{ResourceType::VisionPrescription, Str8Lit("VisionPrescription")},
	{ResourceType::VisionPrescription_LensSpecification, Str8Lit("VisionPrescription_LensSpecification")},
	{ResourceType::VisionPrescription_LensSpecification_Prism, Str8Lit("VisionPrescription_LensSpecification_Prism")},
	{ResourceType::MetadataResource, Str8Lit("MetadataResource")},
	{ResourceType::Element, Str8Lit("Element")},
	{ResourceType::BackboneElement, Str8Lit("BackboneElement")},
	{ResourceType::Integer, Str8Lit("Integer")},
	{ResourceType::Xhtml, Str8Lit("Xhtml")},
	{ResourceType::Address, Str8Lit("Address")},
	{ResourceType::Age, Str8Lit("Age")},
	{ResourceType::Annotation, Str8Lit("Annotation")},
	{ResourceType::Attachment, Str8Lit("Attachment")},
	{ResourceType::CodeableConcept, Str8Lit("CodeableConcept")},
	{ResourceType::Coding, Str8Lit("Coding")},
	{ResourceType::ContactDetail, Str8Lit("ContactDetail")},
	{ResourceType::ContactPoint, Str8Lit("ContactPoint")},
	{ResourceType::Contributor, Str8Lit("Contributor")},
	{ResourceType::Count, Str8Lit("Count")},
	{ResourceType::DataRequirement, Str8Lit("DataRequirement")},
	{ResourceType::DataRequirement_CodeFilter, Str8Lit("DataRequirement_CodeFilter")},
	{ResourceType::DataRequirement_DateFilter, Str8Lit("DataRequirement_DateFilter")},
	{ResourceType::DataRequirement_Sort, Str8Lit("DataRequirement_Sort")},
	{ResourceType::Distance, Str8Lit("Distance")},
	{ResourceType::Dosage, Str8Lit("Dosage")},
	{ResourceType::Dosage_DoseAndRate, Str8Lit("Dosage_DoseAndRate")},
	{ResourceType::Duration, Str8Lit("Duration")},
	{ResourceType::ElementDefinition, Str8Lit("ElementDefinition")},
	{ResourceType::ElementDefinition_Slicing, Str8Lit("ElementDefinition_Slicing")},
	{ResourceType::ElementDefinition_Slicing_Discriminator, Str8Lit("ElementDefinition_Slicing_Discriminator")},
	{ResourceType::ElementDefinition_Base, Str8Lit("ElementDefinition_Base")},
	{ResourceType::ElementDefinition_Type, Str8Lit("ElementDefinition_Type")},
	{ResourceType::ElementDefinition_Example, Str8Lit("ElementDefinition_Example")},
	{ResourceType::ElementDefinition_Constraint, Str8Lit("ElementDefinition_Constraint")},
	{ResourceType::ElementDefinition_Binding, Str8Lit("ElementDefinition_Binding")},
	{ResourceType::ElementDefinition_Mapping, Str8Lit("ElementDefinition_Mapping")},
	{ResourceType::Expression, Str8Lit("Expression")},
	{ResourceType::Extension, Str8Lit("Extension")},
	{ResourceType::HumanName, Str8Lit("HumanName")},
	{ResourceType::Identifier, Str8Lit("Identifier")},
	{ResourceType::MarketingStatus, Str8Lit("MarketingStatus")},
	{ResourceType::Meta, Str8Lit("Meta")},
	{ResourceType::Money, Str8Lit("Money")},
	{ResourceType::Narrative, Str8Lit("Narrative")},
	{ResourceType::ParameterDefinition, Str8Lit("ParameterDefinition")},
	{ResourceType::Period, Str8Lit("Period")},
	{ResourceType::Population, Str8Lit("Population")},
	{ResourceType::ProdCharacteristic, Str8Lit("ProdCharacteristic")},
	{ResourceType::ProductShelfLife, Str8Lit("ProductShelfLife")},
	{ResourceType::Quantity, Str8Lit("Quantity")},
	{ResourceType::Range, Str8Lit("Range")},
	{ResourceType::Ratio, Str8Lit("Ratio")},
	{ResourceType::Reference, Str8Lit("Reference")},
	{ResourceType::RelatedArtifact, Str8Lit("RelatedArtifact")},
	{ResourceType::SampledData, Str8Lit("SampledData")},
	{ResourceType::Signature, Str8Lit("Signature")},
	{ResourceType::SubstanceAmount, Str8Lit("SubstanceAmount")},
	{ResourceType::SubstanceAmount_ReferenceRange, Str8Lit("SubstanceAmount_ReferenceRange")},
	{ResourceType::Timing, Str8Lit("Timing")},
	{ResourceType::Timing_Repeat, Str8Lit("Timing_Repeat")},
	{ResourceType::TriggerDefinition, Str8Lit("TriggerDefinition")},
	{ResourceType::UsageContext, Str8Lit("UsageContext")},
	{ResourceType::MoneyQuantity, Str8Lit("MoneyQuantity")},
	{ResourceType::SimpleQuantity, Str8Lit("SimpleQuantity")},
	{ResourceType::Shareablemeasure, Str8Lit("Shareablemeasure")},
	{ResourceType::Servicerequest_genetics, Str8Lit("Servicerequest_genetics")},
	{ResourceType::Groupdefinition, Str8Lit("Groupdefinition")},
	{ResourceType::Actualgroup, Str8Lit("Actualgroup")},
	{ResourceType::Familymemberhistory_genetic, Str8Lit("Familymemberhistory_genetic")},
	{ResourceType::Shareableactivitydefinition, Str8Lit("Shareableactivitydefinition")},
	{ResourceType::Cdshooksrequestgroup, Str8Lit("Cdshooksrequestgroup")},
	{ResourceType::Provenance_relevant_history, Str8Lit("Provenance_relevant_history")},
	{ResourceType::Cqf_questionnaire, Str8Lit("Cqf_questionnaire")},
	{ResourceType::Shareablevalueset, Str8Lit("Shareablevalueset")},
	{ResourceType::Picoelement, Str8Lit("Picoelement")},
	{ResourceType::Shareablecodesystem, Str8Lit("Shareablecodesystem")},
	{ResourceType::Cdshooksguidanceresponse, Str8Lit("Cdshooksguidanceresponse")},
	{ResourceType::Devicemetricobservation, Str8Lit("Devicemetricobservation")},
	{ResourceType::Observation_genetics, Str8Lit("Observation_genetics")},
	{ResourceType::Vitalsigns, Str8Lit("Vitalsigns")},
	{ResourceType::Bodyweight, Str8Lit("Bodyweight")},
	{ResourceType::Vitalspanel, Str8Lit("Vitalspanel")},
	{ResourceType::Bodyheight, Str8Lit("Bodyheight")},
	{ResourceType::Resprate, Str8Lit("Resprate")},
	{ResourceType::Heartrate, Str8Lit("Heartrate")},
	{ResourceType::Bodytemp, Str8Lit("Bodytemp")},
	{ResourceType::Headcircum, Str8Lit("Headcircum")},
	{ResourceType::Oxygensat, Str8Lit("Oxygensat")},
	{ResourceType::Bmi, Str8Lit("Bmi")},
	{ResourceType::Bp, Str8Lit("Bp")},
	{ResourceType::Shareablelibrary, Str8Lit("Shareablelibrary")},
	{ResourceType::Cqllibrary, Str8Lit("Cqllibrary")},
	{ResourceType::Lipidprofile, Str8Lit("Lipidprofile")},
	{ResourceType::Cholesterol, Str8Lit("Cholesterol")},
	{ResourceType::Triglyceride, Str8Lit("Triglyceride")},
	{ResourceType::Hdlcholesterol, Str8Lit("Hdlcholesterol")},
	{ResourceType::Ldlcholesterol, Str8Lit("Ldlcholesterol")},
	{ResourceType::Diagnosticreport_genetics, Str8Lit("Diagnosticreport_genetics")},
	{ResourceType::Hlaresult, Str8Lit("Hlaresult")},
	{ResourceType::Synthesis, Str8Lit("Synthesis")},
	{ResourceType::Clinicaldocument, Str8Lit("Clinicaldocument")},
	{ResourceType::Catalog, Str8Lit("Catalog")},
	{ResourceType::Shareableplandefinition, Str8Lit("Shareableplandefinition")},
	{ResourceType::Computableplandefinition, Str8Lit("Computableplandefinition")},
	{ResourceType::Cdshooksserviceplandefinition, Str8Lit("Cdshooksserviceplandefinition")},
	{ResourceType::Elementdefinition_de, Str8Lit("Elementdefinition_de")},
	{ResourceType::Ehrsrle_auditevent, Str8Lit("Ehrsrle_auditevent")},
	{ResourceType::Ehrsrle_provenance, Str8Lit("Ehrsrle_provenance")},
};
//TODO(agw): this really needs to be hashed
ResourceType
ResourceTypeFromString8(String8 str)
{
	for(int i = 0; i < ArrayCount(resource_type_pairs); i++){
		if(Str8Match(str, resource_type_pairs[i].str, 0))
		{
			return resource_type_pairs[i].type;
		}
	}
	return ResourceType::Unknown;
}
Resource*
Deserialize_Resource(Arena *arena, cJSON *resource)
{
	ResourceType resourceType;
	cJSON *cjson_resourceType = cJSON_GetObjectItem(resource, "resourceType");
	if (cjson_resourceType)
	{
		resourceType = ResourceTypeFromString8(Str8C(cJSON_GetStringValue(cjson_resourceType)));
	}
	switch (resourceType) {
		case ResourceType::Resource:
			return (Resource*)Deserialize_Resource(arena, resource);
		case ResourceType::Account:
			return (Resource*)Deserialize_Account(arena, resource);
		case ResourceType::Account_Coverage:
			return (Resource*)Deserialize_Account_Coverage(arena, resource);
		case ResourceType::Account_Guarantor:
			return (Resource*)Deserialize_Account_Guarantor(arena, resource);
		case ResourceType::ActivityDefinition:
			return (Resource*)Deserialize_ActivityDefinition(arena, resource);
		case ResourceType::ActivityDefinition_Participant:
			return (Resource*)Deserialize_ActivityDefinition_Participant(arena, resource);
		case ResourceType::ActivityDefinition_DynamicValue:
			return (Resource*)Deserialize_ActivityDefinition_DynamicValue(arena, resource);
		case ResourceType::AdverseEvent:
			return (Resource*)Deserialize_AdverseEvent(arena, resource);
		case ResourceType::AdverseEvent_SuspectEntity:
			return (Resource*)Deserialize_AdverseEvent_SuspectEntity(arena, resource);
		case ResourceType::AdverseEvent_SuspectEntity_Causality:
			return (Resource*)Deserialize_AdverseEvent_SuspectEntity_Causality(arena, resource);
		case ResourceType::AllergyIntolerance:
			return (Resource*)Deserialize_AllergyIntolerance(arena, resource);
		case ResourceType::AllergyIntolerance_Reaction:
			return (Resource*)Deserialize_AllergyIntolerance_Reaction(arena, resource);
		case ResourceType::Appointment:
			return (Resource*)Deserialize_Appointment(arena, resource);
		case ResourceType::Appointment_Participant:
			return (Resource*)Deserialize_Appointment_Participant(arena, resource);
		case ResourceType::AppointmentResponse:
			return (Resource*)Deserialize_AppointmentResponse(arena, resource);
		case ResourceType::AuditEvent:
			return (Resource*)Deserialize_AuditEvent(arena, resource);
		case ResourceType::AuditEvent_Agent:
			return (Resource*)Deserialize_AuditEvent_Agent(arena, resource);
		case ResourceType::AuditEvent_Agent_Network:
			return (Resource*)Deserialize_AuditEvent_Agent_Network(arena, resource);
		case ResourceType::AuditEvent_Source:
			return (Resource*)Deserialize_AuditEvent_Source(arena, resource);
		case ResourceType::AuditEvent_Entity:
			return (Resource*)Deserialize_AuditEvent_Entity(arena, resource);
		case ResourceType::AuditEvent_Entity_Detail:
			return (Resource*)Deserialize_AuditEvent_Entity_Detail(arena, resource);
		case ResourceType::Basic:
			return (Resource*)Deserialize_Basic(arena, resource);
		case ResourceType::Binary:
			return (Resource*)Deserialize_Binary(arena, resource);
		case ResourceType::BiologicallyDerivedProduct:
			return (Resource*)Deserialize_BiologicallyDerivedProduct(arena, resource);
		case ResourceType::BiologicallyDerivedProduct_Collection:
			return (Resource*)Deserialize_BiologicallyDerivedProduct_Collection(arena, resource);
		case ResourceType::BiologicallyDerivedProduct_Processing:
			return (Resource*)Deserialize_BiologicallyDerivedProduct_Processing(arena, resource);
		case ResourceType::BiologicallyDerivedProduct_Manipulation:
			return (Resource*)Deserialize_BiologicallyDerivedProduct_Manipulation(arena, resource);
		case ResourceType::BiologicallyDerivedProduct_Storage:
			return (Resource*)Deserialize_BiologicallyDerivedProduct_Storage(arena, resource);
		case ResourceType::BodyStructure:
			return (Resource*)Deserialize_BodyStructure(arena, resource);
		case ResourceType::Bundle:
			return (Resource*)Deserialize_Bundle(arena, resource);
		case ResourceType::Bundle_Link:
			return (Resource*)Deserialize_Bundle_Link(arena, resource);
		case ResourceType::Bundle_Entry:
			return (Resource*)Deserialize_Bundle_Entry(arena, resource);
		case ResourceType::Bundle_Entry_Search:
			return (Resource*)Deserialize_Bundle_Entry_Search(arena, resource);
		case ResourceType::Bundle_Entry_Request:
			return (Resource*)Deserialize_Bundle_Entry_Request(arena, resource);
		case ResourceType::Bundle_Entry_Response:
			return (Resource*)Deserialize_Bundle_Entry_Response(arena, resource);
		case ResourceType::CapabilityStatement:
			return (Resource*)Deserialize_CapabilityStatement(arena, resource);
		case ResourceType::CapabilityStatement_Software:
			return (Resource*)Deserialize_CapabilityStatement_Software(arena, resource);
		case ResourceType::CapabilityStatement_Implementation:
			return (Resource*)Deserialize_CapabilityStatement_Implementation(arena, resource);
		case ResourceType::CapabilityStatement_Rest:
			return (Resource*)Deserialize_CapabilityStatement_Rest(arena, resource);
		case ResourceType::CapabilityStatement_Rest_Security:
			return (Resource*)Deserialize_CapabilityStatement_Rest_Security(arena, resource);
		case ResourceType::CapabilityStatement_Rest_Resource:
			return (Resource*)Deserialize_CapabilityStatement_Rest_Resource(arena, resource);
		case ResourceType::CapabilityStatement_Rest_Resource_Interaction:
			return (Resource*)Deserialize_CapabilityStatement_Rest_Resource_Interaction(arena, resource);
		case ResourceType::CapabilityStatement_Rest_Resource_SearchParam:
			return (Resource*)Deserialize_CapabilityStatement_Rest_Resource_SearchParam(arena, resource);
		case ResourceType::CapabilityStatement_Rest_Resource_Operation:
			return (Resource*)Deserialize_CapabilityStatement_Rest_Resource_Operation(arena, resource);
		case ResourceType::CapabilityStatement_Rest_Interaction:
			return (Resource*)Deserialize_CapabilityStatement_Rest_Interaction(arena, resource);
		case ResourceType::CapabilityStatement_Messaging:
			return (Resource*)Deserialize_CapabilityStatement_Messaging(arena, resource);
		case ResourceType::CapabilityStatement_Messaging_Endpoint:
			return (Resource*)Deserialize_CapabilityStatement_Messaging_Endpoint(arena, resource);
		case ResourceType::CapabilityStatement_Messaging_SupportedMessage:
			return (Resource*)Deserialize_CapabilityStatement_Messaging_SupportedMessage(arena, resource);
		case ResourceType::CapabilityStatement_Document:
			return (Resource*)Deserialize_CapabilityStatement_Document(arena, resource);
		case ResourceType::CarePlan:
			return (Resource*)Deserialize_CarePlan(arena, resource);
		case ResourceType::CarePlan_Activity:
			return (Resource*)Deserialize_CarePlan_Activity(arena, resource);
		case ResourceType::CarePlan_Activity_Detail:
			return (Resource*)Deserialize_CarePlan_Activity_Detail(arena, resource);
		case ResourceType::CareTeam:
			return (Resource*)Deserialize_CareTeam(arena, resource);
		case ResourceType::CareTeam_Participant:
			return (Resource*)Deserialize_CareTeam_Participant(arena, resource);
		case ResourceType::CatalogEntry:
			return (Resource*)Deserialize_CatalogEntry(arena, resource);
		case ResourceType::CatalogEntry_RelatedEntry:
			return (Resource*)Deserialize_CatalogEntry_RelatedEntry(arena, resource);
		case ResourceType::ChargeItem:
			return (Resource*)Deserialize_ChargeItem(arena, resource);
		case ResourceType::ChargeItem_Performer:
			return (Resource*)Deserialize_ChargeItem_Performer(arena, resource);
		case ResourceType::ChargeItemDefinition:
			return (Resource*)Deserialize_ChargeItemDefinition(arena, resource);
		case ResourceType::ChargeItemDefinition_Applicability:
			return (Resource*)Deserialize_ChargeItemDefinition_Applicability(arena, resource);
		case ResourceType::ChargeItemDefinition_PropertyGroup:
			return (Resource*)Deserialize_ChargeItemDefinition_PropertyGroup(arena, resource);
		case ResourceType::ChargeItemDefinition_PropertyGroup_PriceComponent:
			return (Resource*)Deserialize_ChargeItemDefinition_PropertyGroup_PriceComponent(arena, resource);
		case ResourceType::Claim:
			return (Resource*)Deserialize_Claim(arena, resource);
		case ResourceType::Claim_Related:
			return (Resource*)Deserialize_Claim_Related(arena, resource);
		case ResourceType::Claim_Payee:
			return (Resource*)Deserialize_Claim_Payee(arena, resource);
		case ResourceType::Claim_CareTeam:
			return (Resource*)Deserialize_Claim_CareTeam(arena, resource);
		case ResourceType::Claim_SupportingInfo:
			return (Resource*)Deserialize_Claim_SupportingInfo(arena, resource);
		case ResourceType::Claim_Diagnosis:
			return (Resource*)Deserialize_Claim_Diagnosis(arena, resource);
		case ResourceType::Claim_Procedure:
			return (Resource*)Deserialize_Claim_Procedure(arena, resource);
		case ResourceType::Claim_Insurance:
			return (Resource*)Deserialize_Claim_Insurance(arena, resource);
		case ResourceType::Claim_Accident:
			return (Resource*)Deserialize_Claim_Accident(arena, resource);
		case ResourceType::Claim_Item:
			return (Resource*)Deserialize_Claim_Item(arena, resource);
		case ResourceType::Claim_Item_Detail:
			return (Resource*)Deserialize_Claim_Item_Detail(arena, resource);
		case ResourceType::Claim_Item_Detail_SubDetail:
			return (Resource*)Deserialize_Claim_Item_Detail_SubDetail(arena, resource);
		case ResourceType::ClaimResponse:
			return (Resource*)Deserialize_ClaimResponse(arena, resource);
		case ResourceType::ClaimResponse_Item:
			return (Resource*)Deserialize_ClaimResponse_Item(arena, resource);
		case ResourceType::ClaimResponse_Item_Adjudication:
			return (Resource*)Deserialize_ClaimResponse_Item_Adjudication(arena, resource);
		case ResourceType::ClaimResponse_Item_Detail:
			return (Resource*)Deserialize_ClaimResponse_Item_Detail(arena, resource);
		case ResourceType::ClaimResponse_Item_Detail_SubDetail:
			return (Resource*)Deserialize_ClaimResponse_Item_Detail_SubDetail(arena, resource);
		case ResourceType::ClaimResponse_AddItem:
			return (Resource*)Deserialize_ClaimResponse_AddItem(arena, resource);
		case ResourceType::ClaimResponse_AddItem_Detail:
			return (Resource*)Deserialize_ClaimResponse_AddItem_Detail(arena, resource);
		case ResourceType::ClaimResponse_AddItem_Detail_SubDetail:
			return (Resource*)Deserialize_ClaimResponse_AddItem_Detail_SubDetail(arena, resource);
		case ResourceType::ClaimResponse_Total:
			return (Resource*)Deserialize_ClaimResponse_Total(arena, resource);
		case ResourceType::ClaimResponse_Payment:
			return (Resource*)Deserialize_ClaimResponse_Payment(arena, resource);
		case ResourceType::ClaimResponse_ProcessNote:
			return (Resource*)Deserialize_ClaimResponse_ProcessNote(arena, resource);
		case ResourceType::ClaimResponse_Insurance:
			return (Resource*)Deserialize_ClaimResponse_Insurance(arena, resource);
		case ResourceType::ClaimResponse_Error:
			return (Resource*)Deserialize_ClaimResponse_Error(arena, resource);
		case ResourceType::ClinicalImpression:
			return (Resource*)Deserialize_ClinicalImpression(arena, resource);
		case ResourceType::ClinicalImpression_Investigation:
			return (Resource*)Deserialize_ClinicalImpression_Investigation(arena, resource);
		case ResourceType::ClinicalImpression_Finding:
			return (Resource*)Deserialize_ClinicalImpression_Finding(arena, resource);
		case ResourceType::CodeSystem:
			return (Resource*)Deserialize_CodeSystem(arena, resource);
		case ResourceType::CodeSystem_Filter:
			return (Resource*)Deserialize_CodeSystem_Filter(arena, resource);
		case ResourceType::CodeSystem_Property:
			return (Resource*)Deserialize_CodeSystem_Property(arena, resource);
		case ResourceType::CodeSystem_Concept:
			return (Resource*)Deserialize_CodeSystem_Concept(arena, resource);
		case ResourceType::CodeSystem_Concept_Designation:
			return (Resource*)Deserialize_CodeSystem_Concept_Designation(arena, resource);
		case ResourceType::CodeSystem_Concept_Property:
			return (Resource*)Deserialize_CodeSystem_Concept_Property(arena, resource);
		case ResourceType::Communication:
			return (Resource*)Deserialize_Communication(arena, resource);
		case ResourceType::Communication_Payload:
			return (Resource*)Deserialize_Communication_Payload(arena, resource);
		case ResourceType::CommunicationRequest:
			return (Resource*)Deserialize_CommunicationRequest(arena, resource);
		case ResourceType::CommunicationRequest_Payload:
			return (Resource*)Deserialize_CommunicationRequest_Payload(arena, resource);
		case ResourceType::CompartmentDefinition:
			return (Resource*)Deserialize_CompartmentDefinition(arena, resource);
		case ResourceType::CompartmentDefinition_Resource:
			return (Resource*)Deserialize_CompartmentDefinition_Resource(arena, resource);
		case ResourceType::Composition:
			return (Resource*)Deserialize_Composition(arena, resource);
		case ResourceType::Composition_Attester:
			return (Resource*)Deserialize_Composition_Attester(arena, resource);
		case ResourceType::Composition_RelatesTo:
			return (Resource*)Deserialize_Composition_RelatesTo(arena, resource);
		case ResourceType::Composition_Event:
			return (Resource*)Deserialize_Composition_Event(arena, resource);
		case ResourceType::Composition_Section:
			return (Resource*)Deserialize_Composition_Section(arena, resource);
		case ResourceType::ConceptMap:
			return (Resource*)Deserialize_ConceptMap(arena, resource);
		case ResourceType::ConceptMap_Group:
			return (Resource*)Deserialize_ConceptMap_Group(arena, resource);
		case ResourceType::ConceptMap_Group_Element:
			return (Resource*)Deserialize_ConceptMap_Group_Element(arena, resource);
		case ResourceType::ConceptMap_Group_Element_Target:
			return (Resource*)Deserialize_ConceptMap_Group_Element_Target(arena, resource);
		case ResourceType::ConceptMap_Group_Element_Target_DependsOn:
			return (Resource*)Deserialize_ConceptMap_Group_Element_Target_DependsOn(arena, resource);
		case ResourceType::ConceptMap_Group_Unmapped:
			return (Resource*)Deserialize_ConceptMap_Group_Unmapped(arena, resource);
		case ResourceType::Condition:
			return (Resource*)Deserialize_Condition(arena, resource);
		case ResourceType::Condition_Stage:
			return (Resource*)Deserialize_Condition_Stage(arena, resource);
		case ResourceType::Condition_Evidence:
			return (Resource*)Deserialize_Condition_Evidence(arena, resource);
		case ResourceType::Consent:
			return (Resource*)Deserialize_Consent(arena, resource);
		case ResourceType::Consent_Policy:
			return (Resource*)Deserialize_Consent_Policy(arena, resource);
		case ResourceType::Consent_Verification:
			return (Resource*)Deserialize_Consent_Verification(arena, resource);
		case ResourceType::Consent_Provision:
			return (Resource*)Deserialize_Consent_Provision(arena, resource);
		case ResourceType::Consent_Provision_Actor:
			return (Resource*)Deserialize_Consent_Provision_Actor(arena, resource);
		case ResourceType::Consent_Provision_Data:
			return (Resource*)Deserialize_Consent_Provision_Data(arena, resource);
		case ResourceType::Contract:
			return (Resource*)Deserialize_Contract(arena, resource);
		case ResourceType::Contract_ContentDefinition:
			return (Resource*)Deserialize_Contract_ContentDefinition(arena, resource);
		case ResourceType::Contract_Term:
			return (Resource*)Deserialize_Contract_Term(arena, resource);
		case ResourceType::Contract_Term_SecurityLabel:
			return (Resource*)Deserialize_Contract_Term_SecurityLabel(arena, resource);
		case ResourceType::Contract_Term_Offer:
			return (Resource*)Deserialize_Contract_Term_Offer(arena, resource);
		case ResourceType::Contract_Term_Offer_Party:
			return (Resource*)Deserialize_Contract_Term_Offer_Party(arena, resource);
		case ResourceType::Contract_Term_Offer_Answer:
			return (Resource*)Deserialize_Contract_Term_Offer_Answer(arena, resource);
		case ResourceType::Contract_Term_Asset:
			return (Resource*)Deserialize_Contract_Term_Asset(arena, resource);
		case ResourceType::Contract_Term_Asset_Context:
			return (Resource*)Deserialize_Contract_Term_Asset_Context(arena, resource);
		case ResourceType::Contract_Term_Asset_ValuedItem:
			return (Resource*)Deserialize_Contract_Term_Asset_ValuedItem(arena, resource);
		case ResourceType::Contract_Term_Action:
			return (Resource*)Deserialize_Contract_Term_Action(arena, resource);
		case ResourceType::Contract_Term_Action_Subject:
			return (Resource*)Deserialize_Contract_Term_Action_Subject(arena, resource);
		case ResourceType::Contract_Signer:
			return (Resource*)Deserialize_Contract_Signer(arena, resource);
		case ResourceType::Contract_Friendly:
			return (Resource*)Deserialize_Contract_Friendly(arena, resource);
		case ResourceType::Contract_Legal:
			return (Resource*)Deserialize_Contract_Legal(arena, resource);
		case ResourceType::Contract_Rule:
			return (Resource*)Deserialize_Contract_Rule(arena, resource);
		case ResourceType::Coverage:
			return (Resource*)Deserialize_Coverage(arena, resource);
		case ResourceType::Coverage_Class:
			return (Resource*)Deserialize_Coverage_Class(arena, resource);
		case ResourceType::Coverage_CostToBeneficiary:
			return (Resource*)Deserialize_Coverage_CostToBeneficiary(arena, resource);
		case ResourceType::Coverage_CostToBeneficiary_Exception:
			return (Resource*)Deserialize_Coverage_CostToBeneficiary_Exception(arena, resource);
		case ResourceType::CoverageEligibilityRequest:
			return (Resource*)Deserialize_CoverageEligibilityRequest(arena, resource);
		case ResourceType::CoverageEligibilityRequest_SupportingInfo:
			return (Resource*)Deserialize_CoverageEligibilityRequest_SupportingInfo(arena, resource);
		case ResourceType::CoverageEligibilityRequest_Insurance:
			return (Resource*)Deserialize_CoverageEligibilityRequest_Insurance(arena, resource);
		case ResourceType::CoverageEligibilityRequest_Item:
			return (Resource*)Deserialize_CoverageEligibilityRequest_Item(arena, resource);
		case ResourceType::CoverageEligibilityRequest_Item_Diagnosis:
			return (Resource*)Deserialize_CoverageEligibilityRequest_Item_Diagnosis(arena, resource);
		case ResourceType::CoverageEligibilityResponse:
			return (Resource*)Deserialize_CoverageEligibilityResponse(arena, resource);
		case ResourceType::CoverageEligibilityResponse_Insurance:
			return (Resource*)Deserialize_CoverageEligibilityResponse_Insurance(arena, resource);
		case ResourceType::CoverageEligibilityResponse_Insurance_Item:
			return (Resource*)Deserialize_CoverageEligibilityResponse_Insurance_Item(arena, resource);
		case ResourceType::CoverageEligibilityResponse_Insurance_Item_Benefit:
			return (Resource*)Deserialize_CoverageEligibilityResponse_Insurance_Item_Benefit(arena, resource);
		case ResourceType::CoverageEligibilityResponse_Error:
			return (Resource*)Deserialize_CoverageEligibilityResponse_Error(arena, resource);
		case ResourceType::DetectedIssue:
			return (Resource*)Deserialize_DetectedIssue(arena, resource);
		case ResourceType::DetectedIssue_Evidence:
			return (Resource*)Deserialize_DetectedIssue_Evidence(arena, resource);
		case ResourceType::DetectedIssue_Mitigation:
			return (Resource*)Deserialize_DetectedIssue_Mitigation(arena, resource);
		case ResourceType::Device:
			return (Resource*)Deserialize_Device(arena, resource);
		case ResourceType::Device_UdiCarrier:
			return (Resource*)Deserialize_Device_UdiCarrier(arena, resource);
		case ResourceType::Device_DeviceName:
			return (Resource*)Deserialize_Device_DeviceName(arena, resource);
		case ResourceType::Device_Specialization:
			return (Resource*)Deserialize_Device_Specialization(arena, resource);
		case ResourceType::Device_Version:
			return (Resource*)Deserialize_Device_Version(arena, resource);
		case ResourceType::Device_Property:
			return (Resource*)Deserialize_Device_Property(arena, resource);
		case ResourceType::DeviceDefinition:
			return (Resource*)Deserialize_DeviceDefinition(arena, resource);
		case ResourceType::DeviceDefinition_UdiDeviceIdentifier:
			return (Resource*)Deserialize_DeviceDefinition_UdiDeviceIdentifier(arena, resource);
		case ResourceType::DeviceDefinition_DeviceName:
			return (Resource*)Deserialize_DeviceDefinition_DeviceName(arena, resource);
		case ResourceType::DeviceDefinition_Specialization:
			return (Resource*)Deserialize_DeviceDefinition_Specialization(arena, resource);
		case ResourceType::DeviceDefinition_Capability:
			return (Resource*)Deserialize_DeviceDefinition_Capability(arena, resource);
		case ResourceType::DeviceDefinition_Property:
			return (Resource*)Deserialize_DeviceDefinition_Property(arena, resource);
		case ResourceType::DeviceDefinition_Material:
			return (Resource*)Deserialize_DeviceDefinition_Material(arena, resource);
		case ResourceType::DeviceMetric:
			return (Resource*)Deserialize_DeviceMetric(arena, resource);
		case ResourceType::DeviceMetric_Calibration:
			return (Resource*)Deserialize_DeviceMetric_Calibration(arena, resource);
		case ResourceType::DeviceRequest:
			return (Resource*)Deserialize_DeviceRequest(arena, resource);
		case ResourceType::DeviceRequest_Parameter:
			return (Resource*)Deserialize_DeviceRequest_Parameter(arena, resource);
		case ResourceType::DeviceUseStatement:
			return (Resource*)Deserialize_DeviceUseStatement(arena, resource);
		case ResourceType::DiagnosticReport:
			return (Resource*)Deserialize_DiagnosticReport(arena, resource);
		case ResourceType::DiagnosticReport_Media:
			return (Resource*)Deserialize_DiagnosticReport_Media(arena, resource);
		case ResourceType::DocumentManifest:
			return (Resource*)Deserialize_DocumentManifest(arena, resource);
		case ResourceType::DocumentManifest_Related:
			return (Resource*)Deserialize_DocumentManifest_Related(arena, resource);
		case ResourceType::DocumentReference:
			return (Resource*)Deserialize_DocumentReference(arena, resource);
		case ResourceType::DocumentReference_RelatesTo:
			return (Resource*)Deserialize_DocumentReference_RelatesTo(arena, resource);
		case ResourceType::DocumentReference_Content:
			return (Resource*)Deserialize_DocumentReference_Content(arena, resource);
		case ResourceType::DocumentReference_Context:
			return (Resource*)Deserialize_DocumentReference_Context(arena, resource);
		case ResourceType::DomainResource:
			return (Resource*)Deserialize_DomainResource(arena, resource);
		case ResourceType::EffectEvidenceSynthesis:
			return (Resource*)Deserialize_EffectEvidenceSynthesis(arena, resource);
		case ResourceType::EffectEvidenceSynthesis_SampleSize:
			return (Resource*)Deserialize_EffectEvidenceSynthesis_SampleSize(arena, resource);
		case ResourceType::EffectEvidenceSynthesis_ResultsByExposure:
			return (Resource*)Deserialize_EffectEvidenceSynthesis_ResultsByExposure(arena, resource);
		case ResourceType::EffectEvidenceSynthesis_EffectEstimate:
			return (Resource*)Deserialize_EffectEvidenceSynthesis_EffectEstimate(arena, resource);
		case ResourceType::EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate:
			return (Resource*)Deserialize_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate(arena, resource);
		case ResourceType::EffectEvidenceSynthesis_Certainty:
			return (Resource*)Deserialize_EffectEvidenceSynthesis_Certainty(arena, resource);
		case ResourceType::EffectEvidenceSynthesis_Certainty_CertaintySubcomponent:
			return (Resource*)Deserialize_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, resource);
		case ResourceType::Encounter:
			return (Resource*)Deserialize_Encounter(arena, resource);
		case ResourceType::Encounter_StatusHistory:
			return (Resource*)Deserialize_Encounter_StatusHistory(arena, resource);
		case ResourceType::Encounter_ClassHistory:
			return (Resource*)Deserialize_Encounter_ClassHistory(arena, resource);
		case ResourceType::Encounter_Participant:
			return (Resource*)Deserialize_Encounter_Participant(arena, resource);
		case ResourceType::Encounter_Diagnosis:
			return (Resource*)Deserialize_Encounter_Diagnosis(arena, resource);
		case ResourceType::Encounter_Hospitalization:
			return (Resource*)Deserialize_Encounter_Hospitalization(arena, resource);
		case ResourceType::Encounter_Location:
			return (Resource*)Deserialize_Encounter_Location(arena, resource);
		case ResourceType::Endpoint:
			return (Resource*)Deserialize_Endpoint(arena, resource);
		case ResourceType::EnrollmentRequest:
			return (Resource*)Deserialize_EnrollmentRequest(arena, resource);
		case ResourceType::EnrollmentResponse:
			return (Resource*)Deserialize_EnrollmentResponse(arena, resource);
		case ResourceType::EpisodeOfCare:
			return (Resource*)Deserialize_EpisodeOfCare(arena, resource);
		case ResourceType::EpisodeOfCare_StatusHistory:
			return (Resource*)Deserialize_EpisodeOfCare_StatusHistory(arena, resource);
		case ResourceType::EpisodeOfCare_Diagnosis:
			return (Resource*)Deserialize_EpisodeOfCare_Diagnosis(arena, resource);
		case ResourceType::EventDefinition:
			return (Resource*)Deserialize_EventDefinition(arena, resource);
		case ResourceType::Evidence:
			return (Resource*)Deserialize_Evidence(arena, resource);
		case ResourceType::EvidenceVariable:
			return (Resource*)Deserialize_EvidenceVariable(arena, resource);
		case ResourceType::EvidenceVariable_Characteristic:
			return (Resource*)Deserialize_EvidenceVariable_Characteristic(arena, resource);
		case ResourceType::ExampleScenario:
			return (Resource*)Deserialize_ExampleScenario(arena, resource);
		case ResourceType::ExampleScenario_Actor:
			return (Resource*)Deserialize_ExampleScenario_Actor(arena, resource);
		case ResourceType::ExampleScenario_Instance:
			return (Resource*)Deserialize_ExampleScenario_Instance(arena, resource);
		case ResourceType::ExampleScenario_Instance_Version:
			return (Resource*)Deserialize_ExampleScenario_Instance_Version(arena, resource);
		case ResourceType::ExampleScenario_Instance_ContainedInstance:
			return (Resource*)Deserialize_ExampleScenario_Instance_ContainedInstance(arena, resource);
		case ResourceType::ExampleScenario_Process:
			return (Resource*)Deserialize_ExampleScenario_Process(arena, resource);
		case ResourceType::ExampleScenario_Process_Step:
			return (Resource*)Deserialize_ExampleScenario_Process_Step(arena, resource);
		case ResourceType::ExampleScenario_Process_Step_Operation:
			return (Resource*)Deserialize_ExampleScenario_Process_Step_Operation(arena, resource);
		case ResourceType::ExampleScenario_Process_Step_Alternative:
			return (Resource*)Deserialize_ExampleScenario_Process_Step_Alternative(arena, resource);
		case ResourceType::ExplanationOfBenefit:
			return (Resource*)Deserialize_ExplanationOfBenefit(arena, resource);
		case ResourceType::ExplanationOfBenefit_Related:
			return (Resource*)Deserialize_ExplanationOfBenefit_Related(arena, resource);
		case ResourceType::ExplanationOfBenefit_Payee:
			return (Resource*)Deserialize_ExplanationOfBenefit_Payee(arena, resource);
		case ResourceType::ExplanationOfBenefit_CareTeam:
			return (Resource*)Deserialize_ExplanationOfBenefit_CareTeam(arena, resource);
		case ResourceType::ExplanationOfBenefit_SupportingInfo:
			return (Resource*)Deserialize_ExplanationOfBenefit_SupportingInfo(arena, resource);
		case ResourceType::ExplanationOfBenefit_Diagnosis:
			return (Resource*)Deserialize_ExplanationOfBenefit_Diagnosis(arena, resource);
		case ResourceType::ExplanationOfBenefit_Procedure:
			return (Resource*)Deserialize_ExplanationOfBenefit_Procedure(arena, resource);
		case ResourceType::ExplanationOfBenefit_Insurance:
			return (Resource*)Deserialize_ExplanationOfBenefit_Insurance(arena, resource);
		case ResourceType::ExplanationOfBenefit_Accident:
			return (Resource*)Deserialize_ExplanationOfBenefit_Accident(arena, resource);
		case ResourceType::ExplanationOfBenefit_Item:
			return (Resource*)Deserialize_ExplanationOfBenefit_Item(arena, resource);
		case ResourceType::ExplanationOfBenefit_Item_Adjudication:
			return (Resource*)Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, resource);
		case ResourceType::ExplanationOfBenefit_Item_Detail:
			return (Resource*)Deserialize_ExplanationOfBenefit_Item_Detail(arena, resource);
		case ResourceType::ExplanationOfBenefit_Item_Detail_SubDetail:
			return (Resource*)Deserialize_ExplanationOfBenefit_Item_Detail_SubDetail(arena, resource);
		case ResourceType::ExplanationOfBenefit_AddItem:
			return (Resource*)Deserialize_ExplanationOfBenefit_AddItem(arena, resource);
		case ResourceType::ExplanationOfBenefit_AddItem_Detail:
			return (Resource*)Deserialize_ExplanationOfBenefit_AddItem_Detail(arena, resource);
		case ResourceType::ExplanationOfBenefit_AddItem_Detail_SubDetail:
			return (Resource*)Deserialize_ExplanationOfBenefit_AddItem_Detail_SubDetail(arena, resource);
		case ResourceType::ExplanationOfBenefit_Total:
			return (Resource*)Deserialize_ExplanationOfBenefit_Total(arena, resource);
		case ResourceType::ExplanationOfBenefit_Payment:
			return (Resource*)Deserialize_ExplanationOfBenefit_Payment(arena, resource);
		case ResourceType::ExplanationOfBenefit_ProcessNote:
			return (Resource*)Deserialize_ExplanationOfBenefit_ProcessNote(arena, resource);
		case ResourceType::ExplanationOfBenefit_BenefitBalance:
			return (Resource*)Deserialize_ExplanationOfBenefit_BenefitBalance(arena, resource);
		case ResourceType::ExplanationOfBenefit_BenefitBalance_Financial:
			return (Resource*)Deserialize_ExplanationOfBenefit_BenefitBalance_Financial(arena, resource);
		case ResourceType::FamilyMemberHistory:
			return (Resource*)Deserialize_FamilyMemberHistory(arena, resource);
		case ResourceType::FamilyMemberHistory_Condition:
			return (Resource*)Deserialize_FamilyMemberHistory_Condition(arena, resource);
		case ResourceType::Flag:
			return (Resource*)Deserialize_Flag(arena, resource);
		case ResourceType::Goal:
			return (Resource*)Deserialize_Goal(arena, resource);
		case ResourceType::Goal_Target:
			return (Resource*)Deserialize_Goal_Target(arena, resource);
		case ResourceType::GraphDefinition:
			return (Resource*)Deserialize_GraphDefinition(arena, resource);
		case ResourceType::GraphDefinition_Link:
			return (Resource*)Deserialize_GraphDefinition_Link(arena, resource);
		case ResourceType::GraphDefinition_Link_Target:
			return (Resource*)Deserialize_GraphDefinition_Link_Target(arena, resource);
		case ResourceType::GraphDefinition_Link_Target_Compartment:
			return (Resource*)Deserialize_GraphDefinition_Link_Target_Compartment(arena, resource);
		case ResourceType::Group:
			return (Resource*)Deserialize_Group(arena, resource);
		case ResourceType::Group_Characteristic:
			return (Resource*)Deserialize_Group_Characteristic(arena, resource);
		case ResourceType::Group_Member:
			return (Resource*)Deserialize_Group_Member(arena, resource);
		case ResourceType::GuidanceResponse:
			return (Resource*)Deserialize_GuidanceResponse(arena, resource);
		case ResourceType::HealthcareService:
			return (Resource*)Deserialize_HealthcareService(arena, resource);
		case ResourceType::HealthcareService_Eligibility:
			return (Resource*)Deserialize_HealthcareService_Eligibility(arena, resource);
		case ResourceType::HealthcareService_AvailableTime:
			return (Resource*)Deserialize_HealthcareService_AvailableTime(arena, resource);
		case ResourceType::HealthcareService_NotAvailable:
			return (Resource*)Deserialize_HealthcareService_NotAvailable(arena, resource);
		case ResourceType::ImagingStudy:
			return (Resource*)Deserialize_ImagingStudy(arena, resource);
		case ResourceType::ImagingStudy_Series:
			return (Resource*)Deserialize_ImagingStudy_Series(arena, resource);
		case ResourceType::ImagingStudy_Series_Performer:
			return (Resource*)Deserialize_ImagingStudy_Series_Performer(arena, resource);
		case ResourceType::ImagingStudy_Series_Instance:
			return (Resource*)Deserialize_ImagingStudy_Series_Instance(arena, resource);
		case ResourceType::Immunization:
			return (Resource*)Deserialize_Immunization(arena, resource);
		case ResourceType::Immunization_Performer:
			return (Resource*)Deserialize_Immunization_Performer(arena, resource);
		case ResourceType::Immunization_Education:
			return (Resource*)Deserialize_Immunization_Education(arena, resource);
		case ResourceType::Immunization_Reaction:
			return (Resource*)Deserialize_Immunization_Reaction(arena, resource);
		case ResourceType::Immunization_ProtocolApplied:
			return (Resource*)Deserialize_Immunization_ProtocolApplied(arena, resource);
		case ResourceType::ImmunizationEvaluation:
			return (Resource*)Deserialize_ImmunizationEvaluation(arena, resource);
		case ResourceType::ImmunizationRecommendation:
			return (Resource*)Deserialize_ImmunizationRecommendation(arena, resource);
		case ResourceType::ImmunizationRecommendation_Recommendation:
			return (Resource*)Deserialize_ImmunizationRecommendation_Recommendation(arena, resource);
		case ResourceType::ImmunizationRecommendation_Recommendation_DateCriterion:
			return (Resource*)Deserialize_ImmunizationRecommendation_Recommendation_DateCriterion(arena, resource);
		case ResourceType::ImplementationGuide:
			return (Resource*)Deserialize_ImplementationGuide(arena, resource);
		case ResourceType::ImplementationGuide_DependsOn:
			return (Resource*)Deserialize_ImplementationGuide_DependsOn(arena, resource);
		case ResourceType::ImplementationGuide_Global:
			return (Resource*)Deserialize_ImplementationGuide_Global(arena, resource);
		case ResourceType::ImplementationGuide_Definition:
			return (Resource*)Deserialize_ImplementationGuide_Definition(arena, resource);
		case ResourceType::ImplementationGuide_Definition_Grouping:
			return (Resource*)Deserialize_ImplementationGuide_Definition_Grouping(arena, resource);
		case ResourceType::ImplementationGuide_Definition_Resource:
			return (Resource*)Deserialize_ImplementationGuide_Definition_Resource(arena, resource);
		case ResourceType::ImplementationGuide_Definition_Page:
			return (Resource*)Deserialize_ImplementationGuide_Definition_Page(arena, resource);
		case ResourceType::ImplementationGuide_Definition_Parameter:
			return (Resource*)Deserialize_ImplementationGuide_Definition_Parameter(arena, resource);
		case ResourceType::ImplementationGuide_Definition_Template:
			return (Resource*)Deserialize_ImplementationGuide_Definition_Template(arena, resource);
		case ResourceType::ImplementationGuide_Manifest:
			return (Resource*)Deserialize_ImplementationGuide_Manifest(arena, resource);
		case ResourceType::ImplementationGuide_Manifest_Resource:
			return (Resource*)Deserialize_ImplementationGuide_Manifest_Resource(arena, resource);
		case ResourceType::ImplementationGuide_Manifest_Page:
			return (Resource*)Deserialize_ImplementationGuide_Manifest_Page(arena, resource);
		case ResourceType::InsurancePlan:
			return (Resource*)Deserialize_InsurancePlan(arena, resource);
		case ResourceType::InsurancePlan_Contact:
			return (Resource*)Deserialize_InsurancePlan_Contact(arena, resource);
		case ResourceType::InsurancePlan_Coverage:
			return (Resource*)Deserialize_InsurancePlan_Coverage(arena, resource);
		case ResourceType::InsurancePlan_Coverage_Benefit:
			return (Resource*)Deserialize_InsurancePlan_Coverage_Benefit(arena, resource);
		case ResourceType::InsurancePlan_Coverage_Benefit_Limit:
			return (Resource*)Deserialize_InsurancePlan_Coverage_Benefit_Limit(arena, resource);
		case ResourceType::InsurancePlan_Plan:
			return (Resource*)Deserialize_InsurancePlan_Plan(arena, resource);
		case ResourceType::InsurancePlan_Plan_GeneralCost:
			return (Resource*)Deserialize_InsurancePlan_Plan_GeneralCost(arena, resource);
		case ResourceType::InsurancePlan_Plan_SpecificCost:
			return (Resource*)Deserialize_InsurancePlan_Plan_SpecificCost(arena, resource);
		case ResourceType::InsurancePlan_Plan_SpecificCost_Benefit:
			return (Resource*)Deserialize_InsurancePlan_Plan_SpecificCost_Benefit(arena, resource);
		case ResourceType::InsurancePlan_Plan_SpecificCost_Benefit_Cost:
			return (Resource*)Deserialize_InsurancePlan_Plan_SpecificCost_Benefit_Cost(arena, resource);
		case ResourceType::Invoice:
			return (Resource*)Deserialize_Invoice(arena, resource);
		case ResourceType::Invoice_Participant:
			return (Resource*)Deserialize_Invoice_Participant(arena, resource);
		case ResourceType::Invoice_LineItem:
			return (Resource*)Deserialize_Invoice_LineItem(arena, resource);
		case ResourceType::Invoice_LineItem_PriceComponent:
			return (Resource*)Deserialize_Invoice_LineItem_PriceComponent(arena, resource);
		case ResourceType::Library:
			return (Resource*)Deserialize_Library(arena, resource);
		case ResourceType::Linkage:
			return (Resource*)Deserialize_Linkage(arena, resource);
		case ResourceType::Linkage_Item:
			return (Resource*)Deserialize_Linkage_Item(arena, resource);
		case ResourceType::List:
			return (Resource*)Deserialize_List(arena, resource);
		case ResourceType::List_Entry:
			return (Resource*)Deserialize_List_Entry(arena, resource);
		case ResourceType::Location:
			return (Resource*)Deserialize_Location(arena, resource);
		case ResourceType::Location_Position:
			return (Resource*)Deserialize_Location_Position(arena, resource);
		case ResourceType::Location_HoursOfOperation:
			return (Resource*)Deserialize_Location_HoursOfOperation(arena, resource);
		case ResourceType::Measure:
			return (Resource*)Deserialize_Measure(arena, resource);
		case ResourceType::Measure_Group:
			return (Resource*)Deserialize_Measure_Group(arena, resource);
		case ResourceType::Measure_Group_Population:
			return (Resource*)Deserialize_Measure_Group_Population(arena, resource);
		case ResourceType::Measure_Group_Stratifier:
			return (Resource*)Deserialize_Measure_Group_Stratifier(arena, resource);
		case ResourceType::Measure_Group_Stratifier_Component:
			return (Resource*)Deserialize_Measure_Group_Stratifier_Component(arena, resource);
		case ResourceType::Measure_SupplementalData:
			return (Resource*)Deserialize_Measure_SupplementalData(arena, resource);
		case ResourceType::MeasureReport:
			return (Resource*)Deserialize_MeasureReport(arena, resource);
		case ResourceType::MeasureReport_Group:
			return (Resource*)Deserialize_MeasureReport_Group(arena, resource);
		case ResourceType::MeasureReport_Group_Population:
			return (Resource*)Deserialize_MeasureReport_Group_Population(arena, resource);
		case ResourceType::MeasureReport_Group_Stratifier:
			return (Resource*)Deserialize_MeasureReport_Group_Stratifier(arena, resource);
		case ResourceType::MeasureReport_Group_Stratifier_Stratum:
			return (Resource*)Deserialize_MeasureReport_Group_Stratifier_Stratum(arena, resource);
		case ResourceType::MeasureReport_Group_Stratifier_Stratum_Component:
			return (Resource*)Deserialize_MeasureReport_Group_Stratifier_Stratum_Component(arena, resource);
		case ResourceType::MeasureReport_Group_Stratifier_Stratum_Population:
			return (Resource*)Deserialize_MeasureReport_Group_Stratifier_Stratum_Population(arena, resource);
		case ResourceType::Media:
			return (Resource*)Deserialize_Media(arena, resource);
		case ResourceType::Medication:
			return (Resource*)Deserialize_Medication(arena, resource);
		case ResourceType::Medication_Ingredient:
			return (Resource*)Deserialize_Medication_Ingredient(arena, resource);
		case ResourceType::Medication_Batch:
			return (Resource*)Deserialize_Medication_Batch(arena, resource);
		case ResourceType::MedicationAdministration:
			return (Resource*)Deserialize_MedicationAdministration(arena, resource);
		case ResourceType::MedicationAdministration_Performer:
			return (Resource*)Deserialize_MedicationAdministration_Performer(arena, resource);
		case ResourceType::MedicationAdministration_Dosage:
			return (Resource*)Deserialize_MedicationAdministration_Dosage(arena, resource);
		case ResourceType::MedicationDispense:
			return (Resource*)Deserialize_MedicationDispense(arena, resource);
		case ResourceType::MedicationDispense_Performer:
			return (Resource*)Deserialize_MedicationDispense_Performer(arena, resource);
		case ResourceType::MedicationDispense_Substitution:
			return (Resource*)Deserialize_MedicationDispense_Substitution(arena, resource);
		case ResourceType::MedicationKnowledge:
			return (Resource*)Deserialize_MedicationKnowledge(arena, resource);
		case ResourceType::MedicationKnowledge_RelatedMedicationKnowledge:
			return (Resource*)Deserialize_MedicationKnowledge_RelatedMedicationKnowledge(arena, resource);
		case ResourceType::MedicationKnowledge_Monograph:
			return (Resource*)Deserialize_MedicationKnowledge_Monograph(arena, resource);
		case ResourceType::MedicationKnowledge_Ingredient:
			return (Resource*)Deserialize_MedicationKnowledge_Ingredient(arena, resource);
		case ResourceType::MedicationKnowledge_Cost:
			return (Resource*)Deserialize_MedicationKnowledge_Cost(arena, resource);
		case ResourceType::MedicationKnowledge_MonitoringProgram:
			return (Resource*)Deserialize_MedicationKnowledge_MonitoringProgram(arena, resource);
		case ResourceType::MedicationKnowledge_AdministrationGuidelines:
			return (Resource*)Deserialize_MedicationKnowledge_AdministrationGuidelines(arena, resource);
		case ResourceType::MedicationKnowledge_AdministrationGuidelines_Dosage:
			return (Resource*)Deserialize_MedicationKnowledge_AdministrationGuidelines_Dosage(arena, resource);
		case ResourceType::MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics:
			return (Resource*)Deserialize_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics(arena, resource);
		case ResourceType::MedicationKnowledge_MedicineClassification:
			return (Resource*)Deserialize_MedicationKnowledge_MedicineClassification(arena, resource);
		case ResourceType::MedicationKnowledge_Packaging:
			return (Resource*)Deserialize_MedicationKnowledge_Packaging(arena, resource);
		case ResourceType::MedicationKnowledge_DrugCharacteristic:
			return (Resource*)Deserialize_MedicationKnowledge_DrugCharacteristic(arena, resource);
		case ResourceType::MedicationKnowledge_Regulatory:
			return (Resource*)Deserialize_MedicationKnowledge_Regulatory(arena, resource);
		case ResourceType::MedicationKnowledge_Regulatory_Substitution:
			return (Resource*)Deserialize_MedicationKnowledge_Regulatory_Substitution(arena, resource);
		case ResourceType::MedicationKnowledge_Regulatory_Schedule:
			return (Resource*)Deserialize_MedicationKnowledge_Regulatory_Schedule(arena, resource);
		case ResourceType::MedicationKnowledge_Regulatory_MaxDispense:
			return (Resource*)Deserialize_MedicationKnowledge_Regulatory_MaxDispense(arena, resource);
		case ResourceType::MedicationKnowledge_Kinetics:
			return (Resource*)Deserialize_MedicationKnowledge_Kinetics(arena, resource);
		case ResourceType::MedicationRequest:
			return (Resource*)Deserialize_MedicationRequest(arena, resource);
		case ResourceType::MedicationRequest_DispenseRequest:
			return (Resource*)Deserialize_MedicationRequest_DispenseRequest(arena, resource);
		case ResourceType::MedicationRequest_DispenseRequest_InitialFill:
			return (Resource*)Deserialize_MedicationRequest_DispenseRequest_InitialFill(arena, resource);
		case ResourceType::MedicationRequest_Substitution:
			return (Resource*)Deserialize_MedicationRequest_Substitution(arena, resource);
		case ResourceType::MedicationStatement:
			return (Resource*)Deserialize_MedicationStatement(arena, resource);
		case ResourceType::MedicinalProduct:
			return (Resource*)Deserialize_MedicinalProduct(arena, resource);
		case ResourceType::MedicinalProduct_Name:
			return (Resource*)Deserialize_MedicinalProduct_Name(arena, resource);
		case ResourceType::MedicinalProduct_Name_NamePart:
			return (Resource*)Deserialize_MedicinalProduct_Name_NamePart(arena, resource);
		case ResourceType::MedicinalProduct_Name_CountryLanguage:
			return (Resource*)Deserialize_MedicinalProduct_Name_CountryLanguage(arena, resource);
		case ResourceType::MedicinalProduct_ManufacturingBusinessOperation:
			return (Resource*)Deserialize_MedicinalProduct_ManufacturingBusinessOperation(arena, resource);
		case ResourceType::MedicinalProduct_SpecialDesignation:
			return (Resource*)Deserialize_MedicinalProduct_SpecialDesignation(arena, resource);
		case ResourceType::MedicinalProductAuthorization:
			return (Resource*)Deserialize_MedicinalProductAuthorization(arena, resource);
		case ResourceType::MedicinalProductAuthorization_JurisdictionalAuthorization:
			return (Resource*)Deserialize_MedicinalProductAuthorization_JurisdictionalAuthorization(arena, resource);
		case ResourceType::MedicinalProductAuthorization_Procedure:
			return (Resource*)Deserialize_MedicinalProductAuthorization_Procedure(arena, resource);
		case ResourceType::MedicinalProductContraindication:
			return (Resource*)Deserialize_MedicinalProductContraindication(arena, resource);
		case ResourceType::MedicinalProductContraindication_OtherTherapy:
			return (Resource*)Deserialize_MedicinalProductContraindication_OtherTherapy(arena, resource);
		case ResourceType::MedicinalProductIndication:
			return (Resource*)Deserialize_MedicinalProductIndication(arena, resource);
		case ResourceType::MedicinalProductIndication_OtherTherapy:
			return (Resource*)Deserialize_MedicinalProductIndication_OtherTherapy(arena, resource);
		case ResourceType::MedicinalProductIngredient:
			return (Resource*)Deserialize_MedicinalProductIngredient(arena, resource);
		case ResourceType::MedicinalProductIngredient_SpecifiedSubstance:
			return (Resource*)Deserialize_MedicinalProductIngredient_SpecifiedSubstance(arena, resource);
		case ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength:
			return (Resource*)Deserialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(arena, resource);
		case ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength:
			return (Resource*)Deserialize_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength(arena, resource);
		case ResourceType::MedicinalProductIngredient_Substance:
			return (Resource*)Deserialize_MedicinalProductIngredient_Substance(arena, resource);
		case ResourceType::MedicinalProductInteraction:
			return (Resource*)Deserialize_MedicinalProductInteraction(arena, resource);
		case ResourceType::MedicinalProductInteraction_Interactant:
			return (Resource*)Deserialize_MedicinalProductInteraction_Interactant(arena, resource);
		case ResourceType::MedicinalProductManufactured:
			return (Resource*)Deserialize_MedicinalProductManufactured(arena, resource);
		case ResourceType::MedicinalProductPackaged:
			return (Resource*)Deserialize_MedicinalProductPackaged(arena, resource);
		case ResourceType::MedicinalProductPackaged_BatchIdentifier:
			return (Resource*)Deserialize_MedicinalProductPackaged_BatchIdentifier(arena, resource);
		case ResourceType::MedicinalProductPackaged_PackageItem:
			return (Resource*)Deserialize_MedicinalProductPackaged_PackageItem(arena, resource);
		case ResourceType::MedicinalProductPharmaceutical:
			return (Resource*)Deserialize_MedicinalProductPharmaceutical(arena, resource);
		case ResourceType::MedicinalProductPharmaceutical_Characteristics:
			return (Resource*)Deserialize_MedicinalProductPharmaceutical_Characteristics(arena, resource);
		case ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration:
			return (Resource*)Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration(arena, resource);
		case ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies:
			return (Resource*)Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies(arena, resource);
		case ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod:
			return (Resource*)Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod(arena, resource);
		case ResourceType::MedicinalProductUndesirableEffect:
			return (Resource*)Deserialize_MedicinalProductUndesirableEffect(arena, resource);
		case ResourceType::MessageDefinition:
			return (Resource*)Deserialize_MessageDefinition(arena, resource);
		case ResourceType::MessageDefinition_Focus:
			return (Resource*)Deserialize_MessageDefinition_Focus(arena, resource);
		case ResourceType::MessageDefinition_AllowedResponse:
			return (Resource*)Deserialize_MessageDefinition_AllowedResponse(arena, resource);
		case ResourceType::MessageHeader:
			return (Resource*)Deserialize_MessageHeader(arena, resource);
		case ResourceType::MessageHeader_Destination:
			return (Resource*)Deserialize_MessageHeader_Destination(arena, resource);
		case ResourceType::MessageHeader_Source:
			return (Resource*)Deserialize_MessageHeader_Source(arena, resource);
		case ResourceType::MessageHeader_Response:
			return (Resource*)Deserialize_MessageHeader_Response(arena, resource);
		case ResourceType::MolecularSequence:
			return (Resource*)Deserialize_MolecularSequence(arena, resource);
		case ResourceType::MolecularSequence_ReferenceSeq:
			return (Resource*)Deserialize_MolecularSequence_ReferenceSeq(arena, resource);
		case ResourceType::MolecularSequence_Variant:
			return (Resource*)Deserialize_MolecularSequence_Variant(arena, resource);
		case ResourceType::MolecularSequence_Quality:
			return (Resource*)Deserialize_MolecularSequence_Quality(arena, resource);
		case ResourceType::MolecularSequence_Quality_Roc:
			return (Resource*)Deserialize_MolecularSequence_Quality_Roc(arena, resource);
		case ResourceType::MolecularSequence_Repository:
			return (Resource*)Deserialize_MolecularSequence_Repository(arena, resource);
		case ResourceType::MolecularSequence_StructureVariant:
			return (Resource*)Deserialize_MolecularSequence_StructureVariant(arena, resource);
		case ResourceType::MolecularSequence_StructureVariant_Outer:
			return (Resource*)Deserialize_MolecularSequence_StructureVariant_Outer(arena, resource);
		case ResourceType::MolecularSequence_StructureVariant_Inner:
			return (Resource*)Deserialize_MolecularSequence_StructureVariant_Inner(arena, resource);
		case ResourceType::NamingSystem:
			return (Resource*)Deserialize_NamingSystem(arena, resource);
		case ResourceType::NamingSystem_UniqueId:
			return (Resource*)Deserialize_NamingSystem_UniqueId(arena, resource);
		case ResourceType::NutritionOrder:
			return (Resource*)Deserialize_NutritionOrder(arena, resource);
		case ResourceType::NutritionOrder_OralDiet:
			return (Resource*)Deserialize_NutritionOrder_OralDiet(arena, resource);
		case ResourceType::NutritionOrder_OralDiet_Nutrient:
			return (Resource*)Deserialize_NutritionOrder_OralDiet_Nutrient(arena, resource);
		case ResourceType::NutritionOrder_OralDiet_Texture:
			return (Resource*)Deserialize_NutritionOrder_OralDiet_Texture(arena, resource);
		case ResourceType::NutritionOrder_Supplement:
			return (Resource*)Deserialize_NutritionOrder_Supplement(arena, resource);
		case ResourceType::NutritionOrder_EnteralFormula:
			return (Resource*)Deserialize_NutritionOrder_EnteralFormula(arena, resource);
		case ResourceType::NutritionOrder_EnteralFormula_Administration:
			return (Resource*)Deserialize_NutritionOrder_EnteralFormula_Administration(arena, resource);
		case ResourceType::Observation:
			return (Resource*)Deserialize_Observation(arena, resource);
		case ResourceType::Observation_ReferenceRange:
			return (Resource*)Deserialize_Observation_ReferenceRange(arena, resource);
		case ResourceType::Observation_Component:
			return (Resource*)Deserialize_Observation_Component(arena, resource);
		case ResourceType::ObservationDefinition:
			return (Resource*)Deserialize_ObservationDefinition(arena, resource);
		case ResourceType::ObservationDefinition_QuantitativeDetails:
			return (Resource*)Deserialize_ObservationDefinition_QuantitativeDetails(arena, resource);
		case ResourceType::ObservationDefinition_QualifiedInterval:
			return (Resource*)Deserialize_ObservationDefinition_QualifiedInterval(arena, resource);
		case ResourceType::OperationDefinition:
			return (Resource*)Deserialize_OperationDefinition(arena, resource);
		case ResourceType::OperationDefinition_Parameter:
			return (Resource*)Deserialize_OperationDefinition_Parameter(arena, resource);
		case ResourceType::OperationDefinition_Parameter_Binding:
			return (Resource*)Deserialize_OperationDefinition_Parameter_Binding(arena, resource);
		case ResourceType::OperationDefinition_Parameter_ReferencedFrom:
			return (Resource*)Deserialize_OperationDefinition_Parameter_ReferencedFrom(arena, resource);
		case ResourceType::OperationDefinition_Overload:
			return (Resource*)Deserialize_OperationDefinition_Overload(arena, resource);
		case ResourceType::OperationOutcome:
			return (Resource*)Deserialize_OperationOutcome(arena, resource);
		case ResourceType::OperationOutcome_Issue:
			return (Resource*)Deserialize_OperationOutcome_Issue(arena, resource);
		case ResourceType::Organization:
			return (Resource*)Deserialize_Organization(arena, resource);
		case ResourceType::Organization_Contact:
			return (Resource*)Deserialize_Organization_Contact(arena, resource);
		case ResourceType::OrganizationAffiliation:
			return (Resource*)Deserialize_OrganizationAffiliation(arena, resource);
		case ResourceType::Parameters:
			return (Resource*)Deserialize_Parameters(arena, resource);
		case ResourceType::Parameters_Parameter:
			return (Resource*)Deserialize_Parameters_Parameter(arena, resource);
		case ResourceType::Patient:
			return (Resource*)Deserialize_Patient(arena, resource);
		case ResourceType::Patient_Contact:
			return (Resource*)Deserialize_Patient_Contact(arena, resource);
		case ResourceType::Patient_Communication:
			return (Resource*)Deserialize_Patient_Communication(arena, resource);
		case ResourceType::Patient_Link:
			return (Resource*)Deserialize_Patient_Link(arena, resource);
		case ResourceType::PaymentNotice:
			return (Resource*)Deserialize_PaymentNotice(arena, resource);
		case ResourceType::PaymentReconciliation:
			return (Resource*)Deserialize_PaymentReconciliation(arena, resource);
		case ResourceType::PaymentReconciliation_Detail:
			return (Resource*)Deserialize_PaymentReconciliation_Detail(arena, resource);
		case ResourceType::PaymentReconciliation_ProcessNote:
			return (Resource*)Deserialize_PaymentReconciliation_ProcessNote(arena, resource);
		case ResourceType::Person:
			return (Resource*)Deserialize_Person(arena, resource);
		case ResourceType::Person_Link:
			return (Resource*)Deserialize_Person_Link(arena, resource);
		case ResourceType::PlanDefinition:
			return (Resource*)Deserialize_PlanDefinition(arena, resource);
		case ResourceType::PlanDefinition_Goal:
			return (Resource*)Deserialize_PlanDefinition_Goal(arena, resource);
		case ResourceType::PlanDefinition_Goal_Target:
			return (Resource*)Deserialize_PlanDefinition_Goal_Target(arena, resource);
		case ResourceType::PlanDefinition_Action:
			return (Resource*)Deserialize_PlanDefinition_Action(arena, resource);
		case ResourceType::PlanDefinition_Action_Condition:
			return (Resource*)Deserialize_PlanDefinition_Action_Condition(arena, resource);
		case ResourceType::PlanDefinition_Action_RelatedAction:
			return (Resource*)Deserialize_PlanDefinition_Action_RelatedAction(arena, resource);
		case ResourceType::PlanDefinition_Action_Participant:
			return (Resource*)Deserialize_PlanDefinition_Action_Participant(arena, resource);
		case ResourceType::PlanDefinition_Action_DynamicValue:
			return (Resource*)Deserialize_PlanDefinition_Action_DynamicValue(arena, resource);
		case ResourceType::Practitioner:
			return (Resource*)Deserialize_Practitioner(arena, resource);
		case ResourceType::Practitioner_Qualification:
			return (Resource*)Deserialize_Practitioner_Qualification(arena, resource);
		case ResourceType::PractitionerRole:
			return (Resource*)Deserialize_PractitionerRole(arena, resource);
		case ResourceType::PractitionerRole_AvailableTime:
			return (Resource*)Deserialize_PractitionerRole_AvailableTime(arena, resource);
		case ResourceType::PractitionerRole_NotAvailable:
			return (Resource*)Deserialize_PractitionerRole_NotAvailable(arena, resource);
		case ResourceType::Procedure:
			return (Resource*)Deserialize_Procedure(arena, resource);
		case ResourceType::Procedure_Performer:
			return (Resource*)Deserialize_Procedure_Performer(arena, resource);
		case ResourceType::Procedure_FocalDevice:
			return (Resource*)Deserialize_Procedure_FocalDevice(arena, resource);
		case ResourceType::Provenance:
			return (Resource*)Deserialize_Provenance(arena, resource);
		case ResourceType::Provenance_Agent:
			return (Resource*)Deserialize_Provenance_Agent(arena, resource);
		case ResourceType::Provenance_Entity:
			return (Resource*)Deserialize_Provenance_Entity(arena, resource);
		case ResourceType::Questionnaire:
			return (Resource*)Deserialize_Questionnaire(arena, resource);
		case ResourceType::Questionnaire_Item:
			return (Resource*)Deserialize_Questionnaire_Item(arena, resource);
		case ResourceType::Questionnaire_Item_EnableWhen:
			return (Resource*)Deserialize_Questionnaire_Item_EnableWhen(arena, resource);
		case ResourceType::Questionnaire_Item_AnswerOption:
			return (Resource*)Deserialize_Questionnaire_Item_AnswerOption(arena, resource);
		case ResourceType::Questionnaire_Item_Initial:
			return (Resource*)Deserialize_Questionnaire_Item_Initial(arena, resource);
		case ResourceType::QuestionnaireResponse:
			return (Resource*)Deserialize_QuestionnaireResponse(arena, resource);
		case ResourceType::QuestionnaireResponse_Item:
			return (Resource*)Deserialize_QuestionnaireResponse_Item(arena, resource);
		case ResourceType::QuestionnaireResponse_Item_Answer:
			return (Resource*)Deserialize_QuestionnaireResponse_Item_Answer(arena, resource);
		case ResourceType::RelatedPerson:
			return (Resource*)Deserialize_RelatedPerson(arena, resource);
		case ResourceType::RelatedPerson_Communication:
			return (Resource*)Deserialize_RelatedPerson_Communication(arena, resource);
		case ResourceType::RequestGroup:
			return (Resource*)Deserialize_RequestGroup(arena, resource);
		case ResourceType::RequestGroup_Action:
			return (Resource*)Deserialize_RequestGroup_Action(arena, resource);
		case ResourceType::RequestGroup_Action_Condition:
			return (Resource*)Deserialize_RequestGroup_Action_Condition(arena, resource);
		case ResourceType::RequestGroup_Action_RelatedAction:
			return (Resource*)Deserialize_RequestGroup_Action_RelatedAction(arena, resource);
		case ResourceType::ResearchDefinition:
			return (Resource*)Deserialize_ResearchDefinition(arena, resource);
		case ResourceType::ResearchElementDefinition:
			return (Resource*)Deserialize_ResearchElementDefinition(arena, resource);
		case ResourceType::ResearchElementDefinition_Characteristic:
			return (Resource*)Deserialize_ResearchElementDefinition_Characteristic(arena, resource);
		case ResourceType::ResearchStudy:
			return (Resource*)Deserialize_ResearchStudy(arena, resource);
		case ResourceType::ResearchStudy_Arm:
			return (Resource*)Deserialize_ResearchStudy_Arm(arena, resource);
		case ResourceType::ResearchStudy_Objective:
			return (Resource*)Deserialize_ResearchStudy_Objective(arena, resource);
		case ResourceType::ResearchSubject:
			return (Resource*)Deserialize_ResearchSubject(arena, resource);
		case ResourceType::RiskAssessment:
			return (Resource*)Deserialize_RiskAssessment(arena, resource);
		case ResourceType::RiskAssessment_Prediction:
			return (Resource*)Deserialize_RiskAssessment_Prediction(arena, resource);
		case ResourceType::RiskEvidenceSynthesis:
			return (Resource*)Deserialize_RiskEvidenceSynthesis(arena, resource);
		case ResourceType::RiskEvidenceSynthesis_SampleSize:
			return (Resource*)Deserialize_RiskEvidenceSynthesis_SampleSize(arena, resource);
		case ResourceType::RiskEvidenceSynthesis_RiskEstimate:
			return (Resource*)Deserialize_RiskEvidenceSynthesis_RiskEstimate(arena, resource);
		case ResourceType::RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate:
			return (Resource*)Deserialize_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate(arena, resource);
		case ResourceType::RiskEvidenceSynthesis_Certainty:
			return (Resource*)Deserialize_RiskEvidenceSynthesis_Certainty(arena, resource);
		case ResourceType::RiskEvidenceSynthesis_Certainty_CertaintySubcomponent:
			return (Resource*)Deserialize_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, resource);
		case ResourceType::Schedule:
			return (Resource*)Deserialize_Schedule(arena, resource);
		case ResourceType::SearchParameter:
			return (Resource*)Deserialize_SearchParameter(arena, resource);
		case ResourceType::SearchParameter_Component:
			return (Resource*)Deserialize_SearchParameter_Component(arena, resource);
		case ResourceType::ServiceRequest:
			return (Resource*)Deserialize_ServiceRequest(arena, resource);
		case ResourceType::Slot:
			return (Resource*)Deserialize_Slot(arena, resource);
		case ResourceType::Specimen:
			return (Resource*)Deserialize_Specimen(arena, resource);
		case ResourceType::Specimen_Collection:
			return (Resource*)Deserialize_Specimen_Collection(arena, resource);
		case ResourceType::Specimen_Processing:
			return (Resource*)Deserialize_Specimen_Processing(arena, resource);
		case ResourceType::Specimen_Container:
			return (Resource*)Deserialize_Specimen_Container(arena, resource);
		case ResourceType::SpecimenDefinition:
			return (Resource*)Deserialize_SpecimenDefinition(arena, resource);
		case ResourceType::SpecimenDefinition_TypeTested:
			return (Resource*)Deserialize_SpecimenDefinition_TypeTested(arena, resource);
		case ResourceType::SpecimenDefinition_TypeTested_Container:
			return (Resource*)Deserialize_SpecimenDefinition_TypeTested_Container(arena, resource);
		case ResourceType::SpecimenDefinition_TypeTested_Container_Additive:
			return (Resource*)Deserialize_SpecimenDefinition_TypeTested_Container_Additive(arena, resource);
		case ResourceType::SpecimenDefinition_TypeTested_Handling:
			return (Resource*)Deserialize_SpecimenDefinition_TypeTested_Handling(arena, resource);
		case ResourceType::StructureDefinition:
			return (Resource*)Deserialize_StructureDefinition(arena, resource);
		case ResourceType::StructureDefinition_Mapping:
			return (Resource*)Deserialize_StructureDefinition_Mapping(arena, resource);
		case ResourceType::StructureDefinition_Context:
			return (Resource*)Deserialize_StructureDefinition_Context(arena, resource);
		case ResourceType::StructureDefinition_Snapshot:
			return (Resource*)Deserialize_StructureDefinition_Snapshot(arena, resource);
		case ResourceType::StructureDefinition_Differential:
			return (Resource*)Deserialize_StructureDefinition_Differential(arena, resource);
		case ResourceType::StructureMap:
			return (Resource*)Deserialize_StructureMap(arena, resource);
		case ResourceType::StructureMap_Structure:
			return (Resource*)Deserialize_StructureMap_Structure(arena, resource);
		case ResourceType::StructureMap_Group:
			return (Resource*)Deserialize_StructureMap_Group(arena, resource);
		case ResourceType::StructureMap_Group_Input:
			return (Resource*)Deserialize_StructureMap_Group_Input(arena, resource);
		case ResourceType::StructureMap_Group_Rule:
			return (Resource*)Deserialize_StructureMap_Group_Rule(arena, resource);
		case ResourceType::StructureMap_Group_Rule_Source:
			return (Resource*)Deserialize_StructureMap_Group_Rule_Source(arena, resource);
		case ResourceType::StructureMap_Group_Rule_Target:
			return (Resource*)Deserialize_StructureMap_Group_Rule_Target(arena, resource);
		case ResourceType::StructureMap_Group_Rule_Target_Parameter:
			return (Resource*)Deserialize_StructureMap_Group_Rule_Target_Parameter(arena, resource);
		case ResourceType::StructureMap_Group_Rule_Dependent:
			return (Resource*)Deserialize_StructureMap_Group_Rule_Dependent(arena, resource);
		case ResourceType::Subscription:
			return (Resource*)Deserialize_Subscription(arena, resource);
		case ResourceType::Subscription_Channel:
			return (Resource*)Deserialize_Subscription_Channel(arena, resource);
		case ResourceType::Substance:
			return (Resource*)Deserialize_Substance(arena, resource);
		case ResourceType::Substance_Instance:
			return (Resource*)Deserialize_Substance_Instance(arena, resource);
		case ResourceType::Substance_Ingredient:
			return (Resource*)Deserialize_Substance_Ingredient(arena, resource);
		case ResourceType::SubstanceNucleicAcid:
			return (Resource*)Deserialize_SubstanceNucleicAcid(arena, resource);
		case ResourceType::SubstanceNucleicAcid_Subunit:
			return (Resource*)Deserialize_SubstanceNucleicAcid_Subunit(arena, resource);
		case ResourceType::SubstanceNucleicAcid_Subunit_Linkage:
			return (Resource*)Deserialize_SubstanceNucleicAcid_Subunit_Linkage(arena, resource);
		case ResourceType::SubstanceNucleicAcid_Subunit_Sugar:
			return (Resource*)Deserialize_SubstanceNucleicAcid_Subunit_Sugar(arena, resource);
		case ResourceType::SubstancePolymer:
			return (Resource*)Deserialize_SubstancePolymer(arena, resource);
		case ResourceType::SubstancePolymer_MonomerSet:
			return (Resource*)Deserialize_SubstancePolymer_MonomerSet(arena, resource);
		case ResourceType::SubstancePolymer_MonomerSet_StartingMaterial:
			return (Resource*)Deserialize_SubstancePolymer_MonomerSet_StartingMaterial(arena, resource);
		case ResourceType::SubstancePolymer_Repeat:
			return (Resource*)Deserialize_SubstancePolymer_Repeat(arena, resource);
		case ResourceType::SubstancePolymer_Repeat_RepeatUnit:
			return (Resource*)Deserialize_SubstancePolymer_Repeat_RepeatUnit(arena, resource);
		case ResourceType::SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation:
			return (Resource*)Deserialize_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation(arena, resource);
		case ResourceType::SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation:
			return (Resource*)Deserialize_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation(arena, resource);
		case ResourceType::SubstanceProtein:
			return (Resource*)Deserialize_SubstanceProtein(arena, resource);
		case ResourceType::SubstanceProtein_Subunit:
			return (Resource*)Deserialize_SubstanceProtein_Subunit(arena, resource);
		case ResourceType::SubstanceReferenceInformation:
			return (Resource*)Deserialize_SubstanceReferenceInformation(arena, resource);
		case ResourceType::SubstanceReferenceInformation_Gene:
			return (Resource*)Deserialize_SubstanceReferenceInformation_Gene(arena, resource);
		case ResourceType::SubstanceReferenceInformation_GeneElement:
			return (Resource*)Deserialize_SubstanceReferenceInformation_GeneElement(arena, resource);
		case ResourceType::SubstanceReferenceInformation_Classification:
			return (Resource*)Deserialize_SubstanceReferenceInformation_Classification(arena, resource);
		case ResourceType::SubstanceReferenceInformation_Target:
			return (Resource*)Deserialize_SubstanceReferenceInformation_Target(arena, resource);
		case ResourceType::SubstanceSourceMaterial:
			return (Resource*)Deserialize_SubstanceSourceMaterial(arena, resource);
		case ResourceType::SubstanceSourceMaterial_FractionDescription:
			return (Resource*)Deserialize_SubstanceSourceMaterial_FractionDescription(arena, resource);
		case ResourceType::SubstanceSourceMaterial_Organism:
			return (Resource*)Deserialize_SubstanceSourceMaterial_Organism(arena, resource);
		case ResourceType::SubstanceSourceMaterial_Organism_Author:
			return (Resource*)Deserialize_SubstanceSourceMaterial_Organism_Author(arena, resource);
		case ResourceType::SubstanceSourceMaterial_Organism_Hybrid:
			return (Resource*)Deserialize_SubstanceSourceMaterial_Organism_Hybrid(arena, resource);
		case ResourceType::SubstanceSourceMaterial_Organism_OrganismGeneral:
			return (Resource*)Deserialize_SubstanceSourceMaterial_Organism_OrganismGeneral(arena, resource);
		case ResourceType::SubstanceSourceMaterial_PartDescription:
			return (Resource*)Deserialize_SubstanceSourceMaterial_PartDescription(arena, resource);
		case ResourceType::SubstanceSpecification:
			return (Resource*)Deserialize_SubstanceSpecification(arena, resource);
		case ResourceType::SubstanceSpecification_Moiety:
			return (Resource*)Deserialize_SubstanceSpecification_Moiety(arena, resource);
		case ResourceType::SubstanceSpecification_Property:
			return (Resource*)Deserialize_SubstanceSpecification_Property(arena, resource);
		case ResourceType::SubstanceSpecification_Structure:
			return (Resource*)Deserialize_SubstanceSpecification_Structure(arena, resource);
		case ResourceType::SubstanceSpecification_Structure_Isotope:
			return (Resource*)Deserialize_SubstanceSpecification_Structure_Isotope(arena, resource);
		case ResourceType::SubstanceSpecification_Structure_Isotope_MolecularWeight:
			return (Resource*)Deserialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, resource);
		case ResourceType::SubstanceSpecification_Structure_Representation:
			return (Resource*)Deserialize_SubstanceSpecification_Structure_Representation(arena, resource);
		case ResourceType::SubstanceSpecification_Code:
			return (Resource*)Deserialize_SubstanceSpecification_Code(arena, resource);
		case ResourceType::SubstanceSpecification_Name:
			return (Resource*)Deserialize_SubstanceSpecification_Name(arena, resource);
		case ResourceType::SubstanceSpecification_Name_Official:
			return (Resource*)Deserialize_SubstanceSpecification_Name_Official(arena, resource);
		case ResourceType::SubstanceSpecification_Relationship:
			return (Resource*)Deserialize_SubstanceSpecification_Relationship(arena, resource);
		case ResourceType::SupplyDelivery:
			return (Resource*)Deserialize_SupplyDelivery(arena, resource);
		case ResourceType::SupplyDelivery_SuppliedItem:
			return (Resource*)Deserialize_SupplyDelivery_SuppliedItem(arena, resource);
		case ResourceType::SupplyRequest:
			return (Resource*)Deserialize_SupplyRequest(arena, resource);
		case ResourceType::SupplyRequest_Parameter:
			return (Resource*)Deserialize_SupplyRequest_Parameter(arena, resource);
		case ResourceType::Task:
			return (Resource*)Deserialize_Task(arena, resource);
		case ResourceType::Task_Restriction:
			return (Resource*)Deserialize_Task_Restriction(arena, resource);
		case ResourceType::Task_Input:
			return (Resource*)Deserialize_Task_Input(arena, resource);
		case ResourceType::Task_Output:
			return (Resource*)Deserialize_Task_Output(arena, resource);
		case ResourceType::TerminologyCapabilities:
			return (Resource*)Deserialize_TerminologyCapabilities(arena, resource);
		case ResourceType::TerminologyCapabilities_Software:
			return (Resource*)Deserialize_TerminologyCapabilities_Software(arena, resource);
		case ResourceType::TerminologyCapabilities_Implementation:
			return (Resource*)Deserialize_TerminologyCapabilities_Implementation(arena, resource);
		case ResourceType::TerminologyCapabilities_CodeSystem:
			return (Resource*)Deserialize_TerminologyCapabilities_CodeSystem(arena, resource);
		case ResourceType::TerminologyCapabilities_CodeSystem_Version:
			return (Resource*)Deserialize_TerminologyCapabilities_CodeSystem_Version(arena, resource);
		case ResourceType::TerminologyCapabilities_CodeSystem_Version_Filter:
			return (Resource*)Deserialize_TerminologyCapabilities_CodeSystem_Version_Filter(arena, resource);
		case ResourceType::TerminologyCapabilities_Expansion:
			return (Resource*)Deserialize_TerminologyCapabilities_Expansion(arena, resource);
		case ResourceType::TerminologyCapabilities_Expansion_Parameter:
			return (Resource*)Deserialize_TerminologyCapabilities_Expansion_Parameter(arena, resource);
		case ResourceType::TerminologyCapabilities_ValidateCode:
			return (Resource*)Deserialize_TerminologyCapabilities_ValidateCode(arena, resource);
		case ResourceType::TerminologyCapabilities_Translation:
			return (Resource*)Deserialize_TerminologyCapabilities_Translation(arena, resource);
		case ResourceType::TerminologyCapabilities_Closure:
			return (Resource*)Deserialize_TerminologyCapabilities_Closure(arena, resource);
		case ResourceType::TestReport:
			return (Resource*)Deserialize_TestReport(arena, resource);
		case ResourceType::TestReport_Participant:
			return (Resource*)Deserialize_TestReport_Participant(arena, resource);
		case ResourceType::TestReport_Setup:
			return (Resource*)Deserialize_TestReport_Setup(arena, resource);
		case ResourceType::TestReport_Setup_Action:
			return (Resource*)Deserialize_TestReport_Setup_Action(arena, resource);
		case ResourceType::TestReport_Setup_Action_Operation:
			return (Resource*)Deserialize_TestReport_Setup_Action_Operation(arena, resource);
		case ResourceType::TestReport_Setup_Action_Assert:
			return (Resource*)Deserialize_TestReport_Setup_Action_Assert(arena, resource);
		case ResourceType::TestReport_Test:
			return (Resource*)Deserialize_TestReport_Test(arena, resource);
		case ResourceType::TestReport_Test_Action:
			return (Resource*)Deserialize_TestReport_Test_Action(arena, resource);
		case ResourceType::TestReport_Teardown:
			return (Resource*)Deserialize_TestReport_Teardown(arena, resource);
		case ResourceType::TestReport_Teardown_Action:
			return (Resource*)Deserialize_TestReport_Teardown_Action(arena, resource);
		case ResourceType::TestScript:
			return (Resource*)Deserialize_TestScript(arena, resource);
		case ResourceType::TestScript_Origin:
			return (Resource*)Deserialize_TestScript_Origin(arena, resource);
		case ResourceType::TestScript_Destination:
			return (Resource*)Deserialize_TestScript_Destination(arena, resource);
		case ResourceType::TestScript_Metadata:
			return (Resource*)Deserialize_TestScript_Metadata(arena, resource);
		case ResourceType::TestScript_Metadata_Link:
			return (Resource*)Deserialize_TestScript_Metadata_Link(arena, resource);
		case ResourceType::TestScript_Metadata_Capability:
			return (Resource*)Deserialize_TestScript_Metadata_Capability(arena, resource);
		case ResourceType::TestScript_Fixture:
			return (Resource*)Deserialize_TestScript_Fixture(arena, resource);
		case ResourceType::TestScript_Variable:
			return (Resource*)Deserialize_TestScript_Variable(arena, resource);
		case ResourceType::TestScript_Setup:
			return (Resource*)Deserialize_TestScript_Setup(arena, resource);
		case ResourceType::TestScript_Setup_Action:
			return (Resource*)Deserialize_TestScript_Setup_Action(arena, resource);
		case ResourceType::TestScript_Setup_Action_Operation:
			return (Resource*)Deserialize_TestScript_Setup_Action_Operation(arena, resource);
		case ResourceType::TestScript_Setup_Action_Operation_RequestHeader:
			return (Resource*)Deserialize_TestScript_Setup_Action_Operation_RequestHeader(arena, resource);
		case ResourceType::TestScript_Setup_Action_Assert:
			return (Resource*)Deserialize_TestScript_Setup_Action_Assert(arena, resource);
		case ResourceType::TestScript_Test:
			return (Resource*)Deserialize_TestScript_Test(arena, resource);
		case ResourceType::TestScript_Test_Action:
			return (Resource*)Deserialize_TestScript_Test_Action(arena, resource);
		case ResourceType::TestScript_Teardown:
			return (Resource*)Deserialize_TestScript_Teardown(arena, resource);
		case ResourceType::TestScript_Teardown_Action:
			return (Resource*)Deserialize_TestScript_Teardown_Action(arena, resource);
		case ResourceType::ValueSet:
			return (Resource*)Deserialize_ValueSet(arena, resource);
		case ResourceType::ValueSet_Compose:
			return (Resource*)Deserialize_ValueSet_Compose(arena, resource);
		case ResourceType::ValueSet_Compose_Include:
			return (Resource*)Deserialize_ValueSet_Compose_Include(arena, resource);
		case ResourceType::ValueSet_Compose_Include_Concept:
			return (Resource*)Deserialize_ValueSet_Compose_Include_Concept(arena, resource);
		case ResourceType::ValueSet_Compose_Include_Concept_Designation:
			return (Resource*)Deserialize_ValueSet_Compose_Include_Concept_Designation(arena, resource);
		case ResourceType::ValueSet_Compose_Include_Filter:
			return (Resource*)Deserialize_ValueSet_Compose_Include_Filter(arena, resource);
		case ResourceType::ValueSet_Expansion:
			return (Resource*)Deserialize_ValueSet_Expansion(arena, resource);
		case ResourceType::ValueSet_Expansion_Parameter:
			return (Resource*)Deserialize_ValueSet_Expansion_Parameter(arena, resource);
		case ResourceType::ValueSet_Expansion_Contains:
			return (Resource*)Deserialize_ValueSet_Expansion_Contains(arena, resource);
		case ResourceType::VerificationResult:
			return (Resource*)Deserialize_VerificationResult(arena, resource);
		case ResourceType::VerificationResult_PrimarySource:
			return (Resource*)Deserialize_VerificationResult_PrimarySource(arena, resource);
		case ResourceType::VerificationResult_Attestation:
			return (Resource*)Deserialize_VerificationResult_Attestation(arena, resource);
		case ResourceType::VerificationResult_Validator:
			return (Resource*)Deserialize_VerificationResult_Validator(arena, resource);
		case ResourceType::VisionPrescription:
			return (Resource*)Deserialize_VisionPrescription(arena, resource);
		case ResourceType::VisionPrescription_LensSpecification:
			return (Resource*)Deserialize_VisionPrescription_LensSpecification(arena, resource);
		case ResourceType::VisionPrescription_LensSpecification_Prism:
			return (Resource*)Deserialize_VisionPrescription_LensSpecification_Prism(arena, resource);
		case ResourceType::MetadataResource:
			return (Resource*)Deserialize_MetadataResource(arena, resource);
		case ResourceType::Element:
			return (Resource*)Deserialize_Element(arena, resource);
		case ResourceType::BackboneElement:
			return (Resource*)Deserialize_BackboneElement(arena, resource);
		case ResourceType::Integer:
			return (Resource*)Deserialize_Integer(arena, resource);
		case ResourceType::Xhtml:
			return (Resource*)Deserialize_Xhtml(arena, resource);
		case ResourceType::Address:
			return (Resource*)Deserialize_Address(arena, resource);
		case ResourceType::Age:
			return (Resource*)Deserialize_Age(arena, resource);
		case ResourceType::Annotation:
			return (Resource*)Deserialize_Annotation(arena, resource);
		case ResourceType::Attachment:
			return (Resource*)Deserialize_Attachment(arena, resource);
		case ResourceType::CodeableConcept:
			return (Resource*)Deserialize_CodeableConcept(arena, resource);
		case ResourceType::Coding:
			return (Resource*)Deserialize_Coding(arena, resource);
		case ResourceType::ContactDetail:
			return (Resource*)Deserialize_ContactDetail(arena, resource);
		case ResourceType::ContactPoint:
			return (Resource*)Deserialize_ContactPoint(arena, resource);
		case ResourceType::Contributor:
			return (Resource*)Deserialize_Contributor(arena, resource);
		case ResourceType::Count:
			return (Resource*)Deserialize_Count(arena, resource);
		case ResourceType::DataRequirement:
			return (Resource*)Deserialize_DataRequirement(arena, resource);
		case ResourceType::DataRequirement_CodeFilter:
			return (Resource*)Deserialize_DataRequirement_CodeFilter(arena, resource);
		case ResourceType::DataRequirement_DateFilter:
			return (Resource*)Deserialize_DataRequirement_DateFilter(arena, resource);
		case ResourceType::DataRequirement_Sort:
			return (Resource*)Deserialize_DataRequirement_Sort(arena, resource);
		case ResourceType::Distance:
			return (Resource*)Deserialize_Distance(arena, resource);
		case ResourceType::Dosage:
			return (Resource*)Deserialize_Dosage(arena, resource);
		case ResourceType::Dosage_DoseAndRate:
			return (Resource*)Deserialize_Dosage_DoseAndRate(arena, resource);
		case ResourceType::Duration:
			return (Resource*)Deserialize_Duration(arena, resource);
		case ResourceType::ElementDefinition:
			return (Resource*)Deserialize_ElementDefinition(arena, resource);
		case ResourceType::ElementDefinition_Slicing:
			return (Resource*)Deserialize_ElementDefinition_Slicing(arena, resource);
		case ResourceType::ElementDefinition_Slicing_Discriminator:
			return (Resource*)Deserialize_ElementDefinition_Slicing_Discriminator(arena, resource);
		case ResourceType::ElementDefinition_Base:
			return (Resource*)Deserialize_ElementDefinition_Base(arena, resource);
		case ResourceType::ElementDefinition_Type:
			return (Resource*)Deserialize_ElementDefinition_Type(arena, resource);
		case ResourceType::ElementDefinition_Example:
			return (Resource*)Deserialize_ElementDefinition_Example(arena, resource);
		case ResourceType::ElementDefinition_Constraint:
			return (Resource*)Deserialize_ElementDefinition_Constraint(arena, resource);
		case ResourceType::ElementDefinition_Binding:
			return (Resource*)Deserialize_ElementDefinition_Binding(arena, resource);
		case ResourceType::ElementDefinition_Mapping:
			return (Resource*)Deserialize_ElementDefinition_Mapping(arena, resource);
		case ResourceType::Expression:
			return (Resource*)Deserialize_Expression(arena, resource);
		case ResourceType::Extension:
			return (Resource*)Deserialize_Extension(arena, resource);
		case ResourceType::HumanName:
			return (Resource*)Deserialize_HumanName(arena, resource);
		case ResourceType::Identifier:
			return (Resource*)Deserialize_Identifier(arena, resource);
		case ResourceType::MarketingStatus:
			return (Resource*)Deserialize_MarketingStatus(arena, resource);
		case ResourceType::Meta:
			return (Resource*)Deserialize_Meta(arena, resource);
		case ResourceType::Money:
			return (Resource*)Deserialize_Money(arena, resource);
		case ResourceType::Narrative:
			return (Resource*)Deserialize_Narrative(arena, resource);
		case ResourceType::ParameterDefinition:
			return (Resource*)Deserialize_ParameterDefinition(arena, resource);
		case ResourceType::Period:
			return (Resource*)Deserialize_Period(arena, resource);
		case ResourceType::Population:
			return (Resource*)Deserialize_Population(arena, resource);
		case ResourceType::ProdCharacteristic:
			return (Resource*)Deserialize_ProdCharacteristic(arena, resource);
		case ResourceType::ProductShelfLife:
			return (Resource*)Deserialize_ProductShelfLife(arena, resource);
		case ResourceType::Quantity:
			return (Resource*)Deserialize_Quantity(arena, resource);
		case ResourceType::Range:
			return (Resource*)Deserialize_Range(arena, resource);
		case ResourceType::Ratio:
			return (Resource*)Deserialize_Ratio(arena, resource);
		case ResourceType::Reference:
			return (Resource*)Deserialize_Reference(arena, resource);
		case ResourceType::RelatedArtifact:
			return (Resource*)Deserialize_RelatedArtifact(arena, resource);
		case ResourceType::SampledData:
			return (Resource*)Deserialize_SampledData(arena, resource);
		case ResourceType::Signature:
			return (Resource*)Deserialize_Signature(arena, resource);
		case ResourceType::SubstanceAmount:
			return (Resource*)Deserialize_SubstanceAmount(arena, resource);
		case ResourceType::SubstanceAmount_ReferenceRange:
			return (Resource*)Deserialize_SubstanceAmount_ReferenceRange(arena, resource);
		case ResourceType::Timing:
			return (Resource*)Deserialize_Timing(arena, resource);
		case ResourceType::Timing_Repeat:
			return (Resource*)Deserialize_Timing_Repeat(arena, resource);
		case ResourceType::TriggerDefinition:
			return (Resource*)Deserialize_TriggerDefinition(arena, resource);
		case ResourceType::UsageContext:
			return (Resource*)Deserialize_UsageContext(arena, resource);
		case ResourceType::MoneyQuantity:
			return (Resource*)Deserialize_MoneyQuantity(arena, resource);
		case ResourceType::SimpleQuantity:
			return (Resource*)Deserialize_SimpleQuantity(arena, resource);
		case ResourceType::Shareablemeasure:
			return (Resource*)Deserialize_Shareablemeasure(arena, resource);
		case ResourceType::Servicerequest_genetics:
			return (Resource*)Deserialize_Servicerequest_genetics(arena, resource);
		case ResourceType::Groupdefinition:
			return (Resource*)Deserialize_Groupdefinition(arena, resource);
		case ResourceType::Actualgroup:
			return (Resource*)Deserialize_Actualgroup(arena, resource);
		case ResourceType::Familymemberhistory_genetic:
			return (Resource*)Deserialize_Familymemberhistory_genetic(arena, resource);
		case ResourceType::Shareableactivitydefinition:
			return (Resource*)Deserialize_Shareableactivitydefinition(arena, resource);
		case ResourceType::Cdshooksrequestgroup:
			return (Resource*)Deserialize_Cdshooksrequestgroup(arena, resource);
		case ResourceType::Provenance_relevant_history:
			return (Resource*)Deserialize_Provenance_relevant_history(arena, resource);
		case ResourceType::Cqf_questionnaire:
			return (Resource*)Deserialize_Cqf_questionnaire(arena, resource);
		case ResourceType::Shareablevalueset:
			return (Resource*)Deserialize_Shareablevalueset(arena, resource);
		case ResourceType::Picoelement:
			return (Resource*)Deserialize_Picoelement(arena, resource);
		case ResourceType::Shareablecodesystem:
			return (Resource*)Deserialize_Shareablecodesystem(arena, resource);
		case ResourceType::Cdshooksguidanceresponse:
			return (Resource*)Deserialize_Cdshooksguidanceresponse(arena, resource);
		case ResourceType::Devicemetricobservation:
			return (Resource*)Deserialize_Devicemetricobservation(arena, resource);
		case ResourceType::Observation_genetics:
			return (Resource*)Deserialize_Observation_genetics(arena, resource);
		case ResourceType::Vitalsigns:
			return (Resource*)Deserialize_Vitalsigns(arena, resource);
		case ResourceType::Bodyweight:
			return (Resource*)Deserialize_Bodyweight(arena, resource);
		case ResourceType::Vitalspanel:
			return (Resource*)Deserialize_Vitalspanel(arena, resource);
		case ResourceType::Bodyheight:
			return (Resource*)Deserialize_Bodyheight(arena, resource);
		case ResourceType::Resprate:
			return (Resource*)Deserialize_Resprate(arena, resource);
		case ResourceType::Heartrate:
			return (Resource*)Deserialize_Heartrate(arena, resource);
		case ResourceType::Bodytemp:
			return (Resource*)Deserialize_Bodytemp(arena, resource);
		case ResourceType::Headcircum:
			return (Resource*)Deserialize_Headcircum(arena, resource);
		case ResourceType::Oxygensat:
			return (Resource*)Deserialize_Oxygensat(arena, resource);
		case ResourceType::Bmi:
			return (Resource*)Deserialize_Bmi(arena, resource);
		case ResourceType::Bp:
			return (Resource*)Deserialize_Bp(arena, resource);
		case ResourceType::Shareablelibrary:
			return (Resource*)Deserialize_Shareablelibrary(arena, resource);
		case ResourceType::Cqllibrary:
			return (Resource*)Deserialize_Cqllibrary(arena, resource);
		case ResourceType::Lipidprofile:
			return (Resource*)Deserialize_Lipidprofile(arena, resource);
		case ResourceType::Cholesterol:
			return (Resource*)Deserialize_Cholesterol(arena, resource);
		case ResourceType::Triglyceride:
			return (Resource*)Deserialize_Triglyceride(arena, resource);
		case ResourceType::Hdlcholesterol:
			return (Resource*)Deserialize_Hdlcholesterol(arena, resource);
		case ResourceType::Ldlcholesterol:
			return (Resource*)Deserialize_Ldlcholesterol(arena, resource);
		case ResourceType::Diagnosticreport_genetics:
			return (Resource*)Deserialize_Diagnosticreport_genetics(arena, resource);
		case ResourceType::Hlaresult:
			return (Resource*)Deserialize_Hlaresult(arena, resource);
		case ResourceType::Synthesis:
			return (Resource*)Deserialize_Synthesis(arena, resource);
		case ResourceType::Clinicaldocument:
			return (Resource*)Deserialize_Clinicaldocument(arena, resource);
		case ResourceType::Catalog:
			return (Resource*)Deserialize_Catalog(arena, resource);
		case ResourceType::Shareableplandefinition:
			return (Resource*)Deserialize_Shareableplandefinition(arena, resource);
		case ResourceType::Computableplandefinition:
			return (Resource*)Deserialize_Computableplandefinition(arena, resource);
		case ResourceType::Cdshooksserviceplandefinition:
			return (Resource*)Deserialize_Cdshooksserviceplandefinition(arena, resource);
		case ResourceType::Elementdefinition_de:
			return (Resource*)Deserialize_Elementdefinition_de(arena, resource);
		case ResourceType::Ehrsrle_auditevent:
			return (Resource*)Deserialize_Ehrsrle_auditevent(arena, resource);
		case ResourceType::Ehrsrle_provenance:
			return (Resource*)Deserialize_Ehrsrle_provenance(arena, resource);
	}
	Assert(false);
	return nullptr;
}

Account*
Deserialize_Account(Arena *arena, cJSON *account)
{
	Account *result_Account = PushArray(arena, Account, 1);
	result_Account->resourceType = ResourceType::Account;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(account, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(account, "id");
	if(cjson_id)
	{
		result_Account->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(account, "meta");
	if(cjson_meta)
	{
		result_Account->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(account, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Account->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(account, "language");
	if(cjson_language)
	{
		result_Account->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(account, "text");
	if(cjson_text)
	{
		result_Account->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(account, "contained");
	if(cjson_contained)
	{
		result_Account->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Account->contained = PushArray(arena, Resource, result_Account->contained_count);
		for(int i = 0; i < result_Account->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Account->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(account, "extension");
	if(cjson_extension)
	{
		result_Account->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Account->extension = PushArray(arena, Extension, result_Account->extension_count);
		for(int i = 0; i < result_Account->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Account->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(account, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Account->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Account->modifierExtension = PushArray(arena, Extension, result_Account->modifierExtension_count);
		for(int i = 0; i < result_Account->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Account->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(account, "identifier");
	if(cjson_identifier)
	{
		result_Account->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Account->identifier = PushArray(arena, Identifier, result_Account->identifier_count);
		for(int i = 0; i < result_Account->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Account->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(account, "status");
	if(cjson_status)
	{
		result_Account->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(account, "type");
	if(cjson_type)
	{
		result_Account->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(account, "name");
	if(cjson_name)
	{
		result_Account->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(account, "subject");
	if(cjson_subject)
	{
		result_Account->subject_count = cJSON_GetArraySize(cjson_subject);
		result_Account->subject = PushArray(arena, Reference, result_Account->subject_count);
		for(int i = 0; i < result_Account->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_Account->subject[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_servicePeriod =  cJSON_GetObjectItem(account, "servicePeriod");
	if(cjson_servicePeriod)
	{
		result_Account->servicePeriod = Deserialize_Period(arena, cjson_servicePeriod);
	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(account, "coverage");
	if(cjson_coverage)
	{
		result_Account->coverage_count = cJSON_GetArraySize(cjson_coverage);
		result_Account->coverage = PushArray(arena, Account_Coverage, result_Account->coverage_count);
		for(int i = 0; i < result_Account->coverage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_coverage, i);
			result_Account->coverage[i] = *Deserialize_Account_Coverage(arena, internal);
		}

	}
	cJSON *cjson_owner =  cJSON_GetObjectItem(account, "owner");
	if(cjson_owner)
	{
		result_Account->owner = Deserialize_Reference(arena, cjson_owner);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(account, "description");
	if(cjson_description)
	{
		result_Account->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_guarantor =  cJSON_GetObjectItem(account, "guarantor");
	if(cjson_guarantor)
	{
		result_Account->guarantor_count = cJSON_GetArraySize(cjson_guarantor);
		result_Account->guarantor = PushArray(arena, Account_Guarantor, result_Account->guarantor_count);
		for(int i = 0; i < result_Account->guarantor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_guarantor, i);
			result_Account->guarantor[i] = *Deserialize_Account_Guarantor(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(account, "partOf");
	if(cjson_partOf)
	{
		result_Account->partOf = Deserialize_Reference(arena, cjson_partOf);
	}
	return result_Account;
}

Account_Coverage*
Deserialize_Account_Coverage(Arena *arena, cJSON *account_Coverage)
{
	Account_Coverage *result_Account_Coverage = PushArray(arena, Account_Coverage, 1);
	result_Account_Coverage->resourceType = ResourceType::Account_Coverage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(account_Coverage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(account_Coverage, "id");
	if(cjson_id)
	{
		result_Account_Coverage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(account_Coverage, "extension");
	if(cjson_extension)
	{
		result_Account_Coverage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Account_Coverage->extension = PushArray(arena, Extension, result_Account_Coverage->extension_count);
		for(int i = 0; i < result_Account_Coverage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Account_Coverage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(account_Coverage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Account_Coverage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Account_Coverage->modifierExtension = PushArray(arena, Extension, result_Account_Coverage->modifierExtension_count);
		for(int i = 0; i < result_Account_Coverage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Account_Coverage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(account_Coverage, "coverage");
	if(cjson_coverage)
	{
		result_Account_Coverage->coverage = Deserialize_Reference(arena, cjson_coverage);
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(account_Coverage, "priority");
	if(cjson_priority)
	{
		result_Account_Coverage->priority = (int)cJSON_GetNumberValue(cjson_priority);
	}
	return result_Account_Coverage;
}

Account_Guarantor*
Deserialize_Account_Guarantor(Arena *arena, cJSON *account_Guarantor)
{
	Account_Guarantor *result_Account_Guarantor = PushArray(arena, Account_Guarantor, 1);
	result_Account_Guarantor->resourceType = ResourceType::Account_Guarantor;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(account_Guarantor, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(account_Guarantor, "id");
	if(cjson_id)
	{
		result_Account_Guarantor->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(account_Guarantor, "extension");
	if(cjson_extension)
	{
		result_Account_Guarantor->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Account_Guarantor->extension = PushArray(arena, Extension, result_Account_Guarantor->extension_count);
		for(int i = 0; i < result_Account_Guarantor->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Account_Guarantor->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(account_Guarantor, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Account_Guarantor->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Account_Guarantor->modifierExtension = PushArray(arena, Extension, result_Account_Guarantor->modifierExtension_count);
		for(int i = 0; i < result_Account_Guarantor->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Account_Guarantor->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_party =  cJSON_GetObjectItem(account_Guarantor, "party");
	if(cjson_party)
	{
		result_Account_Guarantor->party = Deserialize_Reference(arena, cjson_party);
	}
	cJSON *cjson_onHold =  cJSON_GetObjectItem(account_Guarantor, "onHold");
	if(cjson_onHold)
	{
		result_Account_Guarantor->onHold = (boolean)cJSON_IsTrue(cjson_onHold);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(account_Guarantor, "period");
	if(cjson_period)
	{
		result_Account_Guarantor->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Account_Guarantor;
}

ActivityDefinition*
Deserialize_ActivityDefinition(Arena *arena, cJSON *activityDefinition)
{
	ActivityDefinition *result_ActivityDefinition = PushArray(arena, ActivityDefinition, 1);
	result_ActivityDefinition->resourceType = ResourceType::ActivityDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(activityDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(activityDefinition, "id");
	if(cjson_id)
	{
		result_ActivityDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(activityDefinition, "meta");
	if(cjson_meta)
	{
		result_ActivityDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(activityDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ActivityDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(activityDefinition, "language");
	if(cjson_language)
	{
		result_ActivityDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(activityDefinition, "text");
	if(cjson_text)
	{
		result_ActivityDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(activityDefinition, "contained");
	if(cjson_contained)
	{
		result_ActivityDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ActivityDefinition->contained = PushArray(arena, Resource, result_ActivityDefinition->contained_count);
		for(int i = 0; i < result_ActivityDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ActivityDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(activityDefinition, "extension");
	if(cjson_extension)
	{
		result_ActivityDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ActivityDefinition->extension = PushArray(arena, Extension, result_ActivityDefinition->extension_count);
		for(int i = 0; i < result_ActivityDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ActivityDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(activityDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ActivityDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ActivityDefinition->modifierExtension = PushArray(arena, Extension, result_ActivityDefinition->modifierExtension_count);
		for(int i = 0; i < result_ActivityDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ActivityDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(activityDefinition, "url");
	if(cjson_url)
	{
		result_ActivityDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(activityDefinition, "identifier");
	if(cjson_identifier)
	{
		result_ActivityDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ActivityDefinition->identifier = PushArray(arena, Identifier, result_ActivityDefinition->identifier_count);
		for(int i = 0; i < result_ActivityDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ActivityDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(activityDefinition, "version");
	if(cjson_version)
	{
		result_ActivityDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(activityDefinition, "name");
	if(cjson_name)
	{
		result_ActivityDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(activityDefinition, "title");
	if(cjson_title)
	{
		result_ActivityDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(activityDefinition, "subtitle");
	if(cjson_subtitle)
	{
		result_ActivityDefinition->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(activityDefinition, "status");
	if(cjson_status)
	{
		result_ActivityDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(activityDefinition, "experimental");
	if(cjson_experimental)
	{
		result_ActivityDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	if((bool)cJSON_HasObjectItem(activityDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueCodeableConcept");
		result_ActivityDefinition->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ActivityDefinition->subject_type = ActivityDefinition::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(activityDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueReference");
		result_ActivityDefinition->subject.valueReference = Deserialize_Reference(arena, item);
		result_ActivityDefinition->subject_type = ActivityDefinition::SubjectType::Reference;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(activityDefinition, "date");
	if(cjson_date)
	{
		result_ActivityDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(activityDefinition, "publisher");
	if(cjson_publisher)
	{
		result_ActivityDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(activityDefinition, "contact");
	if(cjson_contact)
	{
		result_ActivityDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ActivityDefinition->contact = PushArray(arena, ContactDetail, result_ActivityDefinition->contact_count);
		for(int i = 0; i < result_ActivityDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ActivityDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(activityDefinition, "description");
	if(cjson_description)
	{
		result_ActivityDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(activityDefinition, "useContext");
	if(cjson_useContext)
	{
		result_ActivityDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ActivityDefinition->useContext = PushArray(arena, UsageContext, result_ActivityDefinition->useContext_count);
		for(int i = 0; i < result_ActivityDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ActivityDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(activityDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ActivityDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ActivityDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_ActivityDefinition->jurisdiction_count);
		for(int i = 0; i < result_ActivityDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ActivityDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(activityDefinition, "purpose");
	if(cjson_purpose)
	{
		result_ActivityDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(activityDefinition, "usage");
	if(cjson_usage)
	{
		result_ActivityDefinition->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(activityDefinition, "copyright");
	if(cjson_copyright)
	{
		result_ActivityDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(activityDefinition, "approvalDate");
	if(cjson_approvalDate)
	{
		result_ActivityDefinition->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(activityDefinition, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_ActivityDefinition->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(activityDefinition, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_ActivityDefinition->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(activityDefinition, "topic");
	if(cjson_topic)
	{
		result_ActivityDefinition->topic_count = cJSON_GetArraySize(cjson_topic);
		result_ActivityDefinition->topic = PushArray(arena, CodeableConcept, result_ActivityDefinition->topic_count);
		for(int i = 0; i < result_ActivityDefinition->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_ActivityDefinition->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(activityDefinition, "author");
	if(cjson_author)
	{
		result_ActivityDefinition->author_count = cJSON_GetArraySize(cjson_author);
		result_ActivityDefinition->author = PushArray(arena, ContactDetail, result_ActivityDefinition->author_count);
		for(int i = 0; i < result_ActivityDefinition->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_ActivityDefinition->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(activityDefinition, "editor");
	if(cjson_editor)
	{
		result_ActivityDefinition->editor_count = cJSON_GetArraySize(cjson_editor);
		result_ActivityDefinition->editor = PushArray(arena, ContactDetail, result_ActivityDefinition->editor_count);
		for(int i = 0; i < result_ActivityDefinition->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_ActivityDefinition->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(activityDefinition, "reviewer");
	if(cjson_reviewer)
	{
		result_ActivityDefinition->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_ActivityDefinition->reviewer = PushArray(arena, ContactDetail, result_ActivityDefinition->reviewer_count);
		for(int i = 0; i < result_ActivityDefinition->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_ActivityDefinition->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(activityDefinition, "endorser");
	if(cjson_endorser)
	{
		result_ActivityDefinition->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_ActivityDefinition->endorser = PushArray(arena, ContactDetail, result_ActivityDefinition->endorser_count);
		for(int i = 0; i < result_ActivityDefinition->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_ActivityDefinition->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(activityDefinition, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_ActivityDefinition->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_ActivityDefinition->relatedArtifact = PushArray(arena, RelatedArtifact, result_ActivityDefinition->relatedArtifact_count);
		for(int i = 0; i < result_ActivityDefinition->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_ActivityDefinition->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_library =  cJSON_GetObjectItem(activityDefinition, "library");
	if(cjson_library)
	{
		result_ActivityDefinition->library_count = cJSON_GetArraySize(cjson_library);
		result_ActivityDefinition->library = PushArray(arena, fhir_canonical, result_ActivityDefinition->library_count);
		for(int i = 0; i < result_ActivityDefinition->library_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_library, i);
			result_ActivityDefinition->library[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(activityDefinition, "kind");
	if(cjson_kind)
	{
		result_ActivityDefinition->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(activityDefinition, "profile");
	if(cjson_profile)
	{
		result_ActivityDefinition->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(activityDefinition, "code");
	if(cjson_code)
	{
		result_ActivityDefinition->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(activityDefinition, "intent");
	if(cjson_intent)
	{
		result_ActivityDefinition->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(activityDefinition, "priority");
	if(cjson_priority)
	{
		result_ActivityDefinition->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_doNotPerform =  cJSON_GetObjectItem(activityDefinition, "doNotPerform");
	if(cjson_doNotPerform)
	{
		result_ActivityDefinition->doNotPerform = (boolean)cJSON_IsTrue(cjson_doNotPerform);
	}
	if((bool)cJSON_HasObjectItem(activityDefinition, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueTiming");
		result_ActivityDefinition->timing.valueTiming = Deserialize_Timing(arena, item);
		result_ActivityDefinition->timing_type = ActivityDefinition::TimingType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(activityDefinition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueDateTime");
		result_ActivityDefinition->timing.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ActivityDefinition->timing_type = ActivityDefinition::TimingType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(activityDefinition, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueAge");
		result_ActivityDefinition->timing.valueAge = Deserialize_Age(arena, item);
		result_ActivityDefinition->timing_type = ActivityDefinition::TimingType::Age;
	}
	else if((bool)cJSON_HasObjectItem(activityDefinition, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valuePeriod");
		result_ActivityDefinition->timing.valuePeriod = Deserialize_Period(arena, item);
		result_ActivityDefinition->timing_type = ActivityDefinition::TimingType::Period;
	}
	else if((bool)cJSON_HasObjectItem(activityDefinition, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueRange");
		result_ActivityDefinition->timing.valueRange = Deserialize_Range(arena, item);
		result_ActivityDefinition->timing_type = ActivityDefinition::TimingType::Range;
	}
	else if((bool)cJSON_HasObjectItem(activityDefinition, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueDuration");
		result_ActivityDefinition->timing.valueDuration = Deserialize_Duration(arena, item);
		result_ActivityDefinition->timing_type = ActivityDefinition::TimingType::Duration;
	}


	cJSON *cjson_location =  cJSON_GetObjectItem(activityDefinition, "location");
	if(cjson_location)
	{
		result_ActivityDefinition->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_participant =  cJSON_GetObjectItem(activityDefinition, "participant");
	if(cjson_participant)
	{
		result_ActivityDefinition->participant_count = cJSON_GetArraySize(cjson_participant);
		result_ActivityDefinition->participant = PushArray(arena, ActivityDefinition_Participant, result_ActivityDefinition->participant_count);
		for(int i = 0; i < result_ActivityDefinition->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_ActivityDefinition->participant[i] = *Deserialize_ActivityDefinition_Participant(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(activityDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueReference");
		result_ActivityDefinition->product.valueReference = Deserialize_Reference(arena, item);
		result_ActivityDefinition->product_type = ActivityDefinition::ProductType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(activityDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(activityDefinition, "valueCodeableConcept");
		result_ActivityDefinition->product.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ActivityDefinition->product_type = ActivityDefinition::ProductType::CodeableConcept;
	}


	cJSON *cjson_quantity =  cJSON_GetObjectItem(activityDefinition, "quantity");
	if(cjson_quantity)
	{
		result_ActivityDefinition->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_dosage =  cJSON_GetObjectItem(activityDefinition, "dosage");
	if(cjson_dosage)
	{
		result_ActivityDefinition->dosage_count = cJSON_GetArraySize(cjson_dosage);
		result_ActivityDefinition->dosage = PushArray(arena, Dosage, result_ActivityDefinition->dosage_count);
		for(int i = 0; i < result_ActivityDefinition->dosage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dosage, i);
			result_ActivityDefinition->dosage[i] = *Deserialize_Dosage(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(activityDefinition, "bodySite");
	if(cjson_bodySite)
	{
		result_ActivityDefinition->bodySite_count = cJSON_GetArraySize(cjson_bodySite);
		result_ActivityDefinition->bodySite = PushArray(arena, CodeableConcept, result_ActivityDefinition->bodySite_count);
		for(int i = 0; i < result_ActivityDefinition->bodySite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_bodySite, i);
			result_ActivityDefinition->bodySite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specimenRequirement =  cJSON_GetObjectItem(activityDefinition, "specimenRequirement");
	if(cjson_specimenRequirement)
	{
		result_ActivityDefinition->specimenRequirement_count = cJSON_GetArraySize(cjson_specimenRequirement);
		result_ActivityDefinition->specimenRequirement = PushArray(arena, Reference, result_ActivityDefinition->specimenRequirement_count);
		for(int i = 0; i < result_ActivityDefinition->specimenRequirement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specimenRequirement, i);
			result_ActivityDefinition->specimenRequirement[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_observationRequirement =  cJSON_GetObjectItem(activityDefinition, "observationRequirement");
	if(cjson_observationRequirement)
	{
		result_ActivityDefinition->observationRequirement_count = cJSON_GetArraySize(cjson_observationRequirement);
		result_ActivityDefinition->observationRequirement = PushArray(arena, Reference, result_ActivityDefinition->observationRequirement_count);
		for(int i = 0; i < result_ActivityDefinition->observationRequirement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_observationRequirement, i);
			result_ActivityDefinition->observationRequirement[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_observationResultRequirement =  cJSON_GetObjectItem(activityDefinition, "observationResultRequirement");
	if(cjson_observationResultRequirement)
	{
		result_ActivityDefinition->observationResultRequirement_count = cJSON_GetArraySize(cjson_observationResultRequirement);
		result_ActivityDefinition->observationResultRequirement = PushArray(arena, Reference, result_ActivityDefinition->observationResultRequirement_count);
		for(int i = 0; i < result_ActivityDefinition->observationResultRequirement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_observationResultRequirement, i);
			result_ActivityDefinition->observationResultRequirement[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_transform =  cJSON_GetObjectItem(activityDefinition, "transform");
	if(cjson_transform)
	{
		result_ActivityDefinition->transform = Str8C(cJSON_GetStringValue(cjson_transform));
	}
	cJSON *cjson_dynamicValue =  cJSON_GetObjectItem(activityDefinition, "dynamicValue");
	if(cjson_dynamicValue)
	{
		result_ActivityDefinition->dynamicValue_count = cJSON_GetArraySize(cjson_dynamicValue);
		result_ActivityDefinition->dynamicValue = PushArray(arena, ActivityDefinition_DynamicValue, result_ActivityDefinition->dynamicValue_count);
		for(int i = 0; i < result_ActivityDefinition->dynamicValue_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dynamicValue, i);
			result_ActivityDefinition->dynamicValue[i] = *Deserialize_ActivityDefinition_DynamicValue(arena, internal);
		}

	}
	return result_ActivityDefinition;
}

ActivityDefinition_Participant*
Deserialize_ActivityDefinition_Participant(Arena *arena, cJSON *activityDefinition_Participant)
{
	ActivityDefinition_Participant *result_ActivityDefinition_Participant = PushArray(arena, ActivityDefinition_Participant, 1);
	result_ActivityDefinition_Participant->resourceType = ResourceType::ActivityDefinition_Participant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(activityDefinition_Participant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(activityDefinition_Participant, "id");
	if(cjson_id)
	{
		result_ActivityDefinition_Participant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(activityDefinition_Participant, "extension");
	if(cjson_extension)
	{
		result_ActivityDefinition_Participant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ActivityDefinition_Participant->extension = PushArray(arena, Extension, result_ActivityDefinition_Participant->extension_count);
		for(int i = 0; i < result_ActivityDefinition_Participant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ActivityDefinition_Participant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(activityDefinition_Participant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ActivityDefinition_Participant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ActivityDefinition_Participant->modifierExtension = PushArray(arena, Extension, result_ActivityDefinition_Participant->modifierExtension_count);
		for(int i = 0; i < result_ActivityDefinition_Participant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ActivityDefinition_Participant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(activityDefinition_Participant, "type");
	if(cjson_type)
	{
		result_ActivityDefinition_Participant->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(activityDefinition_Participant, "role");
	if(cjson_role)
	{
		result_ActivityDefinition_Participant->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	return result_ActivityDefinition_Participant;
}

ActivityDefinition_DynamicValue*
Deserialize_ActivityDefinition_DynamicValue(Arena *arena, cJSON *activityDefinition_DynamicValue)
{
	ActivityDefinition_DynamicValue *result_ActivityDefinition_DynamicValue = PushArray(arena, ActivityDefinition_DynamicValue, 1);
	result_ActivityDefinition_DynamicValue->resourceType = ResourceType::ActivityDefinition_DynamicValue;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(activityDefinition_DynamicValue, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(activityDefinition_DynamicValue, "id");
	if(cjson_id)
	{
		result_ActivityDefinition_DynamicValue->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(activityDefinition_DynamicValue, "extension");
	if(cjson_extension)
	{
		result_ActivityDefinition_DynamicValue->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ActivityDefinition_DynamicValue->extension = PushArray(arena, Extension, result_ActivityDefinition_DynamicValue->extension_count);
		for(int i = 0; i < result_ActivityDefinition_DynamicValue->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ActivityDefinition_DynamicValue->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(activityDefinition_DynamicValue, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ActivityDefinition_DynamicValue->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ActivityDefinition_DynamicValue->modifierExtension = PushArray(arena, Extension, result_ActivityDefinition_DynamicValue->modifierExtension_count);
		for(int i = 0; i < result_ActivityDefinition_DynamicValue->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ActivityDefinition_DynamicValue->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(activityDefinition_DynamicValue, "path");
	if(cjson_path)
	{
		result_ActivityDefinition_DynamicValue->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(activityDefinition_DynamicValue, "expression");
	if(cjson_expression)
	{
		result_ActivityDefinition_DynamicValue->expression = Deserialize_Expression(arena, cjson_expression);
	}
	return result_ActivityDefinition_DynamicValue;
}

AdverseEvent*
Deserialize_AdverseEvent(Arena *arena, cJSON *adverseEvent)
{
	AdverseEvent *result_AdverseEvent = PushArray(arena, AdverseEvent, 1);
	result_AdverseEvent->resourceType = ResourceType::AdverseEvent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(adverseEvent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(adverseEvent, "id");
	if(cjson_id)
	{
		result_AdverseEvent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(adverseEvent, "meta");
	if(cjson_meta)
	{
		result_AdverseEvent->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(adverseEvent, "implicitRules");
	if(cjson_implicitRules)
	{
		result_AdverseEvent->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(adverseEvent, "language");
	if(cjson_language)
	{
		result_AdverseEvent->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(adverseEvent, "text");
	if(cjson_text)
	{
		result_AdverseEvent->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(adverseEvent, "contained");
	if(cjson_contained)
	{
		result_AdverseEvent->contained_count = cJSON_GetArraySize(cjson_contained);
		result_AdverseEvent->contained = PushArray(arena, Resource, result_AdverseEvent->contained_count);
		for(int i = 0; i < result_AdverseEvent->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_AdverseEvent->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(adverseEvent, "extension");
	if(cjson_extension)
	{
		result_AdverseEvent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AdverseEvent->extension = PushArray(arena, Extension, result_AdverseEvent->extension_count);
		for(int i = 0; i < result_AdverseEvent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AdverseEvent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(adverseEvent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AdverseEvent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AdverseEvent->modifierExtension = PushArray(arena, Extension, result_AdverseEvent->modifierExtension_count);
		for(int i = 0; i < result_AdverseEvent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AdverseEvent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(adverseEvent, "identifier");
	if(cjson_identifier)
	{
		result_AdverseEvent->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_actuality =  cJSON_GetObjectItem(adverseEvent, "actuality");
	if(cjson_actuality)
	{
		result_AdverseEvent->actuality = Str8C(cJSON_GetStringValue(cjson_actuality));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(adverseEvent, "category");
	if(cjson_category)
	{
		result_AdverseEvent->category_count = cJSON_GetArraySize(cjson_category);
		result_AdverseEvent->category = PushArray(arena, CodeableConcept, result_AdverseEvent->category_count);
		for(int i = 0; i < result_AdverseEvent->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_AdverseEvent->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_event =  cJSON_GetObjectItem(adverseEvent, "event");
	if(cjson_event)
	{
		result_AdverseEvent->event = Deserialize_CodeableConcept(arena, cjson_event);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(adverseEvent, "subject");
	if(cjson_subject)
	{
		result_AdverseEvent->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(adverseEvent, "encounter");
	if(cjson_encounter)
	{
		result_AdverseEvent->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(adverseEvent, "date");
	if(cjson_date)
	{
		result_AdverseEvent->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_detected =  cJSON_GetObjectItem(adverseEvent, "detected");
	if(cjson_detected)
	{
		result_AdverseEvent->detected = Str8C(cJSON_GetStringValue(cjson_detected));
	}
	cJSON *cjson_recordedDate =  cJSON_GetObjectItem(adverseEvent, "recordedDate");
	if(cjson_recordedDate)
	{
		result_AdverseEvent->recordedDate = Str8C(cJSON_GetStringValue(cjson_recordedDate));
	}
	cJSON *cjson_resultingCondition =  cJSON_GetObjectItem(adverseEvent, "resultingCondition");
	if(cjson_resultingCondition)
	{
		result_AdverseEvent->resultingCondition_count = cJSON_GetArraySize(cjson_resultingCondition);
		result_AdverseEvent->resultingCondition = PushArray(arena, Reference, result_AdverseEvent->resultingCondition_count);
		for(int i = 0; i < result_AdverseEvent->resultingCondition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resultingCondition, i);
			result_AdverseEvent->resultingCondition[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(adverseEvent, "location");
	if(cjson_location)
	{
		result_AdverseEvent->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_seriousness =  cJSON_GetObjectItem(adverseEvent, "seriousness");
	if(cjson_seriousness)
	{
		result_AdverseEvent->seriousness = Deserialize_CodeableConcept(arena, cjson_seriousness);
	}
	cJSON *cjson_severity =  cJSON_GetObjectItem(adverseEvent, "severity");
	if(cjson_severity)
	{
		result_AdverseEvent->severity = Deserialize_CodeableConcept(arena, cjson_severity);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(adverseEvent, "outcome");
	if(cjson_outcome)
	{
		result_AdverseEvent->outcome = Deserialize_CodeableConcept(arena, cjson_outcome);
	}
	cJSON *cjson_recorder =  cJSON_GetObjectItem(adverseEvent, "recorder");
	if(cjson_recorder)
	{
		result_AdverseEvent->recorder = Deserialize_Reference(arena, cjson_recorder);
	}
	cJSON *cjson_contributor =  cJSON_GetObjectItem(adverseEvent, "contributor");
	if(cjson_contributor)
	{
		result_AdverseEvent->contributor_count = cJSON_GetArraySize(cjson_contributor);
		result_AdverseEvent->contributor = PushArray(arena, Reference, result_AdverseEvent->contributor_count);
		for(int i = 0; i < result_AdverseEvent->contributor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contributor, i);
			result_AdverseEvent->contributor[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_suspectEntity =  cJSON_GetObjectItem(adverseEvent, "suspectEntity");
	if(cjson_suspectEntity)
	{
		result_AdverseEvent->suspectEntity_count = cJSON_GetArraySize(cjson_suspectEntity);
		result_AdverseEvent->suspectEntity = PushArray(arena, AdverseEvent_SuspectEntity, result_AdverseEvent->suspectEntity_count);
		for(int i = 0; i < result_AdverseEvent->suspectEntity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_suspectEntity, i);
			result_AdverseEvent->suspectEntity[i] = *Deserialize_AdverseEvent_SuspectEntity(arena, internal);
		}

	}
	cJSON *cjson_subjectMedicalHistory =  cJSON_GetObjectItem(adverseEvent, "subjectMedicalHistory");
	if(cjson_subjectMedicalHistory)
	{
		result_AdverseEvent->subjectMedicalHistory_count = cJSON_GetArraySize(cjson_subjectMedicalHistory);
		result_AdverseEvent->subjectMedicalHistory = PushArray(arena, Reference, result_AdverseEvent->subjectMedicalHistory_count);
		for(int i = 0; i < result_AdverseEvent->subjectMedicalHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subjectMedicalHistory, i);
			result_AdverseEvent->subjectMedicalHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_referenceDocument =  cJSON_GetObjectItem(adverseEvent, "referenceDocument");
	if(cjson_referenceDocument)
	{
		result_AdverseEvent->referenceDocument_count = cJSON_GetArraySize(cjson_referenceDocument);
		result_AdverseEvent->referenceDocument = PushArray(arena, Reference, result_AdverseEvent->referenceDocument_count);
		for(int i = 0; i < result_AdverseEvent->referenceDocument_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referenceDocument, i);
			result_AdverseEvent->referenceDocument[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_study =  cJSON_GetObjectItem(adverseEvent, "study");
	if(cjson_study)
	{
		result_AdverseEvent->study_count = cJSON_GetArraySize(cjson_study);
		result_AdverseEvent->study = PushArray(arena, Reference, result_AdverseEvent->study_count);
		for(int i = 0; i < result_AdverseEvent->study_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_study, i);
			result_AdverseEvent->study[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_AdverseEvent;
}

AdverseEvent_SuspectEntity*
Deserialize_AdverseEvent_SuspectEntity(Arena *arena, cJSON *adverseEvent_SuspectEntity)
{
	AdverseEvent_SuspectEntity *result_AdverseEvent_SuspectEntity = PushArray(arena, AdverseEvent_SuspectEntity, 1);
	result_AdverseEvent_SuspectEntity->resourceType = ResourceType::AdverseEvent_SuspectEntity;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(adverseEvent_SuspectEntity, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(adverseEvent_SuspectEntity, "id");
	if(cjson_id)
	{
		result_AdverseEvent_SuspectEntity->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(adverseEvent_SuspectEntity, "extension");
	if(cjson_extension)
	{
		result_AdverseEvent_SuspectEntity->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AdverseEvent_SuspectEntity->extension = PushArray(arena, Extension, result_AdverseEvent_SuspectEntity->extension_count);
		for(int i = 0; i < result_AdverseEvent_SuspectEntity->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AdverseEvent_SuspectEntity->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(adverseEvent_SuspectEntity, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AdverseEvent_SuspectEntity->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AdverseEvent_SuspectEntity->modifierExtension = PushArray(arena, Extension, result_AdverseEvent_SuspectEntity->modifierExtension_count);
		for(int i = 0; i < result_AdverseEvent_SuspectEntity->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AdverseEvent_SuspectEntity->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_instance =  cJSON_GetObjectItem(adverseEvent_SuspectEntity, "instance");
	if(cjson_instance)
	{
		result_AdverseEvent_SuspectEntity->instance = Deserialize_Reference(arena, cjson_instance);
	}
	cJSON *cjson_causality =  cJSON_GetObjectItem(adverseEvent_SuspectEntity, "causality");
	if(cjson_causality)
	{
		result_AdverseEvent_SuspectEntity->causality_count = cJSON_GetArraySize(cjson_causality);
		result_AdverseEvent_SuspectEntity->causality = PushArray(arena, AdverseEvent_SuspectEntity_Causality, result_AdverseEvent_SuspectEntity->causality_count);
		for(int i = 0; i < result_AdverseEvent_SuspectEntity->causality_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_causality, i);
			result_AdverseEvent_SuspectEntity->causality[i] = *Deserialize_AdverseEvent_SuspectEntity_Causality(arena, internal);
		}

	}
	return result_AdverseEvent_SuspectEntity;
}

AdverseEvent_SuspectEntity_Causality*
Deserialize_AdverseEvent_SuspectEntity_Causality(Arena *arena, cJSON *adverseEvent_SuspectEntity_Causality)
{
	AdverseEvent_SuspectEntity_Causality *result_AdverseEvent_SuspectEntity_Causality = PushArray(arena, AdverseEvent_SuspectEntity_Causality, 1);
	result_AdverseEvent_SuspectEntity_Causality->resourceType = ResourceType::AdverseEvent_SuspectEntity_Causality;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "id");
	if(cjson_id)
	{
		result_AdverseEvent_SuspectEntity_Causality->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "extension");
	if(cjson_extension)
	{
		result_AdverseEvent_SuspectEntity_Causality->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AdverseEvent_SuspectEntity_Causality->extension = PushArray(arena, Extension, result_AdverseEvent_SuspectEntity_Causality->extension_count);
		for(int i = 0; i < result_AdverseEvent_SuspectEntity_Causality->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AdverseEvent_SuspectEntity_Causality->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AdverseEvent_SuspectEntity_Causality->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AdverseEvent_SuspectEntity_Causality->modifierExtension = PushArray(arena, Extension, result_AdverseEvent_SuspectEntity_Causality->modifierExtension_count);
		for(int i = 0; i < result_AdverseEvent_SuspectEntity_Causality->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AdverseEvent_SuspectEntity_Causality->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_assessment =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "assessment");
	if(cjson_assessment)
	{
		result_AdverseEvent_SuspectEntity_Causality->assessment = Deserialize_CodeableConcept(arena, cjson_assessment);
	}
	cJSON *cjson_productRelatedness =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "productRelatedness");
	if(cjson_productRelatedness)
	{
		result_AdverseEvent_SuspectEntity_Causality->productRelatedness = Str8C(cJSON_GetStringValue(cjson_productRelatedness));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "author");
	if(cjson_author)
	{
		result_AdverseEvent_SuspectEntity_Causality->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(adverseEvent_SuspectEntity_Causality, "method");
	if(cjson_method)
	{
		result_AdverseEvent_SuspectEntity_Causality->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	return result_AdverseEvent_SuspectEntity_Causality;
}

AllergyIntolerance*
Deserialize_AllergyIntolerance(Arena *arena, cJSON *allergyIntolerance)
{
	AllergyIntolerance *result_AllergyIntolerance = PushArray(arena, AllergyIntolerance, 1);
	result_AllergyIntolerance->resourceType = ResourceType::AllergyIntolerance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(allergyIntolerance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(allergyIntolerance, "id");
	if(cjson_id)
	{
		result_AllergyIntolerance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(allergyIntolerance, "meta");
	if(cjson_meta)
	{
		result_AllergyIntolerance->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(allergyIntolerance, "implicitRules");
	if(cjson_implicitRules)
	{
		result_AllergyIntolerance->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(allergyIntolerance, "language");
	if(cjson_language)
	{
		result_AllergyIntolerance->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(allergyIntolerance, "text");
	if(cjson_text)
	{
		result_AllergyIntolerance->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(allergyIntolerance, "contained");
	if(cjson_contained)
	{
		result_AllergyIntolerance->contained_count = cJSON_GetArraySize(cjson_contained);
		result_AllergyIntolerance->contained = PushArray(arena, Resource, result_AllergyIntolerance->contained_count);
		for(int i = 0; i < result_AllergyIntolerance->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_AllergyIntolerance->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(allergyIntolerance, "extension");
	if(cjson_extension)
	{
		result_AllergyIntolerance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AllergyIntolerance->extension = PushArray(arena, Extension, result_AllergyIntolerance->extension_count);
		for(int i = 0; i < result_AllergyIntolerance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AllergyIntolerance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(allergyIntolerance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AllergyIntolerance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AllergyIntolerance->modifierExtension = PushArray(arena, Extension, result_AllergyIntolerance->modifierExtension_count);
		for(int i = 0; i < result_AllergyIntolerance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AllergyIntolerance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(allergyIntolerance, "identifier");
	if(cjson_identifier)
	{
		result_AllergyIntolerance->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_AllergyIntolerance->identifier = PushArray(arena, Identifier, result_AllergyIntolerance->identifier_count);
		for(int i = 0; i < result_AllergyIntolerance->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_AllergyIntolerance->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_clinicalStatus =  cJSON_GetObjectItem(allergyIntolerance, "clinicalStatus");
	if(cjson_clinicalStatus)
	{
		result_AllergyIntolerance->clinicalStatus = Deserialize_CodeableConcept(arena, cjson_clinicalStatus);
	}
	cJSON *cjson_verificationStatus =  cJSON_GetObjectItem(allergyIntolerance, "verificationStatus");
	if(cjson_verificationStatus)
	{
		result_AllergyIntolerance->verificationStatus = Deserialize_CodeableConcept(arena, cjson_verificationStatus);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(allergyIntolerance, "type");
	if(cjson_type)
	{
		result_AllergyIntolerance->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(allergyIntolerance, "category");
	if(cjson_category)
	{
		result_AllergyIntolerance->category_count = cJSON_GetArraySize(cjson_category);
		result_AllergyIntolerance->category = PushArray(arena, fhir_code, result_AllergyIntolerance->category_count);
		for(int i = 0; i < result_AllergyIntolerance->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_AllergyIntolerance->category[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_criticality =  cJSON_GetObjectItem(allergyIntolerance, "criticality");
	if(cjson_criticality)
	{
		result_AllergyIntolerance->criticality = Str8C(cJSON_GetStringValue(cjson_criticality));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(allergyIntolerance, "code");
	if(cjson_code)
	{
		result_AllergyIntolerance->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(allergyIntolerance, "patient");
	if(cjson_patient)
	{
		result_AllergyIntolerance->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(allergyIntolerance, "encounter");
	if(cjson_encounter)
	{
		result_AllergyIntolerance->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(allergyIntolerance, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(allergyIntolerance, "valueDateTime");
		result_AllergyIntolerance->onset.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_AllergyIntolerance->onset_type = AllergyIntolerance::OnsetType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(allergyIntolerance, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(allergyIntolerance, "valueAge");
		result_AllergyIntolerance->onset.valueAge = Deserialize_Age(arena, item);
		result_AllergyIntolerance->onset_type = AllergyIntolerance::OnsetType::Age;
	}
	else if((bool)cJSON_HasObjectItem(allergyIntolerance, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(allergyIntolerance, "valuePeriod");
		result_AllergyIntolerance->onset.valuePeriod = Deserialize_Period(arena, item);
		result_AllergyIntolerance->onset_type = AllergyIntolerance::OnsetType::Period;
	}
	else if((bool)cJSON_HasObjectItem(allergyIntolerance, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(allergyIntolerance, "valueRange");
		result_AllergyIntolerance->onset.valueRange = Deserialize_Range(arena, item);
		result_AllergyIntolerance->onset_type = AllergyIntolerance::OnsetType::Range;
	}
	else if((bool)cJSON_HasObjectItem(allergyIntolerance, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(allergyIntolerance, "valueString");
		result_AllergyIntolerance->onset.valueString = Str8C(cJSON_GetStringValue(item));
		result_AllergyIntolerance->onset_type = AllergyIntolerance::OnsetType::fhir_string;
	}


	cJSON *cjson_recordedDate =  cJSON_GetObjectItem(allergyIntolerance, "recordedDate");
	if(cjson_recordedDate)
	{
		result_AllergyIntolerance->recordedDate = Str8C(cJSON_GetStringValue(cjson_recordedDate));
	}
	cJSON *cjson_recorder =  cJSON_GetObjectItem(allergyIntolerance, "recorder");
	if(cjson_recorder)
	{
		result_AllergyIntolerance->recorder = Deserialize_Reference(arena, cjson_recorder);
	}
	cJSON *cjson_asserter =  cJSON_GetObjectItem(allergyIntolerance, "asserter");
	if(cjson_asserter)
	{
		result_AllergyIntolerance->asserter = Deserialize_Reference(arena, cjson_asserter);
	}
	cJSON *cjson_lastOccurrence =  cJSON_GetObjectItem(allergyIntolerance, "lastOccurrence");
	if(cjson_lastOccurrence)
	{
		result_AllergyIntolerance->lastOccurrence = Str8C(cJSON_GetStringValue(cjson_lastOccurrence));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(allergyIntolerance, "note");
	if(cjson_note)
	{
		result_AllergyIntolerance->note_count = cJSON_GetArraySize(cjson_note);
		result_AllergyIntolerance->note = PushArray(arena, Annotation, result_AllergyIntolerance->note_count);
		for(int i = 0; i < result_AllergyIntolerance->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_AllergyIntolerance->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_reaction =  cJSON_GetObjectItem(allergyIntolerance, "reaction");
	if(cjson_reaction)
	{
		result_AllergyIntolerance->reaction_count = cJSON_GetArraySize(cjson_reaction);
		result_AllergyIntolerance->reaction = PushArray(arena, AllergyIntolerance_Reaction, result_AllergyIntolerance->reaction_count);
		for(int i = 0; i < result_AllergyIntolerance->reaction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reaction, i);
			result_AllergyIntolerance->reaction[i] = *Deserialize_AllergyIntolerance_Reaction(arena, internal);
		}

	}
	return result_AllergyIntolerance;
}

AllergyIntolerance_Reaction*
Deserialize_AllergyIntolerance_Reaction(Arena *arena, cJSON *allergyIntolerance_Reaction)
{
	AllergyIntolerance_Reaction *result_AllergyIntolerance_Reaction = PushArray(arena, AllergyIntolerance_Reaction, 1);
	result_AllergyIntolerance_Reaction->resourceType = ResourceType::AllergyIntolerance_Reaction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "id");
	if(cjson_id)
	{
		result_AllergyIntolerance_Reaction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "extension");
	if(cjson_extension)
	{
		result_AllergyIntolerance_Reaction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AllergyIntolerance_Reaction->extension = PushArray(arena, Extension, result_AllergyIntolerance_Reaction->extension_count);
		for(int i = 0; i < result_AllergyIntolerance_Reaction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AllergyIntolerance_Reaction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AllergyIntolerance_Reaction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AllergyIntolerance_Reaction->modifierExtension = PushArray(arena, Extension, result_AllergyIntolerance_Reaction->modifierExtension_count);
		for(int i = 0; i < result_AllergyIntolerance_Reaction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AllergyIntolerance_Reaction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_substance =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "substance");
	if(cjson_substance)
	{
		result_AllergyIntolerance_Reaction->substance = Deserialize_CodeableConcept(arena, cjson_substance);
	}
	cJSON *cjson_manifestation =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "manifestation");
	if(cjson_manifestation)
	{
		result_AllergyIntolerance_Reaction->manifestation_count = cJSON_GetArraySize(cjson_manifestation);
		result_AllergyIntolerance_Reaction->manifestation = PushArray(arena, CodeableConcept, result_AllergyIntolerance_Reaction->manifestation_count);
		for(int i = 0; i < result_AllergyIntolerance_Reaction->manifestation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manifestation, i);
			result_AllergyIntolerance_Reaction->manifestation[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "description");
	if(cjson_description)
	{
		result_AllergyIntolerance_Reaction->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_onset =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "onset");
	if(cjson_onset)
	{
		result_AllergyIntolerance_Reaction->onset = Str8C(cJSON_GetStringValue(cjson_onset));
	}
	cJSON *cjson_severity =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "severity");
	if(cjson_severity)
	{
		result_AllergyIntolerance_Reaction->severity = Str8C(cJSON_GetStringValue(cjson_severity));
	}
	cJSON *cjson_exposureRoute =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "exposureRoute");
	if(cjson_exposureRoute)
	{
		result_AllergyIntolerance_Reaction->exposureRoute = Deserialize_CodeableConcept(arena, cjson_exposureRoute);
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(allergyIntolerance_Reaction, "note");
	if(cjson_note)
	{
		result_AllergyIntolerance_Reaction->note_count = cJSON_GetArraySize(cjson_note);
		result_AllergyIntolerance_Reaction->note = PushArray(arena, Annotation, result_AllergyIntolerance_Reaction->note_count);
		for(int i = 0; i < result_AllergyIntolerance_Reaction->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_AllergyIntolerance_Reaction->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_AllergyIntolerance_Reaction;
}

Appointment*
Deserialize_Appointment(Arena *arena, cJSON *appointment)
{
	Appointment *result_Appointment = PushArray(arena, Appointment, 1);
	result_Appointment->resourceType = ResourceType::Appointment;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(appointment, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(appointment, "id");
	if(cjson_id)
	{
		result_Appointment->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(appointment, "meta");
	if(cjson_meta)
	{
		result_Appointment->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(appointment, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Appointment->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(appointment, "language");
	if(cjson_language)
	{
		result_Appointment->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(appointment, "text");
	if(cjson_text)
	{
		result_Appointment->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(appointment, "contained");
	if(cjson_contained)
	{
		result_Appointment->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Appointment->contained = PushArray(arena, Resource, result_Appointment->contained_count);
		for(int i = 0; i < result_Appointment->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Appointment->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(appointment, "extension");
	if(cjson_extension)
	{
		result_Appointment->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Appointment->extension = PushArray(arena, Extension, result_Appointment->extension_count);
		for(int i = 0; i < result_Appointment->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Appointment->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(appointment, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Appointment->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Appointment->modifierExtension = PushArray(arena, Extension, result_Appointment->modifierExtension_count);
		for(int i = 0; i < result_Appointment->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Appointment->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(appointment, "identifier");
	if(cjson_identifier)
	{
		result_Appointment->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Appointment->identifier = PushArray(arena, Identifier, result_Appointment->identifier_count);
		for(int i = 0; i < result_Appointment->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Appointment->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(appointment, "status");
	if(cjson_status)
	{
		result_Appointment->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_cancelationReason =  cJSON_GetObjectItem(appointment, "cancelationReason");
	if(cjson_cancelationReason)
	{
		result_Appointment->cancelationReason = Deserialize_CodeableConcept(arena, cjson_cancelationReason);
	}
	cJSON *cjson_serviceCategory =  cJSON_GetObjectItem(appointment, "serviceCategory");
	if(cjson_serviceCategory)
	{
		result_Appointment->serviceCategory_count = cJSON_GetArraySize(cjson_serviceCategory);
		result_Appointment->serviceCategory = PushArray(arena, CodeableConcept, result_Appointment->serviceCategory_count);
		for(int i = 0; i < result_Appointment->serviceCategory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_serviceCategory, i);
			result_Appointment->serviceCategory[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_serviceType =  cJSON_GetObjectItem(appointment, "serviceType");
	if(cjson_serviceType)
	{
		result_Appointment->serviceType_count = cJSON_GetArraySize(cjson_serviceType);
		result_Appointment->serviceType = PushArray(arena, CodeableConcept, result_Appointment->serviceType_count);
		for(int i = 0; i < result_Appointment->serviceType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_serviceType, i);
			result_Appointment->serviceType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialty =  cJSON_GetObjectItem(appointment, "specialty");
	if(cjson_specialty)
	{
		result_Appointment->specialty_count = cJSON_GetArraySize(cjson_specialty);
		result_Appointment->specialty = PushArray(arena, CodeableConcept, result_Appointment->specialty_count);
		for(int i = 0; i < result_Appointment->specialty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialty, i);
			result_Appointment->specialty[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_appointmentType =  cJSON_GetObjectItem(appointment, "appointmentType");
	if(cjson_appointmentType)
	{
		result_Appointment->appointmentType = Deserialize_CodeableConcept(arena, cjson_appointmentType);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(appointment, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Appointment->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_Appointment->reasonCode = PushArray(arena, CodeableConcept, result_Appointment->reasonCode_count);
		for(int i = 0; i < result_Appointment->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_Appointment->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(appointment, "reasonReference");
	if(cjson_reasonReference)
	{
		result_Appointment->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_Appointment->reasonReference = PushArray(arena, Reference, result_Appointment->reasonReference_count);
		for(int i = 0; i < result_Appointment->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_Appointment->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(appointment, "priority");
	if(cjson_priority)
	{
		result_Appointment->priority = (int)cJSON_GetNumberValue(cjson_priority);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(appointment, "description");
	if(cjson_description)
	{
		result_Appointment->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_supportingInformation =  cJSON_GetObjectItem(appointment, "supportingInformation");
	if(cjson_supportingInformation)
	{
		result_Appointment->supportingInformation_count = cJSON_GetArraySize(cjson_supportingInformation);
		result_Appointment->supportingInformation = PushArray(arena, Reference, result_Appointment->supportingInformation_count);
		for(int i = 0; i < result_Appointment->supportingInformation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInformation, i);
			result_Appointment->supportingInformation[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_start =  cJSON_GetObjectItem(appointment, "start");
	if(cjson_start)
	{
		result_Appointment->start = Str8C(cJSON_GetStringValue(cjson_start));
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(appointment, "end");
	if(cjson_end)
	{
		result_Appointment->end = Str8C(cJSON_GetStringValue(cjson_end));
	}
	cJSON *cjson_minutesDuration =  cJSON_GetObjectItem(appointment, "minutesDuration");
	if(cjson_minutesDuration)
	{
		result_Appointment->minutesDuration = (int)cJSON_GetNumberValue(cjson_minutesDuration);
	}
	cJSON *cjson_slot =  cJSON_GetObjectItem(appointment, "slot");
	if(cjson_slot)
	{
		result_Appointment->slot_count = cJSON_GetArraySize(cjson_slot);
		result_Appointment->slot = PushArray(arena, Reference, result_Appointment->slot_count);
		for(int i = 0; i < result_Appointment->slot_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_slot, i);
			result_Appointment->slot[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_created =  cJSON_GetObjectItem(appointment, "created");
	if(cjson_created)
	{
		result_Appointment->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(appointment, "comment");
	if(cjson_comment)
	{
		result_Appointment->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_patientInstruction =  cJSON_GetObjectItem(appointment, "patientInstruction");
	if(cjson_patientInstruction)
	{
		result_Appointment->patientInstruction = Str8C(cJSON_GetStringValue(cjson_patientInstruction));
	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(appointment, "basedOn");
	if(cjson_basedOn)
	{
		result_Appointment->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_Appointment->basedOn = PushArray(arena, Reference, result_Appointment->basedOn_count);
		for(int i = 0; i < result_Appointment->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_Appointment->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_participant =  cJSON_GetObjectItem(appointment, "participant");
	if(cjson_participant)
	{
		result_Appointment->participant_count = cJSON_GetArraySize(cjson_participant);
		result_Appointment->participant = PushArray(arena, Appointment_Participant, result_Appointment->participant_count);
		for(int i = 0; i < result_Appointment->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_Appointment->participant[i] = *Deserialize_Appointment_Participant(arena, internal);
		}

	}
	cJSON *cjson_requestedPeriod =  cJSON_GetObjectItem(appointment, "requestedPeriod");
	if(cjson_requestedPeriod)
	{
		result_Appointment->requestedPeriod_count = cJSON_GetArraySize(cjson_requestedPeriod);
		result_Appointment->requestedPeriod = PushArray(arena, Period, result_Appointment->requestedPeriod_count);
		for(int i = 0; i < result_Appointment->requestedPeriod_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_requestedPeriod, i);
			result_Appointment->requestedPeriod[i] = *Deserialize_Period(arena, internal);
		}

	}
	return result_Appointment;
}

Appointment_Participant*
Deserialize_Appointment_Participant(Arena *arena, cJSON *appointment_Participant)
{
	Appointment_Participant *result_Appointment_Participant = PushArray(arena, Appointment_Participant, 1);
	result_Appointment_Participant->resourceType = ResourceType::Appointment_Participant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(appointment_Participant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(appointment_Participant, "id");
	if(cjson_id)
	{
		result_Appointment_Participant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(appointment_Participant, "extension");
	if(cjson_extension)
	{
		result_Appointment_Participant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Appointment_Participant->extension = PushArray(arena, Extension, result_Appointment_Participant->extension_count);
		for(int i = 0; i < result_Appointment_Participant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Appointment_Participant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(appointment_Participant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Appointment_Participant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Appointment_Participant->modifierExtension = PushArray(arena, Extension, result_Appointment_Participant->modifierExtension_count);
		for(int i = 0; i < result_Appointment_Participant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Appointment_Participant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(appointment_Participant, "type");
	if(cjson_type)
	{
		result_Appointment_Participant->type_count = cJSON_GetArraySize(cjson_type);
		result_Appointment_Participant->type = PushArray(arena, CodeableConcept, result_Appointment_Participant->type_count);
		for(int i = 0; i < result_Appointment_Participant->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Appointment_Participant->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(appointment_Participant, "actor");
	if(cjson_actor)
	{
		result_Appointment_Participant->actor = Deserialize_Reference(arena, cjson_actor);
	}
	cJSON *cjson_required =  cJSON_GetObjectItem(appointment_Participant, "required");
	if(cjson_required)
	{
		result_Appointment_Participant->required = Str8C(cJSON_GetStringValue(cjson_required));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(appointment_Participant, "status");
	if(cjson_status)
	{
		result_Appointment_Participant->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(appointment_Participant, "period");
	if(cjson_period)
	{
		result_Appointment_Participant->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Appointment_Participant;
}

AppointmentResponse*
Deserialize_AppointmentResponse(Arena *arena, cJSON *appointmentResponse)
{
	AppointmentResponse *result_AppointmentResponse = PushArray(arena, AppointmentResponse, 1);
	result_AppointmentResponse->resourceType = ResourceType::AppointmentResponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(appointmentResponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(appointmentResponse, "id");
	if(cjson_id)
	{
		result_AppointmentResponse->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(appointmentResponse, "meta");
	if(cjson_meta)
	{
		result_AppointmentResponse->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(appointmentResponse, "implicitRules");
	if(cjson_implicitRules)
	{
		result_AppointmentResponse->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(appointmentResponse, "language");
	if(cjson_language)
	{
		result_AppointmentResponse->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(appointmentResponse, "text");
	if(cjson_text)
	{
		result_AppointmentResponse->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(appointmentResponse, "contained");
	if(cjson_contained)
	{
		result_AppointmentResponse->contained_count = cJSON_GetArraySize(cjson_contained);
		result_AppointmentResponse->contained = PushArray(arena, Resource, result_AppointmentResponse->contained_count);
		for(int i = 0; i < result_AppointmentResponse->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_AppointmentResponse->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(appointmentResponse, "extension");
	if(cjson_extension)
	{
		result_AppointmentResponse->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AppointmentResponse->extension = PushArray(arena, Extension, result_AppointmentResponse->extension_count);
		for(int i = 0; i < result_AppointmentResponse->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AppointmentResponse->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(appointmentResponse, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AppointmentResponse->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AppointmentResponse->modifierExtension = PushArray(arena, Extension, result_AppointmentResponse->modifierExtension_count);
		for(int i = 0; i < result_AppointmentResponse->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AppointmentResponse->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(appointmentResponse, "identifier");
	if(cjson_identifier)
	{
		result_AppointmentResponse->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_AppointmentResponse->identifier = PushArray(arena, Identifier, result_AppointmentResponse->identifier_count);
		for(int i = 0; i < result_AppointmentResponse->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_AppointmentResponse->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_appointment =  cJSON_GetObjectItem(appointmentResponse, "appointment");
	if(cjson_appointment)
	{
		result_AppointmentResponse->appointment = Deserialize_Reference(arena, cjson_appointment);
	}
	cJSON *cjson_start =  cJSON_GetObjectItem(appointmentResponse, "start");
	if(cjson_start)
	{
		result_AppointmentResponse->start = Str8C(cJSON_GetStringValue(cjson_start));
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(appointmentResponse, "end");
	if(cjson_end)
	{
		result_AppointmentResponse->end = Str8C(cJSON_GetStringValue(cjson_end));
	}
	cJSON *cjson_participantType =  cJSON_GetObjectItem(appointmentResponse, "participantType");
	if(cjson_participantType)
	{
		result_AppointmentResponse->participantType_count = cJSON_GetArraySize(cjson_participantType);
		result_AppointmentResponse->participantType = PushArray(arena, CodeableConcept, result_AppointmentResponse->participantType_count);
		for(int i = 0; i < result_AppointmentResponse->participantType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participantType, i);
			result_AppointmentResponse->participantType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(appointmentResponse, "actor");
	if(cjson_actor)
	{
		result_AppointmentResponse->actor = Deserialize_Reference(arena, cjson_actor);
	}
	cJSON *cjson_participantStatus =  cJSON_GetObjectItem(appointmentResponse, "participantStatus");
	if(cjson_participantStatus)
	{
		result_AppointmentResponse->participantStatus = Str8C(cJSON_GetStringValue(cjson_participantStatus));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(appointmentResponse, "comment");
	if(cjson_comment)
	{
		result_AppointmentResponse->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_AppointmentResponse;
}

AuditEvent*
Deserialize_AuditEvent(Arena *arena, cJSON *auditEvent)
{
	AuditEvent *result_AuditEvent = PushArray(arena, AuditEvent, 1);
	result_AuditEvent->resourceType = ResourceType::AuditEvent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(auditEvent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(auditEvent, "id");
	if(cjson_id)
	{
		result_AuditEvent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(auditEvent, "meta");
	if(cjson_meta)
	{
		result_AuditEvent->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(auditEvent, "implicitRules");
	if(cjson_implicitRules)
	{
		result_AuditEvent->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(auditEvent, "language");
	if(cjson_language)
	{
		result_AuditEvent->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(auditEvent, "text");
	if(cjson_text)
	{
		result_AuditEvent->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(auditEvent, "contained");
	if(cjson_contained)
	{
		result_AuditEvent->contained_count = cJSON_GetArraySize(cjson_contained);
		result_AuditEvent->contained = PushArray(arena, Resource, result_AuditEvent->contained_count);
		for(int i = 0; i < result_AuditEvent->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_AuditEvent->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(auditEvent, "extension");
	if(cjson_extension)
	{
		result_AuditEvent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AuditEvent->extension = PushArray(arena, Extension, result_AuditEvent->extension_count);
		for(int i = 0; i < result_AuditEvent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AuditEvent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(auditEvent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AuditEvent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AuditEvent->modifierExtension = PushArray(arena, Extension, result_AuditEvent->modifierExtension_count);
		for(int i = 0; i < result_AuditEvent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AuditEvent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(auditEvent, "type");
	if(cjson_type)
	{
		result_AuditEvent->type = Deserialize_Coding(arena, cjson_type);
	}
	cJSON *cjson_subtype =  cJSON_GetObjectItem(auditEvent, "subtype");
	if(cjson_subtype)
	{
		result_AuditEvent->subtype_count = cJSON_GetArraySize(cjson_subtype);
		result_AuditEvent->subtype = PushArray(arena, Coding, result_AuditEvent->subtype_count);
		for(int i = 0; i < result_AuditEvent->subtype_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subtype, i);
			result_AuditEvent->subtype[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(auditEvent, "action");
	if(cjson_action)
	{
		result_AuditEvent->action = Str8C(cJSON_GetStringValue(cjson_action));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(auditEvent, "period");
	if(cjson_period)
	{
		result_AuditEvent->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_recorded =  cJSON_GetObjectItem(auditEvent, "recorded");
	if(cjson_recorded)
	{
		result_AuditEvent->recorded = Str8C(cJSON_GetStringValue(cjson_recorded));
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(auditEvent, "outcome");
	if(cjson_outcome)
	{
		result_AuditEvent->outcome = Str8C(cJSON_GetStringValue(cjson_outcome));
	}
	cJSON *cjson_outcomeDesc =  cJSON_GetObjectItem(auditEvent, "outcomeDesc");
	if(cjson_outcomeDesc)
	{
		result_AuditEvent->outcomeDesc = Str8C(cJSON_GetStringValue(cjson_outcomeDesc));
	}
	cJSON *cjson_purposeOfEvent =  cJSON_GetObjectItem(auditEvent, "purposeOfEvent");
	if(cjson_purposeOfEvent)
	{
		result_AuditEvent->purposeOfEvent_count = cJSON_GetArraySize(cjson_purposeOfEvent);
		result_AuditEvent->purposeOfEvent = PushArray(arena, CodeableConcept, result_AuditEvent->purposeOfEvent_count);
		for(int i = 0; i < result_AuditEvent->purposeOfEvent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_purposeOfEvent, i);
			result_AuditEvent->purposeOfEvent[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_agent =  cJSON_GetObjectItem(auditEvent, "agent");
	if(cjson_agent)
	{
		result_AuditEvent->agent_count = cJSON_GetArraySize(cjson_agent);
		result_AuditEvent->agent = PushArray(arena, AuditEvent_Agent, result_AuditEvent->agent_count);
		for(int i = 0; i < result_AuditEvent->agent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_agent, i);
			result_AuditEvent->agent[i] = *Deserialize_AuditEvent_Agent(arena, internal);
		}

	}
	cJSON *cjson_source =  cJSON_GetObjectItem(auditEvent, "source");
	if(cjson_source)
	{
		result_AuditEvent->source = Deserialize_AuditEvent_Source(arena, cjson_source);
	}
	cJSON *cjson_entity =  cJSON_GetObjectItem(auditEvent, "entity");
	if(cjson_entity)
	{
		result_AuditEvent->entity_count = cJSON_GetArraySize(cjson_entity);
		result_AuditEvent->entity = PushArray(arena, AuditEvent_Entity, result_AuditEvent->entity_count);
		for(int i = 0; i < result_AuditEvent->entity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_entity, i);
			result_AuditEvent->entity[i] = *Deserialize_AuditEvent_Entity(arena, internal);
		}

	}
	return result_AuditEvent;
}

AuditEvent_Agent*
Deserialize_AuditEvent_Agent(Arena *arena, cJSON *auditEvent_Agent)
{
	AuditEvent_Agent *result_AuditEvent_Agent = PushArray(arena, AuditEvent_Agent, 1);
	result_AuditEvent_Agent->resourceType = ResourceType::AuditEvent_Agent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(auditEvent_Agent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(auditEvent_Agent, "id");
	if(cjson_id)
	{
		result_AuditEvent_Agent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(auditEvent_Agent, "extension");
	if(cjson_extension)
	{
		result_AuditEvent_Agent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AuditEvent_Agent->extension = PushArray(arena, Extension, result_AuditEvent_Agent->extension_count);
		for(int i = 0; i < result_AuditEvent_Agent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AuditEvent_Agent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(auditEvent_Agent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AuditEvent_Agent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AuditEvent_Agent->modifierExtension = PushArray(arena, Extension, result_AuditEvent_Agent->modifierExtension_count);
		for(int i = 0; i < result_AuditEvent_Agent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AuditEvent_Agent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(auditEvent_Agent, "type");
	if(cjson_type)
	{
		result_AuditEvent_Agent->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(auditEvent_Agent, "role");
	if(cjson_role)
	{
		result_AuditEvent_Agent->role_count = cJSON_GetArraySize(cjson_role);
		result_AuditEvent_Agent->role = PushArray(arena, CodeableConcept, result_AuditEvent_Agent->role_count);
		for(int i = 0; i < result_AuditEvent_Agent->role_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_role, i);
			result_AuditEvent_Agent->role[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_who =  cJSON_GetObjectItem(auditEvent_Agent, "who");
	if(cjson_who)
	{
		result_AuditEvent_Agent->who = Deserialize_Reference(arena, cjson_who);
	}
	cJSON *cjson_altId =  cJSON_GetObjectItem(auditEvent_Agent, "altId");
	if(cjson_altId)
	{
		result_AuditEvent_Agent->altId = Str8C(cJSON_GetStringValue(cjson_altId));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(auditEvent_Agent, "name");
	if(cjson_name)
	{
		result_AuditEvent_Agent->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_requestor =  cJSON_GetObjectItem(auditEvent_Agent, "requestor");
	if(cjson_requestor)
	{
		result_AuditEvent_Agent->requestor = (boolean)cJSON_IsTrue(cjson_requestor);
	}
	cJSON *cjson_location =  cJSON_GetObjectItem(auditEvent_Agent, "location");
	if(cjson_location)
	{
		result_AuditEvent_Agent->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_policy =  cJSON_GetObjectItem(auditEvent_Agent, "policy");
	if(cjson_policy)
	{
		result_AuditEvent_Agent->policy_count = cJSON_GetArraySize(cjson_policy);
		result_AuditEvent_Agent->policy = PushArray(arena, fhir_uri, result_AuditEvent_Agent->policy_count);
		for(int i = 0; i < result_AuditEvent_Agent->policy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_policy, i);
			result_AuditEvent_Agent->policy[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_media =  cJSON_GetObjectItem(auditEvent_Agent, "media");
	if(cjson_media)
	{
		result_AuditEvent_Agent->media = Deserialize_Coding(arena, cjson_media);
	}
	cJSON *cjson_network =  cJSON_GetObjectItem(auditEvent_Agent, "network");
	if(cjson_network)
	{
		result_AuditEvent_Agent->network = Deserialize_AuditEvent_Agent_Network(arena, cjson_network);
	}
	cJSON *cjson_purposeOfUse =  cJSON_GetObjectItem(auditEvent_Agent, "purposeOfUse");
	if(cjson_purposeOfUse)
	{
		result_AuditEvent_Agent->purposeOfUse_count = cJSON_GetArraySize(cjson_purposeOfUse);
		result_AuditEvent_Agent->purposeOfUse = PushArray(arena, CodeableConcept, result_AuditEvent_Agent->purposeOfUse_count);
		for(int i = 0; i < result_AuditEvent_Agent->purposeOfUse_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_purposeOfUse, i);
			result_AuditEvent_Agent->purposeOfUse[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_AuditEvent_Agent;
}

AuditEvent_Agent_Network*
Deserialize_AuditEvent_Agent_Network(Arena *arena, cJSON *auditEvent_Agent_Network)
{
	AuditEvent_Agent_Network *result_AuditEvent_Agent_Network = PushArray(arena, AuditEvent_Agent_Network, 1);
	result_AuditEvent_Agent_Network->resourceType = ResourceType::AuditEvent_Agent_Network;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(auditEvent_Agent_Network, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(auditEvent_Agent_Network, "id");
	if(cjson_id)
	{
		result_AuditEvent_Agent_Network->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(auditEvent_Agent_Network, "extension");
	if(cjson_extension)
	{
		result_AuditEvent_Agent_Network->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AuditEvent_Agent_Network->extension = PushArray(arena, Extension, result_AuditEvent_Agent_Network->extension_count);
		for(int i = 0; i < result_AuditEvent_Agent_Network->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AuditEvent_Agent_Network->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(auditEvent_Agent_Network, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AuditEvent_Agent_Network->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AuditEvent_Agent_Network->modifierExtension = PushArray(arena, Extension, result_AuditEvent_Agent_Network->modifierExtension_count);
		for(int i = 0; i < result_AuditEvent_Agent_Network->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AuditEvent_Agent_Network->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(auditEvent_Agent_Network, "address");
	if(cjson_address)
	{
		result_AuditEvent_Agent_Network->address = Str8C(cJSON_GetStringValue(cjson_address));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(auditEvent_Agent_Network, "type");
	if(cjson_type)
	{
		result_AuditEvent_Agent_Network->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	return result_AuditEvent_Agent_Network;
}

AuditEvent_Source*
Deserialize_AuditEvent_Source(Arena *arena, cJSON *auditEvent_Source)
{
	AuditEvent_Source *result_AuditEvent_Source = PushArray(arena, AuditEvent_Source, 1);
	result_AuditEvent_Source->resourceType = ResourceType::AuditEvent_Source;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(auditEvent_Source, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(auditEvent_Source, "id");
	if(cjson_id)
	{
		result_AuditEvent_Source->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(auditEvent_Source, "extension");
	if(cjson_extension)
	{
		result_AuditEvent_Source->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AuditEvent_Source->extension = PushArray(arena, Extension, result_AuditEvent_Source->extension_count);
		for(int i = 0; i < result_AuditEvent_Source->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AuditEvent_Source->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(auditEvent_Source, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AuditEvent_Source->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AuditEvent_Source->modifierExtension = PushArray(arena, Extension, result_AuditEvent_Source->modifierExtension_count);
		for(int i = 0; i < result_AuditEvent_Source->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AuditEvent_Source->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_site =  cJSON_GetObjectItem(auditEvent_Source, "site");
	if(cjson_site)
	{
		result_AuditEvent_Source->site = Str8C(cJSON_GetStringValue(cjson_site));
	}
	cJSON *cjson_observer =  cJSON_GetObjectItem(auditEvent_Source, "observer");
	if(cjson_observer)
	{
		result_AuditEvent_Source->observer = Deserialize_Reference(arena, cjson_observer);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(auditEvent_Source, "type");
	if(cjson_type)
	{
		result_AuditEvent_Source->type_count = cJSON_GetArraySize(cjson_type);
		result_AuditEvent_Source->type = PushArray(arena, Coding, result_AuditEvent_Source->type_count);
		for(int i = 0; i < result_AuditEvent_Source->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_AuditEvent_Source->type[i] = *Deserialize_Coding(arena, internal);
		}

	}
	return result_AuditEvent_Source;
}

AuditEvent_Entity*
Deserialize_AuditEvent_Entity(Arena *arena, cJSON *auditEvent_Entity)
{
	AuditEvent_Entity *result_AuditEvent_Entity = PushArray(arena, AuditEvent_Entity, 1);
	result_AuditEvent_Entity->resourceType = ResourceType::AuditEvent_Entity;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(auditEvent_Entity, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(auditEvent_Entity, "id");
	if(cjson_id)
	{
		result_AuditEvent_Entity->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(auditEvent_Entity, "extension");
	if(cjson_extension)
	{
		result_AuditEvent_Entity->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AuditEvent_Entity->extension = PushArray(arena, Extension, result_AuditEvent_Entity->extension_count);
		for(int i = 0; i < result_AuditEvent_Entity->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AuditEvent_Entity->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(auditEvent_Entity, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AuditEvent_Entity->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AuditEvent_Entity->modifierExtension = PushArray(arena, Extension, result_AuditEvent_Entity->modifierExtension_count);
		for(int i = 0; i < result_AuditEvent_Entity->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AuditEvent_Entity->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_what =  cJSON_GetObjectItem(auditEvent_Entity, "what");
	if(cjson_what)
	{
		result_AuditEvent_Entity->what = Deserialize_Reference(arena, cjson_what);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(auditEvent_Entity, "type");
	if(cjson_type)
	{
		result_AuditEvent_Entity->type = Deserialize_Coding(arena, cjson_type);
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(auditEvent_Entity, "role");
	if(cjson_role)
	{
		result_AuditEvent_Entity->role = Deserialize_Coding(arena, cjson_role);
	}
	cJSON *cjson_lifecycle =  cJSON_GetObjectItem(auditEvent_Entity, "lifecycle");
	if(cjson_lifecycle)
	{
		result_AuditEvent_Entity->lifecycle = Deserialize_Coding(arena, cjson_lifecycle);
	}
	cJSON *cjson_securityLabel =  cJSON_GetObjectItem(auditEvent_Entity, "securityLabel");
	if(cjson_securityLabel)
	{
		result_AuditEvent_Entity->securityLabel_count = cJSON_GetArraySize(cjson_securityLabel);
		result_AuditEvent_Entity->securityLabel = PushArray(arena, Coding, result_AuditEvent_Entity->securityLabel_count);
		for(int i = 0; i < result_AuditEvent_Entity->securityLabel_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabel, i);
			result_AuditEvent_Entity->securityLabel[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(auditEvent_Entity, "name");
	if(cjson_name)
	{
		result_AuditEvent_Entity->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(auditEvent_Entity, "description");
	if(cjson_description)
	{
		result_AuditEvent_Entity->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_query =  cJSON_GetObjectItem(auditEvent_Entity, "query");
	if(cjson_query)
	{
		result_AuditEvent_Entity->query = Str8C(cJSON_GetStringValue(cjson_query));
	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(auditEvent_Entity, "detail");
	if(cjson_detail)
	{
		result_AuditEvent_Entity->detail_count = cJSON_GetArraySize(cjson_detail);
		result_AuditEvent_Entity->detail = PushArray(arena, AuditEvent_Entity_Detail, result_AuditEvent_Entity->detail_count);
		for(int i = 0; i < result_AuditEvent_Entity->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_AuditEvent_Entity->detail[i] = *Deserialize_AuditEvent_Entity_Detail(arena, internal);
		}

	}
	return result_AuditEvent_Entity;
}

AuditEvent_Entity_Detail*
Deserialize_AuditEvent_Entity_Detail(Arena *arena, cJSON *auditEvent_Entity_Detail)
{
	AuditEvent_Entity_Detail *result_AuditEvent_Entity_Detail = PushArray(arena, AuditEvent_Entity_Detail, 1);
	result_AuditEvent_Entity_Detail->resourceType = ResourceType::AuditEvent_Entity_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(auditEvent_Entity_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(auditEvent_Entity_Detail, "id");
	if(cjson_id)
	{
		result_AuditEvent_Entity_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(auditEvent_Entity_Detail, "extension");
	if(cjson_extension)
	{
		result_AuditEvent_Entity_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_AuditEvent_Entity_Detail->extension = PushArray(arena, Extension, result_AuditEvent_Entity_Detail->extension_count);
		for(int i = 0; i < result_AuditEvent_Entity_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_AuditEvent_Entity_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(auditEvent_Entity_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_AuditEvent_Entity_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_AuditEvent_Entity_Detail->modifierExtension = PushArray(arena, Extension, result_AuditEvent_Entity_Detail->modifierExtension_count);
		for(int i = 0; i < result_AuditEvent_Entity_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_AuditEvent_Entity_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(auditEvent_Entity_Detail, "type");
	if(cjson_type)
	{
		result_AuditEvent_Entity_Detail->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	if((bool)cJSON_HasObjectItem(auditEvent_Entity_Detail, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(auditEvent_Entity_Detail, "valueString");
		result_AuditEvent_Entity_Detail->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_AuditEvent_Entity_Detail->value_type = AuditEvent_Entity_Detail::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(auditEvent_Entity_Detail, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(auditEvent_Entity_Detail, "valueBase64Binary");
		result_AuditEvent_Entity_Detail->value.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_AuditEvent_Entity_Detail->value_type = AuditEvent_Entity_Detail::ValueType::fhir_base64Binary;
	}


	return result_AuditEvent_Entity_Detail;
}

Basic*
Deserialize_Basic(Arena *arena, cJSON *basic)
{
	Basic *result_Basic = PushArray(arena, Basic, 1);
	result_Basic->resourceType = ResourceType::Basic;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(basic, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(basic, "id");
	if(cjson_id)
	{
		result_Basic->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(basic, "meta");
	if(cjson_meta)
	{
		result_Basic->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(basic, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Basic->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(basic, "language");
	if(cjson_language)
	{
		result_Basic->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(basic, "text");
	if(cjson_text)
	{
		result_Basic->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(basic, "contained");
	if(cjson_contained)
	{
		result_Basic->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Basic->contained = PushArray(arena, Resource, result_Basic->contained_count);
		for(int i = 0; i < result_Basic->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Basic->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(basic, "extension");
	if(cjson_extension)
	{
		result_Basic->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Basic->extension = PushArray(arena, Extension, result_Basic->extension_count);
		for(int i = 0; i < result_Basic->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Basic->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(basic, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Basic->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Basic->modifierExtension = PushArray(arena, Extension, result_Basic->modifierExtension_count);
		for(int i = 0; i < result_Basic->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Basic->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(basic, "identifier");
	if(cjson_identifier)
	{
		result_Basic->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Basic->identifier = PushArray(arena, Identifier, result_Basic->identifier_count);
		for(int i = 0; i < result_Basic->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Basic->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(basic, "code");
	if(cjson_code)
	{
		result_Basic->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(basic, "subject");
	if(cjson_subject)
	{
		result_Basic->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(basic, "created");
	if(cjson_created)
	{
		result_Basic->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(basic, "author");
	if(cjson_author)
	{
		result_Basic->author = Deserialize_Reference(arena, cjson_author);
	}
	return result_Basic;
}

Binary*
Deserialize_Binary(Arena *arena, cJSON *binary)
{
	Binary *result_Binary = PushArray(arena, Binary, 1);
	result_Binary->resourceType = ResourceType::Binary;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(binary, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(binary, "id");
	if(cjson_id)
	{
		result_Binary->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(binary, "meta");
	if(cjson_meta)
	{
		result_Binary->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(binary, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Binary->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(binary, "language");
	if(cjson_language)
	{
		result_Binary->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_contentType =  cJSON_GetObjectItem(binary, "contentType");
	if(cjson_contentType)
	{
		result_Binary->contentType = Str8C(cJSON_GetStringValue(cjson_contentType));
	}
	cJSON *cjson_securityContext =  cJSON_GetObjectItem(binary, "securityContext");
	if(cjson_securityContext)
	{
		result_Binary->securityContext = Deserialize_Reference(arena, cjson_securityContext);
	}
	cJSON *cjson_data =  cJSON_GetObjectItem(binary, "data");
	if(cjson_data)
	{
		result_Binary->data = Str8C(cJSON_GetStringValue(cjson_data));
	}
	return result_Binary;
}

BiologicallyDerivedProduct*
Deserialize_BiologicallyDerivedProduct(Arena *arena, cJSON *biologicallyDerivedProduct)
{
	BiologicallyDerivedProduct *result_BiologicallyDerivedProduct = PushArray(arena, BiologicallyDerivedProduct, 1);
	result_BiologicallyDerivedProduct->resourceType = ResourceType::BiologicallyDerivedProduct;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(biologicallyDerivedProduct, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(biologicallyDerivedProduct, "id");
	if(cjson_id)
	{
		result_BiologicallyDerivedProduct->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(biologicallyDerivedProduct, "meta");
	if(cjson_meta)
	{
		result_BiologicallyDerivedProduct->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(biologicallyDerivedProduct, "implicitRules");
	if(cjson_implicitRules)
	{
		result_BiologicallyDerivedProduct->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(biologicallyDerivedProduct, "language");
	if(cjson_language)
	{
		result_BiologicallyDerivedProduct->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(biologicallyDerivedProduct, "text");
	if(cjson_text)
	{
		result_BiologicallyDerivedProduct->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(biologicallyDerivedProduct, "contained");
	if(cjson_contained)
	{
		result_BiologicallyDerivedProduct->contained_count = cJSON_GetArraySize(cjson_contained);
		result_BiologicallyDerivedProduct->contained = PushArray(arena, Resource, result_BiologicallyDerivedProduct->contained_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_BiologicallyDerivedProduct->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(biologicallyDerivedProduct, "extension");
	if(cjson_extension)
	{
		result_BiologicallyDerivedProduct->extension_count = cJSON_GetArraySize(cjson_extension);
		result_BiologicallyDerivedProduct->extension = PushArray(arena, Extension, result_BiologicallyDerivedProduct->extension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_BiologicallyDerivedProduct->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(biologicallyDerivedProduct, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_BiologicallyDerivedProduct->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_BiologicallyDerivedProduct->modifierExtension = PushArray(arena, Extension, result_BiologicallyDerivedProduct->modifierExtension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_BiologicallyDerivedProduct->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(biologicallyDerivedProduct, "identifier");
	if(cjson_identifier)
	{
		result_BiologicallyDerivedProduct->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_BiologicallyDerivedProduct->identifier = PushArray(arena, Identifier, result_BiologicallyDerivedProduct->identifier_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_BiologicallyDerivedProduct->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_productCategory =  cJSON_GetObjectItem(biologicallyDerivedProduct, "productCategory");
	if(cjson_productCategory)
	{
		result_BiologicallyDerivedProduct->productCategory = Str8C(cJSON_GetStringValue(cjson_productCategory));
	}
	cJSON *cjson_productCode =  cJSON_GetObjectItem(biologicallyDerivedProduct, "productCode");
	if(cjson_productCode)
	{
		result_BiologicallyDerivedProduct->productCode = Deserialize_CodeableConcept(arena, cjson_productCode);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(biologicallyDerivedProduct, "status");
	if(cjson_status)
	{
		result_BiologicallyDerivedProduct->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(biologicallyDerivedProduct, "request");
	if(cjson_request)
	{
		result_BiologicallyDerivedProduct->request_count = cJSON_GetArraySize(cjson_request);
		result_BiologicallyDerivedProduct->request = PushArray(arena, Reference, result_BiologicallyDerivedProduct->request_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->request_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_request, i);
			result_BiologicallyDerivedProduct->request[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(biologicallyDerivedProduct, "quantity");
	if(cjson_quantity)
	{
		result_BiologicallyDerivedProduct->quantity = Deserialize_Integer(arena, cjson_quantity);
	}
	cJSON *cjson_parent =  cJSON_GetObjectItem(biologicallyDerivedProduct, "parent");
	if(cjson_parent)
	{
		result_BiologicallyDerivedProduct->parent_count = cJSON_GetArraySize(cjson_parent);
		result_BiologicallyDerivedProduct->parent = PushArray(arena, Reference, result_BiologicallyDerivedProduct->parent_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->parent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parent, i);
			result_BiologicallyDerivedProduct->parent[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_collection =  cJSON_GetObjectItem(biologicallyDerivedProduct, "collection");
	if(cjson_collection)
	{
		result_BiologicallyDerivedProduct->collection = Deserialize_BiologicallyDerivedProduct_Collection(arena, cjson_collection);
	}
	cJSON *cjson_processing =  cJSON_GetObjectItem(biologicallyDerivedProduct, "processing");
	if(cjson_processing)
	{
		result_BiologicallyDerivedProduct->processing_count = cJSON_GetArraySize(cjson_processing);
		result_BiologicallyDerivedProduct->processing = PushArray(arena, BiologicallyDerivedProduct_Processing, result_BiologicallyDerivedProduct->processing_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->processing_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_processing, i);
			result_BiologicallyDerivedProduct->processing[i] = *Deserialize_BiologicallyDerivedProduct_Processing(arena, internal);
		}

	}
	cJSON *cjson_manipulation =  cJSON_GetObjectItem(biologicallyDerivedProduct, "manipulation");
	if(cjson_manipulation)
	{
		result_BiologicallyDerivedProduct->manipulation = Deserialize_BiologicallyDerivedProduct_Manipulation(arena, cjson_manipulation);
	}
	cJSON *cjson_storage =  cJSON_GetObjectItem(biologicallyDerivedProduct, "storage");
	if(cjson_storage)
	{
		result_BiologicallyDerivedProduct->storage_count = cJSON_GetArraySize(cjson_storage);
		result_BiologicallyDerivedProduct->storage = PushArray(arena, BiologicallyDerivedProduct_Storage, result_BiologicallyDerivedProduct->storage_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct->storage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_storage, i);
			result_BiologicallyDerivedProduct->storage[i] = *Deserialize_BiologicallyDerivedProduct_Storage(arena, internal);
		}

	}
	return result_BiologicallyDerivedProduct;
}

BiologicallyDerivedProduct_Collection*
Deserialize_BiologicallyDerivedProduct_Collection(Arena *arena, cJSON *biologicallyDerivedProduct_Collection)
{
	BiologicallyDerivedProduct_Collection *result_BiologicallyDerivedProduct_Collection = PushArray(arena, BiologicallyDerivedProduct_Collection, 1);
	result_BiologicallyDerivedProduct_Collection->resourceType = ResourceType::BiologicallyDerivedProduct_Collection;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "id");
	if(cjson_id)
	{
		result_BiologicallyDerivedProduct_Collection->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "extension");
	if(cjson_extension)
	{
		result_BiologicallyDerivedProduct_Collection->extension_count = cJSON_GetArraySize(cjson_extension);
		result_BiologicallyDerivedProduct_Collection->extension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Collection->extension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Collection->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_BiologicallyDerivedProduct_Collection->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_BiologicallyDerivedProduct_Collection->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_BiologicallyDerivedProduct_Collection->modifierExtension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Collection->modifierExtension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Collection->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_BiologicallyDerivedProduct_Collection->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_collector =  cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "collector");
	if(cjson_collector)
	{
		result_BiologicallyDerivedProduct_Collection->collector = Deserialize_Reference(arena, cjson_collector);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "source");
	if(cjson_source)
	{
		result_BiologicallyDerivedProduct_Collection->source = Deserialize_Reference(arena, cjson_source);
	}
	if((bool)cJSON_HasObjectItem(biologicallyDerivedProduct_Collection, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "valueDateTime");
		result_BiologicallyDerivedProduct_Collection->collected.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_BiologicallyDerivedProduct_Collection->collected_type = BiologicallyDerivedProduct_Collection::CollectedType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(biologicallyDerivedProduct_Collection, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(biologicallyDerivedProduct_Collection, "valuePeriod");
		result_BiologicallyDerivedProduct_Collection->collected.valuePeriod = Deserialize_Period(arena, item);
		result_BiologicallyDerivedProduct_Collection->collected_type = BiologicallyDerivedProduct_Collection::CollectedType::Period;
	}


	return result_BiologicallyDerivedProduct_Collection;
}

BiologicallyDerivedProduct_Processing*
Deserialize_BiologicallyDerivedProduct_Processing(Arena *arena, cJSON *biologicallyDerivedProduct_Processing)
{
	BiologicallyDerivedProduct_Processing *result_BiologicallyDerivedProduct_Processing = PushArray(arena, BiologicallyDerivedProduct_Processing, 1);
	result_BiologicallyDerivedProduct_Processing->resourceType = ResourceType::BiologicallyDerivedProduct_Processing;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "id");
	if(cjson_id)
	{
		result_BiologicallyDerivedProduct_Processing->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "extension");
	if(cjson_extension)
	{
		result_BiologicallyDerivedProduct_Processing->extension_count = cJSON_GetArraySize(cjson_extension);
		result_BiologicallyDerivedProduct_Processing->extension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Processing->extension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Processing->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_BiologicallyDerivedProduct_Processing->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_BiologicallyDerivedProduct_Processing->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_BiologicallyDerivedProduct_Processing->modifierExtension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Processing->modifierExtension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Processing->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_BiologicallyDerivedProduct_Processing->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "description");
	if(cjson_description)
	{
		result_BiologicallyDerivedProduct_Processing->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_procedure =  cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "procedure");
	if(cjson_procedure)
	{
		result_BiologicallyDerivedProduct_Processing->procedure = Deserialize_CodeableConcept(arena, cjson_procedure);
	}
	cJSON *cjson_additive =  cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "additive");
	if(cjson_additive)
	{
		result_BiologicallyDerivedProduct_Processing->additive = Deserialize_Reference(arena, cjson_additive);
	}
	if((bool)cJSON_HasObjectItem(biologicallyDerivedProduct_Processing, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "valueDateTime");
		result_BiologicallyDerivedProduct_Processing->time.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_BiologicallyDerivedProduct_Processing->time_type = BiologicallyDerivedProduct_Processing::TimeType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(biologicallyDerivedProduct_Processing, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(biologicallyDerivedProduct_Processing, "valuePeriod");
		result_BiologicallyDerivedProduct_Processing->time.valuePeriod = Deserialize_Period(arena, item);
		result_BiologicallyDerivedProduct_Processing->time_type = BiologicallyDerivedProduct_Processing::TimeType::Period;
	}


	return result_BiologicallyDerivedProduct_Processing;
}

BiologicallyDerivedProduct_Manipulation*
Deserialize_BiologicallyDerivedProduct_Manipulation(Arena *arena, cJSON *biologicallyDerivedProduct_Manipulation)
{
	BiologicallyDerivedProduct_Manipulation *result_BiologicallyDerivedProduct_Manipulation = PushArray(arena, BiologicallyDerivedProduct_Manipulation, 1);
	result_BiologicallyDerivedProduct_Manipulation->resourceType = ResourceType::BiologicallyDerivedProduct_Manipulation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(biologicallyDerivedProduct_Manipulation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(biologicallyDerivedProduct_Manipulation, "id");
	if(cjson_id)
	{
		result_BiologicallyDerivedProduct_Manipulation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Manipulation, "extension");
	if(cjson_extension)
	{
		result_BiologicallyDerivedProduct_Manipulation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_BiologicallyDerivedProduct_Manipulation->extension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Manipulation->extension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Manipulation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_BiologicallyDerivedProduct_Manipulation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Manipulation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_BiologicallyDerivedProduct_Manipulation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_BiologicallyDerivedProduct_Manipulation->modifierExtension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Manipulation->modifierExtension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Manipulation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_BiologicallyDerivedProduct_Manipulation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(biologicallyDerivedProduct_Manipulation, "description");
	if(cjson_description)
	{
		result_BiologicallyDerivedProduct_Manipulation->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	if((bool)cJSON_HasObjectItem(biologicallyDerivedProduct_Manipulation, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(biologicallyDerivedProduct_Manipulation, "valueDateTime");
		result_BiologicallyDerivedProduct_Manipulation->time.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_BiologicallyDerivedProduct_Manipulation->time_type = BiologicallyDerivedProduct_Manipulation::TimeType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(biologicallyDerivedProduct_Manipulation, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(biologicallyDerivedProduct_Manipulation, "valuePeriod");
		result_BiologicallyDerivedProduct_Manipulation->time.valuePeriod = Deserialize_Period(arena, item);
		result_BiologicallyDerivedProduct_Manipulation->time_type = BiologicallyDerivedProduct_Manipulation::TimeType::Period;
	}


	return result_BiologicallyDerivedProduct_Manipulation;
}

BiologicallyDerivedProduct_Storage*
Deserialize_BiologicallyDerivedProduct_Storage(Arena *arena, cJSON *biologicallyDerivedProduct_Storage)
{
	BiologicallyDerivedProduct_Storage *result_BiologicallyDerivedProduct_Storage = PushArray(arena, BiologicallyDerivedProduct_Storage, 1);
	result_BiologicallyDerivedProduct_Storage->resourceType = ResourceType::BiologicallyDerivedProduct_Storage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "id");
	if(cjson_id)
	{
		result_BiologicallyDerivedProduct_Storage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "extension");
	if(cjson_extension)
	{
		result_BiologicallyDerivedProduct_Storage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_BiologicallyDerivedProduct_Storage->extension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Storage->extension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Storage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_BiologicallyDerivedProduct_Storage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_BiologicallyDerivedProduct_Storage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_BiologicallyDerivedProduct_Storage->modifierExtension = PushArray(arena, Extension, result_BiologicallyDerivedProduct_Storage->modifierExtension_count);
		for(int i = 0; i < result_BiologicallyDerivedProduct_Storage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_BiologicallyDerivedProduct_Storage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "description");
	if(cjson_description)
	{
		result_BiologicallyDerivedProduct_Storage->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_temperature =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "temperature");
	if(cjson_temperature)
	{
		result_BiologicallyDerivedProduct_Storage->temperature = cJSON_GetNumberValue(cjson_temperature);
	}
	cJSON *cjson_scale =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "scale");
	if(cjson_scale)
	{
		result_BiologicallyDerivedProduct_Storage->scale = Str8C(cJSON_GetStringValue(cjson_scale));
	}
	cJSON *cjson_duration =  cJSON_GetObjectItem(biologicallyDerivedProduct_Storage, "duration");
	if(cjson_duration)
	{
		result_BiologicallyDerivedProduct_Storage->duration = Deserialize_Period(arena, cjson_duration);
	}
	return result_BiologicallyDerivedProduct_Storage;
}

BodyStructure*
Deserialize_BodyStructure(Arena *arena, cJSON *bodyStructure)
{
	BodyStructure *result_BodyStructure = PushArray(arena, BodyStructure, 1);
	result_BodyStructure->resourceType = ResourceType::BodyStructure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bodyStructure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(bodyStructure, "id");
	if(cjson_id)
	{
		result_BodyStructure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(bodyStructure, "meta");
	if(cjson_meta)
	{
		result_BodyStructure->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(bodyStructure, "implicitRules");
	if(cjson_implicitRules)
	{
		result_BodyStructure->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(bodyStructure, "language");
	if(cjson_language)
	{
		result_BodyStructure->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(bodyStructure, "text");
	if(cjson_text)
	{
		result_BodyStructure->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(bodyStructure, "contained");
	if(cjson_contained)
	{
		result_BodyStructure->contained_count = cJSON_GetArraySize(cjson_contained);
		result_BodyStructure->contained = PushArray(arena, Resource, result_BodyStructure->contained_count);
		for(int i = 0; i < result_BodyStructure->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_BodyStructure->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(bodyStructure, "extension");
	if(cjson_extension)
	{
		result_BodyStructure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_BodyStructure->extension = PushArray(arena, Extension, result_BodyStructure->extension_count);
		for(int i = 0; i < result_BodyStructure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_BodyStructure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(bodyStructure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_BodyStructure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_BodyStructure->modifierExtension = PushArray(arena, Extension, result_BodyStructure->modifierExtension_count);
		for(int i = 0; i < result_BodyStructure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_BodyStructure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(bodyStructure, "identifier");
	if(cjson_identifier)
	{
		result_BodyStructure->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_BodyStructure->identifier = PushArray(arena, Identifier, result_BodyStructure->identifier_count);
		for(int i = 0; i < result_BodyStructure->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_BodyStructure->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(bodyStructure, "active");
	if(cjson_active)
	{
		result_BodyStructure->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_morphology =  cJSON_GetObjectItem(bodyStructure, "morphology");
	if(cjson_morphology)
	{
		result_BodyStructure->morphology = Deserialize_CodeableConcept(arena, cjson_morphology);
	}
	cJSON *cjson_location =  cJSON_GetObjectItem(bodyStructure, "location");
	if(cjson_location)
	{
		result_BodyStructure->location = Deserialize_CodeableConcept(arena, cjson_location);
	}
	cJSON *cjson_locationQualifier =  cJSON_GetObjectItem(bodyStructure, "locationQualifier");
	if(cjson_locationQualifier)
	{
		result_BodyStructure->locationQualifier_count = cJSON_GetArraySize(cjson_locationQualifier);
		result_BodyStructure->locationQualifier = PushArray(arena, CodeableConcept, result_BodyStructure->locationQualifier_count);
		for(int i = 0; i < result_BodyStructure->locationQualifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_locationQualifier, i);
			result_BodyStructure->locationQualifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(bodyStructure, "description");
	if(cjson_description)
	{
		result_BodyStructure->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_image =  cJSON_GetObjectItem(bodyStructure, "image");
	if(cjson_image)
	{
		result_BodyStructure->image_count = cJSON_GetArraySize(cjson_image);
		result_BodyStructure->image = PushArray(arena, Attachment, result_BodyStructure->image_count);
		for(int i = 0; i < result_BodyStructure->image_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_image, i);
			result_BodyStructure->image[i] = *Deserialize_Attachment(arena, internal);
		}

	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(bodyStructure, "patient");
	if(cjson_patient)
	{
		result_BodyStructure->patient = Deserialize_Reference(arena, cjson_patient);
	}
	return result_BodyStructure;
}

Bundle*
Deserialize_Bundle(Arena *arena, cJSON *bundle)
{
	Bundle *result_Bundle = PushArray(arena, Bundle, 1);
	result_Bundle->resourceType = ResourceType::Bundle;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bundle, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(bundle, "id");
	if(cjson_id)
	{
		result_Bundle->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(bundle, "meta");
	if(cjson_meta)
	{
		result_Bundle->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(bundle, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Bundle->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(bundle, "language");
	if(cjson_language)
	{
		result_Bundle->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(bundle, "identifier");
	if(cjson_identifier)
	{
		result_Bundle->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(bundle, "type");
	if(cjson_type)
	{
		result_Bundle->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_timestamp =  cJSON_GetObjectItem(bundle, "timestamp");
	if(cjson_timestamp)
	{
		result_Bundle->timestamp = Str8C(cJSON_GetStringValue(cjson_timestamp));
	}
	cJSON *cjson_total =  cJSON_GetObjectItem(bundle, "total");
	if(cjson_total)
	{
		result_Bundle->total = (int)cJSON_GetNumberValue(cjson_total);
	}
	cJSON *cjson_link =  cJSON_GetObjectItem(bundle, "link");
	if(cjson_link)
	{
		result_Bundle->link_count = cJSON_GetArraySize(cjson_link);
		result_Bundle->link = PushArray(arena, Bundle_Link, result_Bundle->link_count);
		for(int i = 0; i < result_Bundle->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_Bundle->link[i] = *Deserialize_Bundle_Link(arena, internal);
		}

	}
	cJSON *cjson_entry =  cJSON_GetObjectItem(bundle, "entry");
	if(cjson_entry)
	{
		result_Bundle->entry_count = cJSON_GetArraySize(cjson_entry);
		result_Bundle->entry = PushArray(arena, Bundle_Entry, result_Bundle->entry_count);
		for(int i = 0; i < result_Bundle->entry_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_entry, i);
			result_Bundle->entry[i] = *Deserialize_Bundle_Entry(arena, internal);
		}

	}
	cJSON *cjson_signature =  cJSON_GetObjectItem(bundle, "signature");
	if(cjson_signature)
	{
		result_Bundle->signature = Deserialize_Signature(arena, cjson_signature);
	}
	return result_Bundle;
}

Bundle_Link*
Deserialize_Bundle_Link(Arena *arena, cJSON *bundle_Link)
{
	Bundle_Link *result_Bundle_Link = PushArray(arena, Bundle_Link, 1);
	result_Bundle_Link->resourceType = ResourceType::Bundle_Link;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bundle_Link, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(bundle_Link, "id");
	if(cjson_id)
	{
		result_Bundle_Link->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(bundle_Link, "extension");
	if(cjson_extension)
	{
		result_Bundle_Link->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Bundle_Link->extension = PushArray(arena, Extension, result_Bundle_Link->extension_count);
		for(int i = 0; i < result_Bundle_Link->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Bundle_Link->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(bundle_Link, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Bundle_Link->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Bundle_Link->modifierExtension = PushArray(arena, Extension, result_Bundle_Link->modifierExtension_count);
		for(int i = 0; i < result_Bundle_Link->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Bundle_Link->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_relation =  cJSON_GetObjectItem(bundle_Link, "relation");
	if(cjson_relation)
	{
		result_Bundle_Link->relation = Str8C(cJSON_GetStringValue(cjson_relation));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(bundle_Link, "url");
	if(cjson_url)
	{
		result_Bundle_Link->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	return result_Bundle_Link;
}

Bundle_Entry*
Deserialize_Bundle_Entry(Arena *arena, cJSON *bundle_Entry)
{
	Bundle_Entry *result_Bundle_Entry = PushArray(arena, Bundle_Entry, 1);
	result_Bundle_Entry->resourceType = ResourceType::Bundle_Entry;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bundle_Entry, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(bundle_Entry, "id");
	if(cjson_id)
	{
		result_Bundle_Entry->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(bundle_Entry, "extension");
	if(cjson_extension)
	{
		result_Bundle_Entry->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Bundle_Entry->extension = PushArray(arena, Extension, result_Bundle_Entry->extension_count);
		for(int i = 0; i < result_Bundle_Entry->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Bundle_Entry->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(bundle_Entry, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Bundle_Entry->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Bundle_Entry->modifierExtension = PushArray(arena, Extension, result_Bundle_Entry->modifierExtension_count);
		for(int i = 0; i < result_Bundle_Entry->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Bundle_Entry->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_link =  cJSON_GetObjectItem(bundle_Entry, "link");
	if(cjson_link)
	{
		result_Bundle_Entry->link_count = cJSON_GetArraySize(cjson_link);
		result_Bundle_Entry->link = PushArray(arena, Bundle_Link, result_Bundle_Entry->link_count);
		for(int i = 0; i < result_Bundle_Entry->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_Bundle_Entry->link[i] = *Deserialize_Bundle_Link(arena, internal);
		}

	}
	cJSON *cjson_fullUrl =  cJSON_GetObjectItem(bundle_Entry, "fullUrl");
	if(cjson_fullUrl)
	{
		result_Bundle_Entry->fullUrl = Str8C(cJSON_GetStringValue(cjson_fullUrl));
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(bundle_Entry, "resource");
	if(cjson_resource)
	{
		result_Bundle_Entry->resource = Deserialize_Resource(arena, cjson_resource);
	}
	cJSON *cjson_search =  cJSON_GetObjectItem(bundle_Entry, "search");
	if(cjson_search)
	{
		result_Bundle_Entry->search = Deserialize_Bundle_Entry_Search(arena, cjson_search);
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(bundle_Entry, "request");
	if(cjson_request)
	{
		result_Bundle_Entry->request = Deserialize_Bundle_Entry_Request(arena, cjson_request);
	}
	cJSON *cjson_response =  cJSON_GetObjectItem(bundle_Entry, "response");
	if(cjson_response)
	{
		result_Bundle_Entry->response = Deserialize_Bundle_Entry_Response(arena, cjson_response);
	}
	return result_Bundle_Entry;
}

Bundle_Entry_Search*
Deserialize_Bundle_Entry_Search(Arena *arena, cJSON *bundle_Entry_Search)
{
	Bundle_Entry_Search *result_Bundle_Entry_Search = PushArray(arena, Bundle_Entry_Search, 1);
	result_Bundle_Entry_Search->resourceType = ResourceType::Bundle_Entry_Search;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bundle_Entry_Search, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(bundle_Entry_Search, "id");
	if(cjson_id)
	{
		result_Bundle_Entry_Search->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(bundle_Entry_Search, "extension");
	if(cjson_extension)
	{
		result_Bundle_Entry_Search->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Bundle_Entry_Search->extension = PushArray(arena, Extension, result_Bundle_Entry_Search->extension_count);
		for(int i = 0; i < result_Bundle_Entry_Search->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Bundle_Entry_Search->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(bundle_Entry_Search, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Bundle_Entry_Search->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Bundle_Entry_Search->modifierExtension = PushArray(arena, Extension, result_Bundle_Entry_Search->modifierExtension_count);
		for(int i = 0; i < result_Bundle_Entry_Search->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Bundle_Entry_Search->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(bundle_Entry_Search, "mode");
	if(cjson_mode)
	{
		result_Bundle_Entry_Search->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_score =  cJSON_GetObjectItem(bundle_Entry_Search, "score");
	if(cjson_score)
	{
		result_Bundle_Entry_Search->score = cJSON_GetNumberValue(cjson_score);
	}
	return result_Bundle_Entry_Search;
}

Bundle_Entry_Request*
Deserialize_Bundle_Entry_Request(Arena *arena, cJSON *bundle_Entry_Request)
{
	Bundle_Entry_Request *result_Bundle_Entry_Request = PushArray(arena, Bundle_Entry_Request, 1);
	result_Bundle_Entry_Request->resourceType = ResourceType::Bundle_Entry_Request;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bundle_Entry_Request, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(bundle_Entry_Request, "id");
	if(cjson_id)
	{
		result_Bundle_Entry_Request->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(bundle_Entry_Request, "extension");
	if(cjson_extension)
	{
		result_Bundle_Entry_Request->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Bundle_Entry_Request->extension = PushArray(arena, Extension, result_Bundle_Entry_Request->extension_count);
		for(int i = 0; i < result_Bundle_Entry_Request->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Bundle_Entry_Request->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(bundle_Entry_Request, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Bundle_Entry_Request->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Bundle_Entry_Request->modifierExtension = PushArray(arena, Extension, result_Bundle_Entry_Request->modifierExtension_count);
		for(int i = 0; i < result_Bundle_Entry_Request->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Bundle_Entry_Request->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_method =  cJSON_GetObjectItem(bundle_Entry_Request, "method");
	if(cjson_method)
	{
		result_Bundle_Entry_Request->method = Str8C(cJSON_GetStringValue(cjson_method));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(bundle_Entry_Request, "url");
	if(cjson_url)
	{
		result_Bundle_Entry_Request->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_ifNoneMatch =  cJSON_GetObjectItem(bundle_Entry_Request, "ifNoneMatch");
	if(cjson_ifNoneMatch)
	{
		result_Bundle_Entry_Request->ifNoneMatch = Str8C(cJSON_GetStringValue(cjson_ifNoneMatch));
	}
	cJSON *cjson_ifModifiedSince =  cJSON_GetObjectItem(bundle_Entry_Request, "ifModifiedSince");
	if(cjson_ifModifiedSince)
	{
		result_Bundle_Entry_Request->ifModifiedSince = Str8C(cJSON_GetStringValue(cjson_ifModifiedSince));
	}
	cJSON *cjson_ifMatch =  cJSON_GetObjectItem(bundle_Entry_Request, "ifMatch");
	if(cjson_ifMatch)
	{
		result_Bundle_Entry_Request->ifMatch = Str8C(cJSON_GetStringValue(cjson_ifMatch));
	}
	cJSON *cjson_ifNoneExist =  cJSON_GetObjectItem(bundle_Entry_Request, "ifNoneExist");
	if(cjson_ifNoneExist)
	{
		result_Bundle_Entry_Request->ifNoneExist = Str8C(cJSON_GetStringValue(cjson_ifNoneExist));
	}
	return result_Bundle_Entry_Request;
}

Bundle_Entry_Response*
Deserialize_Bundle_Entry_Response(Arena *arena, cJSON *bundle_Entry_Response)
{
	Bundle_Entry_Response *result_Bundle_Entry_Response = PushArray(arena, Bundle_Entry_Response, 1);
	result_Bundle_Entry_Response->resourceType = ResourceType::Bundle_Entry_Response;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bundle_Entry_Response, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(bundle_Entry_Response, "id");
	if(cjson_id)
	{
		result_Bundle_Entry_Response->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(bundle_Entry_Response, "extension");
	if(cjson_extension)
	{
		result_Bundle_Entry_Response->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Bundle_Entry_Response->extension = PushArray(arena, Extension, result_Bundle_Entry_Response->extension_count);
		for(int i = 0; i < result_Bundle_Entry_Response->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Bundle_Entry_Response->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(bundle_Entry_Response, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Bundle_Entry_Response->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Bundle_Entry_Response->modifierExtension = PushArray(arena, Extension, result_Bundle_Entry_Response->modifierExtension_count);
		for(int i = 0; i < result_Bundle_Entry_Response->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Bundle_Entry_Response->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(bundle_Entry_Response, "status");
	if(cjson_status)
	{
		result_Bundle_Entry_Response->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_location =  cJSON_GetObjectItem(bundle_Entry_Response, "location");
	if(cjson_location)
	{
		result_Bundle_Entry_Response->location = Str8C(cJSON_GetStringValue(cjson_location));
	}
	cJSON *cjson_etag =  cJSON_GetObjectItem(bundle_Entry_Response, "etag");
	if(cjson_etag)
	{
		result_Bundle_Entry_Response->etag = Str8C(cJSON_GetStringValue(cjson_etag));
	}
	cJSON *cjson_lastModified =  cJSON_GetObjectItem(bundle_Entry_Response, "lastModified");
	if(cjson_lastModified)
	{
		result_Bundle_Entry_Response->lastModified = Str8C(cJSON_GetStringValue(cjson_lastModified));
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(bundle_Entry_Response, "outcome");
	if(cjson_outcome)
	{
		result_Bundle_Entry_Response->outcome = Deserialize_Resource(arena, cjson_outcome);
	}
	return result_Bundle_Entry_Response;
}

CapabilityStatement*
Deserialize_CapabilityStatement(Arena *arena, cJSON *capabilityStatement)
{
	CapabilityStatement *result_CapabilityStatement = PushArray(arena, CapabilityStatement, 1);
	result_CapabilityStatement->resourceType = ResourceType::CapabilityStatement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement, "id");
	if(cjson_id)
	{
		result_CapabilityStatement->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(capabilityStatement, "meta");
	if(cjson_meta)
	{
		result_CapabilityStatement->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(capabilityStatement, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CapabilityStatement->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(capabilityStatement, "language");
	if(cjson_language)
	{
		result_CapabilityStatement->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(capabilityStatement, "text");
	if(cjson_text)
	{
		result_CapabilityStatement->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(capabilityStatement, "contained");
	if(cjson_contained)
	{
		result_CapabilityStatement->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CapabilityStatement->contained = PushArray(arena, Resource, result_CapabilityStatement->contained_count);
		for(int i = 0; i < result_CapabilityStatement->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CapabilityStatement->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement->extension = PushArray(arena, Extension, result_CapabilityStatement->extension_count);
		for(int i = 0; i < result_CapabilityStatement->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(capabilityStatement, "url");
	if(cjson_url)
	{
		result_CapabilityStatement->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(capabilityStatement, "version");
	if(cjson_version)
	{
		result_CapabilityStatement->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(capabilityStatement, "name");
	if(cjson_name)
	{
		result_CapabilityStatement->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(capabilityStatement, "title");
	if(cjson_title)
	{
		result_CapabilityStatement->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(capabilityStatement, "status");
	if(cjson_status)
	{
		result_CapabilityStatement->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(capabilityStatement, "experimental");
	if(cjson_experimental)
	{
		result_CapabilityStatement->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(capabilityStatement, "date");
	if(cjson_date)
	{
		result_CapabilityStatement->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(capabilityStatement, "publisher");
	if(cjson_publisher)
	{
		result_CapabilityStatement->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(capabilityStatement, "contact");
	if(cjson_contact)
	{
		result_CapabilityStatement->contact_count = cJSON_GetArraySize(cjson_contact);
		result_CapabilityStatement->contact = PushArray(arena, ContactDetail, result_CapabilityStatement->contact_count);
		for(int i = 0; i < result_CapabilityStatement->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_CapabilityStatement->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(capabilityStatement, "description");
	if(cjson_description)
	{
		result_CapabilityStatement->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(capabilityStatement, "useContext");
	if(cjson_useContext)
	{
		result_CapabilityStatement->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_CapabilityStatement->useContext = PushArray(arena, UsageContext, result_CapabilityStatement->useContext_count);
		for(int i = 0; i < result_CapabilityStatement->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_CapabilityStatement->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(capabilityStatement, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_CapabilityStatement->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_CapabilityStatement->jurisdiction = PushArray(arena, CodeableConcept, result_CapabilityStatement->jurisdiction_count);
		for(int i = 0; i < result_CapabilityStatement->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_CapabilityStatement->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(capabilityStatement, "purpose");
	if(cjson_purpose)
	{
		result_CapabilityStatement->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(capabilityStatement, "copyright");
	if(cjson_copyright)
	{
		result_CapabilityStatement->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(capabilityStatement, "kind");
	if(cjson_kind)
	{
		result_CapabilityStatement->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_instantiates =  cJSON_GetObjectItem(capabilityStatement, "instantiates");
	if(cjson_instantiates)
	{
		result_CapabilityStatement->instantiates_count = cJSON_GetArraySize(cjson_instantiates);
		result_CapabilityStatement->instantiates = PushArray(arena, fhir_canonical, result_CapabilityStatement->instantiates_count);
		for(int i = 0; i < result_CapabilityStatement->instantiates_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiates, i);
			result_CapabilityStatement->instantiates[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_imports =  cJSON_GetObjectItem(capabilityStatement, "imports");
	if(cjson_imports)
	{
		result_CapabilityStatement->imports_count = cJSON_GetArraySize(cjson_imports);
		result_CapabilityStatement->imports = PushArray(arena, fhir_canonical, result_CapabilityStatement->imports_count);
		for(int i = 0; i < result_CapabilityStatement->imports_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_imports, i);
			result_CapabilityStatement->imports[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_software =  cJSON_GetObjectItem(capabilityStatement, "software");
	if(cjson_software)
	{
		result_CapabilityStatement->software = Deserialize_CapabilityStatement_Software(arena, cjson_software);
	}
	cJSON *cjson_implementation =  cJSON_GetObjectItem(capabilityStatement, "implementation");
	if(cjson_implementation)
	{
		result_CapabilityStatement->implementation = Deserialize_CapabilityStatement_Implementation(arena, cjson_implementation);
	}
	cJSON *cjson_fhirVersion =  cJSON_GetObjectItem(capabilityStatement, "fhirVersion");
	if(cjson_fhirVersion)
	{
		result_CapabilityStatement->fhirVersion = Str8C(cJSON_GetStringValue(cjson_fhirVersion));
	}
	cJSON *cjson_format =  cJSON_GetObjectItem(capabilityStatement, "format");
	if(cjson_format)
	{
		result_CapabilityStatement->format_count = cJSON_GetArraySize(cjson_format);
		result_CapabilityStatement->format = PushArray(arena, fhir_code, result_CapabilityStatement->format_count);
		for(int i = 0; i < result_CapabilityStatement->format_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_format, i);
			result_CapabilityStatement->format[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_patchFormat =  cJSON_GetObjectItem(capabilityStatement, "patchFormat");
	if(cjson_patchFormat)
	{
		result_CapabilityStatement->patchFormat_count = cJSON_GetArraySize(cjson_patchFormat);
		result_CapabilityStatement->patchFormat = PushArray(arena, fhir_code, result_CapabilityStatement->patchFormat_count);
		for(int i = 0; i < result_CapabilityStatement->patchFormat_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_patchFormat, i);
			result_CapabilityStatement->patchFormat[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_implementationGuide =  cJSON_GetObjectItem(capabilityStatement, "implementationGuide");
	if(cjson_implementationGuide)
	{
		result_CapabilityStatement->implementationGuide_count = cJSON_GetArraySize(cjson_implementationGuide);
		result_CapabilityStatement->implementationGuide = PushArray(arena, fhir_canonical, result_CapabilityStatement->implementationGuide_count);
		for(int i = 0; i < result_CapabilityStatement->implementationGuide_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_implementationGuide, i);
			result_CapabilityStatement->implementationGuide[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_rest =  cJSON_GetObjectItem(capabilityStatement, "rest");
	if(cjson_rest)
	{
		result_CapabilityStatement->rest_count = cJSON_GetArraySize(cjson_rest);
		result_CapabilityStatement->rest = PushArray(arena, CapabilityStatement_Rest, result_CapabilityStatement->rest_count);
		for(int i = 0; i < result_CapabilityStatement->rest_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rest, i);
			result_CapabilityStatement->rest[i] = *Deserialize_CapabilityStatement_Rest(arena, internal);
		}

	}
	cJSON *cjson_messaging =  cJSON_GetObjectItem(capabilityStatement, "messaging");
	if(cjson_messaging)
	{
		result_CapabilityStatement->messaging_count = cJSON_GetArraySize(cjson_messaging);
		result_CapabilityStatement->messaging = PushArray(arena, CapabilityStatement_Messaging, result_CapabilityStatement->messaging_count);
		for(int i = 0; i < result_CapabilityStatement->messaging_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_messaging, i);
			result_CapabilityStatement->messaging[i] = *Deserialize_CapabilityStatement_Messaging(arena, internal);
		}

	}
	cJSON *cjson_document =  cJSON_GetObjectItem(capabilityStatement, "document");
	if(cjson_document)
	{
		result_CapabilityStatement->document_count = cJSON_GetArraySize(cjson_document);
		result_CapabilityStatement->document = PushArray(arena, CapabilityStatement_Document, result_CapabilityStatement->document_count);
		for(int i = 0; i < result_CapabilityStatement->document_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_document, i);
			result_CapabilityStatement->document[i] = *Deserialize_CapabilityStatement_Document(arena, internal);
		}

	}
	return result_CapabilityStatement;
}

CapabilityStatement_Software*
Deserialize_CapabilityStatement_Software(Arena *arena, cJSON *capabilityStatement_Software)
{
	CapabilityStatement_Software *result_CapabilityStatement_Software = PushArray(arena, CapabilityStatement_Software, 1);
	result_CapabilityStatement_Software->resourceType = ResourceType::CapabilityStatement_Software;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Software, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Software, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Software->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Software, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Software->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Software->extension = PushArray(arena, Extension, result_CapabilityStatement_Software->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Software->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Software->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Software, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Software->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Software->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Software->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Software->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Software->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(capabilityStatement_Software, "name");
	if(cjson_name)
	{
		result_CapabilityStatement_Software->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(capabilityStatement_Software, "version");
	if(cjson_version)
	{
		result_CapabilityStatement_Software->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_releaseDate =  cJSON_GetObjectItem(capabilityStatement_Software, "releaseDate");
	if(cjson_releaseDate)
	{
		result_CapabilityStatement_Software->releaseDate = Str8C(cJSON_GetStringValue(cjson_releaseDate));
	}
	return result_CapabilityStatement_Software;
}

CapabilityStatement_Implementation*
Deserialize_CapabilityStatement_Implementation(Arena *arena, cJSON *capabilityStatement_Implementation)
{
	CapabilityStatement_Implementation *result_CapabilityStatement_Implementation = PushArray(arena, CapabilityStatement_Implementation, 1);
	result_CapabilityStatement_Implementation->resourceType = ResourceType::CapabilityStatement_Implementation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Implementation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Implementation, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Implementation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Implementation, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Implementation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Implementation->extension = PushArray(arena, Extension, result_CapabilityStatement_Implementation->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Implementation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Implementation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Implementation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Implementation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Implementation->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Implementation->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Implementation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Implementation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(capabilityStatement_Implementation, "description");
	if(cjson_description)
	{
		result_CapabilityStatement_Implementation->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(capabilityStatement_Implementation, "url");
	if(cjson_url)
	{
		result_CapabilityStatement_Implementation->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_custodian =  cJSON_GetObjectItem(capabilityStatement_Implementation, "custodian");
	if(cjson_custodian)
	{
		result_CapabilityStatement_Implementation->custodian = Deserialize_Reference(arena, cjson_custodian);
	}
	return result_CapabilityStatement_Implementation;
}

CapabilityStatement_Rest*
Deserialize_CapabilityStatement_Rest(Arena *arena, cJSON *capabilityStatement_Rest)
{
	CapabilityStatement_Rest *result_CapabilityStatement_Rest = PushArray(arena, CapabilityStatement_Rest, 1);
	result_CapabilityStatement_Rest->resourceType = ResourceType::CapabilityStatement_Rest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Rest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Rest, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Rest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Rest, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Rest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Rest->extension = PushArray(arena, Extension, result_CapabilityStatement_Rest->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Rest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Rest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Rest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Rest->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Rest->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Rest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(capabilityStatement_Rest, "mode");
	if(cjson_mode)
	{
		result_CapabilityStatement_Rest->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Rest, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Rest->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	cJSON *cjson_security =  cJSON_GetObjectItem(capabilityStatement_Rest, "security");
	if(cjson_security)
	{
		result_CapabilityStatement_Rest->security = Deserialize_CapabilityStatement_Rest_Security(arena, cjson_security);
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(capabilityStatement_Rest, "resource");
	if(cjson_resource)
	{
		result_CapabilityStatement_Rest->resource_count = cJSON_GetArraySize(cjson_resource);
		result_CapabilityStatement_Rest->resource = PushArray(arena, CapabilityStatement_Rest_Resource, result_CapabilityStatement_Rest->resource_count);
		for(int i = 0; i < result_CapabilityStatement_Rest->resource_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resource, i);
			result_CapabilityStatement_Rest->resource[i] = *Deserialize_CapabilityStatement_Rest_Resource(arena, internal);
		}

	}
	cJSON *cjson_interaction =  cJSON_GetObjectItem(capabilityStatement_Rest, "interaction");
	if(cjson_interaction)
	{
		result_CapabilityStatement_Rest->interaction_count = cJSON_GetArraySize(cjson_interaction);
		result_CapabilityStatement_Rest->interaction = PushArray(arena, CapabilityStatement_Rest_Interaction, result_CapabilityStatement_Rest->interaction_count);
		for(int i = 0; i < result_CapabilityStatement_Rest->interaction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_interaction, i);
			result_CapabilityStatement_Rest->interaction[i] = *Deserialize_CapabilityStatement_Rest_Interaction(arena, internal);
		}

	}
	cJSON *cjson_searchParam =  cJSON_GetObjectItem(capabilityStatement_Rest, "searchParam");
	if(cjson_searchParam)
	{
		result_CapabilityStatement_Rest->searchParam_count = cJSON_GetArraySize(cjson_searchParam);
		result_CapabilityStatement_Rest->searchParam = PushArray(arena, CapabilityStatement_Rest_Resource_SearchParam, result_CapabilityStatement_Rest->searchParam_count);
		for(int i = 0; i < result_CapabilityStatement_Rest->searchParam_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_searchParam, i);
			result_CapabilityStatement_Rest->searchParam[i] = *Deserialize_CapabilityStatement_Rest_Resource_SearchParam(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(capabilityStatement_Rest, "operation");
	if(cjson_operation)
	{
		result_CapabilityStatement_Rest->operation_count = cJSON_GetArraySize(cjson_operation);
		result_CapabilityStatement_Rest->operation = PushArray(arena, CapabilityStatement_Rest_Resource_Operation, result_CapabilityStatement_Rest->operation_count);
		for(int i = 0; i < result_CapabilityStatement_Rest->operation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_operation, i);
			result_CapabilityStatement_Rest->operation[i] = *Deserialize_CapabilityStatement_Rest_Resource_Operation(arena, internal);
		}

	}
	cJSON *cjson_compartment =  cJSON_GetObjectItem(capabilityStatement_Rest, "compartment");
	if(cjson_compartment)
	{
		result_CapabilityStatement_Rest->compartment_count = cJSON_GetArraySize(cjson_compartment);
		result_CapabilityStatement_Rest->compartment = PushArray(arena, fhir_canonical, result_CapabilityStatement_Rest->compartment_count);
		for(int i = 0; i < result_CapabilityStatement_Rest->compartment_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_compartment, i);
			result_CapabilityStatement_Rest->compartment[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_CapabilityStatement_Rest;
}

CapabilityStatement_Rest_Security*
Deserialize_CapabilityStatement_Rest_Security(Arena *arena, cJSON *capabilityStatement_Rest_Security)
{
	CapabilityStatement_Rest_Security *result_CapabilityStatement_Rest_Security = PushArray(arena, CapabilityStatement_Rest_Security, 1);
	result_CapabilityStatement_Rest_Security->resourceType = ResourceType::CapabilityStatement_Rest_Security;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Rest_Security, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Rest_Security, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Rest_Security->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Rest_Security, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Rest_Security->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Rest_Security->extension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Security->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Security->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Rest_Security->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Rest_Security, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Rest_Security->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Rest_Security->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Security->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Security->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Rest_Security->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_cors =  cJSON_GetObjectItem(capabilityStatement_Rest_Security, "cors");
	if(cjson_cors)
	{
		result_CapabilityStatement_Rest_Security->cors = (boolean)cJSON_IsTrue(cjson_cors);
	}
	cJSON *cjson_service =  cJSON_GetObjectItem(capabilityStatement_Rest_Security, "service");
	if(cjson_service)
	{
		result_CapabilityStatement_Rest_Security->service_count = cJSON_GetArraySize(cjson_service);
		result_CapabilityStatement_Rest_Security->service = PushArray(arena, CodeableConcept, result_CapabilityStatement_Rest_Security->service_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Security->service_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_service, i);
			result_CapabilityStatement_Rest_Security->service[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(capabilityStatement_Rest_Security, "description");
	if(cjson_description)
	{
		result_CapabilityStatement_Rest_Security->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_CapabilityStatement_Rest_Security;
}

CapabilityStatement_Rest_Resource*
Deserialize_CapabilityStatement_Rest_Resource(Arena *arena, cJSON *capabilityStatement_Rest_Resource)
{
	CapabilityStatement_Rest_Resource *result_CapabilityStatement_Rest_Resource = PushArray(arena, CapabilityStatement_Rest_Resource, 1);
	result_CapabilityStatement_Rest_Resource->resourceType = ResourceType::CapabilityStatement_Rest_Resource;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Rest_Resource->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Rest_Resource->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Rest_Resource->extension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Rest_Resource->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Rest_Resource->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Rest_Resource->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Rest_Resource->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "type");
	if(cjson_type)
	{
		result_CapabilityStatement_Rest_Resource->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "profile");
	if(cjson_profile)
	{
		result_CapabilityStatement_Rest_Resource->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	cJSON *cjson_supportedProfile =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "supportedProfile");
	if(cjson_supportedProfile)
	{
		result_CapabilityStatement_Rest_Resource->supportedProfile_count = cJSON_GetArraySize(cjson_supportedProfile);
		result_CapabilityStatement_Rest_Resource->supportedProfile = PushArray(arena, fhir_canonical, result_CapabilityStatement_Rest_Resource->supportedProfile_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->supportedProfile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportedProfile, i);
			result_CapabilityStatement_Rest_Resource->supportedProfile[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Rest_Resource->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	cJSON *cjson_interaction =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "interaction");
	if(cjson_interaction)
	{
		result_CapabilityStatement_Rest_Resource->interaction_count = cJSON_GetArraySize(cjson_interaction);
		result_CapabilityStatement_Rest_Resource->interaction = PushArray(arena, CapabilityStatement_Rest_Resource_Interaction, result_CapabilityStatement_Rest_Resource->interaction_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->interaction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_interaction, i);
			result_CapabilityStatement_Rest_Resource->interaction[i] = *Deserialize_CapabilityStatement_Rest_Resource_Interaction(arena, internal);
		}

	}
	cJSON *cjson_versioning =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "versioning");
	if(cjson_versioning)
	{
		result_CapabilityStatement_Rest_Resource->versioning = Str8C(cJSON_GetStringValue(cjson_versioning));
	}
	cJSON *cjson_readHistory =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "readHistory");
	if(cjson_readHistory)
	{
		result_CapabilityStatement_Rest_Resource->readHistory = (boolean)cJSON_IsTrue(cjson_readHistory);
	}
	cJSON *cjson_updateCreate =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "updateCreate");
	if(cjson_updateCreate)
	{
		result_CapabilityStatement_Rest_Resource->updateCreate = (boolean)cJSON_IsTrue(cjson_updateCreate);
	}
	cJSON *cjson_conditionalCreate =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "conditionalCreate");
	if(cjson_conditionalCreate)
	{
		result_CapabilityStatement_Rest_Resource->conditionalCreate = (boolean)cJSON_IsTrue(cjson_conditionalCreate);
	}
	cJSON *cjson_conditionalRead =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "conditionalRead");
	if(cjson_conditionalRead)
	{
		result_CapabilityStatement_Rest_Resource->conditionalRead = Str8C(cJSON_GetStringValue(cjson_conditionalRead));
	}
	cJSON *cjson_conditionalUpdate =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "conditionalUpdate");
	if(cjson_conditionalUpdate)
	{
		result_CapabilityStatement_Rest_Resource->conditionalUpdate = (boolean)cJSON_IsTrue(cjson_conditionalUpdate);
	}
	cJSON *cjson_conditionalDelete =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "conditionalDelete");
	if(cjson_conditionalDelete)
	{
		result_CapabilityStatement_Rest_Resource->conditionalDelete = Str8C(cJSON_GetStringValue(cjson_conditionalDelete));
	}
	cJSON *cjson_referencePolicy =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "referencePolicy");
	if(cjson_referencePolicy)
	{
		result_CapabilityStatement_Rest_Resource->referencePolicy_count = cJSON_GetArraySize(cjson_referencePolicy);
		result_CapabilityStatement_Rest_Resource->referencePolicy = PushArray(arena, fhir_code, result_CapabilityStatement_Rest_Resource->referencePolicy_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->referencePolicy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referencePolicy, i);
			result_CapabilityStatement_Rest_Resource->referencePolicy[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_searchInclude =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "searchInclude");
	if(cjson_searchInclude)
	{
		result_CapabilityStatement_Rest_Resource->searchInclude_count = cJSON_GetArraySize(cjson_searchInclude);
		result_CapabilityStatement_Rest_Resource->searchInclude = PushArray(arena, fhir_string, result_CapabilityStatement_Rest_Resource->searchInclude_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->searchInclude_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_searchInclude, i);
			result_CapabilityStatement_Rest_Resource->searchInclude[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_searchRevInclude =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "searchRevInclude");
	if(cjson_searchRevInclude)
	{
		result_CapabilityStatement_Rest_Resource->searchRevInclude_count = cJSON_GetArraySize(cjson_searchRevInclude);
		result_CapabilityStatement_Rest_Resource->searchRevInclude = PushArray(arena, fhir_string, result_CapabilityStatement_Rest_Resource->searchRevInclude_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->searchRevInclude_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_searchRevInclude, i);
			result_CapabilityStatement_Rest_Resource->searchRevInclude[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_searchParam =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "searchParam");
	if(cjson_searchParam)
	{
		result_CapabilityStatement_Rest_Resource->searchParam_count = cJSON_GetArraySize(cjson_searchParam);
		result_CapabilityStatement_Rest_Resource->searchParam = PushArray(arena, CapabilityStatement_Rest_Resource_SearchParam, result_CapabilityStatement_Rest_Resource->searchParam_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->searchParam_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_searchParam, i);
			result_CapabilityStatement_Rest_Resource->searchParam[i] = *Deserialize_CapabilityStatement_Rest_Resource_SearchParam(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource, "operation");
	if(cjson_operation)
	{
		result_CapabilityStatement_Rest_Resource->operation_count = cJSON_GetArraySize(cjson_operation);
		result_CapabilityStatement_Rest_Resource->operation = PushArray(arena, CapabilityStatement_Rest_Resource_Operation, result_CapabilityStatement_Rest_Resource->operation_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource->operation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_operation, i);
			result_CapabilityStatement_Rest_Resource->operation[i] = *Deserialize_CapabilityStatement_Rest_Resource_Operation(arena, internal);
		}

	}
	return result_CapabilityStatement_Rest_Resource;
}

CapabilityStatement_Rest_Resource_Interaction*
Deserialize_CapabilityStatement_Rest_Resource_Interaction(Arena *arena, cJSON *capabilityStatement_Rest_Resource_Interaction)
{
	CapabilityStatement_Rest_Resource_Interaction *result_CapabilityStatement_Rest_Resource_Interaction = PushArray(arena, CapabilityStatement_Rest_Resource_Interaction, 1);
	result_CapabilityStatement_Rest_Resource_Interaction->resourceType = ResourceType::CapabilityStatement_Rest_Resource_Interaction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Interaction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Interaction, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Rest_Resource_Interaction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Interaction, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Rest_Resource_Interaction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Rest_Resource_Interaction->extension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource_Interaction->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource_Interaction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Rest_Resource_Interaction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Interaction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Rest_Resource_Interaction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Rest_Resource_Interaction->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource_Interaction->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource_Interaction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Rest_Resource_Interaction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Interaction, "code");
	if(cjson_code)
	{
		result_CapabilityStatement_Rest_Resource_Interaction->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Interaction, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Rest_Resource_Interaction->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_CapabilityStatement_Rest_Resource_Interaction;
}

CapabilityStatement_Rest_Resource_SearchParam*
Deserialize_CapabilityStatement_Rest_Resource_SearchParam(Arena *arena, cJSON *capabilityStatement_Rest_Resource_SearchParam)
{
	CapabilityStatement_Rest_Resource_SearchParam *result_CapabilityStatement_Rest_Resource_SearchParam = PushArray(arena, CapabilityStatement_Rest_Resource_SearchParam, 1);
	result_CapabilityStatement_Rest_Resource_SearchParam->resourceType = ResourceType::CapabilityStatement_Rest_Resource_SearchParam;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Rest_Resource_SearchParam->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Rest_Resource_SearchParam->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Rest_Resource_SearchParam->extension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource_SearchParam->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource_SearchParam->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Rest_Resource_SearchParam->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Rest_Resource_SearchParam->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Rest_Resource_SearchParam->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource_SearchParam->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource_SearchParam->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Rest_Resource_SearchParam->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "name");
	if(cjson_name)
	{
		result_CapabilityStatement_Rest_Resource_SearchParam->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "definition");
	if(cjson_definition)
	{
		result_CapabilityStatement_Rest_Resource_SearchParam->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "type");
	if(cjson_type)
	{
		result_CapabilityStatement_Rest_Resource_SearchParam->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_SearchParam, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Rest_Resource_SearchParam->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_CapabilityStatement_Rest_Resource_SearchParam;
}

CapabilityStatement_Rest_Resource_Operation*
Deserialize_CapabilityStatement_Rest_Resource_Operation(Arena *arena, cJSON *capabilityStatement_Rest_Resource_Operation)
{
	CapabilityStatement_Rest_Resource_Operation *result_CapabilityStatement_Rest_Resource_Operation = PushArray(arena, CapabilityStatement_Rest_Resource_Operation, 1);
	result_CapabilityStatement_Rest_Resource_Operation->resourceType = ResourceType::CapabilityStatement_Rest_Resource_Operation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Operation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Operation, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Rest_Resource_Operation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Operation, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Rest_Resource_Operation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Rest_Resource_Operation->extension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource_Operation->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource_Operation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Rest_Resource_Operation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Operation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Rest_Resource_Operation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Rest_Resource_Operation->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Resource_Operation->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Resource_Operation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Rest_Resource_Operation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Operation, "name");
	if(cjson_name)
	{
		result_CapabilityStatement_Rest_Resource_Operation->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Operation, "definition");
	if(cjson_definition)
	{
		result_CapabilityStatement_Rest_Resource_Operation->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Rest_Resource_Operation, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Rest_Resource_Operation->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_CapabilityStatement_Rest_Resource_Operation;
}

CapabilityStatement_Rest_Interaction*
Deserialize_CapabilityStatement_Rest_Interaction(Arena *arena, cJSON *capabilityStatement_Rest_Interaction)
{
	CapabilityStatement_Rest_Interaction *result_CapabilityStatement_Rest_Interaction = PushArray(arena, CapabilityStatement_Rest_Interaction, 1);
	result_CapabilityStatement_Rest_Interaction->resourceType = ResourceType::CapabilityStatement_Rest_Interaction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Rest_Interaction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Rest_Interaction, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Rest_Interaction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Rest_Interaction, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Rest_Interaction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Rest_Interaction->extension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Interaction->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Interaction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Rest_Interaction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Rest_Interaction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Rest_Interaction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Rest_Interaction->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Rest_Interaction->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Rest_Interaction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Rest_Interaction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(capabilityStatement_Rest_Interaction, "code");
	if(cjson_code)
	{
		result_CapabilityStatement_Rest_Interaction->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Rest_Interaction, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Rest_Interaction->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_CapabilityStatement_Rest_Interaction;
}

CapabilityStatement_Messaging*
Deserialize_CapabilityStatement_Messaging(Arena *arena, cJSON *capabilityStatement_Messaging)
{
	CapabilityStatement_Messaging *result_CapabilityStatement_Messaging = PushArray(arena, CapabilityStatement_Messaging, 1);
	result_CapabilityStatement_Messaging->resourceType = ResourceType::CapabilityStatement_Messaging;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Messaging, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Messaging, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Messaging->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Messaging, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Messaging->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Messaging->extension = PushArray(arena, Extension, result_CapabilityStatement_Messaging->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Messaging->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Messaging, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Messaging->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Messaging->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Messaging->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Messaging->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(capabilityStatement_Messaging, "endpoint");
	if(cjson_endpoint)
	{
		result_CapabilityStatement_Messaging->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_CapabilityStatement_Messaging->endpoint = PushArray(arena, CapabilityStatement_Messaging_Endpoint, result_CapabilityStatement_Messaging->endpoint_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_CapabilityStatement_Messaging->endpoint[i] = *Deserialize_CapabilityStatement_Messaging_Endpoint(arena, internal);
		}

	}
	cJSON *cjson_reliableCache =  cJSON_GetObjectItem(capabilityStatement_Messaging, "reliableCache");
	if(cjson_reliableCache)
	{
		result_CapabilityStatement_Messaging->reliableCache = (int)cJSON_GetNumberValue(cjson_reliableCache);
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Messaging, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Messaging->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	cJSON *cjson_supportedMessage =  cJSON_GetObjectItem(capabilityStatement_Messaging, "supportedMessage");
	if(cjson_supportedMessage)
	{
		result_CapabilityStatement_Messaging->supportedMessage_count = cJSON_GetArraySize(cjson_supportedMessage);
		result_CapabilityStatement_Messaging->supportedMessage = PushArray(arena, CapabilityStatement_Messaging_SupportedMessage, result_CapabilityStatement_Messaging->supportedMessage_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging->supportedMessage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportedMessage, i);
			result_CapabilityStatement_Messaging->supportedMessage[i] = *Deserialize_CapabilityStatement_Messaging_SupportedMessage(arena, internal);
		}

	}
	return result_CapabilityStatement_Messaging;
}

CapabilityStatement_Messaging_Endpoint*
Deserialize_CapabilityStatement_Messaging_Endpoint(Arena *arena, cJSON *capabilityStatement_Messaging_Endpoint)
{
	CapabilityStatement_Messaging_Endpoint *result_CapabilityStatement_Messaging_Endpoint = PushArray(arena, CapabilityStatement_Messaging_Endpoint, 1);
	result_CapabilityStatement_Messaging_Endpoint->resourceType = ResourceType::CapabilityStatement_Messaging_Endpoint;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Messaging_Endpoint, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Messaging_Endpoint, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Messaging_Endpoint->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Messaging_Endpoint, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Messaging_Endpoint->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Messaging_Endpoint->extension = PushArray(arena, Extension, result_CapabilityStatement_Messaging_Endpoint->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging_Endpoint->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Messaging_Endpoint->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Messaging_Endpoint, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Messaging_Endpoint->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Messaging_Endpoint->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Messaging_Endpoint->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging_Endpoint->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Messaging_Endpoint->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_protocol =  cJSON_GetObjectItem(capabilityStatement_Messaging_Endpoint, "protocol");
	if(cjson_protocol)
	{
		result_CapabilityStatement_Messaging_Endpoint->protocol = Deserialize_Coding(arena, cjson_protocol);
	}
	cJSON *cjson_address =  cJSON_GetObjectItem(capabilityStatement_Messaging_Endpoint, "address");
	if(cjson_address)
	{
		result_CapabilityStatement_Messaging_Endpoint->address = Str8C(cJSON_GetStringValue(cjson_address));
	}
	return result_CapabilityStatement_Messaging_Endpoint;
}

CapabilityStatement_Messaging_SupportedMessage*
Deserialize_CapabilityStatement_Messaging_SupportedMessage(Arena *arena, cJSON *capabilityStatement_Messaging_SupportedMessage)
{
	CapabilityStatement_Messaging_SupportedMessage *result_CapabilityStatement_Messaging_SupportedMessage = PushArray(arena, CapabilityStatement_Messaging_SupportedMessage, 1);
	result_CapabilityStatement_Messaging_SupportedMessage->resourceType = ResourceType::CapabilityStatement_Messaging_SupportedMessage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Messaging_SupportedMessage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Messaging_SupportedMessage, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Messaging_SupportedMessage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Messaging_SupportedMessage, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Messaging_SupportedMessage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Messaging_SupportedMessage->extension = PushArray(arena, Extension, result_CapabilityStatement_Messaging_SupportedMessage->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging_SupportedMessage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Messaging_SupportedMessage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Messaging_SupportedMessage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Messaging_SupportedMessage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Messaging_SupportedMessage->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Messaging_SupportedMessage->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Messaging_SupportedMessage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Messaging_SupportedMessage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(capabilityStatement_Messaging_SupportedMessage, "mode");
	if(cjson_mode)
	{
		result_CapabilityStatement_Messaging_SupportedMessage->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(capabilityStatement_Messaging_SupportedMessage, "definition");
	if(cjson_definition)
	{
		result_CapabilityStatement_Messaging_SupportedMessage->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	return result_CapabilityStatement_Messaging_SupportedMessage;
}

CapabilityStatement_Document*
Deserialize_CapabilityStatement_Document(Arena *arena, cJSON *capabilityStatement_Document)
{
	CapabilityStatement_Document *result_CapabilityStatement_Document = PushArray(arena, CapabilityStatement_Document, 1);
	result_CapabilityStatement_Document->resourceType = ResourceType::CapabilityStatement_Document;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(capabilityStatement_Document, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(capabilityStatement_Document, "id");
	if(cjson_id)
	{
		result_CapabilityStatement_Document->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(capabilityStatement_Document, "extension");
	if(cjson_extension)
	{
		result_CapabilityStatement_Document->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CapabilityStatement_Document->extension = PushArray(arena, Extension, result_CapabilityStatement_Document->extension_count);
		for(int i = 0; i < result_CapabilityStatement_Document->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CapabilityStatement_Document->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(capabilityStatement_Document, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CapabilityStatement_Document->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CapabilityStatement_Document->modifierExtension = PushArray(arena, Extension, result_CapabilityStatement_Document->modifierExtension_count);
		for(int i = 0; i < result_CapabilityStatement_Document->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CapabilityStatement_Document->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(capabilityStatement_Document, "mode");
	if(cjson_mode)
	{
		result_CapabilityStatement_Document->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(capabilityStatement_Document, "documentation");
	if(cjson_documentation)
	{
		result_CapabilityStatement_Document->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(capabilityStatement_Document, "profile");
	if(cjson_profile)
	{
		result_CapabilityStatement_Document->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	return result_CapabilityStatement_Document;
}

CarePlan*
Deserialize_CarePlan(Arena *arena, cJSON *carePlan)
{
	CarePlan *result_CarePlan = PushArray(arena, CarePlan, 1);
	result_CarePlan->resourceType = ResourceType::CarePlan;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(carePlan, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(carePlan, "id");
	if(cjson_id)
	{
		result_CarePlan->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(carePlan, "meta");
	if(cjson_meta)
	{
		result_CarePlan->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(carePlan, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CarePlan->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(carePlan, "language");
	if(cjson_language)
	{
		result_CarePlan->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(carePlan, "text");
	if(cjson_text)
	{
		result_CarePlan->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(carePlan, "contained");
	if(cjson_contained)
	{
		result_CarePlan->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CarePlan->contained = PushArray(arena, Resource, result_CarePlan->contained_count);
		for(int i = 0; i < result_CarePlan->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CarePlan->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(carePlan, "extension");
	if(cjson_extension)
	{
		result_CarePlan->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CarePlan->extension = PushArray(arena, Extension, result_CarePlan->extension_count);
		for(int i = 0; i < result_CarePlan->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CarePlan->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(carePlan, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CarePlan->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CarePlan->modifierExtension = PushArray(arena, Extension, result_CarePlan->modifierExtension_count);
		for(int i = 0; i < result_CarePlan->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CarePlan->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(carePlan, "identifier");
	if(cjson_identifier)
	{
		result_CarePlan->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_CarePlan->identifier = PushArray(arena, Identifier, result_CarePlan->identifier_count);
		for(int i = 0; i < result_CarePlan->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_CarePlan->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(carePlan, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_CarePlan->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_CarePlan->instantiatesCanonical = PushArray(arena, fhir_canonical, result_CarePlan->instantiatesCanonical_count);
		for(int i = 0; i < result_CarePlan->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_CarePlan->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(carePlan, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_CarePlan->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_CarePlan->instantiatesUri = PushArray(arena, fhir_uri, result_CarePlan->instantiatesUri_count);
		for(int i = 0; i < result_CarePlan->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_CarePlan->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(carePlan, "basedOn");
	if(cjson_basedOn)
	{
		result_CarePlan->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_CarePlan->basedOn = PushArray(arena, Reference, result_CarePlan->basedOn_count);
		for(int i = 0; i < result_CarePlan->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_CarePlan->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_replaces =  cJSON_GetObjectItem(carePlan, "replaces");
	if(cjson_replaces)
	{
		result_CarePlan->replaces_count = cJSON_GetArraySize(cjson_replaces);
		result_CarePlan->replaces = PushArray(arena, Reference, result_CarePlan->replaces_count);
		for(int i = 0; i < result_CarePlan->replaces_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_replaces, i);
			result_CarePlan->replaces[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(carePlan, "partOf");
	if(cjson_partOf)
	{
		result_CarePlan->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_CarePlan->partOf = PushArray(arena, Reference, result_CarePlan->partOf_count);
		for(int i = 0; i < result_CarePlan->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_CarePlan->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(carePlan, "status");
	if(cjson_status)
	{
		result_CarePlan->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(carePlan, "intent");
	if(cjson_intent)
	{
		result_CarePlan->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(carePlan, "category");
	if(cjson_category)
	{
		result_CarePlan->category_count = cJSON_GetArraySize(cjson_category);
		result_CarePlan->category = PushArray(arena, CodeableConcept, result_CarePlan->category_count);
		for(int i = 0; i < result_CarePlan->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_CarePlan->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_title =  cJSON_GetObjectItem(carePlan, "title");
	if(cjson_title)
	{
		result_CarePlan->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(carePlan, "description");
	if(cjson_description)
	{
		result_CarePlan->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(carePlan, "subject");
	if(cjson_subject)
	{
		result_CarePlan->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(carePlan, "encounter");
	if(cjson_encounter)
	{
		result_CarePlan->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(carePlan, "period");
	if(cjson_period)
	{
		result_CarePlan->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(carePlan, "created");
	if(cjson_created)
	{
		result_CarePlan->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(carePlan, "author");
	if(cjson_author)
	{
		result_CarePlan->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_contributor =  cJSON_GetObjectItem(carePlan, "contributor");
	if(cjson_contributor)
	{
		result_CarePlan->contributor_count = cJSON_GetArraySize(cjson_contributor);
		result_CarePlan->contributor = PushArray(arena, Reference, result_CarePlan->contributor_count);
		for(int i = 0; i < result_CarePlan->contributor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contributor, i);
			result_CarePlan->contributor[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_careTeam =  cJSON_GetObjectItem(carePlan, "careTeam");
	if(cjson_careTeam)
	{
		result_CarePlan->careTeam_count = cJSON_GetArraySize(cjson_careTeam);
		result_CarePlan->careTeam = PushArray(arena, Reference, result_CarePlan->careTeam_count);
		for(int i = 0; i < result_CarePlan->careTeam_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_careTeam, i);
			result_CarePlan->careTeam[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_addresses =  cJSON_GetObjectItem(carePlan, "addresses");
	if(cjson_addresses)
	{
		result_CarePlan->addresses_count = cJSON_GetArraySize(cjson_addresses);
		result_CarePlan->addresses = PushArray(arena, Reference, result_CarePlan->addresses_count);
		for(int i = 0; i < result_CarePlan->addresses_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_addresses, i);
			result_CarePlan->addresses[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(carePlan, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_CarePlan->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_CarePlan->supportingInfo = PushArray(arena, Reference, result_CarePlan->supportingInfo_count);
		for(int i = 0; i < result_CarePlan->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_CarePlan->supportingInfo[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_goal =  cJSON_GetObjectItem(carePlan, "goal");
	if(cjson_goal)
	{
		result_CarePlan->goal_count = cJSON_GetArraySize(cjson_goal);
		result_CarePlan->goal = PushArray(arena, Reference, result_CarePlan->goal_count);
		for(int i = 0; i < result_CarePlan->goal_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_goal, i);
			result_CarePlan->goal[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_activity =  cJSON_GetObjectItem(carePlan, "activity");
	if(cjson_activity)
	{
		result_CarePlan->activity_count = cJSON_GetArraySize(cjson_activity);
		result_CarePlan->activity = PushArray(arena, CarePlan_Activity, result_CarePlan->activity_count);
		for(int i = 0; i < result_CarePlan->activity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_activity, i);
			result_CarePlan->activity[i] = *Deserialize_CarePlan_Activity(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(carePlan, "note");
	if(cjson_note)
	{
		result_CarePlan->note_count = cJSON_GetArraySize(cjson_note);
		result_CarePlan->note = PushArray(arena, Annotation, result_CarePlan->note_count);
		for(int i = 0; i < result_CarePlan->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_CarePlan->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_CarePlan;
}

CarePlan_Activity*
Deserialize_CarePlan_Activity(Arena *arena, cJSON *carePlan_Activity)
{
	CarePlan_Activity *result_CarePlan_Activity = PushArray(arena, CarePlan_Activity, 1);
	result_CarePlan_Activity->resourceType = ResourceType::CarePlan_Activity;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(carePlan_Activity, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(carePlan_Activity, "id");
	if(cjson_id)
	{
		result_CarePlan_Activity->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(carePlan_Activity, "extension");
	if(cjson_extension)
	{
		result_CarePlan_Activity->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CarePlan_Activity->extension = PushArray(arena, Extension, result_CarePlan_Activity->extension_count);
		for(int i = 0; i < result_CarePlan_Activity->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CarePlan_Activity->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(carePlan_Activity, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CarePlan_Activity->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CarePlan_Activity->modifierExtension = PushArray(arena, Extension, result_CarePlan_Activity->modifierExtension_count);
		for(int i = 0; i < result_CarePlan_Activity->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CarePlan_Activity->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_outcomeCodeableConcept =  cJSON_GetObjectItem(carePlan_Activity, "outcomeCodeableConcept");
	if(cjson_outcomeCodeableConcept)
	{
		result_CarePlan_Activity->outcomeCodeableConcept_count = cJSON_GetArraySize(cjson_outcomeCodeableConcept);
		result_CarePlan_Activity->outcomeCodeableConcept = PushArray(arena, CodeableConcept, result_CarePlan_Activity->outcomeCodeableConcept_count);
		for(int i = 0; i < result_CarePlan_Activity->outcomeCodeableConcept_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_outcomeCodeableConcept, i);
			result_CarePlan_Activity->outcomeCodeableConcept[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_outcomeReference =  cJSON_GetObjectItem(carePlan_Activity, "outcomeReference");
	if(cjson_outcomeReference)
	{
		result_CarePlan_Activity->outcomeReference_count = cJSON_GetArraySize(cjson_outcomeReference);
		result_CarePlan_Activity->outcomeReference = PushArray(arena, Reference, result_CarePlan_Activity->outcomeReference_count);
		for(int i = 0; i < result_CarePlan_Activity->outcomeReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_outcomeReference, i);
			result_CarePlan_Activity->outcomeReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_progress =  cJSON_GetObjectItem(carePlan_Activity, "progress");
	if(cjson_progress)
	{
		result_CarePlan_Activity->progress_count = cJSON_GetArraySize(cjson_progress);
		result_CarePlan_Activity->progress = PushArray(arena, Annotation, result_CarePlan_Activity->progress_count);
		for(int i = 0; i < result_CarePlan_Activity->progress_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_progress, i);
			result_CarePlan_Activity->progress[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(carePlan_Activity, "reference");
	if(cjson_reference)
	{
		result_CarePlan_Activity->reference = Deserialize_Reference(arena, cjson_reference);
	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(carePlan_Activity, "detail");
	if(cjson_detail)
	{
		result_CarePlan_Activity->detail = Deserialize_CarePlan_Activity_Detail(arena, cjson_detail);
	}
	return result_CarePlan_Activity;
}

CarePlan_Activity_Detail*
Deserialize_CarePlan_Activity_Detail(Arena *arena, cJSON *carePlan_Activity_Detail)
{
	CarePlan_Activity_Detail *result_CarePlan_Activity_Detail = PushArray(arena, CarePlan_Activity_Detail, 1);
	result_CarePlan_Activity_Detail->resourceType = ResourceType::CarePlan_Activity_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(carePlan_Activity_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(carePlan_Activity_Detail, "id");
	if(cjson_id)
	{
		result_CarePlan_Activity_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(carePlan_Activity_Detail, "extension");
	if(cjson_extension)
	{
		result_CarePlan_Activity_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CarePlan_Activity_Detail->extension = PushArray(arena, Extension, result_CarePlan_Activity_Detail->extension_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CarePlan_Activity_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(carePlan_Activity_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CarePlan_Activity_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CarePlan_Activity_Detail->modifierExtension = PushArray(arena, Extension, result_CarePlan_Activity_Detail->modifierExtension_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CarePlan_Activity_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(carePlan_Activity_Detail, "kind");
	if(cjson_kind)
	{
		result_CarePlan_Activity_Detail->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(carePlan_Activity_Detail, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_CarePlan_Activity_Detail->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_CarePlan_Activity_Detail->instantiatesCanonical = PushArray(arena, fhir_canonical, result_CarePlan_Activity_Detail->instantiatesCanonical_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_CarePlan_Activity_Detail->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(carePlan_Activity_Detail, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_CarePlan_Activity_Detail->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_CarePlan_Activity_Detail->instantiatesUri = PushArray(arena, fhir_uri, result_CarePlan_Activity_Detail->instantiatesUri_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_CarePlan_Activity_Detail->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(carePlan_Activity_Detail, "code");
	if(cjson_code)
	{
		result_CarePlan_Activity_Detail->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(carePlan_Activity_Detail, "reasonCode");
	if(cjson_reasonCode)
	{
		result_CarePlan_Activity_Detail->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_CarePlan_Activity_Detail->reasonCode = PushArray(arena, CodeableConcept, result_CarePlan_Activity_Detail->reasonCode_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_CarePlan_Activity_Detail->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(carePlan_Activity_Detail, "reasonReference");
	if(cjson_reasonReference)
	{
		result_CarePlan_Activity_Detail->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_CarePlan_Activity_Detail->reasonReference = PushArray(arena, Reference, result_CarePlan_Activity_Detail->reasonReference_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_CarePlan_Activity_Detail->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_goal =  cJSON_GetObjectItem(carePlan_Activity_Detail, "goal");
	if(cjson_goal)
	{
		result_CarePlan_Activity_Detail->goal_count = cJSON_GetArraySize(cjson_goal);
		result_CarePlan_Activity_Detail->goal = PushArray(arena, Reference, result_CarePlan_Activity_Detail->goal_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->goal_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_goal, i);
			result_CarePlan_Activity_Detail->goal[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(carePlan_Activity_Detail, "status");
	if(cjson_status)
	{
		result_CarePlan_Activity_Detail->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(carePlan_Activity_Detail, "statusReason");
	if(cjson_statusReason)
	{
		result_CarePlan_Activity_Detail->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_doNotPerform =  cJSON_GetObjectItem(carePlan_Activity_Detail, "doNotPerform");
	if(cjson_doNotPerform)
	{
		result_CarePlan_Activity_Detail->doNotPerform = (boolean)cJSON_IsTrue(cjson_doNotPerform);
	}
	if((bool)cJSON_HasObjectItem(carePlan_Activity_Detail, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(carePlan_Activity_Detail, "valueTiming");
		result_CarePlan_Activity_Detail->scheduled.valueTiming = Deserialize_Timing(arena, item);
		result_CarePlan_Activity_Detail->scheduled_type = CarePlan_Activity_Detail::ScheduledType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(carePlan_Activity_Detail, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(carePlan_Activity_Detail, "valuePeriod");
		result_CarePlan_Activity_Detail->scheduled.valuePeriod = Deserialize_Period(arena, item);
		result_CarePlan_Activity_Detail->scheduled_type = CarePlan_Activity_Detail::ScheduledType::Period;
	}
	else if((bool)cJSON_HasObjectItem(carePlan_Activity_Detail, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(carePlan_Activity_Detail, "valueString");
		result_CarePlan_Activity_Detail->scheduled.valueString = Str8C(cJSON_GetStringValue(item));
		result_CarePlan_Activity_Detail->scheduled_type = CarePlan_Activity_Detail::ScheduledType::fhir_string;
	}


	cJSON *cjson_location =  cJSON_GetObjectItem(carePlan_Activity_Detail, "location");
	if(cjson_location)
	{
		result_CarePlan_Activity_Detail->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(carePlan_Activity_Detail, "performer");
	if(cjson_performer)
	{
		result_CarePlan_Activity_Detail->performer_count = cJSON_GetArraySize(cjson_performer);
		result_CarePlan_Activity_Detail->performer = PushArray(arena, Reference, result_CarePlan_Activity_Detail->performer_count);
		for(int i = 0; i < result_CarePlan_Activity_Detail->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_CarePlan_Activity_Detail->performer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(carePlan_Activity_Detail, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(carePlan_Activity_Detail, "valueCodeableConcept");
		result_CarePlan_Activity_Detail->product.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_CarePlan_Activity_Detail->product_type = CarePlan_Activity_Detail::ProductType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(carePlan_Activity_Detail, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(carePlan_Activity_Detail, "valueReference");
		result_CarePlan_Activity_Detail->product.valueReference = Deserialize_Reference(arena, item);
		result_CarePlan_Activity_Detail->product_type = CarePlan_Activity_Detail::ProductType::Reference;
	}


	cJSON *cjson_dailyAmount =  cJSON_GetObjectItem(carePlan_Activity_Detail, "dailyAmount");
	if(cjson_dailyAmount)
	{
		result_CarePlan_Activity_Detail->dailyAmount = Deserialize_Quantity(arena, cjson_dailyAmount);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(carePlan_Activity_Detail, "quantity");
	if(cjson_quantity)
	{
		result_CarePlan_Activity_Detail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(carePlan_Activity_Detail, "description");
	if(cjson_description)
	{
		result_CarePlan_Activity_Detail->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_CarePlan_Activity_Detail;
}

CareTeam*
Deserialize_CareTeam(Arena *arena, cJSON *careTeam)
{
	CareTeam *result_CareTeam = PushArray(arena, CareTeam, 1);
	result_CareTeam->resourceType = ResourceType::CareTeam;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(careTeam, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(careTeam, "id");
	if(cjson_id)
	{
		result_CareTeam->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(careTeam, "meta");
	if(cjson_meta)
	{
		result_CareTeam->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(careTeam, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CareTeam->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(careTeam, "language");
	if(cjson_language)
	{
		result_CareTeam->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(careTeam, "text");
	if(cjson_text)
	{
		result_CareTeam->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(careTeam, "contained");
	if(cjson_contained)
	{
		result_CareTeam->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CareTeam->contained = PushArray(arena, Resource, result_CareTeam->contained_count);
		for(int i = 0; i < result_CareTeam->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CareTeam->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(careTeam, "extension");
	if(cjson_extension)
	{
		result_CareTeam->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CareTeam->extension = PushArray(arena, Extension, result_CareTeam->extension_count);
		for(int i = 0; i < result_CareTeam->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CareTeam->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(careTeam, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CareTeam->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CareTeam->modifierExtension = PushArray(arena, Extension, result_CareTeam->modifierExtension_count);
		for(int i = 0; i < result_CareTeam->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CareTeam->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(careTeam, "identifier");
	if(cjson_identifier)
	{
		result_CareTeam->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_CareTeam->identifier = PushArray(arena, Identifier, result_CareTeam->identifier_count);
		for(int i = 0; i < result_CareTeam->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_CareTeam->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(careTeam, "status");
	if(cjson_status)
	{
		result_CareTeam->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(careTeam, "category");
	if(cjson_category)
	{
		result_CareTeam->category_count = cJSON_GetArraySize(cjson_category);
		result_CareTeam->category = PushArray(arena, CodeableConcept, result_CareTeam->category_count);
		for(int i = 0; i < result_CareTeam->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_CareTeam->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(careTeam, "name");
	if(cjson_name)
	{
		result_CareTeam->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(careTeam, "subject");
	if(cjson_subject)
	{
		result_CareTeam->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(careTeam, "encounter");
	if(cjson_encounter)
	{
		result_CareTeam->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(careTeam, "period");
	if(cjson_period)
	{
		result_CareTeam->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_participant =  cJSON_GetObjectItem(careTeam, "participant");
	if(cjson_participant)
	{
		result_CareTeam->participant_count = cJSON_GetArraySize(cjson_participant);
		result_CareTeam->participant = PushArray(arena, CareTeam_Participant, result_CareTeam->participant_count);
		for(int i = 0; i < result_CareTeam->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_CareTeam->participant[i] = *Deserialize_CareTeam_Participant(arena, internal);
		}

	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(careTeam, "reasonCode");
	if(cjson_reasonCode)
	{
		result_CareTeam->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_CareTeam->reasonCode = PushArray(arena, CodeableConcept, result_CareTeam->reasonCode_count);
		for(int i = 0; i < result_CareTeam->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_CareTeam->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(careTeam, "reasonReference");
	if(cjson_reasonReference)
	{
		result_CareTeam->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_CareTeam->reasonReference = PushArray(arena, Reference, result_CareTeam->reasonReference_count);
		for(int i = 0; i < result_CareTeam->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_CareTeam->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_managingOrganization =  cJSON_GetObjectItem(careTeam, "managingOrganization");
	if(cjson_managingOrganization)
	{
		result_CareTeam->managingOrganization_count = cJSON_GetArraySize(cjson_managingOrganization);
		result_CareTeam->managingOrganization = PushArray(arena, Reference, result_CareTeam->managingOrganization_count);
		for(int i = 0; i < result_CareTeam->managingOrganization_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_managingOrganization, i);
			result_CareTeam->managingOrganization[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(careTeam, "telecom");
	if(cjson_telecom)
	{
		result_CareTeam->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_CareTeam->telecom = PushArray(arena, ContactPoint, result_CareTeam->telecom_count);
		for(int i = 0; i < result_CareTeam->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_CareTeam->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(careTeam, "note");
	if(cjson_note)
	{
		result_CareTeam->note_count = cJSON_GetArraySize(cjson_note);
		result_CareTeam->note = PushArray(arena, Annotation, result_CareTeam->note_count);
		for(int i = 0; i < result_CareTeam->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_CareTeam->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_CareTeam;
}

CareTeam_Participant*
Deserialize_CareTeam_Participant(Arena *arena, cJSON *careTeam_Participant)
{
	CareTeam_Participant *result_CareTeam_Participant = PushArray(arena, CareTeam_Participant, 1);
	result_CareTeam_Participant->resourceType = ResourceType::CareTeam_Participant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(careTeam_Participant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(careTeam_Participant, "id");
	if(cjson_id)
	{
		result_CareTeam_Participant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(careTeam_Participant, "extension");
	if(cjson_extension)
	{
		result_CareTeam_Participant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CareTeam_Participant->extension = PushArray(arena, Extension, result_CareTeam_Participant->extension_count);
		for(int i = 0; i < result_CareTeam_Participant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CareTeam_Participant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(careTeam_Participant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CareTeam_Participant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CareTeam_Participant->modifierExtension = PushArray(arena, Extension, result_CareTeam_Participant->modifierExtension_count);
		for(int i = 0; i < result_CareTeam_Participant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CareTeam_Participant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_role =  cJSON_GetObjectItem(careTeam_Participant, "role");
	if(cjson_role)
	{
		result_CareTeam_Participant->role_count = cJSON_GetArraySize(cjson_role);
		result_CareTeam_Participant->role = PushArray(arena, CodeableConcept, result_CareTeam_Participant->role_count);
		for(int i = 0; i < result_CareTeam_Participant->role_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_role, i);
			result_CareTeam_Participant->role[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_member =  cJSON_GetObjectItem(careTeam_Participant, "member");
	if(cjson_member)
	{
		result_CareTeam_Participant->member = Deserialize_Reference(arena, cjson_member);
	}
	cJSON *cjson_onBehalfOf =  cJSON_GetObjectItem(careTeam_Participant, "onBehalfOf");
	if(cjson_onBehalfOf)
	{
		result_CareTeam_Participant->onBehalfOf = Deserialize_Reference(arena, cjson_onBehalfOf);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(careTeam_Participant, "period");
	if(cjson_period)
	{
		result_CareTeam_Participant->period = Deserialize_Period(arena, cjson_period);
	}
	return result_CareTeam_Participant;
}

CatalogEntry*
Deserialize_CatalogEntry(Arena *arena, cJSON *catalogEntry)
{
	CatalogEntry *result_CatalogEntry = PushArray(arena, CatalogEntry, 1);
	result_CatalogEntry->resourceType = ResourceType::CatalogEntry;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(catalogEntry, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(catalogEntry, "id");
	if(cjson_id)
	{
		result_CatalogEntry->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(catalogEntry, "meta");
	if(cjson_meta)
	{
		result_CatalogEntry->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(catalogEntry, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CatalogEntry->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(catalogEntry, "language");
	if(cjson_language)
	{
		result_CatalogEntry->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(catalogEntry, "text");
	if(cjson_text)
	{
		result_CatalogEntry->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(catalogEntry, "contained");
	if(cjson_contained)
	{
		result_CatalogEntry->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CatalogEntry->contained = PushArray(arena, Resource, result_CatalogEntry->contained_count);
		for(int i = 0; i < result_CatalogEntry->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CatalogEntry->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(catalogEntry, "extension");
	if(cjson_extension)
	{
		result_CatalogEntry->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CatalogEntry->extension = PushArray(arena, Extension, result_CatalogEntry->extension_count);
		for(int i = 0; i < result_CatalogEntry->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CatalogEntry->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(catalogEntry, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CatalogEntry->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CatalogEntry->modifierExtension = PushArray(arena, Extension, result_CatalogEntry->modifierExtension_count);
		for(int i = 0; i < result_CatalogEntry->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CatalogEntry->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(catalogEntry, "identifier");
	if(cjson_identifier)
	{
		result_CatalogEntry->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_CatalogEntry->identifier = PushArray(arena, Identifier, result_CatalogEntry->identifier_count);
		for(int i = 0; i < result_CatalogEntry->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_CatalogEntry->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(catalogEntry, "type");
	if(cjson_type)
	{
		result_CatalogEntry->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_orderable =  cJSON_GetObjectItem(catalogEntry, "orderable");
	if(cjson_orderable)
	{
		result_CatalogEntry->orderable = (boolean)cJSON_IsTrue(cjson_orderable);
	}
	cJSON *cjson_referencedItem =  cJSON_GetObjectItem(catalogEntry, "referencedItem");
	if(cjson_referencedItem)
	{
		result_CatalogEntry->referencedItem = Deserialize_Reference(arena, cjson_referencedItem);
	}
	cJSON *cjson_additionalIdentifier =  cJSON_GetObjectItem(catalogEntry, "additionalIdentifier");
	if(cjson_additionalIdentifier)
	{
		result_CatalogEntry->additionalIdentifier_count = cJSON_GetArraySize(cjson_additionalIdentifier);
		result_CatalogEntry->additionalIdentifier = PushArray(arena, Identifier, result_CatalogEntry->additionalIdentifier_count);
		for(int i = 0; i < result_CatalogEntry->additionalIdentifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_additionalIdentifier, i);
			result_CatalogEntry->additionalIdentifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_classification =  cJSON_GetObjectItem(catalogEntry, "classification");
	if(cjson_classification)
	{
		result_CatalogEntry->classification_count = cJSON_GetArraySize(cjson_classification);
		result_CatalogEntry->classification = PushArray(arena, CodeableConcept, result_CatalogEntry->classification_count);
		for(int i = 0; i < result_CatalogEntry->classification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_classification, i);
			result_CatalogEntry->classification[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(catalogEntry, "status");
	if(cjson_status)
	{
		result_CatalogEntry->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_validityPeriod =  cJSON_GetObjectItem(catalogEntry, "validityPeriod");
	if(cjson_validityPeriod)
	{
		result_CatalogEntry->validityPeriod = Deserialize_Period(arena, cjson_validityPeriod);
	}
	cJSON *cjson_validTo =  cJSON_GetObjectItem(catalogEntry, "validTo");
	if(cjson_validTo)
	{
		result_CatalogEntry->validTo = Str8C(cJSON_GetStringValue(cjson_validTo));
	}
	cJSON *cjson_lastUpdated =  cJSON_GetObjectItem(catalogEntry, "lastUpdated");
	if(cjson_lastUpdated)
	{
		result_CatalogEntry->lastUpdated = Str8C(cJSON_GetStringValue(cjson_lastUpdated));
	}
	cJSON *cjson_additionalCharacteristic =  cJSON_GetObjectItem(catalogEntry, "additionalCharacteristic");
	if(cjson_additionalCharacteristic)
	{
		result_CatalogEntry->additionalCharacteristic_count = cJSON_GetArraySize(cjson_additionalCharacteristic);
		result_CatalogEntry->additionalCharacteristic = PushArray(arena, CodeableConcept, result_CatalogEntry->additionalCharacteristic_count);
		for(int i = 0; i < result_CatalogEntry->additionalCharacteristic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_additionalCharacteristic, i);
			result_CatalogEntry->additionalCharacteristic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_additionalClassification =  cJSON_GetObjectItem(catalogEntry, "additionalClassification");
	if(cjson_additionalClassification)
	{
		result_CatalogEntry->additionalClassification_count = cJSON_GetArraySize(cjson_additionalClassification);
		result_CatalogEntry->additionalClassification = PushArray(arena, CodeableConcept, result_CatalogEntry->additionalClassification_count);
		for(int i = 0; i < result_CatalogEntry->additionalClassification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_additionalClassification, i);
			result_CatalogEntry->additionalClassification[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_relatedEntry =  cJSON_GetObjectItem(catalogEntry, "relatedEntry");
	if(cjson_relatedEntry)
	{
		result_CatalogEntry->relatedEntry_count = cJSON_GetArraySize(cjson_relatedEntry);
		result_CatalogEntry->relatedEntry = PushArray(arena, CatalogEntry_RelatedEntry, result_CatalogEntry->relatedEntry_count);
		for(int i = 0; i < result_CatalogEntry->relatedEntry_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedEntry, i);
			result_CatalogEntry->relatedEntry[i] = *Deserialize_CatalogEntry_RelatedEntry(arena, internal);
		}

	}
	return result_CatalogEntry;
}

CatalogEntry_RelatedEntry*
Deserialize_CatalogEntry_RelatedEntry(Arena *arena, cJSON *catalogEntry_RelatedEntry)
{
	CatalogEntry_RelatedEntry *result_CatalogEntry_RelatedEntry = PushArray(arena, CatalogEntry_RelatedEntry, 1);
	result_CatalogEntry_RelatedEntry->resourceType = ResourceType::CatalogEntry_RelatedEntry;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(catalogEntry_RelatedEntry, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(catalogEntry_RelatedEntry, "id");
	if(cjson_id)
	{
		result_CatalogEntry_RelatedEntry->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(catalogEntry_RelatedEntry, "extension");
	if(cjson_extension)
	{
		result_CatalogEntry_RelatedEntry->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CatalogEntry_RelatedEntry->extension = PushArray(arena, Extension, result_CatalogEntry_RelatedEntry->extension_count);
		for(int i = 0; i < result_CatalogEntry_RelatedEntry->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CatalogEntry_RelatedEntry->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(catalogEntry_RelatedEntry, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CatalogEntry_RelatedEntry->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CatalogEntry_RelatedEntry->modifierExtension = PushArray(arena, Extension, result_CatalogEntry_RelatedEntry->modifierExtension_count);
		for(int i = 0; i < result_CatalogEntry_RelatedEntry->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CatalogEntry_RelatedEntry->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_relationtype =  cJSON_GetObjectItem(catalogEntry_RelatedEntry, "relationtype");
	if(cjson_relationtype)
	{
		result_CatalogEntry_RelatedEntry->relationtype = Str8C(cJSON_GetStringValue(cjson_relationtype));
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(catalogEntry_RelatedEntry, "item");
	if(cjson_item)
	{
		result_CatalogEntry_RelatedEntry->item = Deserialize_Reference(arena, cjson_item);
	}
	return result_CatalogEntry_RelatedEntry;
}

ChargeItem*
Deserialize_ChargeItem(Arena *arena, cJSON *chargeItem)
{
	ChargeItem *result_ChargeItem = PushArray(arena, ChargeItem, 1);
	result_ChargeItem->resourceType = ResourceType::ChargeItem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(chargeItem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(chargeItem, "id");
	if(cjson_id)
	{
		result_ChargeItem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(chargeItem, "meta");
	if(cjson_meta)
	{
		result_ChargeItem->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(chargeItem, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ChargeItem->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(chargeItem, "language");
	if(cjson_language)
	{
		result_ChargeItem->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(chargeItem, "text");
	if(cjson_text)
	{
		result_ChargeItem->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(chargeItem, "contained");
	if(cjson_contained)
	{
		result_ChargeItem->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ChargeItem->contained = PushArray(arena, Resource, result_ChargeItem->contained_count);
		for(int i = 0; i < result_ChargeItem->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ChargeItem->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(chargeItem, "extension");
	if(cjson_extension)
	{
		result_ChargeItem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ChargeItem->extension = PushArray(arena, Extension, result_ChargeItem->extension_count);
		for(int i = 0; i < result_ChargeItem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ChargeItem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(chargeItem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ChargeItem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ChargeItem->modifierExtension = PushArray(arena, Extension, result_ChargeItem->modifierExtension_count);
		for(int i = 0; i < result_ChargeItem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ChargeItem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(chargeItem, "identifier");
	if(cjson_identifier)
	{
		result_ChargeItem->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ChargeItem->identifier = PushArray(arena, Identifier, result_ChargeItem->identifier_count);
		for(int i = 0; i < result_ChargeItem->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ChargeItem->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_definitionUri =  cJSON_GetObjectItem(chargeItem, "definitionUri");
	if(cjson_definitionUri)
	{
		result_ChargeItem->definitionUri_count = cJSON_GetArraySize(cjson_definitionUri);
		result_ChargeItem->definitionUri = PushArray(arena, fhir_uri, result_ChargeItem->definitionUri_count);
		for(int i = 0; i < result_ChargeItem->definitionUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_definitionUri, i);
			result_ChargeItem->definitionUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_definitionCanonical =  cJSON_GetObjectItem(chargeItem, "definitionCanonical");
	if(cjson_definitionCanonical)
	{
		result_ChargeItem->definitionCanonical_count = cJSON_GetArraySize(cjson_definitionCanonical);
		result_ChargeItem->definitionCanonical = PushArray(arena, fhir_canonical, result_ChargeItem->definitionCanonical_count);
		for(int i = 0; i < result_ChargeItem->definitionCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_definitionCanonical, i);
			result_ChargeItem->definitionCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(chargeItem, "status");
	if(cjson_status)
	{
		result_ChargeItem->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(chargeItem, "partOf");
	if(cjson_partOf)
	{
		result_ChargeItem->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_ChargeItem->partOf = PushArray(arena, Reference, result_ChargeItem->partOf_count);
		for(int i = 0; i < result_ChargeItem->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_ChargeItem->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(chargeItem, "code");
	if(cjson_code)
	{
		result_ChargeItem->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(chargeItem, "subject");
	if(cjson_subject)
	{
		result_ChargeItem->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(chargeItem, "context");
	if(cjson_context)
	{
		result_ChargeItem->context = Deserialize_Reference(arena, cjson_context);
	}
	if((bool)cJSON_HasObjectItem(chargeItem, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(chargeItem, "valueDateTime");
		result_ChargeItem->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ChargeItem->occurrence_type = ChargeItem::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(chargeItem, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(chargeItem, "valuePeriod");
		result_ChargeItem->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_ChargeItem->occurrence_type = ChargeItem::OccurrenceType::Period;
	}
	else if((bool)cJSON_HasObjectItem(chargeItem, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(chargeItem, "valueTiming");
		result_ChargeItem->occurrence.valueTiming = Deserialize_Timing(arena, item);
		result_ChargeItem->occurrence_type = ChargeItem::OccurrenceType::Timing;
	}


	cJSON *cjson_performer =  cJSON_GetObjectItem(chargeItem, "performer");
	if(cjson_performer)
	{
		result_ChargeItem->performer_count = cJSON_GetArraySize(cjson_performer);
		result_ChargeItem->performer = PushArray(arena, ChargeItem_Performer, result_ChargeItem->performer_count);
		for(int i = 0; i < result_ChargeItem->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_ChargeItem->performer[i] = *Deserialize_ChargeItem_Performer(arena, internal);
		}

	}
	cJSON *cjson_performingOrganization =  cJSON_GetObjectItem(chargeItem, "performingOrganization");
	if(cjson_performingOrganization)
	{
		result_ChargeItem->performingOrganization = Deserialize_Reference(arena, cjson_performingOrganization);
	}
	cJSON *cjson_requestingOrganization =  cJSON_GetObjectItem(chargeItem, "requestingOrganization");
	if(cjson_requestingOrganization)
	{
		result_ChargeItem->requestingOrganization = Deserialize_Reference(arena, cjson_requestingOrganization);
	}
	cJSON *cjson_costCenter =  cJSON_GetObjectItem(chargeItem, "costCenter");
	if(cjson_costCenter)
	{
		result_ChargeItem->costCenter = Deserialize_Reference(arena, cjson_costCenter);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(chargeItem, "quantity");
	if(cjson_quantity)
	{
		result_ChargeItem->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_bodysite =  cJSON_GetObjectItem(chargeItem, "bodysite");
	if(cjson_bodysite)
	{
		result_ChargeItem->bodysite_count = cJSON_GetArraySize(cjson_bodysite);
		result_ChargeItem->bodysite = PushArray(arena, CodeableConcept, result_ChargeItem->bodysite_count);
		for(int i = 0; i < result_ChargeItem->bodysite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_bodysite, i);
			result_ChargeItem->bodysite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_factorOverride =  cJSON_GetObjectItem(chargeItem, "factorOverride");
	if(cjson_factorOverride)
	{
		result_ChargeItem->factorOverride = cJSON_GetNumberValue(cjson_factorOverride);
	}
	cJSON *cjson_priceOverride =  cJSON_GetObjectItem(chargeItem, "priceOverride");
	if(cjson_priceOverride)
	{
		result_ChargeItem->priceOverride = Deserialize_Money(arena, cjson_priceOverride);
	}
	cJSON *cjson_overrideReason =  cJSON_GetObjectItem(chargeItem, "overrideReason");
	if(cjson_overrideReason)
	{
		result_ChargeItem->overrideReason = Str8C(cJSON_GetStringValue(cjson_overrideReason));
	}
	cJSON *cjson_enterer =  cJSON_GetObjectItem(chargeItem, "enterer");
	if(cjson_enterer)
	{
		result_ChargeItem->enterer = Deserialize_Reference(arena, cjson_enterer);
	}
	cJSON *cjson_enteredDate =  cJSON_GetObjectItem(chargeItem, "enteredDate");
	if(cjson_enteredDate)
	{
		result_ChargeItem->enteredDate = Str8C(cJSON_GetStringValue(cjson_enteredDate));
	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(chargeItem, "reason");
	if(cjson_reason)
	{
		result_ChargeItem->reason_count = cJSON_GetArraySize(cjson_reason);
		result_ChargeItem->reason = PushArray(arena, CodeableConcept, result_ChargeItem->reason_count);
		for(int i = 0; i < result_ChargeItem->reason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reason, i);
			result_ChargeItem->reason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_service =  cJSON_GetObjectItem(chargeItem, "service");
	if(cjson_service)
	{
		result_ChargeItem->service_count = cJSON_GetArraySize(cjson_service);
		result_ChargeItem->service = PushArray(arena, Reference, result_ChargeItem->service_count);
		for(int i = 0; i < result_ChargeItem->service_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_service, i);
			result_ChargeItem->service[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(chargeItem, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(chargeItem, "valueReference");
		result_ChargeItem->product.valueReference = Deserialize_Reference(arena, item);
		result_ChargeItem->product_type = ChargeItem::ProductType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(chargeItem, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(chargeItem, "valueCodeableConcept");
		result_ChargeItem->product.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ChargeItem->product_type = ChargeItem::ProductType::CodeableConcept;
	}


	cJSON *cjson_account =  cJSON_GetObjectItem(chargeItem, "account");
	if(cjson_account)
	{
		result_ChargeItem->account_count = cJSON_GetArraySize(cjson_account);
		result_ChargeItem->account = PushArray(arena, Reference, result_ChargeItem->account_count);
		for(int i = 0; i < result_ChargeItem->account_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_account, i);
			result_ChargeItem->account[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(chargeItem, "note");
	if(cjson_note)
	{
		result_ChargeItem->note_count = cJSON_GetArraySize(cjson_note);
		result_ChargeItem->note = PushArray(arena, Annotation, result_ChargeItem->note_count);
		for(int i = 0; i < result_ChargeItem->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_ChargeItem->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_supportingInformation =  cJSON_GetObjectItem(chargeItem, "supportingInformation");
	if(cjson_supportingInformation)
	{
		result_ChargeItem->supportingInformation_count = cJSON_GetArraySize(cjson_supportingInformation);
		result_ChargeItem->supportingInformation = PushArray(arena, Reference, result_ChargeItem->supportingInformation_count);
		for(int i = 0; i < result_ChargeItem->supportingInformation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInformation, i);
			result_ChargeItem->supportingInformation[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_ChargeItem;
}

ChargeItem_Performer*
Deserialize_ChargeItem_Performer(Arena *arena, cJSON *chargeItem_Performer)
{
	ChargeItem_Performer *result_ChargeItem_Performer = PushArray(arena, ChargeItem_Performer, 1);
	result_ChargeItem_Performer->resourceType = ResourceType::ChargeItem_Performer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(chargeItem_Performer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(chargeItem_Performer, "id");
	if(cjson_id)
	{
		result_ChargeItem_Performer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(chargeItem_Performer, "extension");
	if(cjson_extension)
	{
		result_ChargeItem_Performer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ChargeItem_Performer->extension = PushArray(arena, Extension, result_ChargeItem_Performer->extension_count);
		for(int i = 0; i < result_ChargeItem_Performer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ChargeItem_Performer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(chargeItem_Performer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ChargeItem_Performer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ChargeItem_Performer->modifierExtension = PushArray(arena, Extension, result_ChargeItem_Performer->modifierExtension_count);
		for(int i = 0; i < result_ChargeItem_Performer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ChargeItem_Performer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_function_ =  cJSON_GetObjectItem(chargeItem_Performer, "function_");
	if(cjson_function_)
	{
		result_ChargeItem_Performer->function_ = Deserialize_CodeableConcept(arena, cjson_function_);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(chargeItem_Performer, "actor");
	if(cjson_actor)
	{
		result_ChargeItem_Performer->actor = Deserialize_Reference(arena, cjson_actor);
	}
	return result_ChargeItem_Performer;
}

ChargeItemDefinition*
Deserialize_ChargeItemDefinition(Arena *arena, cJSON *chargeItemDefinition)
{
	ChargeItemDefinition *result_ChargeItemDefinition = PushArray(arena, ChargeItemDefinition, 1);
	result_ChargeItemDefinition->resourceType = ResourceType::ChargeItemDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(chargeItemDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(chargeItemDefinition, "id");
	if(cjson_id)
	{
		result_ChargeItemDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(chargeItemDefinition, "meta");
	if(cjson_meta)
	{
		result_ChargeItemDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(chargeItemDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ChargeItemDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(chargeItemDefinition, "language");
	if(cjson_language)
	{
		result_ChargeItemDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(chargeItemDefinition, "text");
	if(cjson_text)
	{
		result_ChargeItemDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(chargeItemDefinition, "contained");
	if(cjson_contained)
	{
		result_ChargeItemDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ChargeItemDefinition->contained = PushArray(arena, Resource, result_ChargeItemDefinition->contained_count);
		for(int i = 0; i < result_ChargeItemDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ChargeItemDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(chargeItemDefinition, "extension");
	if(cjson_extension)
	{
		result_ChargeItemDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ChargeItemDefinition->extension = PushArray(arena, Extension, result_ChargeItemDefinition->extension_count);
		for(int i = 0; i < result_ChargeItemDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ChargeItemDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(chargeItemDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ChargeItemDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ChargeItemDefinition->modifierExtension = PushArray(arena, Extension, result_ChargeItemDefinition->modifierExtension_count);
		for(int i = 0; i < result_ChargeItemDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ChargeItemDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(chargeItemDefinition, "url");
	if(cjson_url)
	{
		result_ChargeItemDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(chargeItemDefinition, "identifier");
	if(cjson_identifier)
	{
		result_ChargeItemDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ChargeItemDefinition->identifier = PushArray(arena, Identifier, result_ChargeItemDefinition->identifier_count);
		for(int i = 0; i < result_ChargeItemDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ChargeItemDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(chargeItemDefinition, "version");
	if(cjson_version)
	{
		result_ChargeItemDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(chargeItemDefinition, "title");
	if(cjson_title)
	{
		result_ChargeItemDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_derivedFromUri =  cJSON_GetObjectItem(chargeItemDefinition, "derivedFromUri");
	if(cjson_derivedFromUri)
	{
		result_ChargeItemDefinition->derivedFromUri_count = cJSON_GetArraySize(cjson_derivedFromUri);
		result_ChargeItemDefinition->derivedFromUri = PushArray(arena, fhir_uri, result_ChargeItemDefinition->derivedFromUri_count);
		for(int i = 0; i < result_ChargeItemDefinition->derivedFromUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_derivedFromUri, i);
			result_ChargeItemDefinition->derivedFromUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(chargeItemDefinition, "partOf");
	if(cjson_partOf)
	{
		result_ChargeItemDefinition->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_ChargeItemDefinition->partOf = PushArray(arena, fhir_canonical, result_ChargeItemDefinition->partOf_count);
		for(int i = 0; i < result_ChargeItemDefinition->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_ChargeItemDefinition->partOf[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_replaces =  cJSON_GetObjectItem(chargeItemDefinition, "replaces");
	if(cjson_replaces)
	{
		result_ChargeItemDefinition->replaces_count = cJSON_GetArraySize(cjson_replaces);
		result_ChargeItemDefinition->replaces = PushArray(arena, fhir_canonical, result_ChargeItemDefinition->replaces_count);
		for(int i = 0; i < result_ChargeItemDefinition->replaces_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_replaces, i);
			result_ChargeItemDefinition->replaces[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(chargeItemDefinition, "status");
	if(cjson_status)
	{
		result_ChargeItemDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(chargeItemDefinition, "experimental");
	if(cjson_experimental)
	{
		result_ChargeItemDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(chargeItemDefinition, "date");
	if(cjson_date)
	{
		result_ChargeItemDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(chargeItemDefinition, "publisher");
	if(cjson_publisher)
	{
		result_ChargeItemDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(chargeItemDefinition, "contact");
	if(cjson_contact)
	{
		result_ChargeItemDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ChargeItemDefinition->contact = PushArray(arena, ContactDetail, result_ChargeItemDefinition->contact_count);
		for(int i = 0; i < result_ChargeItemDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ChargeItemDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(chargeItemDefinition, "description");
	if(cjson_description)
	{
		result_ChargeItemDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(chargeItemDefinition, "useContext");
	if(cjson_useContext)
	{
		result_ChargeItemDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ChargeItemDefinition->useContext = PushArray(arena, UsageContext, result_ChargeItemDefinition->useContext_count);
		for(int i = 0; i < result_ChargeItemDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ChargeItemDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(chargeItemDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ChargeItemDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ChargeItemDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_ChargeItemDefinition->jurisdiction_count);
		for(int i = 0; i < result_ChargeItemDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ChargeItemDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(chargeItemDefinition, "copyright");
	if(cjson_copyright)
	{
		result_ChargeItemDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(chargeItemDefinition, "approvalDate");
	if(cjson_approvalDate)
	{
		result_ChargeItemDefinition->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(chargeItemDefinition, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_ChargeItemDefinition->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(chargeItemDefinition, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_ChargeItemDefinition->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(chargeItemDefinition, "code");
	if(cjson_code)
	{
		result_ChargeItemDefinition->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_instance =  cJSON_GetObjectItem(chargeItemDefinition, "instance");
	if(cjson_instance)
	{
		result_ChargeItemDefinition->instance_count = cJSON_GetArraySize(cjson_instance);
		result_ChargeItemDefinition->instance = PushArray(arena, Reference, result_ChargeItemDefinition->instance_count);
		for(int i = 0; i < result_ChargeItemDefinition->instance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instance, i);
			result_ChargeItemDefinition->instance[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_applicability =  cJSON_GetObjectItem(chargeItemDefinition, "applicability");
	if(cjson_applicability)
	{
		result_ChargeItemDefinition->applicability_count = cJSON_GetArraySize(cjson_applicability);
		result_ChargeItemDefinition->applicability = PushArray(arena, ChargeItemDefinition_Applicability, result_ChargeItemDefinition->applicability_count);
		for(int i = 0; i < result_ChargeItemDefinition->applicability_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_applicability, i);
			result_ChargeItemDefinition->applicability[i] = *Deserialize_ChargeItemDefinition_Applicability(arena, internal);
		}

	}
	cJSON *cjson_propertyGroup =  cJSON_GetObjectItem(chargeItemDefinition, "propertyGroup");
	if(cjson_propertyGroup)
	{
		result_ChargeItemDefinition->propertyGroup_count = cJSON_GetArraySize(cjson_propertyGroup);
		result_ChargeItemDefinition->propertyGroup = PushArray(arena, ChargeItemDefinition_PropertyGroup, result_ChargeItemDefinition->propertyGroup_count);
		for(int i = 0; i < result_ChargeItemDefinition->propertyGroup_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_propertyGroup, i);
			result_ChargeItemDefinition->propertyGroup[i] = *Deserialize_ChargeItemDefinition_PropertyGroup(arena, internal);
		}

	}
	return result_ChargeItemDefinition;
}

ChargeItemDefinition_Applicability*
Deserialize_ChargeItemDefinition_Applicability(Arena *arena, cJSON *chargeItemDefinition_Applicability)
{
	ChargeItemDefinition_Applicability *result_ChargeItemDefinition_Applicability = PushArray(arena, ChargeItemDefinition_Applicability, 1);
	result_ChargeItemDefinition_Applicability->resourceType = ResourceType::ChargeItemDefinition_Applicability;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(chargeItemDefinition_Applicability, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(chargeItemDefinition_Applicability, "id");
	if(cjson_id)
	{
		result_ChargeItemDefinition_Applicability->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(chargeItemDefinition_Applicability, "extension");
	if(cjson_extension)
	{
		result_ChargeItemDefinition_Applicability->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ChargeItemDefinition_Applicability->extension = PushArray(arena, Extension, result_ChargeItemDefinition_Applicability->extension_count);
		for(int i = 0; i < result_ChargeItemDefinition_Applicability->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ChargeItemDefinition_Applicability->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(chargeItemDefinition_Applicability, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ChargeItemDefinition_Applicability->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ChargeItemDefinition_Applicability->modifierExtension = PushArray(arena, Extension, result_ChargeItemDefinition_Applicability->modifierExtension_count);
		for(int i = 0; i < result_ChargeItemDefinition_Applicability->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ChargeItemDefinition_Applicability->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(chargeItemDefinition_Applicability, "description");
	if(cjson_description)
	{
		result_ChargeItemDefinition_Applicability->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(chargeItemDefinition_Applicability, "language");
	if(cjson_language)
	{
		result_ChargeItemDefinition_Applicability->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(chargeItemDefinition_Applicability, "expression");
	if(cjson_expression)
	{
		result_ChargeItemDefinition_Applicability->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	return result_ChargeItemDefinition_Applicability;
}

ChargeItemDefinition_PropertyGroup*
Deserialize_ChargeItemDefinition_PropertyGroup(Arena *arena, cJSON *chargeItemDefinition_PropertyGroup)
{
	ChargeItemDefinition_PropertyGroup *result_ChargeItemDefinition_PropertyGroup = PushArray(arena, ChargeItemDefinition_PropertyGroup, 1);
	result_ChargeItemDefinition_PropertyGroup->resourceType = ResourceType::ChargeItemDefinition_PropertyGroup;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup, "id");
	if(cjson_id)
	{
		result_ChargeItemDefinition_PropertyGroup->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup, "extension");
	if(cjson_extension)
	{
		result_ChargeItemDefinition_PropertyGroup->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ChargeItemDefinition_PropertyGroup->extension = PushArray(arena, Extension, result_ChargeItemDefinition_PropertyGroup->extension_count);
		for(int i = 0; i < result_ChargeItemDefinition_PropertyGroup->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ChargeItemDefinition_PropertyGroup->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ChargeItemDefinition_PropertyGroup->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ChargeItemDefinition_PropertyGroup->modifierExtension = PushArray(arena, Extension, result_ChargeItemDefinition_PropertyGroup->modifierExtension_count);
		for(int i = 0; i < result_ChargeItemDefinition_PropertyGroup->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ChargeItemDefinition_PropertyGroup->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_applicability =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup, "applicability");
	if(cjson_applicability)
	{
		result_ChargeItemDefinition_PropertyGroup->applicability_count = cJSON_GetArraySize(cjson_applicability);
		result_ChargeItemDefinition_PropertyGroup->applicability = PushArray(arena, ChargeItemDefinition_Applicability, result_ChargeItemDefinition_PropertyGroup->applicability_count);
		for(int i = 0; i < result_ChargeItemDefinition_PropertyGroup->applicability_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_applicability, i);
			result_ChargeItemDefinition_PropertyGroup->applicability[i] = *Deserialize_ChargeItemDefinition_Applicability(arena, internal);
		}

	}
	cJSON *cjson_priceComponent =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup, "priceComponent");
	if(cjson_priceComponent)
	{
		result_ChargeItemDefinition_PropertyGroup->priceComponent_count = cJSON_GetArraySize(cjson_priceComponent);
		result_ChargeItemDefinition_PropertyGroup->priceComponent = PushArray(arena, ChargeItemDefinition_PropertyGroup_PriceComponent, result_ChargeItemDefinition_PropertyGroup->priceComponent_count);
		for(int i = 0; i < result_ChargeItemDefinition_PropertyGroup->priceComponent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_priceComponent, i);
			result_ChargeItemDefinition_PropertyGroup->priceComponent[i] = *Deserialize_ChargeItemDefinition_PropertyGroup_PriceComponent(arena, internal);
		}

	}
	return result_ChargeItemDefinition_PropertyGroup;
}

ChargeItemDefinition_PropertyGroup_PriceComponent*
Deserialize_ChargeItemDefinition_PropertyGroup_PriceComponent(Arena *arena, cJSON *chargeItemDefinition_PropertyGroup_PriceComponent)
{
	ChargeItemDefinition_PropertyGroup_PriceComponent *result_ChargeItemDefinition_PropertyGroup_PriceComponent = PushArray(arena, ChargeItemDefinition_PropertyGroup_PriceComponent, 1);
	result_ChargeItemDefinition_PropertyGroup_PriceComponent->resourceType = ResourceType::ChargeItemDefinition_PropertyGroup_PriceComponent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "id");
	if(cjson_id)
	{
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "extension");
	if(cjson_extension)
	{
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->extension = PushArray(arena, Extension, result_ChargeItemDefinition_PropertyGroup_PriceComponent->extension_count);
		for(int i = 0; i < result_ChargeItemDefinition_PropertyGroup_PriceComponent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ChargeItemDefinition_PropertyGroup_PriceComponent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension = PushArray(arena, Extension, result_ChargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension_count);
		for(int i = 0; i < result_ChargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ChargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "type");
	if(cjson_type)
	{
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "code");
	if(cjson_code)
	{
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "factor");
	if(cjson_factor)
	{
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(chargeItemDefinition_PropertyGroup_PriceComponent, "amount");
	if(cjson_amount)
	{
		result_ChargeItemDefinition_PropertyGroup_PriceComponent->amount = Deserialize_Money(arena, cjson_amount);
	}
	return result_ChargeItemDefinition_PropertyGroup_PriceComponent;
}

Claim*
Deserialize_Claim(Arena *arena, cJSON *claim)
{
	Claim *result_Claim = PushArray(arena, Claim, 1);
	result_Claim->resourceType = ResourceType::Claim;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim, "id");
	if(cjson_id)
	{
		result_Claim->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(claim, "meta");
	if(cjson_meta)
	{
		result_Claim->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(claim, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Claim->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(claim, "language");
	if(cjson_language)
	{
		result_Claim->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(claim, "text");
	if(cjson_text)
	{
		result_Claim->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(claim, "contained");
	if(cjson_contained)
	{
		result_Claim->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Claim->contained = PushArray(arena, Resource, result_Claim->contained_count);
		for(int i = 0; i < result_Claim->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Claim->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim, "extension");
	if(cjson_extension)
	{
		result_Claim->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim->extension = PushArray(arena, Extension, result_Claim->extension_count);
		for(int i = 0; i < result_Claim->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim->modifierExtension = PushArray(arena, Extension, result_Claim->modifierExtension_count);
		for(int i = 0; i < result_Claim->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(claim, "identifier");
	if(cjson_identifier)
	{
		result_Claim->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Claim->identifier = PushArray(arena, Identifier, result_Claim->identifier_count);
		for(int i = 0; i < result_Claim->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Claim->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(claim, "status");
	if(cjson_status)
	{
		result_Claim->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(claim, "type");
	if(cjson_type)
	{
		result_Claim->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subType =  cJSON_GetObjectItem(claim, "subType");
	if(cjson_subType)
	{
		result_Claim->subType = Deserialize_CodeableConcept(arena, cjson_subType);
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(claim, "use");
	if(cjson_use)
	{
		result_Claim->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(claim, "patient");
	if(cjson_patient)
	{
		result_Claim->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_billablePeriod =  cJSON_GetObjectItem(claim, "billablePeriod");
	if(cjson_billablePeriod)
	{
		result_Claim->billablePeriod = Deserialize_Period(arena, cjson_billablePeriod);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(claim, "created");
	if(cjson_created)
	{
		result_Claim->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_enterer =  cJSON_GetObjectItem(claim, "enterer");
	if(cjson_enterer)
	{
		result_Claim->enterer = Deserialize_Reference(arena, cjson_enterer);
	}
	cJSON *cjson_insurer =  cJSON_GetObjectItem(claim, "insurer");
	if(cjson_insurer)
	{
		result_Claim->insurer = Deserialize_Reference(arena, cjson_insurer);
	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(claim, "provider");
	if(cjson_provider)
	{
		result_Claim->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(claim, "priority");
	if(cjson_priority)
	{
		result_Claim->priority = Deserialize_CodeableConcept(arena, cjson_priority);
	}
	cJSON *cjson_fundsReserve =  cJSON_GetObjectItem(claim, "fundsReserve");
	if(cjson_fundsReserve)
	{
		result_Claim->fundsReserve = Deserialize_CodeableConcept(arena, cjson_fundsReserve);
	}
	cJSON *cjson_related =  cJSON_GetObjectItem(claim, "related");
	if(cjson_related)
	{
		result_Claim->related_count = cJSON_GetArraySize(cjson_related);
		result_Claim->related = PushArray(arena, Claim_Related, result_Claim->related_count);
		for(int i = 0; i < result_Claim->related_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_related, i);
			result_Claim->related[i] = *Deserialize_Claim_Related(arena, internal);
		}

	}
	cJSON *cjson_prescription =  cJSON_GetObjectItem(claim, "prescription");
	if(cjson_prescription)
	{
		result_Claim->prescription = Deserialize_Reference(arena, cjson_prescription);
	}
	cJSON *cjson_originalPrescription =  cJSON_GetObjectItem(claim, "originalPrescription");
	if(cjson_originalPrescription)
	{
		result_Claim->originalPrescription = Deserialize_Reference(arena, cjson_originalPrescription);
	}
	cJSON *cjson_payee =  cJSON_GetObjectItem(claim, "payee");
	if(cjson_payee)
	{
		result_Claim->payee = Deserialize_Claim_Payee(arena, cjson_payee);
	}
	cJSON *cjson_referral =  cJSON_GetObjectItem(claim, "referral");
	if(cjson_referral)
	{
		result_Claim->referral = Deserialize_Reference(arena, cjson_referral);
	}
	cJSON *cjson_facility =  cJSON_GetObjectItem(claim, "facility");
	if(cjson_facility)
	{
		result_Claim->facility = Deserialize_Reference(arena, cjson_facility);
	}
	cJSON *cjson_careTeam =  cJSON_GetObjectItem(claim, "careTeam");
	if(cjson_careTeam)
	{
		result_Claim->careTeam_count = cJSON_GetArraySize(cjson_careTeam);
		result_Claim->careTeam = PushArray(arena, Claim_CareTeam, result_Claim->careTeam_count);
		for(int i = 0; i < result_Claim->careTeam_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_careTeam, i);
			result_Claim->careTeam[i] = *Deserialize_Claim_CareTeam(arena, internal);
		}

	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(claim, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_Claim->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_Claim->supportingInfo = PushArray(arena, Claim_SupportingInfo, result_Claim->supportingInfo_count);
		for(int i = 0; i < result_Claim->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_Claim->supportingInfo[i] = *Deserialize_Claim_SupportingInfo(arena, internal);
		}

	}
	cJSON *cjson_diagnosis =  cJSON_GetObjectItem(claim, "diagnosis");
	if(cjson_diagnosis)
	{
		result_Claim->diagnosis_count = cJSON_GetArraySize(cjson_diagnosis);
		result_Claim->diagnosis = PushArray(arena, Claim_Diagnosis, result_Claim->diagnosis_count);
		for(int i = 0; i < result_Claim->diagnosis_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_diagnosis, i);
			result_Claim->diagnosis[i] = *Deserialize_Claim_Diagnosis(arena, internal);
		}

	}
	cJSON *cjson_procedure =  cJSON_GetObjectItem(claim, "procedure");
	if(cjson_procedure)
	{
		result_Claim->procedure_count = cJSON_GetArraySize(cjson_procedure);
		result_Claim->procedure = PushArray(arena, Claim_Procedure, result_Claim->procedure_count);
		for(int i = 0; i < result_Claim->procedure_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_procedure, i);
			result_Claim->procedure[i] = *Deserialize_Claim_Procedure(arena, internal);
		}

	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(claim, "insurance");
	if(cjson_insurance)
	{
		result_Claim->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_Claim->insurance = PushArray(arena, Claim_Insurance, result_Claim->insurance_count);
		for(int i = 0; i < result_Claim->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_Claim->insurance[i] = *Deserialize_Claim_Insurance(arena, internal);
		}

	}
	cJSON *cjson_accident =  cJSON_GetObjectItem(claim, "accident");
	if(cjson_accident)
	{
		result_Claim->accident = Deserialize_Claim_Accident(arena, cjson_accident);
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(claim, "item");
	if(cjson_item)
	{
		result_Claim->item_count = cJSON_GetArraySize(cjson_item);
		result_Claim->item = PushArray(arena, Claim_Item, result_Claim->item_count);
		for(int i = 0; i < result_Claim->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_Claim->item[i] = *Deserialize_Claim_Item(arena, internal);
		}

	}
	cJSON *cjson_total =  cJSON_GetObjectItem(claim, "total");
	if(cjson_total)
	{
		result_Claim->total = Deserialize_Money(arena, cjson_total);
	}
	return result_Claim;
}

Claim_Related*
Deserialize_Claim_Related(Arena *arena, cJSON *claim_Related)
{
	Claim_Related *result_Claim_Related = PushArray(arena, Claim_Related, 1);
	result_Claim_Related->resourceType = ResourceType::Claim_Related;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Related, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Related, "id");
	if(cjson_id)
	{
		result_Claim_Related->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Related, "extension");
	if(cjson_extension)
	{
		result_Claim_Related->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Related->extension = PushArray(arena, Extension, result_Claim_Related->extension_count);
		for(int i = 0; i < result_Claim_Related->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Related->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Related, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Related->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Related->modifierExtension = PushArray(arena, Extension, result_Claim_Related->modifierExtension_count);
		for(int i = 0; i < result_Claim_Related->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Related->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_claim =  cJSON_GetObjectItem(claim_Related, "claim");
	if(cjson_claim)
	{
		result_Claim_Related->claim = Deserialize_Reference(arena, cjson_claim);
	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(claim_Related, "relationship");
	if(cjson_relationship)
	{
		result_Claim_Related->relationship = Deserialize_CodeableConcept(arena, cjson_relationship);
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(claim_Related, "reference");
	if(cjson_reference)
	{
		result_Claim_Related->reference = Deserialize_Identifier(arena, cjson_reference);
	}
	return result_Claim_Related;
}

Claim_Payee*
Deserialize_Claim_Payee(Arena *arena, cJSON *claim_Payee)
{
	Claim_Payee *result_Claim_Payee = PushArray(arena, Claim_Payee, 1);
	result_Claim_Payee->resourceType = ResourceType::Claim_Payee;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Payee, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Payee, "id");
	if(cjson_id)
	{
		result_Claim_Payee->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Payee, "extension");
	if(cjson_extension)
	{
		result_Claim_Payee->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Payee->extension = PushArray(arena, Extension, result_Claim_Payee->extension_count);
		for(int i = 0; i < result_Claim_Payee->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Payee->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Payee, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Payee->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Payee->modifierExtension = PushArray(arena, Extension, result_Claim_Payee->modifierExtension_count);
		for(int i = 0; i < result_Claim_Payee->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Payee->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(claim_Payee, "type");
	if(cjson_type)
	{
		result_Claim_Payee->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_party =  cJSON_GetObjectItem(claim_Payee, "party");
	if(cjson_party)
	{
		result_Claim_Payee->party = Deserialize_Reference(arena, cjson_party);
	}
	return result_Claim_Payee;
}

Claim_CareTeam*
Deserialize_Claim_CareTeam(Arena *arena, cJSON *claim_CareTeam)
{
	Claim_CareTeam *result_Claim_CareTeam = PushArray(arena, Claim_CareTeam, 1);
	result_Claim_CareTeam->resourceType = ResourceType::Claim_CareTeam;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_CareTeam, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_CareTeam, "id");
	if(cjson_id)
	{
		result_Claim_CareTeam->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_CareTeam, "extension");
	if(cjson_extension)
	{
		result_Claim_CareTeam->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_CareTeam->extension = PushArray(arena, Extension, result_Claim_CareTeam->extension_count);
		for(int i = 0; i < result_Claim_CareTeam->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_CareTeam->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_CareTeam, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_CareTeam->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_CareTeam->modifierExtension = PushArray(arena, Extension, result_Claim_CareTeam->modifierExtension_count);
		for(int i = 0; i < result_Claim_CareTeam->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_CareTeam->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_CareTeam, "sequence");
	if(cjson_sequence)
	{
		result_Claim_CareTeam->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(claim_CareTeam, "provider");
	if(cjson_provider)
	{
		result_Claim_CareTeam->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_responsible =  cJSON_GetObjectItem(claim_CareTeam, "responsible");
	if(cjson_responsible)
	{
		result_Claim_CareTeam->responsible = (boolean)cJSON_IsTrue(cjson_responsible);
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(claim_CareTeam, "role");
	if(cjson_role)
	{
		result_Claim_CareTeam->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	cJSON *cjson_qualification =  cJSON_GetObjectItem(claim_CareTeam, "qualification");
	if(cjson_qualification)
	{
		result_Claim_CareTeam->qualification = Deserialize_CodeableConcept(arena, cjson_qualification);
	}
	return result_Claim_CareTeam;
}

Claim_SupportingInfo*
Deserialize_Claim_SupportingInfo(Arena *arena, cJSON *claim_SupportingInfo)
{
	Claim_SupportingInfo *result_Claim_SupportingInfo = PushArray(arena, Claim_SupportingInfo, 1);
	result_Claim_SupportingInfo->resourceType = ResourceType::Claim_SupportingInfo;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_SupportingInfo, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_SupportingInfo, "id");
	if(cjson_id)
	{
		result_Claim_SupportingInfo->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_SupportingInfo, "extension");
	if(cjson_extension)
	{
		result_Claim_SupportingInfo->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_SupportingInfo->extension = PushArray(arena, Extension, result_Claim_SupportingInfo->extension_count);
		for(int i = 0; i < result_Claim_SupportingInfo->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_SupportingInfo->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_SupportingInfo, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_SupportingInfo->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_SupportingInfo->modifierExtension = PushArray(arena, Extension, result_Claim_SupportingInfo->modifierExtension_count);
		for(int i = 0; i < result_Claim_SupportingInfo->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_SupportingInfo->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_SupportingInfo, "sequence");
	if(cjson_sequence)
	{
		result_Claim_SupportingInfo->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(claim_SupportingInfo, "category");
	if(cjson_category)
	{
		result_Claim_SupportingInfo->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(claim_SupportingInfo, "code");
	if(cjson_code)
	{
		result_Claim_SupportingInfo->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	if((bool)cJSON_HasObjectItem(claim_SupportingInfo, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_SupportingInfo, "valueDate");
		result_Claim_SupportingInfo->timing.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Claim_SupportingInfo->timing_type = Claim_SupportingInfo::TimingType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(claim_SupportingInfo, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_SupportingInfo, "valuePeriod");
		result_Claim_SupportingInfo->timing.valuePeriod = Deserialize_Period(arena, item);
		result_Claim_SupportingInfo->timing_type = Claim_SupportingInfo::TimingType::Period;
	}


	if((bool)cJSON_HasObjectItem(claim_SupportingInfo, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_SupportingInfo, "valueBoolean");
		result_Claim_SupportingInfo->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Claim_SupportingInfo->value_type = Claim_SupportingInfo::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(claim_SupportingInfo, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_SupportingInfo, "valueString");
		result_Claim_SupportingInfo->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Claim_SupportingInfo->value_type = Claim_SupportingInfo::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(claim_SupportingInfo, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_SupportingInfo, "valueQuantity");
		result_Claim_SupportingInfo->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Claim_SupportingInfo->value_type = Claim_SupportingInfo::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(claim_SupportingInfo, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_SupportingInfo, "valueAttachment");
		result_Claim_SupportingInfo->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_Claim_SupportingInfo->value_type = Claim_SupportingInfo::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(claim_SupportingInfo, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_SupportingInfo, "valueReference");
		result_Claim_SupportingInfo->value.valueReference = Deserialize_Reference(arena, item);
		result_Claim_SupportingInfo->value_type = Claim_SupportingInfo::ValueType::Reference;
	}


	cJSON *cjson_reason =  cJSON_GetObjectItem(claim_SupportingInfo, "reason");
	if(cjson_reason)
	{
		result_Claim_SupportingInfo->reason = Deserialize_CodeableConcept(arena, cjson_reason);
	}
	return result_Claim_SupportingInfo;
}

Claim_Diagnosis*
Deserialize_Claim_Diagnosis(Arena *arena, cJSON *claim_Diagnosis)
{
	Claim_Diagnosis *result_Claim_Diagnosis = PushArray(arena, Claim_Diagnosis, 1);
	result_Claim_Diagnosis->resourceType = ResourceType::Claim_Diagnosis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Diagnosis, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Diagnosis, "id");
	if(cjson_id)
	{
		result_Claim_Diagnosis->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Diagnosis, "extension");
	if(cjson_extension)
	{
		result_Claim_Diagnosis->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Diagnosis->extension = PushArray(arena, Extension, result_Claim_Diagnosis->extension_count);
		for(int i = 0; i < result_Claim_Diagnosis->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Diagnosis->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Diagnosis, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Diagnosis->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Diagnosis->modifierExtension = PushArray(arena, Extension, result_Claim_Diagnosis->modifierExtension_count);
		for(int i = 0; i < result_Claim_Diagnosis->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Diagnosis->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_Diagnosis, "sequence");
	if(cjson_sequence)
	{
		result_Claim_Diagnosis->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	if((bool)cJSON_HasObjectItem(claim_Diagnosis, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Diagnosis, "valueCodeableConcept");
		result_Claim_Diagnosis->diagnosis.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Claim_Diagnosis->diagnosis_type = Claim_Diagnosis::DiagnosisType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(claim_Diagnosis, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Diagnosis, "valueReference");
		result_Claim_Diagnosis->diagnosis.valueReference = Deserialize_Reference(arena, item);
		result_Claim_Diagnosis->diagnosis_type = Claim_Diagnosis::DiagnosisType::Reference;
	}


	cJSON *cjson_type =  cJSON_GetObjectItem(claim_Diagnosis, "type");
	if(cjson_type)
	{
		result_Claim_Diagnosis->type_count = cJSON_GetArraySize(cjson_type);
		result_Claim_Diagnosis->type = PushArray(arena, CodeableConcept, result_Claim_Diagnosis->type_count);
		for(int i = 0; i < result_Claim_Diagnosis->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Claim_Diagnosis->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_onAdmission =  cJSON_GetObjectItem(claim_Diagnosis, "onAdmission");
	if(cjson_onAdmission)
	{
		result_Claim_Diagnosis->onAdmission = Deserialize_CodeableConcept(arena, cjson_onAdmission);
	}
	cJSON *cjson_packageCode =  cJSON_GetObjectItem(claim_Diagnosis, "packageCode");
	if(cjson_packageCode)
	{
		result_Claim_Diagnosis->packageCode = Deserialize_CodeableConcept(arena, cjson_packageCode);
	}
	return result_Claim_Diagnosis;
}

Claim_Procedure*
Deserialize_Claim_Procedure(Arena *arena, cJSON *claim_Procedure)
{
	Claim_Procedure *result_Claim_Procedure = PushArray(arena, Claim_Procedure, 1);
	result_Claim_Procedure->resourceType = ResourceType::Claim_Procedure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Procedure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Procedure, "id");
	if(cjson_id)
	{
		result_Claim_Procedure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Procedure, "extension");
	if(cjson_extension)
	{
		result_Claim_Procedure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Procedure->extension = PushArray(arena, Extension, result_Claim_Procedure->extension_count);
		for(int i = 0; i < result_Claim_Procedure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Procedure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Procedure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Procedure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Procedure->modifierExtension = PushArray(arena, Extension, result_Claim_Procedure->modifierExtension_count);
		for(int i = 0; i < result_Claim_Procedure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Procedure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_Procedure, "sequence");
	if(cjson_sequence)
	{
		result_Claim_Procedure->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(claim_Procedure, "type");
	if(cjson_type)
	{
		result_Claim_Procedure->type_count = cJSON_GetArraySize(cjson_type);
		result_Claim_Procedure->type = PushArray(arena, CodeableConcept, result_Claim_Procedure->type_count);
		for(int i = 0; i < result_Claim_Procedure->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Claim_Procedure->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_date =  cJSON_GetObjectItem(claim_Procedure, "date");
	if(cjson_date)
	{
		result_Claim_Procedure->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	if((bool)cJSON_HasObjectItem(claim_Procedure, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Procedure, "valueCodeableConcept");
		result_Claim_Procedure->procedure.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Claim_Procedure->procedure_type = Claim_Procedure::ProcedureType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(claim_Procedure, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Procedure, "valueReference");
		result_Claim_Procedure->procedure.valueReference = Deserialize_Reference(arena, item);
		result_Claim_Procedure->procedure_type = Claim_Procedure::ProcedureType::Reference;
	}


	cJSON *cjson_udi =  cJSON_GetObjectItem(claim_Procedure, "udi");
	if(cjson_udi)
	{
		result_Claim_Procedure->udi_count = cJSON_GetArraySize(cjson_udi);
		result_Claim_Procedure->udi = PushArray(arena, Reference, result_Claim_Procedure->udi_count);
		for(int i = 0; i < result_Claim_Procedure->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_Claim_Procedure->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Claim_Procedure;
}

Claim_Insurance*
Deserialize_Claim_Insurance(Arena *arena, cJSON *claim_Insurance)
{
	Claim_Insurance *result_Claim_Insurance = PushArray(arena, Claim_Insurance, 1);
	result_Claim_Insurance->resourceType = ResourceType::Claim_Insurance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Insurance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Insurance, "id");
	if(cjson_id)
	{
		result_Claim_Insurance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Insurance, "extension");
	if(cjson_extension)
	{
		result_Claim_Insurance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Insurance->extension = PushArray(arena, Extension, result_Claim_Insurance->extension_count);
		for(int i = 0; i < result_Claim_Insurance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Insurance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Insurance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Insurance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Insurance->modifierExtension = PushArray(arena, Extension, result_Claim_Insurance->modifierExtension_count);
		for(int i = 0; i < result_Claim_Insurance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Insurance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_Insurance, "sequence");
	if(cjson_sequence)
	{
		result_Claim_Insurance->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_focal =  cJSON_GetObjectItem(claim_Insurance, "focal");
	if(cjson_focal)
	{
		result_Claim_Insurance->focal = (boolean)cJSON_IsTrue(cjson_focal);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(claim_Insurance, "identifier");
	if(cjson_identifier)
	{
		result_Claim_Insurance->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(claim_Insurance, "coverage");
	if(cjson_coverage)
	{
		result_Claim_Insurance->coverage = Deserialize_Reference(arena, cjson_coverage);
	}
	cJSON *cjson_businessArrangement =  cJSON_GetObjectItem(claim_Insurance, "businessArrangement");
	if(cjson_businessArrangement)
	{
		result_Claim_Insurance->businessArrangement = Str8C(cJSON_GetStringValue(cjson_businessArrangement));
	}
	cJSON *cjson_preAuthRef =  cJSON_GetObjectItem(claim_Insurance, "preAuthRef");
	if(cjson_preAuthRef)
	{
		result_Claim_Insurance->preAuthRef_count = cJSON_GetArraySize(cjson_preAuthRef);
		result_Claim_Insurance->preAuthRef = PushArray(arena, fhir_string, result_Claim_Insurance->preAuthRef_count);
		for(int i = 0; i < result_Claim_Insurance->preAuthRef_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_preAuthRef, i);
			result_Claim_Insurance->preAuthRef[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_claimResponse =  cJSON_GetObjectItem(claim_Insurance, "claimResponse");
	if(cjson_claimResponse)
	{
		result_Claim_Insurance->claimResponse = Deserialize_Reference(arena, cjson_claimResponse);
	}
	return result_Claim_Insurance;
}

Claim_Accident*
Deserialize_Claim_Accident(Arena *arena, cJSON *claim_Accident)
{
	Claim_Accident *result_Claim_Accident = PushArray(arena, Claim_Accident, 1);
	result_Claim_Accident->resourceType = ResourceType::Claim_Accident;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Accident, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Accident, "id");
	if(cjson_id)
	{
		result_Claim_Accident->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Accident, "extension");
	if(cjson_extension)
	{
		result_Claim_Accident->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Accident->extension = PushArray(arena, Extension, result_Claim_Accident->extension_count);
		for(int i = 0; i < result_Claim_Accident->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Accident->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Accident, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Accident->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Accident->modifierExtension = PushArray(arena, Extension, result_Claim_Accident->modifierExtension_count);
		for(int i = 0; i < result_Claim_Accident->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Accident->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_date =  cJSON_GetObjectItem(claim_Accident, "date");
	if(cjson_date)
	{
		result_Claim_Accident->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(claim_Accident, "type");
	if(cjson_type)
	{
		result_Claim_Accident->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(claim_Accident, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Accident, "valueAddress");
		result_Claim_Accident->location.valueAddress = Deserialize_Address(arena, item);
		result_Claim_Accident->location_type = Claim_Accident::LocationType::Address;
	}
	else if((bool)cJSON_HasObjectItem(claim_Accident, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Accident, "valueReference");
		result_Claim_Accident->location.valueReference = Deserialize_Reference(arena, item);
		result_Claim_Accident->location_type = Claim_Accident::LocationType::Reference;
	}


	return result_Claim_Accident;
}

Claim_Item*
Deserialize_Claim_Item(Arena *arena, cJSON *claim_Item)
{
	Claim_Item *result_Claim_Item = PushArray(arena, Claim_Item, 1);
	result_Claim_Item->resourceType = ResourceType::Claim_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Item, "id");
	if(cjson_id)
	{
		result_Claim_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Item, "extension");
	if(cjson_extension)
	{
		result_Claim_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Item->extension = PushArray(arena, Extension, result_Claim_Item->extension_count);
		for(int i = 0; i < result_Claim_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Item->modifierExtension = PushArray(arena, Extension, result_Claim_Item->modifierExtension_count);
		for(int i = 0; i < result_Claim_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_Item, "sequence");
	if(cjson_sequence)
	{
		result_Claim_Item->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_careTeamSequence =  cJSON_GetObjectItem(claim_Item, "careTeamSequence");
	if(cjson_careTeamSequence)
	{
		result_Claim_Item->careTeamSequence_count = cJSON_GetArraySize(cjson_careTeamSequence);
		result_Claim_Item->careTeamSequence = PushArray(arena, fhir_positiveInt, result_Claim_Item->careTeamSequence_count);
		for(int i = 0; i < result_Claim_Item->careTeamSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_careTeamSequence, i);
			result_Claim_Item->careTeamSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_diagnosisSequence =  cJSON_GetObjectItem(claim_Item, "diagnosisSequence");
	if(cjson_diagnosisSequence)
	{
		result_Claim_Item->diagnosisSequence_count = cJSON_GetArraySize(cjson_diagnosisSequence);
		result_Claim_Item->diagnosisSequence = PushArray(arena, fhir_positiveInt, result_Claim_Item->diagnosisSequence_count);
		for(int i = 0; i < result_Claim_Item->diagnosisSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_diagnosisSequence, i);
			result_Claim_Item->diagnosisSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_procedureSequence =  cJSON_GetObjectItem(claim_Item, "procedureSequence");
	if(cjson_procedureSequence)
	{
		result_Claim_Item->procedureSequence_count = cJSON_GetArraySize(cjson_procedureSequence);
		result_Claim_Item->procedureSequence = PushArray(arena, fhir_positiveInt, result_Claim_Item->procedureSequence_count);
		for(int i = 0; i < result_Claim_Item->procedureSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_procedureSequence, i);
			result_Claim_Item->procedureSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_informationSequence =  cJSON_GetObjectItem(claim_Item, "informationSequence");
	if(cjson_informationSequence)
	{
		result_Claim_Item->informationSequence_count = cJSON_GetArraySize(cjson_informationSequence);
		result_Claim_Item->informationSequence = PushArray(arena, fhir_positiveInt, result_Claim_Item->informationSequence_count);
		for(int i = 0; i < result_Claim_Item->informationSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_informationSequence, i);
			result_Claim_Item->informationSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_revenue =  cJSON_GetObjectItem(claim_Item, "revenue");
	if(cjson_revenue)
	{
		result_Claim_Item->revenue = Deserialize_CodeableConcept(arena, cjson_revenue);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(claim_Item, "category");
	if(cjson_category)
	{
		result_Claim_Item->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(claim_Item, "productOrService");
	if(cjson_productOrService)
	{
		result_Claim_Item->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(claim_Item, "modifier");
	if(cjson_modifier)
	{
		result_Claim_Item->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_Claim_Item->modifier = PushArray(arena, CodeableConcept, result_Claim_Item->modifier_count);
		for(int i = 0; i < result_Claim_Item->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_Claim_Item->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(claim_Item, "programCode");
	if(cjson_programCode)
	{
		result_Claim_Item->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_Claim_Item->programCode = PushArray(arena, CodeableConcept, result_Claim_Item->programCode_count);
		for(int i = 0; i < result_Claim_Item->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_Claim_Item->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(claim_Item, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Item, "valueDate");
		result_Claim_Item->serviced.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Claim_Item->serviced_type = Claim_Item::ServicedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(claim_Item, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Item, "valuePeriod");
		result_Claim_Item->serviced.valuePeriod = Deserialize_Period(arena, item);
		result_Claim_Item->serviced_type = Claim_Item::ServicedType::Period;
	}


	if((bool)cJSON_HasObjectItem(claim_Item, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Item, "valueCodeableConcept");
		result_Claim_Item->location.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Claim_Item->location_type = Claim_Item::LocationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(claim_Item, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Item, "valueAddress");
		result_Claim_Item->location.valueAddress = Deserialize_Address(arena, item);
		result_Claim_Item->location_type = Claim_Item::LocationType::Address;
	}
	else if((bool)cJSON_HasObjectItem(claim_Item, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(claim_Item, "valueReference");
		result_Claim_Item->location.valueReference = Deserialize_Reference(arena, item);
		result_Claim_Item->location_type = Claim_Item::LocationType::Reference;
	}


	cJSON *cjson_quantity =  cJSON_GetObjectItem(claim_Item, "quantity");
	if(cjson_quantity)
	{
		result_Claim_Item->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(claim_Item, "unitPrice");
	if(cjson_unitPrice)
	{
		result_Claim_Item->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(claim_Item, "factor");
	if(cjson_factor)
	{
		result_Claim_Item->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(claim_Item, "net");
	if(cjson_net)
	{
		result_Claim_Item->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_udi =  cJSON_GetObjectItem(claim_Item, "udi");
	if(cjson_udi)
	{
		result_Claim_Item->udi_count = cJSON_GetArraySize(cjson_udi);
		result_Claim_Item->udi = PushArray(arena, Reference, result_Claim_Item->udi_count);
		for(int i = 0; i < result_Claim_Item->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_Claim_Item->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(claim_Item, "bodySite");
	if(cjson_bodySite)
	{
		result_Claim_Item->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	cJSON *cjson_subSite =  cJSON_GetObjectItem(claim_Item, "subSite");
	if(cjson_subSite)
	{
		result_Claim_Item->subSite_count = cJSON_GetArraySize(cjson_subSite);
		result_Claim_Item->subSite = PushArray(arena, CodeableConcept, result_Claim_Item->subSite_count);
		for(int i = 0; i < result_Claim_Item->subSite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subSite, i);
			result_Claim_Item->subSite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(claim_Item, "encounter");
	if(cjson_encounter)
	{
		result_Claim_Item->encounter_count = cJSON_GetArraySize(cjson_encounter);
		result_Claim_Item->encounter = PushArray(arena, Reference, result_Claim_Item->encounter_count);
		for(int i = 0; i < result_Claim_Item->encounter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_encounter, i);
			result_Claim_Item->encounter[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(claim_Item, "detail");
	if(cjson_detail)
	{
		result_Claim_Item->detail_count = cJSON_GetArraySize(cjson_detail);
		result_Claim_Item->detail = PushArray(arena, Claim_Item_Detail, result_Claim_Item->detail_count);
		for(int i = 0; i < result_Claim_Item->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_Claim_Item->detail[i] = *Deserialize_Claim_Item_Detail(arena, internal);
		}

	}
	return result_Claim_Item;
}

Claim_Item_Detail*
Deserialize_Claim_Item_Detail(Arena *arena, cJSON *claim_Item_Detail)
{
	Claim_Item_Detail *result_Claim_Item_Detail = PushArray(arena, Claim_Item_Detail, 1);
	result_Claim_Item_Detail->resourceType = ResourceType::Claim_Item_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Item_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Item_Detail, "id");
	if(cjson_id)
	{
		result_Claim_Item_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Item_Detail, "extension");
	if(cjson_extension)
	{
		result_Claim_Item_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Item_Detail->extension = PushArray(arena, Extension, result_Claim_Item_Detail->extension_count);
		for(int i = 0; i < result_Claim_Item_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Item_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Item_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Item_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Item_Detail->modifierExtension = PushArray(arena, Extension, result_Claim_Item_Detail->modifierExtension_count);
		for(int i = 0; i < result_Claim_Item_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Item_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_Item_Detail, "sequence");
	if(cjson_sequence)
	{
		result_Claim_Item_Detail->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_revenue =  cJSON_GetObjectItem(claim_Item_Detail, "revenue");
	if(cjson_revenue)
	{
		result_Claim_Item_Detail->revenue = Deserialize_CodeableConcept(arena, cjson_revenue);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(claim_Item_Detail, "category");
	if(cjson_category)
	{
		result_Claim_Item_Detail->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(claim_Item_Detail, "productOrService");
	if(cjson_productOrService)
	{
		result_Claim_Item_Detail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(claim_Item_Detail, "modifier");
	if(cjson_modifier)
	{
		result_Claim_Item_Detail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_Claim_Item_Detail->modifier = PushArray(arena, CodeableConcept, result_Claim_Item_Detail->modifier_count);
		for(int i = 0; i < result_Claim_Item_Detail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_Claim_Item_Detail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(claim_Item_Detail, "programCode");
	if(cjson_programCode)
	{
		result_Claim_Item_Detail->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_Claim_Item_Detail->programCode = PushArray(arena, CodeableConcept, result_Claim_Item_Detail->programCode_count);
		for(int i = 0; i < result_Claim_Item_Detail->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_Claim_Item_Detail->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(claim_Item_Detail, "quantity");
	if(cjson_quantity)
	{
		result_Claim_Item_Detail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(claim_Item_Detail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_Claim_Item_Detail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(claim_Item_Detail, "factor");
	if(cjson_factor)
	{
		result_Claim_Item_Detail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(claim_Item_Detail, "net");
	if(cjson_net)
	{
		result_Claim_Item_Detail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_udi =  cJSON_GetObjectItem(claim_Item_Detail, "udi");
	if(cjson_udi)
	{
		result_Claim_Item_Detail->udi_count = cJSON_GetArraySize(cjson_udi);
		result_Claim_Item_Detail->udi = PushArray(arena, Reference, result_Claim_Item_Detail->udi_count);
		for(int i = 0; i < result_Claim_Item_Detail->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_Claim_Item_Detail->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_subDetail =  cJSON_GetObjectItem(claim_Item_Detail, "subDetail");
	if(cjson_subDetail)
	{
		result_Claim_Item_Detail->subDetail_count = cJSON_GetArraySize(cjson_subDetail);
		result_Claim_Item_Detail->subDetail = PushArray(arena, Claim_Item_Detail_SubDetail, result_Claim_Item_Detail->subDetail_count);
		for(int i = 0; i < result_Claim_Item_Detail->subDetail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subDetail, i);
			result_Claim_Item_Detail->subDetail[i] = *Deserialize_Claim_Item_Detail_SubDetail(arena, internal);
		}

	}
	return result_Claim_Item_Detail;
}

Claim_Item_Detail_SubDetail*
Deserialize_Claim_Item_Detail_SubDetail(Arena *arena, cJSON *claim_Item_Detail_SubDetail)
{
	Claim_Item_Detail_SubDetail *result_Claim_Item_Detail_SubDetail = PushArray(arena, Claim_Item_Detail_SubDetail, 1);
	result_Claim_Item_Detail_SubDetail->resourceType = ResourceType::Claim_Item_Detail_SubDetail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "id");
	if(cjson_id)
	{
		result_Claim_Item_Detail_SubDetail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "extension");
	if(cjson_extension)
	{
		result_Claim_Item_Detail_SubDetail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Claim_Item_Detail_SubDetail->extension = PushArray(arena, Extension, result_Claim_Item_Detail_SubDetail->extension_count);
		for(int i = 0; i < result_Claim_Item_Detail_SubDetail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Claim_Item_Detail_SubDetail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Claim_Item_Detail_SubDetail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Claim_Item_Detail_SubDetail->modifierExtension = PushArray(arena, Extension, result_Claim_Item_Detail_SubDetail->modifierExtension_count);
		for(int i = 0; i < result_Claim_Item_Detail_SubDetail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Claim_Item_Detail_SubDetail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "sequence");
	if(cjson_sequence)
	{
		result_Claim_Item_Detail_SubDetail->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_revenue =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "revenue");
	if(cjson_revenue)
	{
		result_Claim_Item_Detail_SubDetail->revenue = Deserialize_CodeableConcept(arena, cjson_revenue);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "category");
	if(cjson_category)
	{
		result_Claim_Item_Detail_SubDetail->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "productOrService");
	if(cjson_productOrService)
	{
		result_Claim_Item_Detail_SubDetail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "modifier");
	if(cjson_modifier)
	{
		result_Claim_Item_Detail_SubDetail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_Claim_Item_Detail_SubDetail->modifier = PushArray(arena, CodeableConcept, result_Claim_Item_Detail_SubDetail->modifier_count);
		for(int i = 0; i < result_Claim_Item_Detail_SubDetail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_Claim_Item_Detail_SubDetail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "programCode");
	if(cjson_programCode)
	{
		result_Claim_Item_Detail_SubDetail->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_Claim_Item_Detail_SubDetail->programCode = PushArray(arena, CodeableConcept, result_Claim_Item_Detail_SubDetail->programCode_count);
		for(int i = 0; i < result_Claim_Item_Detail_SubDetail->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_Claim_Item_Detail_SubDetail->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "quantity");
	if(cjson_quantity)
	{
		result_Claim_Item_Detail_SubDetail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_Claim_Item_Detail_SubDetail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "factor");
	if(cjson_factor)
	{
		result_Claim_Item_Detail_SubDetail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "net");
	if(cjson_net)
	{
		result_Claim_Item_Detail_SubDetail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_udi =  cJSON_GetObjectItem(claim_Item_Detail_SubDetail, "udi");
	if(cjson_udi)
	{
		result_Claim_Item_Detail_SubDetail->udi_count = cJSON_GetArraySize(cjson_udi);
		result_Claim_Item_Detail_SubDetail->udi = PushArray(arena, Reference, result_Claim_Item_Detail_SubDetail->udi_count);
		for(int i = 0; i < result_Claim_Item_Detail_SubDetail->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_Claim_Item_Detail_SubDetail->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Claim_Item_Detail_SubDetail;
}

ClaimResponse*
Deserialize_ClaimResponse(Arena *arena, cJSON *claimResponse)
{
	ClaimResponse *result_ClaimResponse = PushArray(arena, ClaimResponse, 1);
	result_ClaimResponse->resourceType = ResourceType::ClaimResponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse, "id");
	if(cjson_id)
	{
		result_ClaimResponse->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(claimResponse, "meta");
	if(cjson_meta)
	{
		result_ClaimResponse->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(claimResponse, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ClaimResponse->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(claimResponse, "language");
	if(cjson_language)
	{
		result_ClaimResponse->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(claimResponse, "text");
	if(cjson_text)
	{
		result_ClaimResponse->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(claimResponse, "contained");
	if(cjson_contained)
	{
		result_ClaimResponse->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ClaimResponse->contained = PushArray(arena, Resource, result_ClaimResponse->contained_count);
		for(int i = 0; i < result_ClaimResponse->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ClaimResponse->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse->extension = PushArray(arena, Extension, result_ClaimResponse->extension_count);
		for(int i = 0; i < result_ClaimResponse->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse->modifierExtension = PushArray(arena, Extension, result_ClaimResponse->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(claimResponse, "identifier");
	if(cjson_identifier)
	{
		result_ClaimResponse->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ClaimResponse->identifier = PushArray(arena, Identifier, result_ClaimResponse->identifier_count);
		for(int i = 0; i < result_ClaimResponse->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ClaimResponse->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(claimResponse, "status");
	if(cjson_status)
	{
		result_ClaimResponse->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(claimResponse, "type");
	if(cjson_type)
	{
		result_ClaimResponse->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subType =  cJSON_GetObjectItem(claimResponse, "subType");
	if(cjson_subType)
	{
		result_ClaimResponse->subType = Deserialize_CodeableConcept(arena, cjson_subType);
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(claimResponse, "use");
	if(cjson_use)
	{
		result_ClaimResponse->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(claimResponse, "patient");
	if(cjson_patient)
	{
		result_ClaimResponse->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(claimResponse, "created");
	if(cjson_created)
	{
		result_ClaimResponse->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_insurer =  cJSON_GetObjectItem(claimResponse, "insurer");
	if(cjson_insurer)
	{
		result_ClaimResponse->insurer = Deserialize_Reference(arena, cjson_insurer);
	}
	cJSON *cjson_requestor =  cJSON_GetObjectItem(claimResponse, "requestor");
	if(cjson_requestor)
	{
		result_ClaimResponse->requestor = Deserialize_Reference(arena, cjson_requestor);
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(claimResponse, "request");
	if(cjson_request)
	{
		result_ClaimResponse->request = Deserialize_Reference(arena, cjson_request);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(claimResponse, "outcome");
	if(cjson_outcome)
	{
		result_ClaimResponse->outcome = Str8C(cJSON_GetStringValue(cjson_outcome));
	}
	cJSON *cjson_disposition =  cJSON_GetObjectItem(claimResponse, "disposition");
	if(cjson_disposition)
	{
		result_ClaimResponse->disposition = Str8C(cJSON_GetStringValue(cjson_disposition));
	}
	cJSON *cjson_preAuthRef =  cJSON_GetObjectItem(claimResponse, "preAuthRef");
	if(cjson_preAuthRef)
	{
		result_ClaimResponse->preAuthRef = Str8C(cJSON_GetStringValue(cjson_preAuthRef));
	}
	cJSON *cjson_preAuthPeriod =  cJSON_GetObjectItem(claimResponse, "preAuthPeriod");
	if(cjson_preAuthPeriod)
	{
		result_ClaimResponse->preAuthPeriod = Deserialize_Period(arena, cjson_preAuthPeriod);
	}
	cJSON *cjson_payeeType =  cJSON_GetObjectItem(claimResponse, "payeeType");
	if(cjson_payeeType)
	{
		result_ClaimResponse->payeeType = Deserialize_CodeableConcept(arena, cjson_payeeType);
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(claimResponse, "item");
	if(cjson_item)
	{
		result_ClaimResponse->item_count = cJSON_GetArraySize(cjson_item);
		result_ClaimResponse->item = PushArray(arena, ClaimResponse_Item, result_ClaimResponse->item_count);
		for(int i = 0; i < result_ClaimResponse->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_ClaimResponse->item[i] = *Deserialize_ClaimResponse_Item(arena, internal);
		}

	}
	cJSON *cjson_addItem =  cJSON_GetObjectItem(claimResponse, "addItem");
	if(cjson_addItem)
	{
		result_ClaimResponse->addItem_count = cJSON_GetArraySize(cjson_addItem);
		result_ClaimResponse->addItem = PushArray(arena, ClaimResponse_AddItem, result_ClaimResponse->addItem_count);
		for(int i = 0; i < result_ClaimResponse->addItem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_addItem, i);
			result_ClaimResponse->addItem[i] = *Deserialize_ClaimResponse_AddItem(arena, internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(claimResponse, "adjudication");
	if(cjson_adjudication)
	{
		result_ClaimResponse->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ClaimResponse->adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, result_ClaimResponse->adjudication_count);
		for(int i = 0; i < result_ClaimResponse->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ClaimResponse->adjudication[i] = *Deserialize_ClaimResponse_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_total =  cJSON_GetObjectItem(claimResponse, "total");
	if(cjson_total)
	{
		result_ClaimResponse->total_count = cJSON_GetArraySize(cjson_total);
		result_ClaimResponse->total = PushArray(arena, ClaimResponse_Total, result_ClaimResponse->total_count);
		for(int i = 0; i < result_ClaimResponse->total_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_total, i);
			result_ClaimResponse->total[i] = *Deserialize_ClaimResponse_Total(arena, internal);
		}

	}
	cJSON *cjson_payment =  cJSON_GetObjectItem(claimResponse, "payment");
	if(cjson_payment)
	{
		result_ClaimResponse->payment = Deserialize_ClaimResponse_Payment(arena, cjson_payment);
	}
	cJSON *cjson_fundsReserve =  cJSON_GetObjectItem(claimResponse, "fundsReserve");
	if(cjson_fundsReserve)
	{
		result_ClaimResponse->fundsReserve = Deserialize_CodeableConcept(arena, cjson_fundsReserve);
	}
	cJSON *cjson_formCode =  cJSON_GetObjectItem(claimResponse, "formCode");
	if(cjson_formCode)
	{
		result_ClaimResponse->formCode = Deserialize_CodeableConcept(arena, cjson_formCode);
	}
	cJSON *cjson_form =  cJSON_GetObjectItem(claimResponse, "form");
	if(cjson_form)
	{
		result_ClaimResponse->form = Deserialize_Attachment(arena, cjson_form);
	}
	cJSON *cjson_processNote =  cJSON_GetObjectItem(claimResponse, "processNote");
	if(cjson_processNote)
	{
		result_ClaimResponse->processNote_count = cJSON_GetArraySize(cjson_processNote);
		result_ClaimResponse->processNote = PushArray(arena, ClaimResponse_ProcessNote, result_ClaimResponse->processNote_count);
		for(int i = 0; i < result_ClaimResponse->processNote_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_processNote, i);
			result_ClaimResponse->processNote[i] = *Deserialize_ClaimResponse_ProcessNote(arena, internal);
		}

	}
	cJSON *cjson_communicationRequest =  cJSON_GetObjectItem(claimResponse, "communicationRequest");
	if(cjson_communicationRequest)
	{
		result_ClaimResponse->communicationRequest_count = cJSON_GetArraySize(cjson_communicationRequest);
		result_ClaimResponse->communicationRequest = PushArray(arena, Reference, result_ClaimResponse->communicationRequest_count);
		for(int i = 0; i < result_ClaimResponse->communicationRequest_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_communicationRequest, i);
			result_ClaimResponse->communicationRequest[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(claimResponse, "insurance");
	if(cjson_insurance)
	{
		result_ClaimResponse->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_ClaimResponse->insurance = PushArray(arena, ClaimResponse_Insurance, result_ClaimResponse->insurance_count);
		for(int i = 0; i < result_ClaimResponse->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_ClaimResponse->insurance[i] = *Deserialize_ClaimResponse_Insurance(arena, internal);
		}

	}
	cJSON *cjson_error =  cJSON_GetObjectItem(claimResponse, "error");
	if(cjson_error)
	{
		result_ClaimResponse->error_count = cJSON_GetArraySize(cjson_error);
		result_ClaimResponse->error = PushArray(arena, ClaimResponse_Error, result_ClaimResponse->error_count);
		for(int i = 0; i < result_ClaimResponse->error_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_error, i);
			result_ClaimResponse->error[i] = *Deserialize_ClaimResponse_Error(arena, internal);
		}

	}
	return result_ClaimResponse;
}

ClaimResponse_Item*
Deserialize_ClaimResponse_Item(Arena *arena, cJSON *claimResponse_Item)
{
	ClaimResponse_Item *result_ClaimResponse_Item = PushArray(arena, ClaimResponse_Item, 1);
	result_ClaimResponse_Item->resourceType = ResourceType::ClaimResponse_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Item, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Item, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Item->extension = PushArray(arena, Extension, result_ClaimResponse_Item->extension_count);
		for(int i = 0; i < result_ClaimResponse_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Item->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Item->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_itemSequence =  cJSON_GetObjectItem(claimResponse_Item, "itemSequence");
	if(cjson_itemSequence)
	{
		result_ClaimResponse_Item->itemSequence = (int)cJSON_GetNumberValue(cjson_itemSequence);
	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(claimResponse_Item, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ClaimResponse_Item->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ClaimResponse_Item->noteNumber = PushArray(arena, fhir_positiveInt, result_ClaimResponse_Item->noteNumber_count);
		for(int i = 0; i < result_ClaimResponse_Item->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ClaimResponse_Item->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(claimResponse_Item, "adjudication");
	if(cjson_adjudication)
	{
		result_ClaimResponse_Item->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ClaimResponse_Item->adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, result_ClaimResponse_Item->adjudication_count);
		for(int i = 0; i < result_ClaimResponse_Item->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ClaimResponse_Item->adjudication[i] = *Deserialize_ClaimResponse_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(claimResponse_Item, "detail");
	if(cjson_detail)
	{
		result_ClaimResponse_Item->detail_count = cJSON_GetArraySize(cjson_detail);
		result_ClaimResponse_Item->detail = PushArray(arena, ClaimResponse_Item_Detail, result_ClaimResponse_Item->detail_count);
		for(int i = 0; i < result_ClaimResponse_Item->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_ClaimResponse_Item->detail[i] = *Deserialize_ClaimResponse_Item_Detail(arena, internal);
		}

	}
	return result_ClaimResponse_Item;
}

ClaimResponse_Item_Adjudication*
Deserialize_ClaimResponse_Item_Adjudication(Arena *arena, cJSON *claimResponse_Item_Adjudication)
{
	ClaimResponse_Item_Adjudication *result_ClaimResponse_Item_Adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, 1);
	result_ClaimResponse_Item_Adjudication->resourceType = ResourceType::ClaimResponse_Item_Adjudication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Item_Adjudication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Item_Adjudication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Item_Adjudication->extension = PushArray(arena, Extension, result_ClaimResponse_Item_Adjudication->extension_count);
		for(int i = 0; i < result_ClaimResponse_Item_Adjudication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Item_Adjudication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Item_Adjudication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Item_Adjudication->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Item_Adjudication->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Item_Adjudication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Item_Adjudication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "category");
	if(cjson_category)
	{
		result_ClaimResponse_Item_Adjudication->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "reason");
	if(cjson_reason)
	{
		result_ClaimResponse_Item_Adjudication->reason = Deserialize_CodeableConcept(arena, cjson_reason);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "amount");
	if(cjson_amount)
	{
		result_ClaimResponse_Item_Adjudication->amount = Deserialize_Money(arena, cjson_amount);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(claimResponse_Item_Adjudication, "value");
	if(cjson_value)
	{
		result_ClaimResponse_Item_Adjudication->value = cJSON_GetNumberValue(cjson_value);
	}
	return result_ClaimResponse_Item_Adjudication;
}

ClaimResponse_Item_Detail*
Deserialize_ClaimResponse_Item_Detail(Arena *arena, cJSON *claimResponse_Item_Detail)
{
	ClaimResponse_Item_Detail *result_ClaimResponse_Item_Detail = PushArray(arena, ClaimResponse_Item_Detail, 1);
	result_ClaimResponse_Item_Detail->resourceType = ResourceType::ClaimResponse_Item_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Item_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Item_Detail, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Item_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Item_Detail, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Item_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Item_Detail->extension = PushArray(arena, Extension, result_ClaimResponse_Item_Detail->extension_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Item_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Item_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Item_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Item_Detail->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Item_Detail->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Item_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_detailSequence =  cJSON_GetObjectItem(claimResponse_Item_Detail, "detailSequence");
	if(cjson_detailSequence)
	{
		result_ClaimResponse_Item_Detail->detailSequence = (int)cJSON_GetNumberValue(cjson_detailSequence);
	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(claimResponse_Item_Detail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ClaimResponse_Item_Detail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ClaimResponse_Item_Detail->noteNumber = PushArray(arena, fhir_positiveInt, result_ClaimResponse_Item_Detail->noteNumber_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ClaimResponse_Item_Detail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(claimResponse_Item_Detail, "adjudication");
	if(cjson_adjudication)
	{
		result_ClaimResponse_Item_Detail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ClaimResponse_Item_Detail->adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, result_ClaimResponse_Item_Detail->adjudication_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ClaimResponse_Item_Detail->adjudication[i] = *Deserialize_ClaimResponse_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_subDetail =  cJSON_GetObjectItem(claimResponse_Item_Detail, "subDetail");
	if(cjson_subDetail)
	{
		result_ClaimResponse_Item_Detail->subDetail_count = cJSON_GetArraySize(cjson_subDetail);
		result_ClaimResponse_Item_Detail->subDetail = PushArray(arena, ClaimResponse_Item_Detail_SubDetail, result_ClaimResponse_Item_Detail->subDetail_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail->subDetail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subDetail, i);
			result_ClaimResponse_Item_Detail->subDetail[i] = *Deserialize_ClaimResponse_Item_Detail_SubDetail(arena, internal);
		}

	}
	return result_ClaimResponse_Item_Detail;
}

ClaimResponse_Item_Detail_SubDetail*
Deserialize_ClaimResponse_Item_Detail_SubDetail(Arena *arena, cJSON *claimResponse_Item_Detail_SubDetail)
{
	ClaimResponse_Item_Detail_SubDetail *result_ClaimResponse_Item_Detail_SubDetail = PushArray(arena, ClaimResponse_Item_Detail_SubDetail, 1);
	result_ClaimResponse_Item_Detail_SubDetail->resourceType = ResourceType::ClaimResponse_Item_Detail_SubDetail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Item_Detail_SubDetail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Item_Detail_SubDetail, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Item_Detail_SubDetail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Item_Detail_SubDetail, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Item_Detail_SubDetail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Item_Detail_SubDetail->extension = PushArray(arena, Extension, result_ClaimResponse_Item_Detail_SubDetail->extension_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail_SubDetail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Item_Detail_SubDetail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Item_Detail_SubDetail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Item_Detail_SubDetail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Item_Detail_SubDetail->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Item_Detail_SubDetail->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail_SubDetail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Item_Detail_SubDetail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_subDetailSequence =  cJSON_GetObjectItem(claimResponse_Item_Detail_SubDetail, "subDetailSequence");
	if(cjson_subDetailSequence)
	{
		result_ClaimResponse_Item_Detail_SubDetail->subDetailSequence = (int)cJSON_GetNumberValue(cjson_subDetailSequence);
	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(claimResponse_Item_Detail_SubDetail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ClaimResponse_Item_Detail_SubDetail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ClaimResponse_Item_Detail_SubDetail->noteNumber = PushArray(arena, fhir_positiveInt, result_ClaimResponse_Item_Detail_SubDetail->noteNumber_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail_SubDetail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ClaimResponse_Item_Detail_SubDetail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(claimResponse_Item_Detail_SubDetail, "adjudication");
	if(cjson_adjudication)
	{
		result_ClaimResponse_Item_Detail_SubDetail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ClaimResponse_Item_Detail_SubDetail->adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, result_ClaimResponse_Item_Detail_SubDetail->adjudication_count);
		for(int i = 0; i < result_ClaimResponse_Item_Detail_SubDetail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ClaimResponse_Item_Detail_SubDetail->adjudication[i] = *Deserialize_ClaimResponse_Item_Adjudication(arena, internal);
		}

	}
	return result_ClaimResponse_Item_Detail_SubDetail;
}

ClaimResponse_AddItem*
Deserialize_ClaimResponse_AddItem(Arena *arena, cJSON *claimResponse_AddItem)
{
	ClaimResponse_AddItem *result_ClaimResponse_AddItem = PushArray(arena, ClaimResponse_AddItem, 1);
	result_ClaimResponse_AddItem->resourceType = ResourceType::ClaimResponse_AddItem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_AddItem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_AddItem, "id");
	if(cjson_id)
	{
		result_ClaimResponse_AddItem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_AddItem, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_AddItem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_AddItem->extension = PushArray(arena, Extension, result_ClaimResponse_AddItem->extension_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_AddItem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_AddItem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_AddItem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_AddItem->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_AddItem->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_AddItem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_itemSequence =  cJSON_GetObjectItem(claimResponse_AddItem, "itemSequence");
	if(cjson_itemSequence)
	{
		result_ClaimResponse_AddItem->itemSequence_count = cJSON_GetArraySize(cjson_itemSequence);
		result_ClaimResponse_AddItem->itemSequence = PushArray(arena, fhir_positiveInt, result_ClaimResponse_AddItem->itemSequence_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->itemSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_itemSequence, i);
			result_ClaimResponse_AddItem->itemSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_detailSequence =  cJSON_GetObjectItem(claimResponse_AddItem, "detailSequence");
	if(cjson_detailSequence)
	{
		result_ClaimResponse_AddItem->detailSequence_count = cJSON_GetArraySize(cjson_detailSequence);
		result_ClaimResponse_AddItem->detailSequence = PushArray(arena, fhir_positiveInt, result_ClaimResponse_AddItem->detailSequence_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->detailSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detailSequence, i);
			result_ClaimResponse_AddItem->detailSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_subdetailSequence =  cJSON_GetObjectItem(claimResponse_AddItem, "subdetailSequence");
	if(cjson_subdetailSequence)
	{
		result_ClaimResponse_AddItem->subdetailSequence_count = cJSON_GetArraySize(cjson_subdetailSequence);
		result_ClaimResponse_AddItem->subdetailSequence = PushArray(arena, fhir_positiveInt, result_ClaimResponse_AddItem->subdetailSequence_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->subdetailSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subdetailSequence, i);
			result_ClaimResponse_AddItem->subdetailSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(claimResponse_AddItem, "provider");
	if(cjson_provider)
	{
		result_ClaimResponse_AddItem->provider_count = cJSON_GetArraySize(cjson_provider);
		result_ClaimResponse_AddItem->provider = PushArray(arena, Reference, result_ClaimResponse_AddItem->provider_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->provider_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_provider, i);
			result_ClaimResponse_AddItem->provider[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(claimResponse_AddItem, "productOrService");
	if(cjson_productOrService)
	{
		result_ClaimResponse_AddItem->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(claimResponse_AddItem, "modifier");
	if(cjson_modifier)
	{
		result_ClaimResponse_AddItem->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ClaimResponse_AddItem->modifier = PushArray(arena, CodeableConcept, result_ClaimResponse_AddItem->modifier_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ClaimResponse_AddItem->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(claimResponse_AddItem, "programCode");
	if(cjson_programCode)
	{
		result_ClaimResponse_AddItem->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_ClaimResponse_AddItem->programCode = PushArray(arena, CodeableConcept, result_ClaimResponse_AddItem->programCode_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_ClaimResponse_AddItem->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(claimResponse_AddItem, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(claimResponse_AddItem, "valueDate");
		result_ClaimResponse_AddItem->serviced.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ClaimResponse_AddItem->serviced_type = ClaimResponse_AddItem::ServicedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(claimResponse_AddItem, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(claimResponse_AddItem, "valuePeriod");
		result_ClaimResponse_AddItem->serviced.valuePeriod = Deserialize_Period(arena, item);
		result_ClaimResponse_AddItem->serviced_type = ClaimResponse_AddItem::ServicedType::Period;
	}


	if((bool)cJSON_HasObjectItem(claimResponse_AddItem, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(claimResponse_AddItem, "valueCodeableConcept");
		result_ClaimResponse_AddItem->location.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ClaimResponse_AddItem->location_type = ClaimResponse_AddItem::LocationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(claimResponse_AddItem, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(claimResponse_AddItem, "valueAddress");
		result_ClaimResponse_AddItem->location.valueAddress = Deserialize_Address(arena, item);
		result_ClaimResponse_AddItem->location_type = ClaimResponse_AddItem::LocationType::Address;
	}
	else if((bool)cJSON_HasObjectItem(claimResponse_AddItem, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(claimResponse_AddItem, "valueReference");
		result_ClaimResponse_AddItem->location.valueReference = Deserialize_Reference(arena, item);
		result_ClaimResponse_AddItem->location_type = ClaimResponse_AddItem::LocationType::Reference;
	}


	cJSON *cjson_quantity =  cJSON_GetObjectItem(claimResponse_AddItem, "quantity");
	if(cjson_quantity)
	{
		result_ClaimResponse_AddItem->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(claimResponse_AddItem, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ClaimResponse_AddItem->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(claimResponse_AddItem, "factor");
	if(cjson_factor)
	{
		result_ClaimResponse_AddItem->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(claimResponse_AddItem, "net");
	if(cjson_net)
	{
		result_ClaimResponse_AddItem->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(claimResponse_AddItem, "bodySite");
	if(cjson_bodySite)
	{
		result_ClaimResponse_AddItem->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	cJSON *cjson_subSite =  cJSON_GetObjectItem(claimResponse_AddItem, "subSite");
	if(cjson_subSite)
	{
		result_ClaimResponse_AddItem->subSite_count = cJSON_GetArraySize(cjson_subSite);
		result_ClaimResponse_AddItem->subSite = PushArray(arena, CodeableConcept, result_ClaimResponse_AddItem->subSite_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->subSite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subSite, i);
			result_ClaimResponse_AddItem->subSite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(claimResponse_AddItem, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ClaimResponse_AddItem->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ClaimResponse_AddItem->noteNumber = PushArray(arena, fhir_positiveInt, result_ClaimResponse_AddItem->noteNumber_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ClaimResponse_AddItem->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(claimResponse_AddItem, "adjudication");
	if(cjson_adjudication)
	{
		result_ClaimResponse_AddItem->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ClaimResponse_AddItem->adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, result_ClaimResponse_AddItem->adjudication_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ClaimResponse_AddItem->adjudication[i] = *Deserialize_ClaimResponse_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(claimResponse_AddItem, "detail");
	if(cjson_detail)
	{
		result_ClaimResponse_AddItem->detail_count = cJSON_GetArraySize(cjson_detail);
		result_ClaimResponse_AddItem->detail = PushArray(arena, ClaimResponse_AddItem_Detail, result_ClaimResponse_AddItem->detail_count);
		for(int i = 0; i < result_ClaimResponse_AddItem->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_ClaimResponse_AddItem->detail[i] = *Deserialize_ClaimResponse_AddItem_Detail(arena, internal);
		}

	}
	return result_ClaimResponse_AddItem;
}

ClaimResponse_AddItem_Detail*
Deserialize_ClaimResponse_AddItem_Detail(Arena *arena, cJSON *claimResponse_AddItem_Detail)
{
	ClaimResponse_AddItem_Detail *result_ClaimResponse_AddItem_Detail = PushArray(arena, ClaimResponse_AddItem_Detail, 1);
	result_ClaimResponse_AddItem_Detail->resourceType = ResourceType::ClaimResponse_AddItem_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "id");
	if(cjson_id)
	{
		result_ClaimResponse_AddItem_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_AddItem_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_AddItem_Detail->extension = PushArray(arena, Extension, result_ClaimResponse_AddItem_Detail->extension_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_AddItem_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_AddItem_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_AddItem_Detail->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_AddItem_Detail->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_AddItem_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "productOrService");
	if(cjson_productOrService)
	{
		result_ClaimResponse_AddItem_Detail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "modifier");
	if(cjson_modifier)
	{
		result_ClaimResponse_AddItem_Detail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ClaimResponse_AddItem_Detail->modifier = PushArray(arena, CodeableConcept, result_ClaimResponse_AddItem_Detail->modifier_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ClaimResponse_AddItem_Detail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "quantity");
	if(cjson_quantity)
	{
		result_ClaimResponse_AddItem_Detail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ClaimResponse_AddItem_Detail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "factor");
	if(cjson_factor)
	{
		result_ClaimResponse_AddItem_Detail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "net");
	if(cjson_net)
	{
		result_ClaimResponse_AddItem_Detail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ClaimResponse_AddItem_Detail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ClaimResponse_AddItem_Detail->noteNumber = PushArray(arena, fhir_positiveInt, result_ClaimResponse_AddItem_Detail->noteNumber_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ClaimResponse_AddItem_Detail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "adjudication");
	if(cjson_adjudication)
	{
		result_ClaimResponse_AddItem_Detail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ClaimResponse_AddItem_Detail->adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, result_ClaimResponse_AddItem_Detail->adjudication_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ClaimResponse_AddItem_Detail->adjudication[i] = *Deserialize_ClaimResponse_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_subDetail =  cJSON_GetObjectItem(claimResponse_AddItem_Detail, "subDetail");
	if(cjson_subDetail)
	{
		result_ClaimResponse_AddItem_Detail->subDetail_count = cJSON_GetArraySize(cjson_subDetail);
		result_ClaimResponse_AddItem_Detail->subDetail = PushArray(arena, ClaimResponse_AddItem_Detail_SubDetail, result_ClaimResponse_AddItem_Detail->subDetail_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail->subDetail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subDetail, i);
			result_ClaimResponse_AddItem_Detail->subDetail[i] = *Deserialize_ClaimResponse_AddItem_Detail_SubDetail(arena, internal);
		}

	}
	return result_ClaimResponse_AddItem_Detail;
}

ClaimResponse_AddItem_Detail_SubDetail*
Deserialize_ClaimResponse_AddItem_Detail_SubDetail(Arena *arena, cJSON *claimResponse_AddItem_Detail_SubDetail)
{
	ClaimResponse_AddItem_Detail_SubDetail *result_ClaimResponse_AddItem_Detail_SubDetail = PushArray(arena, ClaimResponse_AddItem_Detail_SubDetail, 1);
	result_ClaimResponse_AddItem_Detail_SubDetail->resourceType = ResourceType::ClaimResponse_AddItem_Detail_SubDetail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "id");
	if(cjson_id)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_AddItem_Detail_SubDetail->extension = PushArray(arena, Extension, result_ClaimResponse_AddItem_Detail_SubDetail->extension_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail_SubDetail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_AddItem_Detail_SubDetail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_AddItem_Detail_SubDetail->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_AddItem_Detail_SubDetail->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail_SubDetail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_AddItem_Detail_SubDetail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "productOrService");
	if(cjson_productOrService)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "modifier");
	if(cjson_modifier)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ClaimResponse_AddItem_Detail_SubDetail->modifier = PushArray(arena, CodeableConcept, result_ClaimResponse_AddItem_Detail_SubDetail->modifier_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail_SubDetail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ClaimResponse_AddItem_Detail_SubDetail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "quantity");
	if(cjson_quantity)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "factor");
	if(cjson_factor)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "net");
	if(cjson_net)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ClaimResponse_AddItem_Detail_SubDetail->noteNumber = PushArray(arena, fhir_positiveInt, result_ClaimResponse_AddItem_Detail_SubDetail->noteNumber_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail_SubDetail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ClaimResponse_AddItem_Detail_SubDetail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(claimResponse_AddItem_Detail_SubDetail, "adjudication");
	if(cjson_adjudication)
	{
		result_ClaimResponse_AddItem_Detail_SubDetail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ClaimResponse_AddItem_Detail_SubDetail->adjudication = PushArray(arena, ClaimResponse_Item_Adjudication, result_ClaimResponse_AddItem_Detail_SubDetail->adjudication_count);
		for(int i = 0; i < result_ClaimResponse_AddItem_Detail_SubDetail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ClaimResponse_AddItem_Detail_SubDetail->adjudication[i] = *Deserialize_ClaimResponse_Item_Adjudication(arena, internal);
		}

	}
	return result_ClaimResponse_AddItem_Detail_SubDetail;
}

ClaimResponse_Total*
Deserialize_ClaimResponse_Total(Arena *arena, cJSON *claimResponse_Total)
{
	ClaimResponse_Total *result_ClaimResponse_Total = PushArray(arena, ClaimResponse_Total, 1);
	result_ClaimResponse_Total->resourceType = ResourceType::ClaimResponse_Total;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Total, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Total, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Total->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Total, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Total->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Total->extension = PushArray(arena, Extension, result_ClaimResponse_Total->extension_count);
		for(int i = 0; i < result_ClaimResponse_Total->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Total->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Total, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Total->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Total->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Total->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Total->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Total->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(claimResponse_Total, "category");
	if(cjson_category)
	{
		result_ClaimResponse_Total->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(claimResponse_Total, "amount");
	if(cjson_amount)
	{
		result_ClaimResponse_Total->amount = Deserialize_Money(arena, cjson_amount);
	}
	return result_ClaimResponse_Total;
}

ClaimResponse_Payment*
Deserialize_ClaimResponse_Payment(Arena *arena, cJSON *claimResponse_Payment)
{
	ClaimResponse_Payment *result_ClaimResponse_Payment = PushArray(arena, ClaimResponse_Payment, 1);
	result_ClaimResponse_Payment->resourceType = ResourceType::ClaimResponse_Payment;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Payment, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Payment, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Payment->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Payment, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Payment->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Payment->extension = PushArray(arena, Extension, result_ClaimResponse_Payment->extension_count);
		for(int i = 0; i < result_ClaimResponse_Payment->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Payment->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Payment, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Payment->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Payment->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Payment->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Payment->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Payment->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(claimResponse_Payment, "type");
	if(cjson_type)
	{
		result_ClaimResponse_Payment->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_adjustment =  cJSON_GetObjectItem(claimResponse_Payment, "adjustment");
	if(cjson_adjustment)
	{
		result_ClaimResponse_Payment->adjustment = Deserialize_Money(arena, cjson_adjustment);
	}
	cJSON *cjson_adjustmentReason =  cJSON_GetObjectItem(claimResponse_Payment, "adjustmentReason");
	if(cjson_adjustmentReason)
	{
		result_ClaimResponse_Payment->adjustmentReason = Deserialize_CodeableConcept(arena, cjson_adjustmentReason);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(claimResponse_Payment, "date");
	if(cjson_date)
	{
		result_ClaimResponse_Payment->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(claimResponse_Payment, "amount");
	if(cjson_amount)
	{
		result_ClaimResponse_Payment->amount = Deserialize_Money(arena, cjson_amount);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(claimResponse_Payment, "identifier");
	if(cjson_identifier)
	{
		result_ClaimResponse_Payment->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	return result_ClaimResponse_Payment;
}

ClaimResponse_ProcessNote*
Deserialize_ClaimResponse_ProcessNote(Arena *arena, cJSON *claimResponse_ProcessNote)
{
	ClaimResponse_ProcessNote *result_ClaimResponse_ProcessNote = PushArray(arena, ClaimResponse_ProcessNote, 1);
	result_ClaimResponse_ProcessNote->resourceType = ResourceType::ClaimResponse_ProcessNote;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_ProcessNote, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_ProcessNote, "id");
	if(cjson_id)
	{
		result_ClaimResponse_ProcessNote->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_ProcessNote, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_ProcessNote->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_ProcessNote->extension = PushArray(arena, Extension, result_ClaimResponse_ProcessNote->extension_count);
		for(int i = 0; i < result_ClaimResponse_ProcessNote->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_ProcessNote->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_ProcessNote, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_ProcessNote->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_ProcessNote->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_ProcessNote->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_ProcessNote->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_ProcessNote->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_number =  cJSON_GetObjectItem(claimResponse_ProcessNote, "number");
	if(cjson_number)
	{
		result_ClaimResponse_ProcessNote->number = (int)cJSON_GetNumberValue(cjson_number);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(claimResponse_ProcessNote, "type");
	if(cjson_type)
	{
		result_ClaimResponse_ProcessNote->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(claimResponse_ProcessNote, "text");
	if(cjson_text)
	{
		result_ClaimResponse_ProcessNote->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(claimResponse_ProcessNote, "language");
	if(cjson_language)
	{
		result_ClaimResponse_ProcessNote->language = Deserialize_CodeableConcept(arena, cjson_language);
	}
	return result_ClaimResponse_ProcessNote;
}

ClaimResponse_Insurance*
Deserialize_ClaimResponse_Insurance(Arena *arena, cJSON *claimResponse_Insurance)
{
	ClaimResponse_Insurance *result_ClaimResponse_Insurance = PushArray(arena, ClaimResponse_Insurance, 1);
	result_ClaimResponse_Insurance->resourceType = ResourceType::ClaimResponse_Insurance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Insurance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Insurance, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Insurance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Insurance, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Insurance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Insurance->extension = PushArray(arena, Extension, result_ClaimResponse_Insurance->extension_count);
		for(int i = 0; i < result_ClaimResponse_Insurance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Insurance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Insurance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Insurance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Insurance->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Insurance->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Insurance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Insurance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(claimResponse_Insurance, "sequence");
	if(cjson_sequence)
	{
		result_ClaimResponse_Insurance->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_focal =  cJSON_GetObjectItem(claimResponse_Insurance, "focal");
	if(cjson_focal)
	{
		result_ClaimResponse_Insurance->focal = (boolean)cJSON_IsTrue(cjson_focal);
	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(claimResponse_Insurance, "coverage");
	if(cjson_coverage)
	{
		result_ClaimResponse_Insurance->coverage = Deserialize_Reference(arena, cjson_coverage);
	}
	cJSON *cjson_businessArrangement =  cJSON_GetObjectItem(claimResponse_Insurance, "businessArrangement");
	if(cjson_businessArrangement)
	{
		result_ClaimResponse_Insurance->businessArrangement = Str8C(cJSON_GetStringValue(cjson_businessArrangement));
	}
	cJSON *cjson_claimResponse =  cJSON_GetObjectItem(claimResponse_Insurance, "claimResponse");
	if(cjson_claimResponse)
	{
		result_ClaimResponse_Insurance->claimResponse = Deserialize_Reference(arena, cjson_claimResponse);
	}
	return result_ClaimResponse_Insurance;
}

ClaimResponse_Error*
Deserialize_ClaimResponse_Error(Arena *arena, cJSON *claimResponse_Error)
{
	ClaimResponse_Error *result_ClaimResponse_Error = PushArray(arena, ClaimResponse_Error, 1);
	result_ClaimResponse_Error->resourceType = ResourceType::ClaimResponse_Error;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(claimResponse_Error, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(claimResponse_Error, "id");
	if(cjson_id)
	{
		result_ClaimResponse_Error->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(claimResponse_Error, "extension");
	if(cjson_extension)
	{
		result_ClaimResponse_Error->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClaimResponse_Error->extension = PushArray(arena, Extension, result_ClaimResponse_Error->extension_count);
		for(int i = 0; i < result_ClaimResponse_Error->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClaimResponse_Error->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(claimResponse_Error, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClaimResponse_Error->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClaimResponse_Error->modifierExtension = PushArray(arena, Extension, result_ClaimResponse_Error->modifierExtension_count);
		for(int i = 0; i < result_ClaimResponse_Error->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClaimResponse_Error->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_itemSequence =  cJSON_GetObjectItem(claimResponse_Error, "itemSequence");
	if(cjson_itemSequence)
	{
		result_ClaimResponse_Error->itemSequence = (int)cJSON_GetNumberValue(cjson_itemSequence);
	}
	cJSON *cjson_detailSequence =  cJSON_GetObjectItem(claimResponse_Error, "detailSequence");
	if(cjson_detailSequence)
	{
		result_ClaimResponse_Error->detailSequence = (int)cJSON_GetNumberValue(cjson_detailSequence);
	}
	cJSON *cjson_subDetailSequence =  cJSON_GetObjectItem(claimResponse_Error, "subDetailSequence");
	if(cjson_subDetailSequence)
	{
		result_ClaimResponse_Error->subDetailSequence = (int)cJSON_GetNumberValue(cjson_subDetailSequence);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(claimResponse_Error, "code");
	if(cjson_code)
	{
		result_ClaimResponse_Error->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	return result_ClaimResponse_Error;
}

ClinicalImpression*
Deserialize_ClinicalImpression(Arena *arena, cJSON *clinicalImpression)
{
	ClinicalImpression *result_ClinicalImpression = PushArray(arena, ClinicalImpression, 1);
	result_ClinicalImpression->resourceType = ResourceType::ClinicalImpression;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(clinicalImpression, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(clinicalImpression, "id");
	if(cjson_id)
	{
		result_ClinicalImpression->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(clinicalImpression, "meta");
	if(cjson_meta)
	{
		result_ClinicalImpression->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(clinicalImpression, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ClinicalImpression->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(clinicalImpression, "language");
	if(cjson_language)
	{
		result_ClinicalImpression->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(clinicalImpression, "text");
	if(cjson_text)
	{
		result_ClinicalImpression->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(clinicalImpression, "contained");
	if(cjson_contained)
	{
		result_ClinicalImpression->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ClinicalImpression->contained = PushArray(arena, Resource, result_ClinicalImpression->contained_count);
		for(int i = 0; i < result_ClinicalImpression->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ClinicalImpression->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(clinicalImpression, "extension");
	if(cjson_extension)
	{
		result_ClinicalImpression->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClinicalImpression->extension = PushArray(arena, Extension, result_ClinicalImpression->extension_count);
		for(int i = 0; i < result_ClinicalImpression->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClinicalImpression->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(clinicalImpression, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClinicalImpression->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClinicalImpression->modifierExtension = PushArray(arena, Extension, result_ClinicalImpression->modifierExtension_count);
		for(int i = 0; i < result_ClinicalImpression->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClinicalImpression->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(clinicalImpression, "identifier");
	if(cjson_identifier)
	{
		result_ClinicalImpression->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ClinicalImpression->identifier = PushArray(arena, Identifier, result_ClinicalImpression->identifier_count);
		for(int i = 0; i < result_ClinicalImpression->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ClinicalImpression->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(clinicalImpression, "status");
	if(cjson_status)
	{
		result_ClinicalImpression->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(clinicalImpression, "statusReason");
	if(cjson_statusReason)
	{
		result_ClinicalImpression->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(clinicalImpression, "code");
	if(cjson_code)
	{
		result_ClinicalImpression->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(clinicalImpression, "description");
	if(cjson_description)
	{
		result_ClinicalImpression->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(clinicalImpression, "subject");
	if(cjson_subject)
	{
		result_ClinicalImpression->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(clinicalImpression, "encounter");
	if(cjson_encounter)
	{
		result_ClinicalImpression->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(clinicalImpression, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(clinicalImpression, "valueDateTime");
		result_ClinicalImpression->effective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ClinicalImpression->effective_type = ClinicalImpression::EffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(clinicalImpression, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(clinicalImpression, "valuePeriod");
		result_ClinicalImpression->effective.valuePeriod = Deserialize_Period(arena, item);
		result_ClinicalImpression->effective_type = ClinicalImpression::EffectiveType::Period;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(clinicalImpression, "date");
	if(cjson_date)
	{
		result_ClinicalImpression->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_assessor =  cJSON_GetObjectItem(clinicalImpression, "assessor");
	if(cjson_assessor)
	{
		result_ClinicalImpression->assessor = Deserialize_Reference(arena, cjson_assessor);
	}
	cJSON *cjson_previous =  cJSON_GetObjectItem(clinicalImpression, "previous");
	if(cjson_previous)
	{
		result_ClinicalImpression->previous = Deserialize_Reference(arena, cjson_previous);
	}
	cJSON *cjson_problem =  cJSON_GetObjectItem(clinicalImpression, "problem");
	if(cjson_problem)
	{
		result_ClinicalImpression->problem_count = cJSON_GetArraySize(cjson_problem);
		result_ClinicalImpression->problem = PushArray(arena, Reference, result_ClinicalImpression->problem_count);
		for(int i = 0; i < result_ClinicalImpression->problem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_problem, i);
			result_ClinicalImpression->problem[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_investigation =  cJSON_GetObjectItem(clinicalImpression, "investigation");
	if(cjson_investigation)
	{
		result_ClinicalImpression->investigation_count = cJSON_GetArraySize(cjson_investigation);
		result_ClinicalImpression->investigation = PushArray(arena, ClinicalImpression_Investigation, result_ClinicalImpression->investigation_count);
		for(int i = 0; i < result_ClinicalImpression->investigation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_investigation, i);
			result_ClinicalImpression->investigation[i] = *Deserialize_ClinicalImpression_Investigation(arena, internal);
		}

	}
	cJSON *cjson_protocol =  cJSON_GetObjectItem(clinicalImpression, "protocol");
	if(cjson_protocol)
	{
		result_ClinicalImpression->protocol_count = cJSON_GetArraySize(cjson_protocol);
		result_ClinicalImpression->protocol = PushArray(arena, fhir_uri, result_ClinicalImpression->protocol_count);
		for(int i = 0; i < result_ClinicalImpression->protocol_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_protocol, i);
			result_ClinicalImpression->protocol[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_summary =  cJSON_GetObjectItem(clinicalImpression, "summary");
	if(cjson_summary)
	{
		result_ClinicalImpression->summary = Str8C(cJSON_GetStringValue(cjson_summary));
	}
	cJSON *cjson_finding =  cJSON_GetObjectItem(clinicalImpression, "finding");
	if(cjson_finding)
	{
		result_ClinicalImpression->finding_count = cJSON_GetArraySize(cjson_finding);
		result_ClinicalImpression->finding = PushArray(arena, ClinicalImpression_Finding, result_ClinicalImpression->finding_count);
		for(int i = 0; i < result_ClinicalImpression->finding_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_finding, i);
			result_ClinicalImpression->finding[i] = *Deserialize_ClinicalImpression_Finding(arena, internal);
		}

	}
	cJSON *cjson_prognosisCodeableConcept =  cJSON_GetObjectItem(clinicalImpression, "prognosisCodeableConcept");
	if(cjson_prognosisCodeableConcept)
	{
		result_ClinicalImpression->prognosisCodeableConcept_count = cJSON_GetArraySize(cjson_prognosisCodeableConcept);
		result_ClinicalImpression->prognosisCodeableConcept = PushArray(arena, CodeableConcept, result_ClinicalImpression->prognosisCodeableConcept_count);
		for(int i = 0; i < result_ClinicalImpression->prognosisCodeableConcept_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_prognosisCodeableConcept, i);
			result_ClinicalImpression->prognosisCodeableConcept[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_prognosisReference =  cJSON_GetObjectItem(clinicalImpression, "prognosisReference");
	if(cjson_prognosisReference)
	{
		result_ClinicalImpression->prognosisReference_count = cJSON_GetArraySize(cjson_prognosisReference);
		result_ClinicalImpression->prognosisReference = PushArray(arena, Reference, result_ClinicalImpression->prognosisReference_count);
		for(int i = 0; i < result_ClinicalImpression->prognosisReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_prognosisReference, i);
			result_ClinicalImpression->prognosisReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(clinicalImpression, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_ClinicalImpression->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_ClinicalImpression->supportingInfo = PushArray(arena, Reference, result_ClinicalImpression->supportingInfo_count);
		for(int i = 0; i < result_ClinicalImpression->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_ClinicalImpression->supportingInfo[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(clinicalImpression, "note");
	if(cjson_note)
	{
		result_ClinicalImpression->note_count = cJSON_GetArraySize(cjson_note);
		result_ClinicalImpression->note = PushArray(arena, Annotation, result_ClinicalImpression->note_count);
		for(int i = 0; i < result_ClinicalImpression->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_ClinicalImpression->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_ClinicalImpression;
}

ClinicalImpression_Investigation*
Deserialize_ClinicalImpression_Investigation(Arena *arena, cJSON *clinicalImpression_Investigation)
{
	ClinicalImpression_Investigation *result_ClinicalImpression_Investigation = PushArray(arena, ClinicalImpression_Investigation, 1);
	result_ClinicalImpression_Investigation->resourceType = ResourceType::ClinicalImpression_Investigation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(clinicalImpression_Investigation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(clinicalImpression_Investigation, "id");
	if(cjson_id)
	{
		result_ClinicalImpression_Investigation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(clinicalImpression_Investigation, "extension");
	if(cjson_extension)
	{
		result_ClinicalImpression_Investigation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClinicalImpression_Investigation->extension = PushArray(arena, Extension, result_ClinicalImpression_Investigation->extension_count);
		for(int i = 0; i < result_ClinicalImpression_Investigation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClinicalImpression_Investigation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(clinicalImpression_Investigation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClinicalImpression_Investigation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClinicalImpression_Investigation->modifierExtension = PushArray(arena, Extension, result_ClinicalImpression_Investigation->modifierExtension_count);
		for(int i = 0; i < result_ClinicalImpression_Investigation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClinicalImpression_Investigation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(clinicalImpression_Investigation, "code");
	if(cjson_code)
	{
		result_ClinicalImpression_Investigation->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(clinicalImpression_Investigation, "item");
	if(cjson_item)
	{
		result_ClinicalImpression_Investigation->item_count = cJSON_GetArraySize(cjson_item);
		result_ClinicalImpression_Investigation->item = PushArray(arena, Reference, result_ClinicalImpression_Investigation->item_count);
		for(int i = 0; i < result_ClinicalImpression_Investigation->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_ClinicalImpression_Investigation->item[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_ClinicalImpression_Investigation;
}

ClinicalImpression_Finding*
Deserialize_ClinicalImpression_Finding(Arena *arena, cJSON *clinicalImpression_Finding)
{
	ClinicalImpression_Finding *result_ClinicalImpression_Finding = PushArray(arena, ClinicalImpression_Finding, 1);
	result_ClinicalImpression_Finding->resourceType = ResourceType::ClinicalImpression_Finding;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(clinicalImpression_Finding, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(clinicalImpression_Finding, "id");
	if(cjson_id)
	{
		result_ClinicalImpression_Finding->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(clinicalImpression_Finding, "extension");
	if(cjson_extension)
	{
		result_ClinicalImpression_Finding->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ClinicalImpression_Finding->extension = PushArray(arena, Extension, result_ClinicalImpression_Finding->extension_count);
		for(int i = 0; i < result_ClinicalImpression_Finding->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ClinicalImpression_Finding->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(clinicalImpression_Finding, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ClinicalImpression_Finding->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ClinicalImpression_Finding->modifierExtension = PushArray(arena, Extension, result_ClinicalImpression_Finding->modifierExtension_count);
		for(int i = 0; i < result_ClinicalImpression_Finding->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ClinicalImpression_Finding->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_itemCodeableConcept =  cJSON_GetObjectItem(clinicalImpression_Finding, "itemCodeableConcept");
	if(cjson_itemCodeableConcept)
	{
		result_ClinicalImpression_Finding->itemCodeableConcept = Deserialize_CodeableConcept(arena, cjson_itemCodeableConcept);
	}
	cJSON *cjson_itemReference =  cJSON_GetObjectItem(clinicalImpression_Finding, "itemReference");
	if(cjson_itemReference)
	{
		result_ClinicalImpression_Finding->itemReference = Deserialize_Reference(arena, cjson_itemReference);
	}
	cJSON *cjson_basis =  cJSON_GetObjectItem(clinicalImpression_Finding, "basis");
	if(cjson_basis)
	{
		result_ClinicalImpression_Finding->basis = Str8C(cJSON_GetStringValue(cjson_basis));
	}
	return result_ClinicalImpression_Finding;
}

CodeSystem*
Deserialize_CodeSystem(Arena *arena, cJSON *codeSystem)
{
	CodeSystem *result_CodeSystem = PushArray(arena, CodeSystem, 1);
	result_CodeSystem->resourceType = ResourceType::CodeSystem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(codeSystem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(codeSystem, "id");
	if(cjson_id)
	{
		result_CodeSystem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(codeSystem, "meta");
	if(cjson_meta)
	{
		result_CodeSystem->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(codeSystem, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CodeSystem->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(codeSystem, "language");
	if(cjson_language)
	{
		result_CodeSystem->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(codeSystem, "text");
	if(cjson_text)
	{
		result_CodeSystem->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(codeSystem, "contained");
	if(cjson_contained)
	{
		result_CodeSystem->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CodeSystem->contained = PushArray(arena, Resource, result_CodeSystem->contained_count);
		for(int i = 0; i < result_CodeSystem->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CodeSystem->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(codeSystem, "extension");
	if(cjson_extension)
	{
		result_CodeSystem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CodeSystem->extension = PushArray(arena, Extension, result_CodeSystem->extension_count);
		for(int i = 0; i < result_CodeSystem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CodeSystem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(codeSystem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CodeSystem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CodeSystem->modifierExtension = PushArray(arena, Extension, result_CodeSystem->modifierExtension_count);
		for(int i = 0; i < result_CodeSystem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CodeSystem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(codeSystem, "url");
	if(cjson_url)
	{
		result_CodeSystem->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(codeSystem, "identifier");
	if(cjson_identifier)
	{
		result_CodeSystem->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_CodeSystem->identifier = PushArray(arena, Identifier, result_CodeSystem->identifier_count);
		for(int i = 0; i < result_CodeSystem->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_CodeSystem->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(codeSystem, "version");
	if(cjson_version)
	{
		result_CodeSystem->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(codeSystem, "name");
	if(cjson_name)
	{
		result_CodeSystem->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(codeSystem, "title");
	if(cjson_title)
	{
		result_CodeSystem->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(codeSystem, "status");
	if(cjson_status)
	{
		result_CodeSystem->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(codeSystem, "experimental");
	if(cjson_experimental)
	{
		result_CodeSystem->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(codeSystem, "date");
	if(cjson_date)
	{
		result_CodeSystem->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(codeSystem, "publisher");
	if(cjson_publisher)
	{
		result_CodeSystem->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(codeSystem, "contact");
	if(cjson_contact)
	{
		result_CodeSystem->contact_count = cJSON_GetArraySize(cjson_contact);
		result_CodeSystem->contact = PushArray(arena, ContactDetail, result_CodeSystem->contact_count);
		for(int i = 0; i < result_CodeSystem->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_CodeSystem->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(codeSystem, "description");
	if(cjson_description)
	{
		result_CodeSystem->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(codeSystem, "useContext");
	if(cjson_useContext)
	{
		result_CodeSystem->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_CodeSystem->useContext = PushArray(arena, UsageContext, result_CodeSystem->useContext_count);
		for(int i = 0; i < result_CodeSystem->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_CodeSystem->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(codeSystem, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_CodeSystem->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_CodeSystem->jurisdiction = PushArray(arena, CodeableConcept, result_CodeSystem->jurisdiction_count);
		for(int i = 0; i < result_CodeSystem->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_CodeSystem->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(codeSystem, "purpose");
	if(cjson_purpose)
	{
		result_CodeSystem->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(codeSystem, "copyright");
	if(cjson_copyright)
	{
		result_CodeSystem->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_caseSensitive =  cJSON_GetObjectItem(codeSystem, "caseSensitive");
	if(cjson_caseSensitive)
	{
		result_CodeSystem->caseSensitive = (boolean)cJSON_IsTrue(cjson_caseSensitive);
	}
	cJSON *cjson_valueSet =  cJSON_GetObjectItem(codeSystem, "valueSet");
	if(cjson_valueSet)
	{
		result_CodeSystem->valueSet = Str8C(cJSON_GetStringValue(cjson_valueSet));
	}
	cJSON *cjson_hierarchyMeaning =  cJSON_GetObjectItem(codeSystem, "hierarchyMeaning");
	if(cjson_hierarchyMeaning)
	{
		result_CodeSystem->hierarchyMeaning = Str8C(cJSON_GetStringValue(cjson_hierarchyMeaning));
	}
	cJSON *cjson_compositional =  cJSON_GetObjectItem(codeSystem, "compositional");
	if(cjson_compositional)
	{
		result_CodeSystem->compositional = (boolean)cJSON_IsTrue(cjson_compositional);
	}
	cJSON *cjson_versionNeeded =  cJSON_GetObjectItem(codeSystem, "versionNeeded");
	if(cjson_versionNeeded)
	{
		result_CodeSystem->versionNeeded = (boolean)cJSON_IsTrue(cjson_versionNeeded);
	}
	cJSON *cjson_content =  cJSON_GetObjectItem(codeSystem, "content");
	if(cjson_content)
	{
		result_CodeSystem->content = Str8C(cJSON_GetStringValue(cjson_content));
	}
	cJSON *cjson_supplements =  cJSON_GetObjectItem(codeSystem, "supplements");
	if(cjson_supplements)
	{
		result_CodeSystem->supplements = Str8C(cJSON_GetStringValue(cjson_supplements));
	}
	cJSON *cjson_count =  cJSON_GetObjectItem(codeSystem, "count");
	if(cjson_count)
	{
		result_CodeSystem->count = (int)cJSON_GetNumberValue(cjson_count);
	}
	cJSON *cjson_filter =  cJSON_GetObjectItem(codeSystem, "filter");
	if(cjson_filter)
	{
		result_CodeSystem->filter_count = cJSON_GetArraySize(cjson_filter);
		result_CodeSystem->filter = PushArray(arena, CodeSystem_Filter, result_CodeSystem->filter_count);
		for(int i = 0; i < result_CodeSystem->filter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_filter, i);
			result_CodeSystem->filter[i] = *Deserialize_CodeSystem_Filter(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(codeSystem, "property");
	if(cjson_property)
	{
		result_CodeSystem->property_count = cJSON_GetArraySize(cjson_property);
		result_CodeSystem->property = PushArray(arena, CodeSystem_Property, result_CodeSystem->property_count);
		for(int i = 0; i < result_CodeSystem->property_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_property, i);
			result_CodeSystem->property[i] = *Deserialize_CodeSystem_Property(arena, internal);
		}

	}
	cJSON *cjson_concept =  cJSON_GetObjectItem(codeSystem, "concept");
	if(cjson_concept)
	{
		result_CodeSystem->concept_count = cJSON_GetArraySize(cjson_concept);
		result_CodeSystem->concept = PushArray(arena, CodeSystem_Concept, result_CodeSystem->concept_count);
		for(int i = 0; i < result_CodeSystem->concept_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_concept, i);
			result_CodeSystem->concept[i] = *Deserialize_CodeSystem_Concept(arena, internal);
		}

	}
	return result_CodeSystem;
}

CodeSystem_Filter*
Deserialize_CodeSystem_Filter(Arena *arena, cJSON *codeSystem_Filter)
{
	CodeSystem_Filter *result_CodeSystem_Filter = PushArray(arena, CodeSystem_Filter, 1);
	result_CodeSystem_Filter->resourceType = ResourceType::CodeSystem_Filter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(codeSystem_Filter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(codeSystem_Filter, "id");
	if(cjson_id)
	{
		result_CodeSystem_Filter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(codeSystem_Filter, "extension");
	if(cjson_extension)
	{
		result_CodeSystem_Filter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CodeSystem_Filter->extension = PushArray(arena, Extension, result_CodeSystem_Filter->extension_count);
		for(int i = 0; i < result_CodeSystem_Filter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CodeSystem_Filter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(codeSystem_Filter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CodeSystem_Filter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CodeSystem_Filter->modifierExtension = PushArray(arena, Extension, result_CodeSystem_Filter->modifierExtension_count);
		for(int i = 0; i < result_CodeSystem_Filter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CodeSystem_Filter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(codeSystem_Filter, "code");
	if(cjson_code)
	{
		result_CodeSystem_Filter->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(codeSystem_Filter, "description");
	if(cjson_description)
	{
		result_CodeSystem_Filter->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_operator_ =  cJSON_GetObjectItem(codeSystem_Filter, "operator_");
	if(cjson_operator_)
	{
		result_CodeSystem_Filter->operator__count = cJSON_GetArraySize(cjson_operator_);
		result_CodeSystem_Filter->operator_ = PushArray(arena, fhir_code, result_CodeSystem_Filter->operator__count);
		for(int i = 0; i < result_CodeSystem_Filter->operator__count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_operator_, i);
			result_CodeSystem_Filter->operator_[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(codeSystem_Filter, "value");
	if(cjson_value)
	{
		result_CodeSystem_Filter->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_CodeSystem_Filter;
}

CodeSystem_Property*
Deserialize_CodeSystem_Property(Arena *arena, cJSON *codeSystem_Property)
{
	CodeSystem_Property *result_CodeSystem_Property = PushArray(arena, CodeSystem_Property, 1);
	result_CodeSystem_Property->resourceType = ResourceType::CodeSystem_Property;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(codeSystem_Property, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(codeSystem_Property, "id");
	if(cjson_id)
	{
		result_CodeSystem_Property->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(codeSystem_Property, "extension");
	if(cjson_extension)
	{
		result_CodeSystem_Property->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CodeSystem_Property->extension = PushArray(arena, Extension, result_CodeSystem_Property->extension_count);
		for(int i = 0; i < result_CodeSystem_Property->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CodeSystem_Property->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(codeSystem_Property, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CodeSystem_Property->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CodeSystem_Property->modifierExtension = PushArray(arena, Extension, result_CodeSystem_Property->modifierExtension_count);
		for(int i = 0; i < result_CodeSystem_Property->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CodeSystem_Property->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(codeSystem_Property, "code");
	if(cjson_code)
	{
		result_CodeSystem_Property->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_uri =  cJSON_GetObjectItem(codeSystem_Property, "uri");
	if(cjson_uri)
	{
		result_CodeSystem_Property->uri = Str8C(cJSON_GetStringValue(cjson_uri));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(codeSystem_Property, "description");
	if(cjson_description)
	{
		result_CodeSystem_Property->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(codeSystem_Property, "type");
	if(cjson_type)
	{
		result_CodeSystem_Property->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	return result_CodeSystem_Property;
}

CodeSystem_Concept*
Deserialize_CodeSystem_Concept(Arena *arena, cJSON *codeSystem_Concept)
{
	CodeSystem_Concept *result_CodeSystem_Concept = PushArray(arena, CodeSystem_Concept, 1);
	result_CodeSystem_Concept->resourceType = ResourceType::CodeSystem_Concept;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(codeSystem_Concept, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(codeSystem_Concept, "id");
	if(cjson_id)
	{
		result_CodeSystem_Concept->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(codeSystem_Concept, "extension");
	if(cjson_extension)
	{
		result_CodeSystem_Concept->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CodeSystem_Concept->extension = PushArray(arena, Extension, result_CodeSystem_Concept->extension_count);
		for(int i = 0; i < result_CodeSystem_Concept->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CodeSystem_Concept->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(codeSystem_Concept, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CodeSystem_Concept->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CodeSystem_Concept->modifierExtension = PushArray(arena, Extension, result_CodeSystem_Concept->modifierExtension_count);
		for(int i = 0; i < result_CodeSystem_Concept->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CodeSystem_Concept->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(codeSystem_Concept, "code");
	if(cjson_code)
	{
		result_CodeSystem_Concept->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(codeSystem_Concept, "display");
	if(cjson_display)
	{
		result_CodeSystem_Concept->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(codeSystem_Concept, "definition");
	if(cjson_definition)
	{
		result_CodeSystem_Concept->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	cJSON *cjson_designation =  cJSON_GetObjectItem(codeSystem_Concept, "designation");
	if(cjson_designation)
	{
		result_CodeSystem_Concept->designation_count = cJSON_GetArraySize(cjson_designation);
		result_CodeSystem_Concept->designation = PushArray(arena, CodeSystem_Concept_Designation, result_CodeSystem_Concept->designation_count);
		for(int i = 0; i < result_CodeSystem_Concept->designation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_designation, i);
			result_CodeSystem_Concept->designation[i] = *Deserialize_CodeSystem_Concept_Designation(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(codeSystem_Concept, "property");
	if(cjson_property)
	{
		result_CodeSystem_Concept->property_count = cJSON_GetArraySize(cjson_property);
		result_CodeSystem_Concept->property = PushArray(arena, CodeSystem_Concept_Property, result_CodeSystem_Concept->property_count);
		for(int i = 0; i < result_CodeSystem_Concept->property_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_property, i);
			result_CodeSystem_Concept->property[i] = *Deserialize_CodeSystem_Concept_Property(arena, internal);
		}

	}
	cJSON *cjson_concept =  cJSON_GetObjectItem(codeSystem_Concept, "concept");
	if(cjson_concept)
	{
		result_CodeSystem_Concept->concept_count = cJSON_GetArraySize(cjson_concept);
		result_CodeSystem_Concept->concept = PushArray(arena, CodeSystem_Concept, result_CodeSystem_Concept->concept_count);
		for(int i = 0; i < result_CodeSystem_Concept->concept_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_concept, i);
			result_CodeSystem_Concept->concept[i] = *Deserialize_CodeSystem_Concept(arena, internal);
		}

	}
	return result_CodeSystem_Concept;
}

CodeSystem_Concept_Designation*
Deserialize_CodeSystem_Concept_Designation(Arena *arena, cJSON *codeSystem_Concept_Designation)
{
	CodeSystem_Concept_Designation *result_CodeSystem_Concept_Designation = PushArray(arena, CodeSystem_Concept_Designation, 1);
	result_CodeSystem_Concept_Designation->resourceType = ResourceType::CodeSystem_Concept_Designation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(codeSystem_Concept_Designation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(codeSystem_Concept_Designation, "id");
	if(cjson_id)
	{
		result_CodeSystem_Concept_Designation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(codeSystem_Concept_Designation, "extension");
	if(cjson_extension)
	{
		result_CodeSystem_Concept_Designation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CodeSystem_Concept_Designation->extension = PushArray(arena, Extension, result_CodeSystem_Concept_Designation->extension_count);
		for(int i = 0; i < result_CodeSystem_Concept_Designation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CodeSystem_Concept_Designation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(codeSystem_Concept_Designation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CodeSystem_Concept_Designation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CodeSystem_Concept_Designation->modifierExtension = PushArray(arena, Extension, result_CodeSystem_Concept_Designation->modifierExtension_count);
		for(int i = 0; i < result_CodeSystem_Concept_Designation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CodeSystem_Concept_Designation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_language =  cJSON_GetObjectItem(codeSystem_Concept_Designation, "language");
	if(cjson_language)
	{
		result_CodeSystem_Concept_Designation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(codeSystem_Concept_Designation, "use");
	if(cjson_use)
	{
		result_CodeSystem_Concept_Designation->use = Deserialize_Coding(arena, cjson_use);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(codeSystem_Concept_Designation, "value");
	if(cjson_value)
	{
		result_CodeSystem_Concept_Designation->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_CodeSystem_Concept_Designation;
}

CodeSystem_Concept_Property*
Deserialize_CodeSystem_Concept_Property(Arena *arena, cJSON *codeSystem_Concept_Property)
{
	CodeSystem_Concept_Property *result_CodeSystem_Concept_Property = PushArray(arena, CodeSystem_Concept_Property, 1);
	result_CodeSystem_Concept_Property->resourceType = ResourceType::CodeSystem_Concept_Property;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(codeSystem_Concept_Property, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(codeSystem_Concept_Property, "id");
	if(cjson_id)
	{
		result_CodeSystem_Concept_Property->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(codeSystem_Concept_Property, "extension");
	if(cjson_extension)
	{
		result_CodeSystem_Concept_Property->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CodeSystem_Concept_Property->extension = PushArray(arena, Extension, result_CodeSystem_Concept_Property->extension_count);
		for(int i = 0; i < result_CodeSystem_Concept_Property->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CodeSystem_Concept_Property->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(codeSystem_Concept_Property, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CodeSystem_Concept_Property->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CodeSystem_Concept_Property->modifierExtension = PushArray(arena, Extension, result_CodeSystem_Concept_Property->modifierExtension_count);
		for(int i = 0; i < result_CodeSystem_Concept_Property->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CodeSystem_Concept_Property->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(codeSystem_Concept_Property, "code");
	if(cjson_code)
	{
		result_CodeSystem_Concept_Property->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	if((bool)cJSON_HasObjectItem(codeSystem_Concept_Property, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(codeSystem_Concept_Property, "valueCode");
		result_CodeSystem_Concept_Property->value.valueCode = Str8C(cJSON_GetStringValue(item));
		result_CodeSystem_Concept_Property->value_type = CodeSystem_Concept_Property::ValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(codeSystem_Concept_Property, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(codeSystem_Concept_Property, "valueCoding");
		result_CodeSystem_Concept_Property->value.valueCoding = Deserialize_Coding(arena, item);
		result_CodeSystem_Concept_Property->value_type = CodeSystem_Concept_Property::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(codeSystem_Concept_Property, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(codeSystem_Concept_Property, "valueString");
		result_CodeSystem_Concept_Property->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_CodeSystem_Concept_Property->value_type = CodeSystem_Concept_Property::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(codeSystem_Concept_Property, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(codeSystem_Concept_Property, "valueInteger");
		result_CodeSystem_Concept_Property->value.valueInteger = Deserialize_Integer(arena, item);
		result_CodeSystem_Concept_Property->value_type = CodeSystem_Concept_Property::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(codeSystem_Concept_Property, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(codeSystem_Concept_Property, "valueBoolean");
		result_CodeSystem_Concept_Property->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_CodeSystem_Concept_Property->value_type = CodeSystem_Concept_Property::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(codeSystem_Concept_Property, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(codeSystem_Concept_Property, "valueDateTime");
		result_CodeSystem_Concept_Property->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_CodeSystem_Concept_Property->value_type = CodeSystem_Concept_Property::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(codeSystem_Concept_Property, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(codeSystem_Concept_Property, "valueDecimal");
		result_CodeSystem_Concept_Property->value.valueDecimal = cJSON_GetNumberValue(item);
		result_CodeSystem_Concept_Property->value_type = CodeSystem_Concept_Property::ValueType::fhir_decimal;
	}


	return result_CodeSystem_Concept_Property;
}

Communication*
Deserialize_Communication(Arena *arena, cJSON *communication)
{
	Communication *result_Communication = PushArray(arena, Communication, 1);
	result_Communication->resourceType = ResourceType::Communication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(communication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(communication, "id");
	if(cjson_id)
	{
		result_Communication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(communication, "meta");
	if(cjson_meta)
	{
		result_Communication->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(communication, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Communication->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(communication, "language");
	if(cjson_language)
	{
		result_Communication->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(communication, "text");
	if(cjson_text)
	{
		result_Communication->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(communication, "contained");
	if(cjson_contained)
	{
		result_Communication->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Communication->contained = PushArray(arena, Resource, result_Communication->contained_count);
		for(int i = 0; i < result_Communication->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Communication->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(communication, "extension");
	if(cjson_extension)
	{
		result_Communication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Communication->extension = PushArray(arena, Extension, result_Communication->extension_count);
		for(int i = 0; i < result_Communication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Communication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(communication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Communication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Communication->modifierExtension = PushArray(arena, Extension, result_Communication->modifierExtension_count);
		for(int i = 0; i < result_Communication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Communication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(communication, "identifier");
	if(cjson_identifier)
	{
		result_Communication->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Communication->identifier = PushArray(arena, Identifier, result_Communication->identifier_count);
		for(int i = 0; i < result_Communication->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Communication->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(communication, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_Communication->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_Communication->instantiatesCanonical = PushArray(arena, fhir_canonical, result_Communication->instantiatesCanonical_count);
		for(int i = 0; i < result_Communication->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_Communication->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(communication, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_Communication->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_Communication->instantiatesUri = PushArray(arena, fhir_uri, result_Communication->instantiatesUri_count);
		for(int i = 0; i < result_Communication->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_Communication->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(communication, "basedOn");
	if(cjson_basedOn)
	{
		result_Communication->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_Communication->basedOn = PushArray(arena, Reference, result_Communication->basedOn_count);
		for(int i = 0; i < result_Communication->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_Communication->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(communication, "partOf");
	if(cjson_partOf)
	{
		result_Communication->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_Communication->partOf = PushArray(arena, Reference, result_Communication->partOf_count);
		for(int i = 0; i < result_Communication->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_Communication->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_inResponseTo =  cJSON_GetObjectItem(communication, "inResponseTo");
	if(cjson_inResponseTo)
	{
		result_Communication->inResponseTo_count = cJSON_GetArraySize(cjson_inResponseTo);
		result_Communication->inResponseTo = PushArray(arena, Reference, result_Communication->inResponseTo_count);
		for(int i = 0; i < result_Communication->inResponseTo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_inResponseTo, i);
			result_Communication->inResponseTo[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(communication, "status");
	if(cjson_status)
	{
		result_Communication->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(communication, "statusReason");
	if(cjson_statusReason)
	{
		result_Communication->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(communication, "category");
	if(cjson_category)
	{
		result_Communication->category_count = cJSON_GetArraySize(cjson_category);
		result_Communication->category = PushArray(arena, CodeableConcept, result_Communication->category_count);
		for(int i = 0; i < result_Communication->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Communication->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(communication, "priority");
	if(cjson_priority)
	{
		result_Communication->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_medium =  cJSON_GetObjectItem(communication, "medium");
	if(cjson_medium)
	{
		result_Communication->medium_count = cJSON_GetArraySize(cjson_medium);
		result_Communication->medium = PushArray(arena, CodeableConcept, result_Communication->medium_count);
		for(int i = 0; i < result_Communication->medium_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_medium, i);
			result_Communication->medium[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(communication, "subject");
	if(cjson_subject)
	{
		result_Communication->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(communication, "topic");
	if(cjson_topic)
	{
		result_Communication->topic = Deserialize_CodeableConcept(arena, cjson_topic);
	}
	cJSON *cjson_about =  cJSON_GetObjectItem(communication, "about");
	if(cjson_about)
	{
		result_Communication->about_count = cJSON_GetArraySize(cjson_about);
		result_Communication->about = PushArray(arena, Reference, result_Communication->about_count);
		for(int i = 0; i < result_Communication->about_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_about, i);
			result_Communication->about[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(communication, "encounter");
	if(cjson_encounter)
	{
		result_Communication->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_sent =  cJSON_GetObjectItem(communication, "sent");
	if(cjson_sent)
	{
		result_Communication->sent = Str8C(cJSON_GetStringValue(cjson_sent));
	}
	cJSON *cjson_received =  cJSON_GetObjectItem(communication, "received");
	if(cjson_received)
	{
		result_Communication->received = Str8C(cJSON_GetStringValue(cjson_received));
	}
	cJSON *cjson_recipient =  cJSON_GetObjectItem(communication, "recipient");
	if(cjson_recipient)
	{
		result_Communication->recipient_count = cJSON_GetArraySize(cjson_recipient);
		result_Communication->recipient = PushArray(arena, Reference, result_Communication->recipient_count);
		for(int i = 0; i < result_Communication->recipient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_recipient, i);
			result_Communication->recipient[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_sender =  cJSON_GetObjectItem(communication, "sender");
	if(cjson_sender)
	{
		result_Communication->sender = Deserialize_Reference(arena, cjson_sender);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(communication, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Communication->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_Communication->reasonCode = PushArray(arena, CodeableConcept, result_Communication->reasonCode_count);
		for(int i = 0; i < result_Communication->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_Communication->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(communication, "reasonReference");
	if(cjson_reasonReference)
	{
		result_Communication->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_Communication->reasonReference = PushArray(arena, Reference, result_Communication->reasonReference_count);
		for(int i = 0; i < result_Communication->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_Communication->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_payload =  cJSON_GetObjectItem(communication, "payload");
	if(cjson_payload)
	{
		result_Communication->payload_count = cJSON_GetArraySize(cjson_payload);
		result_Communication->payload = PushArray(arena, Communication_Payload, result_Communication->payload_count);
		for(int i = 0; i < result_Communication->payload_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_payload, i);
			result_Communication->payload[i] = *Deserialize_Communication_Payload(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(communication, "note");
	if(cjson_note)
	{
		result_Communication->note_count = cJSON_GetArraySize(cjson_note);
		result_Communication->note = PushArray(arena, Annotation, result_Communication->note_count);
		for(int i = 0; i < result_Communication->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Communication->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_Communication;
}

Communication_Payload*
Deserialize_Communication_Payload(Arena *arena, cJSON *communication_Payload)
{
	Communication_Payload *result_Communication_Payload = PushArray(arena, Communication_Payload, 1);
	result_Communication_Payload->resourceType = ResourceType::Communication_Payload;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(communication_Payload, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(communication_Payload, "id");
	if(cjson_id)
	{
		result_Communication_Payload->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(communication_Payload, "extension");
	if(cjson_extension)
	{
		result_Communication_Payload->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Communication_Payload->extension = PushArray(arena, Extension, result_Communication_Payload->extension_count);
		for(int i = 0; i < result_Communication_Payload->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Communication_Payload->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(communication_Payload, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Communication_Payload->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Communication_Payload->modifierExtension = PushArray(arena, Extension, result_Communication_Payload->modifierExtension_count);
		for(int i = 0; i < result_Communication_Payload->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Communication_Payload->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(communication_Payload, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(communication_Payload, "valueString");
		result_Communication_Payload->content.valueString = Str8C(cJSON_GetStringValue(item));
		result_Communication_Payload->content_type = Communication_Payload::ContentType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(communication_Payload, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(communication_Payload, "valueAttachment");
		result_Communication_Payload->content.valueAttachment = Deserialize_Attachment(arena, item);
		result_Communication_Payload->content_type = Communication_Payload::ContentType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(communication_Payload, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(communication_Payload, "valueReference");
		result_Communication_Payload->content.valueReference = Deserialize_Reference(arena, item);
		result_Communication_Payload->content_type = Communication_Payload::ContentType::Reference;
	}


	return result_Communication_Payload;
}

CommunicationRequest*
Deserialize_CommunicationRequest(Arena *arena, cJSON *communicationRequest)
{
	CommunicationRequest *result_CommunicationRequest = PushArray(arena, CommunicationRequest, 1);
	result_CommunicationRequest->resourceType = ResourceType::CommunicationRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(communicationRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(communicationRequest, "id");
	if(cjson_id)
	{
		result_CommunicationRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(communicationRequest, "meta");
	if(cjson_meta)
	{
		result_CommunicationRequest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(communicationRequest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CommunicationRequest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(communicationRequest, "language");
	if(cjson_language)
	{
		result_CommunicationRequest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(communicationRequest, "text");
	if(cjson_text)
	{
		result_CommunicationRequest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(communicationRequest, "contained");
	if(cjson_contained)
	{
		result_CommunicationRequest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CommunicationRequest->contained = PushArray(arena, Resource, result_CommunicationRequest->contained_count);
		for(int i = 0; i < result_CommunicationRequest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CommunicationRequest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(communicationRequest, "extension");
	if(cjson_extension)
	{
		result_CommunicationRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CommunicationRequest->extension = PushArray(arena, Extension, result_CommunicationRequest->extension_count);
		for(int i = 0; i < result_CommunicationRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CommunicationRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(communicationRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CommunicationRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CommunicationRequest->modifierExtension = PushArray(arena, Extension, result_CommunicationRequest->modifierExtension_count);
		for(int i = 0; i < result_CommunicationRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CommunicationRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(communicationRequest, "identifier");
	if(cjson_identifier)
	{
		result_CommunicationRequest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_CommunicationRequest->identifier = PushArray(arena, Identifier, result_CommunicationRequest->identifier_count);
		for(int i = 0; i < result_CommunicationRequest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_CommunicationRequest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(communicationRequest, "basedOn");
	if(cjson_basedOn)
	{
		result_CommunicationRequest->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_CommunicationRequest->basedOn = PushArray(arena, Reference, result_CommunicationRequest->basedOn_count);
		for(int i = 0; i < result_CommunicationRequest->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_CommunicationRequest->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_replaces =  cJSON_GetObjectItem(communicationRequest, "replaces");
	if(cjson_replaces)
	{
		result_CommunicationRequest->replaces_count = cJSON_GetArraySize(cjson_replaces);
		result_CommunicationRequest->replaces = PushArray(arena, Reference, result_CommunicationRequest->replaces_count);
		for(int i = 0; i < result_CommunicationRequest->replaces_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_replaces, i);
			result_CommunicationRequest->replaces[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_groupIdentifier =  cJSON_GetObjectItem(communicationRequest, "groupIdentifier");
	if(cjson_groupIdentifier)
	{
		result_CommunicationRequest->groupIdentifier = Deserialize_Identifier(arena, cjson_groupIdentifier);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(communicationRequest, "status");
	if(cjson_status)
	{
		result_CommunicationRequest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(communicationRequest, "statusReason");
	if(cjson_statusReason)
	{
		result_CommunicationRequest->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(communicationRequest, "category");
	if(cjson_category)
	{
		result_CommunicationRequest->category_count = cJSON_GetArraySize(cjson_category);
		result_CommunicationRequest->category = PushArray(arena, CodeableConcept, result_CommunicationRequest->category_count);
		for(int i = 0; i < result_CommunicationRequest->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_CommunicationRequest->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(communicationRequest, "priority");
	if(cjson_priority)
	{
		result_CommunicationRequest->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_doNotPerform =  cJSON_GetObjectItem(communicationRequest, "doNotPerform");
	if(cjson_doNotPerform)
	{
		result_CommunicationRequest->doNotPerform = (boolean)cJSON_IsTrue(cjson_doNotPerform);
	}
	cJSON *cjson_medium =  cJSON_GetObjectItem(communicationRequest, "medium");
	if(cjson_medium)
	{
		result_CommunicationRequest->medium_count = cJSON_GetArraySize(cjson_medium);
		result_CommunicationRequest->medium = PushArray(arena, CodeableConcept, result_CommunicationRequest->medium_count);
		for(int i = 0; i < result_CommunicationRequest->medium_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_medium, i);
			result_CommunicationRequest->medium[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(communicationRequest, "subject");
	if(cjson_subject)
	{
		result_CommunicationRequest->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_about =  cJSON_GetObjectItem(communicationRequest, "about");
	if(cjson_about)
	{
		result_CommunicationRequest->about_count = cJSON_GetArraySize(cjson_about);
		result_CommunicationRequest->about = PushArray(arena, Reference, result_CommunicationRequest->about_count);
		for(int i = 0; i < result_CommunicationRequest->about_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_about, i);
			result_CommunicationRequest->about[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(communicationRequest, "encounter");
	if(cjson_encounter)
	{
		result_CommunicationRequest->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_payload =  cJSON_GetObjectItem(communicationRequest, "payload");
	if(cjson_payload)
	{
		result_CommunicationRequest->payload_count = cJSON_GetArraySize(cjson_payload);
		result_CommunicationRequest->payload = PushArray(arena, CommunicationRequest_Payload, result_CommunicationRequest->payload_count);
		for(int i = 0; i < result_CommunicationRequest->payload_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_payload, i);
			result_CommunicationRequest->payload[i] = *Deserialize_CommunicationRequest_Payload(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(communicationRequest, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(communicationRequest, "valueDateTime");
		result_CommunicationRequest->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_CommunicationRequest->occurrence_type = CommunicationRequest::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(communicationRequest, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(communicationRequest, "valuePeriod");
		result_CommunicationRequest->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_CommunicationRequest->occurrence_type = CommunicationRequest::OccurrenceType::Period;
	}


	cJSON *cjson_authoredOn =  cJSON_GetObjectItem(communicationRequest, "authoredOn");
	if(cjson_authoredOn)
	{
		result_CommunicationRequest->authoredOn = Str8C(cJSON_GetStringValue(cjson_authoredOn));
	}
	cJSON *cjson_requester =  cJSON_GetObjectItem(communicationRequest, "requester");
	if(cjson_requester)
	{
		result_CommunicationRequest->requester = Deserialize_Reference(arena, cjson_requester);
	}
	cJSON *cjson_recipient =  cJSON_GetObjectItem(communicationRequest, "recipient");
	if(cjson_recipient)
	{
		result_CommunicationRequest->recipient_count = cJSON_GetArraySize(cjson_recipient);
		result_CommunicationRequest->recipient = PushArray(arena, Reference, result_CommunicationRequest->recipient_count);
		for(int i = 0; i < result_CommunicationRequest->recipient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_recipient, i);
			result_CommunicationRequest->recipient[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_sender =  cJSON_GetObjectItem(communicationRequest, "sender");
	if(cjson_sender)
	{
		result_CommunicationRequest->sender = Deserialize_Reference(arena, cjson_sender);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(communicationRequest, "reasonCode");
	if(cjson_reasonCode)
	{
		result_CommunicationRequest->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_CommunicationRequest->reasonCode = PushArray(arena, CodeableConcept, result_CommunicationRequest->reasonCode_count);
		for(int i = 0; i < result_CommunicationRequest->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_CommunicationRequest->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(communicationRequest, "reasonReference");
	if(cjson_reasonReference)
	{
		result_CommunicationRequest->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_CommunicationRequest->reasonReference = PushArray(arena, Reference, result_CommunicationRequest->reasonReference_count);
		for(int i = 0; i < result_CommunicationRequest->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_CommunicationRequest->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(communicationRequest, "note");
	if(cjson_note)
	{
		result_CommunicationRequest->note_count = cJSON_GetArraySize(cjson_note);
		result_CommunicationRequest->note = PushArray(arena, Annotation, result_CommunicationRequest->note_count);
		for(int i = 0; i < result_CommunicationRequest->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_CommunicationRequest->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_CommunicationRequest;
}

CommunicationRequest_Payload*
Deserialize_CommunicationRequest_Payload(Arena *arena, cJSON *communicationRequest_Payload)
{
	CommunicationRequest_Payload *result_CommunicationRequest_Payload = PushArray(arena, CommunicationRequest_Payload, 1);
	result_CommunicationRequest_Payload->resourceType = ResourceType::CommunicationRequest_Payload;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(communicationRequest_Payload, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(communicationRequest_Payload, "id");
	if(cjson_id)
	{
		result_CommunicationRequest_Payload->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(communicationRequest_Payload, "extension");
	if(cjson_extension)
	{
		result_CommunicationRequest_Payload->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CommunicationRequest_Payload->extension = PushArray(arena, Extension, result_CommunicationRequest_Payload->extension_count);
		for(int i = 0; i < result_CommunicationRequest_Payload->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CommunicationRequest_Payload->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(communicationRequest_Payload, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CommunicationRequest_Payload->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CommunicationRequest_Payload->modifierExtension = PushArray(arena, Extension, result_CommunicationRequest_Payload->modifierExtension_count);
		for(int i = 0; i < result_CommunicationRequest_Payload->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CommunicationRequest_Payload->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(communicationRequest_Payload, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(communicationRequest_Payload, "valueString");
		result_CommunicationRequest_Payload->content.valueString = Str8C(cJSON_GetStringValue(item));
		result_CommunicationRequest_Payload->content_type = CommunicationRequest_Payload::ContentType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(communicationRequest_Payload, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(communicationRequest_Payload, "valueAttachment");
		result_CommunicationRequest_Payload->content.valueAttachment = Deserialize_Attachment(arena, item);
		result_CommunicationRequest_Payload->content_type = CommunicationRequest_Payload::ContentType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(communicationRequest_Payload, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(communicationRequest_Payload, "valueReference");
		result_CommunicationRequest_Payload->content.valueReference = Deserialize_Reference(arena, item);
		result_CommunicationRequest_Payload->content_type = CommunicationRequest_Payload::ContentType::Reference;
	}


	return result_CommunicationRequest_Payload;
}

CompartmentDefinition*
Deserialize_CompartmentDefinition(Arena *arena, cJSON *compartmentDefinition)
{
	CompartmentDefinition *result_CompartmentDefinition = PushArray(arena, CompartmentDefinition, 1);
	result_CompartmentDefinition->resourceType = ResourceType::CompartmentDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(compartmentDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(compartmentDefinition, "id");
	if(cjson_id)
	{
		result_CompartmentDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(compartmentDefinition, "meta");
	if(cjson_meta)
	{
		result_CompartmentDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(compartmentDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CompartmentDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(compartmentDefinition, "language");
	if(cjson_language)
	{
		result_CompartmentDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(compartmentDefinition, "text");
	if(cjson_text)
	{
		result_CompartmentDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(compartmentDefinition, "contained");
	if(cjson_contained)
	{
		result_CompartmentDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CompartmentDefinition->contained = PushArray(arena, Resource, result_CompartmentDefinition->contained_count);
		for(int i = 0; i < result_CompartmentDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CompartmentDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(compartmentDefinition, "extension");
	if(cjson_extension)
	{
		result_CompartmentDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CompartmentDefinition->extension = PushArray(arena, Extension, result_CompartmentDefinition->extension_count);
		for(int i = 0; i < result_CompartmentDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CompartmentDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(compartmentDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CompartmentDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CompartmentDefinition->modifierExtension = PushArray(arena, Extension, result_CompartmentDefinition->modifierExtension_count);
		for(int i = 0; i < result_CompartmentDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CompartmentDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(compartmentDefinition, "url");
	if(cjson_url)
	{
		result_CompartmentDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(compartmentDefinition, "version");
	if(cjson_version)
	{
		result_CompartmentDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(compartmentDefinition, "name");
	if(cjson_name)
	{
		result_CompartmentDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(compartmentDefinition, "status");
	if(cjson_status)
	{
		result_CompartmentDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(compartmentDefinition, "experimental");
	if(cjson_experimental)
	{
		result_CompartmentDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(compartmentDefinition, "date");
	if(cjson_date)
	{
		result_CompartmentDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(compartmentDefinition, "publisher");
	if(cjson_publisher)
	{
		result_CompartmentDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(compartmentDefinition, "contact");
	if(cjson_contact)
	{
		result_CompartmentDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_CompartmentDefinition->contact = PushArray(arena, ContactDetail, result_CompartmentDefinition->contact_count);
		for(int i = 0; i < result_CompartmentDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_CompartmentDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(compartmentDefinition, "description");
	if(cjson_description)
	{
		result_CompartmentDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(compartmentDefinition, "useContext");
	if(cjson_useContext)
	{
		result_CompartmentDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_CompartmentDefinition->useContext = PushArray(arena, UsageContext, result_CompartmentDefinition->useContext_count);
		for(int i = 0; i < result_CompartmentDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_CompartmentDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(compartmentDefinition, "purpose");
	if(cjson_purpose)
	{
		result_CompartmentDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(compartmentDefinition, "code");
	if(cjson_code)
	{
		result_CompartmentDefinition->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_search =  cJSON_GetObjectItem(compartmentDefinition, "search");
	if(cjson_search)
	{
		result_CompartmentDefinition->search = (boolean)cJSON_IsTrue(cjson_search);
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(compartmentDefinition, "resource");
	if(cjson_resource)
	{
		result_CompartmentDefinition->resource_count = cJSON_GetArraySize(cjson_resource);
		result_CompartmentDefinition->resource = PushArray(arena, CompartmentDefinition_Resource, result_CompartmentDefinition->resource_count);
		for(int i = 0; i < result_CompartmentDefinition->resource_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resource, i);
			result_CompartmentDefinition->resource[i] = *Deserialize_CompartmentDefinition_Resource(arena, internal);
		}

	}
	return result_CompartmentDefinition;
}

CompartmentDefinition_Resource*
Deserialize_CompartmentDefinition_Resource(Arena *arena, cJSON *compartmentDefinition_Resource)
{
	CompartmentDefinition_Resource *result_CompartmentDefinition_Resource = PushArray(arena, CompartmentDefinition_Resource, 1);
	result_CompartmentDefinition_Resource->resourceType = ResourceType::CompartmentDefinition_Resource;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(compartmentDefinition_Resource, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(compartmentDefinition_Resource, "id");
	if(cjson_id)
	{
		result_CompartmentDefinition_Resource->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(compartmentDefinition_Resource, "extension");
	if(cjson_extension)
	{
		result_CompartmentDefinition_Resource->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CompartmentDefinition_Resource->extension = PushArray(arena, Extension, result_CompartmentDefinition_Resource->extension_count);
		for(int i = 0; i < result_CompartmentDefinition_Resource->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CompartmentDefinition_Resource->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(compartmentDefinition_Resource, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CompartmentDefinition_Resource->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CompartmentDefinition_Resource->modifierExtension = PushArray(arena, Extension, result_CompartmentDefinition_Resource->modifierExtension_count);
		for(int i = 0; i < result_CompartmentDefinition_Resource->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CompartmentDefinition_Resource->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(compartmentDefinition_Resource, "code");
	if(cjson_code)
	{
		result_CompartmentDefinition_Resource->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_param =  cJSON_GetObjectItem(compartmentDefinition_Resource, "param");
	if(cjson_param)
	{
		result_CompartmentDefinition_Resource->param_count = cJSON_GetArraySize(cjson_param);
		result_CompartmentDefinition_Resource->param = PushArray(arena, fhir_string, result_CompartmentDefinition_Resource->param_count);
		for(int i = 0; i < result_CompartmentDefinition_Resource->param_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_param, i);
			result_CompartmentDefinition_Resource->param[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(compartmentDefinition_Resource, "documentation");
	if(cjson_documentation)
	{
		result_CompartmentDefinition_Resource->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_CompartmentDefinition_Resource;
}

Composition*
Deserialize_Composition(Arena *arena, cJSON *composition)
{
	Composition *result_Composition = PushArray(arena, Composition, 1);
	result_Composition->resourceType = ResourceType::Composition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(composition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(composition, "id");
	if(cjson_id)
	{
		result_Composition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(composition, "meta");
	if(cjson_meta)
	{
		result_Composition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(composition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Composition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(composition, "language");
	if(cjson_language)
	{
		result_Composition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(composition, "text");
	if(cjson_text)
	{
		result_Composition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(composition, "contained");
	if(cjson_contained)
	{
		result_Composition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Composition->contained = PushArray(arena, Resource, result_Composition->contained_count);
		for(int i = 0; i < result_Composition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Composition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(composition, "extension");
	if(cjson_extension)
	{
		result_Composition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Composition->extension = PushArray(arena, Extension, result_Composition->extension_count);
		for(int i = 0; i < result_Composition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Composition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(composition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Composition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Composition->modifierExtension = PushArray(arena, Extension, result_Composition->modifierExtension_count);
		for(int i = 0; i < result_Composition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Composition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(composition, "identifier");
	if(cjson_identifier)
	{
		result_Composition->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(composition, "status");
	if(cjson_status)
	{
		result_Composition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(composition, "type");
	if(cjson_type)
	{
		result_Composition->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(composition, "category");
	if(cjson_category)
	{
		result_Composition->category_count = cJSON_GetArraySize(cjson_category);
		result_Composition->category = PushArray(arena, CodeableConcept, result_Composition->category_count);
		for(int i = 0; i < result_Composition->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Composition->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(composition, "subject");
	if(cjson_subject)
	{
		result_Composition->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(composition, "encounter");
	if(cjson_encounter)
	{
		result_Composition->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(composition, "date");
	if(cjson_date)
	{
		result_Composition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(composition, "author");
	if(cjson_author)
	{
		result_Composition->author_count = cJSON_GetArraySize(cjson_author);
		result_Composition->author = PushArray(arena, Reference, result_Composition->author_count);
		for(int i = 0; i < result_Composition->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_Composition->author[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_title =  cJSON_GetObjectItem(composition, "title");
	if(cjson_title)
	{
		result_Composition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_confidentiality =  cJSON_GetObjectItem(composition, "confidentiality");
	if(cjson_confidentiality)
	{
		result_Composition->confidentiality = Str8C(cJSON_GetStringValue(cjson_confidentiality));
	}
	cJSON *cjson_attester =  cJSON_GetObjectItem(composition, "attester");
	if(cjson_attester)
	{
		result_Composition->attester_count = cJSON_GetArraySize(cjson_attester);
		result_Composition->attester = PushArray(arena, Composition_Attester, result_Composition->attester_count);
		for(int i = 0; i < result_Composition->attester_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_attester, i);
			result_Composition->attester[i] = *Deserialize_Composition_Attester(arena, internal);
		}

	}
	cJSON *cjson_custodian =  cJSON_GetObjectItem(composition, "custodian");
	if(cjson_custodian)
	{
		result_Composition->custodian = Deserialize_Reference(arena, cjson_custodian);
	}
	cJSON *cjson_relatesTo =  cJSON_GetObjectItem(composition, "relatesTo");
	if(cjson_relatesTo)
	{
		result_Composition->relatesTo_count = cJSON_GetArraySize(cjson_relatesTo);
		result_Composition->relatesTo = PushArray(arena, Composition_RelatesTo, result_Composition->relatesTo_count);
		for(int i = 0; i < result_Composition->relatesTo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatesTo, i);
			result_Composition->relatesTo[i] = *Deserialize_Composition_RelatesTo(arena, internal);
		}

	}
	cJSON *cjson_event =  cJSON_GetObjectItem(composition, "event");
	if(cjson_event)
	{
		result_Composition->event_count = cJSON_GetArraySize(cjson_event);
		result_Composition->event = PushArray(arena, Composition_Event, result_Composition->event_count);
		for(int i = 0; i < result_Composition->event_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_event, i);
			result_Composition->event[i] = *Deserialize_Composition_Event(arena, internal);
		}

	}
	cJSON *cjson_section =  cJSON_GetObjectItem(composition, "section");
	if(cjson_section)
	{
		result_Composition->section_count = cJSON_GetArraySize(cjson_section);
		result_Composition->section = PushArray(arena, Composition_Section, result_Composition->section_count);
		for(int i = 0; i < result_Composition->section_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_section, i);
			result_Composition->section[i] = *Deserialize_Composition_Section(arena, internal);
		}

	}
	return result_Composition;
}

Composition_Attester*
Deserialize_Composition_Attester(Arena *arena, cJSON *composition_Attester)
{
	Composition_Attester *result_Composition_Attester = PushArray(arena, Composition_Attester, 1);
	result_Composition_Attester->resourceType = ResourceType::Composition_Attester;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(composition_Attester, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(composition_Attester, "id");
	if(cjson_id)
	{
		result_Composition_Attester->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(composition_Attester, "extension");
	if(cjson_extension)
	{
		result_Composition_Attester->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Composition_Attester->extension = PushArray(arena, Extension, result_Composition_Attester->extension_count);
		for(int i = 0; i < result_Composition_Attester->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Composition_Attester->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(composition_Attester, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Composition_Attester->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Composition_Attester->modifierExtension = PushArray(arena, Extension, result_Composition_Attester->modifierExtension_count);
		for(int i = 0; i < result_Composition_Attester->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Composition_Attester->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(composition_Attester, "mode");
	if(cjson_mode)
	{
		result_Composition_Attester->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_time =  cJSON_GetObjectItem(composition_Attester, "time");
	if(cjson_time)
	{
		result_Composition_Attester->time = Str8C(cJSON_GetStringValue(cjson_time));
	}
	cJSON *cjson_party =  cJSON_GetObjectItem(composition_Attester, "party");
	if(cjson_party)
	{
		result_Composition_Attester->party = Deserialize_Reference(arena, cjson_party);
	}
	return result_Composition_Attester;
}

Composition_RelatesTo*
Deserialize_Composition_RelatesTo(Arena *arena, cJSON *composition_RelatesTo)
{
	Composition_RelatesTo *result_Composition_RelatesTo = PushArray(arena, Composition_RelatesTo, 1);
	result_Composition_RelatesTo->resourceType = ResourceType::Composition_RelatesTo;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(composition_RelatesTo, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(composition_RelatesTo, "id");
	if(cjson_id)
	{
		result_Composition_RelatesTo->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(composition_RelatesTo, "extension");
	if(cjson_extension)
	{
		result_Composition_RelatesTo->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Composition_RelatesTo->extension = PushArray(arena, Extension, result_Composition_RelatesTo->extension_count);
		for(int i = 0; i < result_Composition_RelatesTo->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Composition_RelatesTo->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(composition_RelatesTo, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Composition_RelatesTo->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Composition_RelatesTo->modifierExtension = PushArray(arena, Extension, result_Composition_RelatesTo->modifierExtension_count);
		for(int i = 0; i < result_Composition_RelatesTo->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Composition_RelatesTo->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(composition_RelatesTo, "code");
	if(cjson_code)
	{
		result_Composition_RelatesTo->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	if((bool)cJSON_HasObjectItem(composition_RelatesTo, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(composition_RelatesTo, "valueIdentifier");
		result_Composition_RelatesTo->target.valueIdentifier = Deserialize_Identifier(arena, item);
		result_Composition_RelatesTo->target_type = Composition_RelatesTo::TargetType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(composition_RelatesTo, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(composition_RelatesTo, "valueReference");
		result_Composition_RelatesTo->target.valueReference = Deserialize_Reference(arena, item);
		result_Composition_RelatesTo->target_type = Composition_RelatesTo::TargetType::Reference;
	}


	return result_Composition_RelatesTo;
}

Composition_Event*
Deserialize_Composition_Event(Arena *arena, cJSON *composition_Event)
{
	Composition_Event *result_Composition_Event = PushArray(arena, Composition_Event, 1);
	result_Composition_Event->resourceType = ResourceType::Composition_Event;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(composition_Event, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(composition_Event, "id");
	if(cjson_id)
	{
		result_Composition_Event->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(composition_Event, "extension");
	if(cjson_extension)
	{
		result_Composition_Event->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Composition_Event->extension = PushArray(arena, Extension, result_Composition_Event->extension_count);
		for(int i = 0; i < result_Composition_Event->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Composition_Event->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(composition_Event, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Composition_Event->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Composition_Event->modifierExtension = PushArray(arena, Extension, result_Composition_Event->modifierExtension_count);
		for(int i = 0; i < result_Composition_Event->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Composition_Event->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(composition_Event, "code");
	if(cjson_code)
	{
		result_Composition_Event->code_count = cJSON_GetArraySize(cjson_code);
		result_Composition_Event->code = PushArray(arena, CodeableConcept, result_Composition_Event->code_count);
		for(int i = 0; i < result_Composition_Event->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_Composition_Event->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(composition_Event, "period");
	if(cjson_period)
	{
		result_Composition_Event->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(composition_Event, "detail");
	if(cjson_detail)
	{
		result_Composition_Event->detail_count = cJSON_GetArraySize(cjson_detail);
		result_Composition_Event->detail = PushArray(arena, Reference, result_Composition_Event->detail_count);
		for(int i = 0; i < result_Composition_Event->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_Composition_Event->detail[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Composition_Event;
}

Composition_Section*
Deserialize_Composition_Section(Arena *arena, cJSON *composition_Section)
{
	Composition_Section *result_Composition_Section = PushArray(arena, Composition_Section, 1);
	result_Composition_Section->resourceType = ResourceType::Composition_Section;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(composition_Section, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(composition_Section, "id");
	if(cjson_id)
	{
		result_Composition_Section->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(composition_Section, "extension");
	if(cjson_extension)
	{
		result_Composition_Section->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Composition_Section->extension = PushArray(arena, Extension, result_Composition_Section->extension_count);
		for(int i = 0; i < result_Composition_Section->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Composition_Section->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(composition_Section, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Composition_Section->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Composition_Section->modifierExtension = PushArray(arena, Extension, result_Composition_Section->modifierExtension_count);
		for(int i = 0; i < result_Composition_Section->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Composition_Section->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_title =  cJSON_GetObjectItem(composition_Section, "title");
	if(cjson_title)
	{
		result_Composition_Section->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(composition_Section, "code");
	if(cjson_code)
	{
		result_Composition_Section->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(composition_Section, "author");
	if(cjson_author)
	{
		result_Composition_Section->author_count = cJSON_GetArraySize(cjson_author);
		result_Composition_Section->author = PushArray(arena, Reference, result_Composition_Section->author_count);
		for(int i = 0; i < result_Composition_Section->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_Composition_Section->author[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_focus =  cJSON_GetObjectItem(composition_Section, "focus");
	if(cjson_focus)
	{
		result_Composition_Section->focus = Deserialize_Reference(arena, cjson_focus);
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(composition_Section, "text");
	if(cjson_text)
	{
		result_Composition_Section->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(composition_Section, "mode");
	if(cjson_mode)
	{
		result_Composition_Section->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_orderedBy =  cJSON_GetObjectItem(composition_Section, "orderedBy");
	if(cjson_orderedBy)
	{
		result_Composition_Section->orderedBy = Deserialize_CodeableConcept(arena, cjson_orderedBy);
	}
	cJSON *cjson_entry =  cJSON_GetObjectItem(composition_Section, "entry");
	if(cjson_entry)
	{
		result_Composition_Section->entry_count = cJSON_GetArraySize(cjson_entry);
		result_Composition_Section->entry = PushArray(arena, Reference, result_Composition_Section->entry_count);
		for(int i = 0; i < result_Composition_Section->entry_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_entry, i);
			result_Composition_Section->entry[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_emptyReason =  cJSON_GetObjectItem(composition_Section, "emptyReason");
	if(cjson_emptyReason)
	{
		result_Composition_Section->emptyReason = Deserialize_CodeableConcept(arena, cjson_emptyReason);
	}
	cJSON *cjson_section =  cJSON_GetObjectItem(composition_Section, "section");
	if(cjson_section)
	{
		result_Composition_Section->section_count = cJSON_GetArraySize(cjson_section);
		result_Composition_Section->section = PushArray(arena, Composition_Section, result_Composition_Section->section_count);
		for(int i = 0; i < result_Composition_Section->section_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_section, i);
			result_Composition_Section->section[i] = *Deserialize_Composition_Section(arena, internal);
		}

	}
	return result_Composition_Section;
}

ConceptMap*
Deserialize_ConceptMap(Arena *arena, cJSON *conceptMap)
{
	ConceptMap *result_ConceptMap = PushArray(arena, ConceptMap, 1);
	result_ConceptMap->resourceType = ResourceType::ConceptMap;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(conceptMap, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(conceptMap, "id");
	if(cjson_id)
	{
		result_ConceptMap->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(conceptMap, "meta");
	if(cjson_meta)
	{
		result_ConceptMap->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(conceptMap, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ConceptMap->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(conceptMap, "language");
	if(cjson_language)
	{
		result_ConceptMap->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(conceptMap, "text");
	if(cjson_text)
	{
		result_ConceptMap->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(conceptMap, "contained");
	if(cjson_contained)
	{
		result_ConceptMap->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ConceptMap->contained = PushArray(arena, Resource, result_ConceptMap->contained_count);
		for(int i = 0; i < result_ConceptMap->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ConceptMap->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(conceptMap, "extension");
	if(cjson_extension)
	{
		result_ConceptMap->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ConceptMap->extension = PushArray(arena, Extension, result_ConceptMap->extension_count);
		for(int i = 0; i < result_ConceptMap->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ConceptMap->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(conceptMap, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ConceptMap->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ConceptMap->modifierExtension = PushArray(arena, Extension, result_ConceptMap->modifierExtension_count);
		for(int i = 0; i < result_ConceptMap->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ConceptMap->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(conceptMap, "url");
	if(cjson_url)
	{
		result_ConceptMap->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(conceptMap, "identifier");
	if(cjson_identifier)
	{
		result_ConceptMap->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(conceptMap, "version");
	if(cjson_version)
	{
		result_ConceptMap->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(conceptMap, "name");
	if(cjson_name)
	{
		result_ConceptMap->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(conceptMap, "title");
	if(cjson_title)
	{
		result_ConceptMap->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(conceptMap, "status");
	if(cjson_status)
	{
		result_ConceptMap->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(conceptMap, "experimental");
	if(cjson_experimental)
	{
		result_ConceptMap->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(conceptMap, "date");
	if(cjson_date)
	{
		result_ConceptMap->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(conceptMap, "publisher");
	if(cjson_publisher)
	{
		result_ConceptMap->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(conceptMap, "contact");
	if(cjson_contact)
	{
		result_ConceptMap->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ConceptMap->contact = PushArray(arena, ContactDetail, result_ConceptMap->contact_count);
		for(int i = 0; i < result_ConceptMap->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ConceptMap->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(conceptMap, "description");
	if(cjson_description)
	{
		result_ConceptMap->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(conceptMap, "useContext");
	if(cjson_useContext)
	{
		result_ConceptMap->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ConceptMap->useContext = PushArray(arena, UsageContext, result_ConceptMap->useContext_count);
		for(int i = 0; i < result_ConceptMap->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ConceptMap->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(conceptMap, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ConceptMap->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ConceptMap->jurisdiction = PushArray(arena, CodeableConcept, result_ConceptMap->jurisdiction_count);
		for(int i = 0; i < result_ConceptMap->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ConceptMap->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(conceptMap, "purpose");
	if(cjson_purpose)
	{
		result_ConceptMap->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(conceptMap, "copyright");
	if(cjson_copyright)
	{
		result_ConceptMap->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	if((bool)cJSON_HasObjectItem(conceptMap, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(conceptMap, "valueUri");
		result_ConceptMap->source.valueUri = Str8C(cJSON_GetStringValue(item));
		result_ConceptMap->source_type = ConceptMap::SourceType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(conceptMap, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(conceptMap, "valueCanonical");
		result_ConceptMap->source.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ConceptMap->source_type = ConceptMap::SourceType::fhir_canonical;
	}


	if((bool)cJSON_HasObjectItem(conceptMap, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(conceptMap, "valueUri");
		result_ConceptMap->target.valueUri = Str8C(cJSON_GetStringValue(item));
		result_ConceptMap->target_type = ConceptMap::TargetType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(conceptMap, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(conceptMap, "valueCanonical");
		result_ConceptMap->target.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ConceptMap->target_type = ConceptMap::TargetType::fhir_canonical;
	}


	cJSON *cjson_group =  cJSON_GetObjectItem(conceptMap, "group");
	if(cjson_group)
	{
		result_ConceptMap->group_count = cJSON_GetArraySize(cjson_group);
		result_ConceptMap->group = PushArray(arena, ConceptMap_Group, result_ConceptMap->group_count);
		for(int i = 0; i < result_ConceptMap->group_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_group, i);
			result_ConceptMap->group[i] = *Deserialize_ConceptMap_Group(arena, internal);
		}

	}
	return result_ConceptMap;
}

ConceptMap_Group*
Deserialize_ConceptMap_Group(Arena *arena, cJSON *conceptMap_Group)
{
	ConceptMap_Group *result_ConceptMap_Group = PushArray(arena, ConceptMap_Group, 1);
	result_ConceptMap_Group->resourceType = ResourceType::ConceptMap_Group;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(conceptMap_Group, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(conceptMap_Group, "id");
	if(cjson_id)
	{
		result_ConceptMap_Group->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(conceptMap_Group, "extension");
	if(cjson_extension)
	{
		result_ConceptMap_Group->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ConceptMap_Group->extension = PushArray(arena, Extension, result_ConceptMap_Group->extension_count);
		for(int i = 0; i < result_ConceptMap_Group->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ConceptMap_Group->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(conceptMap_Group, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ConceptMap_Group->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ConceptMap_Group->modifierExtension = PushArray(arena, Extension, result_ConceptMap_Group->modifierExtension_count);
		for(int i = 0; i < result_ConceptMap_Group->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ConceptMap_Group->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_source =  cJSON_GetObjectItem(conceptMap_Group, "source");
	if(cjson_source)
	{
		result_ConceptMap_Group->source = Str8C(cJSON_GetStringValue(cjson_source));
	}
	cJSON *cjson_sourceVersion =  cJSON_GetObjectItem(conceptMap_Group, "sourceVersion");
	if(cjson_sourceVersion)
	{
		result_ConceptMap_Group->sourceVersion = Str8C(cJSON_GetStringValue(cjson_sourceVersion));
	}
	cJSON *cjson_target =  cJSON_GetObjectItem(conceptMap_Group, "target");
	if(cjson_target)
	{
		result_ConceptMap_Group->target = Str8C(cJSON_GetStringValue(cjson_target));
	}
	cJSON *cjson_targetVersion =  cJSON_GetObjectItem(conceptMap_Group, "targetVersion");
	if(cjson_targetVersion)
	{
		result_ConceptMap_Group->targetVersion = Str8C(cJSON_GetStringValue(cjson_targetVersion));
	}
	cJSON *cjson_element =  cJSON_GetObjectItem(conceptMap_Group, "element");
	if(cjson_element)
	{
		result_ConceptMap_Group->element_count = cJSON_GetArraySize(cjson_element);
		result_ConceptMap_Group->element = PushArray(arena, ConceptMap_Group_Element, result_ConceptMap_Group->element_count);
		for(int i = 0; i < result_ConceptMap_Group->element_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_element, i);
			result_ConceptMap_Group->element[i] = *Deserialize_ConceptMap_Group_Element(arena, internal);
		}

	}
	cJSON *cjson_unmapped =  cJSON_GetObjectItem(conceptMap_Group, "unmapped");
	if(cjson_unmapped)
	{
		result_ConceptMap_Group->unmapped = Deserialize_ConceptMap_Group_Unmapped(arena, cjson_unmapped);
	}
	return result_ConceptMap_Group;
}

ConceptMap_Group_Element*
Deserialize_ConceptMap_Group_Element(Arena *arena, cJSON *conceptMap_Group_Element)
{
	ConceptMap_Group_Element *result_ConceptMap_Group_Element = PushArray(arena, ConceptMap_Group_Element, 1);
	result_ConceptMap_Group_Element->resourceType = ResourceType::ConceptMap_Group_Element;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(conceptMap_Group_Element, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(conceptMap_Group_Element, "id");
	if(cjson_id)
	{
		result_ConceptMap_Group_Element->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(conceptMap_Group_Element, "extension");
	if(cjson_extension)
	{
		result_ConceptMap_Group_Element->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ConceptMap_Group_Element->extension = PushArray(arena, Extension, result_ConceptMap_Group_Element->extension_count);
		for(int i = 0; i < result_ConceptMap_Group_Element->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ConceptMap_Group_Element->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(conceptMap_Group_Element, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ConceptMap_Group_Element->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ConceptMap_Group_Element->modifierExtension = PushArray(arena, Extension, result_ConceptMap_Group_Element->modifierExtension_count);
		for(int i = 0; i < result_ConceptMap_Group_Element->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ConceptMap_Group_Element->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(conceptMap_Group_Element, "code");
	if(cjson_code)
	{
		result_ConceptMap_Group_Element->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(conceptMap_Group_Element, "display");
	if(cjson_display)
	{
		result_ConceptMap_Group_Element->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_target =  cJSON_GetObjectItem(conceptMap_Group_Element, "target");
	if(cjson_target)
	{
		result_ConceptMap_Group_Element->target_count = cJSON_GetArraySize(cjson_target);
		result_ConceptMap_Group_Element->target = PushArray(arena, ConceptMap_Group_Element_Target, result_ConceptMap_Group_Element->target_count);
		for(int i = 0; i < result_ConceptMap_Group_Element->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_ConceptMap_Group_Element->target[i] = *Deserialize_ConceptMap_Group_Element_Target(arena, internal);
		}

	}
	return result_ConceptMap_Group_Element;
}

ConceptMap_Group_Element_Target*
Deserialize_ConceptMap_Group_Element_Target(Arena *arena, cJSON *conceptMap_Group_Element_Target)
{
	ConceptMap_Group_Element_Target *result_ConceptMap_Group_Element_Target = PushArray(arena, ConceptMap_Group_Element_Target, 1);
	result_ConceptMap_Group_Element_Target->resourceType = ResourceType::ConceptMap_Group_Element_Target;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "id");
	if(cjson_id)
	{
		result_ConceptMap_Group_Element_Target->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "extension");
	if(cjson_extension)
	{
		result_ConceptMap_Group_Element_Target->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ConceptMap_Group_Element_Target->extension = PushArray(arena, Extension, result_ConceptMap_Group_Element_Target->extension_count);
		for(int i = 0; i < result_ConceptMap_Group_Element_Target->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ConceptMap_Group_Element_Target->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ConceptMap_Group_Element_Target->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ConceptMap_Group_Element_Target->modifierExtension = PushArray(arena, Extension, result_ConceptMap_Group_Element_Target->modifierExtension_count);
		for(int i = 0; i < result_ConceptMap_Group_Element_Target->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ConceptMap_Group_Element_Target->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "code");
	if(cjson_code)
	{
		result_ConceptMap_Group_Element_Target->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "display");
	if(cjson_display)
	{
		result_ConceptMap_Group_Element_Target->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_equivalence =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "equivalence");
	if(cjson_equivalence)
	{
		result_ConceptMap_Group_Element_Target->equivalence = Str8C(cJSON_GetStringValue(cjson_equivalence));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "comment");
	if(cjson_comment)
	{
		result_ConceptMap_Group_Element_Target->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_dependsOn =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "dependsOn");
	if(cjson_dependsOn)
	{
		result_ConceptMap_Group_Element_Target->dependsOn_count = cJSON_GetArraySize(cjson_dependsOn);
		result_ConceptMap_Group_Element_Target->dependsOn = PushArray(arena, ConceptMap_Group_Element_Target_DependsOn, result_ConceptMap_Group_Element_Target->dependsOn_count);
		for(int i = 0; i < result_ConceptMap_Group_Element_Target->dependsOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dependsOn, i);
			result_ConceptMap_Group_Element_Target->dependsOn[i] = *Deserialize_ConceptMap_Group_Element_Target_DependsOn(arena, internal);
		}

	}
	cJSON *cjson_product =  cJSON_GetObjectItem(conceptMap_Group_Element_Target, "product");
	if(cjson_product)
	{
		result_ConceptMap_Group_Element_Target->product_count = cJSON_GetArraySize(cjson_product);
		result_ConceptMap_Group_Element_Target->product = PushArray(arena, ConceptMap_Group_Element_Target_DependsOn, result_ConceptMap_Group_Element_Target->product_count);
		for(int i = 0; i < result_ConceptMap_Group_Element_Target->product_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_product, i);
			result_ConceptMap_Group_Element_Target->product[i] = *Deserialize_ConceptMap_Group_Element_Target_DependsOn(arena, internal);
		}

	}
	return result_ConceptMap_Group_Element_Target;
}

ConceptMap_Group_Element_Target_DependsOn*
Deserialize_ConceptMap_Group_Element_Target_DependsOn(Arena *arena, cJSON *conceptMap_Group_Element_Target_DependsOn)
{
	ConceptMap_Group_Element_Target_DependsOn *result_ConceptMap_Group_Element_Target_DependsOn = PushArray(arena, ConceptMap_Group_Element_Target_DependsOn, 1);
	result_ConceptMap_Group_Element_Target_DependsOn->resourceType = ResourceType::ConceptMap_Group_Element_Target_DependsOn;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "id");
	if(cjson_id)
	{
		result_ConceptMap_Group_Element_Target_DependsOn->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "extension");
	if(cjson_extension)
	{
		result_ConceptMap_Group_Element_Target_DependsOn->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ConceptMap_Group_Element_Target_DependsOn->extension = PushArray(arena, Extension, result_ConceptMap_Group_Element_Target_DependsOn->extension_count);
		for(int i = 0; i < result_ConceptMap_Group_Element_Target_DependsOn->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ConceptMap_Group_Element_Target_DependsOn->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ConceptMap_Group_Element_Target_DependsOn->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ConceptMap_Group_Element_Target_DependsOn->modifierExtension = PushArray(arena, Extension, result_ConceptMap_Group_Element_Target_DependsOn->modifierExtension_count);
		for(int i = 0; i < result_ConceptMap_Group_Element_Target_DependsOn->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ConceptMap_Group_Element_Target_DependsOn->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "property");
	if(cjson_property)
	{
		result_ConceptMap_Group_Element_Target_DependsOn->property = Str8C(cJSON_GetStringValue(cjson_property));
	}
	cJSON *cjson_system =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "system");
	if(cjson_system)
	{
		result_ConceptMap_Group_Element_Target_DependsOn->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "value");
	if(cjson_value)
	{
		result_ConceptMap_Group_Element_Target_DependsOn->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(conceptMap_Group_Element_Target_DependsOn, "display");
	if(cjson_display)
	{
		result_ConceptMap_Group_Element_Target_DependsOn->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	return result_ConceptMap_Group_Element_Target_DependsOn;
}

ConceptMap_Group_Unmapped*
Deserialize_ConceptMap_Group_Unmapped(Arena *arena, cJSON *conceptMap_Group_Unmapped)
{
	ConceptMap_Group_Unmapped *result_ConceptMap_Group_Unmapped = PushArray(arena, ConceptMap_Group_Unmapped, 1);
	result_ConceptMap_Group_Unmapped->resourceType = ResourceType::ConceptMap_Group_Unmapped;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "id");
	if(cjson_id)
	{
		result_ConceptMap_Group_Unmapped->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "extension");
	if(cjson_extension)
	{
		result_ConceptMap_Group_Unmapped->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ConceptMap_Group_Unmapped->extension = PushArray(arena, Extension, result_ConceptMap_Group_Unmapped->extension_count);
		for(int i = 0; i < result_ConceptMap_Group_Unmapped->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ConceptMap_Group_Unmapped->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ConceptMap_Group_Unmapped->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ConceptMap_Group_Unmapped->modifierExtension = PushArray(arena, Extension, result_ConceptMap_Group_Unmapped->modifierExtension_count);
		for(int i = 0; i < result_ConceptMap_Group_Unmapped->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ConceptMap_Group_Unmapped->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "mode");
	if(cjson_mode)
	{
		result_ConceptMap_Group_Unmapped->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "code");
	if(cjson_code)
	{
		result_ConceptMap_Group_Unmapped->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "display");
	if(cjson_display)
	{
		result_ConceptMap_Group_Unmapped->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(conceptMap_Group_Unmapped, "url");
	if(cjson_url)
	{
		result_ConceptMap_Group_Unmapped->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	return result_ConceptMap_Group_Unmapped;
}

Condition*
Deserialize_Condition(Arena *arena, cJSON *condition)
{
	Condition *result_Condition = PushArray(arena, Condition, 1);
	result_Condition->resourceType = ResourceType::Condition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(condition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(condition, "id");
	if(cjson_id)
	{
		result_Condition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(condition, "meta");
	if(cjson_meta)
	{
		result_Condition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(condition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Condition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(condition, "language");
	if(cjson_language)
	{
		result_Condition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(condition, "text");
	if(cjson_text)
	{
		result_Condition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(condition, "contained");
	if(cjson_contained)
	{
		result_Condition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Condition->contained = PushArray(arena, Resource, result_Condition->contained_count);
		for(int i = 0; i < result_Condition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Condition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(condition, "extension");
	if(cjson_extension)
	{
		result_Condition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Condition->extension = PushArray(arena, Extension, result_Condition->extension_count);
		for(int i = 0; i < result_Condition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Condition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(condition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Condition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Condition->modifierExtension = PushArray(arena, Extension, result_Condition->modifierExtension_count);
		for(int i = 0; i < result_Condition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Condition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(condition, "identifier");
	if(cjson_identifier)
	{
		result_Condition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Condition->identifier = PushArray(arena, Identifier, result_Condition->identifier_count);
		for(int i = 0; i < result_Condition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Condition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_clinicalStatus =  cJSON_GetObjectItem(condition, "clinicalStatus");
	if(cjson_clinicalStatus)
	{
		result_Condition->clinicalStatus = Deserialize_CodeableConcept(arena, cjson_clinicalStatus);
	}
	cJSON *cjson_verificationStatus =  cJSON_GetObjectItem(condition, "verificationStatus");
	if(cjson_verificationStatus)
	{
		result_Condition->verificationStatus = Deserialize_CodeableConcept(arena, cjson_verificationStatus);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(condition, "category");
	if(cjson_category)
	{
		result_Condition->category_count = cJSON_GetArraySize(cjson_category);
		result_Condition->category = PushArray(arena, CodeableConcept, result_Condition->category_count);
		for(int i = 0; i < result_Condition->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Condition->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_severity =  cJSON_GetObjectItem(condition, "severity");
	if(cjson_severity)
	{
		result_Condition->severity = Deserialize_CodeableConcept(arena, cjson_severity);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(condition, "code");
	if(cjson_code)
	{
		result_Condition->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(condition, "bodySite");
	if(cjson_bodySite)
	{
		result_Condition->bodySite_count = cJSON_GetArraySize(cjson_bodySite);
		result_Condition->bodySite = PushArray(arena, CodeableConcept, result_Condition->bodySite_count);
		for(int i = 0; i < result_Condition->bodySite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_bodySite, i);
			result_Condition->bodySite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(condition, "subject");
	if(cjson_subject)
	{
		result_Condition->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(condition, "encounter");
	if(cjson_encounter)
	{
		result_Condition->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(condition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueDateTime");
		result_Condition->onset.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Condition->onset_type = Condition::OnsetType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueAge");
		result_Condition->onset.valueAge = Deserialize_Age(arena, item);
		result_Condition->onset_type = Condition::OnsetType::Age;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valuePeriod");
		result_Condition->onset.valuePeriod = Deserialize_Period(arena, item);
		result_Condition->onset_type = Condition::OnsetType::Period;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueRange");
		result_Condition->onset.valueRange = Deserialize_Range(arena, item);
		result_Condition->onset_type = Condition::OnsetType::Range;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueString");
		result_Condition->onset.valueString = Str8C(cJSON_GetStringValue(item));
		result_Condition->onset_type = Condition::OnsetType::fhir_string;
	}


	if((bool)cJSON_HasObjectItem(condition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueDateTime");
		result_Condition->abatement.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Condition->abatement_type = Condition::AbatementType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueAge");
		result_Condition->abatement.valueAge = Deserialize_Age(arena, item);
		result_Condition->abatement_type = Condition::AbatementType::Age;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valuePeriod");
		result_Condition->abatement.valuePeriod = Deserialize_Period(arena, item);
		result_Condition->abatement_type = Condition::AbatementType::Period;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueRange");
		result_Condition->abatement.valueRange = Deserialize_Range(arena, item);
		result_Condition->abatement_type = Condition::AbatementType::Range;
	}
	else if((bool)cJSON_HasObjectItem(condition, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(condition, "valueString");
		result_Condition->abatement.valueString = Str8C(cJSON_GetStringValue(item));
		result_Condition->abatement_type = Condition::AbatementType::fhir_string;
	}


	cJSON *cjson_recordedDate =  cJSON_GetObjectItem(condition, "recordedDate");
	if(cjson_recordedDate)
	{
		result_Condition->recordedDate = Str8C(cJSON_GetStringValue(cjson_recordedDate));
	}
	cJSON *cjson_recorder =  cJSON_GetObjectItem(condition, "recorder");
	if(cjson_recorder)
	{
		result_Condition->recorder = Deserialize_Reference(arena, cjson_recorder);
	}
	cJSON *cjson_asserter =  cJSON_GetObjectItem(condition, "asserter");
	if(cjson_asserter)
	{
		result_Condition->asserter = Deserialize_Reference(arena, cjson_asserter);
	}
	cJSON *cjson_stage =  cJSON_GetObjectItem(condition, "stage");
	if(cjson_stage)
	{
		result_Condition->stage_count = cJSON_GetArraySize(cjson_stage);
		result_Condition->stage = PushArray(arena, Condition_Stage, result_Condition->stage_count);
		for(int i = 0; i < result_Condition->stage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_stage, i);
			result_Condition->stage[i] = *Deserialize_Condition_Stage(arena, internal);
		}

	}
	cJSON *cjson_evidence =  cJSON_GetObjectItem(condition, "evidence");
	if(cjson_evidence)
	{
		result_Condition->evidence_count = cJSON_GetArraySize(cjson_evidence);
		result_Condition->evidence = PushArray(arena, Condition_Evidence, result_Condition->evidence_count);
		for(int i = 0; i < result_Condition->evidence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_evidence, i);
			result_Condition->evidence[i] = *Deserialize_Condition_Evidence(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(condition, "note");
	if(cjson_note)
	{
		result_Condition->note_count = cJSON_GetArraySize(cjson_note);
		result_Condition->note = PushArray(arena, Annotation, result_Condition->note_count);
		for(int i = 0; i < result_Condition->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Condition->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_Condition;
}

Condition_Stage*
Deserialize_Condition_Stage(Arena *arena, cJSON *condition_Stage)
{
	Condition_Stage *result_Condition_Stage = PushArray(arena, Condition_Stage, 1);
	result_Condition_Stage->resourceType = ResourceType::Condition_Stage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(condition_Stage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(condition_Stage, "id");
	if(cjson_id)
	{
		result_Condition_Stage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(condition_Stage, "extension");
	if(cjson_extension)
	{
		result_Condition_Stage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Condition_Stage->extension = PushArray(arena, Extension, result_Condition_Stage->extension_count);
		for(int i = 0; i < result_Condition_Stage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Condition_Stage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(condition_Stage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Condition_Stage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Condition_Stage->modifierExtension = PushArray(arena, Extension, result_Condition_Stage->modifierExtension_count);
		for(int i = 0; i < result_Condition_Stage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Condition_Stage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_summary =  cJSON_GetObjectItem(condition_Stage, "summary");
	if(cjson_summary)
	{
		result_Condition_Stage->summary = Deserialize_CodeableConcept(arena, cjson_summary);
	}
	cJSON *cjson_assessment =  cJSON_GetObjectItem(condition_Stage, "assessment");
	if(cjson_assessment)
	{
		result_Condition_Stage->assessment_count = cJSON_GetArraySize(cjson_assessment);
		result_Condition_Stage->assessment = PushArray(arena, Reference, result_Condition_Stage->assessment_count);
		for(int i = 0; i < result_Condition_Stage->assessment_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_assessment, i);
			result_Condition_Stage->assessment[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(condition_Stage, "type");
	if(cjson_type)
	{
		result_Condition_Stage->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	return result_Condition_Stage;
}

Condition_Evidence*
Deserialize_Condition_Evidence(Arena *arena, cJSON *condition_Evidence)
{
	Condition_Evidence *result_Condition_Evidence = PushArray(arena, Condition_Evidence, 1);
	result_Condition_Evidence->resourceType = ResourceType::Condition_Evidence;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(condition_Evidence, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(condition_Evidence, "id");
	if(cjson_id)
	{
		result_Condition_Evidence->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(condition_Evidence, "extension");
	if(cjson_extension)
	{
		result_Condition_Evidence->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Condition_Evidence->extension = PushArray(arena, Extension, result_Condition_Evidence->extension_count);
		for(int i = 0; i < result_Condition_Evidence->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Condition_Evidence->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(condition_Evidence, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Condition_Evidence->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Condition_Evidence->modifierExtension = PushArray(arena, Extension, result_Condition_Evidence->modifierExtension_count);
		for(int i = 0; i < result_Condition_Evidence->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Condition_Evidence->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(condition_Evidence, "code");
	if(cjson_code)
	{
		result_Condition_Evidence->code_count = cJSON_GetArraySize(cjson_code);
		result_Condition_Evidence->code = PushArray(arena, CodeableConcept, result_Condition_Evidence->code_count);
		for(int i = 0; i < result_Condition_Evidence->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_Condition_Evidence->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(condition_Evidence, "detail");
	if(cjson_detail)
	{
		result_Condition_Evidence->detail_count = cJSON_GetArraySize(cjson_detail);
		result_Condition_Evidence->detail = PushArray(arena, Reference, result_Condition_Evidence->detail_count);
		for(int i = 0; i < result_Condition_Evidence->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_Condition_Evidence->detail[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Condition_Evidence;
}

Consent*
Deserialize_Consent(Arena *arena, cJSON *consent)
{
	Consent *result_Consent = PushArray(arena, Consent, 1);
	result_Consent->resourceType = ResourceType::Consent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(consent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(consent, "id");
	if(cjson_id)
	{
		result_Consent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(consent, "meta");
	if(cjson_meta)
	{
		result_Consent->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(consent, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Consent->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(consent, "language");
	if(cjson_language)
	{
		result_Consent->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(consent, "text");
	if(cjson_text)
	{
		result_Consent->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(consent, "contained");
	if(cjson_contained)
	{
		result_Consent->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Consent->contained = PushArray(arena, Resource, result_Consent->contained_count);
		for(int i = 0; i < result_Consent->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Consent->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(consent, "extension");
	if(cjson_extension)
	{
		result_Consent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Consent->extension = PushArray(arena, Extension, result_Consent->extension_count);
		for(int i = 0; i < result_Consent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Consent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(consent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Consent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Consent->modifierExtension = PushArray(arena, Extension, result_Consent->modifierExtension_count);
		for(int i = 0; i < result_Consent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Consent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(consent, "identifier");
	if(cjson_identifier)
	{
		result_Consent->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Consent->identifier = PushArray(arena, Identifier, result_Consent->identifier_count);
		for(int i = 0; i < result_Consent->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Consent->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(consent, "status");
	if(cjson_status)
	{
		result_Consent->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_scope =  cJSON_GetObjectItem(consent, "scope");
	if(cjson_scope)
	{
		result_Consent->scope = Deserialize_CodeableConcept(arena, cjson_scope);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(consent, "category");
	if(cjson_category)
	{
		result_Consent->category_count = cJSON_GetArraySize(cjson_category);
		result_Consent->category = PushArray(arena, CodeableConcept, result_Consent->category_count);
		for(int i = 0; i < result_Consent->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Consent->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(consent, "patient");
	if(cjson_patient)
	{
		result_Consent->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_dateTime =  cJSON_GetObjectItem(consent, "dateTime");
	if(cjson_dateTime)
	{
		result_Consent->dateTime = Str8C(cJSON_GetStringValue(cjson_dateTime));
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(consent, "performer");
	if(cjson_performer)
	{
		result_Consent->performer_count = cJSON_GetArraySize(cjson_performer);
		result_Consent->performer = PushArray(arena, Reference, result_Consent->performer_count);
		for(int i = 0; i < result_Consent->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_Consent->performer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_organization =  cJSON_GetObjectItem(consent, "organization");
	if(cjson_organization)
	{
		result_Consent->organization_count = cJSON_GetArraySize(cjson_organization);
		result_Consent->organization = PushArray(arena, Reference, result_Consent->organization_count);
		for(int i = 0; i < result_Consent->organization_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_organization, i);
			result_Consent->organization[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(consent, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(consent, "valueAttachment");
		result_Consent->source.valueAttachment = Deserialize_Attachment(arena, item);
		result_Consent->source_type = Consent::SourceType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(consent, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(consent, "valueReference");
		result_Consent->source.valueReference = Deserialize_Reference(arena, item);
		result_Consent->source_type = Consent::SourceType::Reference;
	}


	cJSON *cjson_policy =  cJSON_GetObjectItem(consent, "policy");
	if(cjson_policy)
	{
		result_Consent->policy_count = cJSON_GetArraySize(cjson_policy);
		result_Consent->policy = PushArray(arena, Consent_Policy, result_Consent->policy_count);
		for(int i = 0; i < result_Consent->policy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_policy, i);
			result_Consent->policy[i] = *Deserialize_Consent_Policy(arena, internal);
		}

	}
	cJSON *cjson_policyRule =  cJSON_GetObjectItem(consent, "policyRule");
	if(cjson_policyRule)
	{
		result_Consent->policyRule = Deserialize_CodeableConcept(arena, cjson_policyRule);
	}
	cJSON *cjson_verification =  cJSON_GetObjectItem(consent, "verification");
	if(cjson_verification)
	{
		result_Consent->verification_count = cJSON_GetArraySize(cjson_verification);
		result_Consent->verification = PushArray(arena, Consent_Verification, result_Consent->verification_count);
		for(int i = 0; i < result_Consent->verification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_verification, i);
			result_Consent->verification[i] = *Deserialize_Consent_Verification(arena, internal);
		}

	}
	cJSON *cjson_provision =  cJSON_GetObjectItem(consent, "provision");
	if(cjson_provision)
	{
		result_Consent->provision = Deserialize_Consent_Provision(arena, cjson_provision);
	}
	return result_Consent;
}

Consent_Policy*
Deserialize_Consent_Policy(Arena *arena, cJSON *consent_Policy)
{
	Consent_Policy *result_Consent_Policy = PushArray(arena, Consent_Policy, 1);
	result_Consent_Policy->resourceType = ResourceType::Consent_Policy;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(consent_Policy, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(consent_Policy, "id");
	if(cjson_id)
	{
		result_Consent_Policy->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(consent_Policy, "extension");
	if(cjson_extension)
	{
		result_Consent_Policy->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Consent_Policy->extension = PushArray(arena, Extension, result_Consent_Policy->extension_count);
		for(int i = 0; i < result_Consent_Policy->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Consent_Policy->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(consent_Policy, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Consent_Policy->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Consent_Policy->modifierExtension = PushArray(arena, Extension, result_Consent_Policy->modifierExtension_count);
		for(int i = 0; i < result_Consent_Policy->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Consent_Policy->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_authority =  cJSON_GetObjectItem(consent_Policy, "authority");
	if(cjson_authority)
	{
		result_Consent_Policy->authority = Str8C(cJSON_GetStringValue(cjson_authority));
	}
	cJSON *cjson_uri =  cJSON_GetObjectItem(consent_Policy, "uri");
	if(cjson_uri)
	{
		result_Consent_Policy->uri = Str8C(cJSON_GetStringValue(cjson_uri));
	}
	return result_Consent_Policy;
}

Consent_Verification*
Deserialize_Consent_Verification(Arena *arena, cJSON *consent_Verification)
{
	Consent_Verification *result_Consent_Verification = PushArray(arena, Consent_Verification, 1);
	result_Consent_Verification->resourceType = ResourceType::Consent_Verification;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(consent_Verification, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(consent_Verification, "id");
	if(cjson_id)
	{
		result_Consent_Verification->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(consent_Verification, "extension");
	if(cjson_extension)
	{
		result_Consent_Verification->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Consent_Verification->extension = PushArray(arena, Extension, result_Consent_Verification->extension_count);
		for(int i = 0; i < result_Consent_Verification->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Consent_Verification->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(consent_Verification, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Consent_Verification->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Consent_Verification->modifierExtension = PushArray(arena, Extension, result_Consent_Verification->modifierExtension_count);
		for(int i = 0; i < result_Consent_Verification->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Consent_Verification->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_verified =  cJSON_GetObjectItem(consent_Verification, "verified");
	if(cjson_verified)
	{
		result_Consent_Verification->verified = (boolean)cJSON_IsTrue(cjson_verified);
	}
	cJSON *cjson_verifiedWith =  cJSON_GetObjectItem(consent_Verification, "verifiedWith");
	if(cjson_verifiedWith)
	{
		result_Consent_Verification->verifiedWith = Deserialize_Reference(arena, cjson_verifiedWith);
	}
	cJSON *cjson_verificationDate =  cJSON_GetObjectItem(consent_Verification, "verificationDate");
	if(cjson_verificationDate)
	{
		result_Consent_Verification->verificationDate = Str8C(cJSON_GetStringValue(cjson_verificationDate));
	}
	return result_Consent_Verification;
}

Consent_Provision*
Deserialize_Consent_Provision(Arena *arena, cJSON *consent_Provision)
{
	Consent_Provision *result_Consent_Provision = PushArray(arena, Consent_Provision, 1);
	result_Consent_Provision->resourceType = ResourceType::Consent_Provision;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(consent_Provision, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(consent_Provision, "id");
	if(cjson_id)
	{
		result_Consent_Provision->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(consent_Provision, "extension");
	if(cjson_extension)
	{
		result_Consent_Provision->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Consent_Provision->extension = PushArray(arena, Extension, result_Consent_Provision->extension_count);
		for(int i = 0; i < result_Consent_Provision->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Consent_Provision->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(consent_Provision, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Consent_Provision->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Consent_Provision->modifierExtension = PushArray(arena, Extension, result_Consent_Provision->modifierExtension_count);
		for(int i = 0; i < result_Consent_Provision->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Consent_Provision->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(consent_Provision, "type");
	if(cjson_type)
	{
		result_Consent_Provision->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(consent_Provision, "period");
	if(cjson_period)
	{
		result_Consent_Provision->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(consent_Provision, "actor");
	if(cjson_actor)
	{
		result_Consent_Provision->actor_count = cJSON_GetArraySize(cjson_actor);
		result_Consent_Provision->actor = PushArray(arena, Consent_Provision_Actor, result_Consent_Provision->actor_count);
		for(int i = 0; i < result_Consent_Provision->actor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_actor, i);
			result_Consent_Provision->actor[i] = *Deserialize_Consent_Provision_Actor(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(consent_Provision, "action");
	if(cjson_action)
	{
		result_Consent_Provision->action_count = cJSON_GetArraySize(cjson_action);
		result_Consent_Provision->action = PushArray(arena, CodeableConcept, result_Consent_Provision->action_count);
		for(int i = 0; i < result_Consent_Provision->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_Consent_Provision->action[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_securityLabel =  cJSON_GetObjectItem(consent_Provision, "securityLabel");
	if(cjson_securityLabel)
	{
		result_Consent_Provision->securityLabel_count = cJSON_GetArraySize(cjson_securityLabel);
		result_Consent_Provision->securityLabel = PushArray(arena, Coding, result_Consent_Provision->securityLabel_count);
		for(int i = 0; i < result_Consent_Provision->securityLabel_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabel, i);
			result_Consent_Provision->securityLabel[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(consent_Provision, "purpose");
	if(cjson_purpose)
	{
		result_Consent_Provision->purpose_count = cJSON_GetArraySize(cjson_purpose);
		result_Consent_Provision->purpose = PushArray(arena, Coding, result_Consent_Provision->purpose_count);
		for(int i = 0; i < result_Consent_Provision->purpose_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_purpose, i);
			result_Consent_Provision->purpose[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_class_ =  cJSON_GetObjectItem(consent_Provision, "class_");
	if(cjson_class_)
	{
		result_Consent_Provision->class__count = cJSON_GetArraySize(cjson_class_);
		result_Consent_Provision->class_ = PushArray(arena, Coding, result_Consent_Provision->class__count);
		for(int i = 0; i < result_Consent_Provision->class__count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_class_, i);
			result_Consent_Provision->class_[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(consent_Provision, "code");
	if(cjson_code)
	{
		result_Consent_Provision->code_count = cJSON_GetArraySize(cjson_code);
		result_Consent_Provision->code = PushArray(arena, CodeableConcept, result_Consent_Provision->code_count);
		for(int i = 0; i < result_Consent_Provision->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_Consent_Provision->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_dataPeriod =  cJSON_GetObjectItem(consent_Provision, "dataPeriod");
	if(cjson_dataPeriod)
	{
		result_Consent_Provision->dataPeriod = Deserialize_Period(arena, cjson_dataPeriod);
	}
	cJSON *cjson_data =  cJSON_GetObjectItem(consent_Provision, "data");
	if(cjson_data)
	{
		result_Consent_Provision->data_count = cJSON_GetArraySize(cjson_data);
		result_Consent_Provision->data = PushArray(arena, Consent_Provision_Data, result_Consent_Provision->data_count);
		for(int i = 0; i < result_Consent_Provision->data_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_data, i);
			result_Consent_Provision->data[i] = *Deserialize_Consent_Provision_Data(arena, internal);
		}

	}
	cJSON *cjson_provision =  cJSON_GetObjectItem(consent_Provision, "provision");
	if(cjson_provision)
	{
		result_Consent_Provision->provision_count = cJSON_GetArraySize(cjson_provision);
		result_Consent_Provision->provision = PushArray(arena, Consent_Provision, result_Consent_Provision->provision_count);
		for(int i = 0; i < result_Consent_Provision->provision_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_provision, i);
			result_Consent_Provision->provision[i] = *Deserialize_Consent_Provision(arena, internal);
		}

	}
	return result_Consent_Provision;
}

Consent_Provision_Actor*
Deserialize_Consent_Provision_Actor(Arena *arena, cJSON *consent_Provision_Actor)
{
	Consent_Provision_Actor *result_Consent_Provision_Actor = PushArray(arena, Consent_Provision_Actor, 1);
	result_Consent_Provision_Actor->resourceType = ResourceType::Consent_Provision_Actor;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(consent_Provision_Actor, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(consent_Provision_Actor, "id");
	if(cjson_id)
	{
		result_Consent_Provision_Actor->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(consent_Provision_Actor, "extension");
	if(cjson_extension)
	{
		result_Consent_Provision_Actor->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Consent_Provision_Actor->extension = PushArray(arena, Extension, result_Consent_Provision_Actor->extension_count);
		for(int i = 0; i < result_Consent_Provision_Actor->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Consent_Provision_Actor->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(consent_Provision_Actor, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Consent_Provision_Actor->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Consent_Provision_Actor->modifierExtension = PushArray(arena, Extension, result_Consent_Provision_Actor->modifierExtension_count);
		for(int i = 0; i < result_Consent_Provision_Actor->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Consent_Provision_Actor->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_role =  cJSON_GetObjectItem(consent_Provision_Actor, "role");
	if(cjson_role)
	{
		result_Consent_Provision_Actor->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(consent_Provision_Actor, "reference");
	if(cjson_reference)
	{
		result_Consent_Provision_Actor->reference = Deserialize_Reference(arena, cjson_reference);
	}
	return result_Consent_Provision_Actor;
}

Consent_Provision_Data*
Deserialize_Consent_Provision_Data(Arena *arena, cJSON *consent_Provision_Data)
{
	Consent_Provision_Data *result_Consent_Provision_Data = PushArray(arena, Consent_Provision_Data, 1);
	result_Consent_Provision_Data->resourceType = ResourceType::Consent_Provision_Data;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(consent_Provision_Data, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(consent_Provision_Data, "id");
	if(cjson_id)
	{
		result_Consent_Provision_Data->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(consent_Provision_Data, "extension");
	if(cjson_extension)
	{
		result_Consent_Provision_Data->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Consent_Provision_Data->extension = PushArray(arena, Extension, result_Consent_Provision_Data->extension_count);
		for(int i = 0; i < result_Consent_Provision_Data->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Consent_Provision_Data->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(consent_Provision_Data, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Consent_Provision_Data->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Consent_Provision_Data->modifierExtension = PushArray(arena, Extension, result_Consent_Provision_Data->modifierExtension_count);
		for(int i = 0; i < result_Consent_Provision_Data->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Consent_Provision_Data->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_meaning =  cJSON_GetObjectItem(consent_Provision_Data, "meaning");
	if(cjson_meaning)
	{
		result_Consent_Provision_Data->meaning = Str8C(cJSON_GetStringValue(cjson_meaning));
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(consent_Provision_Data, "reference");
	if(cjson_reference)
	{
		result_Consent_Provision_Data->reference = Deserialize_Reference(arena, cjson_reference);
	}
	return result_Consent_Provision_Data;
}

Contract*
Deserialize_Contract(Arena *arena, cJSON *contract)
{
	Contract *result_Contract = PushArray(arena, Contract, 1);
	result_Contract->resourceType = ResourceType::Contract;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract, "id");
	if(cjson_id)
	{
		result_Contract->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(contract, "meta");
	if(cjson_meta)
	{
		result_Contract->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(contract, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Contract->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(contract, "language");
	if(cjson_language)
	{
		result_Contract->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(contract, "text");
	if(cjson_text)
	{
		result_Contract->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(contract, "contained");
	if(cjson_contained)
	{
		result_Contract->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Contract->contained = PushArray(arena, Resource, result_Contract->contained_count);
		for(int i = 0; i < result_Contract->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Contract->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract, "extension");
	if(cjson_extension)
	{
		result_Contract->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract->extension = PushArray(arena, Extension, result_Contract->extension_count);
		for(int i = 0; i < result_Contract->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract->modifierExtension = PushArray(arena, Extension, result_Contract->modifierExtension_count);
		for(int i = 0; i < result_Contract->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(contract, "identifier");
	if(cjson_identifier)
	{
		result_Contract->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Contract->identifier = PushArray(arena, Identifier, result_Contract->identifier_count);
		for(int i = 0; i < result_Contract->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Contract->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(contract, "url");
	if(cjson_url)
	{
		result_Contract->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(contract, "version");
	if(cjson_version)
	{
		result_Contract->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(contract, "status");
	if(cjson_status)
	{
		result_Contract->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_legalState =  cJSON_GetObjectItem(contract, "legalState");
	if(cjson_legalState)
	{
		result_Contract->legalState = Deserialize_CodeableConcept(arena, cjson_legalState);
	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(contract, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_Contract->instantiatesCanonical = Deserialize_Reference(arena, cjson_instantiatesCanonical);
	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(contract, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_Contract->instantiatesUri = Str8C(cJSON_GetStringValue(cjson_instantiatesUri));
	}
	cJSON *cjson_contentDerivative =  cJSON_GetObjectItem(contract, "contentDerivative");
	if(cjson_contentDerivative)
	{
		result_Contract->contentDerivative = Deserialize_CodeableConcept(arena, cjson_contentDerivative);
	}
	cJSON *cjson_issued =  cJSON_GetObjectItem(contract, "issued");
	if(cjson_issued)
	{
		result_Contract->issued = Str8C(cJSON_GetStringValue(cjson_issued));
	}
	cJSON *cjson_applies =  cJSON_GetObjectItem(contract, "applies");
	if(cjson_applies)
	{
		result_Contract->applies = Deserialize_Period(arena, cjson_applies);
	}
	cJSON *cjson_expirationType =  cJSON_GetObjectItem(contract, "expirationType");
	if(cjson_expirationType)
	{
		result_Contract->expirationType = Deserialize_CodeableConcept(arena, cjson_expirationType);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(contract, "subject");
	if(cjson_subject)
	{
		result_Contract->subject_count = cJSON_GetArraySize(cjson_subject);
		result_Contract->subject = PushArray(arena, Reference, result_Contract->subject_count);
		for(int i = 0; i < result_Contract->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_Contract->subject[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_authority =  cJSON_GetObjectItem(contract, "authority");
	if(cjson_authority)
	{
		result_Contract->authority_count = cJSON_GetArraySize(cjson_authority);
		result_Contract->authority = PushArray(arena, Reference, result_Contract->authority_count);
		for(int i = 0; i < result_Contract->authority_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_authority, i);
			result_Contract->authority[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_domain =  cJSON_GetObjectItem(contract, "domain");
	if(cjson_domain)
	{
		result_Contract->domain_count = cJSON_GetArraySize(cjson_domain);
		result_Contract->domain = PushArray(arena, Reference, result_Contract->domain_count);
		for(int i = 0; i < result_Contract->domain_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_domain, i);
			result_Contract->domain[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_site =  cJSON_GetObjectItem(contract, "site");
	if(cjson_site)
	{
		result_Contract->site_count = cJSON_GetArraySize(cjson_site);
		result_Contract->site = PushArray(arena, Reference, result_Contract->site_count);
		for(int i = 0; i < result_Contract->site_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_site, i);
			result_Contract->site[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(contract, "name");
	if(cjson_name)
	{
		result_Contract->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(contract, "title");
	if(cjson_title)
	{
		result_Contract->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(contract, "subtitle");
	if(cjson_subtitle)
	{
		result_Contract->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_alias =  cJSON_GetObjectItem(contract, "alias");
	if(cjson_alias)
	{
		result_Contract->alias_count = cJSON_GetArraySize(cjson_alias);
		result_Contract->alias = PushArray(arena, fhir_string, result_Contract->alias_count);
		for(int i = 0; i < result_Contract->alias_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_alias, i);
			result_Contract->alias[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(contract, "author");
	if(cjson_author)
	{
		result_Contract->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_scope =  cJSON_GetObjectItem(contract, "scope");
	if(cjson_scope)
	{
		result_Contract->scope = Deserialize_CodeableConcept(arena, cjson_scope);
	}
	if((bool)cJSON_HasObjectItem(contract, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract, "valueCodeableConcept");
		result_Contract->topic.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Contract->topic_type = Contract::TopicType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(contract, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract, "valueReference");
		result_Contract->topic.valueReference = Deserialize_Reference(arena, item);
		result_Contract->topic_type = Contract::TopicType::Reference;
	}


	cJSON *cjson_type =  cJSON_GetObjectItem(contract, "type");
	if(cjson_type)
	{
		result_Contract->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subType =  cJSON_GetObjectItem(contract, "subType");
	if(cjson_subType)
	{
		result_Contract->subType_count = cJSON_GetArraySize(cjson_subType);
		result_Contract->subType = PushArray(arena, CodeableConcept, result_Contract->subType_count);
		for(int i = 0; i < result_Contract->subType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subType, i);
			result_Contract->subType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_contentDefinition =  cJSON_GetObjectItem(contract, "contentDefinition");
	if(cjson_contentDefinition)
	{
		result_Contract->contentDefinition = Deserialize_Contract_ContentDefinition(arena, cjson_contentDefinition);
	}
	cJSON *cjson_term =  cJSON_GetObjectItem(contract, "term");
	if(cjson_term)
	{
		result_Contract->term_count = cJSON_GetArraySize(cjson_term);
		result_Contract->term = PushArray(arena, Contract_Term, result_Contract->term_count);
		for(int i = 0; i < result_Contract->term_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_term, i);
			result_Contract->term[i] = *Deserialize_Contract_Term(arena, internal);
		}

	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(contract, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_Contract->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_Contract->supportingInfo = PushArray(arena, Reference, result_Contract->supportingInfo_count);
		for(int i = 0; i < result_Contract->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_Contract->supportingInfo[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_relevantHistory =  cJSON_GetObjectItem(contract, "relevantHistory");
	if(cjson_relevantHistory)
	{
		result_Contract->relevantHistory_count = cJSON_GetArraySize(cjson_relevantHistory);
		result_Contract->relevantHistory = PushArray(arena, Reference, result_Contract->relevantHistory_count);
		for(int i = 0; i < result_Contract->relevantHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relevantHistory, i);
			result_Contract->relevantHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_signer =  cJSON_GetObjectItem(contract, "signer");
	if(cjson_signer)
	{
		result_Contract->signer_count = cJSON_GetArraySize(cjson_signer);
		result_Contract->signer = PushArray(arena, Contract_Signer, result_Contract->signer_count);
		for(int i = 0; i < result_Contract->signer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_signer, i);
			result_Contract->signer[i] = *Deserialize_Contract_Signer(arena, internal);
		}

	}
	cJSON *cjson_friendly =  cJSON_GetObjectItem(contract, "friendly");
	if(cjson_friendly)
	{
		result_Contract->friendly_count = cJSON_GetArraySize(cjson_friendly);
		result_Contract->friendly = PushArray(arena, Contract_Friendly, result_Contract->friendly_count);
		for(int i = 0; i < result_Contract->friendly_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_friendly, i);
			result_Contract->friendly[i] = *Deserialize_Contract_Friendly(arena, internal);
		}

	}
	cJSON *cjson_legal =  cJSON_GetObjectItem(contract, "legal");
	if(cjson_legal)
	{
		result_Contract->legal_count = cJSON_GetArraySize(cjson_legal);
		result_Contract->legal = PushArray(arena, Contract_Legal, result_Contract->legal_count);
		for(int i = 0; i < result_Contract->legal_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_legal, i);
			result_Contract->legal[i] = *Deserialize_Contract_Legal(arena, internal);
		}

	}
	cJSON *cjson_rule =  cJSON_GetObjectItem(contract, "rule");
	if(cjson_rule)
	{
		result_Contract->rule_count = cJSON_GetArraySize(cjson_rule);
		result_Contract->rule = PushArray(arena, Contract_Rule, result_Contract->rule_count);
		for(int i = 0; i < result_Contract->rule_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rule, i);
			result_Contract->rule[i] = *Deserialize_Contract_Rule(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(contract, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract, "valueAttachment");
		result_Contract->legallyBinding.valueAttachment = Deserialize_Attachment(arena, item);
		result_Contract->legallyBinding_type = Contract::LegallyBindingType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(contract, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract, "valueReference");
		result_Contract->legallyBinding.valueReference = Deserialize_Reference(arena, item);
		result_Contract->legallyBinding_type = Contract::LegallyBindingType::Reference;
	}


	return result_Contract;
}

Contract_ContentDefinition*
Deserialize_Contract_ContentDefinition(Arena *arena, cJSON *contract_ContentDefinition)
{
	Contract_ContentDefinition *result_Contract_ContentDefinition = PushArray(arena, Contract_ContentDefinition, 1);
	result_Contract_ContentDefinition->resourceType = ResourceType::Contract_ContentDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_ContentDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_ContentDefinition, "id");
	if(cjson_id)
	{
		result_Contract_ContentDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_ContentDefinition, "extension");
	if(cjson_extension)
	{
		result_Contract_ContentDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_ContentDefinition->extension = PushArray(arena, Extension, result_Contract_ContentDefinition->extension_count);
		for(int i = 0; i < result_Contract_ContentDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_ContentDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_ContentDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_ContentDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_ContentDefinition->modifierExtension = PushArray(arena, Extension, result_Contract_ContentDefinition->modifierExtension_count);
		for(int i = 0; i < result_Contract_ContentDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_ContentDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(contract_ContentDefinition, "type");
	if(cjson_type)
	{
		result_Contract_ContentDefinition->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subType =  cJSON_GetObjectItem(contract_ContentDefinition, "subType");
	if(cjson_subType)
	{
		result_Contract_ContentDefinition->subType = Deserialize_CodeableConcept(arena, cjson_subType);
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(contract_ContentDefinition, "publisher");
	if(cjson_publisher)
	{
		result_Contract_ContentDefinition->publisher = Deserialize_Reference(arena, cjson_publisher);
	}
	cJSON *cjson_publicationDate =  cJSON_GetObjectItem(contract_ContentDefinition, "publicationDate");
	if(cjson_publicationDate)
	{
		result_Contract_ContentDefinition->publicationDate = Str8C(cJSON_GetStringValue(cjson_publicationDate));
	}
	cJSON *cjson_publicationStatus =  cJSON_GetObjectItem(contract_ContentDefinition, "publicationStatus");
	if(cjson_publicationStatus)
	{
		result_Contract_ContentDefinition->publicationStatus = Str8C(cJSON_GetStringValue(cjson_publicationStatus));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(contract_ContentDefinition, "copyright");
	if(cjson_copyright)
	{
		result_Contract_ContentDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	return result_Contract_ContentDefinition;
}

Contract_Term*
Deserialize_Contract_Term(Arena *arena, cJSON *contract_Term)
{
	Contract_Term *result_Contract_Term = PushArray(arena, Contract_Term, 1);
	result_Contract_Term->resourceType = ResourceType::Contract_Term;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term, "id");
	if(cjson_id)
	{
		result_Contract_Term->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term, "extension");
	if(cjson_extension)
	{
		result_Contract_Term->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term->extension = PushArray(arena, Extension, result_Contract_Term->extension_count);
		for(int i = 0; i < result_Contract_Term->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term->modifierExtension = PushArray(arena, Extension, result_Contract_Term->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(contract_Term, "identifier");
	if(cjson_identifier)
	{
		result_Contract_Term->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_issued =  cJSON_GetObjectItem(contract_Term, "issued");
	if(cjson_issued)
	{
		result_Contract_Term->issued = Str8C(cJSON_GetStringValue(cjson_issued));
	}
	cJSON *cjson_applies =  cJSON_GetObjectItem(contract_Term, "applies");
	if(cjson_applies)
	{
		result_Contract_Term->applies = Deserialize_Period(arena, cjson_applies);
	}
	if((bool)cJSON_HasObjectItem(contract_Term, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term, "valueCodeableConcept");
		result_Contract_Term->topic.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Contract_Term->topic_type = Contract_Term::TopicType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term, "valueReference");
		result_Contract_Term->topic.valueReference = Deserialize_Reference(arena, item);
		result_Contract_Term->topic_type = Contract_Term::TopicType::Reference;
	}


	cJSON *cjson_type =  cJSON_GetObjectItem(contract_Term, "type");
	if(cjson_type)
	{
		result_Contract_Term->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subType =  cJSON_GetObjectItem(contract_Term, "subType");
	if(cjson_subType)
	{
		result_Contract_Term->subType = Deserialize_CodeableConcept(arena, cjson_subType);
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(contract_Term, "text");
	if(cjson_text)
	{
		result_Contract_Term->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_securityLabel =  cJSON_GetObjectItem(contract_Term, "securityLabel");
	if(cjson_securityLabel)
	{
		result_Contract_Term->securityLabel_count = cJSON_GetArraySize(cjson_securityLabel);
		result_Contract_Term->securityLabel = PushArray(arena, Contract_Term_SecurityLabel, result_Contract_Term->securityLabel_count);
		for(int i = 0; i < result_Contract_Term->securityLabel_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabel, i);
			result_Contract_Term->securityLabel[i] = *Deserialize_Contract_Term_SecurityLabel(arena, internal);
		}

	}
	cJSON *cjson_offer =  cJSON_GetObjectItem(contract_Term, "offer");
	if(cjson_offer)
	{
		result_Contract_Term->offer = Deserialize_Contract_Term_Offer(arena, cjson_offer);
	}
	cJSON *cjson_asset =  cJSON_GetObjectItem(contract_Term, "asset");
	if(cjson_asset)
	{
		result_Contract_Term->asset_count = cJSON_GetArraySize(cjson_asset);
		result_Contract_Term->asset = PushArray(arena, Contract_Term_Asset, result_Contract_Term->asset_count);
		for(int i = 0; i < result_Contract_Term->asset_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_asset, i);
			result_Contract_Term->asset[i] = *Deserialize_Contract_Term_Asset(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(contract_Term, "action");
	if(cjson_action)
	{
		result_Contract_Term->action_count = cJSON_GetArraySize(cjson_action);
		result_Contract_Term->action = PushArray(arena, Contract_Term_Action, result_Contract_Term->action_count);
		for(int i = 0; i < result_Contract_Term->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_Contract_Term->action[i] = *Deserialize_Contract_Term_Action(arena, internal);
		}

	}
	cJSON *cjson_group =  cJSON_GetObjectItem(contract_Term, "group");
	if(cjson_group)
	{
		result_Contract_Term->group_count = cJSON_GetArraySize(cjson_group);
		result_Contract_Term->group = PushArray(arena, Contract_Term, result_Contract_Term->group_count);
		for(int i = 0; i < result_Contract_Term->group_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_group, i);
			result_Contract_Term->group[i] = *Deserialize_Contract_Term(arena, internal);
		}

	}
	return result_Contract_Term;
}

Contract_Term_SecurityLabel*
Deserialize_Contract_Term_SecurityLabel(Arena *arena, cJSON *contract_Term_SecurityLabel)
{
	Contract_Term_SecurityLabel *result_Contract_Term_SecurityLabel = PushArray(arena, Contract_Term_SecurityLabel, 1);
	result_Contract_Term_SecurityLabel->resourceType = ResourceType::Contract_Term_SecurityLabel;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "id");
	if(cjson_id)
	{
		result_Contract_Term_SecurityLabel->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_SecurityLabel->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_SecurityLabel->extension = PushArray(arena, Extension, result_Contract_Term_SecurityLabel->extension_count);
		for(int i = 0; i < result_Contract_Term_SecurityLabel->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_SecurityLabel->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_SecurityLabel->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_SecurityLabel->modifierExtension = PushArray(arena, Extension, result_Contract_Term_SecurityLabel->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_SecurityLabel->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_SecurityLabel->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_number =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "number");
	if(cjson_number)
	{
		result_Contract_Term_SecurityLabel->number_count = cJSON_GetArraySize(cjson_number);
		result_Contract_Term_SecurityLabel->number = PushArray(arena, fhir_unsignedInt, result_Contract_Term_SecurityLabel->number_count);
		for(int i = 0; i < result_Contract_Term_SecurityLabel->number_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_number, i);
			result_Contract_Term_SecurityLabel->number[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_classification =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "classification");
	if(cjson_classification)
	{
		result_Contract_Term_SecurityLabel->classification = Deserialize_Coding(arena, cjson_classification);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "category");
	if(cjson_category)
	{
		result_Contract_Term_SecurityLabel->category_count = cJSON_GetArraySize(cjson_category);
		result_Contract_Term_SecurityLabel->category = PushArray(arena, Coding, result_Contract_Term_SecurityLabel->category_count);
		for(int i = 0; i < result_Contract_Term_SecurityLabel->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Contract_Term_SecurityLabel->category[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_control =  cJSON_GetObjectItem(contract_Term_SecurityLabel, "control");
	if(cjson_control)
	{
		result_Contract_Term_SecurityLabel->control_count = cJSON_GetArraySize(cjson_control);
		result_Contract_Term_SecurityLabel->control = PushArray(arena, Coding, result_Contract_Term_SecurityLabel->control_count);
		for(int i = 0; i < result_Contract_Term_SecurityLabel->control_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_control, i);
			result_Contract_Term_SecurityLabel->control[i] = *Deserialize_Coding(arena, internal);
		}

	}
	return result_Contract_Term_SecurityLabel;
}

Contract_Term_Offer*
Deserialize_Contract_Term_Offer(Arena *arena, cJSON *contract_Term_Offer)
{
	Contract_Term_Offer *result_Contract_Term_Offer = PushArray(arena, Contract_Term_Offer, 1);
	result_Contract_Term_Offer->resourceType = ResourceType::Contract_Term_Offer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Offer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Offer, "id");
	if(cjson_id)
	{
		result_Contract_Term_Offer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Offer, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Offer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Offer->extension = PushArray(arena, Extension, result_Contract_Term_Offer->extension_count);
		for(int i = 0; i < result_Contract_Term_Offer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Offer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Offer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Offer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Offer->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Offer->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Offer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Offer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(contract_Term_Offer, "identifier");
	if(cjson_identifier)
	{
		result_Contract_Term_Offer->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Contract_Term_Offer->identifier = PushArray(arena, Identifier, result_Contract_Term_Offer->identifier_count);
		for(int i = 0; i < result_Contract_Term_Offer->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Contract_Term_Offer->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_party =  cJSON_GetObjectItem(contract_Term_Offer, "party");
	if(cjson_party)
	{
		result_Contract_Term_Offer->party_count = cJSON_GetArraySize(cjson_party);
		result_Contract_Term_Offer->party = PushArray(arena, Contract_Term_Offer_Party, result_Contract_Term_Offer->party_count);
		for(int i = 0; i < result_Contract_Term_Offer->party_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_party, i);
			result_Contract_Term_Offer->party[i] = *Deserialize_Contract_Term_Offer_Party(arena, internal);
		}

	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(contract_Term_Offer, "topic");
	if(cjson_topic)
	{
		result_Contract_Term_Offer->topic = Deserialize_Reference(arena, cjson_topic);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(contract_Term_Offer, "type");
	if(cjson_type)
	{
		result_Contract_Term_Offer->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_decision =  cJSON_GetObjectItem(contract_Term_Offer, "decision");
	if(cjson_decision)
	{
		result_Contract_Term_Offer->decision = Deserialize_CodeableConcept(arena, cjson_decision);
	}
	cJSON *cjson_decisionMode =  cJSON_GetObjectItem(contract_Term_Offer, "decisionMode");
	if(cjson_decisionMode)
	{
		result_Contract_Term_Offer->decisionMode_count = cJSON_GetArraySize(cjson_decisionMode);
		result_Contract_Term_Offer->decisionMode = PushArray(arena, CodeableConcept, result_Contract_Term_Offer->decisionMode_count);
		for(int i = 0; i < result_Contract_Term_Offer->decisionMode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_decisionMode, i);
			result_Contract_Term_Offer->decisionMode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_answer =  cJSON_GetObjectItem(contract_Term_Offer, "answer");
	if(cjson_answer)
	{
		result_Contract_Term_Offer->answer_count = cJSON_GetArraySize(cjson_answer);
		result_Contract_Term_Offer->answer = PushArray(arena, Contract_Term_Offer_Answer, result_Contract_Term_Offer->answer_count);
		for(int i = 0; i < result_Contract_Term_Offer->answer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_answer, i);
			result_Contract_Term_Offer->answer[i] = *Deserialize_Contract_Term_Offer_Answer(arena, internal);
		}

	}
	cJSON *cjson_text =  cJSON_GetObjectItem(contract_Term_Offer, "text");
	if(cjson_text)
	{
		result_Contract_Term_Offer->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_linkId =  cJSON_GetObjectItem(contract_Term_Offer, "linkId");
	if(cjson_linkId)
	{
		result_Contract_Term_Offer->linkId_count = cJSON_GetArraySize(cjson_linkId);
		result_Contract_Term_Offer->linkId = PushArray(arena, fhir_string, result_Contract_Term_Offer->linkId_count);
		for(int i = 0; i < result_Contract_Term_Offer->linkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_linkId, i);
			result_Contract_Term_Offer->linkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_securityLabelNumber =  cJSON_GetObjectItem(contract_Term_Offer, "securityLabelNumber");
	if(cjson_securityLabelNumber)
	{
		result_Contract_Term_Offer->securityLabelNumber_count = cJSON_GetArraySize(cjson_securityLabelNumber);
		result_Contract_Term_Offer->securityLabelNumber = PushArray(arena, fhir_unsignedInt, result_Contract_Term_Offer->securityLabelNumber_count);
		for(int i = 0; i < result_Contract_Term_Offer->securityLabelNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabelNumber, i);
			result_Contract_Term_Offer->securityLabelNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	return result_Contract_Term_Offer;
}

Contract_Term_Offer_Party*
Deserialize_Contract_Term_Offer_Party(Arena *arena, cJSON *contract_Term_Offer_Party)
{
	Contract_Term_Offer_Party *result_Contract_Term_Offer_Party = PushArray(arena, Contract_Term_Offer_Party, 1);
	result_Contract_Term_Offer_Party->resourceType = ResourceType::Contract_Term_Offer_Party;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Offer_Party, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Offer_Party, "id");
	if(cjson_id)
	{
		result_Contract_Term_Offer_Party->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Offer_Party, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Offer_Party->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Offer_Party->extension = PushArray(arena, Extension, result_Contract_Term_Offer_Party->extension_count);
		for(int i = 0; i < result_Contract_Term_Offer_Party->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Offer_Party->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Offer_Party, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Offer_Party->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Offer_Party->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Offer_Party->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Offer_Party->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Offer_Party->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(contract_Term_Offer_Party, "reference");
	if(cjson_reference)
	{
		result_Contract_Term_Offer_Party->reference_count = cJSON_GetArraySize(cjson_reference);
		result_Contract_Term_Offer_Party->reference = PushArray(arena, Reference, result_Contract_Term_Offer_Party->reference_count);
		for(int i = 0; i < result_Contract_Term_Offer_Party->reference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reference, i);
			result_Contract_Term_Offer_Party->reference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_role =  cJSON_GetObjectItem(contract_Term_Offer_Party, "role");
	if(cjson_role)
	{
		result_Contract_Term_Offer_Party->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	return result_Contract_Term_Offer_Party;
}

Contract_Term_Offer_Answer*
Deserialize_Contract_Term_Offer_Answer(Arena *arena, cJSON *contract_Term_Offer_Answer)
{
	Contract_Term_Offer_Answer *result_Contract_Term_Offer_Answer = PushArray(arena, Contract_Term_Offer_Answer, 1);
	result_Contract_Term_Offer_Answer->resourceType = ResourceType::Contract_Term_Offer_Answer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Offer_Answer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Offer_Answer, "id");
	if(cjson_id)
	{
		result_Contract_Term_Offer_Answer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Offer_Answer, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Offer_Answer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Offer_Answer->extension = PushArray(arena, Extension, result_Contract_Term_Offer_Answer->extension_count);
		for(int i = 0; i < result_Contract_Term_Offer_Answer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Offer_Answer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Offer_Answer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Offer_Answer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Offer_Answer->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Offer_Answer->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Offer_Answer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Offer_Answer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueBoolean");
		result_Contract_Term_Offer_Answer->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueDecimal");
		result_Contract_Term_Offer_Answer->value.valueDecimal = cJSON_GetNumberValue(item);
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueInteger");
		result_Contract_Term_Offer_Answer->value.valueInteger = Deserialize_Integer(arena, item);
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueDate");
		result_Contract_Term_Offer_Answer->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueDateTime");
		result_Contract_Term_Offer_Answer->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueTime");
		result_Contract_Term_Offer_Answer->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueString");
		result_Contract_Term_Offer_Answer->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueUri");
		result_Contract_Term_Offer_Answer->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueAttachment");
		result_Contract_Term_Offer_Answer->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueCoding");
		result_Contract_Term_Offer_Answer->value.valueCoding = Deserialize_Coding(arena, item);
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueQuantity");
		result_Contract_Term_Offer_Answer->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Offer_Answer, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Offer_Answer, "valueReference");
		result_Contract_Term_Offer_Answer->value.valueReference = Deserialize_Reference(arena, item);
		result_Contract_Term_Offer_Answer->value_type = Contract_Term_Offer_Answer::ValueType::Reference;
	}


	return result_Contract_Term_Offer_Answer;
}

Contract_Term_Asset*
Deserialize_Contract_Term_Asset(Arena *arena, cJSON *contract_Term_Asset)
{
	Contract_Term_Asset *result_Contract_Term_Asset = PushArray(arena, Contract_Term_Asset, 1);
	result_Contract_Term_Asset->resourceType = ResourceType::Contract_Term_Asset;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Asset, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Asset, "id");
	if(cjson_id)
	{
		result_Contract_Term_Asset->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Asset, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Asset->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Asset->extension = PushArray(arena, Extension, result_Contract_Term_Asset->extension_count);
		for(int i = 0; i < result_Contract_Term_Asset->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Asset->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Asset, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Asset->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Asset->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Asset->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Asset->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Asset->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_scope =  cJSON_GetObjectItem(contract_Term_Asset, "scope");
	if(cjson_scope)
	{
		result_Contract_Term_Asset->scope = Deserialize_CodeableConcept(arena, cjson_scope);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(contract_Term_Asset, "type");
	if(cjson_type)
	{
		result_Contract_Term_Asset->type_count = cJSON_GetArraySize(cjson_type);
		result_Contract_Term_Asset->type = PushArray(arena, CodeableConcept, result_Contract_Term_Asset->type_count);
		for(int i = 0; i < result_Contract_Term_Asset->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Contract_Term_Asset->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_typeReference =  cJSON_GetObjectItem(contract_Term_Asset, "typeReference");
	if(cjson_typeReference)
	{
		result_Contract_Term_Asset->typeReference_count = cJSON_GetArraySize(cjson_typeReference);
		result_Contract_Term_Asset->typeReference = PushArray(arena, Reference, result_Contract_Term_Asset->typeReference_count);
		for(int i = 0; i < result_Contract_Term_Asset->typeReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_typeReference, i);
			result_Contract_Term_Asset->typeReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_subtype =  cJSON_GetObjectItem(contract_Term_Asset, "subtype");
	if(cjson_subtype)
	{
		result_Contract_Term_Asset->subtype_count = cJSON_GetArraySize(cjson_subtype);
		result_Contract_Term_Asset->subtype = PushArray(arena, CodeableConcept, result_Contract_Term_Asset->subtype_count);
		for(int i = 0; i < result_Contract_Term_Asset->subtype_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subtype, i);
			result_Contract_Term_Asset->subtype[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(contract_Term_Asset, "relationship");
	if(cjson_relationship)
	{
		result_Contract_Term_Asset->relationship = Deserialize_Coding(arena, cjson_relationship);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(contract_Term_Asset, "context");
	if(cjson_context)
	{
		result_Contract_Term_Asset->context_count = cJSON_GetArraySize(cjson_context);
		result_Contract_Term_Asset->context = PushArray(arena, Contract_Term_Asset_Context, result_Contract_Term_Asset->context_count);
		for(int i = 0; i < result_Contract_Term_Asset->context_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_context, i);
			result_Contract_Term_Asset->context[i] = *Deserialize_Contract_Term_Asset_Context(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(contract_Term_Asset, "condition");
	if(cjson_condition)
	{
		result_Contract_Term_Asset->condition = Str8C(cJSON_GetStringValue(cjson_condition));
	}
	cJSON *cjson_periodType =  cJSON_GetObjectItem(contract_Term_Asset, "periodType");
	if(cjson_periodType)
	{
		result_Contract_Term_Asset->periodType_count = cJSON_GetArraySize(cjson_periodType);
		result_Contract_Term_Asset->periodType = PushArray(arena, CodeableConcept, result_Contract_Term_Asset->periodType_count);
		for(int i = 0; i < result_Contract_Term_Asset->periodType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_periodType, i);
			result_Contract_Term_Asset->periodType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(contract_Term_Asset, "period");
	if(cjson_period)
	{
		result_Contract_Term_Asset->period_count = cJSON_GetArraySize(cjson_period);
		result_Contract_Term_Asset->period = PushArray(arena, Period, result_Contract_Term_Asset->period_count);
		for(int i = 0; i < result_Contract_Term_Asset->period_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_period, i);
			result_Contract_Term_Asset->period[i] = *Deserialize_Period(arena, internal);
		}

	}
	cJSON *cjson_usePeriod =  cJSON_GetObjectItem(contract_Term_Asset, "usePeriod");
	if(cjson_usePeriod)
	{
		result_Contract_Term_Asset->usePeriod_count = cJSON_GetArraySize(cjson_usePeriod);
		result_Contract_Term_Asset->usePeriod = PushArray(arena, Period, result_Contract_Term_Asset->usePeriod_count);
		for(int i = 0; i < result_Contract_Term_Asset->usePeriod_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_usePeriod, i);
			result_Contract_Term_Asset->usePeriod[i] = *Deserialize_Period(arena, internal);
		}

	}
	cJSON *cjson_text =  cJSON_GetObjectItem(contract_Term_Asset, "text");
	if(cjson_text)
	{
		result_Contract_Term_Asset->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_linkId =  cJSON_GetObjectItem(contract_Term_Asset, "linkId");
	if(cjson_linkId)
	{
		result_Contract_Term_Asset->linkId_count = cJSON_GetArraySize(cjson_linkId);
		result_Contract_Term_Asset->linkId = PushArray(arena, fhir_string, result_Contract_Term_Asset->linkId_count);
		for(int i = 0; i < result_Contract_Term_Asset->linkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_linkId, i);
			result_Contract_Term_Asset->linkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_answer =  cJSON_GetObjectItem(contract_Term_Asset, "answer");
	if(cjson_answer)
	{
		result_Contract_Term_Asset->answer_count = cJSON_GetArraySize(cjson_answer);
		result_Contract_Term_Asset->answer = PushArray(arena, Contract_Term_Offer_Answer, result_Contract_Term_Asset->answer_count);
		for(int i = 0; i < result_Contract_Term_Asset->answer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_answer, i);
			result_Contract_Term_Asset->answer[i] = *Deserialize_Contract_Term_Offer_Answer(arena, internal);
		}

	}
	cJSON *cjson_securityLabelNumber =  cJSON_GetObjectItem(contract_Term_Asset, "securityLabelNumber");
	if(cjson_securityLabelNumber)
	{
		result_Contract_Term_Asset->securityLabelNumber_count = cJSON_GetArraySize(cjson_securityLabelNumber);
		result_Contract_Term_Asset->securityLabelNumber = PushArray(arena, fhir_unsignedInt, result_Contract_Term_Asset->securityLabelNumber_count);
		for(int i = 0; i < result_Contract_Term_Asset->securityLabelNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabelNumber, i);
			result_Contract_Term_Asset->securityLabelNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_valuedItem =  cJSON_GetObjectItem(contract_Term_Asset, "valuedItem");
	if(cjson_valuedItem)
	{
		result_Contract_Term_Asset->valuedItem_count = cJSON_GetArraySize(cjson_valuedItem);
		result_Contract_Term_Asset->valuedItem = PushArray(arena, Contract_Term_Asset_ValuedItem, result_Contract_Term_Asset->valuedItem_count);
		for(int i = 0; i < result_Contract_Term_Asset->valuedItem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_valuedItem, i);
			result_Contract_Term_Asset->valuedItem[i] = *Deserialize_Contract_Term_Asset_ValuedItem(arena, internal);
		}

	}
	return result_Contract_Term_Asset;
}

Contract_Term_Asset_Context*
Deserialize_Contract_Term_Asset_Context(Arena *arena, cJSON *contract_Term_Asset_Context)
{
	Contract_Term_Asset_Context *result_Contract_Term_Asset_Context = PushArray(arena, Contract_Term_Asset_Context, 1);
	result_Contract_Term_Asset_Context->resourceType = ResourceType::Contract_Term_Asset_Context;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Asset_Context, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Asset_Context, "id");
	if(cjson_id)
	{
		result_Contract_Term_Asset_Context->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Asset_Context, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Asset_Context->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Asset_Context->extension = PushArray(arena, Extension, result_Contract_Term_Asset_Context->extension_count);
		for(int i = 0; i < result_Contract_Term_Asset_Context->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Asset_Context->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Asset_Context, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Asset_Context->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Asset_Context->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Asset_Context->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Asset_Context->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Asset_Context->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(contract_Term_Asset_Context, "reference");
	if(cjson_reference)
	{
		result_Contract_Term_Asset_Context->reference = Deserialize_Reference(arena, cjson_reference);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(contract_Term_Asset_Context, "code");
	if(cjson_code)
	{
		result_Contract_Term_Asset_Context->code_count = cJSON_GetArraySize(cjson_code);
		result_Contract_Term_Asset_Context->code = PushArray(arena, CodeableConcept, result_Contract_Term_Asset_Context->code_count);
		for(int i = 0; i < result_Contract_Term_Asset_Context->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_Contract_Term_Asset_Context->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_text =  cJSON_GetObjectItem(contract_Term_Asset_Context, "text");
	if(cjson_text)
	{
		result_Contract_Term_Asset_Context->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	return result_Contract_Term_Asset_Context;
}

Contract_Term_Asset_ValuedItem*
Deserialize_Contract_Term_Asset_ValuedItem(Arena *arena, cJSON *contract_Term_Asset_ValuedItem)
{
	Contract_Term_Asset_ValuedItem *result_Contract_Term_Asset_ValuedItem = PushArray(arena, Contract_Term_Asset_ValuedItem, 1);
	result_Contract_Term_Asset_ValuedItem->resourceType = ResourceType::Contract_Term_Asset_ValuedItem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "id");
	if(cjson_id)
	{
		result_Contract_Term_Asset_ValuedItem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Asset_ValuedItem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Asset_ValuedItem->extension = PushArray(arena, Extension, result_Contract_Term_Asset_ValuedItem->extension_count);
		for(int i = 0; i < result_Contract_Term_Asset_ValuedItem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Asset_ValuedItem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Asset_ValuedItem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Asset_ValuedItem->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Asset_ValuedItem->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Asset_ValuedItem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Asset_ValuedItem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(contract_Term_Asset_ValuedItem, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "valueCodeableConcept");
		result_Contract_Term_Asset_ValuedItem->entity.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Contract_Term_Asset_ValuedItem->entity_type = Contract_Term_Asset_ValuedItem::EntityType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Asset_ValuedItem, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "valueReference");
		result_Contract_Term_Asset_ValuedItem->entity.valueReference = Deserialize_Reference(arena, item);
		result_Contract_Term_Asset_ValuedItem->entity_type = Contract_Term_Asset_ValuedItem::EntityType::Reference;
	}


	cJSON *cjson_identifier =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "identifier");
	if(cjson_identifier)
	{
		result_Contract_Term_Asset_ValuedItem->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_effectiveTime =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "effectiveTime");
	if(cjson_effectiveTime)
	{
		result_Contract_Term_Asset_ValuedItem->effectiveTime = Str8C(cJSON_GetStringValue(cjson_effectiveTime));
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "quantity");
	if(cjson_quantity)
	{
		result_Contract_Term_Asset_ValuedItem->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "unitPrice");
	if(cjson_unitPrice)
	{
		result_Contract_Term_Asset_ValuedItem->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "factor");
	if(cjson_factor)
	{
		result_Contract_Term_Asset_ValuedItem->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_points =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "points");
	if(cjson_points)
	{
		result_Contract_Term_Asset_ValuedItem->points = cJSON_GetNumberValue(cjson_points);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "net");
	if(cjson_net)
	{
		result_Contract_Term_Asset_ValuedItem->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_payment =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "payment");
	if(cjson_payment)
	{
		result_Contract_Term_Asset_ValuedItem->payment = Str8C(cJSON_GetStringValue(cjson_payment));
	}
	cJSON *cjson_paymentDate =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "paymentDate");
	if(cjson_paymentDate)
	{
		result_Contract_Term_Asset_ValuedItem->paymentDate = Str8C(cJSON_GetStringValue(cjson_paymentDate));
	}
	cJSON *cjson_responsible =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "responsible");
	if(cjson_responsible)
	{
		result_Contract_Term_Asset_ValuedItem->responsible = Deserialize_Reference(arena, cjson_responsible);
	}
	cJSON *cjson_recipient =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "recipient");
	if(cjson_recipient)
	{
		result_Contract_Term_Asset_ValuedItem->recipient = Deserialize_Reference(arena, cjson_recipient);
	}
	cJSON *cjson_linkId =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "linkId");
	if(cjson_linkId)
	{
		result_Contract_Term_Asset_ValuedItem->linkId_count = cJSON_GetArraySize(cjson_linkId);
		result_Contract_Term_Asset_ValuedItem->linkId = PushArray(arena, fhir_string, result_Contract_Term_Asset_ValuedItem->linkId_count);
		for(int i = 0; i < result_Contract_Term_Asset_ValuedItem->linkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_linkId, i);
			result_Contract_Term_Asset_ValuedItem->linkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_securityLabelNumber =  cJSON_GetObjectItem(contract_Term_Asset_ValuedItem, "securityLabelNumber");
	if(cjson_securityLabelNumber)
	{
		result_Contract_Term_Asset_ValuedItem->securityLabelNumber_count = cJSON_GetArraySize(cjson_securityLabelNumber);
		result_Contract_Term_Asset_ValuedItem->securityLabelNumber = PushArray(arena, fhir_unsignedInt, result_Contract_Term_Asset_ValuedItem->securityLabelNumber_count);
		for(int i = 0; i < result_Contract_Term_Asset_ValuedItem->securityLabelNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabelNumber, i);
			result_Contract_Term_Asset_ValuedItem->securityLabelNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	return result_Contract_Term_Asset_ValuedItem;
}

Contract_Term_Action*
Deserialize_Contract_Term_Action(Arena *arena, cJSON *contract_Term_Action)
{
	Contract_Term_Action *result_Contract_Term_Action = PushArray(arena, Contract_Term_Action, 1);
	result_Contract_Term_Action->resourceType = ResourceType::Contract_Term_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Action, "id");
	if(cjson_id)
	{
		result_Contract_Term_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Action, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Action->extension = PushArray(arena, Extension, result_Contract_Term_Action->extension_count);
		for(int i = 0; i < result_Contract_Term_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Action->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Action->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_doNotPerform =  cJSON_GetObjectItem(contract_Term_Action, "doNotPerform");
	if(cjson_doNotPerform)
	{
		result_Contract_Term_Action->doNotPerform = (boolean)cJSON_IsTrue(cjson_doNotPerform);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(contract_Term_Action, "type");
	if(cjson_type)
	{
		result_Contract_Term_Action->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(contract_Term_Action, "subject");
	if(cjson_subject)
	{
		result_Contract_Term_Action->subject_count = cJSON_GetArraySize(cjson_subject);
		result_Contract_Term_Action->subject = PushArray(arena, Contract_Term_Action_Subject, result_Contract_Term_Action->subject_count);
		for(int i = 0; i < result_Contract_Term_Action->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_Contract_Term_Action->subject[i] = *Deserialize_Contract_Term_Action_Subject(arena, internal);
		}

	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(contract_Term_Action, "intent");
	if(cjson_intent)
	{
		result_Contract_Term_Action->intent = Deserialize_CodeableConcept(arena, cjson_intent);
	}
	cJSON *cjson_linkId =  cJSON_GetObjectItem(contract_Term_Action, "linkId");
	if(cjson_linkId)
	{
		result_Contract_Term_Action->linkId_count = cJSON_GetArraySize(cjson_linkId);
		result_Contract_Term_Action->linkId = PushArray(arena, fhir_string, result_Contract_Term_Action->linkId_count);
		for(int i = 0; i < result_Contract_Term_Action->linkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_linkId, i);
			result_Contract_Term_Action->linkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(contract_Term_Action, "status");
	if(cjson_status)
	{
		result_Contract_Term_Action->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(contract_Term_Action, "context");
	if(cjson_context)
	{
		result_Contract_Term_Action->context = Deserialize_Reference(arena, cjson_context);
	}
	cJSON *cjson_contextLinkId =  cJSON_GetObjectItem(contract_Term_Action, "contextLinkId");
	if(cjson_contextLinkId)
	{
		result_Contract_Term_Action->contextLinkId_count = cJSON_GetArraySize(cjson_contextLinkId);
		result_Contract_Term_Action->contextLinkId = PushArray(arena, fhir_string, result_Contract_Term_Action->contextLinkId_count);
		for(int i = 0; i < result_Contract_Term_Action->contextLinkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contextLinkId, i);
			result_Contract_Term_Action->contextLinkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	if((bool)cJSON_HasObjectItem(contract_Term_Action, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Action, "valueDateTime");
		result_Contract_Term_Action->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Contract_Term_Action->occurrence_type = Contract_Term_Action::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Action, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Action, "valuePeriod");
		result_Contract_Term_Action->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_Contract_Term_Action->occurrence_type = Contract_Term_Action::OccurrenceType::Period;
	}
	else if((bool)cJSON_HasObjectItem(contract_Term_Action, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Term_Action, "valueTiming");
		result_Contract_Term_Action->occurrence.valueTiming = Deserialize_Timing(arena, item);
		result_Contract_Term_Action->occurrence_type = Contract_Term_Action::OccurrenceType::Timing;
	}


	cJSON *cjson_requester =  cJSON_GetObjectItem(contract_Term_Action, "requester");
	if(cjson_requester)
	{
		result_Contract_Term_Action->requester_count = cJSON_GetArraySize(cjson_requester);
		result_Contract_Term_Action->requester = PushArray(arena, Reference, result_Contract_Term_Action->requester_count);
		for(int i = 0; i < result_Contract_Term_Action->requester_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_requester, i);
			result_Contract_Term_Action->requester[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_requesterLinkId =  cJSON_GetObjectItem(contract_Term_Action, "requesterLinkId");
	if(cjson_requesterLinkId)
	{
		result_Contract_Term_Action->requesterLinkId_count = cJSON_GetArraySize(cjson_requesterLinkId);
		result_Contract_Term_Action->requesterLinkId = PushArray(arena, fhir_string, result_Contract_Term_Action->requesterLinkId_count);
		for(int i = 0; i < result_Contract_Term_Action->requesterLinkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_requesterLinkId, i);
			result_Contract_Term_Action->requesterLinkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_performerType =  cJSON_GetObjectItem(contract_Term_Action, "performerType");
	if(cjson_performerType)
	{
		result_Contract_Term_Action->performerType_count = cJSON_GetArraySize(cjson_performerType);
		result_Contract_Term_Action->performerType = PushArray(arena, CodeableConcept, result_Contract_Term_Action->performerType_count);
		for(int i = 0; i < result_Contract_Term_Action->performerType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performerType, i);
			result_Contract_Term_Action->performerType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_performerRole =  cJSON_GetObjectItem(contract_Term_Action, "performerRole");
	if(cjson_performerRole)
	{
		result_Contract_Term_Action->performerRole = Deserialize_CodeableConcept(arena, cjson_performerRole);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(contract_Term_Action, "performer");
	if(cjson_performer)
	{
		result_Contract_Term_Action->performer = Deserialize_Reference(arena, cjson_performer);
	}
	cJSON *cjson_performerLinkId =  cJSON_GetObjectItem(contract_Term_Action, "performerLinkId");
	if(cjson_performerLinkId)
	{
		result_Contract_Term_Action->performerLinkId_count = cJSON_GetArraySize(cjson_performerLinkId);
		result_Contract_Term_Action->performerLinkId = PushArray(arena, fhir_string, result_Contract_Term_Action->performerLinkId_count);
		for(int i = 0; i < result_Contract_Term_Action->performerLinkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performerLinkId, i);
			result_Contract_Term_Action->performerLinkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(contract_Term_Action, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Contract_Term_Action->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_Contract_Term_Action->reasonCode = PushArray(arena, CodeableConcept, result_Contract_Term_Action->reasonCode_count);
		for(int i = 0; i < result_Contract_Term_Action->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_Contract_Term_Action->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(contract_Term_Action, "reasonReference");
	if(cjson_reasonReference)
	{
		result_Contract_Term_Action->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_Contract_Term_Action->reasonReference = PushArray(arena, Reference, result_Contract_Term_Action->reasonReference_count);
		for(int i = 0; i < result_Contract_Term_Action->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_Contract_Term_Action->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(contract_Term_Action, "reason");
	if(cjson_reason)
	{
		result_Contract_Term_Action->reason_count = cJSON_GetArraySize(cjson_reason);
		result_Contract_Term_Action->reason = PushArray(arena, fhir_string, result_Contract_Term_Action->reason_count);
		for(int i = 0; i < result_Contract_Term_Action->reason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reason, i);
			result_Contract_Term_Action->reason[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_reasonLinkId =  cJSON_GetObjectItem(contract_Term_Action, "reasonLinkId");
	if(cjson_reasonLinkId)
	{
		result_Contract_Term_Action->reasonLinkId_count = cJSON_GetArraySize(cjson_reasonLinkId);
		result_Contract_Term_Action->reasonLinkId = PushArray(arena, fhir_string, result_Contract_Term_Action->reasonLinkId_count);
		for(int i = 0; i < result_Contract_Term_Action->reasonLinkId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonLinkId, i);
			result_Contract_Term_Action->reasonLinkId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(contract_Term_Action, "note");
	if(cjson_note)
	{
		result_Contract_Term_Action->note_count = cJSON_GetArraySize(cjson_note);
		result_Contract_Term_Action->note = PushArray(arena, Annotation, result_Contract_Term_Action->note_count);
		for(int i = 0; i < result_Contract_Term_Action->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Contract_Term_Action->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_securityLabelNumber =  cJSON_GetObjectItem(contract_Term_Action, "securityLabelNumber");
	if(cjson_securityLabelNumber)
	{
		result_Contract_Term_Action->securityLabelNumber_count = cJSON_GetArraySize(cjson_securityLabelNumber);
		result_Contract_Term_Action->securityLabelNumber = PushArray(arena, fhir_unsignedInt, result_Contract_Term_Action->securityLabelNumber_count);
		for(int i = 0; i < result_Contract_Term_Action->securityLabelNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabelNumber, i);
			result_Contract_Term_Action->securityLabelNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	return result_Contract_Term_Action;
}

Contract_Term_Action_Subject*
Deserialize_Contract_Term_Action_Subject(Arena *arena, cJSON *contract_Term_Action_Subject)
{
	Contract_Term_Action_Subject *result_Contract_Term_Action_Subject = PushArray(arena, Contract_Term_Action_Subject, 1);
	result_Contract_Term_Action_Subject->resourceType = ResourceType::Contract_Term_Action_Subject;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Term_Action_Subject, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Term_Action_Subject, "id");
	if(cjson_id)
	{
		result_Contract_Term_Action_Subject->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Term_Action_Subject, "extension");
	if(cjson_extension)
	{
		result_Contract_Term_Action_Subject->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Term_Action_Subject->extension = PushArray(arena, Extension, result_Contract_Term_Action_Subject->extension_count);
		for(int i = 0; i < result_Contract_Term_Action_Subject->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Term_Action_Subject->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Term_Action_Subject, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Term_Action_Subject->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Term_Action_Subject->modifierExtension = PushArray(arena, Extension, result_Contract_Term_Action_Subject->modifierExtension_count);
		for(int i = 0; i < result_Contract_Term_Action_Subject->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Term_Action_Subject->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(contract_Term_Action_Subject, "reference");
	if(cjson_reference)
	{
		result_Contract_Term_Action_Subject->reference_count = cJSON_GetArraySize(cjson_reference);
		result_Contract_Term_Action_Subject->reference = PushArray(arena, Reference, result_Contract_Term_Action_Subject->reference_count);
		for(int i = 0; i < result_Contract_Term_Action_Subject->reference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reference, i);
			result_Contract_Term_Action_Subject->reference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_role =  cJSON_GetObjectItem(contract_Term_Action_Subject, "role");
	if(cjson_role)
	{
		result_Contract_Term_Action_Subject->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	return result_Contract_Term_Action_Subject;
}

Contract_Signer*
Deserialize_Contract_Signer(Arena *arena, cJSON *contract_Signer)
{
	Contract_Signer *result_Contract_Signer = PushArray(arena, Contract_Signer, 1);
	result_Contract_Signer->resourceType = ResourceType::Contract_Signer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Signer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Signer, "id");
	if(cjson_id)
	{
		result_Contract_Signer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Signer, "extension");
	if(cjson_extension)
	{
		result_Contract_Signer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Signer->extension = PushArray(arena, Extension, result_Contract_Signer->extension_count);
		for(int i = 0; i < result_Contract_Signer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Signer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Signer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Signer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Signer->modifierExtension = PushArray(arena, Extension, result_Contract_Signer->modifierExtension_count);
		for(int i = 0; i < result_Contract_Signer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Signer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(contract_Signer, "type");
	if(cjson_type)
	{
		result_Contract_Signer->type = Deserialize_Coding(arena, cjson_type);
	}
	cJSON *cjson_party =  cJSON_GetObjectItem(contract_Signer, "party");
	if(cjson_party)
	{
		result_Contract_Signer->party = Deserialize_Reference(arena, cjson_party);
	}
	cJSON *cjson_signature =  cJSON_GetObjectItem(contract_Signer, "signature");
	if(cjson_signature)
	{
		result_Contract_Signer->signature_count = cJSON_GetArraySize(cjson_signature);
		result_Contract_Signer->signature = PushArray(arena, Signature, result_Contract_Signer->signature_count);
		for(int i = 0; i < result_Contract_Signer->signature_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_signature, i);
			result_Contract_Signer->signature[i] = *Deserialize_Signature(arena, internal);
		}

	}
	return result_Contract_Signer;
}

Contract_Friendly*
Deserialize_Contract_Friendly(Arena *arena, cJSON *contract_Friendly)
{
	Contract_Friendly *result_Contract_Friendly = PushArray(arena, Contract_Friendly, 1);
	result_Contract_Friendly->resourceType = ResourceType::Contract_Friendly;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Friendly, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Friendly, "id");
	if(cjson_id)
	{
		result_Contract_Friendly->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Friendly, "extension");
	if(cjson_extension)
	{
		result_Contract_Friendly->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Friendly->extension = PushArray(arena, Extension, result_Contract_Friendly->extension_count);
		for(int i = 0; i < result_Contract_Friendly->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Friendly->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Friendly, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Friendly->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Friendly->modifierExtension = PushArray(arena, Extension, result_Contract_Friendly->modifierExtension_count);
		for(int i = 0; i < result_Contract_Friendly->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Friendly->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(contract_Friendly, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Friendly, "valueAttachment");
		result_Contract_Friendly->content.valueAttachment = Deserialize_Attachment(arena, item);
		result_Contract_Friendly->content_type = Contract_Friendly::ContentType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(contract_Friendly, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Friendly, "valueReference");
		result_Contract_Friendly->content.valueReference = Deserialize_Reference(arena, item);
		result_Contract_Friendly->content_type = Contract_Friendly::ContentType::Reference;
	}


	return result_Contract_Friendly;
}

Contract_Legal*
Deserialize_Contract_Legal(Arena *arena, cJSON *contract_Legal)
{
	Contract_Legal *result_Contract_Legal = PushArray(arena, Contract_Legal, 1);
	result_Contract_Legal->resourceType = ResourceType::Contract_Legal;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Legal, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Legal, "id");
	if(cjson_id)
	{
		result_Contract_Legal->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Legal, "extension");
	if(cjson_extension)
	{
		result_Contract_Legal->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Legal->extension = PushArray(arena, Extension, result_Contract_Legal->extension_count);
		for(int i = 0; i < result_Contract_Legal->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Legal->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Legal, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Legal->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Legal->modifierExtension = PushArray(arena, Extension, result_Contract_Legal->modifierExtension_count);
		for(int i = 0; i < result_Contract_Legal->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Legal->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(contract_Legal, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Legal, "valueAttachment");
		result_Contract_Legal->content.valueAttachment = Deserialize_Attachment(arena, item);
		result_Contract_Legal->content_type = Contract_Legal::ContentType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(contract_Legal, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Legal, "valueReference");
		result_Contract_Legal->content.valueReference = Deserialize_Reference(arena, item);
		result_Contract_Legal->content_type = Contract_Legal::ContentType::Reference;
	}


	return result_Contract_Legal;
}

Contract_Rule*
Deserialize_Contract_Rule(Arena *arena, cJSON *contract_Rule)
{
	Contract_Rule *result_Contract_Rule = PushArray(arena, Contract_Rule, 1);
	result_Contract_Rule->resourceType = ResourceType::Contract_Rule;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contract_Rule, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contract_Rule, "id");
	if(cjson_id)
	{
		result_Contract_Rule->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contract_Rule, "extension");
	if(cjson_extension)
	{
		result_Contract_Rule->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contract_Rule->extension = PushArray(arena, Extension, result_Contract_Rule->extension_count);
		for(int i = 0; i < result_Contract_Rule->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contract_Rule->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(contract_Rule, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Contract_Rule->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Contract_Rule->modifierExtension = PushArray(arena, Extension, result_Contract_Rule->modifierExtension_count);
		for(int i = 0; i < result_Contract_Rule->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Contract_Rule->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(contract_Rule, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Rule, "valueAttachment");
		result_Contract_Rule->content.valueAttachment = Deserialize_Attachment(arena, item);
		result_Contract_Rule->content_type = Contract_Rule::ContentType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(contract_Rule, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(contract_Rule, "valueReference");
		result_Contract_Rule->content.valueReference = Deserialize_Reference(arena, item);
		result_Contract_Rule->content_type = Contract_Rule::ContentType::Reference;
	}


	return result_Contract_Rule;
}

Coverage*
Deserialize_Coverage(Arena *arena, cJSON *coverage)
{
	Coverage *result_Coverage = PushArray(arena, Coverage, 1);
	result_Coverage->resourceType = ResourceType::Coverage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverage, "id");
	if(cjson_id)
	{
		result_Coverage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(coverage, "meta");
	if(cjson_meta)
	{
		result_Coverage->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(coverage, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Coverage->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(coverage, "language");
	if(cjson_language)
	{
		result_Coverage->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(coverage, "text");
	if(cjson_text)
	{
		result_Coverage->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(coverage, "contained");
	if(cjson_contained)
	{
		result_Coverage->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Coverage->contained = PushArray(arena, Resource, result_Coverage->contained_count);
		for(int i = 0; i < result_Coverage->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Coverage->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverage, "extension");
	if(cjson_extension)
	{
		result_Coverage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Coverage->extension = PushArray(arena, Extension, result_Coverage->extension_count);
		for(int i = 0; i < result_Coverage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Coverage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Coverage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Coverage->modifierExtension = PushArray(arena, Extension, result_Coverage->modifierExtension_count);
		for(int i = 0; i < result_Coverage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Coverage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(coverage, "identifier");
	if(cjson_identifier)
	{
		result_Coverage->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Coverage->identifier = PushArray(arena, Identifier, result_Coverage->identifier_count);
		for(int i = 0; i < result_Coverage->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Coverage->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(coverage, "status");
	if(cjson_status)
	{
		result_Coverage->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(coverage, "type");
	if(cjson_type)
	{
		result_Coverage->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_policyHolder =  cJSON_GetObjectItem(coverage, "policyHolder");
	if(cjson_policyHolder)
	{
		result_Coverage->policyHolder = Deserialize_Reference(arena, cjson_policyHolder);
	}
	cJSON *cjson_subscriber =  cJSON_GetObjectItem(coverage, "subscriber");
	if(cjson_subscriber)
	{
		result_Coverage->subscriber = Deserialize_Reference(arena, cjson_subscriber);
	}
	cJSON *cjson_subscriberId =  cJSON_GetObjectItem(coverage, "subscriberId");
	if(cjson_subscriberId)
	{
		result_Coverage->subscriberId = Str8C(cJSON_GetStringValue(cjson_subscriberId));
	}
	cJSON *cjson_beneficiary =  cJSON_GetObjectItem(coverage, "beneficiary");
	if(cjson_beneficiary)
	{
		result_Coverage->beneficiary = Deserialize_Reference(arena, cjson_beneficiary);
	}
	cJSON *cjson_dependent =  cJSON_GetObjectItem(coverage, "dependent");
	if(cjson_dependent)
	{
		result_Coverage->dependent = Str8C(cJSON_GetStringValue(cjson_dependent));
	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(coverage, "relationship");
	if(cjson_relationship)
	{
		result_Coverage->relationship = Deserialize_CodeableConcept(arena, cjson_relationship);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(coverage, "period");
	if(cjson_period)
	{
		result_Coverage->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_payor =  cJSON_GetObjectItem(coverage, "payor");
	if(cjson_payor)
	{
		result_Coverage->payor_count = cJSON_GetArraySize(cjson_payor);
		result_Coverage->payor = PushArray(arena, Reference, result_Coverage->payor_count);
		for(int i = 0; i < result_Coverage->payor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_payor, i);
			result_Coverage->payor[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_class_ =  cJSON_GetObjectItem(coverage, "class_");
	if(cjson_class_)
	{
		result_Coverage->class__count = cJSON_GetArraySize(cjson_class_);
		result_Coverage->class_ = PushArray(arena, Coverage_Class, result_Coverage->class__count);
		for(int i = 0; i < result_Coverage->class__count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_class_, i);
			result_Coverage->class_[i] = *Deserialize_Coverage_Class(arena, internal);
		}

	}
	cJSON *cjson_order =  cJSON_GetObjectItem(coverage, "order");
	if(cjson_order)
	{
		result_Coverage->order = (int)cJSON_GetNumberValue(cjson_order);
	}
	cJSON *cjson_network =  cJSON_GetObjectItem(coverage, "network");
	if(cjson_network)
	{
		result_Coverage->network = Str8C(cJSON_GetStringValue(cjson_network));
	}
	cJSON *cjson_costToBeneficiary =  cJSON_GetObjectItem(coverage, "costToBeneficiary");
	if(cjson_costToBeneficiary)
	{
		result_Coverage->costToBeneficiary_count = cJSON_GetArraySize(cjson_costToBeneficiary);
		result_Coverage->costToBeneficiary = PushArray(arena, Coverage_CostToBeneficiary, result_Coverage->costToBeneficiary_count);
		for(int i = 0; i < result_Coverage->costToBeneficiary_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_costToBeneficiary, i);
			result_Coverage->costToBeneficiary[i] = *Deserialize_Coverage_CostToBeneficiary(arena, internal);
		}

	}
	cJSON *cjson_subrogation =  cJSON_GetObjectItem(coverage, "subrogation");
	if(cjson_subrogation)
	{
		result_Coverage->subrogation = (boolean)cJSON_IsTrue(cjson_subrogation);
	}
	cJSON *cjson_contract =  cJSON_GetObjectItem(coverage, "contract");
	if(cjson_contract)
	{
		result_Coverage->contract_count = cJSON_GetArraySize(cjson_contract);
		result_Coverage->contract = PushArray(arena, Reference, result_Coverage->contract_count);
		for(int i = 0; i < result_Coverage->contract_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contract, i);
			result_Coverage->contract[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Coverage;
}

Coverage_Class*
Deserialize_Coverage_Class(Arena *arena, cJSON *coverage_Class)
{
	Coverage_Class *result_Coverage_Class = PushArray(arena, Coverage_Class, 1);
	result_Coverage_Class->resourceType = ResourceType::Coverage_Class;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverage_Class, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverage_Class, "id");
	if(cjson_id)
	{
		result_Coverage_Class->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverage_Class, "extension");
	if(cjson_extension)
	{
		result_Coverage_Class->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Coverage_Class->extension = PushArray(arena, Extension, result_Coverage_Class->extension_count);
		for(int i = 0; i < result_Coverage_Class->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Coverage_Class->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverage_Class, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Coverage_Class->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Coverage_Class->modifierExtension = PushArray(arena, Extension, result_Coverage_Class->modifierExtension_count);
		for(int i = 0; i < result_Coverage_Class->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Coverage_Class->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(coverage_Class, "type");
	if(cjson_type)
	{
		result_Coverage_Class->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(coverage_Class, "value");
	if(cjson_value)
	{
		result_Coverage_Class->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(coverage_Class, "name");
	if(cjson_name)
	{
		result_Coverage_Class->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	return result_Coverage_Class;
}

Coverage_CostToBeneficiary*
Deserialize_Coverage_CostToBeneficiary(Arena *arena, cJSON *coverage_CostToBeneficiary)
{
	Coverage_CostToBeneficiary *result_Coverage_CostToBeneficiary = PushArray(arena, Coverage_CostToBeneficiary, 1);
	result_Coverage_CostToBeneficiary->resourceType = ResourceType::Coverage_CostToBeneficiary;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverage_CostToBeneficiary, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverage_CostToBeneficiary, "id");
	if(cjson_id)
	{
		result_Coverage_CostToBeneficiary->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverage_CostToBeneficiary, "extension");
	if(cjson_extension)
	{
		result_Coverage_CostToBeneficiary->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Coverage_CostToBeneficiary->extension = PushArray(arena, Extension, result_Coverage_CostToBeneficiary->extension_count);
		for(int i = 0; i < result_Coverage_CostToBeneficiary->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Coverage_CostToBeneficiary->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverage_CostToBeneficiary, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Coverage_CostToBeneficiary->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Coverage_CostToBeneficiary->modifierExtension = PushArray(arena, Extension, result_Coverage_CostToBeneficiary->modifierExtension_count);
		for(int i = 0; i < result_Coverage_CostToBeneficiary->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Coverage_CostToBeneficiary->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(coverage_CostToBeneficiary, "type");
	if(cjson_type)
	{
		result_Coverage_CostToBeneficiary->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(coverage_CostToBeneficiary, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverage_CostToBeneficiary, "valueQuantity");
		result_Coverage_CostToBeneficiary->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Coverage_CostToBeneficiary->value_type = Coverage_CostToBeneficiary::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(coverage_CostToBeneficiary, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverage_CostToBeneficiary, "valueMoney");
		result_Coverage_CostToBeneficiary->value.valueMoney = Deserialize_Money(arena, item);
		result_Coverage_CostToBeneficiary->value_type = Coverage_CostToBeneficiary::ValueType::Money;
	}


	cJSON *cjson_exception =  cJSON_GetObjectItem(coverage_CostToBeneficiary, "exception");
	if(cjson_exception)
	{
		result_Coverage_CostToBeneficiary->exception_count = cJSON_GetArraySize(cjson_exception);
		result_Coverage_CostToBeneficiary->exception = PushArray(arena, Coverage_CostToBeneficiary_Exception, result_Coverage_CostToBeneficiary->exception_count);
		for(int i = 0; i < result_Coverage_CostToBeneficiary->exception_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_exception, i);
			result_Coverage_CostToBeneficiary->exception[i] = *Deserialize_Coverage_CostToBeneficiary_Exception(arena, internal);
		}

	}
	return result_Coverage_CostToBeneficiary;
}

Coverage_CostToBeneficiary_Exception*
Deserialize_Coverage_CostToBeneficiary_Exception(Arena *arena, cJSON *coverage_CostToBeneficiary_Exception)
{
	Coverage_CostToBeneficiary_Exception *result_Coverage_CostToBeneficiary_Exception = PushArray(arena, Coverage_CostToBeneficiary_Exception, 1);
	result_Coverage_CostToBeneficiary_Exception->resourceType = ResourceType::Coverage_CostToBeneficiary_Exception;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverage_CostToBeneficiary_Exception, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverage_CostToBeneficiary_Exception, "id");
	if(cjson_id)
	{
		result_Coverage_CostToBeneficiary_Exception->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverage_CostToBeneficiary_Exception, "extension");
	if(cjson_extension)
	{
		result_Coverage_CostToBeneficiary_Exception->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Coverage_CostToBeneficiary_Exception->extension = PushArray(arena, Extension, result_Coverage_CostToBeneficiary_Exception->extension_count);
		for(int i = 0; i < result_Coverage_CostToBeneficiary_Exception->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Coverage_CostToBeneficiary_Exception->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverage_CostToBeneficiary_Exception, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Coverage_CostToBeneficiary_Exception->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Coverage_CostToBeneficiary_Exception->modifierExtension = PushArray(arena, Extension, result_Coverage_CostToBeneficiary_Exception->modifierExtension_count);
		for(int i = 0; i < result_Coverage_CostToBeneficiary_Exception->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Coverage_CostToBeneficiary_Exception->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(coverage_CostToBeneficiary_Exception, "type");
	if(cjson_type)
	{
		result_Coverage_CostToBeneficiary_Exception->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(coverage_CostToBeneficiary_Exception, "period");
	if(cjson_period)
	{
		result_Coverage_CostToBeneficiary_Exception->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Coverage_CostToBeneficiary_Exception;
}

CoverageEligibilityRequest*
Deserialize_CoverageEligibilityRequest(Arena *arena, cJSON *coverageEligibilityRequest)
{
	CoverageEligibilityRequest *result_CoverageEligibilityRequest = PushArray(arena, CoverageEligibilityRequest, 1);
	result_CoverageEligibilityRequest->resourceType = ResourceType::CoverageEligibilityRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityRequest, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(coverageEligibilityRequest, "meta");
	if(cjson_meta)
	{
		result_CoverageEligibilityRequest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(coverageEligibilityRequest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CoverageEligibilityRequest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(coverageEligibilityRequest, "language");
	if(cjson_language)
	{
		result_CoverageEligibilityRequest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(coverageEligibilityRequest, "text");
	if(cjson_text)
	{
		result_CoverageEligibilityRequest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(coverageEligibilityRequest, "contained");
	if(cjson_contained)
	{
		result_CoverageEligibilityRequest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CoverageEligibilityRequest->contained = PushArray(arena, Resource, result_CoverageEligibilityRequest->contained_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CoverageEligibilityRequest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityRequest, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityRequest->extension = PushArray(arena, Extension, result_CoverageEligibilityRequest->extension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityRequest->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityRequest->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(coverageEligibilityRequest, "identifier");
	if(cjson_identifier)
	{
		result_CoverageEligibilityRequest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_CoverageEligibilityRequest->identifier = PushArray(arena, Identifier, result_CoverageEligibilityRequest->identifier_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_CoverageEligibilityRequest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(coverageEligibilityRequest, "status");
	if(cjson_status)
	{
		result_CoverageEligibilityRequest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(coverageEligibilityRequest, "priority");
	if(cjson_priority)
	{
		result_CoverageEligibilityRequest->priority = Deserialize_CodeableConcept(arena, cjson_priority);
	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(coverageEligibilityRequest, "purpose");
	if(cjson_purpose)
	{
		result_CoverageEligibilityRequest->purpose_count = cJSON_GetArraySize(cjson_purpose);
		result_CoverageEligibilityRequest->purpose = PushArray(arena, fhir_code, result_CoverageEligibilityRequest->purpose_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->purpose_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_purpose, i);
			result_CoverageEligibilityRequest->purpose[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(coverageEligibilityRequest, "patient");
	if(cjson_patient)
	{
		result_CoverageEligibilityRequest->patient = Deserialize_Reference(arena, cjson_patient);
	}
	if((bool)cJSON_HasObjectItem(coverageEligibilityRequest, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityRequest, "valueDate");
		result_CoverageEligibilityRequest->serviced.valueDate = Str8C(cJSON_GetStringValue(item));
		result_CoverageEligibilityRequest->serviced_type = CoverageEligibilityRequest::ServicedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(coverageEligibilityRequest, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityRequest, "valuePeriod");
		result_CoverageEligibilityRequest->serviced.valuePeriod = Deserialize_Period(arena, item);
		result_CoverageEligibilityRequest->serviced_type = CoverageEligibilityRequest::ServicedType::Period;
	}


	cJSON *cjson_created =  cJSON_GetObjectItem(coverageEligibilityRequest, "created");
	if(cjson_created)
	{
		result_CoverageEligibilityRequest->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_enterer =  cJSON_GetObjectItem(coverageEligibilityRequest, "enterer");
	if(cjson_enterer)
	{
		result_CoverageEligibilityRequest->enterer = Deserialize_Reference(arena, cjson_enterer);
	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(coverageEligibilityRequest, "provider");
	if(cjson_provider)
	{
		result_CoverageEligibilityRequest->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_insurer =  cJSON_GetObjectItem(coverageEligibilityRequest, "insurer");
	if(cjson_insurer)
	{
		result_CoverageEligibilityRequest->insurer = Deserialize_Reference(arena, cjson_insurer);
	}
	cJSON *cjson_facility =  cJSON_GetObjectItem(coverageEligibilityRequest, "facility");
	if(cjson_facility)
	{
		result_CoverageEligibilityRequest->facility = Deserialize_Reference(arena, cjson_facility);
	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(coverageEligibilityRequest, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_CoverageEligibilityRequest->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_CoverageEligibilityRequest->supportingInfo = PushArray(arena, CoverageEligibilityRequest_SupportingInfo, result_CoverageEligibilityRequest->supportingInfo_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_CoverageEligibilityRequest->supportingInfo[i] = *Deserialize_CoverageEligibilityRequest_SupportingInfo(arena, internal);
		}

	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(coverageEligibilityRequest, "insurance");
	if(cjson_insurance)
	{
		result_CoverageEligibilityRequest->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_CoverageEligibilityRequest->insurance = PushArray(arena, CoverageEligibilityRequest_Insurance, result_CoverageEligibilityRequest->insurance_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_CoverageEligibilityRequest->insurance[i] = *Deserialize_CoverageEligibilityRequest_Insurance(arena, internal);
		}

	}
	cJSON *cjson_item =  cJSON_GetObjectItem(coverageEligibilityRequest, "item");
	if(cjson_item)
	{
		result_CoverageEligibilityRequest->item_count = cJSON_GetArraySize(cjson_item);
		result_CoverageEligibilityRequest->item = PushArray(arena, CoverageEligibilityRequest_Item, result_CoverageEligibilityRequest->item_count);
		for(int i = 0; i < result_CoverageEligibilityRequest->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_CoverageEligibilityRequest->item[i] = *Deserialize_CoverageEligibilityRequest_Item(arena, internal);
		}

	}
	return result_CoverageEligibilityRequest;
}

CoverageEligibilityRequest_SupportingInfo*
Deserialize_CoverageEligibilityRequest_SupportingInfo(Arena *arena, cJSON *coverageEligibilityRequest_SupportingInfo)
{
	CoverageEligibilityRequest_SupportingInfo *result_CoverageEligibilityRequest_SupportingInfo = PushArray(arena, CoverageEligibilityRequest_SupportingInfo, 1);
	result_CoverageEligibilityRequest_SupportingInfo->resourceType = ResourceType::CoverageEligibilityRequest_SupportingInfo;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityRequest_SupportingInfo, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityRequest_SupportingInfo, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityRequest_SupportingInfo->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityRequest_SupportingInfo, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityRequest_SupportingInfo->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityRequest_SupportingInfo->extension = PushArray(arena, Extension, result_CoverageEligibilityRequest_SupportingInfo->extension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_SupportingInfo->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityRequest_SupportingInfo->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityRequest_SupportingInfo, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityRequest_SupportingInfo->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityRequest_SupportingInfo->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityRequest_SupportingInfo->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_SupportingInfo->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityRequest_SupportingInfo->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(coverageEligibilityRequest_SupportingInfo, "sequence");
	if(cjson_sequence)
	{
		result_CoverageEligibilityRequest_SupportingInfo->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_information =  cJSON_GetObjectItem(coverageEligibilityRequest_SupportingInfo, "information");
	if(cjson_information)
	{
		result_CoverageEligibilityRequest_SupportingInfo->information = Deserialize_Reference(arena, cjson_information);
	}
	cJSON *cjson_appliesToAll =  cJSON_GetObjectItem(coverageEligibilityRequest_SupportingInfo, "appliesToAll");
	if(cjson_appliesToAll)
	{
		result_CoverageEligibilityRequest_SupportingInfo->appliesToAll = (boolean)cJSON_IsTrue(cjson_appliesToAll);
	}
	return result_CoverageEligibilityRequest_SupportingInfo;
}

CoverageEligibilityRequest_Insurance*
Deserialize_CoverageEligibilityRequest_Insurance(Arena *arena, cJSON *coverageEligibilityRequest_Insurance)
{
	CoverageEligibilityRequest_Insurance *result_CoverageEligibilityRequest_Insurance = PushArray(arena, CoverageEligibilityRequest_Insurance, 1);
	result_CoverageEligibilityRequest_Insurance->resourceType = ResourceType::CoverageEligibilityRequest_Insurance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityRequest_Insurance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityRequest_Insurance, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityRequest_Insurance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityRequest_Insurance, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityRequest_Insurance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityRequest_Insurance->extension = PushArray(arena, Extension, result_CoverageEligibilityRequest_Insurance->extension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Insurance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityRequest_Insurance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityRequest_Insurance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityRequest_Insurance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityRequest_Insurance->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityRequest_Insurance->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Insurance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityRequest_Insurance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_focal =  cJSON_GetObjectItem(coverageEligibilityRequest_Insurance, "focal");
	if(cjson_focal)
	{
		result_CoverageEligibilityRequest_Insurance->focal = (boolean)cJSON_IsTrue(cjson_focal);
	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(coverageEligibilityRequest_Insurance, "coverage");
	if(cjson_coverage)
	{
		result_CoverageEligibilityRequest_Insurance->coverage = Deserialize_Reference(arena, cjson_coverage);
	}
	cJSON *cjson_businessArrangement =  cJSON_GetObjectItem(coverageEligibilityRequest_Insurance, "businessArrangement");
	if(cjson_businessArrangement)
	{
		result_CoverageEligibilityRequest_Insurance->businessArrangement = Str8C(cJSON_GetStringValue(cjson_businessArrangement));
	}
	return result_CoverageEligibilityRequest_Insurance;
}

CoverageEligibilityRequest_Item*
Deserialize_CoverageEligibilityRequest_Item(Arena *arena, cJSON *coverageEligibilityRequest_Item)
{
	CoverageEligibilityRequest_Item *result_CoverageEligibilityRequest_Item = PushArray(arena, CoverageEligibilityRequest_Item, 1);
	result_CoverageEligibilityRequest_Item->resourceType = ResourceType::CoverageEligibilityRequest_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityRequest_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityRequest_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityRequest_Item->extension = PushArray(arena, Extension, result_CoverageEligibilityRequest_Item->extension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityRequest_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityRequest_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityRequest_Item->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityRequest_Item->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityRequest_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_supportingInfoSequence =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "supportingInfoSequence");
	if(cjson_supportingInfoSequence)
	{
		result_CoverageEligibilityRequest_Item->supportingInfoSequence_count = cJSON_GetArraySize(cjson_supportingInfoSequence);
		result_CoverageEligibilityRequest_Item->supportingInfoSequence = PushArray(arena, fhir_positiveInt, result_CoverageEligibilityRequest_Item->supportingInfoSequence_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item->supportingInfoSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfoSequence, i);
			result_CoverageEligibilityRequest_Item->supportingInfoSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "category");
	if(cjson_category)
	{
		result_CoverageEligibilityRequest_Item->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "productOrService");
	if(cjson_productOrService)
	{
		result_CoverageEligibilityRequest_Item->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "modifier");
	if(cjson_modifier)
	{
		result_CoverageEligibilityRequest_Item->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_CoverageEligibilityRequest_Item->modifier = PushArray(arena, CodeableConcept, result_CoverageEligibilityRequest_Item->modifier_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_CoverageEligibilityRequest_Item->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "provider");
	if(cjson_provider)
	{
		result_CoverageEligibilityRequest_Item->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "quantity");
	if(cjson_quantity)
	{
		result_CoverageEligibilityRequest_Item->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "unitPrice");
	if(cjson_unitPrice)
	{
		result_CoverageEligibilityRequest_Item->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_facility =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "facility");
	if(cjson_facility)
	{
		result_CoverageEligibilityRequest_Item->facility = Deserialize_Reference(arena, cjson_facility);
	}
	cJSON *cjson_diagnosis =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "diagnosis");
	if(cjson_diagnosis)
	{
		result_CoverageEligibilityRequest_Item->diagnosis_count = cJSON_GetArraySize(cjson_diagnosis);
		result_CoverageEligibilityRequest_Item->diagnosis = PushArray(arena, CoverageEligibilityRequest_Item_Diagnosis, result_CoverageEligibilityRequest_Item->diagnosis_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item->diagnosis_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_diagnosis, i);
			result_CoverageEligibilityRequest_Item->diagnosis[i] = *Deserialize_CoverageEligibilityRequest_Item_Diagnosis(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(coverageEligibilityRequest_Item, "detail");
	if(cjson_detail)
	{
		result_CoverageEligibilityRequest_Item->detail_count = cJSON_GetArraySize(cjson_detail);
		result_CoverageEligibilityRequest_Item->detail = PushArray(arena, Reference, result_CoverageEligibilityRequest_Item->detail_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_CoverageEligibilityRequest_Item->detail[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_CoverageEligibilityRequest_Item;
}

CoverageEligibilityRequest_Item_Diagnosis*
Deserialize_CoverageEligibilityRequest_Item_Diagnosis(Arena *arena, cJSON *coverageEligibilityRequest_Item_Diagnosis)
{
	CoverageEligibilityRequest_Item_Diagnosis *result_CoverageEligibilityRequest_Item_Diagnosis = PushArray(arena, CoverageEligibilityRequest_Item_Diagnosis, 1);
	result_CoverageEligibilityRequest_Item_Diagnosis->resourceType = ResourceType::CoverageEligibilityRequest_Item_Diagnosis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityRequest_Item_Diagnosis, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityRequest_Item_Diagnosis, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityRequest_Item_Diagnosis->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityRequest_Item_Diagnosis, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityRequest_Item_Diagnosis->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityRequest_Item_Diagnosis->extension = PushArray(arena, Extension, result_CoverageEligibilityRequest_Item_Diagnosis->extension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item_Diagnosis->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityRequest_Item_Diagnosis->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityRequest_Item_Diagnosis, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityRequest_Item_Diagnosis->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityRequest_Item_Diagnosis->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityRequest_Item_Diagnosis->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityRequest_Item_Diagnosis->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityRequest_Item_Diagnosis->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(coverageEligibilityRequest_Item_Diagnosis, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityRequest_Item_Diagnosis, "valueCodeableConcept");
		result_CoverageEligibilityRequest_Item_Diagnosis->diagnosis.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_CoverageEligibilityRequest_Item_Diagnosis->diagnosis_type = CoverageEligibilityRequest_Item_Diagnosis::DiagnosisType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(coverageEligibilityRequest_Item_Diagnosis, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityRequest_Item_Diagnosis, "valueReference");
		result_CoverageEligibilityRequest_Item_Diagnosis->diagnosis.valueReference = Deserialize_Reference(arena, item);
		result_CoverageEligibilityRequest_Item_Diagnosis->diagnosis_type = CoverageEligibilityRequest_Item_Diagnosis::DiagnosisType::Reference;
	}


	return result_CoverageEligibilityRequest_Item_Diagnosis;
}

CoverageEligibilityResponse*
Deserialize_CoverageEligibilityResponse(Arena *arena, cJSON *coverageEligibilityResponse)
{
	CoverageEligibilityResponse *result_CoverageEligibilityResponse = PushArray(arena, CoverageEligibilityResponse, 1);
	result_CoverageEligibilityResponse->resourceType = ResourceType::CoverageEligibilityResponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityResponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityResponse, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityResponse->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(coverageEligibilityResponse, "meta");
	if(cjson_meta)
	{
		result_CoverageEligibilityResponse->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(coverageEligibilityResponse, "implicitRules");
	if(cjson_implicitRules)
	{
		result_CoverageEligibilityResponse->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(coverageEligibilityResponse, "language");
	if(cjson_language)
	{
		result_CoverageEligibilityResponse->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(coverageEligibilityResponse, "text");
	if(cjson_text)
	{
		result_CoverageEligibilityResponse->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(coverageEligibilityResponse, "contained");
	if(cjson_contained)
	{
		result_CoverageEligibilityResponse->contained_count = cJSON_GetArraySize(cjson_contained);
		result_CoverageEligibilityResponse->contained = PushArray(arena, Resource, result_CoverageEligibilityResponse->contained_count);
		for(int i = 0; i < result_CoverageEligibilityResponse->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_CoverageEligibilityResponse->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityResponse, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityResponse->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityResponse->extension = PushArray(arena, Extension, result_CoverageEligibilityResponse->extension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityResponse->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityResponse, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityResponse->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityResponse->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityResponse->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityResponse->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(coverageEligibilityResponse, "identifier");
	if(cjson_identifier)
	{
		result_CoverageEligibilityResponse->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_CoverageEligibilityResponse->identifier = PushArray(arena, Identifier, result_CoverageEligibilityResponse->identifier_count);
		for(int i = 0; i < result_CoverageEligibilityResponse->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_CoverageEligibilityResponse->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(coverageEligibilityResponse, "status");
	if(cjson_status)
	{
		result_CoverageEligibilityResponse->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(coverageEligibilityResponse, "purpose");
	if(cjson_purpose)
	{
		result_CoverageEligibilityResponse->purpose_count = cJSON_GetArraySize(cjson_purpose);
		result_CoverageEligibilityResponse->purpose = PushArray(arena, fhir_code, result_CoverageEligibilityResponse->purpose_count);
		for(int i = 0; i < result_CoverageEligibilityResponse->purpose_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_purpose, i);
			result_CoverageEligibilityResponse->purpose[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(coverageEligibilityResponse, "patient");
	if(cjson_patient)
	{
		result_CoverageEligibilityResponse->patient = Deserialize_Reference(arena, cjson_patient);
	}
	if((bool)cJSON_HasObjectItem(coverageEligibilityResponse, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse, "valueDate");
		result_CoverageEligibilityResponse->serviced.valueDate = Str8C(cJSON_GetStringValue(item));
		result_CoverageEligibilityResponse->serviced_type = CoverageEligibilityResponse::ServicedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(coverageEligibilityResponse, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse, "valuePeriod");
		result_CoverageEligibilityResponse->serviced.valuePeriod = Deserialize_Period(arena, item);
		result_CoverageEligibilityResponse->serviced_type = CoverageEligibilityResponse::ServicedType::Period;
	}


	cJSON *cjson_created =  cJSON_GetObjectItem(coverageEligibilityResponse, "created");
	if(cjson_created)
	{
		result_CoverageEligibilityResponse->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_requestor =  cJSON_GetObjectItem(coverageEligibilityResponse, "requestor");
	if(cjson_requestor)
	{
		result_CoverageEligibilityResponse->requestor = Deserialize_Reference(arena, cjson_requestor);
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(coverageEligibilityResponse, "request");
	if(cjson_request)
	{
		result_CoverageEligibilityResponse->request = Deserialize_Reference(arena, cjson_request);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(coverageEligibilityResponse, "outcome");
	if(cjson_outcome)
	{
		result_CoverageEligibilityResponse->outcome = Str8C(cJSON_GetStringValue(cjson_outcome));
	}
	cJSON *cjson_disposition =  cJSON_GetObjectItem(coverageEligibilityResponse, "disposition");
	if(cjson_disposition)
	{
		result_CoverageEligibilityResponse->disposition = Str8C(cJSON_GetStringValue(cjson_disposition));
	}
	cJSON *cjson_insurer =  cJSON_GetObjectItem(coverageEligibilityResponse, "insurer");
	if(cjson_insurer)
	{
		result_CoverageEligibilityResponse->insurer = Deserialize_Reference(arena, cjson_insurer);
	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(coverageEligibilityResponse, "insurance");
	if(cjson_insurance)
	{
		result_CoverageEligibilityResponse->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_CoverageEligibilityResponse->insurance = PushArray(arena, CoverageEligibilityResponse_Insurance, result_CoverageEligibilityResponse->insurance_count);
		for(int i = 0; i < result_CoverageEligibilityResponse->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_CoverageEligibilityResponse->insurance[i] = *Deserialize_CoverageEligibilityResponse_Insurance(arena, internal);
		}

	}
	cJSON *cjson_preAuthRef =  cJSON_GetObjectItem(coverageEligibilityResponse, "preAuthRef");
	if(cjson_preAuthRef)
	{
		result_CoverageEligibilityResponse->preAuthRef = Str8C(cJSON_GetStringValue(cjson_preAuthRef));
	}
	cJSON *cjson_form =  cJSON_GetObjectItem(coverageEligibilityResponse, "form");
	if(cjson_form)
	{
		result_CoverageEligibilityResponse->form = Deserialize_CodeableConcept(arena, cjson_form);
	}
	cJSON *cjson_error =  cJSON_GetObjectItem(coverageEligibilityResponse, "error");
	if(cjson_error)
	{
		result_CoverageEligibilityResponse->error_count = cJSON_GetArraySize(cjson_error);
		result_CoverageEligibilityResponse->error = PushArray(arena, CoverageEligibilityResponse_Error, result_CoverageEligibilityResponse->error_count);
		for(int i = 0; i < result_CoverageEligibilityResponse->error_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_error, i);
			result_CoverageEligibilityResponse->error[i] = *Deserialize_CoverageEligibilityResponse_Error(arena, internal);
		}

	}
	return result_CoverageEligibilityResponse;
}

CoverageEligibilityResponse_Insurance*
Deserialize_CoverageEligibilityResponse_Insurance(Arena *arena, cJSON *coverageEligibilityResponse_Insurance)
{
	CoverageEligibilityResponse_Insurance *result_CoverageEligibilityResponse_Insurance = PushArray(arena, CoverageEligibilityResponse_Insurance, 1);
	result_CoverageEligibilityResponse_Insurance->resourceType = ResourceType::CoverageEligibilityResponse_Insurance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityResponse_Insurance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityResponse_Insurance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityResponse_Insurance->extension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Insurance->extension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityResponse_Insurance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityResponse_Insurance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityResponse_Insurance->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Insurance->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityResponse_Insurance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "coverage");
	if(cjson_coverage)
	{
		result_CoverageEligibilityResponse_Insurance->coverage = Deserialize_Reference(arena, cjson_coverage);
	}
	cJSON *cjson_inforce =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "inforce");
	if(cjson_inforce)
	{
		result_CoverageEligibilityResponse_Insurance->inforce = (boolean)cJSON_IsTrue(cjson_inforce);
	}
	cJSON *cjson_benefitPeriod =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "benefitPeriod");
	if(cjson_benefitPeriod)
	{
		result_CoverageEligibilityResponse_Insurance->benefitPeriod = Deserialize_Period(arena, cjson_benefitPeriod);
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance, "item");
	if(cjson_item)
	{
		result_CoverageEligibilityResponse_Insurance->item_count = cJSON_GetArraySize(cjson_item);
		result_CoverageEligibilityResponse_Insurance->item = PushArray(arena, CoverageEligibilityResponse_Insurance_Item, result_CoverageEligibilityResponse_Insurance->item_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_CoverageEligibilityResponse_Insurance->item[i] = *Deserialize_CoverageEligibilityResponse_Insurance_Item(arena, internal);
		}

	}
	return result_CoverageEligibilityResponse_Insurance;
}

CoverageEligibilityResponse_Insurance_Item*
Deserialize_CoverageEligibilityResponse_Insurance_Item(Arena *arena, cJSON *coverageEligibilityResponse_Insurance_Item)
{
	CoverageEligibilityResponse_Insurance_Item *result_CoverageEligibilityResponse_Insurance_Item = PushArray(arena, CoverageEligibilityResponse_Insurance_Item, 1);
	result_CoverageEligibilityResponse_Insurance_Item->resourceType = ResourceType::CoverageEligibilityResponse_Insurance_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityResponse_Insurance_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityResponse_Insurance_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityResponse_Insurance_Item->extension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Insurance_Item->extension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityResponse_Insurance_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityResponse_Insurance_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityResponse_Insurance_Item->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Insurance_Item->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityResponse_Insurance_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "category");
	if(cjson_category)
	{
		result_CoverageEligibilityResponse_Insurance_Item->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "productOrService");
	if(cjson_productOrService)
	{
		result_CoverageEligibilityResponse_Insurance_Item->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "modifier");
	if(cjson_modifier)
	{
		result_CoverageEligibilityResponse_Insurance_Item->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_CoverageEligibilityResponse_Insurance_Item->modifier = PushArray(arena, CodeableConcept, result_CoverageEligibilityResponse_Insurance_Item->modifier_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance_Item->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_CoverageEligibilityResponse_Insurance_Item->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "provider");
	if(cjson_provider)
	{
		result_CoverageEligibilityResponse_Insurance_Item->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_excluded =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "excluded");
	if(cjson_excluded)
	{
		result_CoverageEligibilityResponse_Insurance_Item->excluded = (boolean)cJSON_IsTrue(cjson_excluded);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "name");
	if(cjson_name)
	{
		result_CoverageEligibilityResponse_Insurance_Item->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "description");
	if(cjson_description)
	{
		result_CoverageEligibilityResponse_Insurance_Item->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_network =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "network");
	if(cjson_network)
	{
		result_CoverageEligibilityResponse_Insurance_Item->network = Deserialize_CodeableConcept(arena, cjson_network);
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "unit");
	if(cjson_unit)
	{
		result_CoverageEligibilityResponse_Insurance_Item->unit = Deserialize_CodeableConcept(arena, cjson_unit);
	}
	cJSON *cjson_term =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "term");
	if(cjson_term)
	{
		result_CoverageEligibilityResponse_Insurance_Item->term = Deserialize_CodeableConcept(arena, cjson_term);
	}
	cJSON *cjson_benefit =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "benefit");
	if(cjson_benefit)
	{
		result_CoverageEligibilityResponse_Insurance_Item->benefit_count = cJSON_GetArraySize(cjson_benefit);
		result_CoverageEligibilityResponse_Insurance_Item->benefit = PushArray(arena, CoverageEligibilityResponse_Insurance_Item_Benefit, result_CoverageEligibilityResponse_Insurance_Item->benefit_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance_Item->benefit_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_benefit, i);
			result_CoverageEligibilityResponse_Insurance_Item->benefit[i] = *Deserialize_CoverageEligibilityResponse_Insurance_Item_Benefit(arena, internal);
		}

	}
	cJSON *cjson_authorizationRequired =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "authorizationRequired");
	if(cjson_authorizationRequired)
	{
		result_CoverageEligibilityResponse_Insurance_Item->authorizationRequired = (boolean)cJSON_IsTrue(cjson_authorizationRequired);
	}
	cJSON *cjson_authorizationSupporting =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "authorizationSupporting");
	if(cjson_authorizationSupporting)
	{
		result_CoverageEligibilityResponse_Insurance_Item->authorizationSupporting_count = cJSON_GetArraySize(cjson_authorizationSupporting);
		result_CoverageEligibilityResponse_Insurance_Item->authorizationSupporting = PushArray(arena, CodeableConcept, result_CoverageEligibilityResponse_Insurance_Item->authorizationSupporting_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance_Item->authorizationSupporting_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_authorizationSupporting, i);
			result_CoverageEligibilityResponse_Insurance_Item->authorizationSupporting[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_authorizationUrl =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item, "authorizationUrl");
	if(cjson_authorizationUrl)
	{
		result_CoverageEligibilityResponse_Insurance_Item->authorizationUrl = Str8C(cJSON_GetStringValue(cjson_authorizationUrl));
	}
	return result_CoverageEligibilityResponse_Insurance_Item;
}

CoverageEligibilityResponse_Insurance_Item_Benefit*
Deserialize_CoverageEligibilityResponse_Insurance_Item_Benefit(Arena *arena, cJSON *coverageEligibilityResponse_Insurance_Item_Benefit)
{
	CoverageEligibilityResponse_Insurance_Item_Benefit *result_CoverageEligibilityResponse_Insurance_Item_Benefit = PushArray(arena, CoverageEligibilityResponse_Insurance_Item_Benefit, 1);
	result_CoverageEligibilityResponse_Insurance_Item_Benefit->resourceType = ResourceType::CoverageEligibilityResponse_Insurance_Item_Benefit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->extension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Insurance_Item_Benefit->extension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance_Item_Benefit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityResponse_Insurance_Item_Benefit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "type");
	if(cjson_type)
	{
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueUnsignedInt");
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->allowed.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->allowed_type = CoverageEligibilityResponse_Insurance_Item_Benefit::AllowedType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueString");
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->allowed.valueString = Str8C(cJSON_GetStringValue(item));
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->allowed_type = CoverageEligibilityResponse_Insurance_Item_Benefit::AllowedType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueMoney");
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->allowed.valueMoney = Deserialize_Money(arena, item);
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->allowed_type = CoverageEligibilityResponse_Insurance_Item_Benefit::AllowedType::Money;
	}


	if((bool)cJSON_HasObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueUnsignedInt");
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->used.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->used_type = CoverageEligibilityResponse_Insurance_Item_Benefit::UsedType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueString");
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->used.valueString = Str8C(cJSON_GetStringValue(item));
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->used_type = CoverageEligibilityResponse_Insurance_Item_Benefit::UsedType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(coverageEligibilityResponse_Insurance_Item_Benefit, "valueMoney");
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->used.valueMoney = Deserialize_Money(arena, item);
		result_CoverageEligibilityResponse_Insurance_Item_Benefit->used_type = CoverageEligibilityResponse_Insurance_Item_Benefit::UsedType::Money;
	}


	return result_CoverageEligibilityResponse_Insurance_Item_Benefit;
}

CoverageEligibilityResponse_Error*
Deserialize_CoverageEligibilityResponse_Error(Arena *arena, cJSON *coverageEligibilityResponse_Error)
{
	CoverageEligibilityResponse_Error *result_CoverageEligibilityResponse_Error = PushArray(arena, CoverageEligibilityResponse_Error, 1);
	result_CoverageEligibilityResponse_Error->resourceType = ResourceType::CoverageEligibilityResponse_Error;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coverageEligibilityResponse_Error, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coverageEligibilityResponse_Error, "id");
	if(cjson_id)
	{
		result_CoverageEligibilityResponse_Error->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coverageEligibilityResponse_Error, "extension");
	if(cjson_extension)
	{
		result_CoverageEligibilityResponse_Error->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CoverageEligibilityResponse_Error->extension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Error->extension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Error->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CoverageEligibilityResponse_Error->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(coverageEligibilityResponse_Error, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_CoverageEligibilityResponse_Error->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_CoverageEligibilityResponse_Error->modifierExtension = PushArray(arena, Extension, result_CoverageEligibilityResponse_Error->modifierExtension_count);
		for(int i = 0; i < result_CoverageEligibilityResponse_Error->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_CoverageEligibilityResponse_Error->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(coverageEligibilityResponse_Error, "code");
	if(cjson_code)
	{
		result_CoverageEligibilityResponse_Error->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	return result_CoverageEligibilityResponse_Error;
}

DetectedIssue*
Deserialize_DetectedIssue(Arena *arena, cJSON *detectedIssue)
{
	DetectedIssue *result_DetectedIssue = PushArray(arena, DetectedIssue, 1);
	result_DetectedIssue->resourceType = ResourceType::DetectedIssue;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(detectedIssue, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(detectedIssue, "id");
	if(cjson_id)
	{
		result_DetectedIssue->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(detectedIssue, "meta");
	if(cjson_meta)
	{
		result_DetectedIssue->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(detectedIssue, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DetectedIssue->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(detectedIssue, "language");
	if(cjson_language)
	{
		result_DetectedIssue->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(detectedIssue, "text");
	if(cjson_text)
	{
		result_DetectedIssue->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(detectedIssue, "contained");
	if(cjson_contained)
	{
		result_DetectedIssue->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DetectedIssue->contained = PushArray(arena, Resource, result_DetectedIssue->contained_count);
		for(int i = 0; i < result_DetectedIssue->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DetectedIssue->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(detectedIssue, "extension");
	if(cjson_extension)
	{
		result_DetectedIssue->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DetectedIssue->extension = PushArray(arena, Extension, result_DetectedIssue->extension_count);
		for(int i = 0; i < result_DetectedIssue->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DetectedIssue->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(detectedIssue, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DetectedIssue->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DetectedIssue->modifierExtension = PushArray(arena, Extension, result_DetectedIssue->modifierExtension_count);
		for(int i = 0; i < result_DetectedIssue->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DetectedIssue->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(detectedIssue, "identifier");
	if(cjson_identifier)
	{
		result_DetectedIssue->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DetectedIssue->identifier = PushArray(arena, Identifier, result_DetectedIssue->identifier_count);
		for(int i = 0; i < result_DetectedIssue->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DetectedIssue->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(detectedIssue, "status");
	if(cjson_status)
	{
		result_DetectedIssue->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(detectedIssue, "code");
	if(cjson_code)
	{
		result_DetectedIssue->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_severity =  cJSON_GetObjectItem(detectedIssue, "severity");
	if(cjson_severity)
	{
		result_DetectedIssue->severity = Str8C(cJSON_GetStringValue(cjson_severity));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(detectedIssue, "patient");
	if(cjson_patient)
	{
		result_DetectedIssue->patient = Deserialize_Reference(arena, cjson_patient);
	}
	if((bool)cJSON_HasObjectItem(detectedIssue, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(detectedIssue, "valueDateTime");
		result_DetectedIssue->identified.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_DetectedIssue->identified_type = DetectedIssue::IdentifiedType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(detectedIssue, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(detectedIssue, "valuePeriod");
		result_DetectedIssue->identified.valuePeriod = Deserialize_Period(arena, item);
		result_DetectedIssue->identified_type = DetectedIssue::IdentifiedType::Period;
	}


	cJSON *cjson_author =  cJSON_GetObjectItem(detectedIssue, "author");
	if(cjson_author)
	{
		result_DetectedIssue->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_implicated =  cJSON_GetObjectItem(detectedIssue, "implicated");
	if(cjson_implicated)
	{
		result_DetectedIssue->implicated_count = cJSON_GetArraySize(cjson_implicated);
		result_DetectedIssue->implicated = PushArray(arena, Reference, result_DetectedIssue->implicated_count);
		for(int i = 0; i < result_DetectedIssue->implicated_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_implicated, i);
			result_DetectedIssue->implicated[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_evidence =  cJSON_GetObjectItem(detectedIssue, "evidence");
	if(cjson_evidence)
	{
		result_DetectedIssue->evidence_count = cJSON_GetArraySize(cjson_evidence);
		result_DetectedIssue->evidence = PushArray(arena, DetectedIssue_Evidence, result_DetectedIssue->evidence_count);
		for(int i = 0; i < result_DetectedIssue->evidence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_evidence, i);
			result_DetectedIssue->evidence[i] = *Deserialize_DetectedIssue_Evidence(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(detectedIssue, "detail");
	if(cjson_detail)
	{
		result_DetectedIssue->detail = Str8C(cJSON_GetStringValue(cjson_detail));
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(detectedIssue, "reference");
	if(cjson_reference)
	{
		result_DetectedIssue->reference = Str8C(cJSON_GetStringValue(cjson_reference));
	}
	cJSON *cjson_mitigation =  cJSON_GetObjectItem(detectedIssue, "mitigation");
	if(cjson_mitigation)
	{
		result_DetectedIssue->mitigation_count = cJSON_GetArraySize(cjson_mitigation);
		result_DetectedIssue->mitigation = PushArray(arena, DetectedIssue_Mitigation, result_DetectedIssue->mitigation_count);
		for(int i = 0; i < result_DetectedIssue->mitigation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_mitigation, i);
			result_DetectedIssue->mitigation[i] = *Deserialize_DetectedIssue_Mitigation(arena, internal);
		}

	}
	return result_DetectedIssue;
}

DetectedIssue_Evidence*
Deserialize_DetectedIssue_Evidence(Arena *arena, cJSON *detectedIssue_Evidence)
{
	DetectedIssue_Evidence *result_DetectedIssue_Evidence = PushArray(arena, DetectedIssue_Evidence, 1);
	result_DetectedIssue_Evidence->resourceType = ResourceType::DetectedIssue_Evidence;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(detectedIssue_Evidence, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(detectedIssue_Evidence, "id");
	if(cjson_id)
	{
		result_DetectedIssue_Evidence->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(detectedIssue_Evidence, "extension");
	if(cjson_extension)
	{
		result_DetectedIssue_Evidence->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DetectedIssue_Evidence->extension = PushArray(arena, Extension, result_DetectedIssue_Evidence->extension_count);
		for(int i = 0; i < result_DetectedIssue_Evidence->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DetectedIssue_Evidence->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(detectedIssue_Evidence, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DetectedIssue_Evidence->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DetectedIssue_Evidence->modifierExtension = PushArray(arena, Extension, result_DetectedIssue_Evidence->modifierExtension_count);
		for(int i = 0; i < result_DetectedIssue_Evidence->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DetectedIssue_Evidence->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(detectedIssue_Evidence, "code");
	if(cjson_code)
	{
		result_DetectedIssue_Evidence->code_count = cJSON_GetArraySize(cjson_code);
		result_DetectedIssue_Evidence->code = PushArray(arena, CodeableConcept, result_DetectedIssue_Evidence->code_count);
		for(int i = 0; i < result_DetectedIssue_Evidence->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_DetectedIssue_Evidence->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(detectedIssue_Evidence, "detail");
	if(cjson_detail)
	{
		result_DetectedIssue_Evidence->detail_count = cJSON_GetArraySize(cjson_detail);
		result_DetectedIssue_Evidence->detail = PushArray(arena, Reference, result_DetectedIssue_Evidence->detail_count);
		for(int i = 0; i < result_DetectedIssue_Evidence->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_DetectedIssue_Evidence->detail[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_DetectedIssue_Evidence;
}

DetectedIssue_Mitigation*
Deserialize_DetectedIssue_Mitigation(Arena *arena, cJSON *detectedIssue_Mitigation)
{
	DetectedIssue_Mitigation *result_DetectedIssue_Mitigation = PushArray(arena, DetectedIssue_Mitigation, 1);
	result_DetectedIssue_Mitigation->resourceType = ResourceType::DetectedIssue_Mitigation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(detectedIssue_Mitigation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(detectedIssue_Mitigation, "id");
	if(cjson_id)
	{
		result_DetectedIssue_Mitigation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(detectedIssue_Mitigation, "extension");
	if(cjson_extension)
	{
		result_DetectedIssue_Mitigation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DetectedIssue_Mitigation->extension = PushArray(arena, Extension, result_DetectedIssue_Mitigation->extension_count);
		for(int i = 0; i < result_DetectedIssue_Mitigation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DetectedIssue_Mitigation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(detectedIssue_Mitigation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DetectedIssue_Mitigation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DetectedIssue_Mitigation->modifierExtension = PushArray(arena, Extension, result_DetectedIssue_Mitigation->modifierExtension_count);
		for(int i = 0; i < result_DetectedIssue_Mitigation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DetectedIssue_Mitigation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(detectedIssue_Mitigation, "action");
	if(cjson_action)
	{
		result_DetectedIssue_Mitigation->action = Deserialize_CodeableConcept(arena, cjson_action);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(detectedIssue_Mitigation, "date");
	if(cjson_date)
	{
		result_DetectedIssue_Mitigation->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(detectedIssue_Mitigation, "author");
	if(cjson_author)
	{
		result_DetectedIssue_Mitigation->author = Deserialize_Reference(arena, cjson_author);
	}
	return result_DetectedIssue_Mitigation;
}

Device*
Deserialize_Device(Arena *arena, cJSON *device)
{
	Device *result_Device = PushArray(arena, Device, 1);
	result_Device->resourceType = ResourceType::Device;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(device, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(device, "id");
	if(cjson_id)
	{
		result_Device->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(device, "meta");
	if(cjson_meta)
	{
		result_Device->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(device, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Device->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(device, "language");
	if(cjson_language)
	{
		result_Device->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(device, "text");
	if(cjson_text)
	{
		result_Device->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(device, "contained");
	if(cjson_contained)
	{
		result_Device->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Device->contained = PushArray(arena, Resource, result_Device->contained_count);
		for(int i = 0; i < result_Device->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Device->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(device, "extension");
	if(cjson_extension)
	{
		result_Device->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Device->extension = PushArray(arena, Extension, result_Device->extension_count);
		for(int i = 0; i < result_Device->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Device->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(device, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Device->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Device->modifierExtension = PushArray(arena, Extension, result_Device->modifierExtension_count);
		for(int i = 0; i < result_Device->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Device->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(device, "identifier");
	if(cjson_identifier)
	{
		result_Device->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Device->identifier = PushArray(arena, Identifier, result_Device->identifier_count);
		for(int i = 0; i < result_Device->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Device->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(device, "definition");
	if(cjson_definition)
	{
		result_Device->definition = Deserialize_Reference(arena, cjson_definition);
	}
	cJSON *cjson_udiCarrier =  cJSON_GetObjectItem(device, "udiCarrier");
	if(cjson_udiCarrier)
	{
		result_Device->udiCarrier_count = cJSON_GetArraySize(cjson_udiCarrier);
		result_Device->udiCarrier = PushArray(arena, Device_UdiCarrier, result_Device->udiCarrier_count);
		for(int i = 0; i < result_Device->udiCarrier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udiCarrier, i);
			result_Device->udiCarrier[i] = *Deserialize_Device_UdiCarrier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(device, "status");
	if(cjson_status)
	{
		result_Device->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(device, "statusReason");
	if(cjson_statusReason)
	{
		result_Device->statusReason_count = cJSON_GetArraySize(cjson_statusReason);
		result_Device->statusReason = PushArray(arena, CodeableConcept, result_Device->statusReason_count);
		for(int i = 0; i < result_Device->statusReason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_statusReason, i);
			result_Device->statusReason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_distinctIdentifier =  cJSON_GetObjectItem(device, "distinctIdentifier");
	if(cjson_distinctIdentifier)
	{
		result_Device->distinctIdentifier = Str8C(cJSON_GetStringValue(cjson_distinctIdentifier));
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(device, "manufacturer");
	if(cjson_manufacturer)
	{
		result_Device->manufacturer = Str8C(cJSON_GetStringValue(cjson_manufacturer));
	}
	cJSON *cjson_manufactureDate =  cJSON_GetObjectItem(device, "manufactureDate");
	if(cjson_manufactureDate)
	{
		result_Device->manufactureDate = Str8C(cJSON_GetStringValue(cjson_manufactureDate));
	}
	cJSON *cjson_expirationDate =  cJSON_GetObjectItem(device, "expirationDate");
	if(cjson_expirationDate)
	{
		result_Device->expirationDate = Str8C(cJSON_GetStringValue(cjson_expirationDate));
	}
	cJSON *cjson_lotNumber =  cJSON_GetObjectItem(device, "lotNumber");
	if(cjson_lotNumber)
	{
		result_Device->lotNumber = Str8C(cJSON_GetStringValue(cjson_lotNumber));
	}
	cJSON *cjson_serialNumber =  cJSON_GetObjectItem(device, "serialNumber");
	if(cjson_serialNumber)
	{
		result_Device->serialNumber = Str8C(cJSON_GetStringValue(cjson_serialNumber));
	}
	cJSON *cjson_deviceName =  cJSON_GetObjectItem(device, "deviceName");
	if(cjson_deviceName)
	{
		result_Device->deviceName_count = cJSON_GetArraySize(cjson_deviceName);
		result_Device->deviceName = PushArray(arena, Device_DeviceName, result_Device->deviceName_count);
		for(int i = 0; i < result_Device->deviceName_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_deviceName, i);
			result_Device->deviceName[i] = *Deserialize_Device_DeviceName(arena, internal);
		}

	}
	cJSON *cjson_modelNumber =  cJSON_GetObjectItem(device, "modelNumber");
	if(cjson_modelNumber)
	{
		result_Device->modelNumber = Str8C(cJSON_GetStringValue(cjson_modelNumber));
	}
	cJSON *cjson_partNumber =  cJSON_GetObjectItem(device, "partNumber");
	if(cjson_partNumber)
	{
		result_Device->partNumber = Str8C(cJSON_GetStringValue(cjson_partNumber));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(device, "type");
	if(cjson_type)
	{
		result_Device->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_specialization =  cJSON_GetObjectItem(device, "specialization");
	if(cjson_specialization)
	{
		result_Device->specialization_count = cJSON_GetArraySize(cjson_specialization);
		result_Device->specialization = PushArray(arena, Device_Specialization, result_Device->specialization_count);
		for(int i = 0; i < result_Device->specialization_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialization, i);
			result_Device->specialization[i] = *Deserialize_Device_Specialization(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(device, "version");
	if(cjson_version)
	{
		result_Device->version_count = cJSON_GetArraySize(cjson_version);
		result_Device->version = PushArray(arena, Device_Version, result_Device->version_count);
		for(int i = 0; i < result_Device->version_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_version, i);
			result_Device->version[i] = *Deserialize_Device_Version(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(device, "property");
	if(cjson_property)
	{
		result_Device->property_count = cJSON_GetArraySize(cjson_property);
		result_Device->property = PushArray(arena, Device_Property, result_Device->property_count);
		for(int i = 0; i < result_Device->property_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_property, i);
			result_Device->property[i] = *Deserialize_Device_Property(arena, internal);
		}

	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(device, "patient");
	if(cjson_patient)
	{
		result_Device->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_owner =  cJSON_GetObjectItem(device, "owner");
	if(cjson_owner)
	{
		result_Device->owner = Deserialize_Reference(arena, cjson_owner);
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(device, "contact");
	if(cjson_contact)
	{
		result_Device->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Device->contact = PushArray(arena, ContactPoint, result_Device->contact_count);
		for(int i = 0; i < result_Device->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Device->contact[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(device, "location");
	if(cjson_location)
	{
		result_Device->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(device, "url");
	if(cjson_url)
	{
		result_Device->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(device, "note");
	if(cjson_note)
	{
		result_Device->note_count = cJSON_GetArraySize(cjson_note);
		result_Device->note = PushArray(arena, Annotation, result_Device->note_count);
		for(int i = 0; i < result_Device->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Device->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_safety =  cJSON_GetObjectItem(device, "safety");
	if(cjson_safety)
	{
		result_Device->safety_count = cJSON_GetArraySize(cjson_safety);
		result_Device->safety = PushArray(arena, CodeableConcept, result_Device->safety_count);
		for(int i = 0; i < result_Device->safety_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_safety, i);
			result_Device->safety[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_parent =  cJSON_GetObjectItem(device, "parent");
	if(cjson_parent)
	{
		result_Device->parent = Deserialize_Reference(arena, cjson_parent);
	}
	return result_Device;
}

Device_UdiCarrier*
Deserialize_Device_UdiCarrier(Arena *arena, cJSON *device_UdiCarrier)
{
	Device_UdiCarrier *result_Device_UdiCarrier = PushArray(arena, Device_UdiCarrier, 1);
	result_Device_UdiCarrier->resourceType = ResourceType::Device_UdiCarrier;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(device_UdiCarrier, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(device_UdiCarrier, "id");
	if(cjson_id)
	{
		result_Device_UdiCarrier->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(device_UdiCarrier, "extension");
	if(cjson_extension)
	{
		result_Device_UdiCarrier->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Device_UdiCarrier->extension = PushArray(arena, Extension, result_Device_UdiCarrier->extension_count);
		for(int i = 0; i < result_Device_UdiCarrier->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Device_UdiCarrier->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(device_UdiCarrier, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Device_UdiCarrier->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Device_UdiCarrier->modifierExtension = PushArray(arena, Extension, result_Device_UdiCarrier->modifierExtension_count);
		for(int i = 0; i < result_Device_UdiCarrier->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Device_UdiCarrier->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_deviceIdentifier =  cJSON_GetObjectItem(device_UdiCarrier, "deviceIdentifier");
	if(cjson_deviceIdentifier)
	{
		result_Device_UdiCarrier->deviceIdentifier = Str8C(cJSON_GetStringValue(cjson_deviceIdentifier));
	}
	cJSON *cjson_issuer =  cJSON_GetObjectItem(device_UdiCarrier, "issuer");
	if(cjson_issuer)
	{
		result_Device_UdiCarrier->issuer = Str8C(cJSON_GetStringValue(cjson_issuer));
	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(device_UdiCarrier, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_Device_UdiCarrier->jurisdiction = Str8C(cJSON_GetStringValue(cjson_jurisdiction));
	}
	cJSON *cjson_carrierAIDC =  cJSON_GetObjectItem(device_UdiCarrier, "carrierAIDC");
	if(cjson_carrierAIDC)
	{
		result_Device_UdiCarrier->carrierAIDC = Str8C(cJSON_GetStringValue(cjson_carrierAIDC));
	}
	cJSON *cjson_carrierHRF =  cJSON_GetObjectItem(device_UdiCarrier, "carrierHRF");
	if(cjson_carrierHRF)
	{
		result_Device_UdiCarrier->carrierHRF = Str8C(cJSON_GetStringValue(cjson_carrierHRF));
	}
	cJSON *cjson_entryType =  cJSON_GetObjectItem(device_UdiCarrier, "entryType");
	if(cjson_entryType)
	{
		result_Device_UdiCarrier->entryType = Str8C(cJSON_GetStringValue(cjson_entryType));
	}
	return result_Device_UdiCarrier;
}

Device_DeviceName*
Deserialize_Device_DeviceName(Arena *arena, cJSON *device_DeviceName)
{
	Device_DeviceName *result_Device_DeviceName = PushArray(arena, Device_DeviceName, 1);
	result_Device_DeviceName->resourceType = ResourceType::Device_DeviceName;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(device_DeviceName, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(device_DeviceName, "id");
	if(cjson_id)
	{
		result_Device_DeviceName->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(device_DeviceName, "extension");
	if(cjson_extension)
	{
		result_Device_DeviceName->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Device_DeviceName->extension = PushArray(arena, Extension, result_Device_DeviceName->extension_count);
		for(int i = 0; i < result_Device_DeviceName->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Device_DeviceName->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(device_DeviceName, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Device_DeviceName->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Device_DeviceName->modifierExtension = PushArray(arena, Extension, result_Device_DeviceName->modifierExtension_count);
		for(int i = 0; i < result_Device_DeviceName->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Device_DeviceName->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(device_DeviceName, "name");
	if(cjson_name)
	{
		result_Device_DeviceName->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(device_DeviceName, "type");
	if(cjson_type)
	{
		result_Device_DeviceName->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	return result_Device_DeviceName;
}

Device_Specialization*
Deserialize_Device_Specialization(Arena *arena, cJSON *device_Specialization)
{
	Device_Specialization *result_Device_Specialization = PushArray(arena, Device_Specialization, 1);
	result_Device_Specialization->resourceType = ResourceType::Device_Specialization;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(device_Specialization, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(device_Specialization, "id");
	if(cjson_id)
	{
		result_Device_Specialization->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(device_Specialization, "extension");
	if(cjson_extension)
	{
		result_Device_Specialization->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Device_Specialization->extension = PushArray(arena, Extension, result_Device_Specialization->extension_count);
		for(int i = 0; i < result_Device_Specialization->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Device_Specialization->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(device_Specialization, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Device_Specialization->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Device_Specialization->modifierExtension = PushArray(arena, Extension, result_Device_Specialization->modifierExtension_count);
		for(int i = 0; i < result_Device_Specialization->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Device_Specialization->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_systemType =  cJSON_GetObjectItem(device_Specialization, "systemType");
	if(cjson_systemType)
	{
		result_Device_Specialization->systemType = Deserialize_CodeableConcept(arena, cjson_systemType);
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(device_Specialization, "version");
	if(cjson_version)
	{
		result_Device_Specialization->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	return result_Device_Specialization;
}

Device_Version*
Deserialize_Device_Version(Arena *arena, cJSON *device_Version)
{
	Device_Version *result_Device_Version = PushArray(arena, Device_Version, 1);
	result_Device_Version->resourceType = ResourceType::Device_Version;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(device_Version, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(device_Version, "id");
	if(cjson_id)
	{
		result_Device_Version->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(device_Version, "extension");
	if(cjson_extension)
	{
		result_Device_Version->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Device_Version->extension = PushArray(arena, Extension, result_Device_Version->extension_count);
		for(int i = 0; i < result_Device_Version->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Device_Version->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(device_Version, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Device_Version->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Device_Version->modifierExtension = PushArray(arena, Extension, result_Device_Version->modifierExtension_count);
		for(int i = 0; i < result_Device_Version->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Device_Version->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(device_Version, "type");
	if(cjson_type)
	{
		result_Device_Version->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_component =  cJSON_GetObjectItem(device_Version, "component");
	if(cjson_component)
	{
		result_Device_Version->component = Deserialize_Identifier(arena, cjson_component);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(device_Version, "value");
	if(cjson_value)
	{
		result_Device_Version->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_Device_Version;
}

Device_Property*
Deserialize_Device_Property(Arena *arena, cJSON *device_Property)
{
	Device_Property *result_Device_Property = PushArray(arena, Device_Property, 1);
	result_Device_Property->resourceType = ResourceType::Device_Property;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(device_Property, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(device_Property, "id");
	if(cjson_id)
	{
		result_Device_Property->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(device_Property, "extension");
	if(cjson_extension)
	{
		result_Device_Property->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Device_Property->extension = PushArray(arena, Extension, result_Device_Property->extension_count);
		for(int i = 0; i < result_Device_Property->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Device_Property->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(device_Property, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Device_Property->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Device_Property->modifierExtension = PushArray(arena, Extension, result_Device_Property->modifierExtension_count);
		for(int i = 0; i < result_Device_Property->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Device_Property->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(device_Property, "type");
	if(cjson_type)
	{
		result_Device_Property->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_valueQuantity =  cJSON_GetObjectItem(device_Property, "valueQuantity");
	if(cjson_valueQuantity)
	{
		result_Device_Property->valueQuantity_count = cJSON_GetArraySize(cjson_valueQuantity);
		result_Device_Property->valueQuantity = PushArray(arena, Quantity, result_Device_Property->valueQuantity_count);
		for(int i = 0; i < result_Device_Property->valueQuantity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_valueQuantity, i);
			result_Device_Property->valueQuantity[i] = *Deserialize_Quantity(arena, internal);
		}

	}
	cJSON *cjson_valueCode =  cJSON_GetObjectItem(device_Property, "valueCode");
	if(cjson_valueCode)
	{
		result_Device_Property->valueCode_count = cJSON_GetArraySize(cjson_valueCode);
		result_Device_Property->valueCode = PushArray(arena, CodeableConcept, result_Device_Property->valueCode_count);
		for(int i = 0; i < result_Device_Property->valueCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_valueCode, i);
			result_Device_Property->valueCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_Device_Property;
}

DeviceDefinition*
Deserialize_DeviceDefinition(Arena *arena, cJSON *deviceDefinition)
{
	DeviceDefinition *result_DeviceDefinition = PushArray(arena, DeviceDefinition, 1);
	result_DeviceDefinition->resourceType = ResourceType::DeviceDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceDefinition, "id");
	if(cjson_id)
	{
		result_DeviceDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(deviceDefinition, "meta");
	if(cjson_meta)
	{
		result_DeviceDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(deviceDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DeviceDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(deviceDefinition, "language");
	if(cjson_language)
	{
		result_DeviceDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(deviceDefinition, "text");
	if(cjson_text)
	{
		result_DeviceDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(deviceDefinition, "contained");
	if(cjson_contained)
	{
		result_DeviceDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DeviceDefinition->contained = PushArray(arena, Resource, result_DeviceDefinition->contained_count);
		for(int i = 0; i < result_DeviceDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DeviceDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceDefinition, "extension");
	if(cjson_extension)
	{
		result_DeviceDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceDefinition->extension = PushArray(arena, Extension, result_DeviceDefinition->extension_count);
		for(int i = 0; i < result_DeviceDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceDefinition->modifierExtension = PushArray(arena, Extension, result_DeviceDefinition->modifierExtension_count);
		for(int i = 0; i < result_DeviceDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(deviceDefinition, "identifier");
	if(cjson_identifier)
	{
		result_DeviceDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DeviceDefinition->identifier = PushArray(arena, Identifier, result_DeviceDefinition->identifier_count);
		for(int i = 0; i < result_DeviceDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DeviceDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_udiDeviceIdentifier =  cJSON_GetObjectItem(deviceDefinition, "udiDeviceIdentifier");
	if(cjson_udiDeviceIdentifier)
	{
		result_DeviceDefinition->udiDeviceIdentifier_count = cJSON_GetArraySize(cjson_udiDeviceIdentifier);
		result_DeviceDefinition->udiDeviceIdentifier = PushArray(arena, DeviceDefinition_UdiDeviceIdentifier, result_DeviceDefinition->udiDeviceIdentifier_count);
		for(int i = 0; i < result_DeviceDefinition->udiDeviceIdentifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udiDeviceIdentifier, i);
			result_DeviceDefinition->udiDeviceIdentifier[i] = *Deserialize_DeviceDefinition_UdiDeviceIdentifier(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(deviceDefinition, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceDefinition, "valueString");
		result_DeviceDefinition->manufacturer.valueString = Str8C(cJSON_GetStringValue(item));
		result_DeviceDefinition->manufacturer_type = DeviceDefinition::ManufacturerType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(deviceDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceDefinition, "valueReference");
		result_DeviceDefinition->manufacturer.valueReference = Deserialize_Reference(arena, item);
		result_DeviceDefinition->manufacturer_type = DeviceDefinition::ManufacturerType::Reference;
	}


	cJSON *cjson_deviceName =  cJSON_GetObjectItem(deviceDefinition, "deviceName");
	if(cjson_deviceName)
	{
		result_DeviceDefinition->deviceName_count = cJSON_GetArraySize(cjson_deviceName);
		result_DeviceDefinition->deviceName = PushArray(arena, DeviceDefinition_DeviceName, result_DeviceDefinition->deviceName_count);
		for(int i = 0; i < result_DeviceDefinition->deviceName_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_deviceName, i);
			result_DeviceDefinition->deviceName[i] = *Deserialize_DeviceDefinition_DeviceName(arena, internal);
		}

	}
	cJSON *cjson_modelNumber =  cJSON_GetObjectItem(deviceDefinition, "modelNumber");
	if(cjson_modelNumber)
	{
		result_DeviceDefinition->modelNumber = Str8C(cJSON_GetStringValue(cjson_modelNumber));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(deviceDefinition, "type");
	if(cjson_type)
	{
		result_DeviceDefinition->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_specialization =  cJSON_GetObjectItem(deviceDefinition, "specialization");
	if(cjson_specialization)
	{
		result_DeviceDefinition->specialization_count = cJSON_GetArraySize(cjson_specialization);
		result_DeviceDefinition->specialization = PushArray(arena, DeviceDefinition_Specialization, result_DeviceDefinition->specialization_count);
		for(int i = 0; i < result_DeviceDefinition->specialization_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialization, i);
			result_DeviceDefinition->specialization[i] = *Deserialize_DeviceDefinition_Specialization(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(deviceDefinition, "version");
	if(cjson_version)
	{
		result_DeviceDefinition->version_count = cJSON_GetArraySize(cjson_version);
		result_DeviceDefinition->version = PushArray(arena, fhir_string, result_DeviceDefinition->version_count);
		for(int i = 0; i < result_DeviceDefinition->version_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_version, i);
			result_DeviceDefinition->version[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_safety =  cJSON_GetObjectItem(deviceDefinition, "safety");
	if(cjson_safety)
	{
		result_DeviceDefinition->safety_count = cJSON_GetArraySize(cjson_safety);
		result_DeviceDefinition->safety = PushArray(arena, CodeableConcept, result_DeviceDefinition->safety_count);
		for(int i = 0; i < result_DeviceDefinition->safety_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_safety, i);
			result_DeviceDefinition->safety[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_shelfLifeStorage =  cJSON_GetObjectItem(deviceDefinition, "shelfLifeStorage");
	if(cjson_shelfLifeStorage)
	{
		result_DeviceDefinition->shelfLifeStorage_count = cJSON_GetArraySize(cjson_shelfLifeStorage);
		result_DeviceDefinition->shelfLifeStorage = PushArray(arena, ProductShelfLife, result_DeviceDefinition->shelfLifeStorage_count);
		for(int i = 0; i < result_DeviceDefinition->shelfLifeStorage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_shelfLifeStorage, i);
			result_DeviceDefinition->shelfLifeStorage[i] = *Deserialize_ProductShelfLife(arena, internal);
		}

	}
	cJSON *cjson_physicalCharacteristics =  cJSON_GetObjectItem(deviceDefinition, "physicalCharacteristics");
	if(cjson_physicalCharacteristics)
	{
		result_DeviceDefinition->physicalCharacteristics = Deserialize_ProdCharacteristic(arena, cjson_physicalCharacteristics);
	}
	cJSON *cjson_languageCode =  cJSON_GetObjectItem(deviceDefinition, "languageCode");
	if(cjson_languageCode)
	{
		result_DeviceDefinition->languageCode_count = cJSON_GetArraySize(cjson_languageCode);
		result_DeviceDefinition->languageCode = PushArray(arena, CodeableConcept, result_DeviceDefinition->languageCode_count);
		for(int i = 0; i < result_DeviceDefinition->languageCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_languageCode, i);
			result_DeviceDefinition->languageCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_capability =  cJSON_GetObjectItem(deviceDefinition, "capability");
	if(cjson_capability)
	{
		result_DeviceDefinition->capability_count = cJSON_GetArraySize(cjson_capability);
		result_DeviceDefinition->capability = PushArray(arena, DeviceDefinition_Capability, result_DeviceDefinition->capability_count);
		for(int i = 0; i < result_DeviceDefinition->capability_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_capability, i);
			result_DeviceDefinition->capability[i] = *Deserialize_DeviceDefinition_Capability(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(deviceDefinition, "property");
	if(cjson_property)
	{
		result_DeviceDefinition->property_count = cJSON_GetArraySize(cjson_property);
		result_DeviceDefinition->property = PushArray(arena, DeviceDefinition_Property, result_DeviceDefinition->property_count);
		for(int i = 0; i < result_DeviceDefinition->property_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_property, i);
			result_DeviceDefinition->property[i] = *Deserialize_DeviceDefinition_Property(arena, internal);
		}

	}
	cJSON *cjson_owner =  cJSON_GetObjectItem(deviceDefinition, "owner");
	if(cjson_owner)
	{
		result_DeviceDefinition->owner = Deserialize_Reference(arena, cjson_owner);
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(deviceDefinition, "contact");
	if(cjson_contact)
	{
		result_DeviceDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_DeviceDefinition->contact = PushArray(arena, ContactPoint, result_DeviceDefinition->contact_count);
		for(int i = 0; i < result_DeviceDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_DeviceDefinition->contact[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(deviceDefinition, "url");
	if(cjson_url)
	{
		result_DeviceDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_onlineInformation =  cJSON_GetObjectItem(deviceDefinition, "onlineInformation");
	if(cjson_onlineInformation)
	{
		result_DeviceDefinition->onlineInformation = Str8C(cJSON_GetStringValue(cjson_onlineInformation));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(deviceDefinition, "note");
	if(cjson_note)
	{
		result_DeviceDefinition->note_count = cJSON_GetArraySize(cjson_note);
		result_DeviceDefinition->note = PushArray(arena, Annotation, result_DeviceDefinition->note_count);
		for(int i = 0; i < result_DeviceDefinition->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_DeviceDefinition->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(deviceDefinition, "quantity");
	if(cjson_quantity)
	{
		result_DeviceDefinition->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_parentDevice =  cJSON_GetObjectItem(deviceDefinition, "parentDevice");
	if(cjson_parentDevice)
	{
		result_DeviceDefinition->parentDevice = Deserialize_Reference(arena, cjson_parentDevice);
	}
	cJSON *cjson_material =  cJSON_GetObjectItem(deviceDefinition, "material");
	if(cjson_material)
	{
		result_DeviceDefinition->material_count = cJSON_GetArraySize(cjson_material);
		result_DeviceDefinition->material = PushArray(arena, DeviceDefinition_Material, result_DeviceDefinition->material_count);
		for(int i = 0; i < result_DeviceDefinition->material_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_material, i);
			result_DeviceDefinition->material[i] = *Deserialize_DeviceDefinition_Material(arena, internal);
		}

	}
	return result_DeviceDefinition;
}

DeviceDefinition_UdiDeviceIdentifier*
Deserialize_DeviceDefinition_UdiDeviceIdentifier(Arena *arena, cJSON *deviceDefinition_UdiDeviceIdentifier)
{
	DeviceDefinition_UdiDeviceIdentifier *result_DeviceDefinition_UdiDeviceIdentifier = PushArray(arena, DeviceDefinition_UdiDeviceIdentifier, 1);
	result_DeviceDefinition_UdiDeviceIdentifier->resourceType = ResourceType::DeviceDefinition_UdiDeviceIdentifier;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceDefinition_UdiDeviceIdentifier, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceDefinition_UdiDeviceIdentifier, "id");
	if(cjson_id)
	{
		result_DeviceDefinition_UdiDeviceIdentifier->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceDefinition_UdiDeviceIdentifier, "extension");
	if(cjson_extension)
	{
		result_DeviceDefinition_UdiDeviceIdentifier->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceDefinition_UdiDeviceIdentifier->extension = PushArray(arena, Extension, result_DeviceDefinition_UdiDeviceIdentifier->extension_count);
		for(int i = 0; i < result_DeviceDefinition_UdiDeviceIdentifier->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceDefinition_UdiDeviceIdentifier->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceDefinition_UdiDeviceIdentifier, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceDefinition_UdiDeviceIdentifier->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceDefinition_UdiDeviceIdentifier->modifierExtension = PushArray(arena, Extension, result_DeviceDefinition_UdiDeviceIdentifier->modifierExtension_count);
		for(int i = 0; i < result_DeviceDefinition_UdiDeviceIdentifier->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceDefinition_UdiDeviceIdentifier->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_deviceIdentifier =  cJSON_GetObjectItem(deviceDefinition_UdiDeviceIdentifier, "deviceIdentifier");
	if(cjson_deviceIdentifier)
	{
		result_DeviceDefinition_UdiDeviceIdentifier->deviceIdentifier = Str8C(cJSON_GetStringValue(cjson_deviceIdentifier));
	}
	cJSON *cjson_issuer =  cJSON_GetObjectItem(deviceDefinition_UdiDeviceIdentifier, "issuer");
	if(cjson_issuer)
	{
		result_DeviceDefinition_UdiDeviceIdentifier->issuer = Str8C(cJSON_GetStringValue(cjson_issuer));
	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(deviceDefinition_UdiDeviceIdentifier, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_DeviceDefinition_UdiDeviceIdentifier->jurisdiction = Str8C(cJSON_GetStringValue(cjson_jurisdiction));
	}
	return result_DeviceDefinition_UdiDeviceIdentifier;
}

DeviceDefinition_DeviceName*
Deserialize_DeviceDefinition_DeviceName(Arena *arena, cJSON *deviceDefinition_DeviceName)
{
	DeviceDefinition_DeviceName *result_DeviceDefinition_DeviceName = PushArray(arena, DeviceDefinition_DeviceName, 1);
	result_DeviceDefinition_DeviceName->resourceType = ResourceType::DeviceDefinition_DeviceName;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceDefinition_DeviceName, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceDefinition_DeviceName, "id");
	if(cjson_id)
	{
		result_DeviceDefinition_DeviceName->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceDefinition_DeviceName, "extension");
	if(cjson_extension)
	{
		result_DeviceDefinition_DeviceName->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceDefinition_DeviceName->extension = PushArray(arena, Extension, result_DeviceDefinition_DeviceName->extension_count);
		for(int i = 0; i < result_DeviceDefinition_DeviceName->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceDefinition_DeviceName->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceDefinition_DeviceName, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceDefinition_DeviceName->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceDefinition_DeviceName->modifierExtension = PushArray(arena, Extension, result_DeviceDefinition_DeviceName->modifierExtension_count);
		for(int i = 0; i < result_DeviceDefinition_DeviceName->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceDefinition_DeviceName->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(deviceDefinition_DeviceName, "name");
	if(cjson_name)
	{
		result_DeviceDefinition_DeviceName->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(deviceDefinition_DeviceName, "type");
	if(cjson_type)
	{
		result_DeviceDefinition_DeviceName->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	return result_DeviceDefinition_DeviceName;
}

DeviceDefinition_Specialization*
Deserialize_DeviceDefinition_Specialization(Arena *arena, cJSON *deviceDefinition_Specialization)
{
	DeviceDefinition_Specialization *result_DeviceDefinition_Specialization = PushArray(arena, DeviceDefinition_Specialization, 1);
	result_DeviceDefinition_Specialization->resourceType = ResourceType::DeviceDefinition_Specialization;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceDefinition_Specialization, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceDefinition_Specialization, "id");
	if(cjson_id)
	{
		result_DeviceDefinition_Specialization->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceDefinition_Specialization, "extension");
	if(cjson_extension)
	{
		result_DeviceDefinition_Specialization->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceDefinition_Specialization->extension = PushArray(arena, Extension, result_DeviceDefinition_Specialization->extension_count);
		for(int i = 0; i < result_DeviceDefinition_Specialization->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceDefinition_Specialization->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceDefinition_Specialization, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceDefinition_Specialization->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceDefinition_Specialization->modifierExtension = PushArray(arena, Extension, result_DeviceDefinition_Specialization->modifierExtension_count);
		for(int i = 0; i < result_DeviceDefinition_Specialization->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceDefinition_Specialization->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_systemType =  cJSON_GetObjectItem(deviceDefinition_Specialization, "systemType");
	if(cjson_systemType)
	{
		result_DeviceDefinition_Specialization->systemType = Str8C(cJSON_GetStringValue(cjson_systemType));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(deviceDefinition_Specialization, "version");
	if(cjson_version)
	{
		result_DeviceDefinition_Specialization->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	return result_DeviceDefinition_Specialization;
}

DeviceDefinition_Capability*
Deserialize_DeviceDefinition_Capability(Arena *arena, cJSON *deviceDefinition_Capability)
{
	DeviceDefinition_Capability *result_DeviceDefinition_Capability = PushArray(arena, DeviceDefinition_Capability, 1);
	result_DeviceDefinition_Capability->resourceType = ResourceType::DeviceDefinition_Capability;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceDefinition_Capability, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceDefinition_Capability, "id");
	if(cjson_id)
	{
		result_DeviceDefinition_Capability->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceDefinition_Capability, "extension");
	if(cjson_extension)
	{
		result_DeviceDefinition_Capability->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceDefinition_Capability->extension = PushArray(arena, Extension, result_DeviceDefinition_Capability->extension_count);
		for(int i = 0; i < result_DeviceDefinition_Capability->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceDefinition_Capability->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceDefinition_Capability, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceDefinition_Capability->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceDefinition_Capability->modifierExtension = PushArray(arena, Extension, result_DeviceDefinition_Capability->modifierExtension_count);
		for(int i = 0; i < result_DeviceDefinition_Capability->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceDefinition_Capability->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(deviceDefinition_Capability, "type");
	if(cjson_type)
	{
		result_DeviceDefinition_Capability->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(deviceDefinition_Capability, "description");
	if(cjson_description)
	{
		result_DeviceDefinition_Capability->description_count = cJSON_GetArraySize(cjson_description);
		result_DeviceDefinition_Capability->description = PushArray(arena, CodeableConcept, result_DeviceDefinition_Capability->description_count);
		for(int i = 0; i < result_DeviceDefinition_Capability->description_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_description, i);
			result_DeviceDefinition_Capability->description[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_DeviceDefinition_Capability;
}

DeviceDefinition_Property*
Deserialize_DeviceDefinition_Property(Arena *arena, cJSON *deviceDefinition_Property)
{
	DeviceDefinition_Property *result_DeviceDefinition_Property = PushArray(arena, DeviceDefinition_Property, 1);
	result_DeviceDefinition_Property->resourceType = ResourceType::DeviceDefinition_Property;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceDefinition_Property, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceDefinition_Property, "id");
	if(cjson_id)
	{
		result_DeviceDefinition_Property->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceDefinition_Property, "extension");
	if(cjson_extension)
	{
		result_DeviceDefinition_Property->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceDefinition_Property->extension = PushArray(arena, Extension, result_DeviceDefinition_Property->extension_count);
		for(int i = 0; i < result_DeviceDefinition_Property->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceDefinition_Property->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceDefinition_Property, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceDefinition_Property->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceDefinition_Property->modifierExtension = PushArray(arena, Extension, result_DeviceDefinition_Property->modifierExtension_count);
		for(int i = 0; i < result_DeviceDefinition_Property->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceDefinition_Property->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(deviceDefinition_Property, "type");
	if(cjson_type)
	{
		result_DeviceDefinition_Property->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_valueQuantity =  cJSON_GetObjectItem(deviceDefinition_Property, "valueQuantity");
	if(cjson_valueQuantity)
	{
		result_DeviceDefinition_Property->valueQuantity_count = cJSON_GetArraySize(cjson_valueQuantity);
		result_DeviceDefinition_Property->valueQuantity = PushArray(arena, Quantity, result_DeviceDefinition_Property->valueQuantity_count);
		for(int i = 0; i < result_DeviceDefinition_Property->valueQuantity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_valueQuantity, i);
			result_DeviceDefinition_Property->valueQuantity[i] = *Deserialize_Quantity(arena, internal);
		}

	}
	cJSON *cjson_valueCode =  cJSON_GetObjectItem(deviceDefinition_Property, "valueCode");
	if(cjson_valueCode)
	{
		result_DeviceDefinition_Property->valueCode_count = cJSON_GetArraySize(cjson_valueCode);
		result_DeviceDefinition_Property->valueCode = PushArray(arena, CodeableConcept, result_DeviceDefinition_Property->valueCode_count);
		for(int i = 0; i < result_DeviceDefinition_Property->valueCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_valueCode, i);
			result_DeviceDefinition_Property->valueCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_DeviceDefinition_Property;
}

DeviceDefinition_Material*
Deserialize_DeviceDefinition_Material(Arena *arena, cJSON *deviceDefinition_Material)
{
	DeviceDefinition_Material *result_DeviceDefinition_Material = PushArray(arena, DeviceDefinition_Material, 1);
	result_DeviceDefinition_Material->resourceType = ResourceType::DeviceDefinition_Material;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceDefinition_Material, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceDefinition_Material, "id");
	if(cjson_id)
	{
		result_DeviceDefinition_Material->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceDefinition_Material, "extension");
	if(cjson_extension)
	{
		result_DeviceDefinition_Material->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceDefinition_Material->extension = PushArray(arena, Extension, result_DeviceDefinition_Material->extension_count);
		for(int i = 0; i < result_DeviceDefinition_Material->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceDefinition_Material->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceDefinition_Material, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceDefinition_Material->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceDefinition_Material->modifierExtension = PushArray(arena, Extension, result_DeviceDefinition_Material->modifierExtension_count);
		for(int i = 0; i < result_DeviceDefinition_Material->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceDefinition_Material->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_substance =  cJSON_GetObjectItem(deviceDefinition_Material, "substance");
	if(cjson_substance)
	{
		result_DeviceDefinition_Material->substance = Deserialize_CodeableConcept(arena, cjson_substance);
	}
	cJSON *cjson_alternate =  cJSON_GetObjectItem(deviceDefinition_Material, "alternate");
	if(cjson_alternate)
	{
		result_DeviceDefinition_Material->alternate = (boolean)cJSON_IsTrue(cjson_alternate);
	}
	cJSON *cjson_allergenicIndicator =  cJSON_GetObjectItem(deviceDefinition_Material, "allergenicIndicator");
	if(cjson_allergenicIndicator)
	{
		result_DeviceDefinition_Material->allergenicIndicator = (boolean)cJSON_IsTrue(cjson_allergenicIndicator);
	}
	return result_DeviceDefinition_Material;
}

DeviceMetric*
Deserialize_DeviceMetric(Arena *arena, cJSON *deviceMetric)
{
	DeviceMetric *result_DeviceMetric = PushArray(arena, DeviceMetric, 1);
	result_DeviceMetric->resourceType = ResourceType::DeviceMetric;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceMetric, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceMetric, "id");
	if(cjson_id)
	{
		result_DeviceMetric->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(deviceMetric, "meta");
	if(cjson_meta)
	{
		result_DeviceMetric->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(deviceMetric, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DeviceMetric->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(deviceMetric, "language");
	if(cjson_language)
	{
		result_DeviceMetric->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(deviceMetric, "text");
	if(cjson_text)
	{
		result_DeviceMetric->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(deviceMetric, "contained");
	if(cjson_contained)
	{
		result_DeviceMetric->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DeviceMetric->contained = PushArray(arena, Resource, result_DeviceMetric->contained_count);
		for(int i = 0; i < result_DeviceMetric->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DeviceMetric->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceMetric, "extension");
	if(cjson_extension)
	{
		result_DeviceMetric->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceMetric->extension = PushArray(arena, Extension, result_DeviceMetric->extension_count);
		for(int i = 0; i < result_DeviceMetric->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceMetric->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceMetric, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceMetric->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceMetric->modifierExtension = PushArray(arena, Extension, result_DeviceMetric->modifierExtension_count);
		for(int i = 0; i < result_DeviceMetric->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceMetric->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(deviceMetric, "identifier");
	if(cjson_identifier)
	{
		result_DeviceMetric->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DeviceMetric->identifier = PushArray(arena, Identifier, result_DeviceMetric->identifier_count);
		for(int i = 0; i < result_DeviceMetric->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DeviceMetric->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(deviceMetric, "type");
	if(cjson_type)
	{
		result_DeviceMetric->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(deviceMetric, "unit");
	if(cjson_unit)
	{
		result_DeviceMetric->unit = Deserialize_CodeableConcept(arena, cjson_unit);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(deviceMetric, "source");
	if(cjson_source)
	{
		result_DeviceMetric->source = Deserialize_Reference(arena, cjson_source);
	}
	cJSON *cjson_parent =  cJSON_GetObjectItem(deviceMetric, "parent");
	if(cjson_parent)
	{
		result_DeviceMetric->parent = Deserialize_Reference(arena, cjson_parent);
	}
	cJSON *cjson_operationalStatus =  cJSON_GetObjectItem(deviceMetric, "operationalStatus");
	if(cjson_operationalStatus)
	{
		result_DeviceMetric->operationalStatus = Str8C(cJSON_GetStringValue(cjson_operationalStatus));
	}
	cJSON *cjson_color =  cJSON_GetObjectItem(deviceMetric, "color");
	if(cjson_color)
	{
		result_DeviceMetric->color = Str8C(cJSON_GetStringValue(cjson_color));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(deviceMetric, "category");
	if(cjson_category)
	{
		result_DeviceMetric->category = Str8C(cJSON_GetStringValue(cjson_category));
	}
	cJSON *cjson_measurementPeriod =  cJSON_GetObjectItem(deviceMetric, "measurementPeriod");
	if(cjson_measurementPeriod)
	{
		result_DeviceMetric->measurementPeriod = Deserialize_Timing(arena, cjson_measurementPeriod);
	}
	cJSON *cjson_calibration =  cJSON_GetObjectItem(deviceMetric, "calibration");
	if(cjson_calibration)
	{
		result_DeviceMetric->calibration_count = cJSON_GetArraySize(cjson_calibration);
		result_DeviceMetric->calibration = PushArray(arena, DeviceMetric_Calibration, result_DeviceMetric->calibration_count);
		for(int i = 0; i < result_DeviceMetric->calibration_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_calibration, i);
			result_DeviceMetric->calibration[i] = *Deserialize_DeviceMetric_Calibration(arena, internal);
		}

	}
	return result_DeviceMetric;
}

DeviceMetric_Calibration*
Deserialize_DeviceMetric_Calibration(Arena *arena, cJSON *deviceMetric_Calibration)
{
	DeviceMetric_Calibration *result_DeviceMetric_Calibration = PushArray(arena, DeviceMetric_Calibration, 1);
	result_DeviceMetric_Calibration->resourceType = ResourceType::DeviceMetric_Calibration;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceMetric_Calibration, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceMetric_Calibration, "id");
	if(cjson_id)
	{
		result_DeviceMetric_Calibration->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceMetric_Calibration, "extension");
	if(cjson_extension)
	{
		result_DeviceMetric_Calibration->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceMetric_Calibration->extension = PushArray(arena, Extension, result_DeviceMetric_Calibration->extension_count);
		for(int i = 0; i < result_DeviceMetric_Calibration->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceMetric_Calibration->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceMetric_Calibration, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceMetric_Calibration->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceMetric_Calibration->modifierExtension = PushArray(arena, Extension, result_DeviceMetric_Calibration->modifierExtension_count);
		for(int i = 0; i < result_DeviceMetric_Calibration->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceMetric_Calibration->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(deviceMetric_Calibration, "type");
	if(cjson_type)
	{
		result_DeviceMetric_Calibration->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_state =  cJSON_GetObjectItem(deviceMetric_Calibration, "state");
	if(cjson_state)
	{
		result_DeviceMetric_Calibration->state = Str8C(cJSON_GetStringValue(cjson_state));
	}
	cJSON *cjson_time =  cJSON_GetObjectItem(deviceMetric_Calibration, "time");
	if(cjson_time)
	{
		result_DeviceMetric_Calibration->time = Str8C(cJSON_GetStringValue(cjson_time));
	}
	return result_DeviceMetric_Calibration;
}

DeviceRequest*
Deserialize_DeviceRequest(Arena *arena, cJSON *deviceRequest)
{
	DeviceRequest *result_DeviceRequest = PushArray(arena, DeviceRequest, 1);
	result_DeviceRequest->resourceType = ResourceType::DeviceRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceRequest, "id");
	if(cjson_id)
	{
		result_DeviceRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(deviceRequest, "meta");
	if(cjson_meta)
	{
		result_DeviceRequest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(deviceRequest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DeviceRequest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(deviceRequest, "language");
	if(cjson_language)
	{
		result_DeviceRequest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(deviceRequest, "text");
	if(cjson_text)
	{
		result_DeviceRequest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(deviceRequest, "contained");
	if(cjson_contained)
	{
		result_DeviceRequest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DeviceRequest->contained = PushArray(arena, Resource, result_DeviceRequest->contained_count);
		for(int i = 0; i < result_DeviceRequest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DeviceRequest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceRequest, "extension");
	if(cjson_extension)
	{
		result_DeviceRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceRequest->extension = PushArray(arena, Extension, result_DeviceRequest->extension_count);
		for(int i = 0; i < result_DeviceRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceRequest->modifierExtension = PushArray(arena, Extension, result_DeviceRequest->modifierExtension_count);
		for(int i = 0; i < result_DeviceRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(deviceRequest, "identifier");
	if(cjson_identifier)
	{
		result_DeviceRequest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DeviceRequest->identifier = PushArray(arena, Identifier, result_DeviceRequest->identifier_count);
		for(int i = 0; i < result_DeviceRequest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DeviceRequest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(deviceRequest, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_DeviceRequest->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_DeviceRequest->instantiatesCanonical = PushArray(arena, fhir_canonical, result_DeviceRequest->instantiatesCanonical_count);
		for(int i = 0; i < result_DeviceRequest->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_DeviceRequest->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(deviceRequest, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_DeviceRequest->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_DeviceRequest->instantiatesUri = PushArray(arena, fhir_uri, result_DeviceRequest->instantiatesUri_count);
		for(int i = 0; i < result_DeviceRequest->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_DeviceRequest->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(deviceRequest, "basedOn");
	if(cjson_basedOn)
	{
		result_DeviceRequest->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_DeviceRequest->basedOn = PushArray(arena, Reference, result_DeviceRequest->basedOn_count);
		for(int i = 0; i < result_DeviceRequest->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_DeviceRequest->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_priorRequest =  cJSON_GetObjectItem(deviceRequest, "priorRequest");
	if(cjson_priorRequest)
	{
		result_DeviceRequest->priorRequest_count = cJSON_GetArraySize(cjson_priorRequest);
		result_DeviceRequest->priorRequest = PushArray(arena, Reference, result_DeviceRequest->priorRequest_count);
		for(int i = 0; i < result_DeviceRequest->priorRequest_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_priorRequest, i);
			result_DeviceRequest->priorRequest[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_groupIdentifier =  cJSON_GetObjectItem(deviceRequest, "groupIdentifier");
	if(cjson_groupIdentifier)
	{
		result_DeviceRequest->groupIdentifier = Deserialize_Identifier(arena, cjson_groupIdentifier);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(deviceRequest, "status");
	if(cjson_status)
	{
		result_DeviceRequest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(deviceRequest, "intent");
	if(cjson_intent)
	{
		result_DeviceRequest->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(deviceRequest, "priority");
	if(cjson_priority)
	{
		result_DeviceRequest->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	if((bool)cJSON_HasObjectItem(deviceRequest, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest, "valueReference");
		result_DeviceRequest->code.valueReference = Deserialize_Reference(arena, item);
		result_DeviceRequest->code_type = DeviceRequest::CodeType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(deviceRequest, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest, "valueCodeableConcept");
		result_DeviceRequest->code.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_DeviceRequest->code_type = DeviceRequest::CodeType::CodeableConcept;
	}


	cJSON *cjson_parameter =  cJSON_GetObjectItem(deviceRequest, "parameter");
	if(cjson_parameter)
	{
		result_DeviceRequest->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_DeviceRequest->parameter = PushArray(arena, DeviceRequest_Parameter, result_DeviceRequest->parameter_count);
		for(int i = 0; i < result_DeviceRequest->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_DeviceRequest->parameter[i] = *Deserialize_DeviceRequest_Parameter(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(deviceRequest, "subject");
	if(cjson_subject)
	{
		result_DeviceRequest->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(deviceRequest, "encounter");
	if(cjson_encounter)
	{
		result_DeviceRequest->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(deviceRequest, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest, "valueDateTime");
		result_DeviceRequest->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_DeviceRequest->occurrence_type = DeviceRequest::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(deviceRequest, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest, "valuePeriod");
		result_DeviceRequest->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_DeviceRequest->occurrence_type = DeviceRequest::OccurrenceType::Period;
	}
	else if((bool)cJSON_HasObjectItem(deviceRequest, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest, "valueTiming");
		result_DeviceRequest->occurrence.valueTiming = Deserialize_Timing(arena, item);
		result_DeviceRequest->occurrence_type = DeviceRequest::OccurrenceType::Timing;
	}


	cJSON *cjson_authoredOn =  cJSON_GetObjectItem(deviceRequest, "authoredOn");
	if(cjson_authoredOn)
	{
		result_DeviceRequest->authoredOn = Str8C(cJSON_GetStringValue(cjson_authoredOn));
	}
	cJSON *cjson_requester =  cJSON_GetObjectItem(deviceRequest, "requester");
	if(cjson_requester)
	{
		result_DeviceRequest->requester = Deserialize_Reference(arena, cjson_requester);
	}
	cJSON *cjson_performerType =  cJSON_GetObjectItem(deviceRequest, "performerType");
	if(cjson_performerType)
	{
		result_DeviceRequest->performerType = Deserialize_CodeableConcept(arena, cjson_performerType);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(deviceRequest, "performer");
	if(cjson_performer)
	{
		result_DeviceRequest->performer = Deserialize_Reference(arena, cjson_performer);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(deviceRequest, "reasonCode");
	if(cjson_reasonCode)
	{
		result_DeviceRequest->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_DeviceRequest->reasonCode = PushArray(arena, CodeableConcept, result_DeviceRequest->reasonCode_count);
		for(int i = 0; i < result_DeviceRequest->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_DeviceRequest->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(deviceRequest, "reasonReference");
	if(cjson_reasonReference)
	{
		result_DeviceRequest->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_DeviceRequest->reasonReference = PushArray(arena, Reference, result_DeviceRequest->reasonReference_count);
		for(int i = 0; i < result_DeviceRequest->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_DeviceRequest->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(deviceRequest, "insurance");
	if(cjson_insurance)
	{
		result_DeviceRequest->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_DeviceRequest->insurance = PushArray(arena, Reference, result_DeviceRequest->insurance_count);
		for(int i = 0; i < result_DeviceRequest->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_DeviceRequest->insurance[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(deviceRequest, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_DeviceRequest->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_DeviceRequest->supportingInfo = PushArray(arena, Reference, result_DeviceRequest->supportingInfo_count);
		for(int i = 0; i < result_DeviceRequest->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_DeviceRequest->supportingInfo[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(deviceRequest, "note");
	if(cjson_note)
	{
		result_DeviceRequest->note_count = cJSON_GetArraySize(cjson_note);
		result_DeviceRequest->note = PushArray(arena, Annotation, result_DeviceRequest->note_count);
		for(int i = 0; i < result_DeviceRequest->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_DeviceRequest->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_relevantHistory =  cJSON_GetObjectItem(deviceRequest, "relevantHistory");
	if(cjson_relevantHistory)
	{
		result_DeviceRequest->relevantHistory_count = cJSON_GetArraySize(cjson_relevantHistory);
		result_DeviceRequest->relevantHistory = PushArray(arena, Reference, result_DeviceRequest->relevantHistory_count);
		for(int i = 0; i < result_DeviceRequest->relevantHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relevantHistory, i);
			result_DeviceRequest->relevantHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_DeviceRequest;
}

DeviceRequest_Parameter*
Deserialize_DeviceRequest_Parameter(Arena *arena, cJSON *deviceRequest_Parameter)
{
	DeviceRequest_Parameter *result_DeviceRequest_Parameter = PushArray(arena, DeviceRequest_Parameter, 1);
	result_DeviceRequest_Parameter->resourceType = ResourceType::DeviceRequest_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceRequest_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceRequest_Parameter, "id");
	if(cjson_id)
	{
		result_DeviceRequest_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceRequest_Parameter, "extension");
	if(cjson_extension)
	{
		result_DeviceRequest_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceRequest_Parameter->extension = PushArray(arena, Extension, result_DeviceRequest_Parameter->extension_count);
		for(int i = 0; i < result_DeviceRequest_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceRequest_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceRequest_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceRequest_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceRequest_Parameter->modifierExtension = PushArray(arena, Extension, result_DeviceRequest_Parameter->modifierExtension_count);
		for(int i = 0; i < result_DeviceRequest_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceRequest_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(deviceRequest_Parameter, "code");
	if(cjson_code)
	{
		result_DeviceRequest_Parameter->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	if((bool)cJSON_HasObjectItem(deviceRequest_Parameter, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest_Parameter, "valueCodeableConcept");
		result_DeviceRequest_Parameter->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_DeviceRequest_Parameter->value_type = DeviceRequest_Parameter::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(deviceRequest_Parameter, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest_Parameter, "valueQuantity");
		result_DeviceRequest_Parameter->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_DeviceRequest_Parameter->value_type = DeviceRequest_Parameter::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(deviceRequest_Parameter, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest_Parameter, "valueRange");
		result_DeviceRequest_Parameter->value.valueRange = Deserialize_Range(arena, item);
		result_DeviceRequest_Parameter->value_type = DeviceRequest_Parameter::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(deviceRequest_Parameter, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceRequest_Parameter, "valueBoolean");
		result_DeviceRequest_Parameter->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_DeviceRequest_Parameter->value_type = DeviceRequest_Parameter::ValueType::fhir_boolean;
	}


	return result_DeviceRequest_Parameter;
}

DeviceUseStatement*
Deserialize_DeviceUseStatement(Arena *arena, cJSON *deviceUseStatement)
{
	DeviceUseStatement *result_DeviceUseStatement = PushArray(arena, DeviceUseStatement, 1);
	result_DeviceUseStatement->resourceType = ResourceType::DeviceUseStatement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(deviceUseStatement, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(deviceUseStatement, "id");
	if(cjson_id)
	{
		result_DeviceUseStatement->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(deviceUseStatement, "meta");
	if(cjson_meta)
	{
		result_DeviceUseStatement->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(deviceUseStatement, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DeviceUseStatement->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(deviceUseStatement, "language");
	if(cjson_language)
	{
		result_DeviceUseStatement->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(deviceUseStatement, "text");
	if(cjson_text)
	{
		result_DeviceUseStatement->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(deviceUseStatement, "contained");
	if(cjson_contained)
	{
		result_DeviceUseStatement->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DeviceUseStatement->contained = PushArray(arena, Resource, result_DeviceUseStatement->contained_count);
		for(int i = 0; i < result_DeviceUseStatement->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DeviceUseStatement->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(deviceUseStatement, "extension");
	if(cjson_extension)
	{
		result_DeviceUseStatement->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DeviceUseStatement->extension = PushArray(arena, Extension, result_DeviceUseStatement->extension_count);
		for(int i = 0; i < result_DeviceUseStatement->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DeviceUseStatement->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(deviceUseStatement, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DeviceUseStatement->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DeviceUseStatement->modifierExtension = PushArray(arena, Extension, result_DeviceUseStatement->modifierExtension_count);
		for(int i = 0; i < result_DeviceUseStatement->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DeviceUseStatement->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(deviceUseStatement, "identifier");
	if(cjson_identifier)
	{
		result_DeviceUseStatement->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DeviceUseStatement->identifier = PushArray(arena, Identifier, result_DeviceUseStatement->identifier_count);
		for(int i = 0; i < result_DeviceUseStatement->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DeviceUseStatement->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(deviceUseStatement, "basedOn");
	if(cjson_basedOn)
	{
		result_DeviceUseStatement->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_DeviceUseStatement->basedOn = PushArray(arena, Reference, result_DeviceUseStatement->basedOn_count);
		for(int i = 0; i < result_DeviceUseStatement->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_DeviceUseStatement->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(deviceUseStatement, "status");
	if(cjson_status)
	{
		result_DeviceUseStatement->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(deviceUseStatement, "subject");
	if(cjson_subject)
	{
		result_DeviceUseStatement->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_derivedFrom =  cJSON_GetObjectItem(deviceUseStatement, "derivedFrom");
	if(cjson_derivedFrom)
	{
		result_DeviceUseStatement->derivedFrom_count = cJSON_GetArraySize(cjson_derivedFrom);
		result_DeviceUseStatement->derivedFrom = PushArray(arena, Reference, result_DeviceUseStatement->derivedFrom_count);
		for(int i = 0; i < result_DeviceUseStatement->derivedFrom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_derivedFrom, i);
			result_DeviceUseStatement->derivedFrom[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(deviceUseStatement, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceUseStatement, "valueTiming");
		result_DeviceUseStatement->timing.valueTiming = Deserialize_Timing(arena, item);
		result_DeviceUseStatement->timing_type = DeviceUseStatement::TimingType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(deviceUseStatement, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceUseStatement, "valuePeriod");
		result_DeviceUseStatement->timing.valuePeriod = Deserialize_Period(arena, item);
		result_DeviceUseStatement->timing_type = DeviceUseStatement::TimingType::Period;
	}
	else if((bool)cJSON_HasObjectItem(deviceUseStatement, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(deviceUseStatement, "valueDateTime");
		result_DeviceUseStatement->timing.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_DeviceUseStatement->timing_type = DeviceUseStatement::TimingType::fhir_dateTime;
	}


	cJSON *cjson_recordedOn =  cJSON_GetObjectItem(deviceUseStatement, "recordedOn");
	if(cjson_recordedOn)
	{
		result_DeviceUseStatement->recordedOn = Str8C(cJSON_GetStringValue(cjson_recordedOn));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(deviceUseStatement, "source");
	if(cjson_source)
	{
		result_DeviceUseStatement->source = Deserialize_Reference(arena, cjson_source);
	}
	cJSON *cjson_device =  cJSON_GetObjectItem(deviceUseStatement, "device");
	if(cjson_device)
	{
		result_DeviceUseStatement->device = Deserialize_Reference(arena, cjson_device);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(deviceUseStatement, "reasonCode");
	if(cjson_reasonCode)
	{
		result_DeviceUseStatement->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_DeviceUseStatement->reasonCode = PushArray(arena, CodeableConcept, result_DeviceUseStatement->reasonCode_count);
		for(int i = 0; i < result_DeviceUseStatement->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_DeviceUseStatement->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(deviceUseStatement, "reasonReference");
	if(cjson_reasonReference)
	{
		result_DeviceUseStatement->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_DeviceUseStatement->reasonReference = PushArray(arena, Reference, result_DeviceUseStatement->reasonReference_count);
		for(int i = 0; i < result_DeviceUseStatement->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_DeviceUseStatement->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(deviceUseStatement, "bodySite");
	if(cjson_bodySite)
	{
		result_DeviceUseStatement->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(deviceUseStatement, "note");
	if(cjson_note)
	{
		result_DeviceUseStatement->note_count = cJSON_GetArraySize(cjson_note);
		result_DeviceUseStatement->note = PushArray(arena, Annotation, result_DeviceUseStatement->note_count);
		for(int i = 0; i < result_DeviceUseStatement->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_DeviceUseStatement->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_DeviceUseStatement;
}

DiagnosticReport*
Deserialize_DiagnosticReport(Arena *arena, cJSON *diagnosticReport)
{
	DiagnosticReport *result_DiagnosticReport = PushArray(arena, DiagnosticReport, 1);
	result_DiagnosticReport->resourceType = ResourceType::DiagnosticReport;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(diagnosticReport, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(diagnosticReport, "id");
	if(cjson_id)
	{
		result_DiagnosticReport->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(diagnosticReport, "meta");
	if(cjson_meta)
	{
		result_DiagnosticReport->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(diagnosticReport, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DiagnosticReport->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(diagnosticReport, "language");
	if(cjson_language)
	{
		result_DiagnosticReport->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(diagnosticReport, "text");
	if(cjson_text)
	{
		result_DiagnosticReport->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(diagnosticReport, "contained");
	if(cjson_contained)
	{
		result_DiagnosticReport->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DiagnosticReport->contained = PushArray(arena, Resource, result_DiagnosticReport->contained_count);
		for(int i = 0; i < result_DiagnosticReport->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DiagnosticReport->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(diagnosticReport, "extension");
	if(cjson_extension)
	{
		result_DiagnosticReport->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DiagnosticReport->extension = PushArray(arena, Extension, result_DiagnosticReport->extension_count);
		for(int i = 0; i < result_DiagnosticReport->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DiagnosticReport->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(diagnosticReport, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DiagnosticReport->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DiagnosticReport->modifierExtension = PushArray(arena, Extension, result_DiagnosticReport->modifierExtension_count);
		for(int i = 0; i < result_DiagnosticReport->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DiagnosticReport->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(diagnosticReport, "identifier");
	if(cjson_identifier)
	{
		result_DiagnosticReport->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DiagnosticReport->identifier = PushArray(arena, Identifier, result_DiagnosticReport->identifier_count);
		for(int i = 0; i < result_DiagnosticReport->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DiagnosticReport->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(diagnosticReport, "basedOn");
	if(cjson_basedOn)
	{
		result_DiagnosticReport->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_DiagnosticReport->basedOn = PushArray(arena, Reference, result_DiagnosticReport->basedOn_count);
		for(int i = 0; i < result_DiagnosticReport->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_DiagnosticReport->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(diagnosticReport, "status");
	if(cjson_status)
	{
		result_DiagnosticReport->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(diagnosticReport, "category");
	if(cjson_category)
	{
		result_DiagnosticReport->category_count = cJSON_GetArraySize(cjson_category);
		result_DiagnosticReport->category = PushArray(arena, CodeableConcept, result_DiagnosticReport->category_count);
		for(int i = 0; i < result_DiagnosticReport->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_DiagnosticReport->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(diagnosticReport, "code");
	if(cjson_code)
	{
		result_DiagnosticReport->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(diagnosticReport, "subject");
	if(cjson_subject)
	{
		result_DiagnosticReport->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(diagnosticReport, "encounter");
	if(cjson_encounter)
	{
		result_DiagnosticReport->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(diagnosticReport, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(diagnosticReport, "valueDateTime");
		result_DiagnosticReport->effective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_DiagnosticReport->effective_type = DiagnosticReport::EffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(diagnosticReport, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(diagnosticReport, "valuePeriod");
		result_DiagnosticReport->effective.valuePeriod = Deserialize_Period(arena, item);
		result_DiagnosticReport->effective_type = DiagnosticReport::EffectiveType::Period;
	}


	cJSON *cjson_issued =  cJSON_GetObjectItem(diagnosticReport, "issued");
	if(cjson_issued)
	{
		result_DiagnosticReport->issued = Str8C(cJSON_GetStringValue(cjson_issued));
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(diagnosticReport, "performer");
	if(cjson_performer)
	{
		result_DiagnosticReport->performer_count = cJSON_GetArraySize(cjson_performer);
		result_DiagnosticReport->performer = PushArray(arena, Reference, result_DiagnosticReport->performer_count);
		for(int i = 0; i < result_DiagnosticReport->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_DiagnosticReport->performer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_resultsInterpreter =  cJSON_GetObjectItem(diagnosticReport, "resultsInterpreter");
	if(cjson_resultsInterpreter)
	{
		result_DiagnosticReport->resultsInterpreter_count = cJSON_GetArraySize(cjson_resultsInterpreter);
		result_DiagnosticReport->resultsInterpreter = PushArray(arena, Reference, result_DiagnosticReport->resultsInterpreter_count);
		for(int i = 0; i < result_DiagnosticReport->resultsInterpreter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resultsInterpreter, i);
			result_DiagnosticReport->resultsInterpreter[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_specimen =  cJSON_GetObjectItem(diagnosticReport, "specimen");
	if(cjson_specimen)
	{
		result_DiagnosticReport->specimen_count = cJSON_GetArraySize(cjson_specimen);
		result_DiagnosticReport->specimen = PushArray(arena, Reference, result_DiagnosticReport->specimen_count);
		for(int i = 0; i < result_DiagnosticReport->specimen_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specimen, i);
			result_DiagnosticReport->specimen[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_result =  cJSON_GetObjectItem(diagnosticReport, "result");
	if(cjson_result)
	{
		result_DiagnosticReport->result_count = cJSON_GetArraySize(cjson_result);
		result_DiagnosticReport->result = PushArray(arena, Reference, result_DiagnosticReport->result_count);
		for(int i = 0; i < result_DiagnosticReport->result_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_result, i);
			result_DiagnosticReport->result[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_imagingStudy =  cJSON_GetObjectItem(diagnosticReport, "imagingStudy");
	if(cjson_imagingStudy)
	{
		result_DiagnosticReport->imagingStudy_count = cJSON_GetArraySize(cjson_imagingStudy);
		result_DiagnosticReport->imagingStudy = PushArray(arena, Reference, result_DiagnosticReport->imagingStudy_count);
		for(int i = 0; i < result_DiagnosticReport->imagingStudy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_imagingStudy, i);
			result_DiagnosticReport->imagingStudy[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_media =  cJSON_GetObjectItem(diagnosticReport, "media");
	if(cjson_media)
	{
		result_DiagnosticReport->media_count = cJSON_GetArraySize(cjson_media);
		result_DiagnosticReport->media = PushArray(arena, DiagnosticReport_Media, result_DiagnosticReport->media_count);
		for(int i = 0; i < result_DiagnosticReport->media_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_media, i);
			result_DiagnosticReport->media[i] = *Deserialize_DiagnosticReport_Media(arena, internal);
		}

	}
	cJSON *cjson_conclusion =  cJSON_GetObjectItem(diagnosticReport, "conclusion");
	if(cjson_conclusion)
	{
		result_DiagnosticReport->conclusion = Str8C(cJSON_GetStringValue(cjson_conclusion));
	}
	cJSON *cjson_conclusionCode =  cJSON_GetObjectItem(diagnosticReport, "conclusionCode");
	if(cjson_conclusionCode)
	{
		result_DiagnosticReport->conclusionCode_count = cJSON_GetArraySize(cjson_conclusionCode);
		result_DiagnosticReport->conclusionCode = PushArray(arena, CodeableConcept, result_DiagnosticReport->conclusionCode_count);
		for(int i = 0; i < result_DiagnosticReport->conclusionCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_conclusionCode, i);
			result_DiagnosticReport->conclusionCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_presentedForm =  cJSON_GetObjectItem(diagnosticReport, "presentedForm");
	if(cjson_presentedForm)
	{
		result_DiagnosticReport->presentedForm_count = cJSON_GetArraySize(cjson_presentedForm);
		result_DiagnosticReport->presentedForm = PushArray(arena, Attachment, result_DiagnosticReport->presentedForm_count);
		for(int i = 0; i < result_DiagnosticReport->presentedForm_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_presentedForm, i);
			result_DiagnosticReport->presentedForm[i] = *Deserialize_Attachment(arena, internal);
		}

	}
	return result_DiagnosticReport;
}

DiagnosticReport_Media*
Deserialize_DiagnosticReport_Media(Arena *arena, cJSON *diagnosticReport_Media)
{
	DiagnosticReport_Media *result_DiagnosticReport_Media = PushArray(arena, DiagnosticReport_Media, 1);
	result_DiagnosticReport_Media->resourceType = ResourceType::DiagnosticReport_Media;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(diagnosticReport_Media, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(diagnosticReport_Media, "id");
	if(cjson_id)
	{
		result_DiagnosticReport_Media->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(diagnosticReport_Media, "extension");
	if(cjson_extension)
	{
		result_DiagnosticReport_Media->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DiagnosticReport_Media->extension = PushArray(arena, Extension, result_DiagnosticReport_Media->extension_count);
		for(int i = 0; i < result_DiagnosticReport_Media->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DiagnosticReport_Media->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(diagnosticReport_Media, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DiagnosticReport_Media->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DiagnosticReport_Media->modifierExtension = PushArray(arena, Extension, result_DiagnosticReport_Media->modifierExtension_count);
		for(int i = 0; i < result_DiagnosticReport_Media->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DiagnosticReport_Media->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(diagnosticReport_Media, "comment");
	if(cjson_comment)
	{
		result_DiagnosticReport_Media->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_link =  cJSON_GetObjectItem(diagnosticReport_Media, "link");
	if(cjson_link)
	{
		result_DiagnosticReport_Media->link = Deserialize_Reference(arena, cjson_link);
	}
	return result_DiagnosticReport_Media;
}

DocumentManifest*
Deserialize_DocumentManifest(Arena *arena, cJSON *documentManifest)
{
	DocumentManifest *result_DocumentManifest = PushArray(arena, DocumentManifest, 1);
	result_DocumentManifest->resourceType = ResourceType::DocumentManifest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(documentManifest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(documentManifest, "id");
	if(cjson_id)
	{
		result_DocumentManifest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(documentManifest, "meta");
	if(cjson_meta)
	{
		result_DocumentManifest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(documentManifest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DocumentManifest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(documentManifest, "language");
	if(cjson_language)
	{
		result_DocumentManifest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(documentManifest, "text");
	if(cjson_text)
	{
		result_DocumentManifest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(documentManifest, "contained");
	if(cjson_contained)
	{
		result_DocumentManifest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DocumentManifest->contained = PushArray(arena, Resource, result_DocumentManifest->contained_count);
		for(int i = 0; i < result_DocumentManifest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DocumentManifest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(documentManifest, "extension");
	if(cjson_extension)
	{
		result_DocumentManifest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DocumentManifest->extension = PushArray(arena, Extension, result_DocumentManifest->extension_count);
		for(int i = 0; i < result_DocumentManifest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DocumentManifest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(documentManifest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DocumentManifest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DocumentManifest->modifierExtension = PushArray(arena, Extension, result_DocumentManifest->modifierExtension_count);
		for(int i = 0; i < result_DocumentManifest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DocumentManifest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_masterIdentifier =  cJSON_GetObjectItem(documentManifest, "masterIdentifier");
	if(cjson_masterIdentifier)
	{
		result_DocumentManifest->masterIdentifier = Deserialize_Identifier(arena, cjson_masterIdentifier);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(documentManifest, "identifier");
	if(cjson_identifier)
	{
		result_DocumentManifest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DocumentManifest->identifier = PushArray(arena, Identifier, result_DocumentManifest->identifier_count);
		for(int i = 0; i < result_DocumentManifest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DocumentManifest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(documentManifest, "status");
	if(cjson_status)
	{
		result_DocumentManifest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(documentManifest, "type");
	if(cjson_type)
	{
		result_DocumentManifest->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(documentManifest, "subject");
	if(cjson_subject)
	{
		result_DocumentManifest->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(documentManifest, "created");
	if(cjson_created)
	{
		result_DocumentManifest->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(documentManifest, "author");
	if(cjson_author)
	{
		result_DocumentManifest->author_count = cJSON_GetArraySize(cjson_author);
		result_DocumentManifest->author = PushArray(arena, Reference, result_DocumentManifest->author_count);
		for(int i = 0; i < result_DocumentManifest->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_DocumentManifest->author[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_recipient =  cJSON_GetObjectItem(documentManifest, "recipient");
	if(cjson_recipient)
	{
		result_DocumentManifest->recipient_count = cJSON_GetArraySize(cjson_recipient);
		result_DocumentManifest->recipient = PushArray(arena, Reference, result_DocumentManifest->recipient_count);
		for(int i = 0; i < result_DocumentManifest->recipient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_recipient, i);
			result_DocumentManifest->recipient[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_source =  cJSON_GetObjectItem(documentManifest, "source");
	if(cjson_source)
	{
		result_DocumentManifest->source = Str8C(cJSON_GetStringValue(cjson_source));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(documentManifest, "description");
	if(cjson_description)
	{
		result_DocumentManifest->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_content =  cJSON_GetObjectItem(documentManifest, "content");
	if(cjson_content)
	{
		result_DocumentManifest->content_count = cJSON_GetArraySize(cjson_content);
		result_DocumentManifest->content = PushArray(arena, Reference, result_DocumentManifest->content_count);
		for(int i = 0; i < result_DocumentManifest->content_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_content, i);
			result_DocumentManifest->content[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_related =  cJSON_GetObjectItem(documentManifest, "related");
	if(cjson_related)
	{
		result_DocumentManifest->related_count = cJSON_GetArraySize(cjson_related);
		result_DocumentManifest->related = PushArray(arena, DocumentManifest_Related, result_DocumentManifest->related_count);
		for(int i = 0; i < result_DocumentManifest->related_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_related, i);
			result_DocumentManifest->related[i] = *Deserialize_DocumentManifest_Related(arena, internal);
		}

	}
	return result_DocumentManifest;
}

DocumentManifest_Related*
Deserialize_DocumentManifest_Related(Arena *arena, cJSON *documentManifest_Related)
{
	DocumentManifest_Related *result_DocumentManifest_Related = PushArray(arena, DocumentManifest_Related, 1);
	result_DocumentManifest_Related->resourceType = ResourceType::DocumentManifest_Related;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(documentManifest_Related, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(documentManifest_Related, "id");
	if(cjson_id)
	{
		result_DocumentManifest_Related->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(documentManifest_Related, "extension");
	if(cjson_extension)
	{
		result_DocumentManifest_Related->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DocumentManifest_Related->extension = PushArray(arena, Extension, result_DocumentManifest_Related->extension_count);
		for(int i = 0; i < result_DocumentManifest_Related->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DocumentManifest_Related->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(documentManifest_Related, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DocumentManifest_Related->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DocumentManifest_Related->modifierExtension = PushArray(arena, Extension, result_DocumentManifest_Related->modifierExtension_count);
		for(int i = 0; i < result_DocumentManifest_Related->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DocumentManifest_Related->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(documentManifest_Related, "identifier");
	if(cjson_identifier)
	{
		result_DocumentManifest_Related->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_ref =  cJSON_GetObjectItem(documentManifest_Related, "ref");
	if(cjson_ref)
	{
		result_DocumentManifest_Related->ref = Deserialize_Reference(arena, cjson_ref);
	}
	return result_DocumentManifest_Related;
}

DocumentReference*
Deserialize_DocumentReference(Arena *arena, cJSON *documentReference)
{
	DocumentReference *result_DocumentReference = PushArray(arena, DocumentReference, 1);
	result_DocumentReference->resourceType = ResourceType::DocumentReference;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(documentReference, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(documentReference, "id");
	if(cjson_id)
	{
		result_DocumentReference->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(documentReference, "meta");
	if(cjson_meta)
	{
		result_DocumentReference->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(documentReference, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DocumentReference->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(documentReference, "language");
	if(cjson_language)
	{
		result_DocumentReference->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(documentReference, "text");
	if(cjson_text)
	{
		result_DocumentReference->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(documentReference, "contained");
	if(cjson_contained)
	{
		result_DocumentReference->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DocumentReference->contained = PushArray(arena, Resource, result_DocumentReference->contained_count);
		for(int i = 0; i < result_DocumentReference->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DocumentReference->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(documentReference, "extension");
	if(cjson_extension)
	{
		result_DocumentReference->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DocumentReference->extension = PushArray(arena, Extension, result_DocumentReference->extension_count);
		for(int i = 0; i < result_DocumentReference->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DocumentReference->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(documentReference, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DocumentReference->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DocumentReference->modifierExtension = PushArray(arena, Extension, result_DocumentReference->modifierExtension_count);
		for(int i = 0; i < result_DocumentReference->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DocumentReference->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_masterIdentifier =  cJSON_GetObjectItem(documentReference, "masterIdentifier");
	if(cjson_masterIdentifier)
	{
		result_DocumentReference->masterIdentifier = Deserialize_Identifier(arena, cjson_masterIdentifier);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(documentReference, "identifier");
	if(cjson_identifier)
	{
		result_DocumentReference->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_DocumentReference->identifier = PushArray(arena, Identifier, result_DocumentReference->identifier_count);
		for(int i = 0; i < result_DocumentReference->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_DocumentReference->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(documentReference, "status");
	if(cjson_status)
	{
		result_DocumentReference->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_docStatus =  cJSON_GetObjectItem(documentReference, "docStatus");
	if(cjson_docStatus)
	{
		result_DocumentReference->docStatus = Str8C(cJSON_GetStringValue(cjson_docStatus));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(documentReference, "type");
	if(cjson_type)
	{
		result_DocumentReference->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(documentReference, "category");
	if(cjson_category)
	{
		result_DocumentReference->category_count = cJSON_GetArraySize(cjson_category);
		result_DocumentReference->category = PushArray(arena, CodeableConcept, result_DocumentReference->category_count);
		for(int i = 0; i < result_DocumentReference->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_DocumentReference->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(documentReference, "subject");
	if(cjson_subject)
	{
		result_DocumentReference->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(documentReference, "date");
	if(cjson_date)
	{
		result_DocumentReference->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(documentReference, "author");
	if(cjson_author)
	{
		result_DocumentReference->author_count = cJSON_GetArraySize(cjson_author);
		result_DocumentReference->author = PushArray(arena, Reference, result_DocumentReference->author_count);
		for(int i = 0; i < result_DocumentReference->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_DocumentReference->author[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_authenticator =  cJSON_GetObjectItem(documentReference, "authenticator");
	if(cjson_authenticator)
	{
		result_DocumentReference->authenticator = Deserialize_Reference(arena, cjson_authenticator);
	}
	cJSON *cjson_custodian =  cJSON_GetObjectItem(documentReference, "custodian");
	if(cjson_custodian)
	{
		result_DocumentReference->custodian = Deserialize_Reference(arena, cjson_custodian);
	}
	cJSON *cjson_relatesTo =  cJSON_GetObjectItem(documentReference, "relatesTo");
	if(cjson_relatesTo)
	{
		result_DocumentReference->relatesTo_count = cJSON_GetArraySize(cjson_relatesTo);
		result_DocumentReference->relatesTo = PushArray(arena, DocumentReference_RelatesTo, result_DocumentReference->relatesTo_count);
		for(int i = 0; i < result_DocumentReference->relatesTo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatesTo, i);
			result_DocumentReference->relatesTo[i] = *Deserialize_DocumentReference_RelatesTo(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(documentReference, "description");
	if(cjson_description)
	{
		result_DocumentReference->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_securityLabel =  cJSON_GetObjectItem(documentReference, "securityLabel");
	if(cjson_securityLabel)
	{
		result_DocumentReference->securityLabel_count = cJSON_GetArraySize(cjson_securityLabel);
		result_DocumentReference->securityLabel = PushArray(arena, CodeableConcept, result_DocumentReference->securityLabel_count);
		for(int i = 0; i < result_DocumentReference->securityLabel_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_securityLabel, i);
			result_DocumentReference->securityLabel[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_content =  cJSON_GetObjectItem(documentReference, "content");
	if(cjson_content)
	{
		result_DocumentReference->content_count = cJSON_GetArraySize(cjson_content);
		result_DocumentReference->content = PushArray(arena, DocumentReference_Content, result_DocumentReference->content_count);
		for(int i = 0; i < result_DocumentReference->content_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_content, i);
			result_DocumentReference->content[i] = *Deserialize_DocumentReference_Content(arena, internal);
		}

	}
	cJSON *cjson_context =  cJSON_GetObjectItem(documentReference, "context");
	if(cjson_context)
	{
		result_DocumentReference->context = Deserialize_DocumentReference_Context(arena, cjson_context);
	}
	return result_DocumentReference;
}

DocumentReference_RelatesTo*
Deserialize_DocumentReference_RelatesTo(Arena *arena, cJSON *documentReference_RelatesTo)
{
	DocumentReference_RelatesTo *result_DocumentReference_RelatesTo = PushArray(arena, DocumentReference_RelatesTo, 1);
	result_DocumentReference_RelatesTo->resourceType = ResourceType::DocumentReference_RelatesTo;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(documentReference_RelatesTo, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(documentReference_RelatesTo, "id");
	if(cjson_id)
	{
		result_DocumentReference_RelatesTo->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(documentReference_RelatesTo, "extension");
	if(cjson_extension)
	{
		result_DocumentReference_RelatesTo->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DocumentReference_RelatesTo->extension = PushArray(arena, Extension, result_DocumentReference_RelatesTo->extension_count);
		for(int i = 0; i < result_DocumentReference_RelatesTo->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DocumentReference_RelatesTo->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(documentReference_RelatesTo, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DocumentReference_RelatesTo->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DocumentReference_RelatesTo->modifierExtension = PushArray(arena, Extension, result_DocumentReference_RelatesTo->modifierExtension_count);
		for(int i = 0; i < result_DocumentReference_RelatesTo->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DocumentReference_RelatesTo->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(documentReference_RelatesTo, "code");
	if(cjson_code)
	{
		result_DocumentReference_RelatesTo->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_target =  cJSON_GetObjectItem(documentReference_RelatesTo, "target");
	if(cjson_target)
	{
		result_DocumentReference_RelatesTo->target = Deserialize_Reference(arena, cjson_target);
	}
	return result_DocumentReference_RelatesTo;
}

DocumentReference_Content*
Deserialize_DocumentReference_Content(Arena *arena, cJSON *documentReference_Content)
{
	DocumentReference_Content *result_DocumentReference_Content = PushArray(arena, DocumentReference_Content, 1);
	result_DocumentReference_Content->resourceType = ResourceType::DocumentReference_Content;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(documentReference_Content, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(documentReference_Content, "id");
	if(cjson_id)
	{
		result_DocumentReference_Content->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(documentReference_Content, "extension");
	if(cjson_extension)
	{
		result_DocumentReference_Content->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DocumentReference_Content->extension = PushArray(arena, Extension, result_DocumentReference_Content->extension_count);
		for(int i = 0; i < result_DocumentReference_Content->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DocumentReference_Content->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(documentReference_Content, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DocumentReference_Content->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DocumentReference_Content->modifierExtension = PushArray(arena, Extension, result_DocumentReference_Content->modifierExtension_count);
		for(int i = 0; i < result_DocumentReference_Content->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DocumentReference_Content->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_attachment =  cJSON_GetObjectItem(documentReference_Content, "attachment");
	if(cjson_attachment)
	{
		result_DocumentReference_Content->attachment = Deserialize_Attachment(arena, cjson_attachment);
	}
	cJSON *cjson_format =  cJSON_GetObjectItem(documentReference_Content, "format");
	if(cjson_format)
	{
		result_DocumentReference_Content->format = Deserialize_Coding(arena, cjson_format);
	}
	return result_DocumentReference_Content;
}

DocumentReference_Context*
Deserialize_DocumentReference_Context(Arena *arena, cJSON *documentReference_Context)
{
	DocumentReference_Context *result_DocumentReference_Context = PushArray(arena, DocumentReference_Context, 1);
	result_DocumentReference_Context->resourceType = ResourceType::DocumentReference_Context;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(documentReference_Context, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(documentReference_Context, "id");
	if(cjson_id)
	{
		result_DocumentReference_Context->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(documentReference_Context, "extension");
	if(cjson_extension)
	{
		result_DocumentReference_Context->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DocumentReference_Context->extension = PushArray(arena, Extension, result_DocumentReference_Context->extension_count);
		for(int i = 0; i < result_DocumentReference_Context->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DocumentReference_Context->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(documentReference_Context, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DocumentReference_Context->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DocumentReference_Context->modifierExtension = PushArray(arena, Extension, result_DocumentReference_Context->modifierExtension_count);
		for(int i = 0; i < result_DocumentReference_Context->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DocumentReference_Context->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(documentReference_Context, "encounter");
	if(cjson_encounter)
	{
		result_DocumentReference_Context->encounter_count = cJSON_GetArraySize(cjson_encounter);
		result_DocumentReference_Context->encounter = PushArray(arena, Reference, result_DocumentReference_Context->encounter_count);
		for(int i = 0; i < result_DocumentReference_Context->encounter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_encounter, i);
			result_DocumentReference_Context->encounter[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_event =  cJSON_GetObjectItem(documentReference_Context, "event");
	if(cjson_event)
	{
		result_DocumentReference_Context->event_count = cJSON_GetArraySize(cjson_event);
		result_DocumentReference_Context->event = PushArray(arena, CodeableConcept, result_DocumentReference_Context->event_count);
		for(int i = 0; i < result_DocumentReference_Context->event_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_event, i);
			result_DocumentReference_Context->event[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(documentReference_Context, "period");
	if(cjson_period)
	{
		result_DocumentReference_Context->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_facilityType =  cJSON_GetObjectItem(documentReference_Context, "facilityType");
	if(cjson_facilityType)
	{
		result_DocumentReference_Context->facilityType = Deserialize_CodeableConcept(arena, cjson_facilityType);
	}
	cJSON *cjson_practiceSetting =  cJSON_GetObjectItem(documentReference_Context, "practiceSetting");
	if(cjson_practiceSetting)
	{
		result_DocumentReference_Context->practiceSetting = Deserialize_CodeableConcept(arena, cjson_practiceSetting);
	}
	cJSON *cjson_sourcePatientInfo =  cJSON_GetObjectItem(documentReference_Context, "sourcePatientInfo");
	if(cjson_sourcePatientInfo)
	{
		result_DocumentReference_Context->sourcePatientInfo = Deserialize_Reference(arena, cjson_sourcePatientInfo);
	}
	cJSON *cjson_related =  cJSON_GetObjectItem(documentReference_Context, "related");
	if(cjson_related)
	{
		result_DocumentReference_Context->related_count = cJSON_GetArraySize(cjson_related);
		result_DocumentReference_Context->related = PushArray(arena, Reference, result_DocumentReference_Context->related_count);
		for(int i = 0; i < result_DocumentReference_Context->related_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_related, i);
			result_DocumentReference_Context->related[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_DocumentReference_Context;
}

DomainResource*
Deserialize_DomainResource(Arena *arena, cJSON *domainResource)
{
	DomainResource *result_DomainResource = PushArray(arena, DomainResource, 1);
	result_DomainResource->resourceType = ResourceType::DomainResource;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(domainResource, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(domainResource, "id");
	if(cjson_id)
	{
		result_DomainResource->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(domainResource, "meta");
	if(cjson_meta)
	{
		result_DomainResource->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(domainResource, "implicitRules");
	if(cjson_implicitRules)
	{
		result_DomainResource->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(domainResource, "language");
	if(cjson_language)
	{
		result_DomainResource->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(domainResource, "text");
	if(cjson_text)
	{
		result_DomainResource->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(domainResource, "contained");
	if(cjson_contained)
	{
		result_DomainResource->contained_count = cJSON_GetArraySize(cjson_contained);
		result_DomainResource->contained = PushArray(arena, Resource, result_DomainResource->contained_count);
		for(int i = 0; i < result_DomainResource->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_DomainResource->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(domainResource, "extension");
	if(cjson_extension)
	{
		result_DomainResource->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DomainResource->extension = PushArray(arena, Extension, result_DomainResource->extension_count);
		for(int i = 0; i < result_DomainResource->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DomainResource->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(domainResource, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_DomainResource->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_DomainResource->modifierExtension = PushArray(arena, Extension, result_DomainResource->modifierExtension_count);
		for(int i = 0; i < result_DomainResource->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_DomainResource->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	return result_DomainResource;
}

EffectEvidenceSynthesis*
Deserialize_EffectEvidenceSynthesis(Arena *arena, cJSON *effectEvidenceSynthesis)
{
	EffectEvidenceSynthesis *result_EffectEvidenceSynthesis = PushArray(arena, EffectEvidenceSynthesis, 1);
	result_EffectEvidenceSynthesis->resourceType = ResourceType::EffectEvidenceSynthesis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(effectEvidenceSynthesis, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(effectEvidenceSynthesis, "id");
	if(cjson_id)
	{
		result_EffectEvidenceSynthesis->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(effectEvidenceSynthesis, "meta");
	if(cjson_meta)
	{
		result_EffectEvidenceSynthesis->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(effectEvidenceSynthesis, "implicitRules");
	if(cjson_implicitRules)
	{
		result_EffectEvidenceSynthesis->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(effectEvidenceSynthesis, "language");
	if(cjson_language)
	{
		result_EffectEvidenceSynthesis->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(effectEvidenceSynthesis, "text");
	if(cjson_text)
	{
		result_EffectEvidenceSynthesis->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(effectEvidenceSynthesis, "contained");
	if(cjson_contained)
	{
		result_EffectEvidenceSynthesis->contained_count = cJSON_GetArraySize(cjson_contained);
		result_EffectEvidenceSynthesis->contained = PushArray(arena, Resource, result_EffectEvidenceSynthesis->contained_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_EffectEvidenceSynthesis->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(effectEvidenceSynthesis, "extension");
	if(cjson_extension)
	{
		result_EffectEvidenceSynthesis->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EffectEvidenceSynthesis->extension = PushArray(arena, Extension, result_EffectEvidenceSynthesis->extension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EffectEvidenceSynthesis->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(effectEvidenceSynthesis, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EffectEvidenceSynthesis->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EffectEvidenceSynthesis->modifierExtension = PushArray(arena, Extension, result_EffectEvidenceSynthesis->modifierExtension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EffectEvidenceSynthesis->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(effectEvidenceSynthesis, "url");
	if(cjson_url)
	{
		result_EffectEvidenceSynthesis->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(effectEvidenceSynthesis, "identifier");
	if(cjson_identifier)
	{
		result_EffectEvidenceSynthesis->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_EffectEvidenceSynthesis->identifier = PushArray(arena, Identifier, result_EffectEvidenceSynthesis->identifier_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_EffectEvidenceSynthesis->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(effectEvidenceSynthesis, "version");
	if(cjson_version)
	{
		result_EffectEvidenceSynthesis->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(effectEvidenceSynthesis, "name");
	if(cjson_name)
	{
		result_EffectEvidenceSynthesis->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(effectEvidenceSynthesis, "title");
	if(cjson_title)
	{
		result_EffectEvidenceSynthesis->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(effectEvidenceSynthesis, "status");
	if(cjson_status)
	{
		result_EffectEvidenceSynthesis->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(effectEvidenceSynthesis, "date");
	if(cjson_date)
	{
		result_EffectEvidenceSynthesis->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(effectEvidenceSynthesis, "publisher");
	if(cjson_publisher)
	{
		result_EffectEvidenceSynthesis->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(effectEvidenceSynthesis, "contact");
	if(cjson_contact)
	{
		result_EffectEvidenceSynthesis->contact_count = cJSON_GetArraySize(cjson_contact);
		result_EffectEvidenceSynthesis->contact = PushArray(arena, ContactDetail, result_EffectEvidenceSynthesis->contact_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_EffectEvidenceSynthesis->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(effectEvidenceSynthesis, "description");
	if(cjson_description)
	{
		result_EffectEvidenceSynthesis->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(effectEvidenceSynthesis, "note");
	if(cjson_note)
	{
		result_EffectEvidenceSynthesis->note_count = cJSON_GetArraySize(cjson_note);
		result_EffectEvidenceSynthesis->note = PushArray(arena, Annotation, result_EffectEvidenceSynthesis->note_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_EffectEvidenceSynthesis->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(effectEvidenceSynthesis, "useContext");
	if(cjson_useContext)
	{
		result_EffectEvidenceSynthesis->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_EffectEvidenceSynthesis->useContext = PushArray(arena, UsageContext, result_EffectEvidenceSynthesis->useContext_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_EffectEvidenceSynthesis->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(effectEvidenceSynthesis, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_EffectEvidenceSynthesis->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_EffectEvidenceSynthesis->jurisdiction = PushArray(arena, CodeableConcept, result_EffectEvidenceSynthesis->jurisdiction_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_EffectEvidenceSynthesis->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(effectEvidenceSynthesis, "copyright");
	if(cjson_copyright)
	{
		result_EffectEvidenceSynthesis->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(effectEvidenceSynthesis, "approvalDate");
	if(cjson_approvalDate)
	{
		result_EffectEvidenceSynthesis->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(effectEvidenceSynthesis, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_EffectEvidenceSynthesis->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(effectEvidenceSynthesis, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_EffectEvidenceSynthesis->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(effectEvidenceSynthesis, "topic");
	if(cjson_topic)
	{
		result_EffectEvidenceSynthesis->topic_count = cJSON_GetArraySize(cjson_topic);
		result_EffectEvidenceSynthesis->topic = PushArray(arena, CodeableConcept, result_EffectEvidenceSynthesis->topic_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_EffectEvidenceSynthesis->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(effectEvidenceSynthesis, "author");
	if(cjson_author)
	{
		result_EffectEvidenceSynthesis->author_count = cJSON_GetArraySize(cjson_author);
		result_EffectEvidenceSynthesis->author = PushArray(arena, ContactDetail, result_EffectEvidenceSynthesis->author_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_EffectEvidenceSynthesis->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(effectEvidenceSynthesis, "editor");
	if(cjson_editor)
	{
		result_EffectEvidenceSynthesis->editor_count = cJSON_GetArraySize(cjson_editor);
		result_EffectEvidenceSynthesis->editor = PushArray(arena, ContactDetail, result_EffectEvidenceSynthesis->editor_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_EffectEvidenceSynthesis->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(effectEvidenceSynthesis, "reviewer");
	if(cjson_reviewer)
	{
		result_EffectEvidenceSynthesis->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_EffectEvidenceSynthesis->reviewer = PushArray(arena, ContactDetail, result_EffectEvidenceSynthesis->reviewer_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_EffectEvidenceSynthesis->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(effectEvidenceSynthesis, "endorser");
	if(cjson_endorser)
	{
		result_EffectEvidenceSynthesis->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_EffectEvidenceSynthesis->endorser = PushArray(arena, ContactDetail, result_EffectEvidenceSynthesis->endorser_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_EffectEvidenceSynthesis->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(effectEvidenceSynthesis, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_EffectEvidenceSynthesis->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_EffectEvidenceSynthesis->relatedArtifact = PushArray(arena, RelatedArtifact, result_EffectEvidenceSynthesis->relatedArtifact_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_EffectEvidenceSynthesis->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_synthesisType =  cJSON_GetObjectItem(effectEvidenceSynthesis, "synthesisType");
	if(cjson_synthesisType)
	{
		result_EffectEvidenceSynthesis->synthesisType = Deserialize_CodeableConcept(arena, cjson_synthesisType);
	}
	cJSON *cjson_studyType =  cJSON_GetObjectItem(effectEvidenceSynthesis, "studyType");
	if(cjson_studyType)
	{
		result_EffectEvidenceSynthesis->studyType = Deserialize_CodeableConcept(arena, cjson_studyType);
	}
	cJSON *cjson_population =  cJSON_GetObjectItem(effectEvidenceSynthesis, "population");
	if(cjson_population)
	{
		result_EffectEvidenceSynthesis->population = Deserialize_Reference(arena, cjson_population);
	}
	cJSON *cjson_exposure =  cJSON_GetObjectItem(effectEvidenceSynthesis, "exposure");
	if(cjson_exposure)
	{
		result_EffectEvidenceSynthesis->exposure = Deserialize_Reference(arena, cjson_exposure);
	}
	cJSON *cjson_exposureAlternative =  cJSON_GetObjectItem(effectEvidenceSynthesis, "exposureAlternative");
	if(cjson_exposureAlternative)
	{
		result_EffectEvidenceSynthesis->exposureAlternative = Deserialize_Reference(arena, cjson_exposureAlternative);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(effectEvidenceSynthesis, "outcome");
	if(cjson_outcome)
	{
		result_EffectEvidenceSynthesis->outcome = Deserialize_Reference(arena, cjson_outcome);
	}
	cJSON *cjson_sampleSize =  cJSON_GetObjectItem(effectEvidenceSynthesis, "sampleSize");
	if(cjson_sampleSize)
	{
		result_EffectEvidenceSynthesis->sampleSize = Deserialize_EffectEvidenceSynthesis_SampleSize(arena, cjson_sampleSize);
	}
	cJSON *cjson_resultsByExposure =  cJSON_GetObjectItem(effectEvidenceSynthesis, "resultsByExposure");
	if(cjson_resultsByExposure)
	{
		result_EffectEvidenceSynthesis->resultsByExposure_count = cJSON_GetArraySize(cjson_resultsByExposure);
		result_EffectEvidenceSynthesis->resultsByExposure = PushArray(arena, EffectEvidenceSynthesis_ResultsByExposure, result_EffectEvidenceSynthesis->resultsByExposure_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->resultsByExposure_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resultsByExposure, i);
			result_EffectEvidenceSynthesis->resultsByExposure[i] = *Deserialize_EffectEvidenceSynthesis_ResultsByExposure(arena, internal);
		}

	}
	cJSON *cjson_effectEstimate =  cJSON_GetObjectItem(effectEvidenceSynthesis, "effectEstimate");
	if(cjson_effectEstimate)
	{
		result_EffectEvidenceSynthesis->effectEstimate_count = cJSON_GetArraySize(cjson_effectEstimate);
		result_EffectEvidenceSynthesis->effectEstimate = PushArray(arena, EffectEvidenceSynthesis_EffectEstimate, result_EffectEvidenceSynthesis->effectEstimate_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->effectEstimate_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_effectEstimate, i);
			result_EffectEvidenceSynthesis->effectEstimate[i] = *Deserialize_EffectEvidenceSynthesis_EffectEstimate(arena, internal);
		}

	}
	cJSON *cjson_certainty =  cJSON_GetObjectItem(effectEvidenceSynthesis, "certainty");
	if(cjson_certainty)
	{
		result_EffectEvidenceSynthesis->certainty_count = cJSON_GetArraySize(cjson_certainty);
		result_EffectEvidenceSynthesis->certainty = PushArray(arena, EffectEvidenceSynthesis_Certainty, result_EffectEvidenceSynthesis->certainty_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis->certainty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_certainty, i);
			result_EffectEvidenceSynthesis->certainty[i] = *Deserialize_EffectEvidenceSynthesis_Certainty(arena, internal);
		}

	}
	return result_EffectEvidenceSynthesis;
}

EffectEvidenceSynthesis_SampleSize*
Deserialize_EffectEvidenceSynthesis_SampleSize(Arena *arena, cJSON *effectEvidenceSynthesis_SampleSize)
{
	EffectEvidenceSynthesis_SampleSize *result_EffectEvidenceSynthesis_SampleSize = PushArray(arena, EffectEvidenceSynthesis_SampleSize, 1);
	result_EffectEvidenceSynthesis_SampleSize->resourceType = ResourceType::EffectEvidenceSynthesis_SampleSize;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(effectEvidenceSynthesis_SampleSize, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(effectEvidenceSynthesis_SampleSize, "id");
	if(cjson_id)
	{
		result_EffectEvidenceSynthesis_SampleSize->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(effectEvidenceSynthesis_SampleSize, "extension");
	if(cjson_extension)
	{
		result_EffectEvidenceSynthesis_SampleSize->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EffectEvidenceSynthesis_SampleSize->extension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_SampleSize->extension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_SampleSize->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EffectEvidenceSynthesis_SampleSize->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(effectEvidenceSynthesis_SampleSize, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EffectEvidenceSynthesis_SampleSize->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EffectEvidenceSynthesis_SampleSize->modifierExtension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_SampleSize->modifierExtension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_SampleSize->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EffectEvidenceSynthesis_SampleSize->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(effectEvidenceSynthesis_SampleSize, "description");
	if(cjson_description)
	{
		result_EffectEvidenceSynthesis_SampleSize->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_numberOfStudies =  cJSON_GetObjectItem(effectEvidenceSynthesis_SampleSize, "numberOfStudies");
	if(cjson_numberOfStudies)
	{
		result_EffectEvidenceSynthesis_SampleSize->numberOfStudies = Deserialize_Integer(arena, cjson_numberOfStudies);
	}
	cJSON *cjson_numberOfParticipants =  cJSON_GetObjectItem(effectEvidenceSynthesis_SampleSize, "numberOfParticipants");
	if(cjson_numberOfParticipants)
	{
		result_EffectEvidenceSynthesis_SampleSize->numberOfParticipants = Deserialize_Integer(arena, cjson_numberOfParticipants);
	}
	return result_EffectEvidenceSynthesis_SampleSize;
}

EffectEvidenceSynthesis_ResultsByExposure*
Deserialize_EffectEvidenceSynthesis_ResultsByExposure(Arena *arena, cJSON *effectEvidenceSynthesis_ResultsByExposure)
{
	EffectEvidenceSynthesis_ResultsByExposure *result_EffectEvidenceSynthesis_ResultsByExposure = PushArray(arena, EffectEvidenceSynthesis_ResultsByExposure, 1);
	result_EffectEvidenceSynthesis_ResultsByExposure->resourceType = ResourceType::EffectEvidenceSynthesis_ResultsByExposure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "id");
	if(cjson_id)
	{
		result_EffectEvidenceSynthesis_ResultsByExposure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "extension");
	if(cjson_extension)
	{
		result_EffectEvidenceSynthesis_ResultsByExposure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EffectEvidenceSynthesis_ResultsByExposure->extension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_ResultsByExposure->extension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_ResultsByExposure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EffectEvidenceSynthesis_ResultsByExposure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EffectEvidenceSynthesis_ResultsByExposure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EffectEvidenceSynthesis_ResultsByExposure->modifierExtension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_ResultsByExposure->modifierExtension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_ResultsByExposure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EffectEvidenceSynthesis_ResultsByExposure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "description");
	if(cjson_description)
	{
		result_EffectEvidenceSynthesis_ResultsByExposure->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_exposureState =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "exposureState");
	if(cjson_exposureState)
	{
		result_EffectEvidenceSynthesis_ResultsByExposure->exposureState = Str8C(cJSON_GetStringValue(cjson_exposureState));
	}
	cJSON *cjson_variantState =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "variantState");
	if(cjson_variantState)
	{
		result_EffectEvidenceSynthesis_ResultsByExposure->variantState = Deserialize_CodeableConcept(arena, cjson_variantState);
	}
	cJSON *cjson_riskEvidenceSynthesis =  cJSON_GetObjectItem(effectEvidenceSynthesis_ResultsByExposure, "riskEvidenceSynthesis");
	if(cjson_riskEvidenceSynthesis)
	{
		result_EffectEvidenceSynthesis_ResultsByExposure->riskEvidenceSynthesis = Deserialize_Reference(arena, cjson_riskEvidenceSynthesis);
	}
	return result_EffectEvidenceSynthesis_ResultsByExposure;
}

EffectEvidenceSynthesis_EffectEstimate*
Deserialize_EffectEvidenceSynthesis_EffectEstimate(Arena *arena, cJSON *effectEvidenceSynthesis_EffectEstimate)
{
	EffectEvidenceSynthesis_EffectEstimate *result_EffectEvidenceSynthesis_EffectEstimate = PushArray(arena, EffectEvidenceSynthesis_EffectEstimate, 1);
	result_EffectEvidenceSynthesis_EffectEstimate->resourceType = ResourceType::EffectEvidenceSynthesis_EffectEstimate;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "id");
	if(cjson_id)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "extension");
	if(cjson_extension)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EffectEvidenceSynthesis_EffectEstimate->extension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_EffectEstimate->extension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_EffectEstimate->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EffectEvidenceSynthesis_EffectEstimate->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EffectEvidenceSynthesis_EffectEstimate->modifierExtension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_EffectEstimate->modifierExtension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_EffectEstimate->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EffectEvidenceSynthesis_EffectEstimate->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "description");
	if(cjson_description)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "type");
	if(cjson_type)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_variantState =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "variantState");
	if(cjson_variantState)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->variantState = Deserialize_CodeableConcept(arena, cjson_variantState);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "value");
	if(cjson_value)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_unitOfMeasure =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "unitOfMeasure");
	if(cjson_unitOfMeasure)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->unitOfMeasure = Deserialize_CodeableConcept(arena, cjson_unitOfMeasure);
	}
	cJSON *cjson_precisionEstimate =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate, "precisionEstimate");
	if(cjson_precisionEstimate)
	{
		result_EffectEvidenceSynthesis_EffectEstimate->precisionEstimate_count = cJSON_GetArraySize(cjson_precisionEstimate);
		result_EffectEvidenceSynthesis_EffectEstimate->precisionEstimate = PushArray(arena, EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, result_EffectEvidenceSynthesis_EffectEstimate->precisionEstimate_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_EffectEstimate->precisionEstimate_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_precisionEstimate, i);
			result_EffectEvidenceSynthesis_EffectEstimate->precisionEstimate[i] = *Deserialize_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate(arena, internal);
		}

	}
	return result_EffectEvidenceSynthesis_EffectEstimate;
}

EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate*
Deserialize_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate(Arena *arena, cJSON *effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate)
{
	EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate *result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate = PushArray(arena, EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, 1);
	result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->resourceType = ResourceType::EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "id");
	if(cjson_id)
	{
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "extension");
	if(cjson_extension)
	{
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "type");
	if(cjson_type)
	{
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_level =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "level");
	if(cjson_level)
	{
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->level = cJSON_GetNumberValue(cjson_level);
	}
	cJSON *cjson_from =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "from");
	if(cjson_from)
	{
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->from = cJSON_GetNumberValue(cjson_from);
	}
	cJSON *cjson_to =  cJSON_GetObjectItem(effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, "to");
	if(cjson_to)
	{
		result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->to = cJSON_GetNumberValue(cjson_to);
	}
	return result_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate;
}

EffectEvidenceSynthesis_Certainty*
Deserialize_EffectEvidenceSynthesis_Certainty(Arena *arena, cJSON *effectEvidenceSynthesis_Certainty)
{
	EffectEvidenceSynthesis_Certainty *result_EffectEvidenceSynthesis_Certainty = PushArray(arena, EffectEvidenceSynthesis_Certainty, 1);
	result_EffectEvidenceSynthesis_Certainty->resourceType = ResourceType::EffectEvidenceSynthesis_Certainty;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty, "id");
	if(cjson_id)
	{
		result_EffectEvidenceSynthesis_Certainty->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty, "extension");
	if(cjson_extension)
	{
		result_EffectEvidenceSynthesis_Certainty->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EffectEvidenceSynthesis_Certainty->extension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_Certainty->extension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EffectEvidenceSynthesis_Certainty->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EffectEvidenceSynthesis_Certainty->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EffectEvidenceSynthesis_Certainty->modifierExtension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_Certainty->modifierExtension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EffectEvidenceSynthesis_Certainty->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_rating =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty, "rating");
	if(cjson_rating)
	{
		result_EffectEvidenceSynthesis_Certainty->rating_count = cJSON_GetArraySize(cjson_rating);
		result_EffectEvidenceSynthesis_Certainty->rating = PushArray(arena, CodeableConcept, result_EffectEvidenceSynthesis_Certainty->rating_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty->rating_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rating, i);
			result_EffectEvidenceSynthesis_Certainty->rating[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty, "note");
	if(cjson_note)
	{
		result_EffectEvidenceSynthesis_Certainty->note_count = cJSON_GetArraySize(cjson_note);
		result_EffectEvidenceSynthesis_Certainty->note = PushArray(arena, Annotation, result_EffectEvidenceSynthesis_Certainty->note_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_EffectEvidenceSynthesis_Certainty->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_certaintySubcomponent =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty, "certaintySubcomponent");
	if(cjson_certaintySubcomponent)
	{
		result_EffectEvidenceSynthesis_Certainty->certaintySubcomponent_count = cJSON_GetArraySize(cjson_certaintySubcomponent);
		result_EffectEvidenceSynthesis_Certainty->certaintySubcomponent = PushArray(arena, EffectEvidenceSynthesis_Certainty_CertaintySubcomponent, result_EffectEvidenceSynthesis_Certainty->certaintySubcomponent_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty->certaintySubcomponent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_certaintySubcomponent, i);
			result_EffectEvidenceSynthesis_Certainty->certaintySubcomponent[i] = *Deserialize_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, internal);
		}

	}
	return result_EffectEvidenceSynthesis_Certainty;
}

EffectEvidenceSynthesis_Certainty_CertaintySubcomponent*
Deserialize_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent(Arena *arena, cJSON *effectEvidenceSynthesis_Certainty_CertaintySubcomponent)
{
	EffectEvidenceSynthesis_Certainty_CertaintySubcomponent *result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent = PushArray(arena, EffectEvidenceSynthesis_Certainty_CertaintySubcomponent, 1);
	result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->resourceType = ResourceType::EffectEvidenceSynthesis_Certainty_CertaintySubcomponent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty_CertaintySubcomponent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty_CertaintySubcomponent, "id");
	if(cjson_id)
	{
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty_CertaintySubcomponent, "extension");
	if(cjson_extension)
	{
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty_CertaintySubcomponent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension = PushArray(arena, Extension, result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty_CertaintySubcomponent, "type");
	if(cjson_type)
	{
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_rating =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty_CertaintySubcomponent, "rating");
	if(cjson_rating)
	{
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count = cJSON_GetArraySize(cjson_rating);
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating = PushArray(arena, CodeableConcept, result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rating, i);
			result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(effectEvidenceSynthesis_Certainty_CertaintySubcomponent, "note");
	if(cjson_note)
	{
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count = cJSON_GetArraySize(cjson_note);
		result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->note = PushArray(arena, Annotation, result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count);
		for(int i = 0; i < result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent;
}

Encounter*
Deserialize_Encounter(Arena *arena, cJSON *encounter)
{
	Encounter *result_Encounter = PushArray(arena, Encounter, 1);
	result_Encounter->resourceType = ResourceType::Encounter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(encounter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(encounter, "id");
	if(cjson_id)
	{
		result_Encounter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(encounter, "meta");
	if(cjson_meta)
	{
		result_Encounter->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(encounter, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Encounter->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(encounter, "language");
	if(cjson_language)
	{
		result_Encounter->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(encounter, "text");
	if(cjson_text)
	{
		result_Encounter->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(encounter, "contained");
	if(cjson_contained)
	{
		result_Encounter->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Encounter->contained = PushArray(arena, Resource, result_Encounter->contained_count);
		for(int i = 0; i < result_Encounter->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Encounter->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(encounter, "extension");
	if(cjson_extension)
	{
		result_Encounter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Encounter->extension = PushArray(arena, Extension, result_Encounter->extension_count);
		for(int i = 0; i < result_Encounter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Encounter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(encounter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Encounter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Encounter->modifierExtension = PushArray(arena, Extension, result_Encounter->modifierExtension_count);
		for(int i = 0; i < result_Encounter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Encounter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(encounter, "identifier");
	if(cjson_identifier)
	{
		result_Encounter->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Encounter->identifier = PushArray(arena, Identifier, result_Encounter->identifier_count);
		for(int i = 0; i < result_Encounter->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Encounter->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(encounter, "status");
	if(cjson_status)
	{
		result_Encounter->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusHistory =  cJSON_GetObjectItem(encounter, "statusHistory");
	if(cjson_statusHistory)
	{
		result_Encounter->statusHistory_count = cJSON_GetArraySize(cjson_statusHistory);
		result_Encounter->statusHistory = PushArray(arena, Encounter_StatusHistory, result_Encounter->statusHistory_count);
		for(int i = 0; i < result_Encounter->statusHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_statusHistory, i);
			result_Encounter->statusHistory[i] = *Deserialize_Encounter_StatusHistory(arena, internal);
		}

	}
	cJSON *cjson_class_ =  cJSON_GetObjectItem(encounter, "class_");
	if(cjson_class_)
	{
		result_Encounter->class_ = Deserialize_Coding(arena, cjson_class_);
	}
	cJSON *cjson_classHistory =  cJSON_GetObjectItem(encounter, "classHistory");
	if(cjson_classHistory)
	{
		result_Encounter->classHistory_count = cJSON_GetArraySize(cjson_classHistory);
		result_Encounter->classHistory = PushArray(arena, Encounter_ClassHistory, result_Encounter->classHistory_count);
		for(int i = 0; i < result_Encounter->classHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_classHistory, i);
			result_Encounter->classHistory[i] = *Deserialize_Encounter_ClassHistory(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(encounter, "type");
	if(cjson_type)
	{
		result_Encounter->type_count = cJSON_GetArraySize(cjson_type);
		result_Encounter->type = PushArray(arena, CodeableConcept, result_Encounter->type_count);
		for(int i = 0; i < result_Encounter->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Encounter->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_serviceType =  cJSON_GetObjectItem(encounter, "serviceType");
	if(cjson_serviceType)
	{
		result_Encounter->serviceType = Deserialize_CodeableConcept(arena, cjson_serviceType);
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(encounter, "priority");
	if(cjson_priority)
	{
		result_Encounter->priority = Deserialize_CodeableConcept(arena, cjson_priority);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(encounter, "subject");
	if(cjson_subject)
	{
		result_Encounter->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_episodeOfCare =  cJSON_GetObjectItem(encounter, "episodeOfCare");
	if(cjson_episodeOfCare)
	{
		result_Encounter->episodeOfCare_count = cJSON_GetArraySize(cjson_episodeOfCare);
		result_Encounter->episodeOfCare = PushArray(arena, Reference, result_Encounter->episodeOfCare_count);
		for(int i = 0; i < result_Encounter->episodeOfCare_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_episodeOfCare, i);
			result_Encounter->episodeOfCare[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(encounter, "basedOn");
	if(cjson_basedOn)
	{
		result_Encounter->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_Encounter->basedOn = PushArray(arena, Reference, result_Encounter->basedOn_count);
		for(int i = 0; i < result_Encounter->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_Encounter->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_participant =  cJSON_GetObjectItem(encounter, "participant");
	if(cjson_participant)
	{
		result_Encounter->participant_count = cJSON_GetArraySize(cjson_participant);
		result_Encounter->participant = PushArray(arena, Encounter_Participant, result_Encounter->participant_count);
		for(int i = 0; i < result_Encounter->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_Encounter->participant[i] = *Deserialize_Encounter_Participant(arena, internal);
		}

	}
	cJSON *cjson_appointment =  cJSON_GetObjectItem(encounter, "appointment");
	if(cjson_appointment)
	{
		result_Encounter->appointment_count = cJSON_GetArraySize(cjson_appointment);
		result_Encounter->appointment = PushArray(arena, Reference, result_Encounter->appointment_count);
		for(int i = 0; i < result_Encounter->appointment_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_appointment, i);
			result_Encounter->appointment[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(encounter, "period");
	if(cjson_period)
	{
		result_Encounter->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_length =  cJSON_GetObjectItem(encounter, "length");
	if(cjson_length)
	{
		result_Encounter->length = Deserialize_Duration(arena, cjson_length);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(encounter, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Encounter->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_Encounter->reasonCode = PushArray(arena, CodeableConcept, result_Encounter->reasonCode_count);
		for(int i = 0; i < result_Encounter->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_Encounter->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(encounter, "reasonReference");
	if(cjson_reasonReference)
	{
		result_Encounter->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_Encounter->reasonReference = PushArray(arena, Reference, result_Encounter->reasonReference_count);
		for(int i = 0; i < result_Encounter->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_Encounter->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_diagnosis =  cJSON_GetObjectItem(encounter, "diagnosis");
	if(cjson_diagnosis)
	{
		result_Encounter->diagnosis_count = cJSON_GetArraySize(cjson_diagnosis);
		result_Encounter->diagnosis = PushArray(arena, Encounter_Diagnosis, result_Encounter->diagnosis_count);
		for(int i = 0; i < result_Encounter->diagnosis_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_diagnosis, i);
			result_Encounter->diagnosis[i] = *Deserialize_Encounter_Diagnosis(arena, internal);
		}

	}
	cJSON *cjson_account =  cJSON_GetObjectItem(encounter, "account");
	if(cjson_account)
	{
		result_Encounter->account_count = cJSON_GetArraySize(cjson_account);
		result_Encounter->account = PushArray(arena, Reference, result_Encounter->account_count);
		for(int i = 0; i < result_Encounter->account_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_account, i);
			result_Encounter->account[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_hospitalization =  cJSON_GetObjectItem(encounter, "hospitalization");
	if(cjson_hospitalization)
	{
		result_Encounter->hospitalization = Deserialize_Encounter_Hospitalization(arena, cjson_hospitalization);
	}
	cJSON *cjson_location =  cJSON_GetObjectItem(encounter, "location");
	if(cjson_location)
	{
		result_Encounter->location_count = cJSON_GetArraySize(cjson_location);
		result_Encounter->location = PushArray(arena, Encounter_Location, result_Encounter->location_count);
		for(int i = 0; i < result_Encounter->location_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_location, i);
			result_Encounter->location[i] = *Deserialize_Encounter_Location(arena, internal);
		}

	}
	cJSON *cjson_serviceProvider =  cJSON_GetObjectItem(encounter, "serviceProvider");
	if(cjson_serviceProvider)
	{
		result_Encounter->serviceProvider = Deserialize_Reference(arena, cjson_serviceProvider);
	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(encounter, "partOf");
	if(cjson_partOf)
	{
		result_Encounter->partOf = Deserialize_Reference(arena, cjson_partOf);
	}
	return result_Encounter;
}

Encounter_StatusHistory*
Deserialize_Encounter_StatusHistory(Arena *arena, cJSON *encounter_StatusHistory)
{
	Encounter_StatusHistory *result_Encounter_StatusHistory = PushArray(arena, Encounter_StatusHistory, 1);
	result_Encounter_StatusHistory->resourceType = ResourceType::Encounter_StatusHistory;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(encounter_StatusHistory, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(encounter_StatusHistory, "id");
	if(cjson_id)
	{
		result_Encounter_StatusHistory->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(encounter_StatusHistory, "extension");
	if(cjson_extension)
	{
		result_Encounter_StatusHistory->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Encounter_StatusHistory->extension = PushArray(arena, Extension, result_Encounter_StatusHistory->extension_count);
		for(int i = 0; i < result_Encounter_StatusHistory->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Encounter_StatusHistory->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(encounter_StatusHistory, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Encounter_StatusHistory->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Encounter_StatusHistory->modifierExtension = PushArray(arena, Extension, result_Encounter_StatusHistory->modifierExtension_count);
		for(int i = 0; i < result_Encounter_StatusHistory->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Encounter_StatusHistory->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(encounter_StatusHistory, "status");
	if(cjson_status)
	{
		result_Encounter_StatusHistory->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(encounter_StatusHistory, "period");
	if(cjson_period)
	{
		result_Encounter_StatusHistory->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Encounter_StatusHistory;
}

Encounter_ClassHistory*
Deserialize_Encounter_ClassHistory(Arena *arena, cJSON *encounter_ClassHistory)
{
	Encounter_ClassHistory *result_Encounter_ClassHistory = PushArray(arena, Encounter_ClassHistory, 1);
	result_Encounter_ClassHistory->resourceType = ResourceType::Encounter_ClassHistory;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(encounter_ClassHistory, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(encounter_ClassHistory, "id");
	if(cjson_id)
	{
		result_Encounter_ClassHistory->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(encounter_ClassHistory, "extension");
	if(cjson_extension)
	{
		result_Encounter_ClassHistory->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Encounter_ClassHistory->extension = PushArray(arena, Extension, result_Encounter_ClassHistory->extension_count);
		for(int i = 0; i < result_Encounter_ClassHistory->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Encounter_ClassHistory->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(encounter_ClassHistory, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Encounter_ClassHistory->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Encounter_ClassHistory->modifierExtension = PushArray(arena, Extension, result_Encounter_ClassHistory->modifierExtension_count);
		for(int i = 0; i < result_Encounter_ClassHistory->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Encounter_ClassHistory->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_class_ =  cJSON_GetObjectItem(encounter_ClassHistory, "class_");
	if(cjson_class_)
	{
		result_Encounter_ClassHistory->class_ = Deserialize_Coding(arena, cjson_class_);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(encounter_ClassHistory, "period");
	if(cjson_period)
	{
		result_Encounter_ClassHistory->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Encounter_ClassHistory;
}

Encounter_Participant*
Deserialize_Encounter_Participant(Arena *arena, cJSON *encounter_Participant)
{
	Encounter_Participant *result_Encounter_Participant = PushArray(arena, Encounter_Participant, 1);
	result_Encounter_Participant->resourceType = ResourceType::Encounter_Participant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(encounter_Participant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(encounter_Participant, "id");
	if(cjson_id)
	{
		result_Encounter_Participant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(encounter_Participant, "extension");
	if(cjson_extension)
	{
		result_Encounter_Participant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Encounter_Participant->extension = PushArray(arena, Extension, result_Encounter_Participant->extension_count);
		for(int i = 0; i < result_Encounter_Participant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Encounter_Participant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(encounter_Participant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Encounter_Participant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Encounter_Participant->modifierExtension = PushArray(arena, Extension, result_Encounter_Participant->modifierExtension_count);
		for(int i = 0; i < result_Encounter_Participant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Encounter_Participant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(encounter_Participant, "type");
	if(cjson_type)
	{
		result_Encounter_Participant->type_count = cJSON_GetArraySize(cjson_type);
		result_Encounter_Participant->type = PushArray(arena, CodeableConcept, result_Encounter_Participant->type_count);
		for(int i = 0; i < result_Encounter_Participant->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Encounter_Participant->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(encounter_Participant, "period");
	if(cjson_period)
	{
		result_Encounter_Participant->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_individual =  cJSON_GetObjectItem(encounter_Participant, "individual");
	if(cjson_individual)
	{
		result_Encounter_Participant->individual = Deserialize_Reference(arena, cjson_individual);
	}
	return result_Encounter_Participant;
}

Encounter_Diagnosis*
Deserialize_Encounter_Diagnosis(Arena *arena, cJSON *encounter_Diagnosis)
{
	Encounter_Diagnosis *result_Encounter_Diagnosis = PushArray(arena, Encounter_Diagnosis, 1);
	result_Encounter_Diagnosis->resourceType = ResourceType::Encounter_Diagnosis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(encounter_Diagnosis, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(encounter_Diagnosis, "id");
	if(cjson_id)
	{
		result_Encounter_Diagnosis->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(encounter_Diagnosis, "extension");
	if(cjson_extension)
	{
		result_Encounter_Diagnosis->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Encounter_Diagnosis->extension = PushArray(arena, Extension, result_Encounter_Diagnosis->extension_count);
		for(int i = 0; i < result_Encounter_Diagnosis->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Encounter_Diagnosis->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(encounter_Diagnosis, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Encounter_Diagnosis->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Encounter_Diagnosis->modifierExtension = PushArray(arena, Extension, result_Encounter_Diagnosis->modifierExtension_count);
		for(int i = 0; i < result_Encounter_Diagnosis->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Encounter_Diagnosis->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(encounter_Diagnosis, "condition");
	if(cjson_condition)
	{
		result_Encounter_Diagnosis->condition = Deserialize_Reference(arena, cjson_condition);
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(encounter_Diagnosis, "use");
	if(cjson_use)
	{
		result_Encounter_Diagnosis->use = Deserialize_CodeableConcept(arena, cjson_use);
	}
	cJSON *cjson_rank =  cJSON_GetObjectItem(encounter_Diagnosis, "rank");
	if(cjson_rank)
	{
		result_Encounter_Diagnosis->rank = (int)cJSON_GetNumberValue(cjson_rank);
	}
	return result_Encounter_Diagnosis;
}

Encounter_Hospitalization*
Deserialize_Encounter_Hospitalization(Arena *arena, cJSON *encounter_Hospitalization)
{
	Encounter_Hospitalization *result_Encounter_Hospitalization = PushArray(arena, Encounter_Hospitalization, 1);
	result_Encounter_Hospitalization->resourceType = ResourceType::Encounter_Hospitalization;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(encounter_Hospitalization, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(encounter_Hospitalization, "id");
	if(cjson_id)
	{
		result_Encounter_Hospitalization->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(encounter_Hospitalization, "extension");
	if(cjson_extension)
	{
		result_Encounter_Hospitalization->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Encounter_Hospitalization->extension = PushArray(arena, Extension, result_Encounter_Hospitalization->extension_count);
		for(int i = 0; i < result_Encounter_Hospitalization->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Encounter_Hospitalization->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(encounter_Hospitalization, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Encounter_Hospitalization->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Encounter_Hospitalization->modifierExtension = PushArray(arena, Extension, result_Encounter_Hospitalization->modifierExtension_count);
		for(int i = 0; i < result_Encounter_Hospitalization->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Encounter_Hospitalization->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_preAdmissionIdentifier =  cJSON_GetObjectItem(encounter_Hospitalization, "preAdmissionIdentifier");
	if(cjson_preAdmissionIdentifier)
	{
		result_Encounter_Hospitalization->preAdmissionIdentifier = Deserialize_Identifier(arena, cjson_preAdmissionIdentifier);
	}
	cJSON *cjson_origin =  cJSON_GetObjectItem(encounter_Hospitalization, "origin");
	if(cjson_origin)
	{
		result_Encounter_Hospitalization->origin = Deserialize_Reference(arena, cjson_origin);
	}
	cJSON *cjson_admitSource =  cJSON_GetObjectItem(encounter_Hospitalization, "admitSource");
	if(cjson_admitSource)
	{
		result_Encounter_Hospitalization->admitSource = Deserialize_CodeableConcept(arena, cjson_admitSource);
	}
	cJSON *cjson_reAdmission =  cJSON_GetObjectItem(encounter_Hospitalization, "reAdmission");
	if(cjson_reAdmission)
	{
		result_Encounter_Hospitalization->reAdmission = Deserialize_CodeableConcept(arena, cjson_reAdmission);
	}
	cJSON *cjson_dietPreference =  cJSON_GetObjectItem(encounter_Hospitalization, "dietPreference");
	if(cjson_dietPreference)
	{
		result_Encounter_Hospitalization->dietPreference_count = cJSON_GetArraySize(cjson_dietPreference);
		result_Encounter_Hospitalization->dietPreference = PushArray(arena, CodeableConcept, result_Encounter_Hospitalization->dietPreference_count);
		for(int i = 0; i < result_Encounter_Hospitalization->dietPreference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dietPreference, i);
			result_Encounter_Hospitalization->dietPreference[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialCourtesy =  cJSON_GetObjectItem(encounter_Hospitalization, "specialCourtesy");
	if(cjson_specialCourtesy)
	{
		result_Encounter_Hospitalization->specialCourtesy_count = cJSON_GetArraySize(cjson_specialCourtesy);
		result_Encounter_Hospitalization->specialCourtesy = PushArray(arena, CodeableConcept, result_Encounter_Hospitalization->specialCourtesy_count);
		for(int i = 0; i < result_Encounter_Hospitalization->specialCourtesy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialCourtesy, i);
			result_Encounter_Hospitalization->specialCourtesy[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialArrangement =  cJSON_GetObjectItem(encounter_Hospitalization, "specialArrangement");
	if(cjson_specialArrangement)
	{
		result_Encounter_Hospitalization->specialArrangement_count = cJSON_GetArraySize(cjson_specialArrangement);
		result_Encounter_Hospitalization->specialArrangement = PushArray(arena, CodeableConcept, result_Encounter_Hospitalization->specialArrangement_count);
		for(int i = 0; i < result_Encounter_Hospitalization->specialArrangement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialArrangement, i);
			result_Encounter_Hospitalization->specialArrangement[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_destination =  cJSON_GetObjectItem(encounter_Hospitalization, "destination");
	if(cjson_destination)
	{
		result_Encounter_Hospitalization->destination = Deserialize_Reference(arena, cjson_destination);
	}
	cJSON *cjson_dischargeDisposition =  cJSON_GetObjectItem(encounter_Hospitalization, "dischargeDisposition");
	if(cjson_dischargeDisposition)
	{
		result_Encounter_Hospitalization->dischargeDisposition = Deserialize_CodeableConcept(arena, cjson_dischargeDisposition);
	}
	return result_Encounter_Hospitalization;
}

Encounter_Location*
Deserialize_Encounter_Location(Arena *arena, cJSON *encounter_Location)
{
	Encounter_Location *result_Encounter_Location = PushArray(arena, Encounter_Location, 1);
	result_Encounter_Location->resourceType = ResourceType::Encounter_Location;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(encounter_Location, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(encounter_Location, "id");
	if(cjson_id)
	{
		result_Encounter_Location->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(encounter_Location, "extension");
	if(cjson_extension)
	{
		result_Encounter_Location->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Encounter_Location->extension = PushArray(arena, Extension, result_Encounter_Location->extension_count);
		for(int i = 0; i < result_Encounter_Location->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Encounter_Location->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(encounter_Location, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Encounter_Location->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Encounter_Location->modifierExtension = PushArray(arena, Extension, result_Encounter_Location->modifierExtension_count);
		for(int i = 0; i < result_Encounter_Location->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Encounter_Location->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(encounter_Location, "location");
	if(cjson_location)
	{
		result_Encounter_Location->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(encounter_Location, "status");
	if(cjson_status)
	{
		result_Encounter_Location->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_physicalType =  cJSON_GetObjectItem(encounter_Location, "physicalType");
	if(cjson_physicalType)
	{
		result_Encounter_Location->physicalType = Deserialize_CodeableConcept(arena, cjson_physicalType);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(encounter_Location, "period");
	if(cjson_period)
	{
		result_Encounter_Location->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Encounter_Location;
}

Endpoint*
Deserialize_Endpoint(Arena *arena, cJSON *endpoint)
{
	Endpoint *result_Endpoint = PushArray(arena, Endpoint, 1);
	result_Endpoint->resourceType = ResourceType::Endpoint;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(endpoint, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(endpoint, "id");
	if(cjson_id)
	{
		result_Endpoint->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(endpoint, "meta");
	if(cjson_meta)
	{
		result_Endpoint->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(endpoint, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Endpoint->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(endpoint, "language");
	if(cjson_language)
	{
		result_Endpoint->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(endpoint, "text");
	if(cjson_text)
	{
		result_Endpoint->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(endpoint, "contained");
	if(cjson_contained)
	{
		result_Endpoint->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Endpoint->contained = PushArray(arena, Resource, result_Endpoint->contained_count);
		for(int i = 0; i < result_Endpoint->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Endpoint->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(endpoint, "extension");
	if(cjson_extension)
	{
		result_Endpoint->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Endpoint->extension = PushArray(arena, Extension, result_Endpoint->extension_count);
		for(int i = 0; i < result_Endpoint->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Endpoint->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(endpoint, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Endpoint->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Endpoint->modifierExtension = PushArray(arena, Extension, result_Endpoint->modifierExtension_count);
		for(int i = 0; i < result_Endpoint->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Endpoint->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(endpoint, "identifier");
	if(cjson_identifier)
	{
		result_Endpoint->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Endpoint->identifier = PushArray(arena, Identifier, result_Endpoint->identifier_count);
		for(int i = 0; i < result_Endpoint->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Endpoint->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(endpoint, "status");
	if(cjson_status)
	{
		result_Endpoint->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_connectionType =  cJSON_GetObjectItem(endpoint, "connectionType");
	if(cjson_connectionType)
	{
		result_Endpoint->connectionType = Deserialize_Coding(arena, cjson_connectionType);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(endpoint, "name");
	if(cjson_name)
	{
		result_Endpoint->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_managingOrganization =  cJSON_GetObjectItem(endpoint, "managingOrganization");
	if(cjson_managingOrganization)
	{
		result_Endpoint->managingOrganization = Deserialize_Reference(arena, cjson_managingOrganization);
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(endpoint, "contact");
	if(cjson_contact)
	{
		result_Endpoint->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Endpoint->contact = PushArray(arena, ContactPoint, result_Endpoint->contact_count);
		for(int i = 0; i < result_Endpoint->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Endpoint->contact[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(endpoint, "period");
	if(cjson_period)
	{
		result_Endpoint->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_payloadType =  cJSON_GetObjectItem(endpoint, "payloadType");
	if(cjson_payloadType)
	{
		result_Endpoint->payloadType_count = cJSON_GetArraySize(cjson_payloadType);
		result_Endpoint->payloadType = PushArray(arena, CodeableConcept, result_Endpoint->payloadType_count);
		for(int i = 0; i < result_Endpoint->payloadType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_payloadType, i);
			result_Endpoint->payloadType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_payloadMimeType =  cJSON_GetObjectItem(endpoint, "payloadMimeType");
	if(cjson_payloadMimeType)
	{
		result_Endpoint->payloadMimeType_count = cJSON_GetArraySize(cjson_payloadMimeType);
		result_Endpoint->payloadMimeType = PushArray(arena, fhir_code, result_Endpoint->payloadMimeType_count);
		for(int i = 0; i < result_Endpoint->payloadMimeType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_payloadMimeType, i);
			result_Endpoint->payloadMimeType[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(endpoint, "address");
	if(cjson_address)
	{
		result_Endpoint->address = Str8C(cJSON_GetStringValue(cjson_address));
	}
	cJSON *cjson_header =  cJSON_GetObjectItem(endpoint, "header");
	if(cjson_header)
	{
		result_Endpoint->header_count = cJSON_GetArraySize(cjson_header);
		result_Endpoint->header = PushArray(arena, fhir_string, result_Endpoint->header_count);
		for(int i = 0; i < result_Endpoint->header_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_header, i);
			result_Endpoint->header[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_Endpoint;
}

EnrollmentRequest*
Deserialize_EnrollmentRequest(Arena *arena, cJSON *enrollmentRequest)
{
	EnrollmentRequest *result_EnrollmentRequest = PushArray(arena, EnrollmentRequest, 1);
	result_EnrollmentRequest->resourceType = ResourceType::EnrollmentRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(enrollmentRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(enrollmentRequest, "id");
	if(cjson_id)
	{
		result_EnrollmentRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(enrollmentRequest, "meta");
	if(cjson_meta)
	{
		result_EnrollmentRequest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(enrollmentRequest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_EnrollmentRequest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(enrollmentRequest, "language");
	if(cjson_language)
	{
		result_EnrollmentRequest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(enrollmentRequest, "text");
	if(cjson_text)
	{
		result_EnrollmentRequest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(enrollmentRequest, "contained");
	if(cjson_contained)
	{
		result_EnrollmentRequest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_EnrollmentRequest->contained = PushArray(arena, Resource, result_EnrollmentRequest->contained_count);
		for(int i = 0; i < result_EnrollmentRequest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_EnrollmentRequest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(enrollmentRequest, "extension");
	if(cjson_extension)
	{
		result_EnrollmentRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EnrollmentRequest->extension = PushArray(arena, Extension, result_EnrollmentRequest->extension_count);
		for(int i = 0; i < result_EnrollmentRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EnrollmentRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(enrollmentRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EnrollmentRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EnrollmentRequest->modifierExtension = PushArray(arena, Extension, result_EnrollmentRequest->modifierExtension_count);
		for(int i = 0; i < result_EnrollmentRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EnrollmentRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(enrollmentRequest, "identifier");
	if(cjson_identifier)
	{
		result_EnrollmentRequest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_EnrollmentRequest->identifier = PushArray(arena, Identifier, result_EnrollmentRequest->identifier_count);
		for(int i = 0; i < result_EnrollmentRequest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_EnrollmentRequest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(enrollmentRequest, "status");
	if(cjson_status)
	{
		result_EnrollmentRequest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(enrollmentRequest, "created");
	if(cjson_created)
	{
		result_EnrollmentRequest->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_insurer =  cJSON_GetObjectItem(enrollmentRequest, "insurer");
	if(cjson_insurer)
	{
		result_EnrollmentRequest->insurer = Deserialize_Reference(arena, cjson_insurer);
	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(enrollmentRequest, "provider");
	if(cjson_provider)
	{
		result_EnrollmentRequest->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_candidate =  cJSON_GetObjectItem(enrollmentRequest, "candidate");
	if(cjson_candidate)
	{
		result_EnrollmentRequest->candidate = Deserialize_Reference(arena, cjson_candidate);
	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(enrollmentRequest, "coverage");
	if(cjson_coverage)
	{
		result_EnrollmentRequest->coverage = Deserialize_Reference(arena, cjson_coverage);
	}
	return result_EnrollmentRequest;
}

EnrollmentResponse*
Deserialize_EnrollmentResponse(Arena *arena, cJSON *enrollmentResponse)
{
	EnrollmentResponse *result_EnrollmentResponse = PushArray(arena, EnrollmentResponse, 1);
	result_EnrollmentResponse->resourceType = ResourceType::EnrollmentResponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(enrollmentResponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(enrollmentResponse, "id");
	if(cjson_id)
	{
		result_EnrollmentResponse->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(enrollmentResponse, "meta");
	if(cjson_meta)
	{
		result_EnrollmentResponse->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(enrollmentResponse, "implicitRules");
	if(cjson_implicitRules)
	{
		result_EnrollmentResponse->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(enrollmentResponse, "language");
	if(cjson_language)
	{
		result_EnrollmentResponse->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(enrollmentResponse, "text");
	if(cjson_text)
	{
		result_EnrollmentResponse->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(enrollmentResponse, "contained");
	if(cjson_contained)
	{
		result_EnrollmentResponse->contained_count = cJSON_GetArraySize(cjson_contained);
		result_EnrollmentResponse->contained = PushArray(arena, Resource, result_EnrollmentResponse->contained_count);
		for(int i = 0; i < result_EnrollmentResponse->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_EnrollmentResponse->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(enrollmentResponse, "extension");
	if(cjson_extension)
	{
		result_EnrollmentResponse->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EnrollmentResponse->extension = PushArray(arena, Extension, result_EnrollmentResponse->extension_count);
		for(int i = 0; i < result_EnrollmentResponse->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EnrollmentResponse->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(enrollmentResponse, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EnrollmentResponse->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EnrollmentResponse->modifierExtension = PushArray(arena, Extension, result_EnrollmentResponse->modifierExtension_count);
		for(int i = 0; i < result_EnrollmentResponse->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EnrollmentResponse->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(enrollmentResponse, "identifier");
	if(cjson_identifier)
	{
		result_EnrollmentResponse->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_EnrollmentResponse->identifier = PushArray(arena, Identifier, result_EnrollmentResponse->identifier_count);
		for(int i = 0; i < result_EnrollmentResponse->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_EnrollmentResponse->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(enrollmentResponse, "status");
	if(cjson_status)
	{
		result_EnrollmentResponse->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(enrollmentResponse, "request");
	if(cjson_request)
	{
		result_EnrollmentResponse->request = Deserialize_Reference(arena, cjson_request);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(enrollmentResponse, "outcome");
	if(cjson_outcome)
	{
		result_EnrollmentResponse->outcome = Str8C(cJSON_GetStringValue(cjson_outcome));
	}
	cJSON *cjson_disposition =  cJSON_GetObjectItem(enrollmentResponse, "disposition");
	if(cjson_disposition)
	{
		result_EnrollmentResponse->disposition = Str8C(cJSON_GetStringValue(cjson_disposition));
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(enrollmentResponse, "created");
	if(cjson_created)
	{
		result_EnrollmentResponse->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_organization =  cJSON_GetObjectItem(enrollmentResponse, "organization");
	if(cjson_organization)
	{
		result_EnrollmentResponse->organization = Deserialize_Reference(arena, cjson_organization);
	}
	cJSON *cjson_requestProvider =  cJSON_GetObjectItem(enrollmentResponse, "requestProvider");
	if(cjson_requestProvider)
	{
		result_EnrollmentResponse->requestProvider = Deserialize_Reference(arena, cjson_requestProvider);
	}
	return result_EnrollmentResponse;
}

EpisodeOfCare*
Deserialize_EpisodeOfCare(Arena *arena, cJSON *episodeOfCare)
{
	EpisodeOfCare *result_EpisodeOfCare = PushArray(arena, EpisodeOfCare, 1);
	result_EpisodeOfCare->resourceType = ResourceType::EpisodeOfCare;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(episodeOfCare, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(episodeOfCare, "id");
	if(cjson_id)
	{
		result_EpisodeOfCare->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(episodeOfCare, "meta");
	if(cjson_meta)
	{
		result_EpisodeOfCare->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(episodeOfCare, "implicitRules");
	if(cjson_implicitRules)
	{
		result_EpisodeOfCare->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(episodeOfCare, "language");
	if(cjson_language)
	{
		result_EpisodeOfCare->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(episodeOfCare, "text");
	if(cjson_text)
	{
		result_EpisodeOfCare->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(episodeOfCare, "contained");
	if(cjson_contained)
	{
		result_EpisodeOfCare->contained_count = cJSON_GetArraySize(cjson_contained);
		result_EpisodeOfCare->contained = PushArray(arena, Resource, result_EpisodeOfCare->contained_count);
		for(int i = 0; i < result_EpisodeOfCare->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_EpisodeOfCare->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(episodeOfCare, "extension");
	if(cjson_extension)
	{
		result_EpisodeOfCare->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EpisodeOfCare->extension = PushArray(arena, Extension, result_EpisodeOfCare->extension_count);
		for(int i = 0; i < result_EpisodeOfCare->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EpisodeOfCare->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(episodeOfCare, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EpisodeOfCare->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EpisodeOfCare->modifierExtension = PushArray(arena, Extension, result_EpisodeOfCare->modifierExtension_count);
		for(int i = 0; i < result_EpisodeOfCare->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EpisodeOfCare->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(episodeOfCare, "identifier");
	if(cjson_identifier)
	{
		result_EpisodeOfCare->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_EpisodeOfCare->identifier = PushArray(arena, Identifier, result_EpisodeOfCare->identifier_count);
		for(int i = 0; i < result_EpisodeOfCare->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_EpisodeOfCare->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(episodeOfCare, "status");
	if(cjson_status)
	{
		result_EpisodeOfCare->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusHistory =  cJSON_GetObjectItem(episodeOfCare, "statusHistory");
	if(cjson_statusHistory)
	{
		result_EpisodeOfCare->statusHistory_count = cJSON_GetArraySize(cjson_statusHistory);
		result_EpisodeOfCare->statusHistory = PushArray(arena, EpisodeOfCare_StatusHistory, result_EpisodeOfCare->statusHistory_count);
		for(int i = 0; i < result_EpisodeOfCare->statusHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_statusHistory, i);
			result_EpisodeOfCare->statusHistory[i] = *Deserialize_EpisodeOfCare_StatusHistory(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(episodeOfCare, "type");
	if(cjson_type)
	{
		result_EpisodeOfCare->type_count = cJSON_GetArraySize(cjson_type);
		result_EpisodeOfCare->type = PushArray(arena, CodeableConcept, result_EpisodeOfCare->type_count);
		for(int i = 0; i < result_EpisodeOfCare->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_EpisodeOfCare->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_diagnosis =  cJSON_GetObjectItem(episodeOfCare, "diagnosis");
	if(cjson_diagnosis)
	{
		result_EpisodeOfCare->diagnosis_count = cJSON_GetArraySize(cjson_diagnosis);
		result_EpisodeOfCare->diagnosis = PushArray(arena, EpisodeOfCare_Diagnosis, result_EpisodeOfCare->diagnosis_count);
		for(int i = 0; i < result_EpisodeOfCare->diagnosis_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_diagnosis, i);
			result_EpisodeOfCare->diagnosis[i] = *Deserialize_EpisodeOfCare_Diagnosis(arena, internal);
		}

	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(episodeOfCare, "patient");
	if(cjson_patient)
	{
		result_EpisodeOfCare->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_managingOrganization =  cJSON_GetObjectItem(episodeOfCare, "managingOrganization");
	if(cjson_managingOrganization)
	{
		result_EpisodeOfCare->managingOrganization = Deserialize_Reference(arena, cjson_managingOrganization);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(episodeOfCare, "period");
	if(cjson_period)
	{
		result_EpisodeOfCare->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_referralRequest =  cJSON_GetObjectItem(episodeOfCare, "referralRequest");
	if(cjson_referralRequest)
	{
		result_EpisodeOfCare->referralRequest_count = cJSON_GetArraySize(cjson_referralRequest);
		result_EpisodeOfCare->referralRequest = PushArray(arena, Reference, result_EpisodeOfCare->referralRequest_count);
		for(int i = 0; i < result_EpisodeOfCare->referralRequest_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referralRequest, i);
			result_EpisodeOfCare->referralRequest[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_careManager =  cJSON_GetObjectItem(episodeOfCare, "careManager");
	if(cjson_careManager)
	{
		result_EpisodeOfCare->careManager = Deserialize_Reference(arena, cjson_careManager);
	}
	cJSON *cjson_team =  cJSON_GetObjectItem(episodeOfCare, "team");
	if(cjson_team)
	{
		result_EpisodeOfCare->team_count = cJSON_GetArraySize(cjson_team);
		result_EpisodeOfCare->team = PushArray(arena, Reference, result_EpisodeOfCare->team_count);
		for(int i = 0; i < result_EpisodeOfCare->team_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_team, i);
			result_EpisodeOfCare->team[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_account =  cJSON_GetObjectItem(episodeOfCare, "account");
	if(cjson_account)
	{
		result_EpisodeOfCare->account_count = cJSON_GetArraySize(cjson_account);
		result_EpisodeOfCare->account = PushArray(arena, Reference, result_EpisodeOfCare->account_count);
		for(int i = 0; i < result_EpisodeOfCare->account_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_account, i);
			result_EpisodeOfCare->account[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_EpisodeOfCare;
}

EpisodeOfCare_StatusHistory*
Deserialize_EpisodeOfCare_StatusHistory(Arena *arena, cJSON *episodeOfCare_StatusHistory)
{
	EpisodeOfCare_StatusHistory *result_EpisodeOfCare_StatusHistory = PushArray(arena, EpisodeOfCare_StatusHistory, 1);
	result_EpisodeOfCare_StatusHistory->resourceType = ResourceType::EpisodeOfCare_StatusHistory;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(episodeOfCare_StatusHistory, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(episodeOfCare_StatusHistory, "id");
	if(cjson_id)
	{
		result_EpisodeOfCare_StatusHistory->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(episodeOfCare_StatusHistory, "extension");
	if(cjson_extension)
	{
		result_EpisodeOfCare_StatusHistory->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EpisodeOfCare_StatusHistory->extension = PushArray(arena, Extension, result_EpisodeOfCare_StatusHistory->extension_count);
		for(int i = 0; i < result_EpisodeOfCare_StatusHistory->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EpisodeOfCare_StatusHistory->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(episodeOfCare_StatusHistory, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EpisodeOfCare_StatusHistory->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EpisodeOfCare_StatusHistory->modifierExtension = PushArray(arena, Extension, result_EpisodeOfCare_StatusHistory->modifierExtension_count);
		for(int i = 0; i < result_EpisodeOfCare_StatusHistory->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EpisodeOfCare_StatusHistory->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(episodeOfCare_StatusHistory, "status");
	if(cjson_status)
	{
		result_EpisodeOfCare_StatusHistory->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(episodeOfCare_StatusHistory, "period");
	if(cjson_period)
	{
		result_EpisodeOfCare_StatusHistory->period = Deserialize_Period(arena, cjson_period);
	}
	return result_EpisodeOfCare_StatusHistory;
}

EpisodeOfCare_Diagnosis*
Deserialize_EpisodeOfCare_Diagnosis(Arena *arena, cJSON *episodeOfCare_Diagnosis)
{
	EpisodeOfCare_Diagnosis *result_EpisodeOfCare_Diagnosis = PushArray(arena, EpisodeOfCare_Diagnosis, 1);
	result_EpisodeOfCare_Diagnosis->resourceType = ResourceType::EpisodeOfCare_Diagnosis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(episodeOfCare_Diagnosis, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(episodeOfCare_Diagnosis, "id");
	if(cjson_id)
	{
		result_EpisodeOfCare_Diagnosis->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(episodeOfCare_Diagnosis, "extension");
	if(cjson_extension)
	{
		result_EpisodeOfCare_Diagnosis->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EpisodeOfCare_Diagnosis->extension = PushArray(arena, Extension, result_EpisodeOfCare_Diagnosis->extension_count);
		for(int i = 0; i < result_EpisodeOfCare_Diagnosis->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EpisodeOfCare_Diagnosis->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(episodeOfCare_Diagnosis, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EpisodeOfCare_Diagnosis->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EpisodeOfCare_Diagnosis->modifierExtension = PushArray(arena, Extension, result_EpisodeOfCare_Diagnosis->modifierExtension_count);
		for(int i = 0; i < result_EpisodeOfCare_Diagnosis->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EpisodeOfCare_Diagnosis->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(episodeOfCare_Diagnosis, "condition");
	if(cjson_condition)
	{
		result_EpisodeOfCare_Diagnosis->condition = Deserialize_Reference(arena, cjson_condition);
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(episodeOfCare_Diagnosis, "role");
	if(cjson_role)
	{
		result_EpisodeOfCare_Diagnosis->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	cJSON *cjson_rank =  cJSON_GetObjectItem(episodeOfCare_Diagnosis, "rank");
	if(cjson_rank)
	{
		result_EpisodeOfCare_Diagnosis->rank = (int)cJSON_GetNumberValue(cjson_rank);
	}
	return result_EpisodeOfCare_Diagnosis;
}

EventDefinition*
Deserialize_EventDefinition(Arena *arena, cJSON *eventDefinition)
{
	EventDefinition *result_EventDefinition = PushArray(arena, EventDefinition, 1);
	result_EventDefinition->resourceType = ResourceType::EventDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(eventDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(eventDefinition, "id");
	if(cjson_id)
	{
		result_EventDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(eventDefinition, "meta");
	if(cjson_meta)
	{
		result_EventDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(eventDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_EventDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(eventDefinition, "language");
	if(cjson_language)
	{
		result_EventDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(eventDefinition, "text");
	if(cjson_text)
	{
		result_EventDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(eventDefinition, "contained");
	if(cjson_contained)
	{
		result_EventDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_EventDefinition->contained = PushArray(arena, Resource, result_EventDefinition->contained_count);
		for(int i = 0; i < result_EventDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_EventDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(eventDefinition, "extension");
	if(cjson_extension)
	{
		result_EventDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EventDefinition->extension = PushArray(arena, Extension, result_EventDefinition->extension_count);
		for(int i = 0; i < result_EventDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EventDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(eventDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EventDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EventDefinition->modifierExtension = PushArray(arena, Extension, result_EventDefinition->modifierExtension_count);
		for(int i = 0; i < result_EventDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EventDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(eventDefinition, "url");
	if(cjson_url)
	{
		result_EventDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(eventDefinition, "identifier");
	if(cjson_identifier)
	{
		result_EventDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_EventDefinition->identifier = PushArray(arena, Identifier, result_EventDefinition->identifier_count);
		for(int i = 0; i < result_EventDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_EventDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(eventDefinition, "version");
	if(cjson_version)
	{
		result_EventDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(eventDefinition, "name");
	if(cjson_name)
	{
		result_EventDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(eventDefinition, "title");
	if(cjson_title)
	{
		result_EventDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(eventDefinition, "subtitle");
	if(cjson_subtitle)
	{
		result_EventDefinition->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(eventDefinition, "status");
	if(cjson_status)
	{
		result_EventDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(eventDefinition, "experimental");
	if(cjson_experimental)
	{
		result_EventDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	if((bool)cJSON_HasObjectItem(eventDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(eventDefinition, "valueCodeableConcept");
		result_EventDefinition->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_EventDefinition->subject_type = EventDefinition::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(eventDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(eventDefinition, "valueReference");
		result_EventDefinition->subject.valueReference = Deserialize_Reference(arena, item);
		result_EventDefinition->subject_type = EventDefinition::SubjectType::Reference;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(eventDefinition, "date");
	if(cjson_date)
	{
		result_EventDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(eventDefinition, "publisher");
	if(cjson_publisher)
	{
		result_EventDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(eventDefinition, "contact");
	if(cjson_contact)
	{
		result_EventDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_EventDefinition->contact = PushArray(arena, ContactDetail, result_EventDefinition->contact_count);
		for(int i = 0; i < result_EventDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_EventDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(eventDefinition, "description");
	if(cjson_description)
	{
		result_EventDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(eventDefinition, "useContext");
	if(cjson_useContext)
	{
		result_EventDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_EventDefinition->useContext = PushArray(arena, UsageContext, result_EventDefinition->useContext_count);
		for(int i = 0; i < result_EventDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_EventDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(eventDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_EventDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_EventDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_EventDefinition->jurisdiction_count);
		for(int i = 0; i < result_EventDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_EventDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(eventDefinition, "purpose");
	if(cjson_purpose)
	{
		result_EventDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(eventDefinition, "usage");
	if(cjson_usage)
	{
		result_EventDefinition->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(eventDefinition, "copyright");
	if(cjson_copyright)
	{
		result_EventDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(eventDefinition, "approvalDate");
	if(cjson_approvalDate)
	{
		result_EventDefinition->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(eventDefinition, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_EventDefinition->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(eventDefinition, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_EventDefinition->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(eventDefinition, "topic");
	if(cjson_topic)
	{
		result_EventDefinition->topic_count = cJSON_GetArraySize(cjson_topic);
		result_EventDefinition->topic = PushArray(arena, CodeableConcept, result_EventDefinition->topic_count);
		for(int i = 0; i < result_EventDefinition->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_EventDefinition->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(eventDefinition, "author");
	if(cjson_author)
	{
		result_EventDefinition->author_count = cJSON_GetArraySize(cjson_author);
		result_EventDefinition->author = PushArray(arena, ContactDetail, result_EventDefinition->author_count);
		for(int i = 0; i < result_EventDefinition->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_EventDefinition->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(eventDefinition, "editor");
	if(cjson_editor)
	{
		result_EventDefinition->editor_count = cJSON_GetArraySize(cjson_editor);
		result_EventDefinition->editor = PushArray(arena, ContactDetail, result_EventDefinition->editor_count);
		for(int i = 0; i < result_EventDefinition->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_EventDefinition->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(eventDefinition, "reviewer");
	if(cjson_reviewer)
	{
		result_EventDefinition->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_EventDefinition->reviewer = PushArray(arena, ContactDetail, result_EventDefinition->reviewer_count);
		for(int i = 0; i < result_EventDefinition->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_EventDefinition->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(eventDefinition, "endorser");
	if(cjson_endorser)
	{
		result_EventDefinition->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_EventDefinition->endorser = PushArray(arena, ContactDetail, result_EventDefinition->endorser_count);
		for(int i = 0; i < result_EventDefinition->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_EventDefinition->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(eventDefinition, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_EventDefinition->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_EventDefinition->relatedArtifact = PushArray(arena, RelatedArtifact, result_EventDefinition->relatedArtifact_count);
		for(int i = 0; i < result_EventDefinition->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_EventDefinition->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_trigger =  cJSON_GetObjectItem(eventDefinition, "trigger");
	if(cjson_trigger)
	{
		result_EventDefinition->trigger_count = cJSON_GetArraySize(cjson_trigger);
		result_EventDefinition->trigger = PushArray(arena, TriggerDefinition, result_EventDefinition->trigger_count);
		for(int i = 0; i < result_EventDefinition->trigger_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_trigger, i);
			result_EventDefinition->trigger[i] = *Deserialize_TriggerDefinition(arena, internal);
		}

	}
	return result_EventDefinition;
}

Evidence*
Deserialize_Evidence(Arena *arena, cJSON *evidence)
{
	Evidence *result_Evidence = PushArray(arena, Evidence, 1);
	result_Evidence->resourceType = ResourceType::Evidence;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(evidence, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(evidence, "id");
	if(cjson_id)
	{
		result_Evidence->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(evidence, "meta");
	if(cjson_meta)
	{
		result_Evidence->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(evidence, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Evidence->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(evidence, "language");
	if(cjson_language)
	{
		result_Evidence->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(evidence, "text");
	if(cjson_text)
	{
		result_Evidence->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(evidence, "contained");
	if(cjson_contained)
	{
		result_Evidence->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Evidence->contained = PushArray(arena, Resource, result_Evidence->contained_count);
		for(int i = 0; i < result_Evidence->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Evidence->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(evidence, "extension");
	if(cjson_extension)
	{
		result_Evidence->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Evidence->extension = PushArray(arena, Extension, result_Evidence->extension_count);
		for(int i = 0; i < result_Evidence->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Evidence->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(evidence, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Evidence->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Evidence->modifierExtension = PushArray(arena, Extension, result_Evidence->modifierExtension_count);
		for(int i = 0; i < result_Evidence->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Evidence->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(evidence, "url");
	if(cjson_url)
	{
		result_Evidence->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(evidence, "identifier");
	if(cjson_identifier)
	{
		result_Evidence->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Evidence->identifier = PushArray(arena, Identifier, result_Evidence->identifier_count);
		for(int i = 0; i < result_Evidence->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Evidence->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(evidence, "version");
	if(cjson_version)
	{
		result_Evidence->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(evidence, "name");
	if(cjson_name)
	{
		result_Evidence->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(evidence, "title");
	if(cjson_title)
	{
		result_Evidence->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_shortTitle =  cJSON_GetObjectItem(evidence, "shortTitle");
	if(cjson_shortTitle)
	{
		result_Evidence->shortTitle = Str8C(cJSON_GetStringValue(cjson_shortTitle));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(evidence, "subtitle");
	if(cjson_subtitle)
	{
		result_Evidence->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(evidence, "status");
	if(cjson_status)
	{
		result_Evidence->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(evidence, "date");
	if(cjson_date)
	{
		result_Evidence->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(evidence, "publisher");
	if(cjson_publisher)
	{
		result_Evidence->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(evidence, "contact");
	if(cjson_contact)
	{
		result_Evidence->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Evidence->contact = PushArray(arena, ContactDetail, result_Evidence->contact_count);
		for(int i = 0; i < result_Evidence->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Evidence->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(evidence, "description");
	if(cjson_description)
	{
		result_Evidence->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(evidence, "note");
	if(cjson_note)
	{
		result_Evidence->note_count = cJSON_GetArraySize(cjson_note);
		result_Evidence->note = PushArray(arena, Annotation, result_Evidence->note_count);
		for(int i = 0; i < result_Evidence->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Evidence->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(evidence, "useContext");
	if(cjson_useContext)
	{
		result_Evidence->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_Evidence->useContext = PushArray(arena, UsageContext, result_Evidence->useContext_count);
		for(int i = 0; i < result_Evidence->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_Evidence->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(evidence, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_Evidence->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_Evidence->jurisdiction = PushArray(arena, CodeableConcept, result_Evidence->jurisdiction_count);
		for(int i = 0; i < result_Evidence->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_Evidence->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(evidence, "copyright");
	if(cjson_copyright)
	{
		result_Evidence->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(evidence, "approvalDate");
	if(cjson_approvalDate)
	{
		result_Evidence->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(evidence, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_Evidence->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(evidence, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_Evidence->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(evidence, "topic");
	if(cjson_topic)
	{
		result_Evidence->topic_count = cJSON_GetArraySize(cjson_topic);
		result_Evidence->topic = PushArray(arena, CodeableConcept, result_Evidence->topic_count);
		for(int i = 0; i < result_Evidence->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_Evidence->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(evidence, "author");
	if(cjson_author)
	{
		result_Evidence->author_count = cJSON_GetArraySize(cjson_author);
		result_Evidence->author = PushArray(arena, ContactDetail, result_Evidence->author_count);
		for(int i = 0; i < result_Evidence->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_Evidence->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(evidence, "editor");
	if(cjson_editor)
	{
		result_Evidence->editor_count = cJSON_GetArraySize(cjson_editor);
		result_Evidence->editor = PushArray(arena, ContactDetail, result_Evidence->editor_count);
		for(int i = 0; i < result_Evidence->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_Evidence->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(evidence, "reviewer");
	if(cjson_reviewer)
	{
		result_Evidence->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_Evidence->reviewer = PushArray(arena, ContactDetail, result_Evidence->reviewer_count);
		for(int i = 0; i < result_Evidence->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_Evidence->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(evidence, "endorser");
	if(cjson_endorser)
	{
		result_Evidence->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_Evidence->endorser = PushArray(arena, ContactDetail, result_Evidence->endorser_count);
		for(int i = 0; i < result_Evidence->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_Evidence->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(evidence, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_Evidence->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_Evidence->relatedArtifact = PushArray(arena, RelatedArtifact, result_Evidence->relatedArtifact_count);
		for(int i = 0; i < result_Evidence->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_Evidence->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_exposureBackground =  cJSON_GetObjectItem(evidence, "exposureBackground");
	if(cjson_exposureBackground)
	{
		result_Evidence->exposureBackground = Deserialize_Reference(arena, cjson_exposureBackground);
	}
	cJSON *cjson_exposureVariant =  cJSON_GetObjectItem(evidence, "exposureVariant");
	if(cjson_exposureVariant)
	{
		result_Evidence->exposureVariant_count = cJSON_GetArraySize(cjson_exposureVariant);
		result_Evidence->exposureVariant = PushArray(arena, Reference, result_Evidence->exposureVariant_count);
		for(int i = 0; i < result_Evidence->exposureVariant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_exposureVariant, i);
			result_Evidence->exposureVariant[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(evidence, "outcome");
	if(cjson_outcome)
	{
		result_Evidence->outcome_count = cJSON_GetArraySize(cjson_outcome);
		result_Evidence->outcome = PushArray(arena, Reference, result_Evidence->outcome_count);
		for(int i = 0; i < result_Evidence->outcome_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_outcome, i);
			result_Evidence->outcome[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Evidence;
}

EvidenceVariable*
Deserialize_EvidenceVariable(Arena *arena, cJSON *evidenceVariable)
{
	EvidenceVariable *result_EvidenceVariable = PushArray(arena, EvidenceVariable, 1);
	result_EvidenceVariable->resourceType = ResourceType::EvidenceVariable;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(evidenceVariable, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(evidenceVariable, "id");
	if(cjson_id)
	{
		result_EvidenceVariable->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(evidenceVariable, "meta");
	if(cjson_meta)
	{
		result_EvidenceVariable->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(evidenceVariable, "implicitRules");
	if(cjson_implicitRules)
	{
		result_EvidenceVariable->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(evidenceVariable, "language");
	if(cjson_language)
	{
		result_EvidenceVariable->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(evidenceVariable, "text");
	if(cjson_text)
	{
		result_EvidenceVariable->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(evidenceVariable, "contained");
	if(cjson_contained)
	{
		result_EvidenceVariable->contained_count = cJSON_GetArraySize(cjson_contained);
		result_EvidenceVariable->contained = PushArray(arena, Resource, result_EvidenceVariable->contained_count);
		for(int i = 0; i < result_EvidenceVariable->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_EvidenceVariable->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(evidenceVariable, "extension");
	if(cjson_extension)
	{
		result_EvidenceVariable->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EvidenceVariable->extension = PushArray(arena, Extension, result_EvidenceVariable->extension_count);
		for(int i = 0; i < result_EvidenceVariable->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EvidenceVariable->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(evidenceVariable, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EvidenceVariable->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EvidenceVariable->modifierExtension = PushArray(arena, Extension, result_EvidenceVariable->modifierExtension_count);
		for(int i = 0; i < result_EvidenceVariable->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EvidenceVariable->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(evidenceVariable, "url");
	if(cjson_url)
	{
		result_EvidenceVariable->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(evidenceVariable, "identifier");
	if(cjson_identifier)
	{
		result_EvidenceVariable->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_EvidenceVariable->identifier = PushArray(arena, Identifier, result_EvidenceVariable->identifier_count);
		for(int i = 0; i < result_EvidenceVariable->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_EvidenceVariable->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(evidenceVariable, "version");
	if(cjson_version)
	{
		result_EvidenceVariable->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(evidenceVariable, "name");
	if(cjson_name)
	{
		result_EvidenceVariable->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(evidenceVariable, "title");
	if(cjson_title)
	{
		result_EvidenceVariable->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_shortTitle =  cJSON_GetObjectItem(evidenceVariable, "shortTitle");
	if(cjson_shortTitle)
	{
		result_EvidenceVariable->shortTitle = Str8C(cJSON_GetStringValue(cjson_shortTitle));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(evidenceVariable, "subtitle");
	if(cjson_subtitle)
	{
		result_EvidenceVariable->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(evidenceVariable, "status");
	if(cjson_status)
	{
		result_EvidenceVariable->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(evidenceVariable, "date");
	if(cjson_date)
	{
		result_EvidenceVariable->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(evidenceVariable, "publisher");
	if(cjson_publisher)
	{
		result_EvidenceVariable->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(evidenceVariable, "contact");
	if(cjson_contact)
	{
		result_EvidenceVariable->contact_count = cJSON_GetArraySize(cjson_contact);
		result_EvidenceVariable->contact = PushArray(arena, ContactDetail, result_EvidenceVariable->contact_count);
		for(int i = 0; i < result_EvidenceVariable->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_EvidenceVariable->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(evidenceVariable, "description");
	if(cjson_description)
	{
		result_EvidenceVariable->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(evidenceVariable, "note");
	if(cjson_note)
	{
		result_EvidenceVariable->note_count = cJSON_GetArraySize(cjson_note);
		result_EvidenceVariable->note = PushArray(arena, Annotation, result_EvidenceVariable->note_count);
		for(int i = 0; i < result_EvidenceVariable->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_EvidenceVariable->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(evidenceVariable, "useContext");
	if(cjson_useContext)
	{
		result_EvidenceVariable->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_EvidenceVariable->useContext = PushArray(arena, UsageContext, result_EvidenceVariable->useContext_count);
		for(int i = 0; i < result_EvidenceVariable->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_EvidenceVariable->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(evidenceVariable, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_EvidenceVariable->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_EvidenceVariable->jurisdiction = PushArray(arena, CodeableConcept, result_EvidenceVariable->jurisdiction_count);
		for(int i = 0; i < result_EvidenceVariable->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_EvidenceVariable->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(evidenceVariable, "copyright");
	if(cjson_copyright)
	{
		result_EvidenceVariable->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(evidenceVariable, "approvalDate");
	if(cjson_approvalDate)
	{
		result_EvidenceVariable->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(evidenceVariable, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_EvidenceVariable->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(evidenceVariable, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_EvidenceVariable->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(evidenceVariable, "topic");
	if(cjson_topic)
	{
		result_EvidenceVariable->topic_count = cJSON_GetArraySize(cjson_topic);
		result_EvidenceVariable->topic = PushArray(arena, CodeableConcept, result_EvidenceVariable->topic_count);
		for(int i = 0; i < result_EvidenceVariable->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_EvidenceVariable->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(evidenceVariable, "author");
	if(cjson_author)
	{
		result_EvidenceVariable->author_count = cJSON_GetArraySize(cjson_author);
		result_EvidenceVariable->author = PushArray(arena, ContactDetail, result_EvidenceVariable->author_count);
		for(int i = 0; i < result_EvidenceVariable->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_EvidenceVariable->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(evidenceVariable, "editor");
	if(cjson_editor)
	{
		result_EvidenceVariable->editor_count = cJSON_GetArraySize(cjson_editor);
		result_EvidenceVariable->editor = PushArray(arena, ContactDetail, result_EvidenceVariable->editor_count);
		for(int i = 0; i < result_EvidenceVariable->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_EvidenceVariable->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(evidenceVariable, "reviewer");
	if(cjson_reviewer)
	{
		result_EvidenceVariable->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_EvidenceVariable->reviewer = PushArray(arena, ContactDetail, result_EvidenceVariable->reviewer_count);
		for(int i = 0; i < result_EvidenceVariable->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_EvidenceVariable->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(evidenceVariable, "endorser");
	if(cjson_endorser)
	{
		result_EvidenceVariable->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_EvidenceVariable->endorser = PushArray(arena, ContactDetail, result_EvidenceVariable->endorser_count);
		for(int i = 0; i < result_EvidenceVariable->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_EvidenceVariable->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(evidenceVariable, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_EvidenceVariable->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_EvidenceVariable->relatedArtifact = PushArray(arena, RelatedArtifact, result_EvidenceVariable->relatedArtifact_count);
		for(int i = 0; i < result_EvidenceVariable->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_EvidenceVariable->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(evidenceVariable, "type");
	if(cjson_type)
	{
		result_EvidenceVariable->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_characteristic =  cJSON_GetObjectItem(evidenceVariable, "characteristic");
	if(cjson_characteristic)
	{
		result_EvidenceVariable->characteristic_count = cJSON_GetArraySize(cjson_characteristic);
		result_EvidenceVariable->characteristic = PushArray(arena, EvidenceVariable_Characteristic, result_EvidenceVariable->characteristic_count);
		for(int i = 0; i < result_EvidenceVariable->characteristic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_characteristic, i);
			result_EvidenceVariable->characteristic[i] = *Deserialize_EvidenceVariable_Characteristic(arena, internal);
		}

	}
	return result_EvidenceVariable;
}

EvidenceVariable_Characteristic*
Deserialize_EvidenceVariable_Characteristic(Arena *arena, cJSON *evidenceVariable_Characteristic)
{
	EvidenceVariable_Characteristic *result_EvidenceVariable_Characteristic = PushArray(arena, EvidenceVariable_Characteristic, 1);
	result_EvidenceVariable_Characteristic->resourceType = ResourceType::EvidenceVariable_Characteristic;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "id");
	if(cjson_id)
	{
		result_EvidenceVariable_Characteristic->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "extension");
	if(cjson_extension)
	{
		result_EvidenceVariable_Characteristic->extension_count = cJSON_GetArraySize(cjson_extension);
		result_EvidenceVariable_Characteristic->extension = PushArray(arena, Extension, result_EvidenceVariable_Characteristic->extension_count);
		for(int i = 0; i < result_EvidenceVariable_Characteristic->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_EvidenceVariable_Characteristic->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_EvidenceVariable_Characteristic->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_EvidenceVariable_Characteristic->modifierExtension = PushArray(arena, Extension, result_EvidenceVariable_Characteristic->modifierExtension_count);
		for(int i = 0; i < result_EvidenceVariable_Characteristic->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_EvidenceVariable_Characteristic->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "description");
	if(cjson_description)
	{
		result_EvidenceVariable_Characteristic->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueReference");
		result_EvidenceVariable_Characteristic->definition.valueReference = Deserialize_Reference(arena, item);
		result_EvidenceVariable_Characteristic->definition_type = EvidenceVariable_Characteristic::DefinitionType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueCanonical");
		result_EvidenceVariable_Characteristic->definition.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_EvidenceVariable_Characteristic->definition_type = EvidenceVariable_Characteristic::DefinitionType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueCodeableConcept");
		result_EvidenceVariable_Characteristic->definition.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_EvidenceVariable_Characteristic->definition_type = EvidenceVariable_Characteristic::DefinitionType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueExpression");
		result_EvidenceVariable_Characteristic->definition.valueExpression = Deserialize_Expression(arena, item);
		result_EvidenceVariable_Characteristic->definition_type = EvidenceVariable_Characteristic::DefinitionType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueDataRequirement");
		result_EvidenceVariable_Characteristic->definition.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_EvidenceVariable_Characteristic->definition_type = EvidenceVariable_Characteristic::DefinitionType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueTriggerDefinition");
		result_EvidenceVariable_Characteristic->definition.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_EvidenceVariable_Characteristic->definition_type = EvidenceVariable_Characteristic::DefinitionType::TriggerDefinition;
	}


	cJSON *cjson_usageContext =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "usageContext");
	if(cjson_usageContext)
	{
		result_EvidenceVariable_Characteristic->usageContext_count = cJSON_GetArraySize(cjson_usageContext);
		result_EvidenceVariable_Characteristic->usageContext = PushArray(arena, UsageContext, result_EvidenceVariable_Characteristic->usageContext_count);
		for(int i = 0; i < result_EvidenceVariable_Characteristic->usageContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_usageContext, i);
			result_EvidenceVariable_Characteristic->usageContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_exclude =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "exclude");
	if(cjson_exclude)
	{
		result_EvidenceVariable_Characteristic->exclude = (boolean)cJSON_IsTrue(cjson_exclude);
	}
	if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueDateTime");
		result_EvidenceVariable_Characteristic->participantEffective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_EvidenceVariable_Characteristic->participantEffective_type = EvidenceVariable_Characteristic::ParticipantEffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valuePeriod");
		result_EvidenceVariable_Characteristic->participantEffective.valuePeriod = Deserialize_Period(arena, item);
		result_EvidenceVariable_Characteristic->participantEffective_type = EvidenceVariable_Characteristic::ParticipantEffectiveType::Period;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueDuration");
		result_EvidenceVariable_Characteristic->participantEffective.valueDuration = Deserialize_Duration(arena, item);
		result_EvidenceVariable_Characteristic->participantEffective_type = EvidenceVariable_Characteristic::ParticipantEffectiveType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(evidenceVariable_Characteristic, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(evidenceVariable_Characteristic, "valueTiming");
		result_EvidenceVariable_Characteristic->participantEffective.valueTiming = Deserialize_Timing(arena, item);
		result_EvidenceVariable_Characteristic->participantEffective_type = EvidenceVariable_Characteristic::ParticipantEffectiveType::Timing;
	}


	cJSON *cjson_timeFromStart =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "timeFromStart");
	if(cjson_timeFromStart)
	{
		result_EvidenceVariable_Characteristic->timeFromStart = Deserialize_Duration(arena, cjson_timeFromStart);
	}
	cJSON *cjson_groupMeasure =  cJSON_GetObjectItem(evidenceVariable_Characteristic, "groupMeasure");
	if(cjson_groupMeasure)
	{
		result_EvidenceVariable_Characteristic->groupMeasure = Str8C(cJSON_GetStringValue(cjson_groupMeasure));
	}
	return result_EvidenceVariable_Characteristic;
}

ExampleScenario*
Deserialize_ExampleScenario(Arena *arena, cJSON *exampleScenario)
{
	ExampleScenario *result_ExampleScenario = PushArray(arena, ExampleScenario, 1);
	result_ExampleScenario->resourceType = ResourceType::ExampleScenario;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario, "id");
	if(cjson_id)
	{
		result_ExampleScenario->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(exampleScenario, "meta");
	if(cjson_meta)
	{
		result_ExampleScenario->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(exampleScenario, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ExampleScenario->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(exampleScenario, "language");
	if(cjson_language)
	{
		result_ExampleScenario->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(exampleScenario, "text");
	if(cjson_text)
	{
		result_ExampleScenario->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(exampleScenario, "contained");
	if(cjson_contained)
	{
		result_ExampleScenario->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ExampleScenario->contained = PushArray(arena, Resource, result_ExampleScenario->contained_count);
		for(int i = 0; i < result_ExampleScenario->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ExampleScenario->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario->extension = PushArray(arena, Extension, result_ExampleScenario->extension_count);
		for(int i = 0; i < result_ExampleScenario->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario->modifierExtension = PushArray(arena, Extension, result_ExampleScenario->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(exampleScenario, "url");
	if(cjson_url)
	{
		result_ExampleScenario->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(exampleScenario, "identifier");
	if(cjson_identifier)
	{
		result_ExampleScenario->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ExampleScenario->identifier = PushArray(arena, Identifier, result_ExampleScenario->identifier_count);
		for(int i = 0; i < result_ExampleScenario->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ExampleScenario->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(exampleScenario, "version");
	if(cjson_version)
	{
		result_ExampleScenario->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(exampleScenario, "name");
	if(cjson_name)
	{
		result_ExampleScenario->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(exampleScenario, "status");
	if(cjson_status)
	{
		result_ExampleScenario->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(exampleScenario, "experimental");
	if(cjson_experimental)
	{
		result_ExampleScenario->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(exampleScenario, "date");
	if(cjson_date)
	{
		result_ExampleScenario->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(exampleScenario, "publisher");
	if(cjson_publisher)
	{
		result_ExampleScenario->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(exampleScenario, "contact");
	if(cjson_contact)
	{
		result_ExampleScenario->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ExampleScenario->contact = PushArray(arena, ContactDetail, result_ExampleScenario->contact_count);
		for(int i = 0; i < result_ExampleScenario->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ExampleScenario->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(exampleScenario, "useContext");
	if(cjson_useContext)
	{
		result_ExampleScenario->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ExampleScenario->useContext = PushArray(arena, UsageContext, result_ExampleScenario->useContext_count);
		for(int i = 0; i < result_ExampleScenario->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ExampleScenario->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(exampleScenario, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ExampleScenario->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ExampleScenario->jurisdiction = PushArray(arena, CodeableConcept, result_ExampleScenario->jurisdiction_count);
		for(int i = 0; i < result_ExampleScenario->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ExampleScenario->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(exampleScenario, "copyright");
	if(cjson_copyright)
	{
		result_ExampleScenario->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(exampleScenario, "purpose");
	if(cjson_purpose)
	{
		result_ExampleScenario->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(exampleScenario, "actor");
	if(cjson_actor)
	{
		result_ExampleScenario->actor_count = cJSON_GetArraySize(cjson_actor);
		result_ExampleScenario->actor = PushArray(arena, ExampleScenario_Actor, result_ExampleScenario->actor_count);
		for(int i = 0; i < result_ExampleScenario->actor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_actor, i);
			result_ExampleScenario->actor[i] = *Deserialize_ExampleScenario_Actor(arena, internal);
		}

	}
	cJSON *cjson_instance =  cJSON_GetObjectItem(exampleScenario, "instance");
	if(cjson_instance)
	{
		result_ExampleScenario->instance_count = cJSON_GetArraySize(cjson_instance);
		result_ExampleScenario->instance = PushArray(arena, ExampleScenario_Instance, result_ExampleScenario->instance_count);
		for(int i = 0; i < result_ExampleScenario->instance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instance, i);
			result_ExampleScenario->instance[i] = *Deserialize_ExampleScenario_Instance(arena, internal);
		}

	}
	cJSON *cjson_process =  cJSON_GetObjectItem(exampleScenario, "process");
	if(cjson_process)
	{
		result_ExampleScenario->process_count = cJSON_GetArraySize(cjson_process);
		result_ExampleScenario->process = PushArray(arena, ExampleScenario_Process, result_ExampleScenario->process_count);
		for(int i = 0; i < result_ExampleScenario->process_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_process, i);
			result_ExampleScenario->process[i] = *Deserialize_ExampleScenario_Process(arena, internal);
		}

	}
	cJSON *cjson_workflow =  cJSON_GetObjectItem(exampleScenario, "workflow");
	if(cjson_workflow)
	{
		result_ExampleScenario->workflow_count = cJSON_GetArraySize(cjson_workflow);
		result_ExampleScenario->workflow = PushArray(arena, fhir_canonical, result_ExampleScenario->workflow_count);
		for(int i = 0; i < result_ExampleScenario->workflow_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_workflow, i);
			result_ExampleScenario->workflow[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_ExampleScenario;
}

ExampleScenario_Actor*
Deserialize_ExampleScenario_Actor(Arena *arena, cJSON *exampleScenario_Actor)
{
	ExampleScenario_Actor *result_ExampleScenario_Actor = PushArray(arena, ExampleScenario_Actor, 1);
	result_ExampleScenario_Actor->resourceType = ResourceType::ExampleScenario_Actor;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Actor, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Actor, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Actor->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Actor, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Actor->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Actor->extension = PushArray(arena, Extension, result_ExampleScenario_Actor->extension_count);
		for(int i = 0; i < result_ExampleScenario_Actor->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Actor->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Actor, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Actor->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Actor->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Actor->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Actor->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Actor->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_actorId =  cJSON_GetObjectItem(exampleScenario_Actor, "actorId");
	if(cjson_actorId)
	{
		result_ExampleScenario_Actor->actorId = Str8C(cJSON_GetStringValue(cjson_actorId));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(exampleScenario_Actor, "type");
	if(cjson_type)
	{
		result_ExampleScenario_Actor->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(exampleScenario_Actor, "name");
	if(cjson_name)
	{
		result_ExampleScenario_Actor->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(exampleScenario_Actor, "description");
	if(cjson_description)
	{
		result_ExampleScenario_Actor->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_ExampleScenario_Actor;
}

ExampleScenario_Instance*
Deserialize_ExampleScenario_Instance(Arena *arena, cJSON *exampleScenario_Instance)
{
	ExampleScenario_Instance *result_ExampleScenario_Instance = PushArray(arena, ExampleScenario_Instance, 1);
	result_ExampleScenario_Instance->resourceType = ResourceType::ExampleScenario_Instance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Instance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Instance, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Instance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Instance, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Instance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Instance->extension = PushArray(arena, Extension, result_ExampleScenario_Instance->extension_count);
		for(int i = 0; i < result_ExampleScenario_Instance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Instance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Instance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Instance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Instance->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Instance->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Instance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Instance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_resourceId =  cJSON_GetObjectItem(exampleScenario_Instance, "resourceId");
	if(cjson_resourceId)
	{
		result_ExampleScenario_Instance->resourceId = Str8C(cJSON_GetStringValue(cjson_resourceId));
	}
	cJSON *cjson_resourceType_ =  cJSON_GetObjectItem(exampleScenario_Instance, "resourceType_");
	if(cjson_resourceType_)
	{
		result_ExampleScenario_Instance->resourceType_ = Str8C(cJSON_GetStringValue(cjson_resourceType_));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(exampleScenario_Instance, "name");
	if(cjson_name)
	{
		result_ExampleScenario_Instance->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(exampleScenario_Instance, "description");
	if(cjson_description)
	{
		result_ExampleScenario_Instance->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(exampleScenario_Instance, "version");
	if(cjson_version)
	{
		result_ExampleScenario_Instance->version_count = cJSON_GetArraySize(cjson_version);
		result_ExampleScenario_Instance->version = PushArray(arena, ExampleScenario_Instance_Version, result_ExampleScenario_Instance->version_count);
		for(int i = 0; i < result_ExampleScenario_Instance->version_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_version, i);
			result_ExampleScenario_Instance->version[i] = *Deserialize_ExampleScenario_Instance_Version(arena, internal);
		}

	}
	cJSON *cjson_containedInstance =  cJSON_GetObjectItem(exampleScenario_Instance, "containedInstance");
	if(cjson_containedInstance)
	{
		result_ExampleScenario_Instance->containedInstance_count = cJSON_GetArraySize(cjson_containedInstance);
		result_ExampleScenario_Instance->containedInstance = PushArray(arena, ExampleScenario_Instance_ContainedInstance, result_ExampleScenario_Instance->containedInstance_count);
		for(int i = 0; i < result_ExampleScenario_Instance->containedInstance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_containedInstance, i);
			result_ExampleScenario_Instance->containedInstance[i] = *Deserialize_ExampleScenario_Instance_ContainedInstance(arena, internal);
		}

	}
	return result_ExampleScenario_Instance;
}

ExampleScenario_Instance_Version*
Deserialize_ExampleScenario_Instance_Version(Arena *arena, cJSON *exampleScenario_Instance_Version)
{
	ExampleScenario_Instance_Version *result_ExampleScenario_Instance_Version = PushArray(arena, ExampleScenario_Instance_Version, 1);
	result_ExampleScenario_Instance_Version->resourceType = ResourceType::ExampleScenario_Instance_Version;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Instance_Version, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Instance_Version, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Instance_Version->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Instance_Version, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Instance_Version->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Instance_Version->extension = PushArray(arena, Extension, result_ExampleScenario_Instance_Version->extension_count);
		for(int i = 0; i < result_ExampleScenario_Instance_Version->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Instance_Version->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Instance_Version, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Instance_Version->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Instance_Version->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Instance_Version->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Instance_Version->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Instance_Version->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_versionId =  cJSON_GetObjectItem(exampleScenario_Instance_Version, "versionId");
	if(cjson_versionId)
	{
		result_ExampleScenario_Instance_Version->versionId = Str8C(cJSON_GetStringValue(cjson_versionId));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(exampleScenario_Instance_Version, "description");
	if(cjson_description)
	{
		result_ExampleScenario_Instance_Version->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_ExampleScenario_Instance_Version;
}

ExampleScenario_Instance_ContainedInstance*
Deserialize_ExampleScenario_Instance_ContainedInstance(Arena *arena, cJSON *exampleScenario_Instance_ContainedInstance)
{
	ExampleScenario_Instance_ContainedInstance *result_ExampleScenario_Instance_ContainedInstance = PushArray(arena, ExampleScenario_Instance_ContainedInstance, 1);
	result_ExampleScenario_Instance_ContainedInstance->resourceType = ResourceType::ExampleScenario_Instance_ContainedInstance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Instance_ContainedInstance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Instance_ContainedInstance, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Instance_ContainedInstance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Instance_ContainedInstance, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Instance_ContainedInstance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Instance_ContainedInstance->extension = PushArray(arena, Extension, result_ExampleScenario_Instance_ContainedInstance->extension_count);
		for(int i = 0; i < result_ExampleScenario_Instance_ContainedInstance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Instance_ContainedInstance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Instance_ContainedInstance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Instance_ContainedInstance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Instance_ContainedInstance->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Instance_ContainedInstance->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Instance_ContainedInstance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Instance_ContainedInstance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_resourceId =  cJSON_GetObjectItem(exampleScenario_Instance_ContainedInstance, "resourceId");
	if(cjson_resourceId)
	{
		result_ExampleScenario_Instance_ContainedInstance->resourceId = Str8C(cJSON_GetStringValue(cjson_resourceId));
	}
	cJSON *cjson_versionId =  cJSON_GetObjectItem(exampleScenario_Instance_ContainedInstance, "versionId");
	if(cjson_versionId)
	{
		result_ExampleScenario_Instance_ContainedInstance->versionId = Str8C(cJSON_GetStringValue(cjson_versionId));
	}
	return result_ExampleScenario_Instance_ContainedInstance;
}

ExampleScenario_Process*
Deserialize_ExampleScenario_Process(Arena *arena, cJSON *exampleScenario_Process)
{
	ExampleScenario_Process *result_ExampleScenario_Process = PushArray(arena, ExampleScenario_Process, 1);
	result_ExampleScenario_Process->resourceType = ResourceType::ExampleScenario_Process;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Process, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Process, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Process->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Process, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Process->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Process->extension = PushArray(arena, Extension, result_ExampleScenario_Process->extension_count);
		for(int i = 0; i < result_ExampleScenario_Process->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Process->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Process, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Process->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Process->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Process->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Process->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Process->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_title =  cJSON_GetObjectItem(exampleScenario_Process, "title");
	if(cjson_title)
	{
		result_ExampleScenario_Process->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(exampleScenario_Process, "description");
	if(cjson_description)
	{
		result_ExampleScenario_Process->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_preConditions =  cJSON_GetObjectItem(exampleScenario_Process, "preConditions");
	if(cjson_preConditions)
	{
		result_ExampleScenario_Process->preConditions = Str8C(cJSON_GetStringValue(cjson_preConditions));
	}
	cJSON *cjson_postConditions =  cJSON_GetObjectItem(exampleScenario_Process, "postConditions");
	if(cjson_postConditions)
	{
		result_ExampleScenario_Process->postConditions = Str8C(cJSON_GetStringValue(cjson_postConditions));
	}
	cJSON *cjson_step =  cJSON_GetObjectItem(exampleScenario_Process, "step");
	if(cjson_step)
	{
		result_ExampleScenario_Process->step_count = cJSON_GetArraySize(cjson_step);
		result_ExampleScenario_Process->step = PushArray(arena, ExampleScenario_Process_Step, result_ExampleScenario_Process->step_count);
		for(int i = 0; i < result_ExampleScenario_Process->step_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_step, i);
			result_ExampleScenario_Process->step[i] = *Deserialize_ExampleScenario_Process_Step(arena, internal);
		}

	}
	return result_ExampleScenario_Process;
}

ExampleScenario_Process_Step*
Deserialize_ExampleScenario_Process_Step(Arena *arena, cJSON *exampleScenario_Process_Step)
{
	ExampleScenario_Process_Step *result_ExampleScenario_Process_Step = PushArray(arena, ExampleScenario_Process_Step, 1);
	result_ExampleScenario_Process_Step->resourceType = ResourceType::ExampleScenario_Process_Step;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Process_Step, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Process_Step, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Process_Step->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Process_Step, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Process_Step->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Process_Step->extension = PushArray(arena, Extension, result_ExampleScenario_Process_Step->extension_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Process_Step->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Process_Step, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Process_Step->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Process_Step->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Process_Step->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Process_Step->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_process =  cJSON_GetObjectItem(exampleScenario_Process_Step, "process");
	if(cjson_process)
	{
		result_ExampleScenario_Process_Step->process_count = cJSON_GetArraySize(cjson_process);
		result_ExampleScenario_Process_Step->process = PushArray(arena, ExampleScenario_Process, result_ExampleScenario_Process_Step->process_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step->process_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_process, i);
			result_ExampleScenario_Process_Step->process[i] = *Deserialize_ExampleScenario_Process(arena, internal);
		}

	}
	cJSON *cjson_pause =  cJSON_GetObjectItem(exampleScenario_Process_Step, "pause");
	if(cjson_pause)
	{
		result_ExampleScenario_Process_Step->pause = (boolean)cJSON_IsTrue(cjson_pause);
	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(exampleScenario_Process_Step, "operation");
	if(cjson_operation)
	{
		result_ExampleScenario_Process_Step->operation = Deserialize_ExampleScenario_Process_Step_Operation(arena, cjson_operation);
	}
	cJSON *cjson_alternative =  cJSON_GetObjectItem(exampleScenario_Process_Step, "alternative");
	if(cjson_alternative)
	{
		result_ExampleScenario_Process_Step->alternative_count = cJSON_GetArraySize(cjson_alternative);
		result_ExampleScenario_Process_Step->alternative = PushArray(arena, ExampleScenario_Process_Step_Alternative, result_ExampleScenario_Process_Step->alternative_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step->alternative_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_alternative, i);
			result_ExampleScenario_Process_Step->alternative[i] = *Deserialize_ExampleScenario_Process_Step_Alternative(arena, internal);
		}

	}
	return result_ExampleScenario_Process_Step;
}

ExampleScenario_Process_Step_Operation*
Deserialize_ExampleScenario_Process_Step_Operation(Arena *arena, cJSON *exampleScenario_Process_Step_Operation)
{
	ExampleScenario_Process_Step_Operation *result_ExampleScenario_Process_Step_Operation = PushArray(arena, ExampleScenario_Process_Step_Operation, 1);
	result_ExampleScenario_Process_Step_Operation->resourceType = ResourceType::ExampleScenario_Process_Step_Operation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Process_Step_Operation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Process_Step_Operation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Process_Step_Operation->extension = PushArray(arena, Extension, result_ExampleScenario_Process_Step_Operation->extension_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step_Operation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Process_Step_Operation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Process_Step_Operation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Process_Step_Operation->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Process_Step_Operation->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step_Operation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Process_Step_Operation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_number =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "number");
	if(cjson_number)
	{
		result_ExampleScenario_Process_Step_Operation->number = Str8C(cJSON_GetStringValue(cjson_number));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "type");
	if(cjson_type)
	{
		result_ExampleScenario_Process_Step_Operation->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "name");
	if(cjson_name)
	{
		result_ExampleScenario_Process_Step_Operation->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_initiator =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "initiator");
	if(cjson_initiator)
	{
		result_ExampleScenario_Process_Step_Operation->initiator = Str8C(cJSON_GetStringValue(cjson_initiator));
	}
	cJSON *cjson_receiver =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "receiver");
	if(cjson_receiver)
	{
		result_ExampleScenario_Process_Step_Operation->receiver = Str8C(cJSON_GetStringValue(cjson_receiver));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "description");
	if(cjson_description)
	{
		result_ExampleScenario_Process_Step_Operation->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_initiatorActive =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "initiatorActive");
	if(cjson_initiatorActive)
	{
		result_ExampleScenario_Process_Step_Operation->initiatorActive = (boolean)cJSON_IsTrue(cjson_initiatorActive);
	}
	cJSON *cjson_receiverActive =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "receiverActive");
	if(cjson_receiverActive)
	{
		result_ExampleScenario_Process_Step_Operation->receiverActive = (boolean)cJSON_IsTrue(cjson_receiverActive);
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "request");
	if(cjson_request)
	{
		result_ExampleScenario_Process_Step_Operation->request = Deserialize_ExampleScenario_Instance_ContainedInstance(arena, cjson_request);
	}
	cJSON *cjson_response =  cJSON_GetObjectItem(exampleScenario_Process_Step_Operation, "response");
	if(cjson_response)
	{
		result_ExampleScenario_Process_Step_Operation->response = Deserialize_ExampleScenario_Instance_ContainedInstance(arena, cjson_response);
	}
	return result_ExampleScenario_Process_Step_Operation;
}

ExampleScenario_Process_Step_Alternative*
Deserialize_ExampleScenario_Process_Step_Alternative(Arena *arena, cJSON *exampleScenario_Process_Step_Alternative)
{
	ExampleScenario_Process_Step_Alternative *result_ExampleScenario_Process_Step_Alternative = PushArray(arena, ExampleScenario_Process_Step_Alternative, 1);
	result_ExampleScenario_Process_Step_Alternative->resourceType = ResourceType::ExampleScenario_Process_Step_Alternative;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(exampleScenario_Process_Step_Alternative, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(exampleScenario_Process_Step_Alternative, "id");
	if(cjson_id)
	{
		result_ExampleScenario_Process_Step_Alternative->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(exampleScenario_Process_Step_Alternative, "extension");
	if(cjson_extension)
	{
		result_ExampleScenario_Process_Step_Alternative->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExampleScenario_Process_Step_Alternative->extension = PushArray(arena, Extension, result_ExampleScenario_Process_Step_Alternative->extension_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step_Alternative->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExampleScenario_Process_Step_Alternative->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(exampleScenario_Process_Step_Alternative, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExampleScenario_Process_Step_Alternative->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExampleScenario_Process_Step_Alternative->modifierExtension = PushArray(arena, Extension, result_ExampleScenario_Process_Step_Alternative->modifierExtension_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step_Alternative->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExampleScenario_Process_Step_Alternative->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_title =  cJSON_GetObjectItem(exampleScenario_Process_Step_Alternative, "title");
	if(cjson_title)
	{
		result_ExampleScenario_Process_Step_Alternative->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(exampleScenario_Process_Step_Alternative, "description");
	if(cjson_description)
	{
		result_ExampleScenario_Process_Step_Alternative->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_step =  cJSON_GetObjectItem(exampleScenario_Process_Step_Alternative, "step");
	if(cjson_step)
	{
		result_ExampleScenario_Process_Step_Alternative->step_count = cJSON_GetArraySize(cjson_step);
		result_ExampleScenario_Process_Step_Alternative->step = PushArray(arena, ExampleScenario_Process_Step, result_ExampleScenario_Process_Step_Alternative->step_count);
		for(int i = 0; i < result_ExampleScenario_Process_Step_Alternative->step_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_step, i);
			result_ExampleScenario_Process_Step_Alternative->step[i] = *Deserialize_ExampleScenario_Process_Step(arena, internal);
		}

	}
	return result_ExampleScenario_Process_Step_Alternative;
}

ExplanationOfBenefit*
Deserialize_ExplanationOfBenefit(Arena *arena, cJSON *explanationOfBenefit)
{
	ExplanationOfBenefit *result_ExplanationOfBenefit = PushArray(arena, ExplanationOfBenefit, 1);
	result_ExplanationOfBenefit->resourceType = ResourceType::ExplanationOfBenefit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(explanationOfBenefit, "meta");
	if(cjson_meta)
	{
		result_ExplanationOfBenefit->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(explanationOfBenefit, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ExplanationOfBenefit->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(explanationOfBenefit, "language");
	if(cjson_language)
	{
		result_ExplanationOfBenefit->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(explanationOfBenefit, "text");
	if(cjson_text)
	{
		result_ExplanationOfBenefit->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(explanationOfBenefit, "contained");
	if(cjson_contained)
	{
		result_ExplanationOfBenefit->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ExplanationOfBenefit->contained = PushArray(arena, Resource, result_ExplanationOfBenefit->contained_count);
		for(int i = 0; i < result_ExplanationOfBenefit->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ExplanationOfBenefit->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit->extension = PushArray(arena, Extension, result_ExplanationOfBenefit->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(explanationOfBenefit, "identifier");
	if(cjson_identifier)
	{
		result_ExplanationOfBenefit->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ExplanationOfBenefit->identifier = PushArray(arena, Identifier, result_ExplanationOfBenefit->identifier_count);
		for(int i = 0; i < result_ExplanationOfBenefit->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ExplanationOfBenefit->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(explanationOfBenefit, "status");
	if(cjson_status)
	{
		result_ExplanationOfBenefit->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subType =  cJSON_GetObjectItem(explanationOfBenefit, "subType");
	if(cjson_subType)
	{
		result_ExplanationOfBenefit->subType = Deserialize_CodeableConcept(arena, cjson_subType);
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(explanationOfBenefit, "use");
	if(cjson_use)
	{
		result_ExplanationOfBenefit->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(explanationOfBenefit, "patient");
	if(cjson_patient)
	{
		result_ExplanationOfBenefit->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_billablePeriod =  cJSON_GetObjectItem(explanationOfBenefit, "billablePeriod");
	if(cjson_billablePeriod)
	{
		result_ExplanationOfBenefit->billablePeriod = Deserialize_Period(arena, cjson_billablePeriod);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(explanationOfBenefit, "created");
	if(cjson_created)
	{
		result_ExplanationOfBenefit->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_enterer =  cJSON_GetObjectItem(explanationOfBenefit, "enterer");
	if(cjson_enterer)
	{
		result_ExplanationOfBenefit->enterer = Deserialize_Reference(arena, cjson_enterer);
	}
	cJSON *cjson_insurer =  cJSON_GetObjectItem(explanationOfBenefit, "insurer");
	if(cjson_insurer)
	{
		result_ExplanationOfBenefit->insurer = Deserialize_Reference(arena, cjson_insurer);
	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(explanationOfBenefit, "provider");
	if(cjson_provider)
	{
		result_ExplanationOfBenefit->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(explanationOfBenefit, "priority");
	if(cjson_priority)
	{
		result_ExplanationOfBenefit->priority = Deserialize_CodeableConcept(arena, cjson_priority);
	}
	cJSON *cjson_fundsReserveRequested =  cJSON_GetObjectItem(explanationOfBenefit, "fundsReserveRequested");
	if(cjson_fundsReserveRequested)
	{
		result_ExplanationOfBenefit->fundsReserveRequested = Deserialize_CodeableConcept(arena, cjson_fundsReserveRequested);
	}
	cJSON *cjson_fundsReserve =  cJSON_GetObjectItem(explanationOfBenefit, "fundsReserve");
	if(cjson_fundsReserve)
	{
		result_ExplanationOfBenefit->fundsReserve = Deserialize_CodeableConcept(arena, cjson_fundsReserve);
	}
	cJSON *cjson_related =  cJSON_GetObjectItem(explanationOfBenefit, "related");
	if(cjson_related)
	{
		result_ExplanationOfBenefit->related_count = cJSON_GetArraySize(cjson_related);
		result_ExplanationOfBenefit->related = PushArray(arena, ExplanationOfBenefit_Related, result_ExplanationOfBenefit->related_count);
		for(int i = 0; i < result_ExplanationOfBenefit->related_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_related, i);
			result_ExplanationOfBenefit->related[i] = *Deserialize_ExplanationOfBenefit_Related(arena, internal);
		}

	}
	cJSON *cjson_prescription =  cJSON_GetObjectItem(explanationOfBenefit, "prescription");
	if(cjson_prescription)
	{
		result_ExplanationOfBenefit->prescription = Deserialize_Reference(arena, cjson_prescription);
	}
	cJSON *cjson_originalPrescription =  cJSON_GetObjectItem(explanationOfBenefit, "originalPrescription");
	if(cjson_originalPrescription)
	{
		result_ExplanationOfBenefit->originalPrescription = Deserialize_Reference(arena, cjson_originalPrescription);
	}
	cJSON *cjson_payee =  cJSON_GetObjectItem(explanationOfBenefit, "payee");
	if(cjson_payee)
	{
		result_ExplanationOfBenefit->payee = Deserialize_ExplanationOfBenefit_Payee(arena, cjson_payee);
	}
	cJSON *cjson_referral =  cJSON_GetObjectItem(explanationOfBenefit, "referral");
	if(cjson_referral)
	{
		result_ExplanationOfBenefit->referral = Deserialize_Reference(arena, cjson_referral);
	}
	cJSON *cjson_facility =  cJSON_GetObjectItem(explanationOfBenefit, "facility");
	if(cjson_facility)
	{
		result_ExplanationOfBenefit->facility = Deserialize_Reference(arena, cjson_facility);
	}
	cJSON *cjson_claim =  cJSON_GetObjectItem(explanationOfBenefit, "claim");
	if(cjson_claim)
	{
		result_ExplanationOfBenefit->claim = Deserialize_Reference(arena, cjson_claim);
	}
	cJSON *cjson_claimResponse =  cJSON_GetObjectItem(explanationOfBenefit, "claimResponse");
	if(cjson_claimResponse)
	{
		result_ExplanationOfBenefit->claimResponse = Deserialize_Reference(arena, cjson_claimResponse);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(explanationOfBenefit, "outcome");
	if(cjson_outcome)
	{
		result_ExplanationOfBenefit->outcome = Str8C(cJSON_GetStringValue(cjson_outcome));
	}
	cJSON *cjson_disposition =  cJSON_GetObjectItem(explanationOfBenefit, "disposition");
	if(cjson_disposition)
	{
		result_ExplanationOfBenefit->disposition = Str8C(cJSON_GetStringValue(cjson_disposition));
	}
	cJSON *cjson_preAuthRef =  cJSON_GetObjectItem(explanationOfBenefit, "preAuthRef");
	if(cjson_preAuthRef)
	{
		result_ExplanationOfBenefit->preAuthRef_count = cJSON_GetArraySize(cjson_preAuthRef);
		result_ExplanationOfBenefit->preAuthRef = PushArray(arena, fhir_string, result_ExplanationOfBenefit->preAuthRef_count);
		for(int i = 0; i < result_ExplanationOfBenefit->preAuthRef_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_preAuthRef, i);
			result_ExplanationOfBenefit->preAuthRef[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_preAuthRefPeriod =  cJSON_GetObjectItem(explanationOfBenefit, "preAuthRefPeriod");
	if(cjson_preAuthRefPeriod)
	{
		result_ExplanationOfBenefit->preAuthRefPeriod_count = cJSON_GetArraySize(cjson_preAuthRefPeriod);
		result_ExplanationOfBenefit->preAuthRefPeriod = PushArray(arena, Period, result_ExplanationOfBenefit->preAuthRefPeriod_count);
		for(int i = 0; i < result_ExplanationOfBenefit->preAuthRefPeriod_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_preAuthRefPeriod, i);
			result_ExplanationOfBenefit->preAuthRefPeriod[i] = *Deserialize_Period(arena, internal);
		}

	}
	cJSON *cjson_careTeam =  cJSON_GetObjectItem(explanationOfBenefit, "careTeam");
	if(cjson_careTeam)
	{
		result_ExplanationOfBenefit->careTeam_count = cJSON_GetArraySize(cjson_careTeam);
		result_ExplanationOfBenefit->careTeam = PushArray(arena, ExplanationOfBenefit_CareTeam, result_ExplanationOfBenefit->careTeam_count);
		for(int i = 0; i < result_ExplanationOfBenefit->careTeam_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_careTeam, i);
			result_ExplanationOfBenefit->careTeam[i] = *Deserialize_ExplanationOfBenefit_CareTeam(arena, internal);
		}

	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(explanationOfBenefit, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_ExplanationOfBenefit->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_ExplanationOfBenefit->supportingInfo = PushArray(arena, ExplanationOfBenefit_SupportingInfo, result_ExplanationOfBenefit->supportingInfo_count);
		for(int i = 0; i < result_ExplanationOfBenefit->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_ExplanationOfBenefit->supportingInfo[i] = *Deserialize_ExplanationOfBenefit_SupportingInfo(arena, internal);
		}

	}
	cJSON *cjson_diagnosis =  cJSON_GetObjectItem(explanationOfBenefit, "diagnosis");
	if(cjson_diagnosis)
	{
		result_ExplanationOfBenefit->diagnosis_count = cJSON_GetArraySize(cjson_diagnosis);
		result_ExplanationOfBenefit->diagnosis = PushArray(arena, ExplanationOfBenefit_Diagnosis, result_ExplanationOfBenefit->diagnosis_count);
		for(int i = 0; i < result_ExplanationOfBenefit->diagnosis_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_diagnosis, i);
			result_ExplanationOfBenefit->diagnosis[i] = *Deserialize_ExplanationOfBenefit_Diagnosis(arena, internal);
		}

	}
	cJSON *cjson_procedure =  cJSON_GetObjectItem(explanationOfBenefit, "procedure");
	if(cjson_procedure)
	{
		result_ExplanationOfBenefit->procedure_count = cJSON_GetArraySize(cjson_procedure);
		result_ExplanationOfBenefit->procedure = PushArray(arena, ExplanationOfBenefit_Procedure, result_ExplanationOfBenefit->procedure_count);
		for(int i = 0; i < result_ExplanationOfBenefit->procedure_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_procedure, i);
			result_ExplanationOfBenefit->procedure[i] = *Deserialize_ExplanationOfBenefit_Procedure(arena, internal);
		}

	}
	cJSON *cjson_precedence =  cJSON_GetObjectItem(explanationOfBenefit, "precedence");
	if(cjson_precedence)
	{
		result_ExplanationOfBenefit->precedence = (int)cJSON_GetNumberValue(cjson_precedence);
	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(explanationOfBenefit, "insurance");
	if(cjson_insurance)
	{
		result_ExplanationOfBenefit->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_ExplanationOfBenefit->insurance = PushArray(arena, ExplanationOfBenefit_Insurance, result_ExplanationOfBenefit->insurance_count);
		for(int i = 0; i < result_ExplanationOfBenefit->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_ExplanationOfBenefit->insurance[i] = *Deserialize_ExplanationOfBenefit_Insurance(arena, internal);
		}

	}
	cJSON *cjson_accident =  cJSON_GetObjectItem(explanationOfBenefit, "accident");
	if(cjson_accident)
	{
		result_ExplanationOfBenefit->accident = Deserialize_ExplanationOfBenefit_Accident(arena, cjson_accident);
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(explanationOfBenefit, "item");
	if(cjson_item)
	{
		result_ExplanationOfBenefit->item_count = cJSON_GetArraySize(cjson_item);
		result_ExplanationOfBenefit->item = PushArray(arena, ExplanationOfBenefit_Item, result_ExplanationOfBenefit->item_count);
		for(int i = 0; i < result_ExplanationOfBenefit->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_ExplanationOfBenefit->item[i] = *Deserialize_ExplanationOfBenefit_Item(arena, internal);
		}

	}
	cJSON *cjson_addItem =  cJSON_GetObjectItem(explanationOfBenefit, "addItem");
	if(cjson_addItem)
	{
		result_ExplanationOfBenefit->addItem_count = cJSON_GetArraySize(cjson_addItem);
		result_ExplanationOfBenefit->addItem = PushArray(arena, ExplanationOfBenefit_AddItem, result_ExplanationOfBenefit->addItem_count);
		for(int i = 0; i < result_ExplanationOfBenefit->addItem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_addItem, i);
			result_ExplanationOfBenefit->addItem[i] = *Deserialize_ExplanationOfBenefit_AddItem(arena, internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(explanationOfBenefit, "adjudication");
	if(cjson_adjudication)
	{
		result_ExplanationOfBenefit->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ExplanationOfBenefit->adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, result_ExplanationOfBenefit->adjudication_count);
		for(int i = 0; i < result_ExplanationOfBenefit->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ExplanationOfBenefit->adjudication[i] = *Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_total =  cJSON_GetObjectItem(explanationOfBenefit, "total");
	if(cjson_total)
	{
		result_ExplanationOfBenefit->total_count = cJSON_GetArraySize(cjson_total);
		result_ExplanationOfBenefit->total = PushArray(arena, ExplanationOfBenefit_Total, result_ExplanationOfBenefit->total_count);
		for(int i = 0; i < result_ExplanationOfBenefit->total_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_total, i);
			result_ExplanationOfBenefit->total[i] = *Deserialize_ExplanationOfBenefit_Total(arena, internal);
		}

	}
	cJSON *cjson_payment =  cJSON_GetObjectItem(explanationOfBenefit, "payment");
	if(cjson_payment)
	{
		result_ExplanationOfBenefit->payment = Deserialize_ExplanationOfBenefit_Payment(arena, cjson_payment);
	}
	cJSON *cjson_formCode =  cJSON_GetObjectItem(explanationOfBenefit, "formCode");
	if(cjson_formCode)
	{
		result_ExplanationOfBenefit->formCode = Deserialize_CodeableConcept(arena, cjson_formCode);
	}
	cJSON *cjson_form =  cJSON_GetObjectItem(explanationOfBenefit, "form");
	if(cjson_form)
	{
		result_ExplanationOfBenefit->form = Deserialize_Attachment(arena, cjson_form);
	}
	cJSON *cjson_processNote =  cJSON_GetObjectItem(explanationOfBenefit, "processNote");
	if(cjson_processNote)
	{
		result_ExplanationOfBenefit->processNote_count = cJSON_GetArraySize(cjson_processNote);
		result_ExplanationOfBenefit->processNote = PushArray(arena, ExplanationOfBenefit_ProcessNote, result_ExplanationOfBenefit->processNote_count);
		for(int i = 0; i < result_ExplanationOfBenefit->processNote_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_processNote, i);
			result_ExplanationOfBenefit->processNote[i] = *Deserialize_ExplanationOfBenefit_ProcessNote(arena, internal);
		}

	}
	cJSON *cjson_benefitPeriod =  cJSON_GetObjectItem(explanationOfBenefit, "benefitPeriod");
	if(cjson_benefitPeriod)
	{
		result_ExplanationOfBenefit->benefitPeriod = Deserialize_Period(arena, cjson_benefitPeriod);
	}
	cJSON *cjson_benefitBalance =  cJSON_GetObjectItem(explanationOfBenefit, "benefitBalance");
	if(cjson_benefitBalance)
	{
		result_ExplanationOfBenefit->benefitBalance_count = cJSON_GetArraySize(cjson_benefitBalance);
		result_ExplanationOfBenefit->benefitBalance = PushArray(arena, ExplanationOfBenefit_BenefitBalance, result_ExplanationOfBenefit->benefitBalance_count);
		for(int i = 0; i < result_ExplanationOfBenefit->benefitBalance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_benefitBalance, i);
			result_ExplanationOfBenefit->benefitBalance[i] = *Deserialize_ExplanationOfBenefit_BenefitBalance(arena, internal);
		}

	}
	return result_ExplanationOfBenefit;
}

ExplanationOfBenefit_Related*
Deserialize_ExplanationOfBenefit_Related(Arena *arena, cJSON *explanationOfBenefit_Related)
{
	ExplanationOfBenefit_Related *result_ExplanationOfBenefit_Related = PushArray(arena, ExplanationOfBenefit_Related, 1);
	result_ExplanationOfBenefit_Related->resourceType = ResourceType::ExplanationOfBenefit_Related;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Related, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Related, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Related->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Related, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Related->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Related->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Related->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Related->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Related->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Related, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Related->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Related->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Related->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Related->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Related->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_claim =  cJSON_GetObjectItem(explanationOfBenefit_Related, "claim");
	if(cjson_claim)
	{
		result_ExplanationOfBenefit_Related->claim = Deserialize_Reference(arena, cjson_claim);
	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(explanationOfBenefit_Related, "relationship");
	if(cjson_relationship)
	{
		result_ExplanationOfBenefit_Related->relationship = Deserialize_CodeableConcept(arena, cjson_relationship);
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(explanationOfBenefit_Related, "reference");
	if(cjson_reference)
	{
		result_ExplanationOfBenefit_Related->reference = Deserialize_Identifier(arena, cjson_reference);
	}
	return result_ExplanationOfBenefit_Related;
}

ExplanationOfBenefit_Payee*
Deserialize_ExplanationOfBenefit_Payee(Arena *arena, cJSON *explanationOfBenefit_Payee)
{
	ExplanationOfBenefit_Payee *result_ExplanationOfBenefit_Payee = PushArray(arena, ExplanationOfBenefit_Payee, 1);
	result_ExplanationOfBenefit_Payee->resourceType = ResourceType::ExplanationOfBenefit_Payee;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Payee, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Payee, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Payee->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Payee, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Payee->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Payee->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Payee->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Payee->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Payee->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Payee, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Payee->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Payee->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Payee->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Payee->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Payee->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit_Payee, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit_Payee->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_party =  cJSON_GetObjectItem(explanationOfBenefit_Payee, "party");
	if(cjson_party)
	{
		result_ExplanationOfBenefit_Payee->party = Deserialize_Reference(arena, cjson_party);
	}
	return result_ExplanationOfBenefit_Payee;
}

ExplanationOfBenefit_CareTeam*
Deserialize_ExplanationOfBenefit_CareTeam(Arena *arena, cJSON *explanationOfBenefit_CareTeam)
{
	ExplanationOfBenefit_CareTeam *result_ExplanationOfBenefit_CareTeam = PushArray(arena, ExplanationOfBenefit_CareTeam, 1);
	result_ExplanationOfBenefit_CareTeam->resourceType = ResourceType::ExplanationOfBenefit_CareTeam;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_CareTeam->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_CareTeam->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_CareTeam->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_CareTeam->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_CareTeam->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_CareTeam->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_CareTeam->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_CareTeam->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_CareTeam->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_CareTeam->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_CareTeam->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "sequence");
	if(cjson_sequence)
	{
		result_ExplanationOfBenefit_CareTeam->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "provider");
	if(cjson_provider)
	{
		result_ExplanationOfBenefit_CareTeam->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_responsible =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "responsible");
	if(cjson_responsible)
	{
		result_ExplanationOfBenefit_CareTeam->responsible = (boolean)cJSON_IsTrue(cjson_responsible);
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "role");
	if(cjson_role)
	{
		result_ExplanationOfBenefit_CareTeam->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	cJSON *cjson_qualification =  cJSON_GetObjectItem(explanationOfBenefit_CareTeam, "qualification");
	if(cjson_qualification)
	{
		result_ExplanationOfBenefit_CareTeam->qualification = Deserialize_CodeableConcept(arena, cjson_qualification);
	}
	return result_ExplanationOfBenefit_CareTeam;
}

ExplanationOfBenefit_SupportingInfo*
Deserialize_ExplanationOfBenefit_SupportingInfo(Arena *arena, cJSON *explanationOfBenefit_SupportingInfo)
{
	ExplanationOfBenefit_SupportingInfo *result_ExplanationOfBenefit_SupportingInfo = PushArray(arena, ExplanationOfBenefit_SupportingInfo, 1);
	result_ExplanationOfBenefit_SupportingInfo->resourceType = ResourceType::ExplanationOfBenefit_SupportingInfo;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_SupportingInfo->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_SupportingInfo->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_SupportingInfo->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_SupportingInfo->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_SupportingInfo->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_SupportingInfo->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_SupportingInfo->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_SupportingInfo->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_SupportingInfo->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_SupportingInfo->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_SupportingInfo->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "sequence");
	if(cjson_sequence)
	{
		result_ExplanationOfBenefit_SupportingInfo->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "category");
	if(cjson_category)
	{
		result_ExplanationOfBenefit_SupportingInfo->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "code");
	if(cjson_code)
	{
		result_ExplanationOfBenefit_SupportingInfo->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	if((bool)cJSON_HasObjectItem(explanationOfBenefit_SupportingInfo, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "valueDate");
		result_ExplanationOfBenefit_SupportingInfo->timing.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ExplanationOfBenefit_SupportingInfo->timing_type = ExplanationOfBenefit_SupportingInfo::TimingType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_SupportingInfo, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "valuePeriod");
		result_ExplanationOfBenefit_SupportingInfo->timing.valuePeriod = Deserialize_Period(arena, item);
		result_ExplanationOfBenefit_SupportingInfo->timing_type = ExplanationOfBenefit_SupportingInfo::TimingType::Period;
	}


	if((bool)cJSON_HasObjectItem(explanationOfBenefit_SupportingInfo, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "valueBoolean");
		result_ExplanationOfBenefit_SupportingInfo->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ExplanationOfBenefit_SupportingInfo->value_type = ExplanationOfBenefit_SupportingInfo::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_SupportingInfo, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "valueString");
		result_ExplanationOfBenefit_SupportingInfo->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_ExplanationOfBenefit_SupportingInfo->value_type = ExplanationOfBenefit_SupportingInfo::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_SupportingInfo, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "valueQuantity");
		result_ExplanationOfBenefit_SupportingInfo->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_ExplanationOfBenefit_SupportingInfo->value_type = ExplanationOfBenefit_SupportingInfo::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_SupportingInfo, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "valueAttachment");
		result_ExplanationOfBenefit_SupportingInfo->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_ExplanationOfBenefit_SupportingInfo->value_type = ExplanationOfBenefit_SupportingInfo::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_SupportingInfo, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "valueReference");
		result_ExplanationOfBenefit_SupportingInfo->value.valueReference = Deserialize_Reference(arena, item);
		result_ExplanationOfBenefit_SupportingInfo->value_type = ExplanationOfBenefit_SupportingInfo::ValueType::Reference;
	}


	cJSON *cjson_reason =  cJSON_GetObjectItem(explanationOfBenefit_SupportingInfo, "reason");
	if(cjson_reason)
	{
		result_ExplanationOfBenefit_SupportingInfo->reason = Deserialize_Coding(arena, cjson_reason);
	}
	return result_ExplanationOfBenefit_SupportingInfo;
}

ExplanationOfBenefit_Diagnosis*
Deserialize_ExplanationOfBenefit_Diagnosis(Arena *arena, cJSON *explanationOfBenefit_Diagnosis)
{
	ExplanationOfBenefit_Diagnosis *result_ExplanationOfBenefit_Diagnosis = PushArray(arena, ExplanationOfBenefit_Diagnosis, 1);
	result_ExplanationOfBenefit_Diagnosis->resourceType = ResourceType::ExplanationOfBenefit_Diagnosis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Diagnosis->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Diagnosis->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Diagnosis->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Diagnosis->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Diagnosis->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Diagnosis->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Diagnosis->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Diagnosis->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Diagnosis->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Diagnosis->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Diagnosis->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "sequence");
	if(cjson_sequence)
	{
		result_ExplanationOfBenefit_Diagnosis->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	if((bool)cJSON_HasObjectItem(explanationOfBenefit_Diagnosis, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "valueCodeableConcept");
		result_ExplanationOfBenefit_Diagnosis->diagnosis.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ExplanationOfBenefit_Diagnosis->diagnosis_type = ExplanationOfBenefit_Diagnosis::DiagnosisType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_Diagnosis, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "valueReference");
		result_ExplanationOfBenefit_Diagnosis->diagnosis.valueReference = Deserialize_Reference(arena, item);
		result_ExplanationOfBenefit_Diagnosis->diagnosis_type = ExplanationOfBenefit_Diagnosis::DiagnosisType::Reference;
	}


	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit_Diagnosis->type_count = cJSON_GetArraySize(cjson_type);
		result_ExplanationOfBenefit_Diagnosis->type = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Diagnosis->type_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Diagnosis->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_ExplanationOfBenefit_Diagnosis->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_onAdmission =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "onAdmission");
	if(cjson_onAdmission)
	{
		result_ExplanationOfBenefit_Diagnosis->onAdmission = Deserialize_CodeableConcept(arena, cjson_onAdmission);
	}
	cJSON *cjson_packageCode =  cJSON_GetObjectItem(explanationOfBenefit_Diagnosis, "packageCode");
	if(cjson_packageCode)
	{
		result_ExplanationOfBenefit_Diagnosis->packageCode = Deserialize_CodeableConcept(arena, cjson_packageCode);
	}
	return result_ExplanationOfBenefit_Diagnosis;
}

ExplanationOfBenefit_Procedure*
Deserialize_ExplanationOfBenefit_Procedure(Arena *arena, cJSON *explanationOfBenefit_Procedure)
{
	ExplanationOfBenefit_Procedure *result_ExplanationOfBenefit_Procedure = PushArray(arena, ExplanationOfBenefit_Procedure, 1);
	result_ExplanationOfBenefit_Procedure->resourceType = ResourceType::ExplanationOfBenefit_Procedure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Procedure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Procedure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Procedure->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Procedure->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Procedure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Procedure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Procedure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Procedure->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Procedure->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Procedure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Procedure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "sequence");
	if(cjson_sequence)
	{
		result_ExplanationOfBenefit_Procedure->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit_Procedure->type_count = cJSON_GetArraySize(cjson_type);
		result_ExplanationOfBenefit_Procedure->type = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Procedure->type_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Procedure->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_ExplanationOfBenefit_Procedure->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_date =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "date");
	if(cjson_date)
	{
		result_ExplanationOfBenefit_Procedure->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	if((bool)cJSON_HasObjectItem(explanationOfBenefit_Procedure, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Procedure, "valueCodeableConcept");
		result_ExplanationOfBenefit_Procedure->procedure.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ExplanationOfBenefit_Procedure->procedure_type = ExplanationOfBenefit_Procedure::ProcedureType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_Procedure, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Procedure, "valueReference");
		result_ExplanationOfBenefit_Procedure->procedure.valueReference = Deserialize_Reference(arena, item);
		result_ExplanationOfBenefit_Procedure->procedure_type = ExplanationOfBenefit_Procedure::ProcedureType::Reference;
	}


	cJSON *cjson_udi =  cJSON_GetObjectItem(explanationOfBenefit_Procedure, "udi");
	if(cjson_udi)
	{
		result_ExplanationOfBenefit_Procedure->udi_count = cJSON_GetArraySize(cjson_udi);
		result_ExplanationOfBenefit_Procedure->udi = PushArray(arena, Reference, result_ExplanationOfBenefit_Procedure->udi_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Procedure->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_ExplanationOfBenefit_Procedure->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_Procedure;
}

ExplanationOfBenefit_Insurance*
Deserialize_ExplanationOfBenefit_Insurance(Arena *arena, cJSON *explanationOfBenefit_Insurance)
{
	ExplanationOfBenefit_Insurance *result_ExplanationOfBenefit_Insurance = PushArray(arena, ExplanationOfBenefit_Insurance, 1);
	result_ExplanationOfBenefit_Insurance->resourceType = ResourceType::ExplanationOfBenefit_Insurance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Insurance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Insurance, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Insurance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Insurance, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Insurance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Insurance->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Insurance->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Insurance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Insurance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Insurance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Insurance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Insurance->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Insurance->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Insurance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Insurance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_focal =  cJSON_GetObjectItem(explanationOfBenefit_Insurance, "focal");
	if(cjson_focal)
	{
		result_ExplanationOfBenefit_Insurance->focal = (boolean)cJSON_IsTrue(cjson_focal);
	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(explanationOfBenefit_Insurance, "coverage");
	if(cjson_coverage)
	{
		result_ExplanationOfBenefit_Insurance->coverage = Deserialize_Reference(arena, cjson_coverage);
	}
	cJSON *cjson_preAuthRef =  cJSON_GetObjectItem(explanationOfBenefit_Insurance, "preAuthRef");
	if(cjson_preAuthRef)
	{
		result_ExplanationOfBenefit_Insurance->preAuthRef_count = cJSON_GetArraySize(cjson_preAuthRef);
		result_ExplanationOfBenefit_Insurance->preAuthRef = PushArray(arena, fhir_string, result_ExplanationOfBenefit_Insurance->preAuthRef_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Insurance->preAuthRef_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_preAuthRef, i);
			result_ExplanationOfBenefit_Insurance->preAuthRef[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_ExplanationOfBenefit_Insurance;
}

ExplanationOfBenefit_Accident*
Deserialize_ExplanationOfBenefit_Accident(Arena *arena, cJSON *explanationOfBenefit_Accident)
{
	ExplanationOfBenefit_Accident *result_ExplanationOfBenefit_Accident = PushArray(arena, ExplanationOfBenefit_Accident, 1);
	result_ExplanationOfBenefit_Accident->resourceType = ResourceType::ExplanationOfBenefit_Accident;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Accident, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Accident, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Accident->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Accident, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Accident->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Accident->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Accident->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Accident->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Accident->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Accident, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Accident->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Accident->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Accident->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Accident->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Accident->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_date =  cJSON_GetObjectItem(explanationOfBenefit_Accident, "date");
	if(cjson_date)
	{
		result_ExplanationOfBenefit_Accident->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit_Accident, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit_Accident->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(explanationOfBenefit_Accident, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Accident, "valueAddress");
		result_ExplanationOfBenefit_Accident->location.valueAddress = Deserialize_Address(arena, item);
		result_ExplanationOfBenefit_Accident->location_type = ExplanationOfBenefit_Accident::LocationType::Address;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_Accident, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Accident, "valueReference");
		result_ExplanationOfBenefit_Accident->location.valueReference = Deserialize_Reference(arena, item);
		result_ExplanationOfBenefit_Accident->location_type = ExplanationOfBenefit_Accident::LocationType::Reference;
	}


	return result_ExplanationOfBenefit_Accident;
}

ExplanationOfBenefit_Item*
Deserialize_ExplanationOfBenefit_Item(Arena *arena, cJSON *explanationOfBenefit_Item)
{
	ExplanationOfBenefit_Item *result_ExplanationOfBenefit_Item = PushArray(arena, ExplanationOfBenefit_Item, 1);
	result_ExplanationOfBenefit_Item->resourceType = ResourceType::ExplanationOfBenefit_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Item, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Item, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Item->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Item->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(explanationOfBenefit_Item, "sequence");
	if(cjson_sequence)
	{
		result_ExplanationOfBenefit_Item->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_careTeamSequence =  cJSON_GetObjectItem(explanationOfBenefit_Item, "careTeamSequence");
	if(cjson_careTeamSequence)
	{
		result_ExplanationOfBenefit_Item->careTeamSequence_count = cJSON_GetArraySize(cjson_careTeamSequence);
		result_ExplanationOfBenefit_Item->careTeamSequence = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_Item->careTeamSequence_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->careTeamSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_careTeamSequence, i);
			result_ExplanationOfBenefit_Item->careTeamSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_diagnosisSequence =  cJSON_GetObjectItem(explanationOfBenefit_Item, "diagnosisSequence");
	if(cjson_diagnosisSequence)
	{
		result_ExplanationOfBenefit_Item->diagnosisSequence_count = cJSON_GetArraySize(cjson_diagnosisSequence);
		result_ExplanationOfBenefit_Item->diagnosisSequence = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_Item->diagnosisSequence_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->diagnosisSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_diagnosisSequence, i);
			result_ExplanationOfBenefit_Item->diagnosisSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_procedureSequence =  cJSON_GetObjectItem(explanationOfBenefit_Item, "procedureSequence");
	if(cjson_procedureSequence)
	{
		result_ExplanationOfBenefit_Item->procedureSequence_count = cJSON_GetArraySize(cjson_procedureSequence);
		result_ExplanationOfBenefit_Item->procedureSequence = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_Item->procedureSequence_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->procedureSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_procedureSequence, i);
			result_ExplanationOfBenefit_Item->procedureSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_informationSequence =  cJSON_GetObjectItem(explanationOfBenefit_Item, "informationSequence");
	if(cjson_informationSequence)
	{
		result_ExplanationOfBenefit_Item->informationSequence_count = cJSON_GetArraySize(cjson_informationSequence);
		result_ExplanationOfBenefit_Item->informationSequence = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_Item->informationSequence_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->informationSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_informationSequence, i);
			result_ExplanationOfBenefit_Item->informationSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_revenue =  cJSON_GetObjectItem(explanationOfBenefit_Item, "revenue");
	if(cjson_revenue)
	{
		result_ExplanationOfBenefit_Item->revenue = Deserialize_CodeableConcept(arena, cjson_revenue);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(explanationOfBenefit_Item, "category");
	if(cjson_category)
	{
		result_ExplanationOfBenefit_Item->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(explanationOfBenefit_Item, "productOrService");
	if(cjson_productOrService)
	{
		result_ExplanationOfBenefit_Item->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(explanationOfBenefit_Item, "modifier");
	if(cjson_modifier)
	{
		result_ExplanationOfBenefit_Item->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ExplanationOfBenefit_Item->modifier = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Item->modifier_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ExplanationOfBenefit_Item->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(explanationOfBenefit_Item, "programCode");
	if(cjson_programCode)
	{
		result_ExplanationOfBenefit_Item->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_ExplanationOfBenefit_Item->programCode = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Item->programCode_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_ExplanationOfBenefit_Item->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(explanationOfBenefit_Item, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Item, "valueDate");
		result_ExplanationOfBenefit_Item->serviced.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ExplanationOfBenefit_Item->serviced_type = ExplanationOfBenefit_Item::ServicedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_Item, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Item, "valuePeriod");
		result_ExplanationOfBenefit_Item->serviced.valuePeriod = Deserialize_Period(arena, item);
		result_ExplanationOfBenefit_Item->serviced_type = ExplanationOfBenefit_Item::ServicedType::Period;
	}


	if((bool)cJSON_HasObjectItem(explanationOfBenefit_Item, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Item, "valueCodeableConcept");
		result_ExplanationOfBenefit_Item->location.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ExplanationOfBenefit_Item->location_type = ExplanationOfBenefit_Item::LocationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_Item, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Item, "valueAddress");
		result_ExplanationOfBenefit_Item->location.valueAddress = Deserialize_Address(arena, item);
		result_ExplanationOfBenefit_Item->location_type = ExplanationOfBenefit_Item::LocationType::Address;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_Item, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_Item, "valueReference");
		result_ExplanationOfBenefit_Item->location.valueReference = Deserialize_Reference(arena, item);
		result_ExplanationOfBenefit_Item->location_type = ExplanationOfBenefit_Item::LocationType::Reference;
	}


	cJSON *cjson_quantity =  cJSON_GetObjectItem(explanationOfBenefit_Item, "quantity");
	if(cjson_quantity)
	{
		result_ExplanationOfBenefit_Item->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(explanationOfBenefit_Item, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ExplanationOfBenefit_Item->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(explanationOfBenefit_Item, "factor");
	if(cjson_factor)
	{
		result_ExplanationOfBenefit_Item->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(explanationOfBenefit_Item, "net");
	if(cjson_net)
	{
		result_ExplanationOfBenefit_Item->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_udi =  cJSON_GetObjectItem(explanationOfBenefit_Item, "udi");
	if(cjson_udi)
	{
		result_ExplanationOfBenefit_Item->udi_count = cJSON_GetArraySize(cjson_udi);
		result_ExplanationOfBenefit_Item->udi = PushArray(arena, Reference, result_ExplanationOfBenefit_Item->udi_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_ExplanationOfBenefit_Item->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(explanationOfBenefit_Item, "bodySite");
	if(cjson_bodySite)
	{
		result_ExplanationOfBenefit_Item->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	cJSON *cjson_subSite =  cJSON_GetObjectItem(explanationOfBenefit_Item, "subSite");
	if(cjson_subSite)
	{
		result_ExplanationOfBenefit_Item->subSite_count = cJSON_GetArraySize(cjson_subSite);
		result_ExplanationOfBenefit_Item->subSite = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Item->subSite_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->subSite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subSite, i);
			result_ExplanationOfBenefit_Item->subSite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(explanationOfBenefit_Item, "encounter");
	if(cjson_encounter)
	{
		result_ExplanationOfBenefit_Item->encounter_count = cJSON_GetArraySize(cjson_encounter);
		result_ExplanationOfBenefit_Item->encounter = PushArray(arena, Reference, result_ExplanationOfBenefit_Item->encounter_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->encounter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_encounter, i);
			result_ExplanationOfBenefit_Item->encounter[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(explanationOfBenefit_Item, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ExplanationOfBenefit_Item->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ExplanationOfBenefit_Item->noteNumber = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_Item->noteNumber_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ExplanationOfBenefit_Item->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(explanationOfBenefit_Item, "adjudication");
	if(cjson_adjudication)
	{
		result_ExplanationOfBenefit_Item->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ExplanationOfBenefit_Item->adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, result_ExplanationOfBenefit_Item->adjudication_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ExplanationOfBenefit_Item->adjudication[i] = *Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(explanationOfBenefit_Item, "detail");
	if(cjson_detail)
	{
		result_ExplanationOfBenefit_Item->detail_count = cJSON_GetArraySize(cjson_detail);
		result_ExplanationOfBenefit_Item->detail = PushArray(arena, ExplanationOfBenefit_Item_Detail, result_ExplanationOfBenefit_Item->detail_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_ExplanationOfBenefit_Item->detail[i] = *Deserialize_ExplanationOfBenefit_Item_Detail(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_Item;
}

ExplanationOfBenefit_Item_Adjudication*
Deserialize_ExplanationOfBenefit_Item_Adjudication(Arena *arena, cJSON *explanationOfBenefit_Item_Adjudication)
{
	ExplanationOfBenefit_Item_Adjudication *result_ExplanationOfBenefit_Item_Adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, 1);
	result_ExplanationOfBenefit_Item_Adjudication->resourceType = ResourceType::ExplanationOfBenefit_Item_Adjudication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Item_Adjudication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Item_Adjudication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Item_Adjudication->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item_Adjudication->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Adjudication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Item_Adjudication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Item_Adjudication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Item_Adjudication->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item_Adjudication->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Adjudication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Item_Adjudication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "category");
	if(cjson_category)
	{
		result_ExplanationOfBenefit_Item_Adjudication->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "reason");
	if(cjson_reason)
	{
		result_ExplanationOfBenefit_Item_Adjudication->reason = Deserialize_CodeableConcept(arena, cjson_reason);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "amount");
	if(cjson_amount)
	{
		result_ExplanationOfBenefit_Item_Adjudication->amount = Deserialize_Money(arena, cjson_amount);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(explanationOfBenefit_Item_Adjudication, "value");
	if(cjson_value)
	{
		result_ExplanationOfBenefit_Item_Adjudication->value = cJSON_GetNumberValue(cjson_value);
	}
	return result_ExplanationOfBenefit_Item_Adjudication;
}

ExplanationOfBenefit_Item_Detail*
Deserialize_ExplanationOfBenefit_Item_Detail(Arena *arena, cJSON *explanationOfBenefit_Item_Detail)
{
	ExplanationOfBenefit_Item_Detail *result_ExplanationOfBenefit_Item_Detail = PushArray(arena, ExplanationOfBenefit_Item_Detail, 1);
	result_ExplanationOfBenefit_Item_Detail->resourceType = ResourceType::ExplanationOfBenefit_Item_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Item_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Item_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Item_Detail->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item_Detail->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Item_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Item_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Item_Detail->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item_Detail->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Item_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "sequence");
	if(cjson_sequence)
	{
		result_ExplanationOfBenefit_Item_Detail->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_revenue =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "revenue");
	if(cjson_revenue)
	{
		result_ExplanationOfBenefit_Item_Detail->revenue = Deserialize_CodeableConcept(arena, cjson_revenue);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "category");
	if(cjson_category)
	{
		result_ExplanationOfBenefit_Item_Detail->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "productOrService");
	if(cjson_productOrService)
	{
		result_ExplanationOfBenefit_Item_Detail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "modifier");
	if(cjson_modifier)
	{
		result_ExplanationOfBenefit_Item_Detail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ExplanationOfBenefit_Item_Detail->modifier = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Item_Detail->modifier_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ExplanationOfBenefit_Item_Detail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "programCode");
	if(cjson_programCode)
	{
		result_ExplanationOfBenefit_Item_Detail->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_ExplanationOfBenefit_Item_Detail->programCode = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Item_Detail->programCode_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_ExplanationOfBenefit_Item_Detail->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "quantity");
	if(cjson_quantity)
	{
		result_ExplanationOfBenefit_Item_Detail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ExplanationOfBenefit_Item_Detail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "factor");
	if(cjson_factor)
	{
		result_ExplanationOfBenefit_Item_Detail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "net");
	if(cjson_net)
	{
		result_ExplanationOfBenefit_Item_Detail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_udi =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "udi");
	if(cjson_udi)
	{
		result_ExplanationOfBenefit_Item_Detail->udi_count = cJSON_GetArraySize(cjson_udi);
		result_ExplanationOfBenefit_Item_Detail->udi = PushArray(arena, Reference, result_ExplanationOfBenefit_Item_Detail->udi_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_ExplanationOfBenefit_Item_Detail->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ExplanationOfBenefit_Item_Detail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ExplanationOfBenefit_Item_Detail->noteNumber = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_Item_Detail->noteNumber_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ExplanationOfBenefit_Item_Detail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "adjudication");
	if(cjson_adjudication)
	{
		result_ExplanationOfBenefit_Item_Detail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ExplanationOfBenefit_Item_Detail->adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, result_ExplanationOfBenefit_Item_Detail->adjudication_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ExplanationOfBenefit_Item_Detail->adjudication[i] = *Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_subDetail =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail, "subDetail");
	if(cjson_subDetail)
	{
		result_ExplanationOfBenefit_Item_Detail->subDetail_count = cJSON_GetArraySize(cjson_subDetail);
		result_ExplanationOfBenefit_Item_Detail->subDetail = PushArray(arena, ExplanationOfBenefit_Item_Detail_SubDetail, result_ExplanationOfBenefit_Item_Detail->subDetail_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail->subDetail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subDetail, i);
			result_ExplanationOfBenefit_Item_Detail->subDetail[i] = *Deserialize_ExplanationOfBenefit_Item_Detail_SubDetail(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_Item_Detail;
}

ExplanationOfBenefit_Item_Detail_SubDetail*
Deserialize_ExplanationOfBenefit_Item_Detail_SubDetail(Arena *arena, cJSON *explanationOfBenefit_Item_Detail_SubDetail)
{
	ExplanationOfBenefit_Item_Detail_SubDetail *result_ExplanationOfBenefit_Item_Detail_SubDetail = PushArray(arena, ExplanationOfBenefit_Item_Detail_SubDetail, 1);
	result_ExplanationOfBenefit_Item_Detail_SubDetail->resourceType = ResourceType::ExplanationOfBenefit_Item_Detail_SubDetail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Item_Detail_SubDetail->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item_Detail_SubDetail->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail_SubDetail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Item_Detail_SubDetail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Item_Detail_SubDetail->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Item_Detail_SubDetail->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail_SubDetail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Item_Detail_SubDetail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "sequence");
	if(cjson_sequence)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	cJSON *cjson_revenue =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "revenue");
	if(cjson_revenue)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->revenue = Deserialize_CodeableConcept(arena, cjson_revenue);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "category");
	if(cjson_category)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "productOrService");
	if(cjson_productOrService)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "modifier");
	if(cjson_modifier)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ExplanationOfBenefit_Item_Detail_SubDetail->modifier = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Item_Detail_SubDetail->modifier_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail_SubDetail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ExplanationOfBenefit_Item_Detail_SubDetail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "programCode");
	if(cjson_programCode)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_ExplanationOfBenefit_Item_Detail_SubDetail->programCode = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_Item_Detail_SubDetail->programCode_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail_SubDetail->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_ExplanationOfBenefit_Item_Detail_SubDetail->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "quantity");
	if(cjson_quantity)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "factor");
	if(cjson_factor)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "net");
	if(cjson_net)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_udi =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "udi");
	if(cjson_udi)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->udi_count = cJSON_GetArraySize(cjson_udi);
		result_ExplanationOfBenefit_Item_Detail_SubDetail->udi = PushArray(arena, Reference, result_ExplanationOfBenefit_Item_Detail_SubDetail->udi_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail_SubDetail->udi_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_udi, i);
			result_ExplanationOfBenefit_Item_Detail_SubDetail->udi[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ExplanationOfBenefit_Item_Detail_SubDetail->noteNumber = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_Item_Detail_SubDetail->noteNumber_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail_SubDetail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ExplanationOfBenefit_Item_Detail_SubDetail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(explanationOfBenefit_Item_Detail_SubDetail, "adjudication");
	if(cjson_adjudication)
	{
		result_ExplanationOfBenefit_Item_Detail_SubDetail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ExplanationOfBenefit_Item_Detail_SubDetail->adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, result_ExplanationOfBenefit_Item_Detail_SubDetail->adjudication_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Item_Detail_SubDetail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ExplanationOfBenefit_Item_Detail_SubDetail->adjudication[i] = *Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_Item_Detail_SubDetail;
}

ExplanationOfBenefit_AddItem*
Deserialize_ExplanationOfBenefit_AddItem(Arena *arena, cJSON *explanationOfBenefit_AddItem)
{
	ExplanationOfBenefit_AddItem *result_ExplanationOfBenefit_AddItem = PushArray(arena, ExplanationOfBenefit_AddItem, 1);
	result_ExplanationOfBenefit_AddItem->resourceType = ResourceType::ExplanationOfBenefit_AddItem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_AddItem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_AddItem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_AddItem->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_AddItem->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_AddItem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_AddItem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_AddItem->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_AddItem->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_AddItem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_itemSequence =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "itemSequence");
	if(cjson_itemSequence)
	{
		result_ExplanationOfBenefit_AddItem->itemSequence_count = cJSON_GetArraySize(cjson_itemSequence);
		result_ExplanationOfBenefit_AddItem->itemSequence = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_AddItem->itemSequence_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->itemSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_itemSequence, i);
			result_ExplanationOfBenefit_AddItem->itemSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_detailSequence =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "detailSequence");
	if(cjson_detailSequence)
	{
		result_ExplanationOfBenefit_AddItem->detailSequence_count = cJSON_GetArraySize(cjson_detailSequence);
		result_ExplanationOfBenefit_AddItem->detailSequence = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_AddItem->detailSequence_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->detailSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detailSequence, i);
			result_ExplanationOfBenefit_AddItem->detailSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_subDetailSequence =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "subDetailSequence");
	if(cjson_subDetailSequence)
	{
		result_ExplanationOfBenefit_AddItem->subDetailSequence_count = cJSON_GetArraySize(cjson_subDetailSequence);
		result_ExplanationOfBenefit_AddItem->subDetailSequence = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_AddItem->subDetailSequence_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->subDetailSequence_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subDetailSequence, i);
			result_ExplanationOfBenefit_AddItem->subDetailSequence[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "provider");
	if(cjson_provider)
	{
		result_ExplanationOfBenefit_AddItem->provider_count = cJSON_GetArraySize(cjson_provider);
		result_ExplanationOfBenefit_AddItem->provider = PushArray(arena, Reference, result_ExplanationOfBenefit_AddItem->provider_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->provider_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_provider, i);
			result_ExplanationOfBenefit_AddItem->provider[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "productOrService");
	if(cjson_productOrService)
	{
		result_ExplanationOfBenefit_AddItem->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "modifier");
	if(cjson_modifier)
	{
		result_ExplanationOfBenefit_AddItem->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ExplanationOfBenefit_AddItem->modifier = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_AddItem->modifier_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ExplanationOfBenefit_AddItem->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_programCode =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "programCode");
	if(cjson_programCode)
	{
		result_ExplanationOfBenefit_AddItem->programCode_count = cJSON_GetArraySize(cjson_programCode);
		result_ExplanationOfBenefit_AddItem->programCode = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_AddItem->programCode_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->programCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programCode, i);
			result_ExplanationOfBenefit_AddItem->programCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(explanationOfBenefit_AddItem, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_AddItem, "valueDate");
		result_ExplanationOfBenefit_AddItem->serviced.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ExplanationOfBenefit_AddItem->serviced_type = ExplanationOfBenefit_AddItem::ServicedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_AddItem, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_AddItem, "valuePeriod");
		result_ExplanationOfBenefit_AddItem->serviced.valuePeriod = Deserialize_Period(arena, item);
		result_ExplanationOfBenefit_AddItem->serviced_type = ExplanationOfBenefit_AddItem::ServicedType::Period;
	}


	if((bool)cJSON_HasObjectItem(explanationOfBenefit_AddItem, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_AddItem, "valueCodeableConcept");
		result_ExplanationOfBenefit_AddItem->location.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ExplanationOfBenefit_AddItem->location_type = ExplanationOfBenefit_AddItem::LocationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_AddItem, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_AddItem, "valueAddress");
		result_ExplanationOfBenefit_AddItem->location.valueAddress = Deserialize_Address(arena, item);
		result_ExplanationOfBenefit_AddItem->location_type = ExplanationOfBenefit_AddItem::LocationType::Address;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_AddItem, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_AddItem, "valueReference");
		result_ExplanationOfBenefit_AddItem->location.valueReference = Deserialize_Reference(arena, item);
		result_ExplanationOfBenefit_AddItem->location_type = ExplanationOfBenefit_AddItem::LocationType::Reference;
	}


	cJSON *cjson_quantity =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "quantity");
	if(cjson_quantity)
	{
		result_ExplanationOfBenefit_AddItem->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ExplanationOfBenefit_AddItem->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "factor");
	if(cjson_factor)
	{
		result_ExplanationOfBenefit_AddItem->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "net");
	if(cjson_net)
	{
		result_ExplanationOfBenefit_AddItem->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "bodySite");
	if(cjson_bodySite)
	{
		result_ExplanationOfBenefit_AddItem->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	cJSON *cjson_subSite =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "subSite");
	if(cjson_subSite)
	{
		result_ExplanationOfBenefit_AddItem->subSite_count = cJSON_GetArraySize(cjson_subSite);
		result_ExplanationOfBenefit_AddItem->subSite = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_AddItem->subSite_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->subSite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subSite, i);
			result_ExplanationOfBenefit_AddItem->subSite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ExplanationOfBenefit_AddItem->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ExplanationOfBenefit_AddItem->noteNumber = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_AddItem->noteNumber_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ExplanationOfBenefit_AddItem->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "adjudication");
	if(cjson_adjudication)
	{
		result_ExplanationOfBenefit_AddItem->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ExplanationOfBenefit_AddItem->adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, result_ExplanationOfBenefit_AddItem->adjudication_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ExplanationOfBenefit_AddItem->adjudication[i] = *Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(explanationOfBenefit_AddItem, "detail");
	if(cjson_detail)
	{
		result_ExplanationOfBenefit_AddItem->detail_count = cJSON_GetArraySize(cjson_detail);
		result_ExplanationOfBenefit_AddItem->detail = PushArray(arena, ExplanationOfBenefit_AddItem_Detail, result_ExplanationOfBenefit_AddItem->detail_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_ExplanationOfBenefit_AddItem->detail[i] = *Deserialize_ExplanationOfBenefit_AddItem_Detail(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_AddItem;
}

ExplanationOfBenefit_AddItem_Detail*
Deserialize_ExplanationOfBenefit_AddItem_Detail(Arena *arena, cJSON *explanationOfBenefit_AddItem_Detail)
{
	ExplanationOfBenefit_AddItem_Detail *result_ExplanationOfBenefit_AddItem_Detail = PushArray(arena, ExplanationOfBenefit_AddItem_Detail, 1);
	result_ExplanationOfBenefit_AddItem_Detail->resourceType = ResourceType::ExplanationOfBenefit_AddItem_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_AddItem_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_AddItem_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_AddItem_Detail->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_AddItem_Detail->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_AddItem_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_AddItem_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_AddItem_Detail->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_AddItem_Detail->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_AddItem_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "productOrService");
	if(cjson_productOrService)
	{
		result_ExplanationOfBenefit_AddItem_Detail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "modifier");
	if(cjson_modifier)
	{
		result_ExplanationOfBenefit_AddItem_Detail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ExplanationOfBenefit_AddItem_Detail->modifier = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_AddItem_Detail->modifier_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ExplanationOfBenefit_AddItem_Detail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "quantity");
	if(cjson_quantity)
	{
		result_ExplanationOfBenefit_AddItem_Detail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ExplanationOfBenefit_AddItem_Detail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "factor");
	if(cjson_factor)
	{
		result_ExplanationOfBenefit_AddItem_Detail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "net");
	if(cjson_net)
	{
		result_ExplanationOfBenefit_AddItem_Detail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ExplanationOfBenefit_AddItem_Detail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ExplanationOfBenefit_AddItem_Detail->noteNumber = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_AddItem_Detail->noteNumber_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ExplanationOfBenefit_AddItem_Detail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "adjudication");
	if(cjson_adjudication)
	{
		result_ExplanationOfBenefit_AddItem_Detail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ExplanationOfBenefit_AddItem_Detail->adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, result_ExplanationOfBenefit_AddItem_Detail->adjudication_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ExplanationOfBenefit_AddItem_Detail->adjudication[i] = *Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, internal);
		}

	}
	cJSON *cjson_subDetail =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail, "subDetail");
	if(cjson_subDetail)
	{
		result_ExplanationOfBenefit_AddItem_Detail->subDetail_count = cJSON_GetArraySize(cjson_subDetail);
		result_ExplanationOfBenefit_AddItem_Detail->subDetail = PushArray(arena, ExplanationOfBenefit_AddItem_Detail_SubDetail, result_ExplanationOfBenefit_AddItem_Detail->subDetail_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail->subDetail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subDetail, i);
			result_ExplanationOfBenefit_AddItem_Detail->subDetail[i] = *Deserialize_ExplanationOfBenefit_AddItem_Detail_SubDetail(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_AddItem_Detail;
}

ExplanationOfBenefit_AddItem_Detail_SubDetail*
Deserialize_ExplanationOfBenefit_AddItem_Detail_SubDetail(Arena *arena, cJSON *explanationOfBenefit_AddItem_Detail_SubDetail)
{
	ExplanationOfBenefit_AddItem_Detail_SubDetail *result_ExplanationOfBenefit_AddItem_Detail_SubDetail = PushArray(arena, ExplanationOfBenefit_AddItem_Detail_SubDetail, 1);
	result_ExplanationOfBenefit_AddItem_Detail_SubDetail->resourceType = ResourceType::ExplanationOfBenefit_AddItem_Detail_SubDetail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_AddItem_Detail_SubDetail->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail_SubDetail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_AddItem_Detail_SubDetail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_productOrService =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "productOrService");
	if(cjson_productOrService)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->productOrService = Deserialize_CodeableConcept(arena, cjson_productOrService);
	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "modifier");
	if(cjson_modifier)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifier = PushArray(arena, CodeableConcept, result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifier_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_ExplanationOfBenefit_AddItem_Detail_SubDetail->modifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "quantity");
	if(cjson_quantity)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_unitPrice =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "unitPrice");
	if(cjson_unitPrice)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->unitPrice = Deserialize_Money(arena, cjson_unitPrice);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "factor");
	if(cjson_factor)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_net =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "net");
	if(cjson_net)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->net = Deserialize_Money(arena, cjson_net);
	}
	cJSON *cjson_noteNumber =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "noteNumber");
	if(cjson_noteNumber)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->noteNumber_count = cJSON_GetArraySize(cjson_noteNumber);
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->noteNumber = PushArray(arena, fhir_positiveInt, result_ExplanationOfBenefit_AddItem_Detail_SubDetail->noteNumber_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail_SubDetail->noteNumber_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_noteNumber, i);
			result_ExplanationOfBenefit_AddItem_Detail_SubDetail->noteNumber[i] = (int)cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_adjudication =  cJSON_GetObjectItem(explanationOfBenefit_AddItem_Detail_SubDetail, "adjudication");
	if(cjson_adjudication)
	{
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->adjudication_count = cJSON_GetArraySize(cjson_adjudication);
		result_ExplanationOfBenefit_AddItem_Detail_SubDetail->adjudication = PushArray(arena, ExplanationOfBenefit_Item_Adjudication, result_ExplanationOfBenefit_AddItem_Detail_SubDetail->adjudication_count);
		for(int i = 0; i < result_ExplanationOfBenefit_AddItem_Detail_SubDetail->adjudication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_adjudication, i);
			result_ExplanationOfBenefit_AddItem_Detail_SubDetail->adjudication[i] = *Deserialize_ExplanationOfBenefit_Item_Adjudication(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_AddItem_Detail_SubDetail;
}

ExplanationOfBenefit_Total*
Deserialize_ExplanationOfBenefit_Total(Arena *arena, cJSON *explanationOfBenefit_Total)
{
	ExplanationOfBenefit_Total *result_ExplanationOfBenefit_Total = PushArray(arena, ExplanationOfBenefit_Total, 1);
	result_ExplanationOfBenefit_Total->resourceType = ResourceType::ExplanationOfBenefit_Total;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Total, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Total, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Total->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Total, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Total->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Total->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Total->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Total->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Total->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Total, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Total->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Total->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Total->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Total->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Total->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(explanationOfBenefit_Total, "category");
	if(cjson_category)
	{
		result_ExplanationOfBenefit_Total->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(explanationOfBenefit_Total, "amount");
	if(cjson_amount)
	{
		result_ExplanationOfBenefit_Total->amount = Deserialize_Money(arena, cjson_amount);
	}
	return result_ExplanationOfBenefit_Total;
}

ExplanationOfBenefit_Payment*
Deserialize_ExplanationOfBenefit_Payment(Arena *arena, cJSON *explanationOfBenefit_Payment)
{
	ExplanationOfBenefit_Payment *result_ExplanationOfBenefit_Payment = PushArray(arena, ExplanationOfBenefit_Payment, 1);
	result_ExplanationOfBenefit_Payment->resourceType = ResourceType::ExplanationOfBenefit_Payment;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_Payment->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_Payment->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_Payment->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_Payment->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Payment->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_Payment->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_Payment->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_Payment->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_Payment->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_Payment->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_Payment->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit_Payment->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_adjustment =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "adjustment");
	if(cjson_adjustment)
	{
		result_ExplanationOfBenefit_Payment->adjustment = Deserialize_Money(arena, cjson_adjustment);
	}
	cJSON *cjson_adjustmentReason =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "adjustmentReason");
	if(cjson_adjustmentReason)
	{
		result_ExplanationOfBenefit_Payment->adjustmentReason = Deserialize_CodeableConcept(arena, cjson_adjustmentReason);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "date");
	if(cjson_date)
	{
		result_ExplanationOfBenefit_Payment->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "amount");
	if(cjson_amount)
	{
		result_ExplanationOfBenefit_Payment->amount = Deserialize_Money(arena, cjson_amount);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(explanationOfBenefit_Payment, "identifier");
	if(cjson_identifier)
	{
		result_ExplanationOfBenefit_Payment->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	return result_ExplanationOfBenefit_Payment;
}

ExplanationOfBenefit_ProcessNote*
Deserialize_ExplanationOfBenefit_ProcessNote(Arena *arena, cJSON *explanationOfBenefit_ProcessNote)
{
	ExplanationOfBenefit_ProcessNote *result_ExplanationOfBenefit_ProcessNote = PushArray(arena, ExplanationOfBenefit_ProcessNote, 1);
	result_ExplanationOfBenefit_ProcessNote->resourceType = ResourceType::ExplanationOfBenefit_ProcessNote;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_ProcessNote->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_ProcessNote->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_ProcessNote->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_ProcessNote->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_ProcessNote->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_ProcessNote->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_ProcessNote->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_ProcessNote->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_ProcessNote->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_ProcessNote->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_ProcessNote->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_number =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "number");
	if(cjson_number)
	{
		result_ExplanationOfBenefit_ProcessNote->number = (int)cJSON_GetNumberValue(cjson_number);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit_ProcessNote->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "text");
	if(cjson_text)
	{
		result_ExplanationOfBenefit_ProcessNote->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(explanationOfBenefit_ProcessNote, "language");
	if(cjson_language)
	{
		result_ExplanationOfBenefit_ProcessNote->language = Deserialize_CodeableConcept(arena, cjson_language);
	}
	return result_ExplanationOfBenefit_ProcessNote;
}

ExplanationOfBenefit_BenefitBalance*
Deserialize_ExplanationOfBenefit_BenefitBalance(Arena *arena, cJSON *explanationOfBenefit_BenefitBalance)
{
	ExplanationOfBenefit_BenefitBalance *result_ExplanationOfBenefit_BenefitBalance = PushArray(arena, ExplanationOfBenefit_BenefitBalance, 1);
	result_ExplanationOfBenefit_BenefitBalance->resourceType = ResourceType::ExplanationOfBenefit_BenefitBalance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_BenefitBalance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_BenefitBalance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_BenefitBalance->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_BenefitBalance->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_BenefitBalance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_BenefitBalance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_BenefitBalance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_BenefitBalance->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_BenefitBalance->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_BenefitBalance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_BenefitBalance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "category");
	if(cjson_category)
	{
		result_ExplanationOfBenefit_BenefitBalance->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_excluded =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "excluded");
	if(cjson_excluded)
	{
		result_ExplanationOfBenefit_BenefitBalance->excluded = (boolean)cJSON_IsTrue(cjson_excluded);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "name");
	if(cjson_name)
	{
		result_ExplanationOfBenefit_BenefitBalance->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "description");
	if(cjson_description)
	{
		result_ExplanationOfBenefit_BenefitBalance->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_network =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "network");
	if(cjson_network)
	{
		result_ExplanationOfBenefit_BenefitBalance->network = Deserialize_CodeableConcept(arena, cjson_network);
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "unit");
	if(cjson_unit)
	{
		result_ExplanationOfBenefit_BenefitBalance->unit = Deserialize_CodeableConcept(arena, cjson_unit);
	}
	cJSON *cjson_term =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "term");
	if(cjson_term)
	{
		result_ExplanationOfBenefit_BenefitBalance->term = Deserialize_CodeableConcept(arena, cjson_term);
	}
	cJSON *cjson_financial =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance, "financial");
	if(cjson_financial)
	{
		result_ExplanationOfBenefit_BenefitBalance->financial_count = cJSON_GetArraySize(cjson_financial);
		result_ExplanationOfBenefit_BenefitBalance->financial = PushArray(arena, ExplanationOfBenefit_BenefitBalance_Financial, result_ExplanationOfBenefit_BenefitBalance->financial_count);
		for(int i = 0; i < result_ExplanationOfBenefit_BenefitBalance->financial_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_financial, i);
			result_ExplanationOfBenefit_BenefitBalance->financial[i] = *Deserialize_ExplanationOfBenefit_BenefitBalance_Financial(arena, internal);
		}

	}
	return result_ExplanationOfBenefit_BenefitBalance;
}

ExplanationOfBenefit_BenefitBalance_Financial*
Deserialize_ExplanationOfBenefit_BenefitBalance_Financial(Arena *arena, cJSON *explanationOfBenefit_BenefitBalance_Financial)
{
	ExplanationOfBenefit_BenefitBalance_Financial *result_ExplanationOfBenefit_BenefitBalance_Financial = PushArray(arena, ExplanationOfBenefit_BenefitBalance_Financial, 1);
	result_ExplanationOfBenefit_BenefitBalance_Financial->resourceType = ResourceType::ExplanationOfBenefit_BenefitBalance_Financial;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "id");
	if(cjson_id)
	{
		result_ExplanationOfBenefit_BenefitBalance_Financial->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "extension");
	if(cjson_extension)
	{
		result_ExplanationOfBenefit_BenefitBalance_Financial->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ExplanationOfBenefit_BenefitBalance_Financial->extension = PushArray(arena, Extension, result_ExplanationOfBenefit_BenefitBalance_Financial->extension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_BenefitBalance_Financial->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ExplanationOfBenefit_BenefitBalance_Financial->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ExplanationOfBenefit_BenefitBalance_Financial->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ExplanationOfBenefit_BenefitBalance_Financial->modifierExtension = PushArray(arena, Extension, result_ExplanationOfBenefit_BenefitBalance_Financial->modifierExtension_count);
		for(int i = 0; i < result_ExplanationOfBenefit_BenefitBalance_Financial->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ExplanationOfBenefit_BenefitBalance_Financial->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "type");
	if(cjson_type)
	{
		result_ExplanationOfBenefit_BenefitBalance_Financial->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueUnsignedInt");
		result_ExplanationOfBenefit_BenefitBalance_Financial->allowed.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ExplanationOfBenefit_BenefitBalance_Financial->allowed_type = ExplanationOfBenefit_BenefitBalance_Financial::AllowedType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueString");
		result_ExplanationOfBenefit_BenefitBalance_Financial->allowed.valueString = Str8C(cJSON_GetStringValue(item));
		result_ExplanationOfBenefit_BenefitBalance_Financial->allowed_type = ExplanationOfBenefit_BenefitBalance_Financial::AllowedType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueMoney");
		result_ExplanationOfBenefit_BenefitBalance_Financial->allowed.valueMoney = Deserialize_Money(arena, item);
		result_ExplanationOfBenefit_BenefitBalance_Financial->allowed_type = ExplanationOfBenefit_BenefitBalance_Financial::AllowedType::Money;
	}


	if((bool)cJSON_HasObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueUnsignedInt");
		result_ExplanationOfBenefit_BenefitBalance_Financial->used.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ExplanationOfBenefit_BenefitBalance_Financial->used_type = ExplanationOfBenefit_BenefitBalance_Financial::UsedType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(explanationOfBenefit_BenefitBalance_Financial, "valueMoney");
		result_ExplanationOfBenefit_BenefitBalance_Financial->used.valueMoney = Deserialize_Money(arena, item);
		result_ExplanationOfBenefit_BenefitBalance_Financial->used_type = ExplanationOfBenefit_BenefitBalance_Financial::UsedType::Money;
	}


	return result_ExplanationOfBenefit_BenefitBalance_Financial;
}

FamilyMemberHistory*
Deserialize_FamilyMemberHistory(Arena *arena, cJSON *familyMemberHistory)
{
	FamilyMemberHistory *result_FamilyMemberHistory = PushArray(arena, FamilyMemberHistory, 1);
	result_FamilyMemberHistory->resourceType = ResourceType::FamilyMemberHistory;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(familyMemberHistory, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(familyMemberHistory, "id");
	if(cjson_id)
	{
		result_FamilyMemberHistory->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(familyMemberHistory, "meta");
	if(cjson_meta)
	{
		result_FamilyMemberHistory->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(familyMemberHistory, "implicitRules");
	if(cjson_implicitRules)
	{
		result_FamilyMemberHistory->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(familyMemberHistory, "language");
	if(cjson_language)
	{
		result_FamilyMemberHistory->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(familyMemberHistory, "text");
	if(cjson_text)
	{
		result_FamilyMemberHistory->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(familyMemberHistory, "contained");
	if(cjson_contained)
	{
		result_FamilyMemberHistory->contained_count = cJSON_GetArraySize(cjson_contained);
		result_FamilyMemberHistory->contained = PushArray(arena, Resource, result_FamilyMemberHistory->contained_count);
		for(int i = 0; i < result_FamilyMemberHistory->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_FamilyMemberHistory->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(familyMemberHistory, "extension");
	if(cjson_extension)
	{
		result_FamilyMemberHistory->extension_count = cJSON_GetArraySize(cjson_extension);
		result_FamilyMemberHistory->extension = PushArray(arena, Extension, result_FamilyMemberHistory->extension_count);
		for(int i = 0; i < result_FamilyMemberHistory->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_FamilyMemberHistory->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(familyMemberHistory, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_FamilyMemberHistory->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_FamilyMemberHistory->modifierExtension = PushArray(arena, Extension, result_FamilyMemberHistory->modifierExtension_count);
		for(int i = 0; i < result_FamilyMemberHistory->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_FamilyMemberHistory->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(familyMemberHistory, "identifier");
	if(cjson_identifier)
	{
		result_FamilyMemberHistory->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_FamilyMemberHistory->identifier = PushArray(arena, Identifier, result_FamilyMemberHistory->identifier_count);
		for(int i = 0; i < result_FamilyMemberHistory->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_FamilyMemberHistory->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(familyMemberHistory, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_FamilyMemberHistory->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_FamilyMemberHistory->instantiatesCanonical = PushArray(arena, fhir_canonical, result_FamilyMemberHistory->instantiatesCanonical_count);
		for(int i = 0; i < result_FamilyMemberHistory->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_FamilyMemberHistory->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(familyMemberHistory, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_FamilyMemberHistory->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_FamilyMemberHistory->instantiatesUri = PushArray(arena, fhir_uri, result_FamilyMemberHistory->instantiatesUri_count);
		for(int i = 0; i < result_FamilyMemberHistory->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_FamilyMemberHistory->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(familyMemberHistory, "status");
	if(cjson_status)
	{
		result_FamilyMemberHistory->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_dataAbsentReason =  cJSON_GetObjectItem(familyMemberHistory, "dataAbsentReason");
	if(cjson_dataAbsentReason)
	{
		result_FamilyMemberHistory->dataAbsentReason = Deserialize_CodeableConcept(arena, cjson_dataAbsentReason);
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(familyMemberHistory, "patient");
	if(cjson_patient)
	{
		result_FamilyMemberHistory->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(familyMemberHistory, "date");
	if(cjson_date)
	{
		result_FamilyMemberHistory->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(familyMemberHistory, "name");
	if(cjson_name)
	{
		result_FamilyMemberHistory->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(familyMemberHistory, "relationship");
	if(cjson_relationship)
	{
		result_FamilyMemberHistory->relationship = Deserialize_CodeableConcept(arena, cjson_relationship);
	}
	cJSON *cjson_sex =  cJSON_GetObjectItem(familyMemberHistory, "sex");
	if(cjson_sex)
	{
		result_FamilyMemberHistory->sex = Deserialize_CodeableConcept(arena, cjson_sex);
	}
	if((bool)cJSON_HasObjectItem(familyMemberHistory, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valuePeriod");
		result_FamilyMemberHistory->born.valuePeriod = Deserialize_Period(arena, item);
		result_FamilyMemberHistory->born_type = FamilyMemberHistory::BornType::Period;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueDate");
		result_FamilyMemberHistory->born.valueDate = Str8C(cJSON_GetStringValue(item));
		result_FamilyMemberHistory->born_type = FamilyMemberHistory::BornType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueString");
		result_FamilyMemberHistory->born.valueString = Str8C(cJSON_GetStringValue(item));
		result_FamilyMemberHistory->born_type = FamilyMemberHistory::BornType::fhir_string;
	}


	if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueAge");
		result_FamilyMemberHistory->age.valueAge = Deserialize_Age(arena, item);
		result_FamilyMemberHistory->age_type = FamilyMemberHistory::AgeType::Age;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueRange");
		result_FamilyMemberHistory->age.valueRange = Deserialize_Range(arena, item);
		result_FamilyMemberHistory->age_type = FamilyMemberHistory::AgeType::Range;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueString");
		result_FamilyMemberHistory->age.valueString = Str8C(cJSON_GetStringValue(item));
		result_FamilyMemberHistory->age_type = FamilyMemberHistory::AgeType::fhir_string;
	}


	cJSON *cjson_estimatedAge =  cJSON_GetObjectItem(familyMemberHistory, "estimatedAge");
	if(cjson_estimatedAge)
	{
		result_FamilyMemberHistory->estimatedAge = (boolean)cJSON_IsTrue(cjson_estimatedAge);
	}
	if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueBoolean");
		result_FamilyMemberHistory->deceased.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_FamilyMemberHistory->deceased_type = FamilyMemberHistory::DeceasedType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueAge");
		result_FamilyMemberHistory->deceased.valueAge = Deserialize_Age(arena, item);
		result_FamilyMemberHistory->deceased_type = FamilyMemberHistory::DeceasedType::Age;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueRange");
		result_FamilyMemberHistory->deceased.valueRange = Deserialize_Range(arena, item);
		result_FamilyMemberHistory->deceased_type = FamilyMemberHistory::DeceasedType::Range;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueDate");
		result_FamilyMemberHistory->deceased.valueDate = Str8C(cJSON_GetStringValue(item));
		result_FamilyMemberHistory->deceased_type = FamilyMemberHistory::DeceasedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory, "valueString");
		result_FamilyMemberHistory->deceased.valueString = Str8C(cJSON_GetStringValue(item));
		result_FamilyMemberHistory->deceased_type = FamilyMemberHistory::DeceasedType::fhir_string;
	}


	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(familyMemberHistory, "reasonCode");
	if(cjson_reasonCode)
	{
		result_FamilyMemberHistory->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_FamilyMemberHistory->reasonCode = PushArray(arena, CodeableConcept, result_FamilyMemberHistory->reasonCode_count);
		for(int i = 0; i < result_FamilyMemberHistory->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_FamilyMemberHistory->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(familyMemberHistory, "reasonReference");
	if(cjson_reasonReference)
	{
		result_FamilyMemberHistory->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_FamilyMemberHistory->reasonReference = PushArray(arena, Reference, result_FamilyMemberHistory->reasonReference_count);
		for(int i = 0; i < result_FamilyMemberHistory->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_FamilyMemberHistory->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(familyMemberHistory, "note");
	if(cjson_note)
	{
		result_FamilyMemberHistory->note_count = cJSON_GetArraySize(cjson_note);
		result_FamilyMemberHistory->note = PushArray(arena, Annotation, result_FamilyMemberHistory->note_count);
		for(int i = 0; i < result_FamilyMemberHistory->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_FamilyMemberHistory->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(familyMemberHistory, "condition");
	if(cjson_condition)
	{
		result_FamilyMemberHistory->condition_count = cJSON_GetArraySize(cjson_condition);
		result_FamilyMemberHistory->condition = PushArray(arena, FamilyMemberHistory_Condition, result_FamilyMemberHistory->condition_count);
		for(int i = 0; i < result_FamilyMemberHistory->condition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_condition, i);
			result_FamilyMemberHistory->condition[i] = *Deserialize_FamilyMemberHistory_Condition(arena, internal);
		}

	}
	return result_FamilyMemberHistory;
}

FamilyMemberHistory_Condition*
Deserialize_FamilyMemberHistory_Condition(Arena *arena, cJSON *familyMemberHistory_Condition)
{
	FamilyMemberHistory_Condition *result_FamilyMemberHistory_Condition = PushArray(arena, FamilyMemberHistory_Condition, 1);
	result_FamilyMemberHistory_Condition->resourceType = ResourceType::FamilyMemberHistory_Condition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(familyMemberHistory_Condition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(familyMemberHistory_Condition, "id");
	if(cjson_id)
	{
		result_FamilyMemberHistory_Condition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(familyMemberHistory_Condition, "extension");
	if(cjson_extension)
	{
		result_FamilyMemberHistory_Condition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_FamilyMemberHistory_Condition->extension = PushArray(arena, Extension, result_FamilyMemberHistory_Condition->extension_count);
		for(int i = 0; i < result_FamilyMemberHistory_Condition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_FamilyMemberHistory_Condition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(familyMemberHistory_Condition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_FamilyMemberHistory_Condition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_FamilyMemberHistory_Condition->modifierExtension = PushArray(arena, Extension, result_FamilyMemberHistory_Condition->modifierExtension_count);
		for(int i = 0; i < result_FamilyMemberHistory_Condition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_FamilyMemberHistory_Condition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(familyMemberHistory_Condition, "code");
	if(cjson_code)
	{
		result_FamilyMemberHistory_Condition->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(familyMemberHistory_Condition, "outcome");
	if(cjson_outcome)
	{
		result_FamilyMemberHistory_Condition->outcome = Deserialize_CodeableConcept(arena, cjson_outcome);
	}
	cJSON *cjson_contributedToDeath =  cJSON_GetObjectItem(familyMemberHistory_Condition, "contributedToDeath");
	if(cjson_contributedToDeath)
	{
		result_FamilyMemberHistory_Condition->contributedToDeath = (boolean)cJSON_IsTrue(cjson_contributedToDeath);
	}
	if((bool)cJSON_HasObjectItem(familyMemberHistory_Condition, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory_Condition, "valueAge");
		result_FamilyMemberHistory_Condition->onset.valueAge = Deserialize_Age(arena, item);
		result_FamilyMemberHistory_Condition->onset_type = FamilyMemberHistory_Condition::OnsetType::Age;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory_Condition, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory_Condition, "valueRange");
		result_FamilyMemberHistory_Condition->onset.valueRange = Deserialize_Range(arena, item);
		result_FamilyMemberHistory_Condition->onset_type = FamilyMemberHistory_Condition::OnsetType::Range;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory_Condition, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory_Condition, "valuePeriod");
		result_FamilyMemberHistory_Condition->onset.valuePeriod = Deserialize_Period(arena, item);
		result_FamilyMemberHistory_Condition->onset_type = FamilyMemberHistory_Condition::OnsetType::Period;
	}
	else if((bool)cJSON_HasObjectItem(familyMemberHistory_Condition, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(familyMemberHistory_Condition, "valueString");
		result_FamilyMemberHistory_Condition->onset.valueString = Str8C(cJSON_GetStringValue(item));
		result_FamilyMemberHistory_Condition->onset_type = FamilyMemberHistory_Condition::OnsetType::fhir_string;
	}


	cJSON *cjson_note =  cJSON_GetObjectItem(familyMemberHistory_Condition, "note");
	if(cjson_note)
	{
		result_FamilyMemberHistory_Condition->note_count = cJSON_GetArraySize(cjson_note);
		result_FamilyMemberHistory_Condition->note = PushArray(arena, Annotation, result_FamilyMemberHistory_Condition->note_count);
		for(int i = 0; i < result_FamilyMemberHistory_Condition->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_FamilyMemberHistory_Condition->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_FamilyMemberHistory_Condition;
}

Flag*
Deserialize_Flag(Arena *arena, cJSON *flag)
{
	Flag *result_Flag = PushArray(arena, Flag, 1);
	result_Flag->resourceType = ResourceType::Flag;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(flag, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(flag, "id");
	if(cjson_id)
	{
		result_Flag->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(flag, "meta");
	if(cjson_meta)
	{
		result_Flag->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(flag, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Flag->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(flag, "language");
	if(cjson_language)
	{
		result_Flag->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(flag, "text");
	if(cjson_text)
	{
		result_Flag->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(flag, "contained");
	if(cjson_contained)
	{
		result_Flag->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Flag->contained = PushArray(arena, Resource, result_Flag->contained_count);
		for(int i = 0; i < result_Flag->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Flag->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(flag, "extension");
	if(cjson_extension)
	{
		result_Flag->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Flag->extension = PushArray(arena, Extension, result_Flag->extension_count);
		for(int i = 0; i < result_Flag->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Flag->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(flag, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Flag->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Flag->modifierExtension = PushArray(arena, Extension, result_Flag->modifierExtension_count);
		for(int i = 0; i < result_Flag->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Flag->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(flag, "identifier");
	if(cjson_identifier)
	{
		result_Flag->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Flag->identifier = PushArray(arena, Identifier, result_Flag->identifier_count);
		for(int i = 0; i < result_Flag->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Flag->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(flag, "status");
	if(cjson_status)
	{
		result_Flag->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(flag, "category");
	if(cjson_category)
	{
		result_Flag->category_count = cJSON_GetArraySize(cjson_category);
		result_Flag->category = PushArray(arena, CodeableConcept, result_Flag->category_count);
		for(int i = 0; i < result_Flag->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Flag->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(flag, "code");
	if(cjson_code)
	{
		result_Flag->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(flag, "subject");
	if(cjson_subject)
	{
		result_Flag->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(flag, "period");
	if(cjson_period)
	{
		result_Flag->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(flag, "encounter");
	if(cjson_encounter)
	{
		result_Flag->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(flag, "author");
	if(cjson_author)
	{
		result_Flag->author = Deserialize_Reference(arena, cjson_author);
	}
	return result_Flag;
}

Goal*
Deserialize_Goal(Arena *arena, cJSON *goal)
{
	Goal *result_Goal = PushArray(arena, Goal, 1);
	result_Goal->resourceType = ResourceType::Goal;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(goal, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(goal, "id");
	if(cjson_id)
	{
		result_Goal->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(goal, "meta");
	if(cjson_meta)
	{
		result_Goal->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(goal, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Goal->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(goal, "language");
	if(cjson_language)
	{
		result_Goal->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(goal, "text");
	if(cjson_text)
	{
		result_Goal->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(goal, "contained");
	if(cjson_contained)
	{
		result_Goal->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Goal->contained = PushArray(arena, Resource, result_Goal->contained_count);
		for(int i = 0; i < result_Goal->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Goal->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(goal, "extension");
	if(cjson_extension)
	{
		result_Goal->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Goal->extension = PushArray(arena, Extension, result_Goal->extension_count);
		for(int i = 0; i < result_Goal->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Goal->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(goal, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Goal->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Goal->modifierExtension = PushArray(arena, Extension, result_Goal->modifierExtension_count);
		for(int i = 0; i < result_Goal->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Goal->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(goal, "identifier");
	if(cjson_identifier)
	{
		result_Goal->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Goal->identifier = PushArray(arena, Identifier, result_Goal->identifier_count);
		for(int i = 0; i < result_Goal->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Goal->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_lifecycleStatus =  cJSON_GetObjectItem(goal, "lifecycleStatus");
	if(cjson_lifecycleStatus)
	{
		result_Goal->lifecycleStatus = Str8C(cJSON_GetStringValue(cjson_lifecycleStatus));
	}
	cJSON *cjson_achievementStatus =  cJSON_GetObjectItem(goal, "achievementStatus");
	if(cjson_achievementStatus)
	{
		result_Goal->achievementStatus = Deserialize_CodeableConcept(arena, cjson_achievementStatus);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(goal, "category");
	if(cjson_category)
	{
		result_Goal->category_count = cJSON_GetArraySize(cjson_category);
		result_Goal->category = PushArray(arena, CodeableConcept, result_Goal->category_count);
		for(int i = 0; i < result_Goal->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Goal->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(goal, "priority");
	if(cjson_priority)
	{
		result_Goal->priority = Deserialize_CodeableConcept(arena, cjson_priority);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(goal, "description");
	if(cjson_description)
	{
		result_Goal->description = Deserialize_CodeableConcept(arena, cjson_description);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(goal, "subject");
	if(cjson_subject)
	{
		result_Goal->subject = Deserialize_Reference(arena, cjson_subject);
	}
	if((bool)cJSON_HasObjectItem(goal, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal, "valueDate");
		result_Goal->start.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Goal->start_type = Goal::StartType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(goal, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal, "valueCodeableConcept");
		result_Goal->start.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Goal->start_type = Goal::StartType::CodeableConcept;
	}


	cJSON *cjson_target =  cJSON_GetObjectItem(goal, "target");
	if(cjson_target)
	{
		result_Goal->target_count = cJSON_GetArraySize(cjson_target);
		result_Goal->target = PushArray(arena, Goal_Target, result_Goal->target_count);
		for(int i = 0; i < result_Goal->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_Goal->target[i] = *Deserialize_Goal_Target(arena, internal);
		}

	}
	cJSON *cjson_statusDate =  cJSON_GetObjectItem(goal, "statusDate");
	if(cjson_statusDate)
	{
		result_Goal->statusDate = Str8C(cJSON_GetStringValue(cjson_statusDate));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(goal, "statusReason");
	if(cjson_statusReason)
	{
		result_Goal->statusReason = Str8C(cJSON_GetStringValue(cjson_statusReason));
	}
	cJSON *cjson_expressedBy =  cJSON_GetObjectItem(goal, "expressedBy");
	if(cjson_expressedBy)
	{
		result_Goal->expressedBy = Deserialize_Reference(arena, cjson_expressedBy);
	}
	cJSON *cjson_addresses =  cJSON_GetObjectItem(goal, "addresses");
	if(cjson_addresses)
	{
		result_Goal->addresses_count = cJSON_GetArraySize(cjson_addresses);
		result_Goal->addresses = PushArray(arena, Reference, result_Goal->addresses_count);
		for(int i = 0; i < result_Goal->addresses_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_addresses, i);
			result_Goal->addresses[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(goal, "note");
	if(cjson_note)
	{
		result_Goal->note_count = cJSON_GetArraySize(cjson_note);
		result_Goal->note = PushArray(arena, Annotation, result_Goal->note_count);
		for(int i = 0; i < result_Goal->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Goal->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_outcomeCode =  cJSON_GetObjectItem(goal, "outcomeCode");
	if(cjson_outcomeCode)
	{
		result_Goal->outcomeCode_count = cJSON_GetArraySize(cjson_outcomeCode);
		result_Goal->outcomeCode = PushArray(arena, CodeableConcept, result_Goal->outcomeCode_count);
		for(int i = 0; i < result_Goal->outcomeCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_outcomeCode, i);
			result_Goal->outcomeCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_outcomeReference =  cJSON_GetObjectItem(goal, "outcomeReference");
	if(cjson_outcomeReference)
	{
		result_Goal->outcomeReference_count = cJSON_GetArraySize(cjson_outcomeReference);
		result_Goal->outcomeReference = PushArray(arena, Reference, result_Goal->outcomeReference_count);
		for(int i = 0; i < result_Goal->outcomeReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_outcomeReference, i);
			result_Goal->outcomeReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Goal;
}

Goal_Target*
Deserialize_Goal_Target(Arena *arena, cJSON *goal_Target)
{
	Goal_Target *result_Goal_Target = PushArray(arena, Goal_Target, 1);
	result_Goal_Target->resourceType = ResourceType::Goal_Target;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(goal_Target, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(goal_Target, "id");
	if(cjson_id)
	{
		result_Goal_Target->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(goal_Target, "extension");
	if(cjson_extension)
	{
		result_Goal_Target->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Goal_Target->extension = PushArray(arena, Extension, result_Goal_Target->extension_count);
		for(int i = 0; i < result_Goal_Target->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Goal_Target->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(goal_Target, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Goal_Target->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Goal_Target->modifierExtension = PushArray(arena, Extension, result_Goal_Target->modifierExtension_count);
		for(int i = 0; i < result_Goal_Target->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Goal_Target->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_measure =  cJSON_GetObjectItem(goal_Target, "measure");
	if(cjson_measure)
	{
		result_Goal_Target->measure = Deserialize_CodeableConcept(arena, cjson_measure);
	}
	if((bool)cJSON_HasObjectItem(goal_Target, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueQuantity");
		result_Goal_Target->detail.valueQuantity = Deserialize_Quantity(arena, item);
		result_Goal_Target->detail_type = Goal_Target::DetailType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(goal_Target, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueRange");
		result_Goal_Target->detail.valueRange = Deserialize_Range(arena, item);
		result_Goal_Target->detail_type = Goal_Target::DetailType::Range;
	}
	else if((bool)cJSON_HasObjectItem(goal_Target, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueCodeableConcept");
		result_Goal_Target->detail.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Goal_Target->detail_type = Goal_Target::DetailType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(goal_Target, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueString");
		result_Goal_Target->detail.valueString = Str8C(cJSON_GetStringValue(item));
		result_Goal_Target->detail_type = Goal_Target::DetailType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(goal_Target, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueBoolean");
		result_Goal_Target->detail.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Goal_Target->detail_type = Goal_Target::DetailType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(goal_Target, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueInteger");
		result_Goal_Target->detail.valueInteger = Deserialize_Integer(arena, item);
		result_Goal_Target->detail_type = Goal_Target::DetailType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(goal_Target, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueRatio");
		result_Goal_Target->detail.valueRatio = Deserialize_Ratio(arena, item);
		result_Goal_Target->detail_type = Goal_Target::DetailType::Ratio;
	}


	if((bool)cJSON_HasObjectItem(goal_Target, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueDate");
		result_Goal_Target->due.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Goal_Target->due_type = Goal_Target::DueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(goal_Target, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(goal_Target, "valueDuration");
		result_Goal_Target->due.valueDuration = Deserialize_Duration(arena, item);
		result_Goal_Target->due_type = Goal_Target::DueType::Duration;
	}


	return result_Goal_Target;
}

GraphDefinition*
Deserialize_GraphDefinition(Arena *arena, cJSON *graphDefinition)
{
	GraphDefinition *result_GraphDefinition = PushArray(arena, GraphDefinition, 1);
	result_GraphDefinition->resourceType = ResourceType::GraphDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(graphDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(graphDefinition, "id");
	if(cjson_id)
	{
		result_GraphDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(graphDefinition, "meta");
	if(cjson_meta)
	{
		result_GraphDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(graphDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_GraphDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(graphDefinition, "language");
	if(cjson_language)
	{
		result_GraphDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(graphDefinition, "text");
	if(cjson_text)
	{
		result_GraphDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(graphDefinition, "contained");
	if(cjson_contained)
	{
		result_GraphDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_GraphDefinition->contained = PushArray(arena, Resource, result_GraphDefinition->contained_count);
		for(int i = 0; i < result_GraphDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_GraphDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(graphDefinition, "extension");
	if(cjson_extension)
	{
		result_GraphDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_GraphDefinition->extension = PushArray(arena, Extension, result_GraphDefinition->extension_count);
		for(int i = 0; i < result_GraphDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_GraphDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(graphDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_GraphDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_GraphDefinition->modifierExtension = PushArray(arena, Extension, result_GraphDefinition->modifierExtension_count);
		for(int i = 0; i < result_GraphDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_GraphDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(graphDefinition, "url");
	if(cjson_url)
	{
		result_GraphDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(graphDefinition, "version");
	if(cjson_version)
	{
		result_GraphDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(graphDefinition, "name");
	if(cjson_name)
	{
		result_GraphDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(graphDefinition, "status");
	if(cjson_status)
	{
		result_GraphDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(graphDefinition, "experimental");
	if(cjson_experimental)
	{
		result_GraphDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(graphDefinition, "date");
	if(cjson_date)
	{
		result_GraphDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(graphDefinition, "publisher");
	if(cjson_publisher)
	{
		result_GraphDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(graphDefinition, "contact");
	if(cjson_contact)
	{
		result_GraphDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_GraphDefinition->contact = PushArray(arena, ContactDetail, result_GraphDefinition->contact_count);
		for(int i = 0; i < result_GraphDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_GraphDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(graphDefinition, "description");
	if(cjson_description)
	{
		result_GraphDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(graphDefinition, "useContext");
	if(cjson_useContext)
	{
		result_GraphDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_GraphDefinition->useContext = PushArray(arena, UsageContext, result_GraphDefinition->useContext_count);
		for(int i = 0; i < result_GraphDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_GraphDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(graphDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_GraphDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_GraphDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_GraphDefinition->jurisdiction_count);
		for(int i = 0; i < result_GraphDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_GraphDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(graphDefinition, "purpose");
	if(cjson_purpose)
	{
		result_GraphDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_start =  cJSON_GetObjectItem(graphDefinition, "start");
	if(cjson_start)
	{
		result_GraphDefinition->start = Str8C(cJSON_GetStringValue(cjson_start));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(graphDefinition, "profile");
	if(cjson_profile)
	{
		result_GraphDefinition->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	cJSON *cjson_link =  cJSON_GetObjectItem(graphDefinition, "link");
	if(cjson_link)
	{
		result_GraphDefinition->link_count = cJSON_GetArraySize(cjson_link);
		result_GraphDefinition->link = PushArray(arena, GraphDefinition_Link, result_GraphDefinition->link_count);
		for(int i = 0; i < result_GraphDefinition->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_GraphDefinition->link[i] = *Deserialize_GraphDefinition_Link(arena, internal);
		}

	}
	return result_GraphDefinition;
}

GraphDefinition_Link*
Deserialize_GraphDefinition_Link(Arena *arena, cJSON *graphDefinition_Link)
{
	GraphDefinition_Link *result_GraphDefinition_Link = PushArray(arena, GraphDefinition_Link, 1);
	result_GraphDefinition_Link->resourceType = ResourceType::GraphDefinition_Link;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(graphDefinition_Link, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(graphDefinition_Link, "id");
	if(cjson_id)
	{
		result_GraphDefinition_Link->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(graphDefinition_Link, "extension");
	if(cjson_extension)
	{
		result_GraphDefinition_Link->extension_count = cJSON_GetArraySize(cjson_extension);
		result_GraphDefinition_Link->extension = PushArray(arena, Extension, result_GraphDefinition_Link->extension_count);
		for(int i = 0; i < result_GraphDefinition_Link->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_GraphDefinition_Link->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(graphDefinition_Link, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_GraphDefinition_Link->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_GraphDefinition_Link->modifierExtension = PushArray(arena, Extension, result_GraphDefinition_Link->modifierExtension_count);
		for(int i = 0; i < result_GraphDefinition_Link->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_GraphDefinition_Link->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(graphDefinition_Link, "path");
	if(cjson_path)
	{
		result_GraphDefinition_Link->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_sliceName =  cJSON_GetObjectItem(graphDefinition_Link, "sliceName");
	if(cjson_sliceName)
	{
		result_GraphDefinition_Link->sliceName = Str8C(cJSON_GetStringValue(cjson_sliceName));
	}
	cJSON *cjson_min =  cJSON_GetObjectItem(graphDefinition_Link, "min");
	if(cjson_min)
	{
		result_GraphDefinition_Link->min = Deserialize_Integer(arena, cjson_min);
	}
	cJSON *cjson_max =  cJSON_GetObjectItem(graphDefinition_Link, "max");
	if(cjson_max)
	{
		result_GraphDefinition_Link->max = Str8C(cJSON_GetStringValue(cjson_max));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(graphDefinition_Link, "description");
	if(cjson_description)
	{
		result_GraphDefinition_Link->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_target =  cJSON_GetObjectItem(graphDefinition_Link, "target");
	if(cjson_target)
	{
		result_GraphDefinition_Link->target_count = cJSON_GetArraySize(cjson_target);
		result_GraphDefinition_Link->target = PushArray(arena, GraphDefinition_Link_Target, result_GraphDefinition_Link->target_count);
		for(int i = 0; i < result_GraphDefinition_Link->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_GraphDefinition_Link->target[i] = *Deserialize_GraphDefinition_Link_Target(arena, internal);
		}

	}
	return result_GraphDefinition_Link;
}

GraphDefinition_Link_Target*
Deserialize_GraphDefinition_Link_Target(Arena *arena, cJSON *graphDefinition_Link_Target)
{
	GraphDefinition_Link_Target *result_GraphDefinition_Link_Target = PushArray(arena, GraphDefinition_Link_Target, 1);
	result_GraphDefinition_Link_Target->resourceType = ResourceType::GraphDefinition_Link_Target;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(graphDefinition_Link_Target, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(graphDefinition_Link_Target, "id");
	if(cjson_id)
	{
		result_GraphDefinition_Link_Target->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(graphDefinition_Link_Target, "extension");
	if(cjson_extension)
	{
		result_GraphDefinition_Link_Target->extension_count = cJSON_GetArraySize(cjson_extension);
		result_GraphDefinition_Link_Target->extension = PushArray(arena, Extension, result_GraphDefinition_Link_Target->extension_count);
		for(int i = 0; i < result_GraphDefinition_Link_Target->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_GraphDefinition_Link_Target->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(graphDefinition_Link_Target, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_GraphDefinition_Link_Target->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_GraphDefinition_Link_Target->modifierExtension = PushArray(arena, Extension, result_GraphDefinition_Link_Target->modifierExtension_count);
		for(int i = 0; i < result_GraphDefinition_Link_Target->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_GraphDefinition_Link_Target->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(graphDefinition_Link_Target, "type");
	if(cjson_type)
	{
		result_GraphDefinition_Link_Target->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_params =  cJSON_GetObjectItem(graphDefinition_Link_Target, "params");
	if(cjson_params)
	{
		result_GraphDefinition_Link_Target->params = Str8C(cJSON_GetStringValue(cjson_params));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(graphDefinition_Link_Target, "profile");
	if(cjson_profile)
	{
		result_GraphDefinition_Link_Target->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	cJSON *cjson_compartment =  cJSON_GetObjectItem(graphDefinition_Link_Target, "compartment");
	if(cjson_compartment)
	{
		result_GraphDefinition_Link_Target->compartment_count = cJSON_GetArraySize(cjson_compartment);
		result_GraphDefinition_Link_Target->compartment = PushArray(arena, GraphDefinition_Link_Target_Compartment, result_GraphDefinition_Link_Target->compartment_count);
		for(int i = 0; i < result_GraphDefinition_Link_Target->compartment_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_compartment, i);
			result_GraphDefinition_Link_Target->compartment[i] = *Deserialize_GraphDefinition_Link_Target_Compartment(arena, internal);
		}

	}
	cJSON *cjson_link =  cJSON_GetObjectItem(graphDefinition_Link_Target, "link");
	if(cjson_link)
	{
		result_GraphDefinition_Link_Target->link_count = cJSON_GetArraySize(cjson_link);
		result_GraphDefinition_Link_Target->link = PushArray(arena, GraphDefinition_Link, result_GraphDefinition_Link_Target->link_count);
		for(int i = 0; i < result_GraphDefinition_Link_Target->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_GraphDefinition_Link_Target->link[i] = *Deserialize_GraphDefinition_Link(arena, internal);
		}

	}
	return result_GraphDefinition_Link_Target;
}

GraphDefinition_Link_Target_Compartment*
Deserialize_GraphDefinition_Link_Target_Compartment(Arena *arena, cJSON *graphDefinition_Link_Target_Compartment)
{
	GraphDefinition_Link_Target_Compartment *result_GraphDefinition_Link_Target_Compartment = PushArray(arena, GraphDefinition_Link_Target_Compartment, 1);
	result_GraphDefinition_Link_Target_Compartment->resourceType = ResourceType::GraphDefinition_Link_Target_Compartment;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "id");
	if(cjson_id)
	{
		result_GraphDefinition_Link_Target_Compartment->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "extension");
	if(cjson_extension)
	{
		result_GraphDefinition_Link_Target_Compartment->extension_count = cJSON_GetArraySize(cjson_extension);
		result_GraphDefinition_Link_Target_Compartment->extension = PushArray(arena, Extension, result_GraphDefinition_Link_Target_Compartment->extension_count);
		for(int i = 0; i < result_GraphDefinition_Link_Target_Compartment->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_GraphDefinition_Link_Target_Compartment->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_GraphDefinition_Link_Target_Compartment->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_GraphDefinition_Link_Target_Compartment->modifierExtension = PushArray(arena, Extension, result_GraphDefinition_Link_Target_Compartment->modifierExtension_count);
		for(int i = 0; i < result_GraphDefinition_Link_Target_Compartment->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_GraphDefinition_Link_Target_Compartment->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_use =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "use");
	if(cjson_use)
	{
		result_GraphDefinition_Link_Target_Compartment->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "code");
	if(cjson_code)
	{
		result_GraphDefinition_Link_Target_Compartment->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_rule =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "rule");
	if(cjson_rule)
	{
		result_GraphDefinition_Link_Target_Compartment->rule = Str8C(cJSON_GetStringValue(cjson_rule));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "expression");
	if(cjson_expression)
	{
		result_GraphDefinition_Link_Target_Compartment->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(graphDefinition_Link_Target_Compartment, "description");
	if(cjson_description)
	{
		result_GraphDefinition_Link_Target_Compartment->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_GraphDefinition_Link_Target_Compartment;
}

Group*
Deserialize_Group(Arena *arena, cJSON *group)
{
	Group *result_Group = PushArray(arena, Group, 1);
	result_Group->resourceType = ResourceType::Group;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(group, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(group, "id");
	if(cjson_id)
	{
		result_Group->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(group, "meta");
	if(cjson_meta)
	{
		result_Group->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(group, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Group->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(group, "language");
	if(cjson_language)
	{
		result_Group->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(group, "text");
	if(cjson_text)
	{
		result_Group->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(group, "contained");
	if(cjson_contained)
	{
		result_Group->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Group->contained = PushArray(arena, Resource, result_Group->contained_count);
		for(int i = 0; i < result_Group->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Group->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(group, "extension");
	if(cjson_extension)
	{
		result_Group->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Group->extension = PushArray(arena, Extension, result_Group->extension_count);
		for(int i = 0; i < result_Group->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Group->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(group, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Group->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Group->modifierExtension = PushArray(arena, Extension, result_Group->modifierExtension_count);
		for(int i = 0; i < result_Group->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Group->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(group, "identifier");
	if(cjson_identifier)
	{
		result_Group->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Group->identifier = PushArray(arena, Identifier, result_Group->identifier_count);
		for(int i = 0; i < result_Group->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Group->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(group, "active");
	if(cjson_active)
	{
		result_Group->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(group, "type");
	if(cjson_type)
	{
		result_Group->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_actual =  cJSON_GetObjectItem(group, "actual");
	if(cjson_actual)
	{
		result_Group->actual = (boolean)cJSON_IsTrue(cjson_actual);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(group, "code");
	if(cjson_code)
	{
		result_Group->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(group, "name");
	if(cjson_name)
	{
		result_Group->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(group, "quantity");
	if(cjson_quantity)
	{
		result_Group->quantity = (int)cJSON_GetNumberValue(cjson_quantity);
	}
	cJSON *cjson_managingEntity =  cJSON_GetObjectItem(group, "managingEntity");
	if(cjson_managingEntity)
	{
		result_Group->managingEntity = Deserialize_Reference(arena, cjson_managingEntity);
	}
	cJSON *cjson_characteristic =  cJSON_GetObjectItem(group, "characteristic");
	if(cjson_characteristic)
	{
		result_Group->characteristic_count = cJSON_GetArraySize(cjson_characteristic);
		result_Group->characteristic = PushArray(arena, Group_Characteristic, result_Group->characteristic_count);
		for(int i = 0; i < result_Group->characteristic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_characteristic, i);
			result_Group->characteristic[i] = *Deserialize_Group_Characteristic(arena, internal);
		}

	}
	cJSON *cjson_member =  cJSON_GetObjectItem(group, "member");
	if(cjson_member)
	{
		result_Group->member_count = cJSON_GetArraySize(cjson_member);
		result_Group->member = PushArray(arena, Group_Member, result_Group->member_count);
		for(int i = 0; i < result_Group->member_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_member, i);
			result_Group->member[i] = *Deserialize_Group_Member(arena, internal);
		}

	}
	return result_Group;
}

Group_Characteristic*
Deserialize_Group_Characteristic(Arena *arena, cJSON *group_Characteristic)
{
	Group_Characteristic *result_Group_Characteristic = PushArray(arena, Group_Characteristic, 1);
	result_Group_Characteristic->resourceType = ResourceType::Group_Characteristic;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(group_Characteristic, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(group_Characteristic, "id");
	if(cjson_id)
	{
		result_Group_Characteristic->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(group_Characteristic, "extension");
	if(cjson_extension)
	{
		result_Group_Characteristic->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Group_Characteristic->extension = PushArray(arena, Extension, result_Group_Characteristic->extension_count);
		for(int i = 0; i < result_Group_Characteristic->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Group_Characteristic->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(group_Characteristic, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Group_Characteristic->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Group_Characteristic->modifierExtension = PushArray(arena, Extension, result_Group_Characteristic->modifierExtension_count);
		for(int i = 0; i < result_Group_Characteristic->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Group_Characteristic->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(group_Characteristic, "code");
	if(cjson_code)
	{
		result_Group_Characteristic->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	if((bool)cJSON_HasObjectItem(group_Characteristic, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(group_Characteristic, "valueCodeableConcept");
		result_Group_Characteristic->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Group_Characteristic->value_type = Group_Characteristic::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(group_Characteristic, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(group_Characteristic, "valueBoolean");
		result_Group_Characteristic->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Group_Characteristic->value_type = Group_Characteristic::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(group_Characteristic, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(group_Characteristic, "valueQuantity");
		result_Group_Characteristic->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Group_Characteristic->value_type = Group_Characteristic::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(group_Characteristic, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(group_Characteristic, "valueRange");
		result_Group_Characteristic->value.valueRange = Deserialize_Range(arena, item);
		result_Group_Characteristic->value_type = Group_Characteristic::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(group_Characteristic, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(group_Characteristic, "valueReference");
		result_Group_Characteristic->value.valueReference = Deserialize_Reference(arena, item);
		result_Group_Characteristic->value_type = Group_Characteristic::ValueType::Reference;
	}


	cJSON *cjson_exclude =  cJSON_GetObjectItem(group_Characteristic, "exclude");
	if(cjson_exclude)
	{
		result_Group_Characteristic->exclude = (boolean)cJSON_IsTrue(cjson_exclude);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(group_Characteristic, "period");
	if(cjson_period)
	{
		result_Group_Characteristic->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Group_Characteristic;
}

Group_Member*
Deserialize_Group_Member(Arena *arena, cJSON *group_Member)
{
	Group_Member *result_Group_Member = PushArray(arena, Group_Member, 1);
	result_Group_Member->resourceType = ResourceType::Group_Member;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(group_Member, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(group_Member, "id");
	if(cjson_id)
	{
		result_Group_Member->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(group_Member, "extension");
	if(cjson_extension)
	{
		result_Group_Member->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Group_Member->extension = PushArray(arena, Extension, result_Group_Member->extension_count);
		for(int i = 0; i < result_Group_Member->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Group_Member->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(group_Member, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Group_Member->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Group_Member->modifierExtension = PushArray(arena, Extension, result_Group_Member->modifierExtension_count);
		for(int i = 0; i < result_Group_Member->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Group_Member->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_entity =  cJSON_GetObjectItem(group_Member, "entity");
	if(cjson_entity)
	{
		result_Group_Member->entity = Deserialize_Reference(arena, cjson_entity);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(group_Member, "period");
	if(cjson_period)
	{
		result_Group_Member->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_inactive =  cJSON_GetObjectItem(group_Member, "inactive");
	if(cjson_inactive)
	{
		result_Group_Member->inactive = (boolean)cJSON_IsTrue(cjson_inactive);
	}
	return result_Group_Member;
}

GuidanceResponse*
Deserialize_GuidanceResponse(Arena *arena, cJSON *guidanceResponse)
{
	GuidanceResponse *result_GuidanceResponse = PushArray(arena, GuidanceResponse, 1);
	result_GuidanceResponse->resourceType = ResourceType::GuidanceResponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(guidanceResponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(guidanceResponse, "id");
	if(cjson_id)
	{
		result_GuidanceResponse->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(guidanceResponse, "meta");
	if(cjson_meta)
	{
		result_GuidanceResponse->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(guidanceResponse, "implicitRules");
	if(cjson_implicitRules)
	{
		result_GuidanceResponse->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(guidanceResponse, "language");
	if(cjson_language)
	{
		result_GuidanceResponse->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(guidanceResponse, "text");
	if(cjson_text)
	{
		result_GuidanceResponse->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(guidanceResponse, "contained");
	if(cjson_contained)
	{
		result_GuidanceResponse->contained_count = cJSON_GetArraySize(cjson_contained);
		result_GuidanceResponse->contained = PushArray(arena, Resource, result_GuidanceResponse->contained_count);
		for(int i = 0; i < result_GuidanceResponse->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_GuidanceResponse->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(guidanceResponse, "extension");
	if(cjson_extension)
	{
		result_GuidanceResponse->extension_count = cJSON_GetArraySize(cjson_extension);
		result_GuidanceResponse->extension = PushArray(arena, Extension, result_GuidanceResponse->extension_count);
		for(int i = 0; i < result_GuidanceResponse->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_GuidanceResponse->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(guidanceResponse, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_GuidanceResponse->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_GuidanceResponse->modifierExtension = PushArray(arena, Extension, result_GuidanceResponse->modifierExtension_count);
		for(int i = 0; i < result_GuidanceResponse->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_GuidanceResponse->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_requestIdentifier =  cJSON_GetObjectItem(guidanceResponse, "requestIdentifier");
	if(cjson_requestIdentifier)
	{
		result_GuidanceResponse->requestIdentifier = Deserialize_Identifier(arena, cjson_requestIdentifier);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(guidanceResponse, "identifier");
	if(cjson_identifier)
	{
		result_GuidanceResponse->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_GuidanceResponse->identifier = PushArray(arena, Identifier, result_GuidanceResponse->identifier_count);
		for(int i = 0; i < result_GuidanceResponse->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_GuidanceResponse->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(guidanceResponse, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(guidanceResponse, "valueUri");
		result_GuidanceResponse->module.valueUri = Str8C(cJSON_GetStringValue(item));
		result_GuidanceResponse->module_type = GuidanceResponse::ModuleType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(guidanceResponse, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(guidanceResponse, "valueCanonical");
		result_GuidanceResponse->module.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_GuidanceResponse->module_type = GuidanceResponse::ModuleType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(guidanceResponse, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(guidanceResponse, "valueCodeableConcept");
		result_GuidanceResponse->module.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_GuidanceResponse->module_type = GuidanceResponse::ModuleType::CodeableConcept;
	}


	cJSON *cjson_status =  cJSON_GetObjectItem(guidanceResponse, "status");
	if(cjson_status)
	{
		result_GuidanceResponse->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(guidanceResponse, "subject");
	if(cjson_subject)
	{
		result_GuidanceResponse->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(guidanceResponse, "encounter");
	if(cjson_encounter)
	{
		result_GuidanceResponse->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_occurrenceDateTime =  cJSON_GetObjectItem(guidanceResponse, "occurrenceDateTime");
	if(cjson_occurrenceDateTime)
	{
		result_GuidanceResponse->occurrenceDateTime = Str8C(cJSON_GetStringValue(cjson_occurrenceDateTime));
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(guidanceResponse, "performer");
	if(cjson_performer)
	{
		result_GuidanceResponse->performer = Deserialize_Reference(arena, cjson_performer);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(guidanceResponse, "reasonCode");
	if(cjson_reasonCode)
	{
		result_GuidanceResponse->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_GuidanceResponse->reasonCode = PushArray(arena, CodeableConcept, result_GuidanceResponse->reasonCode_count);
		for(int i = 0; i < result_GuidanceResponse->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_GuidanceResponse->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(guidanceResponse, "reasonReference");
	if(cjson_reasonReference)
	{
		result_GuidanceResponse->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_GuidanceResponse->reasonReference = PushArray(arena, Reference, result_GuidanceResponse->reasonReference_count);
		for(int i = 0; i < result_GuidanceResponse->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_GuidanceResponse->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(guidanceResponse, "note");
	if(cjson_note)
	{
		result_GuidanceResponse->note_count = cJSON_GetArraySize(cjson_note);
		result_GuidanceResponse->note = PushArray(arena, Annotation, result_GuidanceResponse->note_count);
		for(int i = 0; i < result_GuidanceResponse->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_GuidanceResponse->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_evaluationMessage =  cJSON_GetObjectItem(guidanceResponse, "evaluationMessage");
	if(cjson_evaluationMessage)
	{
		result_GuidanceResponse->evaluationMessage_count = cJSON_GetArraySize(cjson_evaluationMessage);
		result_GuidanceResponse->evaluationMessage = PushArray(arena, Reference, result_GuidanceResponse->evaluationMessage_count);
		for(int i = 0; i < result_GuidanceResponse->evaluationMessage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_evaluationMessage, i);
			result_GuidanceResponse->evaluationMessage[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_outputParameters =  cJSON_GetObjectItem(guidanceResponse, "outputParameters");
	if(cjson_outputParameters)
	{
		result_GuidanceResponse->outputParameters = Deserialize_Reference(arena, cjson_outputParameters);
	}
	cJSON *cjson_result =  cJSON_GetObjectItem(guidanceResponse, "result");
	if(cjson_result)
	{
		result_GuidanceResponse->result = Deserialize_Reference(arena, cjson_result);
	}
	cJSON *cjson_dataRequirement =  cJSON_GetObjectItem(guidanceResponse, "dataRequirement");
	if(cjson_dataRequirement)
	{
		result_GuidanceResponse->dataRequirement_count = cJSON_GetArraySize(cjson_dataRequirement);
		result_GuidanceResponse->dataRequirement = PushArray(arena, DataRequirement, result_GuidanceResponse->dataRequirement_count);
		for(int i = 0; i < result_GuidanceResponse->dataRequirement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dataRequirement, i);
			result_GuidanceResponse->dataRequirement[i] = *Deserialize_DataRequirement(arena, internal);
		}

	}
	return result_GuidanceResponse;
}

HealthcareService*
Deserialize_HealthcareService(Arena *arena, cJSON *healthcareService)
{
	HealthcareService *result_HealthcareService = PushArray(arena, HealthcareService, 1);
	result_HealthcareService->resourceType = ResourceType::HealthcareService;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(healthcareService, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(healthcareService, "id");
	if(cjson_id)
	{
		result_HealthcareService->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(healthcareService, "meta");
	if(cjson_meta)
	{
		result_HealthcareService->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(healthcareService, "implicitRules");
	if(cjson_implicitRules)
	{
		result_HealthcareService->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(healthcareService, "language");
	if(cjson_language)
	{
		result_HealthcareService->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(healthcareService, "text");
	if(cjson_text)
	{
		result_HealthcareService->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(healthcareService, "contained");
	if(cjson_contained)
	{
		result_HealthcareService->contained_count = cJSON_GetArraySize(cjson_contained);
		result_HealthcareService->contained = PushArray(arena, Resource, result_HealthcareService->contained_count);
		for(int i = 0; i < result_HealthcareService->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_HealthcareService->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(healthcareService, "extension");
	if(cjson_extension)
	{
		result_HealthcareService->extension_count = cJSON_GetArraySize(cjson_extension);
		result_HealthcareService->extension = PushArray(arena, Extension, result_HealthcareService->extension_count);
		for(int i = 0; i < result_HealthcareService->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_HealthcareService->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(healthcareService, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_HealthcareService->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_HealthcareService->modifierExtension = PushArray(arena, Extension, result_HealthcareService->modifierExtension_count);
		for(int i = 0; i < result_HealthcareService->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_HealthcareService->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(healthcareService, "identifier");
	if(cjson_identifier)
	{
		result_HealthcareService->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_HealthcareService->identifier = PushArray(arena, Identifier, result_HealthcareService->identifier_count);
		for(int i = 0; i < result_HealthcareService->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_HealthcareService->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(healthcareService, "active");
	if(cjson_active)
	{
		result_HealthcareService->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_providedBy =  cJSON_GetObjectItem(healthcareService, "providedBy");
	if(cjson_providedBy)
	{
		result_HealthcareService->providedBy = Deserialize_Reference(arena, cjson_providedBy);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(healthcareService, "category");
	if(cjson_category)
	{
		result_HealthcareService->category_count = cJSON_GetArraySize(cjson_category);
		result_HealthcareService->category = PushArray(arena, CodeableConcept, result_HealthcareService->category_count);
		for(int i = 0; i < result_HealthcareService->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_HealthcareService->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(healthcareService, "type");
	if(cjson_type)
	{
		result_HealthcareService->type_count = cJSON_GetArraySize(cjson_type);
		result_HealthcareService->type = PushArray(arena, CodeableConcept, result_HealthcareService->type_count);
		for(int i = 0; i < result_HealthcareService->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_HealthcareService->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialty =  cJSON_GetObjectItem(healthcareService, "specialty");
	if(cjson_specialty)
	{
		result_HealthcareService->specialty_count = cJSON_GetArraySize(cjson_specialty);
		result_HealthcareService->specialty = PushArray(arena, CodeableConcept, result_HealthcareService->specialty_count);
		for(int i = 0; i < result_HealthcareService->specialty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialty, i);
			result_HealthcareService->specialty[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(healthcareService, "location");
	if(cjson_location)
	{
		result_HealthcareService->location_count = cJSON_GetArraySize(cjson_location);
		result_HealthcareService->location = PushArray(arena, Reference, result_HealthcareService->location_count);
		for(int i = 0; i < result_HealthcareService->location_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_location, i);
			result_HealthcareService->location[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(healthcareService, "name");
	if(cjson_name)
	{
		result_HealthcareService->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(healthcareService, "comment");
	if(cjson_comment)
	{
		result_HealthcareService->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_extraDetails =  cJSON_GetObjectItem(healthcareService, "extraDetails");
	if(cjson_extraDetails)
	{
		result_HealthcareService->extraDetails = Str8C(cJSON_GetStringValue(cjson_extraDetails));
	}
	cJSON *cjson_photo =  cJSON_GetObjectItem(healthcareService, "photo");
	if(cjson_photo)
	{
		result_HealthcareService->photo = Deserialize_Attachment(arena, cjson_photo);
	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(healthcareService, "telecom");
	if(cjson_telecom)
	{
		result_HealthcareService->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_HealthcareService->telecom = PushArray(arena, ContactPoint, result_HealthcareService->telecom_count);
		for(int i = 0; i < result_HealthcareService->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_HealthcareService->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_coverageArea =  cJSON_GetObjectItem(healthcareService, "coverageArea");
	if(cjson_coverageArea)
	{
		result_HealthcareService->coverageArea_count = cJSON_GetArraySize(cjson_coverageArea);
		result_HealthcareService->coverageArea = PushArray(arena, Reference, result_HealthcareService->coverageArea_count);
		for(int i = 0; i < result_HealthcareService->coverageArea_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_coverageArea, i);
			result_HealthcareService->coverageArea[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_serviceProvisionCode =  cJSON_GetObjectItem(healthcareService, "serviceProvisionCode");
	if(cjson_serviceProvisionCode)
	{
		result_HealthcareService->serviceProvisionCode_count = cJSON_GetArraySize(cjson_serviceProvisionCode);
		result_HealthcareService->serviceProvisionCode = PushArray(arena, CodeableConcept, result_HealthcareService->serviceProvisionCode_count);
		for(int i = 0; i < result_HealthcareService->serviceProvisionCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_serviceProvisionCode, i);
			result_HealthcareService->serviceProvisionCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_eligibility =  cJSON_GetObjectItem(healthcareService, "eligibility");
	if(cjson_eligibility)
	{
		result_HealthcareService->eligibility_count = cJSON_GetArraySize(cjson_eligibility);
		result_HealthcareService->eligibility = PushArray(arena, HealthcareService_Eligibility, result_HealthcareService->eligibility_count);
		for(int i = 0; i < result_HealthcareService->eligibility_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_eligibility, i);
			result_HealthcareService->eligibility[i] = *Deserialize_HealthcareService_Eligibility(arena, internal);
		}

	}
	cJSON *cjson_program =  cJSON_GetObjectItem(healthcareService, "program");
	if(cjson_program)
	{
		result_HealthcareService->program_count = cJSON_GetArraySize(cjson_program);
		result_HealthcareService->program = PushArray(arena, CodeableConcept, result_HealthcareService->program_count);
		for(int i = 0; i < result_HealthcareService->program_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_program, i);
			result_HealthcareService->program[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_characteristic =  cJSON_GetObjectItem(healthcareService, "characteristic");
	if(cjson_characteristic)
	{
		result_HealthcareService->characteristic_count = cJSON_GetArraySize(cjson_characteristic);
		result_HealthcareService->characteristic = PushArray(arena, CodeableConcept, result_HealthcareService->characteristic_count);
		for(int i = 0; i < result_HealthcareService->characteristic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_characteristic, i);
			result_HealthcareService->characteristic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_communication =  cJSON_GetObjectItem(healthcareService, "communication");
	if(cjson_communication)
	{
		result_HealthcareService->communication_count = cJSON_GetArraySize(cjson_communication);
		result_HealthcareService->communication = PushArray(arena, CodeableConcept, result_HealthcareService->communication_count);
		for(int i = 0; i < result_HealthcareService->communication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_communication, i);
			result_HealthcareService->communication[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_referralMethod =  cJSON_GetObjectItem(healthcareService, "referralMethod");
	if(cjson_referralMethod)
	{
		result_HealthcareService->referralMethod_count = cJSON_GetArraySize(cjson_referralMethod);
		result_HealthcareService->referralMethod = PushArray(arena, CodeableConcept, result_HealthcareService->referralMethod_count);
		for(int i = 0; i < result_HealthcareService->referralMethod_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referralMethod, i);
			result_HealthcareService->referralMethod[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_appointmentRequired =  cJSON_GetObjectItem(healthcareService, "appointmentRequired");
	if(cjson_appointmentRequired)
	{
		result_HealthcareService->appointmentRequired = (boolean)cJSON_IsTrue(cjson_appointmentRequired);
	}
	cJSON *cjson_availableTime =  cJSON_GetObjectItem(healthcareService, "availableTime");
	if(cjson_availableTime)
	{
		result_HealthcareService->availableTime_count = cJSON_GetArraySize(cjson_availableTime);
		result_HealthcareService->availableTime = PushArray(arena, HealthcareService_AvailableTime, result_HealthcareService->availableTime_count);
		for(int i = 0; i < result_HealthcareService->availableTime_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_availableTime, i);
			result_HealthcareService->availableTime[i] = *Deserialize_HealthcareService_AvailableTime(arena, internal);
		}

	}
	cJSON *cjson_notAvailable =  cJSON_GetObjectItem(healthcareService, "notAvailable");
	if(cjson_notAvailable)
	{
		result_HealthcareService->notAvailable_count = cJSON_GetArraySize(cjson_notAvailable);
		result_HealthcareService->notAvailable = PushArray(arena, HealthcareService_NotAvailable, result_HealthcareService->notAvailable_count);
		for(int i = 0; i < result_HealthcareService->notAvailable_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_notAvailable, i);
			result_HealthcareService->notAvailable[i] = *Deserialize_HealthcareService_NotAvailable(arena, internal);
		}

	}
	cJSON *cjson_availabilityExceptions =  cJSON_GetObjectItem(healthcareService, "availabilityExceptions");
	if(cjson_availabilityExceptions)
	{
		result_HealthcareService->availabilityExceptions = Str8C(cJSON_GetStringValue(cjson_availabilityExceptions));
	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(healthcareService, "endpoint");
	if(cjson_endpoint)
	{
		result_HealthcareService->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_HealthcareService->endpoint = PushArray(arena, Reference, result_HealthcareService->endpoint_count);
		for(int i = 0; i < result_HealthcareService->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_HealthcareService->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_HealthcareService;
}

HealthcareService_Eligibility*
Deserialize_HealthcareService_Eligibility(Arena *arena, cJSON *healthcareService_Eligibility)
{
	HealthcareService_Eligibility *result_HealthcareService_Eligibility = PushArray(arena, HealthcareService_Eligibility, 1);
	result_HealthcareService_Eligibility->resourceType = ResourceType::HealthcareService_Eligibility;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(healthcareService_Eligibility, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(healthcareService_Eligibility, "id");
	if(cjson_id)
	{
		result_HealthcareService_Eligibility->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(healthcareService_Eligibility, "extension");
	if(cjson_extension)
	{
		result_HealthcareService_Eligibility->extension_count = cJSON_GetArraySize(cjson_extension);
		result_HealthcareService_Eligibility->extension = PushArray(arena, Extension, result_HealthcareService_Eligibility->extension_count);
		for(int i = 0; i < result_HealthcareService_Eligibility->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_HealthcareService_Eligibility->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(healthcareService_Eligibility, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_HealthcareService_Eligibility->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_HealthcareService_Eligibility->modifierExtension = PushArray(arena, Extension, result_HealthcareService_Eligibility->modifierExtension_count);
		for(int i = 0; i < result_HealthcareService_Eligibility->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_HealthcareService_Eligibility->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(healthcareService_Eligibility, "code");
	if(cjson_code)
	{
		result_HealthcareService_Eligibility->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(healthcareService_Eligibility, "comment");
	if(cjson_comment)
	{
		result_HealthcareService_Eligibility->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_HealthcareService_Eligibility;
}

HealthcareService_AvailableTime*
Deserialize_HealthcareService_AvailableTime(Arena *arena, cJSON *healthcareService_AvailableTime)
{
	HealthcareService_AvailableTime *result_HealthcareService_AvailableTime = PushArray(arena, HealthcareService_AvailableTime, 1);
	result_HealthcareService_AvailableTime->resourceType = ResourceType::HealthcareService_AvailableTime;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(healthcareService_AvailableTime, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(healthcareService_AvailableTime, "id");
	if(cjson_id)
	{
		result_HealthcareService_AvailableTime->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(healthcareService_AvailableTime, "extension");
	if(cjson_extension)
	{
		result_HealthcareService_AvailableTime->extension_count = cJSON_GetArraySize(cjson_extension);
		result_HealthcareService_AvailableTime->extension = PushArray(arena, Extension, result_HealthcareService_AvailableTime->extension_count);
		for(int i = 0; i < result_HealthcareService_AvailableTime->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_HealthcareService_AvailableTime->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(healthcareService_AvailableTime, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_HealthcareService_AvailableTime->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_HealthcareService_AvailableTime->modifierExtension = PushArray(arena, Extension, result_HealthcareService_AvailableTime->modifierExtension_count);
		for(int i = 0; i < result_HealthcareService_AvailableTime->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_HealthcareService_AvailableTime->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_daysOfWeek =  cJSON_GetObjectItem(healthcareService_AvailableTime, "daysOfWeek");
	if(cjson_daysOfWeek)
	{
		result_HealthcareService_AvailableTime->daysOfWeek_count = cJSON_GetArraySize(cjson_daysOfWeek);
		result_HealthcareService_AvailableTime->daysOfWeek = PushArray(arena, fhir_code, result_HealthcareService_AvailableTime->daysOfWeek_count);
		for(int i = 0; i < result_HealthcareService_AvailableTime->daysOfWeek_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_daysOfWeek, i);
			result_HealthcareService_AvailableTime->daysOfWeek[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_allDay =  cJSON_GetObjectItem(healthcareService_AvailableTime, "allDay");
	if(cjson_allDay)
	{
		result_HealthcareService_AvailableTime->allDay = (boolean)cJSON_IsTrue(cjson_allDay);
	}
	cJSON *cjson_availableStartTime =  cJSON_GetObjectItem(healthcareService_AvailableTime, "availableStartTime");
	if(cjson_availableStartTime)
	{
		result_HealthcareService_AvailableTime->availableStartTime = Str8C(cJSON_GetStringValue(cjson_availableStartTime));
	}
	cJSON *cjson_availableEndTime =  cJSON_GetObjectItem(healthcareService_AvailableTime, "availableEndTime");
	if(cjson_availableEndTime)
	{
		result_HealthcareService_AvailableTime->availableEndTime = Str8C(cJSON_GetStringValue(cjson_availableEndTime));
	}
	return result_HealthcareService_AvailableTime;
}

HealthcareService_NotAvailable*
Deserialize_HealthcareService_NotAvailable(Arena *arena, cJSON *healthcareService_NotAvailable)
{
	HealthcareService_NotAvailable *result_HealthcareService_NotAvailable = PushArray(arena, HealthcareService_NotAvailable, 1);
	result_HealthcareService_NotAvailable->resourceType = ResourceType::HealthcareService_NotAvailable;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(healthcareService_NotAvailable, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(healthcareService_NotAvailable, "id");
	if(cjson_id)
	{
		result_HealthcareService_NotAvailable->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(healthcareService_NotAvailable, "extension");
	if(cjson_extension)
	{
		result_HealthcareService_NotAvailable->extension_count = cJSON_GetArraySize(cjson_extension);
		result_HealthcareService_NotAvailable->extension = PushArray(arena, Extension, result_HealthcareService_NotAvailable->extension_count);
		for(int i = 0; i < result_HealthcareService_NotAvailable->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_HealthcareService_NotAvailable->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(healthcareService_NotAvailable, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_HealthcareService_NotAvailable->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_HealthcareService_NotAvailable->modifierExtension = PushArray(arena, Extension, result_HealthcareService_NotAvailable->modifierExtension_count);
		for(int i = 0; i < result_HealthcareService_NotAvailable->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_HealthcareService_NotAvailable->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(healthcareService_NotAvailable, "description");
	if(cjson_description)
	{
		result_HealthcareService_NotAvailable->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_during =  cJSON_GetObjectItem(healthcareService_NotAvailable, "during");
	if(cjson_during)
	{
		result_HealthcareService_NotAvailable->during = Deserialize_Period(arena, cjson_during);
	}
	return result_HealthcareService_NotAvailable;
}

ImagingStudy*
Deserialize_ImagingStudy(Arena *arena, cJSON *imagingStudy)
{
	ImagingStudy *result_ImagingStudy = PushArray(arena, ImagingStudy, 1);
	result_ImagingStudy->resourceType = ResourceType::ImagingStudy;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(imagingStudy, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(imagingStudy, "id");
	if(cjson_id)
	{
		result_ImagingStudy->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(imagingStudy, "meta");
	if(cjson_meta)
	{
		result_ImagingStudy->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(imagingStudy, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ImagingStudy->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(imagingStudy, "language");
	if(cjson_language)
	{
		result_ImagingStudy->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(imagingStudy, "text");
	if(cjson_text)
	{
		result_ImagingStudy->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(imagingStudy, "contained");
	if(cjson_contained)
	{
		result_ImagingStudy->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ImagingStudy->contained = PushArray(arena, Resource, result_ImagingStudy->contained_count);
		for(int i = 0; i < result_ImagingStudy->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ImagingStudy->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(imagingStudy, "extension");
	if(cjson_extension)
	{
		result_ImagingStudy->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImagingStudy->extension = PushArray(arena, Extension, result_ImagingStudy->extension_count);
		for(int i = 0; i < result_ImagingStudy->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImagingStudy->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(imagingStudy, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImagingStudy->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImagingStudy->modifierExtension = PushArray(arena, Extension, result_ImagingStudy->modifierExtension_count);
		for(int i = 0; i < result_ImagingStudy->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImagingStudy->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(imagingStudy, "identifier");
	if(cjson_identifier)
	{
		result_ImagingStudy->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ImagingStudy->identifier = PushArray(arena, Identifier, result_ImagingStudy->identifier_count);
		for(int i = 0; i < result_ImagingStudy->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ImagingStudy->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(imagingStudy, "status");
	if(cjson_status)
	{
		result_ImagingStudy->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_modality =  cJSON_GetObjectItem(imagingStudy, "modality");
	if(cjson_modality)
	{
		result_ImagingStudy->modality_count = cJSON_GetArraySize(cjson_modality);
		result_ImagingStudy->modality = PushArray(arena, Coding, result_ImagingStudy->modality_count);
		for(int i = 0; i < result_ImagingStudy->modality_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modality, i);
			result_ImagingStudy->modality[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(imagingStudy, "subject");
	if(cjson_subject)
	{
		result_ImagingStudy->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(imagingStudy, "encounter");
	if(cjson_encounter)
	{
		result_ImagingStudy->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_started =  cJSON_GetObjectItem(imagingStudy, "started");
	if(cjson_started)
	{
		result_ImagingStudy->started = Str8C(cJSON_GetStringValue(cjson_started));
	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(imagingStudy, "basedOn");
	if(cjson_basedOn)
	{
		result_ImagingStudy->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_ImagingStudy->basedOn = PushArray(arena, Reference, result_ImagingStudy->basedOn_count);
		for(int i = 0; i < result_ImagingStudy->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_ImagingStudy->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_referrer =  cJSON_GetObjectItem(imagingStudy, "referrer");
	if(cjson_referrer)
	{
		result_ImagingStudy->referrer = Deserialize_Reference(arena, cjson_referrer);
	}
	cJSON *cjson_interpreter =  cJSON_GetObjectItem(imagingStudy, "interpreter");
	if(cjson_interpreter)
	{
		result_ImagingStudy->interpreter_count = cJSON_GetArraySize(cjson_interpreter);
		result_ImagingStudy->interpreter = PushArray(arena, Reference, result_ImagingStudy->interpreter_count);
		for(int i = 0; i < result_ImagingStudy->interpreter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_interpreter, i);
			result_ImagingStudy->interpreter[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(imagingStudy, "endpoint");
	if(cjson_endpoint)
	{
		result_ImagingStudy->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_ImagingStudy->endpoint = PushArray(arena, Reference, result_ImagingStudy->endpoint_count);
		for(int i = 0; i < result_ImagingStudy->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_ImagingStudy->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_numberOfSeries =  cJSON_GetObjectItem(imagingStudy, "numberOfSeries");
	if(cjson_numberOfSeries)
	{
		result_ImagingStudy->numberOfSeries = (int)cJSON_GetNumberValue(cjson_numberOfSeries);
	}
	cJSON *cjson_numberOfInstances =  cJSON_GetObjectItem(imagingStudy, "numberOfInstances");
	if(cjson_numberOfInstances)
	{
		result_ImagingStudy->numberOfInstances = (int)cJSON_GetNumberValue(cjson_numberOfInstances);
	}
	cJSON *cjson_procedureReference =  cJSON_GetObjectItem(imagingStudy, "procedureReference");
	if(cjson_procedureReference)
	{
		result_ImagingStudy->procedureReference = Deserialize_Reference(arena, cjson_procedureReference);
	}
	cJSON *cjson_procedureCode =  cJSON_GetObjectItem(imagingStudy, "procedureCode");
	if(cjson_procedureCode)
	{
		result_ImagingStudy->procedureCode_count = cJSON_GetArraySize(cjson_procedureCode);
		result_ImagingStudy->procedureCode = PushArray(arena, CodeableConcept, result_ImagingStudy->procedureCode_count);
		for(int i = 0; i < result_ImagingStudy->procedureCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_procedureCode, i);
			result_ImagingStudy->procedureCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(imagingStudy, "location");
	if(cjson_location)
	{
		result_ImagingStudy->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(imagingStudy, "reasonCode");
	if(cjson_reasonCode)
	{
		result_ImagingStudy->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_ImagingStudy->reasonCode = PushArray(arena, CodeableConcept, result_ImagingStudy->reasonCode_count);
		for(int i = 0; i < result_ImagingStudy->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_ImagingStudy->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(imagingStudy, "reasonReference");
	if(cjson_reasonReference)
	{
		result_ImagingStudy->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_ImagingStudy->reasonReference = PushArray(arena, Reference, result_ImagingStudy->reasonReference_count);
		for(int i = 0; i < result_ImagingStudy->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_ImagingStudy->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(imagingStudy, "note");
	if(cjson_note)
	{
		result_ImagingStudy->note_count = cJSON_GetArraySize(cjson_note);
		result_ImagingStudy->note = PushArray(arena, Annotation, result_ImagingStudy->note_count);
		for(int i = 0; i < result_ImagingStudy->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_ImagingStudy->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(imagingStudy, "description");
	if(cjson_description)
	{
		result_ImagingStudy->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_series =  cJSON_GetObjectItem(imagingStudy, "series");
	if(cjson_series)
	{
		result_ImagingStudy->series_count = cJSON_GetArraySize(cjson_series);
		result_ImagingStudy->series = PushArray(arena, ImagingStudy_Series, result_ImagingStudy->series_count);
		for(int i = 0; i < result_ImagingStudy->series_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_series, i);
			result_ImagingStudy->series[i] = *Deserialize_ImagingStudy_Series(arena, internal);
		}

	}
	return result_ImagingStudy;
}

ImagingStudy_Series*
Deserialize_ImagingStudy_Series(Arena *arena, cJSON *imagingStudy_Series)
{
	ImagingStudy_Series *result_ImagingStudy_Series = PushArray(arena, ImagingStudy_Series, 1);
	result_ImagingStudy_Series->resourceType = ResourceType::ImagingStudy_Series;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(imagingStudy_Series, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(imagingStudy_Series, "id");
	if(cjson_id)
	{
		result_ImagingStudy_Series->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(imagingStudy_Series, "extension");
	if(cjson_extension)
	{
		result_ImagingStudy_Series->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImagingStudy_Series->extension = PushArray(arena, Extension, result_ImagingStudy_Series->extension_count);
		for(int i = 0; i < result_ImagingStudy_Series->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImagingStudy_Series->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(imagingStudy_Series, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImagingStudy_Series->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImagingStudy_Series->modifierExtension = PushArray(arena, Extension, result_ImagingStudy_Series->modifierExtension_count);
		for(int i = 0; i < result_ImagingStudy_Series->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImagingStudy_Series->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_uid =  cJSON_GetObjectItem(imagingStudy_Series, "uid");
	if(cjson_uid)
	{
		result_ImagingStudy_Series->uid = Str8C(cJSON_GetStringValue(cjson_uid));
	}
	cJSON *cjson_number =  cJSON_GetObjectItem(imagingStudy_Series, "number");
	if(cjson_number)
	{
		result_ImagingStudy_Series->number = (int)cJSON_GetNumberValue(cjson_number);
	}
	cJSON *cjson_modality =  cJSON_GetObjectItem(imagingStudy_Series, "modality");
	if(cjson_modality)
	{
		result_ImagingStudy_Series->modality = Deserialize_Coding(arena, cjson_modality);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(imagingStudy_Series, "description");
	if(cjson_description)
	{
		result_ImagingStudy_Series->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_numberOfInstances =  cJSON_GetObjectItem(imagingStudy_Series, "numberOfInstances");
	if(cjson_numberOfInstances)
	{
		result_ImagingStudy_Series->numberOfInstances = (int)cJSON_GetNumberValue(cjson_numberOfInstances);
	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(imagingStudy_Series, "endpoint");
	if(cjson_endpoint)
	{
		result_ImagingStudy_Series->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_ImagingStudy_Series->endpoint = PushArray(arena, Reference, result_ImagingStudy_Series->endpoint_count);
		for(int i = 0; i < result_ImagingStudy_Series->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_ImagingStudy_Series->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(imagingStudy_Series, "bodySite");
	if(cjson_bodySite)
	{
		result_ImagingStudy_Series->bodySite = Deserialize_Coding(arena, cjson_bodySite);
	}
	cJSON *cjson_laterality =  cJSON_GetObjectItem(imagingStudy_Series, "laterality");
	if(cjson_laterality)
	{
		result_ImagingStudy_Series->laterality = Deserialize_Coding(arena, cjson_laterality);
	}
	cJSON *cjson_specimen =  cJSON_GetObjectItem(imagingStudy_Series, "specimen");
	if(cjson_specimen)
	{
		result_ImagingStudy_Series->specimen_count = cJSON_GetArraySize(cjson_specimen);
		result_ImagingStudy_Series->specimen = PushArray(arena, Reference, result_ImagingStudy_Series->specimen_count);
		for(int i = 0; i < result_ImagingStudy_Series->specimen_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specimen, i);
			result_ImagingStudy_Series->specimen[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_started =  cJSON_GetObjectItem(imagingStudy_Series, "started");
	if(cjson_started)
	{
		result_ImagingStudy_Series->started = Str8C(cJSON_GetStringValue(cjson_started));
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(imagingStudy_Series, "performer");
	if(cjson_performer)
	{
		result_ImagingStudy_Series->performer_count = cJSON_GetArraySize(cjson_performer);
		result_ImagingStudy_Series->performer = PushArray(arena, ImagingStudy_Series_Performer, result_ImagingStudy_Series->performer_count);
		for(int i = 0; i < result_ImagingStudy_Series->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_ImagingStudy_Series->performer[i] = *Deserialize_ImagingStudy_Series_Performer(arena, internal);
		}

	}
	cJSON *cjson_instance =  cJSON_GetObjectItem(imagingStudy_Series, "instance");
	if(cjson_instance)
	{
		result_ImagingStudy_Series->instance_count = cJSON_GetArraySize(cjson_instance);
		result_ImagingStudy_Series->instance = PushArray(arena, ImagingStudy_Series_Instance, result_ImagingStudy_Series->instance_count);
		for(int i = 0; i < result_ImagingStudy_Series->instance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instance, i);
			result_ImagingStudy_Series->instance[i] = *Deserialize_ImagingStudy_Series_Instance(arena, internal);
		}

	}
	return result_ImagingStudy_Series;
}

ImagingStudy_Series_Performer*
Deserialize_ImagingStudy_Series_Performer(Arena *arena, cJSON *imagingStudy_Series_Performer)
{
	ImagingStudy_Series_Performer *result_ImagingStudy_Series_Performer = PushArray(arena, ImagingStudy_Series_Performer, 1);
	result_ImagingStudy_Series_Performer->resourceType = ResourceType::ImagingStudy_Series_Performer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(imagingStudy_Series_Performer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(imagingStudy_Series_Performer, "id");
	if(cjson_id)
	{
		result_ImagingStudy_Series_Performer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(imagingStudy_Series_Performer, "extension");
	if(cjson_extension)
	{
		result_ImagingStudy_Series_Performer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImagingStudy_Series_Performer->extension = PushArray(arena, Extension, result_ImagingStudy_Series_Performer->extension_count);
		for(int i = 0; i < result_ImagingStudy_Series_Performer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImagingStudy_Series_Performer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(imagingStudy_Series_Performer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImagingStudy_Series_Performer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImagingStudy_Series_Performer->modifierExtension = PushArray(arena, Extension, result_ImagingStudy_Series_Performer->modifierExtension_count);
		for(int i = 0; i < result_ImagingStudy_Series_Performer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImagingStudy_Series_Performer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_function_ =  cJSON_GetObjectItem(imagingStudy_Series_Performer, "function_");
	if(cjson_function_)
	{
		result_ImagingStudy_Series_Performer->function_ = Deserialize_CodeableConcept(arena, cjson_function_);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(imagingStudy_Series_Performer, "actor");
	if(cjson_actor)
	{
		result_ImagingStudy_Series_Performer->actor = Deserialize_Reference(arena, cjson_actor);
	}
	return result_ImagingStudy_Series_Performer;
}

ImagingStudy_Series_Instance*
Deserialize_ImagingStudy_Series_Instance(Arena *arena, cJSON *imagingStudy_Series_Instance)
{
	ImagingStudy_Series_Instance *result_ImagingStudy_Series_Instance = PushArray(arena, ImagingStudy_Series_Instance, 1);
	result_ImagingStudy_Series_Instance->resourceType = ResourceType::ImagingStudy_Series_Instance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "id");
	if(cjson_id)
	{
		result_ImagingStudy_Series_Instance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "extension");
	if(cjson_extension)
	{
		result_ImagingStudy_Series_Instance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImagingStudy_Series_Instance->extension = PushArray(arena, Extension, result_ImagingStudy_Series_Instance->extension_count);
		for(int i = 0; i < result_ImagingStudy_Series_Instance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImagingStudy_Series_Instance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImagingStudy_Series_Instance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImagingStudy_Series_Instance->modifierExtension = PushArray(arena, Extension, result_ImagingStudy_Series_Instance->modifierExtension_count);
		for(int i = 0; i < result_ImagingStudy_Series_Instance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImagingStudy_Series_Instance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_uid =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "uid");
	if(cjson_uid)
	{
		result_ImagingStudy_Series_Instance->uid = Str8C(cJSON_GetStringValue(cjson_uid));
	}
	cJSON *cjson_sopClass =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "sopClass");
	if(cjson_sopClass)
	{
		result_ImagingStudy_Series_Instance->sopClass = Deserialize_Coding(arena, cjson_sopClass);
	}
	cJSON *cjson_number =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "number");
	if(cjson_number)
	{
		result_ImagingStudy_Series_Instance->number = (int)cJSON_GetNumberValue(cjson_number);
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(imagingStudy_Series_Instance, "title");
	if(cjson_title)
	{
		result_ImagingStudy_Series_Instance->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	return result_ImagingStudy_Series_Instance;
}

Immunization*
Deserialize_Immunization(Arena *arena, cJSON *immunization)
{
	Immunization *result_Immunization = PushArray(arena, Immunization, 1);
	result_Immunization->resourceType = ResourceType::Immunization;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunization, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunization, "id");
	if(cjson_id)
	{
		result_Immunization->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(immunization, "meta");
	if(cjson_meta)
	{
		result_Immunization->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(immunization, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Immunization->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(immunization, "language");
	if(cjson_language)
	{
		result_Immunization->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(immunization, "text");
	if(cjson_text)
	{
		result_Immunization->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(immunization, "contained");
	if(cjson_contained)
	{
		result_Immunization->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Immunization->contained = PushArray(arena, Resource, result_Immunization->contained_count);
		for(int i = 0; i < result_Immunization->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Immunization->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunization, "extension");
	if(cjson_extension)
	{
		result_Immunization->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Immunization->extension = PushArray(arena, Extension, result_Immunization->extension_count);
		for(int i = 0; i < result_Immunization->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Immunization->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunization, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Immunization->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Immunization->modifierExtension = PushArray(arena, Extension, result_Immunization->modifierExtension_count);
		for(int i = 0; i < result_Immunization->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Immunization->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(immunization, "identifier");
	if(cjson_identifier)
	{
		result_Immunization->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Immunization->identifier = PushArray(arena, Identifier, result_Immunization->identifier_count);
		for(int i = 0; i < result_Immunization->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Immunization->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(immunization, "status");
	if(cjson_status)
	{
		result_Immunization->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(immunization, "statusReason");
	if(cjson_statusReason)
	{
		result_Immunization->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_vaccineCode =  cJSON_GetObjectItem(immunization, "vaccineCode");
	if(cjson_vaccineCode)
	{
		result_Immunization->vaccineCode = Deserialize_CodeableConcept(arena, cjson_vaccineCode);
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(immunization, "patient");
	if(cjson_patient)
	{
		result_Immunization->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(immunization, "encounter");
	if(cjson_encounter)
	{
		result_Immunization->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(immunization, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunization, "valueDateTime");
		result_Immunization->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Immunization->occurrence_type = Immunization::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(immunization, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunization, "valueString");
		result_Immunization->occurrence.valueString = Str8C(cJSON_GetStringValue(item));
		result_Immunization->occurrence_type = Immunization::OccurrenceType::fhir_string;
	}


	cJSON *cjson_recorded =  cJSON_GetObjectItem(immunization, "recorded");
	if(cjson_recorded)
	{
		result_Immunization->recorded = Str8C(cJSON_GetStringValue(cjson_recorded));
	}
	cJSON *cjson_primarySource =  cJSON_GetObjectItem(immunization, "primarySource");
	if(cjson_primarySource)
	{
		result_Immunization->primarySource = (boolean)cJSON_IsTrue(cjson_primarySource);
	}
	cJSON *cjson_reportOrigin =  cJSON_GetObjectItem(immunization, "reportOrigin");
	if(cjson_reportOrigin)
	{
		result_Immunization->reportOrigin = Deserialize_CodeableConcept(arena, cjson_reportOrigin);
	}
	cJSON *cjson_location =  cJSON_GetObjectItem(immunization, "location");
	if(cjson_location)
	{
		result_Immunization->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(immunization, "manufacturer");
	if(cjson_manufacturer)
	{
		result_Immunization->manufacturer = Deserialize_Reference(arena, cjson_manufacturer);
	}
	cJSON *cjson_lotNumber =  cJSON_GetObjectItem(immunization, "lotNumber");
	if(cjson_lotNumber)
	{
		result_Immunization->lotNumber = Str8C(cJSON_GetStringValue(cjson_lotNumber));
	}
	cJSON *cjson_expirationDate =  cJSON_GetObjectItem(immunization, "expirationDate");
	if(cjson_expirationDate)
	{
		result_Immunization->expirationDate = Str8C(cJSON_GetStringValue(cjson_expirationDate));
	}
	cJSON *cjson_site =  cJSON_GetObjectItem(immunization, "site");
	if(cjson_site)
	{
		result_Immunization->site = Deserialize_CodeableConcept(arena, cjson_site);
	}
	cJSON *cjson_route =  cJSON_GetObjectItem(immunization, "route");
	if(cjson_route)
	{
		result_Immunization->route = Deserialize_CodeableConcept(arena, cjson_route);
	}
	cJSON *cjson_doseQuantity =  cJSON_GetObjectItem(immunization, "doseQuantity");
	if(cjson_doseQuantity)
	{
		result_Immunization->doseQuantity = Deserialize_Quantity(arena, cjson_doseQuantity);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(immunization, "performer");
	if(cjson_performer)
	{
		result_Immunization->performer_count = cJSON_GetArraySize(cjson_performer);
		result_Immunization->performer = PushArray(arena, Immunization_Performer, result_Immunization->performer_count);
		for(int i = 0; i < result_Immunization->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_Immunization->performer[i] = *Deserialize_Immunization_Performer(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(immunization, "note");
	if(cjson_note)
	{
		result_Immunization->note_count = cJSON_GetArraySize(cjson_note);
		result_Immunization->note = PushArray(arena, Annotation, result_Immunization->note_count);
		for(int i = 0; i < result_Immunization->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Immunization->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(immunization, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Immunization->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_Immunization->reasonCode = PushArray(arena, CodeableConcept, result_Immunization->reasonCode_count);
		for(int i = 0; i < result_Immunization->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_Immunization->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(immunization, "reasonReference");
	if(cjson_reasonReference)
	{
		result_Immunization->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_Immunization->reasonReference = PushArray(arena, Reference, result_Immunization->reasonReference_count);
		for(int i = 0; i < result_Immunization->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_Immunization->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_isSubpotent =  cJSON_GetObjectItem(immunization, "isSubpotent");
	if(cjson_isSubpotent)
	{
		result_Immunization->isSubpotent = (boolean)cJSON_IsTrue(cjson_isSubpotent);
	}
	cJSON *cjson_subpotentReason =  cJSON_GetObjectItem(immunization, "subpotentReason");
	if(cjson_subpotentReason)
	{
		result_Immunization->subpotentReason_count = cJSON_GetArraySize(cjson_subpotentReason);
		result_Immunization->subpotentReason = PushArray(arena, CodeableConcept, result_Immunization->subpotentReason_count);
		for(int i = 0; i < result_Immunization->subpotentReason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subpotentReason, i);
			result_Immunization->subpotentReason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_education =  cJSON_GetObjectItem(immunization, "education");
	if(cjson_education)
	{
		result_Immunization->education_count = cJSON_GetArraySize(cjson_education);
		result_Immunization->education = PushArray(arena, Immunization_Education, result_Immunization->education_count);
		for(int i = 0; i < result_Immunization->education_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_education, i);
			result_Immunization->education[i] = *Deserialize_Immunization_Education(arena, internal);
		}

	}
	cJSON *cjson_programEligibility =  cJSON_GetObjectItem(immunization, "programEligibility");
	if(cjson_programEligibility)
	{
		result_Immunization->programEligibility_count = cJSON_GetArraySize(cjson_programEligibility);
		result_Immunization->programEligibility = PushArray(arena, CodeableConcept, result_Immunization->programEligibility_count);
		for(int i = 0; i < result_Immunization->programEligibility_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_programEligibility, i);
			result_Immunization->programEligibility[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_fundingSource =  cJSON_GetObjectItem(immunization, "fundingSource");
	if(cjson_fundingSource)
	{
		result_Immunization->fundingSource = Deserialize_CodeableConcept(arena, cjson_fundingSource);
	}
	cJSON *cjson_reaction =  cJSON_GetObjectItem(immunization, "reaction");
	if(cjson_reaction)
	{
		result_Immunization->reaction_count = cJSON_GetArraySize(cjson_reaction);
		result_Immunization->reaction = PushArray(arena, Immunization_Reaction, result_Immunization->reaction_count);
		for(int i = 0; i < result_Immunization->reaction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reaction, i);
			result_Immunization->reaction[i] = *Deserialize_Immunization_Reaction(arena, internal);
		}

	}
	cJSON *cjson_protocolApplied =  cJSON_GetObjectItem(immunization, "protocolApplied");
	if(cjson_protocolApplied)
	{
		result_Immunization->protocolApplied_count = cJSON_GetArraySize(cjson_protocolApplied);
		result_Immunization->protocolApplied = PushArray(arena, Immunization_ProtocolApplied, result_Immunization->protocolApplied_count);
		for(int i = 0; i < result_Immunization->protocolApplied_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_protocolApplied, i);
			result_Immunization->protocolApplied[i] = *Deserialize_Immunization_ProtocolApplied(arena, internal);
		}

	}
	return result_Immunization;
}

Immunization_Performer*
Deserialize_Immunization_Performer(Arena *arena, cJSON *immunization_Performer)
{
	Immunization_Performer *result_Immunization_Performer = PushArray(arena, Immunization_Performer, 1);
	result_Immunization_Performer->resourceType = ResourceType::Immunization_Performer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunization_Performer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunization_Performer, "id");
	if(cjson_id)
	{
		result_Immunization_Performer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunization_Performer, "extension");
	if(cjson_extension)
	{
		result_Immunization_Performer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Immunization_Performer->extension = PushArray(arena, Extension, result_Immunization_Performer->extension_count);
		for(int i = 0; i < result_Immunization_Performer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Immunization_Performer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunization_Performer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Immunization_Performer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Immunization_Performer->modifierExtension = PushArray(arena, Extension, result_Immunization_Performer->modifierExtension_count);
		for(int i = 0; i < result_Immunization_Performer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Immunization_Performer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_function_ =  cJSON_GetObjectItem(immunization_Performer, "function_");
	if(cjson_function_)
	{
		result_Immunization_Performer->function_ = Deserialize_CodeableConcept(arena, cjson_function_);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(immunization_Performer, "actor");
	if(cjson_actor)
	{
		result_Immunization_Performer->actor = Deserialize_Reference(arena, cjson_actor);
	}
	return result_Immunization_Performer;
}

Immunization_Education*
Deserialize_Immunization_Education(Arena *arena, cJSON *immunization_Education)
{
	Immunization_Education *result_Immunization_Education = PushArray(arena, Immunization_Education, 1);
	result_Immunization_Education->resourceType = ResourceType::Immunization_Education;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunization_Education, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunization_Education, "id");
	if(cjson_id)
	{
		result_Immunization_Education->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunization_Education, "extension");
	if(cjson_extension)
	{
		result_Immunization_Education->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Immunization_Education->extension = PushArray(arena, Extension, result_Immunization_Education->extension_count);
		for(int i = 0; i < result_Immunization_Education->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Immunization_Education->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunization_Education, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Immunization_Education->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Immunization_Education->modifierExtension = PushArray(arena, Extension, result_Immunization_Education->modifierExtension_count);
		for(int i = 0; i < result_Immunization_Education->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Immunization_Education->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_documentType =  cJSON_GetObjectItem(immunization_Education, "documentType");
	if(cjson_documentType)
	{
		result_Immunization_Education->documentType = Str8C(cJSON_GetStringValue(cjson_documentType));
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(immunization_Education, "reference");
	if(cjson_reference)
	{
		result_Immunization_Education->reference = Str8C(cJSON_GetStringValue(cjson_reference));
	}
	cJSON *cjson_publicationDate =  cJSON_GetObjectItem(immunization_Education, "publicationDate");
	if(cjson_publicationDate)
	{
		result_Immunization_Education->publicationDate = Str8C(cJSON_GetStringValue(cjson_publicationDate));
	}
	cJSON *cjson_presentationDate =  cJSON_GetObjectItem(immunization_Education, "presentationDate");
	if(cjson_presentationDate)
	{
		result_Immunization_Education->presentationDate = Str8C(cJSON_GetStringValue(cjson_presentationDate));
	}
	return result_Immunization_Education;
}

Immunization_Reaction*
Deserialize_Immunization_Reaction(Arena *arena, cJSON *immunization_Reaction)
{
	Immunization_Reaction *result_Immunization_Reaction = PushArray(arena, Immunization_Reaction, 1);
	result_Immunization_Reaction->resourceType = ResourceType::Immunization_Reaction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunization_Reaction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunization_Reaction, "id");
	if(cjson_id)
	{
		result_Immunization_Reaction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunization_Reaction, "extension");
	if(cjson_extension)
	{
		result_Immunization_Reaction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Immunization_Reaction->extension = PushArray(arena, Extension, result_Immunization_Reaction->extension_count);
		for(int i = 0; i < result_Immunization_Reaction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Immunization_Reaction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunization_Reaction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Immunization_Reaction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Immunization_Reaction->modifierExtension = PushArray(arena, Extension, result_Immunization_Reaction->modifierExtension_count);
		for(int i = 0; i < result_Immunization_Reaction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Immunization_Reaction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_date =  cJSON_GetObjectItem(immunization_Reaction, "date");
	if(cjson_date)
	{
		result_Immunization_Reaction->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(immunization_Reaction, "detail");
	if(cjson_detail)
	{
		result_Immunization_Reaction->detail = Deserialize_Reference(arena, cjson_detail);
	}
	cJSON *cjson_reported =  cJSON_GetObjectItem(immunization_Reaction, "reported");
	if(cjson_reported)
	{
		result_Immunization_Reaction->reported = (boolean)cJSON_IsTrue(cjson_reported);
	}
	return result_Immunization_Reaction;
}

Immunization_ProtocolApplied*
Deserialize_Immunization_ProtocolApplied(Arena *arena, cJSON *immunization_ProtocolApplied)
{
	Immunization_ProtocolApplied *result_Immunization_ProtocolApplied = PushArray(arena, Immunization_ProtocolApplied, 1);
	result_Immunization_ProtocolApplied->resourceType = ResourceType::Immunization_ProtocolApplied;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunization_ProtocolApplied, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunization_ProtocolApplied, "id");
	if(cjson_id)
	{
		result_Immunization_ProtocolApplied->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunization_ProtocolApplied, "extension");
	if(cjson_extension)
	{
		result_Immunization_ProtocolApplied->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Immunization_ProtocolApplied->extension = PushArray(arena, Extension, result_Immunization_ProtocolApplied->extension_count);
		for(int i = 0; i < result_Immunization_ProtocolApplied->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Immunization_ProtocolApplied->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunization_ProtocolApplied, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Immunization_ProtocolApplied->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Immunization_ProtocolApplied->modifierExtension = PushArray(arena, Extension, result_Immunization_ProtocolApplied->modifierExtension_count);
		for(int i = 0; i < result_Immunization_ProtocolApplied->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Immunization_ProtocolApplied->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_series =  cJSON_GetObjectItem(immunization_ProtocolApplied, "series");
	if(cjson_series)
	{
		result_Immunization_ProtocolApplied->series = Str8C(cJSON_GetStringValue(cjson_series));
	}
	cJSON *cjson_authority =  cJSON_GetObjectItem(immunization_ProtocolApplied, "authority");
	if(cjson_authority)
	{
		result_Immunization_ProtocolApplied->authority = Deserialize_Reference(arena, cjson_authority);
	}
	cJSON *cjson_targetDisease =  cJSON_GetObjectItem(immunization_ProtocolApplied, "targetDisease");
	if(cjson_targetDisease)
	{
		result_Immunization_ProtocolApplied->targetDisease_count = cJSON_GetArraySize(cjson_targetDisease);
		result_Immunization_ProtocolApplied->targetDisease = PushArray(arena, CodeableConcept, result_Immunization_ProtocolApplied->targetDisease_count);
		for(int i = 0; i < result_Immunization_ProtocolApplied->targetDisease_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_targetDisease, i);
			result_Immunization_ProtocolApplied->targetDisease[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(immunization_ProtocolApplied, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunization_ProtocolApplied, "valuePositiveInt");
		result_Immunization_ProtocolApplied->doseNumber.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_Immunization_ProtocolApplied->doseNumber_type = Immunization_ProtocolApplied::DoseNumberType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(immunization_ProtocolApplied, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunization_ProtocolApplied, "valueString");
		result_Immunization_ProtocolApplied->doseNumber.valueString = Str8C(cJSON_GetStringValue(item));
		result_Immunization_ProtocolApplied->doseNumber_type = Immunization_ProtocolApplied::DoseNumberType::fhir_string;
	}


	if((bool)cJSON_HasObjectItem(immunization_ProtocolApplied, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunization_ProtocolApplied, "valuePositiveInt");
		result_Immunization_ProtocolApplied->seriesDoses.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_Immunization_ProtocolApplied->seriesDoses_type = Immunization_ProtocolApplied::SeriesDosesType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(immunization_ProtocolApplied, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunization_ProtocolApplied, "valueString");
		result_Immunization_ProtocolApplied->seriesDoses.valueString = Str8C(cJSON_GetStringValue(item));
		result_Immunization_ProtocolApplied->seriesDoses_type = Immunization_ProtocolApplied::SeriesDosesType::fhir_string;
	}


	return result_Immunization_ProtocolApplied;
}

ImmunizationEvaluation*
Deserialize_ImmunizationEvaluation(Arena *arena, cJSON *immunizationEvaluation)
{
	ImmunizationEvaluation *result_ImmunizationEvaluation = PushArray(arena, ImmunizationEvaluation, 1);
	result_ImmunizationEvaluation->resourceType = ResourceType::ImmunizationEvaluation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunizationEvaluation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunizationEvaluation, "id");
	if(cjson_id)
	{
		result_ImmunizationEvaluation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(immunizationEvaluation, "meta");
	if(cjson_meta)
	{
		result_ImmunizationEvaluation->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(immunizationEvaluation, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ImmunizationEvaluation->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(immunizationEvaluation, "language");
	if(cjson_language)
	{
		result_ImmunizationEvaluation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(immunizationEvaluation, "text");
	if(cjson_text)
	{
		result_ImmunizationEvaluation->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(immunizationEvaluation, "contained");
	if(cjson_contained)
	{
		result_ImmunizationEvaluation->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ImmunizationEvaluation->contained = PushArray(arena, Resource, result_ImmunizationEvaluation->contained_count);
		for(int i = 0; i < result_ImmunizationEvaluation->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ImmunizationEvaluation->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunizationEvaluation, "extension");
	if(cjson_extension)
	{
		result_ImmunizationEvaluation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImmunizationEvaluation->extension = PushArray(arena, Extension, result_ImmunizationEvaluation->extension_count);
		for(int i = 0; i < result_ImmunizationEvaluation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImmunizationEvaluation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunizationEvaluation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImmunizationEvaluation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImmunizationEvaluation->modifierExtension = PushArray(arena, Extension, result_ImmunizationEvaluation->modifierExtension_count);
		for(int i = 0; i < result_ImmunizationEvaluation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImmunizationEvaluation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(immunizationEvaluation, "identifier");
	if(cjson_identifier)
	{
		result_ImmunizationEvaluation->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ImmunizationEvaluation->identifier = PushArray(arena, Identifier, result_ImmunizationEvaluation->identifier_count);
		for(int i = 0; i < result_ImmunizationEvaluation->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ImmunizationEvaluation->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(immunizationEvaluation, "status");
	if(cjson_status)
	{
		result_ImmunizationEvaluation->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(immunizationEvaluation, "patient");
	if(cjson_patient)
	{
		result_ImmunizationEvaluation->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(immunizationEvaluation, "date");
	if(cjson_date)
	{
		result_ImmunizationEvaluation->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_authority =  cJSON_GetObjectItem(immunizationEvaluation, "authority");
	if(cjson_authority)
	{
		result_ImmunizationEvaluation->authority = Deserialize_Reference(arena, cjson_authority);
	}
	cJSON *cjson_targetDisease =  cJSON_GetObjectItem(immunizationEvaluation, "targetDisease");
	if(cjson_targetDisease)
	{
		result_ImmunizationEvaluation->targetDisease = Deserialize_CodeableConcept(arena, cjson_targetDisease);
	}
	cJSON *cjson_immunizationEvent =  cJSON_GetObjectItem(immunizationEvaluation, "immunizationEvent");
	if(cjson_immunizationEvent)
	{
		result_ImmunizationEvaluation->immunizationEvent = Deserialize_Reference(arena, cjson_immunizationEvent);
	}
	cJSON *cjson_doseStatus =  cJSON_GetObjectItem(immunizationEvaluation, "doseStatus");
	if(cjson_doseStatus)
	{
		result_ImmunizationEvaluation->doseStatus = Deserialize_CodeableConcept(arena, cjson_doseStatus);
	}
	cJSON *cjson_doseStatusReason =  cJSON_GetObjectItem(immunizationEvaluation, "doseStatusReason");
	if(cjson_doseStatusReason)
	{
		result_ImmunizationEvaluation->doseStatusReason_count = cJSON_GetArraySize(cjson_doseStatusReason);
		result_ImmunizationEvaluation->doseStatusReason = PushArray(arena, CodeableConcept, result_ImmunizationEvaluation->doseStatusReason_count);
		for(int i = 0; i < result_ImmunizationEvaluation->doseStatusReason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_doseStatusReason, i);
			result_ImmunizationEvaluation->doseStatusReason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(immunizationEvaluation, "description");
	if(cjson_description)
	{
		result_ImmunizationEvaluation->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_series =  cJSON_GetObjectItem(immunizationEvaluation, "series");
	if(cjson_series)
	{
		result_ImmunizationEvaluation->series = Str8C(cJSON_GetStringValue(cjson_series));
	}
	if((bool)cJSON_HasObjectItem(immunizationEvaluation, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationEvaluation, "valuePositiveInt");
		result_ImmunizationEvaluation->doseNumber.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ImmunizationEvaluation->doseNumber_type = ImmunizationEvaluation::DoseNumberType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(immunizationEvaluation, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationEvaluation, "valueString");
		result_ImmunizationEvaluation->doseNumber.valueString = Str8C(cJSON_GetStringValue(item));
		result_ImmunizationEvaluation->doseNumber_type = ImmunizationEvaluation::DoseNumberType::fhir_string;
	}


	if((bool)cJSON_HasObjectItem(immunizationEvaluation, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationEvaluation, "valuePositiveInt");
		result_ImmunizationEvaluation->seriesDoses.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ImmunizationEvaluation->seriesDoses_type = ImmunizationEvaluation::SeriesDosesType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(immunizationEvaluation, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationEvaluation, "valueString");
		result_ImmunizationEvaluation->seriesDoses.valueString = Str8C(cJSON_GetStringValue(item));
		result_ImmunizationEvaluation->seriesDoses_type = ImmunizationEvaluation::SeriesDosesType::fhir_string;
	}


	return result_ImmunizationEvaluation;
}

ImmunizationRecommendation*
Deserialize_ImmunizationRecommendation(Arena *arena, cJSON *immunizationRecommendation)
{
	ImmunizationRecommendation *result_ImmunizationRecommendation = PushArray(arena, ImmunizationRecommendation, 1);
	result_ImmunizationRecommendation->resourceType = ResourceType::ImmunizationRecommendation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunizationRecommendation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunizationRecommendation, "id");
	if(cjson_id)
	{
		result_ImmunizationRecommendation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(immunizationRecommendation, "meta");
	if(cjson_meta)
	{
		result_ImmunizationRecommendation->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(immunizationRecommendation, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ImmunizationRecommendation->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(immunizationRecommendation, "language");
	if(cjson_language)
	{
		result_ImmunizationRecommendation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(immunizationRecommendation, "text");
	if(cjson_text)
	{
		result_ImmunizationRecommendation->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(immunizationRecommendation, "contained");
	if(cjson_contained)
	{
		result_ImmunizationRecommendation->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ImmunizationRecommendation->contained = PushArray(arena, Resource, result_ImmunizationRecommendation->contained_count);
		for(int i = 0; i < result_ImmunizationRecommendation->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ImmunizationRecommendation->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunizationRecommendation, "extension");
	if(cjson_extension)
	{
		result_ImmunizationRecommendation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImmunizationRecommendation->extension = PushArray(arena, Extension, result_ImmunizationRecommendation->extension_count);
		for(int i = 0; i < result_ImmunizationRecommendation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImmunizationRecommendation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunizationRecommendation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImmunizationRecommendation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImmunizationRecommendation->modifierExtension = PushArray(arena, Extension, result_ImmunizationRecommendation->modifierExtension_count);
		for(int i = 0; i < result_ImmunizationRecommendation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImmunizationRecommendation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(immunizationRecommendation, "identifier");
	if(cjson_identifier)
	{
		result_ImmunizationRecommendation->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ImmunizationRecommendation->identifier = PushArray(arena, Identifier, result_ImmunizationRecommendation->identifier_count);
		for(int i = 0; i < result_ImmunizationRecommendation->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ImmunizationRecommendation->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(immunizationRecommendation, "patient");
	if(cjson_patient)
	{
		result_ImmunizationRecommendation->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(immunizationRecommendation, "date");
	if(cjson_date)
	{
		result_ImmunizationRecommendation->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_authority =  cJSON_GetObjectItem(immunizationRecommendation, "authority");
	if(cjson_authority)
	{
		result_ImmunizationRecommendation->authority = Deserialize_Reference(arena, cjson_authority);
	}
	cJSON *cjson_recommendation =  cJSON_GetObjectItem(immunizationRecommendation, "recommendation");
	if(cjson_recommendation)
	{
		result_ImmunizationRecommendation->recommendation_count = cJSON_GetArraySize(cjson_recommendation);
		result_ImmunizationRecommendation->recommendation = PushArray(arena, ImmunizationRecommendation_Recommendation, result_ImmunizationRecommendation->recommendation_count);
		for(int i = 0; i < result_ImmunizationRecommendation->recommendation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_recommendation, i);
			result_ImmunizationRecommendation->recommendation[i] = *Deserialize_ImmunizationRecommendation_Recommendation(arena, internal);
		}

	}
	return result_ImmunizationRecommendation;
}

ImmunizationRecommendation_Recommendation*
Deserialize_ImmunizationRecommendation_Recommendation(Arena *arena, cJSON *immunizationRecommendation_Recommendation)
{
	ImmunizationRecommendation_Recommendation *result_ImmunizationRecommendation_Recommendation = PushArray(arena, ImmunizationRecommendation_Recommendation, 1);
	result_ImmunizationRecommendation_Recommendation->resourceType = ResourceType::ImmunizationRecommendation_Recommendation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "id");
	if(cjson_id)
	{
		result_ImmunizationRecommendation_Recommendation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "extension");
	if(cjson_extension)
	{
		result_ImmunizationRecommendation_Recommendation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImmunizationRecommendation_Recommendation->extension = PushArray(arena, Extension, result_ImmunizationRecommendation_Recommendation->extension_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImmunizationRecommendation_Recommendation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImmunizationRecommendation_Recommendation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImmunizationRecommendation_Recommendation->modifierExtension = PushArray(arena, Extension, result_ImmunizationRecommendation_Recommendation->modifierExtension_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImmunizationRecommendation_Recommendation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_vaccineCode =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "vaccineCode");
	if(cjson_vaccineCode)
	{
		result_ImmunizationRecommendation_Recommendation->vaccineCode_count = cJSON_GetArraySize(cjson_vaccineCode);
		result_ImmunizationRecommendation_Recommendation->vaccineCode = PushArray(arena, CodeableConcept, result_ImmunizationRecommendation_Recommendation->vaccineCode_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->vaccineCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_vaccineCode, i);
			result_ImmunizationRecommendation_Recommendation->vaccineCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_targetDisease =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "targetDisease");
	if(cjson_targetDisease)
	{
		result_ImmunizationRecommendation_Recommendation->targetDisease = Deserialize_CodeableConcept(arena, cjson_targetDisease);
	}
	cJSON *cjson_contraindicatedVaccineCode =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "contraindicatedVaccineCode");
	if(cjson_contraindicatedVaccineCode)
	{
		result_ImmunizationRecommendation_Recommendation->contraindicatedVaccineCode_count = cJSON_GetArraySize(cjson_contraindicatedVaccineCode);
		result_ImmunizationRecommendation_Recommendation->contraindicatedVaccineCode = PushArray(arena, CodeableConcept, result_ImmunizationRecommendation_Recommendation->contraindicatedVaccineCode_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->contraindicatedVaccineCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contraindicatedVaccineCode, i);
			result_ImmunizationRecommendation_Recommendation->contraindicatedVaccineCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_forecastStatus =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "forecastStatus");
	if(cjson_forecastStatus)
	{
		result_ImmunizationRecommendation_Recommendation->forecastStatus = Deserialize_CodeableConcept(arena, cjson_forecastStatus);
	}
	cJSON *cjson_forecastReason =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "forecastReason");
	if(cjson_forecastReason)
	{
		result_ImmunizationRecommendation_Recommendation->forecastReason_count = cJSON_GetArraySize(cjson_forecastReason);
		result_ImmunizationRecommendation_Recommendation->forecastReason = PushArray(arena, CodeableConcept, result_ImmunizationRecommendation_Recommendation->forecastReason_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->forecastReason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_forecastReason, i);
			result_ImmunizationRecommendation_Recommendation->forecastReason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_dateCriterion =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "dateCriterion");
	if(cjson_dateCriterion)
	{
		result_ImmunizationRecommendation_Recommendation->dateCriterion_count = cJSON_GetArraySize(cjson_dateCriterion);
		result_ImmunizationRecommendation_Recommendation->dateCriterion = PushArray(arena, ImmunizationRecommendation_Recommendation_DateCriterion, result_ImmunizationRecommendation_Recommendation->dateCriterion_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->dateCriterion_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dateCriterion, i);
			result_ImmunizationRecommendation_Recommendation->dateCriterion[i] = *Deserialize_ImmunizationRecommendation_Recommendation_DateCriterion(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "description");
	if(cjson_description)
	{
		result_ImmunizationRecommendation_Recommendation->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_series =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "series");
	if(cjson_series)
	{
		result_ImmunizationRecommendation_Recommendation->series = Str8C(cJSON_GetStringValue(cjson_series));
	}
	if((bool)cJSON_HasObjectItem(immunizationRecommendation_Recommendation, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "valuePositiveInt");
		result_ImmunizationRecommendation_Recommendation->doseNumber.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ImmunizationRecommendation_Recommendation->doseNumber_type = ImmunizationRecommendation_Recommendation::DoseNumberType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(immunizationRecommendation_Recommendation, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "valueString");
		result_ImmunizationRecommendation_Recommendation->doseNumber.valueString = Str8C(cJSON_GetStringValue(item));
		result_ImmunizationRecommendation_Recommendation->doseNumber_type = ImmunizationRecommendation_Recommendation::DoseNumberType::fhir_string;
	}


	if((bool)cJSON_HasObjectItem(immunizationRecommendation_Recommendation, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "valuePositiveInt");
		result_ImmunizationRecommendation_Recommendation->seriesDoses.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ImmunizationRecommendation_Recommendation->seriesDoses_type = ImmunizationRecommendation_Recommendation::SeriesDosesType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(immunizationRecommendation_Recommendation, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "valueString");
		result_ImmunizationRecommendation_Recommendation->seriesDoses.valueString = Str8C(cJSON_GetStringValue(item));
		result_ImmunizationRecommendation_Recommendation->seriesDoses_type = ImmunizationRecommendation_Recommendation::SeriesDosesType::fhir_string;
	}


	cJSON *cjson_supportingImmunization =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "supportingImmunization");
	if(cjson_supportingImmunization)
	{
		result_ImmunizationRecommendation_Recommendation->supportingImmunization_count = cJSON_GetArraySize(cjson_supportingImmunization);
		result_ImmunizationRecommendation_Recommendation->supportingImmunization = PushArray(arena, Reference, result_ImmunizationRecommendation_Recommendation->supportingImmunization_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->supportingImmunization_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingImmunization, i);
			result_ImmunizationRecommendation_Recommendation->supportingImmunization[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_supportingPatientInformation =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation, "supportingPatientInformation");
	if(cjson_supportingPatientInformation)
	{
		result_ImmunizationRecommendation_Recommendation->supportingPatientInformation_count = cJSON_GetArraySize(cjson_supportingPatientInformation);
		result_ImmunizationRecommendation_Recommendation->supportingPatientInformation = PushArray(arena, Reference, result_ImmunizationRecommendation_Recommendation->supportingPatientInformation_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation->supportingPatientInformation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingPatientInformation, i);
			result_ImmunizationRecommendation_Recommendation->supportingPatientInformation[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_ImmunizationRecommendation_Recommendation;
}

ImmunizationRecommendation_Recommendation_DateCriterion*
Deserialize_ImmunizationRecommendation_Recommendation_DateCriterion(Arena *arena, cJSON *immunizationRecommendation_Recommendation_DateCriterion)
{
	ImmunizationRecommendation_Recommendation_DateCriterion *result_ImmunizationRecommendation_Recommendation_DateCriterion = PushArray(arena, ImmunizationRecommendation_Recommendation_DateCriterion, 1);
	result_ImmunizationRecommendation_Recommendation_DateCriterion->resourceType = ResourceType::ImmunizationRecommendation_Recommendation_DateCriterion;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation_DateCriterion, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation_DateCriterion, "id");
	if(cjson_id)
	{
		result_ImmunizationRecommendation_Recommendation_DateCriterion->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation_DateCriterion, "extension");
	if(cjson_extension)
	{
		result_ImmunizationRecommendation_Recommendation_DateCriterion->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImmunizationRecommendation_Recommendation_DateCriterion->extension = PushArray(arena, Extension, result_ImmunizationRecommendation_Recommendation_DateCriterion->extension_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation_DateCriterion->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImmunizationRecommendation_Recommendation_DateCriterion->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation_DateCriterion, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImmunizationRecommendation_Recommendation_DateCriterion->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImmunizationRecommendation_Recommendation_DateCriterion->modifierExtension = PushArray(arena, Extension, result_ImmunizationRecommendation_Recommendation_DateCriterion->modifierExtension_count);
		for(int i = 0; i < result_ImmunizationRecommendation_Recommendation_DateCriterion->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImmunizationRecommendation_Recommendation_DateCriterion->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation_DateCriterion, "code");
	if(cjson_code)
	{
		result_ImmunizationRecommendation_Recommendation_DateCriterion->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(immunizationRecommendation_Recommendation_DateCriterion, "value");
	if(cjson_value)
	{
		result_ImmunizationRecommendation_Recommendation_DateCriterion->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_ImmunizationRecommendation_Recommendation_DateCriterion;
}

ImplementationGuide*
Deserialize_ImplementationGuide(Arena *arena, cJSON *implementationGuide)
{
	ImplementationGuide *result_ImplementationGuide = PushArray(arena, ImplementationGuide, 1);
	result_ImplementationGuide->resourceType = ResourceType::ImplementationGuide;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide, "id");
	if(cjson_id)
	{
		result_ImplementationGuide->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(implementationGuide, "meta");
	if(cjson_meta)
	{
		result_ImplementationGuide->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(implementationGuide, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ImplementationGuide->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(implementationGuide, "language");
	if(cjson_language)
	{
		result_ImplementationGuide->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(implementationGuide, "text");
	if(cjson_text)
	{
		result_ImplementationGuide->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(implementationGuide, "contained");
	if(cjson_contained)
	{
		result_ImplementationGuide->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ImplementationGuide->contained = PushArray(arena, Resource, result_ImplementationGuide->contained_count);
		for(int i = 0; i < result_ImplementationGuide->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ImplementationGuide->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide->extension = PushArray(arena, Extension, result_ImplementationGuide->extension_count);
		for(int i = 0; i < result_ImplementationGuide->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(implementationGuide, "url");
	if(cjson_url)
	{
		result_ImplementationGuide->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(implementationGuide, "version");
	if(cjson_version)
	{
		result_ImplementationGuide->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(implementationGuide, "name");
	if(cjson_name)
	{
		result_ImplementationGuide->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(implementationGuide, "title");
	if(cjson_title)
	{
		result_ImplementationGuide->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(implementationGuide, "status");
	if(cjson_status)
	{
		result_ImplementationGuide->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(implementationGuide, "experimental");
	if(cjson_experimental)
	{
		result_ImplementationGuide->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(implementationGuide, "date");
	if(cjson_date)
	{
		result_ImplementationGuide->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(implementationGuide, "publisher");
	if(cjson_publisher)
	{
		result_ImplementationGuide->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(implementationGuide, "contact");
	if(cjson_contact)
	{
		result_ImplementationGuide->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ImplementationGuide->contact = PushArray(arena, ContactDetail, result_ImplementationGuide->contact_count);
		for(int i = 0; i < result_ImplementationGuide->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ImplementationGuide->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(implementationGuide, "description");
	if(cjson_description)
	{
		result_ImplementationGuide->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(implementationGuide, "useContext");
	if(cjson_useContext)
	{
		result_ImplementationGuide->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ImplementationGuide->useContext = PushArray(arena, UsageContext, result_ImplementationGuide->useContext_count);
		for(int i = 0; i < result_ImplementationGuide->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ImplementationGuide->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(implementationGuide, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ImplementationGuide->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ImplementationGuide->jurisdiction = PushArray(arena, CodeableConcept, result_ImplementationGuide->jurisdiction_count);
		for(int i = 0; i < result_ImplementationGuide->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ImplementationGuide->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(implementationGuide, "copyright");
	if(cjson_copyright)
	{
		result_ImplementationGuide->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_packageId =  cJSON_GetObjectItem(implementationGuide, "packageId");
	if(cjson_packageId)
	{
		result_ImplementationGuide->packageId = Str8C(cJSON_GetStringValue(cjson_packageId));
	}
	cJSON *cjson_license =  cJSON_GetObjectItem(implementationGuide, "license");
	if(cjson_license)
	{
		result_ImplementationGuide->license = Str8C(cJSON_GetStringValue(cjson_license));
	}
	cJSON *cjson_fhirVersion =  cJSON_GetObjectItem(implementationGuide, "fhirVersion");
	if(cjson_fhirVersion)
	{
		result_ImplementationGuide->fhirVersion_count = cJSON_GetArraySize(cjson_fhirVersion);
		result_ImplementationGuide->fhirVersion = PushArray(arena, fhir_code, result_ImplementationGuide->fhirVersion_count);
		for(int i = 0; i < result_ImplementationGuide->fhirVersion_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_fhirVersion, i);
			result_ImplementationGuide->fhirVersion[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_dependsOn =  cJSON_GetObjectItem(implementationGuide, "dependsOn");
	if(cjson_dependsOn)
	{
		result_ImplementationGuide->dependsOn_count = cJSON_GetArraySize(cjson_dependsOn);
		result_ImplementationGuide->dependsOn = PushArray(arena, ImplementationGuide_DependsOn, result_ImplementationGuide->dependsOn_count);
		for(int i = 0; i < result_ImplementationGuide->dependsOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dependsOn, i);
			result_ImplementationGuide->dependsOn[i] = *Deserialize_ImplementationGuide_DependsOn(arena, internal);
		}

	}
	cJSON *cjson_global_ =  cJSON_GetObjectItem(implementationGuide, "global_");
	if(cjson_global_)
	{
		result_ImplementationGuide->global__count = cJSON_GetArraySize(cjson_global_);
		result_ImplementationGuide->global_ = PushArray(arena, ImplementationGuide_Global, result_ImplementationGuide->global__count);
		for(int i = 0; i < result_ImplementationGuide->global__count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_global_, i);
			result_ImplementationGuide->global_[i] = *Deserialize_ImplementationGuide_Global(arena, internal);
		}

	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(implementationGuide, "definition");
	if(cjson_definition)
	{
		result_ImplementationGuide->definition = Deserialize_ImplementationGuide_Definition(arena, cjson_definition);
	}
	cJSON *cjson_manifest =  cJSON_GetObjectItem(implementationGuide, "manifest");
	if(cjson_manifest)
	{
		result_ImplementationGuide->manifest = Deserialize_ImplementationGuide_Manifest(arena, cjson_manifest);
	}
	return result_ImplementationGuide;
}

ImplementationGuide_DependsOn*
Deserialize_ImplementationGuide_DependsOn(Arena *arena, cJSON *implementationGuide_DependsOn)
{
	ImplementationGuide_DependsOn *result_ImplementationGuide_DependsOn = PushArray(arena, ImplementationGuide_DependsOn, 1);
	result_ImplementationGuide_DependsOn->resourceType = ResourceType::ImplementationGuide_DependsOn;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_DependsOn, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_DependsOn, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_DependsOn->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_DependsOn, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_DependsOn->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_DependsOn->extension = PushArray(arena, Extension, result_ImplementationGuide_DependsOn->extension_count);
		for(int i = 0; i < result_ImplementationGuide_DependsOn->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_DependsOn->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_DependsOn, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_DependsOn->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_DependsOn->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_DependsOn->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_DependsOn->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_DependsOn->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_uri =  cJSON_GetObjectItem(implementationGuide_DependsOn, "uri");
	if(cjson_uri)
	{
		result_ImplementationGuide_DependsOn->uri = Str8C(cJSON_GetStringValue(cjson_uri));
	}
	cJSON *cjson_packageId =  cJSON_GetObjectItem(implementationGuide_DependsOn, "packageId");
	if(cjson_packageId)
	{
		result_ImplementationGuide_DependsOn->packageId = Str8C(cJSON_GetStringValue(cjson_packageId));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(implementationGuide_DependsOn, "version");
	if(cjson_version)
	{
		result_ImplementationGuide_DependsOn->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	return result_ImplementationGuide_DependsOn;
}

ImplementationGuide_Global*
Deserialize_ImplementationGuide_Global(Arena *arena, cJSON *implementationGuide_Global)
{
	ImplementationGuide_Global *result_ImplementationGuide_Global = PushArray(arena, ImplementationGuide_Global, 1);
	result_ImplementationGuide_Global->resourceType = ResourceType::ImplementationGuide_Global;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Global, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Global, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Global->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Global, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Global->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Global->extension = PushArray(arena, Extension, result_ImplementationGuide_Global->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Global->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Global->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Global, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Global->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Global->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Global->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Global->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Global->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(implementationGuide_Global, "type");
	if(cjson_type)
	{
		result_ImplementationGuide_Global->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(implementationGuide_Global, "profile");
	if(cjson_profile)
	{
		result_ImplementationGuide_Global->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	return result_ImplementationGuide_Global;
}

ImplementationGuide_Definition*
Deserialize_ImplementationGuide_Definition(Arena *arena, cJSON *implementationGuide_Definition)
{
	ImplementationGuide_Definition *result_ImplementationGuide_Definition = PushArray(arena, ImplementationGuide_Definition, 1);
	result_ImplementationGuide_Definition->resourceType = ResourceType::ImplementationGuide_Definition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Definition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Definition, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Definition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Definition, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Definition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Definition->extension = PushArray(arena, Extension, result_ImplementationGuide_Definition->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Definition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Definition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Definition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Definition->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Definition->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Definition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_grouping =  cJSON_GetObjectItem(implementationGuide_Definition, "grouping");
	if(cjson_grouping)
	{
		result_ImplementationGuide_Definition->grouping_count = cJSON_GetArraySize(cjson_grouping);
		result_ImplementationGuide_Definition->grouping = PushArray(arena, ImplementationGuide_Definition_Grouping, result_ImplementationGuide_Definition->grouping_count);
		for(int i = 0; i < result_ImplementationGuide_Definition->grouping_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_grouping, i);
			result_ImplementationGuide_Definition->grouping[i] = *Deserialize_ImplementationGuide_Definition_Grouping(arena, internal);
		}

	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(implementationGuide_Definition, "resource");
	if(cjson_resource)
	{
		result_ImplementationGuide_Definition->resource_count = cJSON_GetArraySize(cjson_resource);
		result_ImplementationGuide_Definition->resource = PushArray(arena, ImplementationGuide_Definition_Resource, result_ImplementationGuide_Definition->resource_count);
		for(int i = 0; i < result_ImplementationGuide_Definition->resource_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resource, i);
			result_ImplementationGuide_Definition->resource[i] = *Deserialize_ImplementationGuide_Definition_Resource(arena, internal);
		}

	}
	cJSON *cjson_page =  cJSON_GetObjectItem(implementationGuide_Definition, "page");
	if(cjson_page)
	{
		result_ImplementationGuide_Definition->page = Deserialize_ImplementationGuide_Definition_Page(arena, cjson_page);
	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(implementationGuide_Definition, "parameter");
	if(cjson_parameter)
	{
		result_ImplementationGuide_Definition->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_ImplementationGuide_Definition->parameter = PushArray(arena, ImplementationGuide_Definition_Parameter, result_ImplementationGuide_Definition->parameter_count);
		for(int i = 0; i < result_ImplementationGuide_Definition->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_ImplementationGuide_Definition->parameter[i] = *Deserialize_ImplementationGuide_Definition_Parameter(arena, internal);
		}

	}
	cJSON *cjson_template_ =  cJSON_GetObjectItem(implementationGuide_Definition, "template_");
	if(cjson_template_)
	{
		result_ImplementationGuide_Definition->template__count = cJSON_GetArraySize(cjson_template_);
		result_ImplementationGuide_Definition->template_ = PushArray(arena, ImplementationGuide_Definition_Template, result_ImplementationGuide_Definition->template__count);
		for(int i = 0; i < result_ImplementationGuide_Definition->template__count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_template_, i);
			result_ImplementationGuide_Definition->template_[i] = *Deserialize_ImplementationGuide_Definition_Template(arena, internal);
		}

	}
	return result_ImplementationGuide_Definition;
}

ImplementationGuide_Definition_Grouping*
Deserialize_ImplementationGuide_Definition_Grouping(Arena *arena, cJSON *implementationGuide_Definition_Grouping)
{
	ImplementationGuide_Definition_Grouping *result_ImplementationGuide_Definition_Grouping = PushArray(arena, ImplementationGuide_Definition_Grouping, 1);
	result_ImplementationGuide_Definition_Grouping->resourceType = ResourceType::ImplementationGuide_Definition_Grouping;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Definition_Grouping, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Definition_Grouping, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Definition_Grouping->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Definition_Grouping, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Definition_Grouping->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Definition_Grouping->extension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Grouping->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Grouping->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Definition_Grouping->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Definition_Grouping, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Definition_Grouping->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Definition_Grouping->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Grouping->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Grouping->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Definition_Grouping->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(implementationGuide_Definition_Grouping, "name");
	if(cjson_name)
	{
		result_ImplementationGuide_Definition_Grouping->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(implementationGuide_Definition_Grouping, "description");
	if(cjson_description)
	{
		result_ImplementationGuide_Definition_Grouping->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_ImplementationGuide_Definition_Grouping;
}

ImplementationGuide_Definition_Resource*
Deserialize_ImplementationGuide_Definition_Resource(Arena *arena, cJSON *implementationGuide_Definition_Resource)
{
	ImplementationGuide_Definition_Resource *result_ImplementationGuide_Definition_Resource = PushArray(arena, ImplementationGuide_Definition_Resource, 1);
	result_ImplementationGuide_Definition_Resource->resourceType = ResourceType::ImplementationGuide_Definition_Resource;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Definition_Resource->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Definition_Resource->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Definition_Resource->extension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Resource->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Resource->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Definition_Resource->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Definition_Resource->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Definition_Resource->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Resource->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Resource->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Definition_Resource->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "reference");
	if(cjson_reference)
	{
		result_ImplementationGuide_Definition_Resource->reference = Deserialize_Reference(arena, cjson_reference);
	}
	cJSON *cjson_fhirVersion =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "fhirVersion");
	if(cjson_fhirVersion)
	{
		result_ImplementationGuide_Definition_Resource->fhirVersion_count = cJSON_GetArraySize(cjson_fhirVersion);
		result_ImplementationGuide_Definition_Resource->fhirVersion = PushArray(arena, fhir_code, result_ImplementationGuide_Definition_Resource->fhirVersion_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Resource->fhirVersion_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_fhirVersion, i);
			result_ImplementationGuide_Definition_Resource->fhirVersion[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "name");
	if(cjson_name)
	{
		result_ImplementationGuide_Definition_Resource->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "description");
	if(cjson_description)
	{
		result_ImplementationGuide_Definition_Resource->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	if((bool)cJSON_HasObjectItem(implementationGuide_Definition_Resource, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(implementationGuide_Definition_Resource, "valueBoolean");
		result_ImplementationGuide_Definition_Resource->example.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ImplementationGuide_Definition_Resource->example_type = ImplementationGuide_Definition_Resource::ExampleType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(implementationGuide_Definition_Resource, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(implementationGuide_Definition_Resource, "valueCanonical");
		result_ImplementationGuide_Definition_Resource->example.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ImplementationGuide_Definition_Resource->example_type = ImplementationGuide_Definition_Resource::ExampleType::fhir_canonical;
	}


	cJSON *cjson_groupingId =  cJSON_GetObjectItem(implementationGuide_Definition_Resource, "groupingId");
	if(cjson_groupingId)
	{
		result_ImplementationGuide_Definition_Resource->groupingId = Str8C(cJSON_GetStringValue(cjson_groupingId));
	}
	return result_ImplementationGuide_Definition_Resource;
}

ImplementationGuide_Definition_Page*
Deserialize_ImplementationGuide_Definition_Page(Arena *arena, cJSON *implementationGuide_Definition_Page)
{
	ImplementationGuide_Definition_Page *result_ImplementationGuide_Definition_Page = PushArray(arena, ImplementationGuide_Definition_Page, 1);
	result_ImplementationGuide_Definition_Page->resourceType = ResourceType::ImplementationGuide_Definition_Page;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Definition_Page, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Definition_Page, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Definition_Page->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Definition_Page, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Definition_Page->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Definition_Page->extension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Page->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Page->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Definition_Page->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Definition_Page, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Definition_Page->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Definition_Page->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Page->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Page->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Definition_Page->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(implementationGuide_Definition_Page, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(implementationGuide_Definition_Page, "valueUrl");
		result_ImplementationGuide_Definition_Page->name.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_ImplementationGuide_Definition_Page->name_type = ImplementationGuide_Definition_Page::NameType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(implementationGuide_Definition_Page, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(implementationGuide_Definition_Page, "valueReference");
		result_ImplementationGuide_Definition_Page->name.valueReference = Deserialize_Reference(arena, item);
		result_ImplementationGuide_Definition_Page->name_type = ImplementationGuide_Definition_Page::NameType::Reference;
	}


	cJSON *cjson_title =  cJSON_GetObjectItem(implementationGuide_Definition_Page, "title");
	if(cjson_title)
	{
		result_ImplementationGuide_Definition_Page->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_generation =  cJSON_GetObjectItem(implementationGuide_Definition_Page, "generation");
	if(cjson_generation)
	{
		result_ImplementationGuide_Definition_Page->generation = Str8C(cJSON_GetStringValue(cjson_generation));
	}
	cJSON *cjson_page =  cJSON_GetObjectItem(implementationGuide_Definition_Page, "page");
	if(cjson_page)
	{
		result_ImplementationGuide_Definition_Page->page_count = cJSON_GetArraySize(cjson_page);
		result_ImplementationGuide_Definition_Page->page = PushArray(arena, ImplementationGuide_Definition_Page, result_ImplementationGuide_Definition_Page->page_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Page->page_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_page, i);
			result_ImplementationGuide_Definition_Page->page[i] = *Deserialize_ImplementationGuide_Definition_Page(arena, internal);
		}

	}
	return result_ImplementationGuide_Definition_Page;
}

ImplementationGuide_Definition_Parameter*
Deserialize_ImplementationGuide_Definition_Parameter(Arena *arena, cJSON *implementationGuide_Definition_Parameter)
{
	ImplementationGuide_Definition_Parameter *result_ImplementationGuide_Definition_Parameter = PushArray(arena, ImplementationGuide_Definition_Parameter, 1);
	result_ImplementationGuide_Definition_Parameter->resourceType = ResourceType::ImplementationGuide_Definition_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Definition_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Definition_Parameter, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Definition_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Definition_Parameter, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Definition_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Definition_Parameter->extension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Parameter->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Definition_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Definition_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Definition_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Definition_Parameter->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Parameter->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Definition_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(implementationGuide_Definition_Parameter, "code");
	if(cjson_code)
	{
		result_ImplementationGuide_Definition_Parameter->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(implementationGuide_Definition_Parameter, "value");
	if(cjson_value)
	{
		result_ImplementationGuide_Definition_Parameter->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_ImplementationGuide_Definition_Parameter;
}

ImplementationGuide_Definition_Template*
Deserialize_ImplementationGuide_Definition_Template(Arena *arena, cJSON *implementationGuide_Definition_Template)
{
	ImplementationGuide_Definition_Template *result_ImplementationGuide_Definition_Template = PushArray(arena, ImplementationGuide_Definition_Template, 1);
	result_ImplementationGuide_Definition_Template->resourceType = ResourceType::ImplementationGuide_Definition_Template;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Definition_Template, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Definition_Template, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Definition_Template->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Definition_Template, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Definition_Template->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Definition_Template->extension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Template->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Template->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Definition_Template->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Definition_Template, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Definition_Template->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Definition_Template->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Definition_Template->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Definition_Template->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Definition_Template->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(implementationGuide_Definition_Template, "code");
	if(cjson_code)
	{
		result_ImplementationGuide_Definition_Template->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(implementationGuide_Definition_Template, "source");
	if(cjson_source)
	{
		result_ImplementationGuide_Definition_Template->source = Str8C(cJSON_GetStringValue(cjson_source));
	}
	cJSON *cjson_scope =  cJSON_GetObjectItem(implementationGuide_Definition_Template, "scope");
	if(cjson_scope)
	{
		result_ImplementationGuide_Definition_Template->scope = Str8C(cJSON_GetStringValue(cjson_scope));
	}
	return result_ImplementationGuide_Definition_Template;
}

ImplementationGuide_Manifest*
Deserialize_ImplementationGuide_Manifest(Arena *arena, cJSON *implementationGuide_Manifest)
{
	ImplementationGuide_Manifest *result_ImplementationGuide_Manifest = PushArray(arena, ImplementationGuide_Manifest, 1);
	result_ImplementationGuide_Manifest->resourceType = ResourceType::ImplementationGuide_Manifest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Manifest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Manifest, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Manifest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Manifest, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Manifest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Manifest->extension = PushArray(arena, Extension, result_ImplementationGuide_Manifest->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Manifest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Manifest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Manifest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Manifest->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Manifest->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Manifest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_rendering =  cJSON_GetObjectItem(implementationGuide_Manifest, "rendering");
	if(cjson_rendering)
	{
		result_ImplementationGuide_Manifest->rendering = Str8C(cJSON_GetStringValue(cjson_rendering));
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(implementationGuide_Manifest, "resource");
	if(cjson_resource)
	{
		result_ImplementationGuide_Manifest->resource_count = cJSON_GetArraySize(cjson_resource);
		result_ImplementationGuide_Manifest->resource = PushArray(arena, ImplementationGuide_Manifest_Resource, result_ImplementationGuide_Manifest->resource_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest->resource_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resource, i);
			result_ImplementationGuide_Manifest->resource[i] = *Deserialize_ImplementationGuide_Manifest_Resource(arena, internal);
		}

	}
	cJSON *cjson_page =  cJSON_GetObjectItem(implementationGuide_Manifest, "page");
	if(cjson_page)
	{
		result_ImplementationGuide_Manifest->page_count = cJSON_GetArraySize(cjson_page);
		result_ImplementationGuide_Manifest->page = PushArray(arena, ImplementationGuide_Manifest_Page, result_ImplementationGuide_Manifest->page_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest->page_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_page, i);
			result_ImplementationGuide_Manifest->page[i] = *Deserialize_ImplementationGuide_Manifest_Page(arena, internal);
		}

	}
	cJSON *cjson_image =  cJSON_GetObjectItem(implementationGuide_Manifest, "image");
	if(cjson_image)
	{
		result_ImplementationGuide_Manifest->image_count = cJSON_GetArraySize(cjson_image);
		result_ImplementationGuide_Manifest->image = PushArray(arena, fhir_string, result_ImplementationGuide_Manifest->image_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest->image_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_image, i);
			result_ImplementationGuide_Manifest->image[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_other =  cJSON_GetObjectItem(implementationGuide_Manifest, "other");
	if(cjson_other)
	{
		result_ImplementationGuide_Manifest->other_count = cJSON_GetArraySize(cjson_other);
		result_ImplementationGuide_Manifest->other = PushArray(arena, fhir_string, result_ImplementationGuide_Manifest->other_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest->other_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_other, i);
			result_ImplementationGuide_Manifest->other[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_ImplementationGuide_Manifest;
}

ImplementationGuide_Manifest_Resource*
Deserialize_ImplementationGuide_Manifest_Resource(Arena *arena, cJSON *implementationGuide_Manifest_Resource)
{
	ImplementationGuide_Manifest_Resource *result_ImplementationGuide_Manifest_Resource = PushArray(arena, ImplementationGuide_Manifest_Resource, 1);
	result_ImplementationGuide_Manifest_Resource->resourceType = ResourceType::ImplementationGuide_Manifest_Resource;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Manifest_Resource->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Manifest_Resource->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Manifest_Resource->extension = PushArray(arena, Extension, result_ImplementationGuide_Manifest_Resource->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest_Resource->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Manifest_Resource->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Manifest_Resource->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Manifest_Resource->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Manifest_Resource->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest_Resource->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Manifest_Resource->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "reference");
	if(cjson_reference)
	{
		result_ImplementationGuide_Manifest_Resource->reference = Deserialize_Reference(arena, cjson_reference);
	}
	if((bool)cJSON_HasObjectItem(implementationGuide_Manifest_Resource, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "valueBoolean");
		result_ImplementationGuide_Manifest_Resource->example.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ImplementationGuide_Manifest_Resource->example_type = ImplementationGuide_Manifest_Resource::ExampleType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(implementationGuide_Manifest_Resource, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "valueCanonical");
		result_ImplementationGuide_Manifest_Resource->example.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ImplementationGuide_Manifest_Resource->example_type = ImplementationGuide_Manifest_Resource::ExampleType::fhir_canonical;
	}


	cJSON *cjson_relativePath =  cJSON_GetObjectItem(implementationGuide_Manifest_Resource, "relativePath");
	if(cjson_relativePath)
	{
		result_ImplementationGuide_Manifest_Resource->relativePath = Str8C(cJSON_GetStringValue(cjson_relativePath));
	}
	return result_ImplementationGuide_Manifest_Resource;
}

ImplementationGuide_Manifest_Page*
Deserialize_ImplementationGuide_Manifest_Page(Arena *arena, cJSON *implementationGuide_Manifest_Page)
{
	ImplementationGuide_Manifest_Page *result_ImplementationGuide_Manifest_Page = PushArray(arena, ImplementationGuide_Manifest_Page, 1);
	result_ImplementationGuide_Manifest_Page->resourceType = ResourceType::ImplementationGuide_Manifest_Page;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(implementationGuide_Manifest_Page, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(implementationGuide_Manifest_Page, "id");
	if(cjson_id)
	{
		result_ImplementationGuide_Manifest_Page->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(implementationGuide_Manifest_Page, "extension");
	if(cjson_extension)
	{
		result_ImplementationGuide_Manifest_Page->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ImplementationGuide_Manifest_Page->extension = PushArray(arena, Extension, result_ImplementationGuide_Manifest_Page->extension_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest_Page->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ImplementationGuide_Manifest_Page->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(implementationGuide_Manifest_Page, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ImplementationGuide_Manifest_Page->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ImplementationGuide_Manifest_Page->modifierExtension = PushArray(arena, Extension, result_ImplementationGuide_Manifest_Page->modifierExtension_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest_Page->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ImplementationGuide_Manifest_Page->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(implementationGuide_Manifest_Page, "name");
	if(cjson_name)
	{
		result_ImplementationGuide_Manifest_Page->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(implementationGuide_Manifest_Page, "title");
	if(cjson_title)
	{
		result_ImplementationGuide_Manifest_Page->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_anchor =  cJSON_GetObjectItem(implementationGuide_Manifest_Page, "anchor");
	if(cjson_anchor)
	{
		result_ImplementationGuide_Manifest_Page->anchor_count = cJSON_GetArraySize(cjson_anchor);
		result_ImplementationGuide_Manifest_Page->anchor = PushArray(arena, fhir_string, result_ImplementationGuide_Manifest_Page->anchor_count);
		for(int i = 0; i < result_ImplementationGuide_Manifest_Page->anchor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_anchor, i);
			result_ImplementationGuide_Manifest_Page->anchor[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_ImplementationGuide_Manifest_Page;
}

InsurancePlan*
Deserialize_InsurancePlan(Arena *arena, cJSON *insurancePlan)
{
	InsurancePlan *result_InsurancePlan = PushArray(arena, InsurancePlan, 1);
	result_InsurancePlan->resourceType = ResourceType::InsurancePlan;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan, "id");
	if(cjson_id)
	{
		result_InsurancePlan->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(insurancePlan, "meta");
	if(cjson_meta)
	{
		result_InsurancePlan->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(insurancePlan, "implicitRules");
	if(cjson_implicitRules)
	{
		result_InsurancePlan->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(insurancePlan, "language");
	if(cjson_language)
	{
		result_InsurancePlan->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(insurancePlan, "text");
	if(cjson_text)
	{
		result_InsurancePlan->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(insurancePlan, "contained");
	if(cjson_contained)
	{
		result_InsurancePlan->contained_count = cJSON_GetArraySize(cjson_contained);
		result_InsurancePlan->contained = PushArray(arena, Resource, result_InsurancePlan->contained_count);
		for(int i = 0; i < result_InsurancePlan->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_InsurancePlan->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan->extension = PushArray(arena, Extension, result_InsurancePlan->extension_count);
		for(int i = 0; i < result_InsurancePlan->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan->modifierExtension = PushArray(arena, Extension, result_InsurancePlan->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(insurancePlan, "identifier");
	if(cjson_identifier)
	{
		result_InsurancePlan->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_InsurancePlan->identifier = PushArray(arena, Identifier, result_InsurancePlan->identifier_count);
		for(int i = 0; i < result_InsurancePlan->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_InsurancePlan->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(insurancePlan, "status");
	if(cjson_status)
	{
		result_InsurancePlan->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(insurancePlan, "type");
	if(cjson_type)
	{
		result_InsurancePlan->type_count = cJSON_GetArraySize(cjson_type);
		result_InsurancePlan->type = PushArray(arena, CodeableConcept, result_InsurancePlan->type_count);
		for(int i = 0; i < result_InsurancePlan->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_InsurancePlan->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(insurancePlan, "name");
	if(cjson_name)
	{
		result_InsurancePlan->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_alias =  cJSON_GetObjectItem(insurancePlan, "alias");
	if(cjson_alias)
	{
		result_InsurancePlan->alias_count = cJSON_GetArraySize(cjson_alias);
		result_InsurancePlan->alias = PushArray(arena, fhir_string, result_InsurancePlan->alias_count);
		for(int i = 0; i < result_InsurancePlan->alias_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_alias, i);
			result_InsurancePlan->alias[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(insurancePlan, "period");
	if(cjson_period)
	{
		result_InsurancePlan->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_ownedBy =  cJSON_GetObjectItem(insurancePlan, "ownedBy");
	if(cjson_ownedBy)
	{
		result_InsurancePlan->ownedBy = Deserialize_Reference(arena, cjson_ownedBy);
	}
	cJSON *cjson_administeredBy =  cJSON_GetObjectItem(insurancePlan, "administeredBy");
	if(cjson_administeredBy)
	{
		result_InsurancePlan->administeredBy = Deserialize_Reference(arena, cjson_administeredBy);
	}
	cJSON *cjson_coverageArea =  cJSON_GetObjectItem(insurancePlan, "coverageArea");
	if(cjson_coverageArea)
	{
		result_InsurancePlan->coverageArea_count = cJSON_GetArraySize(cjson_coverageArea);
		result_InsurancePlan->coverageArea = PushArray(arena, Reference, result_InsurancePlan->coverageArea_count);
		for(int i = 0; i < result_InsurancePlan->coverageArea_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_coverageArea, i);
			result_InsurancePlan->coverageArea[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(insurancePlan, "contact");
	if(cjson_contact)
	{
		result_InsurancePlan->contact_count = cJSON_GetArraySize(cjson_contact);
		result_InsurancePlan->contact = PushArray(arena, InsurancePlan_Contact, result_InsurancePlan->contact_count);
		for(int i = 0; i < result_InsurancePlan->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_InsurancePlan->contact[i] = *Deserialize_InsurancePlan_Contact(arena, internal);
		}

	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(insurancePlan, "endpoint");
	if(cjson_endpoint)
	{
		result_InsurancePlan->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_InsurancePlan->endpoint = PushArray(arena, Reference, result_InsurancePlan->endpoint_count);
		for(int i = 0; i < result_InsurancePlan->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_InsurancePlan->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_network =  cJSON_GetObjectItem(insurancePlan, "network");
	if(cjson_network)
	{
		result_InsurancePlan->network_count = cJSON_GetArraySize(cjson_network);
		result_InsurancePlan->network = PushArray(arena, Reference, result_InsurancePlan->network_count);
		for(int i = 0; i < result_InsurancePlan->network_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_network, i);
			result_InsurancePlan->network[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_coverage =  cJSON_GetObjectItem(insurancePlan, "coverage");
	if(cjson_coverage)
	{
		result_InsurancePlan->coverage_count = cJSON_GetArraySize(cjson_coverage);
		result_InsurancePlan->coverage = PushArray(arena, InsurancePlan_Coverage, result_InsurancePlan->coverage_count);
		for(int i = 0; i < result_InsurancePlan->coverage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_coverage, i);
			result_InsurancePlan->coverage[i] = *Deserialize_InsurancePlan_Coverage(arena, internal);
		}

	}
	cJSON *cjson_plan =  cJSON_GetObjectItem(insurancePlan, "plan");
	if(cjson_plan)
	{
		result_InsurancePlan->plan_count = cJSON_GetArraySize(cjson_plan);
		result_InsurancePlan->plan = PushArray(arena, InsurancePlan_Plan, result_InsurancePlan->plan_count);
		for(int i = 0; i < result_InsurancePlan->plan_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_plan, i);
			result_InsurancePlan->plan[i] = *Deserialize_InsurancePlan_Plan(arena, internal);
		}

	}
	return result_InsurancePlan;
}

InsurancePlan_Contact*
Deserialize_InsurancePlan_Contact(Arena *arena, cJSON *insurancePlan_Contact)
{
	InsurancePlan_Contact *result_InsurancePlan_Contact = PushArray(arena, InsurancePlan_Contact, 1);
	result_InsurancePlan_Contact->resourceType = ResourceType::InsurancePlan_Contact;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Contact, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Contact, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Contact->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Contact, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Contact->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Contact->extension = PushArray(arena, Extension, result_InsurancePlan_Contact->extension_count);
		for(int i = 0; i < result_InsurancePlan_Contact->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Contact->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Contact, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Contact->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Contact->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Contact->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Contact->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Contact->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(insurancePlan_Contact, "purpose");
	if(cjson_purpose)
	{
		result_InsurancePlan_Contact->purpose = Deserialize_CodeableConcept(arena, cjson_purpose);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(insurancePlan_Contact, "name");
	if(cjson_name)
	{
		result_InsurancePlan_Contact->name = Deserialize_HumanName(arena, cjson_name);
	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(insurancePlan_Contact, "telecom");
	if(cjson_telecom)
	{
		result_InsurancePlan_Contact->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_InsurancePlan_Contact->telecom = PushArray(arena, ContactPoint, result_InsurancePlan_Contact->telecom_count);
		for(int i = 0; i < result_InsurancePlan_Contact->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_InsurancePlan_Contact->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(insurancePlan_Contact, "address");
	if(cjson_address)
	{
		result_InsurancePlan_Contact->address = Deserialize_Address(arena, cjson_address);
	}
	return result_InsurancePlan_Contact;
}

InsurancePlan_Coverage*
Deserialize_InsurancePlan_Coverage(Arena *arena, cJSON *insurancePlan_Coverage)
{
	InsurancePlan_Coverage *result_InsurancePlan_Coverage = PushArray(arena, InsurancePlan_Coverage, 1);
	result_InsurancePlan_Coverage->resourceType = ResourceType::InsurancePlan_Coverage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Coverage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Coverage, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Coverage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Coverage, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Coverage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Coverage->extension = PushArray(arena, Extension, result_InsurancePlan_Coverage->extension_count);
		for(int i = 0; i < result_InsurancePlan_Coverage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Coverage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Coverage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Coverage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Coverage->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Coverage->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Coverage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Coverage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(insurancePlan_Coverage, "type");
	if(cjson_type)
	{
		result_InsurancePlan_Coverage->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_network =  cJSON_GetObjectItem(insurancePlan_Coverage, "network");
	if(cjson_network)
	{
		result_InsurancePlan_Coverage->network_count = cJSON_GetArraySize(cjson_network);
		result_InsurancePlan_Coverage->network = PushArray(arena, Reference, result_InsurancePlan_Coverage->network_count);
		for(int i = 0; i < result_InsurancePlan_Coverage->network_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_network, i);
			result_InsurancePlan_Coverage->network[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_benefit =  cJSON_GetObjectItem(insurancePlan_Coverage, "benefit");
	if(cjson_benefit)
	{
		result_InsurancePlan_Coverage->benefit_count = cJSON_GetArraySize(cjson_benefit);
		result_InsurancePlan_Coverage->benefit = PushArray(arena, InsurancePlan_Coverage_Benefit, result_InsurancePlan_Coverage->benefit_count);
		for(int i = 0; i < result_InsurancePlan_Coverage->benefit_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_benefit, i);
			result_InsurancePlan_Coverage->benefit[i] = *Deserialize_InsurancePlan_Coverage_Benefit(arena, internal);
		}

	}
	return result_InsurancePlan_Coverage;
}

InsurancePlan_Coverage_Benefit*
Deserialize_InsurancePlan_Coverage_Benefit(Arena *arena, cJSON *insurancePlan_Coverage_Benefit)
{
	InsurancePlan_Coverage_Benefit *result_InsurancePlan_Coverage_Benefit = PushArray(arena, InsurancePlan_Coverage_Benefit, 1);
	result_InsurancePlan_Coverage_Benefit->resourceType = ResourceType::InsurancePlan_Coverage_Benefit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Coverage_Benefit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Coverage_Benefit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Coverage_Benefit->extension = PushArray(arena, Extension, result_InsurancePlan_Coverage_Benefit->extension_count);
		for(int i = 0; i < result_InsurancePlan_Coverage_Benefit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Coverage_Benefit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Coverage_Benefit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Coverage_Benefit->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Coverage_Benefit->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Coverage_Benefit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Coverage_Benefit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit, "type");
	if(cjson_type)
	{
		result_InsurancePlan_Coverage_Benefit->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_requirement =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit, "requirement");
	if(cjson_requirement)
	{
		result_InsurancePlan_Coverage_Benefit->requirement = Str8C(cJSON_GetStringValue(cjson_requirement));
	}
	cJSON *cjson_limit =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit, "limit");
	if(cjson_limit)
	{
		result_InsurancePlan_Coverage_Benefit->limit_count = cJSON_GetArraySize(cjson_limit);
		result_InsurancePlan_Coverage_Benefit->limit = PushArray(arena, InsurancePlan_Coverage_Benefit_Limit, result_InsurancePlan_Coverage_Benefit->limit_count);
		for(int i = 0; i < result_InsurancePlan_Coverage_Benefit->limit_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_limit, i);
			result_InsurancePlan_Coverage_Benefit->limit[i] = *Deserialize_InsurancePlan_Coverage_Benefit_Limit(arena, internal);
		}

	}
	return result_InsurancePlan_Coverage_Benefit;
}

InsurancePlan_Coverage_Benefit_Limit*
Deserialize_InsurancePlan_Coverage_Benefit_Limit(Arena *arena, cJSON *insurancePlan_Coverage_Benefit_Limit)
{
	InsurancePlan_Coverage_Benefit_Limit *result_InsurancePlan_Coverage_Benefit_Limit = PushArray(arena, InsurancePlan_Coverage_Benefit_Limit, 1);
	result_InsurancePlan_Coverage_Benefit_Limit->resourceType = ResourceType::InsurancePlan_Coverage_Benefit_Limit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit_Limit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit_Limit, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Coverage_Benefit_Limit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit_Limit, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Coverage_Benefit_Limit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Coverage_Benefit_Limit->extension = PushArray(arena, Extension, result_InsurancePlan_Coverage_Benefit_Limit->extension_count);
		for(int i = 0; i < result_InsurancePlan_Coverage_Benefit_Limit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Coverage_Benefit_Limit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit_Limit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Coverage_Benefit_Limit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Coverage_Benefit_Limit->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Coverage_Benefit_Limit->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Coverage_Benefit_Limit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Coverage_Benefit_Limit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit_Limit, "value");
	if(cjson_value)
	{
		result_InsurancePlan_Coverage_Benefit_Limit->value = Deserialize_Quantity(arena, cjson_value);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(insurancePlan_Coverage_Benefit_Limit, "code");
	if(cjson_code)
	{
		result_InsurancePlan_Coverage_Benefit_Limit->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	return result_InsurancePlan_Coverage_Benefit_Limit;
}

InsurancePlan_Plan*
Deserialize_InsurancePlan_Plan(Arena *arena, cJSON *insurancePlan_Plan)
{
	InsurancePlan_Plan *result_InsurancePlan_Plan = PushArray(arena, InsurancePlan_Plan, 1);
	result_InsurancePlan_Plan->resourceType = ResourceType::InsurancePlan_Plan;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Plan, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Plan, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Plan->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Plan, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Plan->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Plan->extension = PushArray(arena, Extension, result_InsurancePlan_Plan->extension_count);
		for(int i = 0; i < result_InsurancePlan_Plan->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Plan->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Plan, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Plan->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Plan->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Plan->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Plan->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Plan->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(insurancePlan_Plan, "identifier");
	if(cjson_identifier)
	{
		result_InsurancePlan_Plan->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_InsurancePlan_Plan->identifier = PushArray(arena, Identifier, result_InsurancePlan_Plan->identifier_count);
		for(int i = 0; i < result_InsurancePlan_Plan->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_InsurancePlan_Plan->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(insurancePlan_Plan, "type");
	if(cjson_type)
	{
		result_InsurancePlan_Plan->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_coverageArea =  cJSON_GetObjectItem(insurancePlan_Plan, "coverageArea");
	if(cjson_coverageArea)
	{
		result_InsurancePlan_Plan->coverageArea_count = cJSON_GetArraySize(cjson_coverageArea);
		result_InsurancePlan_Plan->coverageArea = PushArray(arena, Reference, result_InsurancePlan_Plan->coverageArea_count);
		for(int i = 0; i < result_InsurancePlan_Plan->coverageArea_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_coverageArea, i);
			result_InsurancePlan_Plan->coverageArea[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_network =  cJSON_GetObjectItem(insurancePlan_Plan, "network");
	if(cjson_network)
	{
		result_InsurancePlan_Plan->network_count = cJSON_GetArraySize(cjson_network);
		result_InsurancePlan_Plan->network = PushArray(arena, Reference, result_InsurancePlan_Plan->network_count);
		for(int i = 0; i < result_InsurancePlan_Plan->network_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_network, i);
			result_InsurancePlan_Plan->network[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_generalCost =  cJSON_GetObjectItem(insurancePlan_Plan, "generalCost");
	if(cjson_generalCost)
	{
		result_InsurancePlan_Plan->generalCost_count = cJSON_GetArraySize(cjson_generalCost);
		result_InsurancePlan_Plan->generalCost = PushArray(arena, InsurancePlan_Plan_GeneralCost, result_InsurancePlan_Plan->generalCost_count);
		for(int i = 0; i < result_InsurancePlan_Plan->generalCost_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_generalCost, i);
			result_InsurancePlan_Plan->generalCost[i] = *Deserialize_InsurancePlan_Plan_GeneralCost(arena, internal);
		}

	}
	cJSON *cjson_specificCost =  cJSON_GetObjectItem(insurancePlan_Plan, "specificCost");
	if(cjson_specificCost)
	{
		result_InsurancePlan_Plan->specificCost_count = cJSON_GetArraySize(cjson_specificCost);
		result_InsurancePlan_Plan->specificCost = PushArray(arena, InsurancePlan_Plan_SpecificCost, result_InsurancePlan_Plan->specificCost_count);
		for(int i = 0; i < result_InsurancePlan_Plan->specificCost_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specificCost, i);
			result_InsurancePlan_Plan->specificCost[i] = *Deserialize_InsurancePlan_Plan_SpecificCost(arena, internal);
		}

	}
	return result_InsurancePlan_Plan;
}

InsurancePlan_Plan_GeneralCost*
Deserialize_InsurancePlan_Plan_GeneralCost(Arena *arena, cJSON *insurancePlan_Plan_GeneralCost)
{
	InsurancePlan_Plan_GeneralCost *result_InsurancePlan_Plan_GeneralCost = PushArray(arena, InsurancePlan_Plan_GeneralCost, 1);
	result_InsurancePlan_Plan_GeneralCost->resourceType = ResourceType::InsurancePlan_Plan_GeneralCost;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Plan_GeneralCost->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Plan_GeneralCost->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Plan_GeneralCost->extension = PushArray(arena, Extension, result_InsurancePlan_Plan_GeneralCost->extension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_GeneralCost->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Plan_GeneralCost->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Plan_GeneralCost->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Plan_GeneralCost->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Plan_GeneralCost->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_GeneralCost->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Plan_GeneralCost->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "type");
	if(cjson_type)
	{
		result_InsurancePlan_Plan_GeneralCost->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_groupSize =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "groupSize");
	if(cjson_groupSize)
	{
		result_InsurancePlan_Plan_GeneralCost->groupSize = (int)cJSON_GetNumberValue(cjson_groupSize);
	}
	cJSON *cjson_cost =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "cost");
	if(cjson_cost)
	{
		result_InsurancePlan_Plan_GeneralCost->cost = Deserialize_Money(arena, cjson_cost);
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(insurancePlan_Plan_GeneralCost, "comment");
	if(cjson_comment)
	{
		result_InsurancePlan_Plan_GeneralCost->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_InsurancePlan_Plan_GeneralCost;
}

InsurancePlan_Plan_SpecificCost*
Deserialize_InsurancePlan_Plan_SpecificCost(Arena *arena, cJSON *insurancePlan_Plan_SpecificCost)
{
	InsurancePlan_Plan_SpecificCost *result_InsurancePlan_Plan_SpecificCost = PushArray(arena, InsurancePlan_Plan_SpecificCost, 1);
	result_InsurancePlan_Plan_SpecificCost->resourceType = ResourceType::InsurancePlan_Plan_SpecificCost;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Plan_SpecificCost->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Plan_SpecificCost->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Plan_SpecificCost->extension = PushArray(arena, Extension, result_InsurancePlan_Plan_SpecificCost->extension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Plan_SpecificCost->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Plan_SpecificCost->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Plan_SpecificCost->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Plan_SpecificCost->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Plan_SpecificCost->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost, "category");
	if(cjson_category)
	{
		result_InsurancePlan_Plan_SpecificCost->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_benefit =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost, "benefit");
	if(cjson_benefit)
	{
		result_InsurancePlan_Plan_SpecificCost->benefit_count = cJSON_GetArraySize(cjson_benefit);
		result_InsurancePlan_Plan_SpecificCost->benefit = PushArray(arena, InsurancePlan_Plan_SpecificCost_Benefit, result_InsurancePlan_Plan_SpecificCost->benefit_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost->benefit_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_benefit, i);
			result_InsurancePlan_Plan_SpecificCost->benefit[i] = *Deserialize_InsurancePlan_Plan_SpecificCost_Benefit(arena, internal);
		}

	}
	return result_InsurancePlan_Plan_SpecificCost;
}

InsurancePlan_Plan_SpecificCost_Benefit*
Deserialize_InsurancePlan_Plan_SpecificCost_Benefit(Arena *arena, cJSON *insurancePlan_Plan_SpecificCost_Benefit)
{
	InsurancePlan_Plan_SpecificCost_Benefit *result_InsurancePlan_Plan_SpecificCost_Benefit = PushArray(arena, InsurancePlan_Plan_SpecificCost_Benefit, 1);
	result_InsurancePlan_Plan_SpecificCost_Benefit->resourceType = ResourceType::InsurancePlan_Plan_SpecificCost_Benefit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Plan_SpecificCost_Benefit->extension = PushArray(arena, Extension, result_InsurancePlan_Plan_SpecificCost_Benefit->extension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost_Benefit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Plan_SpecificCost_Benefit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Plan_SpecificCost_Benefit->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Plan_SpecificCost_Benefit->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost_Benefit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Plan_SpecificCost_Benefit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit, "type");
	if(cjson_type)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_cost =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit, "cost");
	if(cjson_cost)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit->cost_count = cJSON_GetArraySize(cjson_cost);
		result_InsurancePlan_Plan_SpecificCost_Benefit->cost = PushArray(arena, InsurancePlan_Plan_SpecificCost_Benefit_Cost, result_InsurancePlan_Plan_SpecificCost_Benefit->cost_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost_Benefit->cost_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_cost, i);
			result_InsurancePlan_Plan_SpecificCost_Benefit->cost[i] = *Deserialize_InsurancePlan_Plan_SpecificCost_Benefit_Cost(arena, internal);
		}

	}
	return result_InsurancePlan_Plan_SpecificCost_Benefit;
}

InsurancePlan_Plan_SpecificCost_Benefit_Cost*
Deserialize_InsurancePlan_Plan_SpecificCost_Benefit_Cost(Arena *arena, cJSON *insurancePlan_Plan_SpecificCost_Benefit_Cost)
{
	InsurancePlan_Plan_SpecificCost_Benefit_Cost *result_InsurancePlan_Plan_SpecificCost_Benefit_Cost = PushArray(arena, InsurancePlan_Plan_SpecificCost_Benefit_Cost, 1);
	result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->resourceType = ResourceType::InsurancePlan_Plan_SpecificCost_Benefit_Cost;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "id");
	if(cjson_id)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "extension");
	if(cjson_extension)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->extension_count = cJSON_GetArraySize(cjson_extension);
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->extension = PushArray(arena, Extension, result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->extension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension = PushArray(arena, Extension, result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "type");
	if(cjson_type)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_applicability =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "applicability");
	if(cjson_applicability)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->applicability = Deserialize_CodeableConcept(arena, cjson_applicability);
	}
	cJSON *cjson_qualifiers =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "qualifiers");
	if(cjson_qualifiers)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers_count = cJSON_GetArraySize(cjson_qualifiers);
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers = PushArray(arena, CodeableConcept, result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers_count);
		for(int i = 0; i < result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_qualifiers, i);
			result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(insurancePlan_Plan_SpecificCost_Benefit_Cost, "value");
	if(cjson_value)
	{
		result_InsurancePlan_Plan_SpecificCost_Benefit_Cost->value = Deserialize_Quantity(arena, cjson_value);
	}
	return result_InsurancePlan_Plan_SpecificCost_Benefit_Cost;
}

Invoice*
Deserialize_Invoice(Arena *arena, cJSON *invoice)
{
	Invoice *result_Invoice = PushArray(arena, Invoice, 1);
	result_Invoice->resourceType = ResourceType::Invoice;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(invoice, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(invoice, "id");
	if(cjson_id)
	{
		result_Invoice->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(invoice, "meta");
	if(cjson_meta)
	{
		result_Invoice->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(invoice, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Invoice->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(invoice, "language");
	if(cjson_language)
	{
		result_Invoice->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(invoice, "text");
	if(cjson_text)
	{
		result_Invoice->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(invoice, "contained");
	if(cjson_contained)
	{
		result_Invoice->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Invoice->contained = PushArray(arena, Resource, result_Invoice->contained_count);
		for(int i = 0; i < result_Invoice->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Invoice->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(invoice, "extension");
	if(cjson_extension)
	{
		result_Invoice->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Invoice->extension = PushArray(arena, Extension, result_Invoice->extension_count);
		for(int i = 0; i < result_Invoice->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Invoice->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(invoice, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Invoice->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Invoice->modifierExtension = PushArray(arena, Extension, result_Invoice->modifierExtension_count);
		for(int i = 0; i < result_Invoice->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Invoice->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(invoice, "identifier");
	if(cjson_identifier)
	{
		result_Invoice->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Invoice->identifier = PushArray(arena, Identifier, result_Invoice->identifier_count);
		for(int i = 0; i < result_Invoice->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Invoice->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(invoice, "status");
	if(cjson_status)
	{
		result_Invoice->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_cancelledReason =  cJSON_GetObjectItem(invoice, "cancelledReason");
	if(cjson_cancelledReason)
	{
		result_Invoice->cancelledReason = Str8C(cJSON_GetStringValue(cjson_cancelledReason));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(invoice, "type");
	if(cjson_type)
	{
		result_Invoice->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(invoice, "subject");
	if(cjson_subject)
	{
		result_Invoice->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_recipient =  cJSON_GetObjectItem(invoice, "recipient");
	if(cjson_recipient)
	{
		result_Invoice->recipient = Deserialize_Reference(arena, cjson_recipient);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(invoice, "date");
	if(cjson_date)
	{
		result_Invoice->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_participant =  cJSON_GetObjectItem(invoice, "participant");
	if(cjson_participant)
	{
		result_Invoice->participant_count = cJSON_GetArraySize(cjson_participant);
		result_Invoice->participant = PushArray(arena, Invoice_Participant, result_Invoice->participant_count);
		for(int i = 0; i < result_Invoice->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_Invoice->participant[i] = *Deserialize_Invoice_Participant(arena, internal);
		}

	}
	cJSON *cjson_issuer =  cJSON_GetObjectItem(invoice, "issuer");
	if(cjson_issuer)
	{
		result_Invoice->issuer = Deserialize_Reference(arena, cjson_issuer);
	}
	cJSON *cjson_account =  cJSON_GetObjectItem(invoice, "account");
	if(cjson_account)
	{
		result_Invoice->account = Deserialize_Reference(arena, cjson_account);
	}
	cJSON *cjson_lineItem =  cJSON_GetObjectItem(invoice, "lineItem");
	if(cjson_lineItem)
	{
		result_Invoice->lineItem_count = cJSON_GetArraySize(cjson_lineItem);
		result_Invoice->lineItem = PushArray(arena, Invoice_LineItem, result_Invoice->lineItem_count);
		for(int i = 0; i < result_Invoice->lineItem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_lineItem, i);
			result_Invoice->lineItem[i] = *Deserialize_Invoice_LineItem(arena, internal);
		}

	}
	cJSON *cjson_totalPriceComponent =  cJSON_GetObjectItem(invoice, "totalPriceComponent");
	if(cjson_totalPriceComponent)
	{
		result_Invoice->totalPriceComponent_count = cJSON_GetArraySize(cjson_totalPriceComponent);
		result_Invoice->totalPriceComponent = PushArray(arena, Invoice_LineItem_PriceComponent, result_Invoice->totalPriceComponent_count);
		for(int i = 0; i < result_Invoice->totalPriceComponent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_totalPriceComponent, i);
			result_Invoice->totalPriceComponent[i] = *Deserialize_Invoice_LineItem_PriceComponent(arena, internal);
		}

	}
	cJSON *cjson_totalNet =  cJSON_GetObjectItem(invoice, "totalNet");
	if(cjson_totalNet)
	{
		result_Invoice->totalNet = Deserialize_Money(arena, cjson_totalNet);
	}
	cJSON *cjson_totalGross =  cJSON_GetObjectItem(invoice, "totalGross");
	if(cjson_totalGross)
	{
		result_Invoice->totalGross = Deserialize_Money(arena, cjson_totalGross);
	}
	cJSON *cjson_paymentTerms =  cJSON_GetObjectItem(invoice, "paymentTerms");
	if(cjson_paymentTerms)
	{
		result_Invoice->paymentTerms = Str8C(cJSON_GetStringValue(cjson_paymentTerms));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(invoice, "note");
	if(cjson_note)
	{
		result_Invoice->note_count = cJSON_GetArraySize(cjson_note);
		result_Invoice->note = PushArray(arena, Annotation, result_Invoice->note_count);
		for(int i = 0; i < result_Invoice->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Invoice->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_Invoice;
}

Invoice_Participant*
Deserialize_Invoice_Participant(Arena *arena, cJSON *invoice_Participant)
{
	Invoice_Participant *result_Invoice_Participant = PushArray(arena, Invoice_Participant, 1);
	result_Invoice_Participant->resourceType = ResourceType::Invoice_Participant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(invoice_Participant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(invoice_Participant, "id");
	if(cjson_id)
	{
		result_Invoice_Participant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(invoice_Participant, "extension");
	if(cjson_extension)
	{
		result_Invoice_Participant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Invoice_Participant->extension = PushArray(arena, Extension, result_Invoice_Participant->extension_count);
		for(int i = 0; i < result_Invoice_Participant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Invoice_Participant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(invoice_Participant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Invoice_Participant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Invoice_Participant->modifierExtension = PushArray(arena, Extension, result_Invoice_Participant->modifierExtension_count);
		for(int i = 0; i < result_Invoice_Participant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Invoice_Participant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_role =  cJSON_GetObjectItem(invoice_Participant, "role");
	if(cjson_role)
	{
		result_Invoice_Participant->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(invoice_Participant, "actor");
	if(cjson_actor)
	{
		result_Invoice_Participant->actor = Deserialize_Reference(arena, cjson_actor);
	}
	return result_Invoice_Participant;
}

Invoice_LineItem*
Deserialize_Invoice_LineItem(Arena *arena, cJSON *invoice_LineItem)
{
	Invoice_LineItem *result_Invoice_LineItem = PushArray(arena, Invoice_LineItem, 1);
	result_Invoice_LineItem->resourceType = ResourceType::Invoice_LineItem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(invoice_LineItem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(invoice_LineItem, "id");
	if(cjson_id)
	{
		result_Invoice_LineItem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(invoice_LineItem, "extension");
	if(cjson_extension)
	{
		result_Invoice_LineItem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Invoice_LineItem->extension = PushArray(arena, Extension, result_Invoice_LineItem->extension_count);
		for(int i = 0; i < result_Invoice_LineItem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Invoice_LineItem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(invoice_LineItem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Invoice_LineItem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Invoice_LineItem->modifierExtension = PushArray(arena, Extension, result_Invoice_LineItem->modifierExtension_count);
		for(int i = 0; i < result_Invoice_LineItem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Invoice_LineItem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(invoice_LineItem, "sequence");
	if(cjson_sequence)
	{
		result_Invoice_LineItem->sequence = (int)cJSON_GetNumberValue(cjson_sequence);
	}
	if((bool)cJSON_HasObjectItem(invoice_LineItem, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(invoice_LineItem, "valueReference");
		result_Invoice_LineItem->chargeItem.valueReference = Deserialize_Reference(arena, item);
		result_Invoice_LineItem->chargeItem_type = Invoice_LineItem::ChargeItemType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(invoice_LineItem, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(invoice_LineItem, "valueCodeableConcept");
		result_Invoice_LineItem->chargeItem.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Invoice_LineItem->chargeItem_type = Invoice_LineItem::ChargeItemType::CodeableConcept;
	}


	cJSON *cjson_priceComponent =  cJSON_GetObjectItem(invoice_LineItem, "priceComponent");
	if(cjson_priceComponent)
	{
		result_Invoice_LineItem->priceComponent_count = cJSON_GetArraySize(cjson_priceComponent);
		result_Invoice_LineItem->priceComponent = PushArray(arena, Invoice_LineItem_PriceComponent, result_Invoice_LineItem->priceComponent_count);
		for(int i = 0; i < result_Invoice_LineItem->priceComponent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_priceComponent, i);
			result_Invoice_LineItem->priceComponent[i] = *Deserialize_Invoice_LineItem_PriceComponent(arena, internal);
		}

	}
	return result_Invoice_LineItem;
}

Invoice_LineItem_PriceComponent*
Deserialize_Invoice_LineItem_PriceComponent(Arena *arena, cJSON *invoice_LineItem_PriceComponent)
{
	Invoice_LineItem_PriceComponent *result_Invoice_LineItem_PriceComponent = PushArray(arena, Invoice_LineItem_PriceComponent, 1);
	result_Invoice_LineItem_PriceComponent->resourceType = ResourceType::Invoice_LineItem_PriceComponent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "id");
	if(cjson_id)
	{
		result_Invoice_LineItem_PriceComponent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "extension");
	if(cjson_extension)
	{
		result_Invoice_LineItem_PriceComponent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Invoice_LineItem_PriceComponent->extension = PushArray(arena, Extension, result_Invoice_LineItem_PriceComponent->extension_count);
		for(int i = 0; i < result_Invoice_LineItem_PriceComponent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Invoice_LineItem_PriceComponent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Invoice_LineItem_PriceComponent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Invoice_LineItem_PriceComponent->modifierExtension = PushArray(arena, Extension, result_Invoice_LineItem_PriceComponent->modifierExtension_count);
		for(int i = 0; i < result_Invoice_LineItem_PriceComponent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Invoice_LineItem_PriceComponent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "type");
	if(cjson_type)
	{
		result_Invoice_LineItem_PriceComponent->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "code");
	if(cjson_code)
	{
		result_Invoice_LineItem_PriceComponent->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "factor");
	if(cjson_factor)
	{
		result_Invoice_LineItem_PriceComponent->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(invoice_LineItem_PriceComponent, "amount");
	if(cjson_amount)
	{
		result_Invoice_LineItem_PriceComponent->amount = Deserialize_Money(arena, cjson_amount);
	}
	return result_Invoice_LineItem_PriceComponent;
}

Library*
Deserialize_Library(Arena *arena, cJSON *library)
{
	Library *result_Library = PushArray(arena, Library, 1);
	result_Library->resourceType = ResourceType::Library;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(library, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(library, "id");
	if(cjson_id)
	{
		result_Library->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(library, "meta");
	if(cjson_meta)
	{
		result_Library->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(library, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Library->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(library, "language");
	if(cjson_language)
	{
		result_Library->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(library, "text");
	if(cjson_text)
	{
		result_Library->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(library, "contained");
	if(cjson_contained)
	{
		result_Library->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Library->contained = PushArray(arena, Resource, result_Library->contained_count);
		for(int i = 0; i < result_Library->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Library->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(library, "extension");
	if(cjson_extension)
	{
		result_Library->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Library->extension = PushArray(arena, Extension, result_Library->extension_count);
		for(int i = 0; i < result_Library->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Library->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(library, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Library->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Library->modifierExtension = PushArray(arena, Extension, result_Library->modifierExtension_count);
		for(int i = 0; i < result_Library->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Library->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(library, "url");
	if(cjson_url)
	{
		result_Library->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(library, "identifier");
	if(cjson_identifier)
	{
		result_Library->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Library->identifier = PushArray(arena, Identifier, result_Library->identifier_count);
		for(int i = 0; i < result_Library->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Library->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(library, "version");
	if(cjson_version)
	{
		result_Library->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(library, "name");
	if(cjson_name)
	{
		result_Library->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(library, "title");
	if(cjson_title)
	{
		result_Library->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(library, "subtitle");
	if(cjson_subtitle)
	{
		result_Library->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(library, "status");
	if(cjson_status)
	{
		result_Library->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(library, "experimental");
	if(cjson_experimental)
	{
		result_Library->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(library, "type");
	if(cjson_type)
	{
		result_Library->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(library, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(library, "valueCodeableConcept");
		result_Library->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Library->subject_type = Library::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(library, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(library, "valueReference");
		result_Library->subject.valueReference = Deserialize_Reference(arena, item);
		result_Library->subject_type = Library::SubjectType::Reference;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(library, "date");
	if(cjson_date)
	{
		result_Library->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(library, "publisher");
	if(cjson_publisher)
	{
		result_Library->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(library, "contact");
	if(cjson_contact)
	{
		result_Library->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Library->contact = PushArray(arena, ContactDetail, result_Library->contact_count);
		for(int i = 0; i < result_Library->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Library->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(library, "description");
	if(cjson_description)
	{
		result_Library->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(library, "useContext");
	if(cjson_useContext)
	{
		result_Library->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_Library->useContext = PushArray(arena, UsageContext, result_Library->useContext_count);
		for(int i = 0; i < result_Library->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_Library->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(library, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_Library->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_Library->jurisdiction = PushArray(arena, CodeableConcept, result_Library->jurisdiction_count);
		for(int i = 0; i < result_Library->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_Library->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(library, "purpose");
	if(cjson_purpose)
	{
		result_Library->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(library, "usage");
	if(cjson_usage)
	{
		result_Library->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(library, "copyright");
	if(cjson_copyright)
	{
		result_Library->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(library, "approvalDate");
	if(cjson_approvalDate)
	{
		result_Library->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(library, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_Library->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(library, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_Library->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(library, "topic");
	if(cjson_topic)
	{
		result_Library->topic_count = cJSON_GetArraySize(cjson_topic);
		result_Library->topic = PushArray(arena, CodeableConcept, result_Library->topic_count);
		for(int i = 0; i < result_Library->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_Library->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(library, "author");
	if(cjson_author)
	{
		result_Library->author_count = cJSON_GetArraySize(cjson_author);
		result_Library->author = PushArray(arena, ContactDetail, result_Library->author_count);
		for(int i = 0; i < result_Library->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_Library->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(library, "editor");
	if(cjson_editor)
	{
		result_Library->editor_count = cJSON_GetArraySize(cjson_editor);
		result_Library->editor = PushArray(arena, ContactDetail, result_Library->editor_count);
		for(int i = 0; i < result_Library->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_Library->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(library, "reviewer");
	if(cjson_reviewer)
	{
		result_Library->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_Library->reviewer = PushArray(arena, ContactDetail, result_Library->reviewer_count);
		for(int i = 0; i < result_Library->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_Library->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(library, "endorser");
	if(cjson_endorser)
	{
		result_Library->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_Library->endorser = PushArray(arena, ContactDetail, result_Library->endorser_count);
		for(int i = 0; i < result_Library->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_Library->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(library, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_Library->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_Library->relatedArtifact = PushArray(arena, RelatedArtifact, result_Library->relatedArtifact_count);
		for(int i = 0; i < result_Library->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_Library->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(library, "parameter");
	if(cjson_parameter)
	{
		result_Library->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_Library->parameter = PushArray(arena, ParameterDefinition, result_Library->parameter_count);
		for(int i = 0; i < result_Library->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_Library->parameter[i] = *Deserialize_ParameterDefinition(arena, internal);
		}

	}
	cJSON *cjson_dataRequirement =  cJSON_GetObjectItem(library, "dataRequirement");
	if(cjson_dataRequirement)
	{
		result_Library->dataRequirement_count = cJSON_GetArraySize(cjson_dataRequirement);
		result_Library->dataRequirement = PushArray(arena, DataRequirement, result_Library->dataRequirement_count);
		for(int i = 0; i < result_Library->dataRequirement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dataRequirement, i);
			result_Library->dataRequirement[i] = *Deserialize_DataRequirement(arena, internal);
		}

	}
	cJSON *cjson_content =  cJSON_GetObjectItem(library, "content");
	if(cjson_content)
	{
		result_Library->content_count = cJSON_GetArraySize(cjson_content);
		result_Library->content = PushArray(arena, Attachment, result_Library->content_count);
		for(int i = 0; i < result_Library->content_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_content, i);
			result_Library->content[i] = *Deserialize_Attachment(arena, internal);
		}

	}
	return result_Library;
}

Linkage*
Deserialize_Linkage(Arena *arena, cJSON *linkage)
{
	Linkage *result_Linkage = PushArray(arena, Linkage, 1);
	result_Linkage->resourceType = ResourceType::Linkage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(linkage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(linkage, "id");
	if(cjson_id)
	{
		result_Linkage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(linkage, "meta");
	if(cjson_meta)
	{
		result_Linkage->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(linkage, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Linkage->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(linkage, "language");
	if(cjson_language)
	{
		result_Linkage->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(linkage, "text");
	if(cjson_text)
	{
		result_Linkage->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(linkage, "contained");
	if(cjson_contained)
	{
		result_Linkage->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Linkage->contained = PushArray(arena, Resource, result_Linkage->contained_count);
		for(int i = 0; i < result_Linkage->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Linkage->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(linkage, "extension");
	if(cjson_extension)
	{
		result_Linkage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Linkage->extension = PushArray(arena, Extension, result_Linkage->extension_count);
		for(int i = 0; i < result_Linkage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Linkage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(linkage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Linkage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Linkage->modifierExtension = PushArray(arena, Extension, result_Linkage->modifierExtension_count);
		for(int i = 0; i < result_Linkage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Linkage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(linkage, "active");
	if(cjson_active)
	{
		result_Linkage->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(linkage, "author");
	if(cjson_author)
	{
		result_Linkage->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(linkage, "item");
	if(cjson_item)
	{
		result_Linkage->item_count = cJSON_GetArraySize(cjson_item);
		result_Linkage->item = PushArray(arena, Linkage_Item, result_Linkage->item_count);
		for(int i = 0; i < result_Linkage->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_Linkage->item[i] = *Deserialize_Linkage_Item(arena, internal);
		}

	}
	return result_Linkage;
}

Linkage_Item*
Deserialize_Linkage_Item(Arena *arena, cJSON *linkage_Item)
{
	Linkage_Item *result_Linkage_Item = PushArray(arena, Linkage_Item, 1);
	result_Linkage_Item->resourceType = ResourceType::Linkage_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(linkage_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(linkage_Item, "id");
	if(cjson_id)
	{
		result_Linkage_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(linkage_Item, "extension");
	if(cjson_extension)
	{
		result_Linkage_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Linkage_Item->extension = PushArray(arena, Extension, result_Linkage_Item->extension_count);
		for(int i = 0; i < result_Linkage_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Linkage_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(linkage_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Linkage_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Linkage_Item->modifierExtension = PushArray(arena, Extension, result_Linkage_Item->modifierExtension_count);
		for(int i = 0; i < result_Linkage_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Linkage_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(linkage_Item, "type");
	if(cjson_type)
	{
		result_Linkage_Item->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(linkage_Item, "resource");
	if(cjson_resource)
	{
		result_Linkage_Item->resource = Deserialize_Reference(arena, cjson_resource);
	}
	return result_Linkage_Item;
}

List*
Deserialize_List(Arena *arena, cJSON *list)
{
	List *result_List = PushArray(arena, List, 1);
	result_List->resourceType = ResourceType::List;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(list, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(list, "id");
	if(cjson_id)
	{
		result_List->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(list, "meta");
	if(cjson_meta)
	{
		result_List->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(list, "implicitRules");
	if(cjson_implicitRules)
	{
		result_List->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(list, "language");
	if(cjson_language)
	{
		result_List->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(list, "text");
	if(cjson_text)
	{
		result_List->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(list, "contained");
	if(cjson_contained)
	{
		result_List->contained_count = cJSON_GetArraySize(cjson_contained);
		result_List->contained = PushArray(arena, Resource, result_List->contained_count);
		for(int i = 0; i < result_List->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_List->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(list, "extension");
	if(cjson_extension)
	{
		result_List->extension_count = cJSON_GetArraySize(cjson_extension);
		result_List->extension = PushArray(arena, Extension, result_List->extension_count);
		for(int i = 0; i < result_List->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_List->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(list, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_List->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_List->modifierExtension = PushArray(arena, Extension, result_List->modifierExtension_count);
		for(int i = 0; i < result_List->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_List->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(list, "identifier");
	if(cjson_identifier)
	{
		result_List->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_List->identifier = PushArray(arena, Identifier, result_List->identifier_count);
		for(int i = 0; i < result_List->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_List->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(list, "status");
	if(cjson_status)
	{
		result_List->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(list, "mode");
	if(cjson_mode)
	{
		result_List->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(list, "title");
	if(cjson_title)
	{
		result_List->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(list, "code");
	if(cjson_code)
	{
		result_List->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(list, "subject");
	if(cjson_subject)
	{
		result_List->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(list, "encounter");
	if(cjson_encounter)
	{
		result_List->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(list, "date");
	if(cjson_date)
	{
		result_List->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(list, "source");
	if(cjson_source)
	{
		result_List->source = Deserialize_Reference(arena, cjson_source);
	}
	cJSON *cjson_orderedBy =  cJSON_GetObjectItem(list, "orderedBy");
	if(cjson_orderedBy)
	{
		result_List->orderedBy = Deserialize_CodeableConcept(arena, cjson_orderedBy);
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(list, "note");
	if(cjson_note)
	{
		result_List->note_count = cJSON_GetArraySize(cjson_note);
		result_List->note = PushArray(arena, Annotation, result_List->note_count);
		for(int i = 0; i < result_List->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_List->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_entry =  cJSON_GetObjectItem(list, "entry");
	if(cjson_entry)
	{
		result_List->entry_count = cJSON_GetArraySize(cjson_entry);
		result_List->entry = PushArray(arena, List_Entry, result_List->entry_count);
		for(int i = 0; i < result_List->entry_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_entry, i);
			result_List->entry[i] = *Deserialize_List_Entry(arena, internal);
		}

	}
	cJSON *cjson_emptyReason =  cJSON_GetObjectItem(list, "emptyReason");
	if(cjson_emptyReason)
	{
		result_List->emptyReason = Deserialize_CodeableConcept(arena, cjson_emptyReason);
	}
	return result_List;
}

List_Entry*
Deserialize_List_Entry(Arena *arena, cJSON *list_Entry)
{
	List_Entry *result_List_Entry = PushArray(arena, List_Entry, 1);
	result_List_Entry->resourceType = ResourceType::List_Entry;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(list_Entry, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(list_Entry, "id");
	if(cjson_id)
	{
		result_List_Entry->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(list_Entry, "extension");
	if(cjson_extension)
	{
		result_List_Entry->extension_count = cJSON_GetArraySize(cjson_extension);
		result_List_Entry->extension = PushArray(arena, Extension, result_List_Entry->extension_count);
		for(int i = 0; i < result_List_Entry->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_List_Entry->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(list_Entry, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_List_Entry->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_List_Entry->modifierExtension = PushArray(arena, Extension, result_List_Entry->modifierExtension_count);
		for(int i = 0; i < result_List_Entry->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_List_Entry->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_flag =  cJSON_GetObjectItem(list_Entry, "flag");
	if(cjson_flag)
	{
		result_List_Entry->flag = Deserialize_CodeableConcept(arena, cjson_flag);
	}
	cJSON *cjson_deleted =  cJSON_GetObjectItem(list_Entry, "deleted");
	if(cjson_deleted)
	{
		result_List_Entry->deleted = (boolean)cJSON_IsTrue(cjson_deleted);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(list_Entry, "date");
	if(cjson_date)
	{
		result_List_Entry->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(list_Entry, "item");
	if(cjson_item)
	{
		result_List_Entry->item = Deserialize_Reference(arena, cjson_item);
	}
	return result_List_Entry;
}

Location*
Deserialize_Location(Arena *arena, cJSON *location)
{
	Location *result_Location = PushArray(arena, Location, 1);
	result_Location->resourceType = ResourceType::Location;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(location, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(location, "id");
	if(cjson_id)
	{
		result_Location->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(location, "meta");
	if(cjson_meta)
	{
		result_Location->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(location, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Location->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(location, "language");
	if(cjson_language)
	{
		result_Location->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(location, "text");
	if(cjson_text)
	{
		result_Location->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(location, "contained");
	if(cjson_contained)
	{
		result_Location->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Location->contained = PushArray(arena, Resource, result_Location->contained_count);
		for(int i = 0; i < result_Location->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Location->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(location, "extension");
	if(cjson_extension)
	{
		result_Location->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Location->extension = PushArray(arena, Extension, result_Location->extension_count);
		for(int i = 0; i < result_Location->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Location->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(location, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Location->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Location->modifierExtension = PushArray(arena, Extension, result_Location->modifierExtension_count);
		for(int i = 0; i < result_Location->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Location->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(location, "identifier");
	if(cjson_identifier)
	{
		result_Location->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Location->identifier = PushArray(arena, Identifier, result_Location->identifier_count);
		for(int i = 0; i < result_Location->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Location->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(location, "status");
	if(cjson_status)
	{
		result_Location->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_operationalStatus =  cJSON_GetObjectItem(location, "operationalStatus");
	if(cjson_operationalStatus)
	{
		result_Location->operationalStatus = Deserialize_Coding(arena, cjson_operationalStatus);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(location, "name");
	if(cjson_name)
	{
		result_Location->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_alias =  cJSON_GetObjectItem(location, "alias");
	if(cjson_alias)
	{
		result_Location->alias_count = cJSON_GetArraySize(cjson_alias);
		result_Location->alias = PushArray(arena, fhir_string, result_Location->alias_count);
		for(int i = 0; i < result_Location->alias_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_alias, i);
			result_Location->alias[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(location, "description");
	if(cjson_description)
	{
		result_Location->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(location, "mode");
	if(cjson_mode)
	{
		result_Location->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(location, "type");
	if(cjson_type)
	{
		result_Location->type_count = cJSON_GetArraySize(cjson_type);
		result_Location->type = PushArray(arena, CodeableConcept, result_Location->type_count);
		for(int i = 0; i < result_Location->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Location->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(location, "telecom");
	if(cjson_telecom)
	{
		result_Location->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_Location->telecom = PushArray(arena, ContactPoint, result_Location->telecom_count);
		for(int i = 0; i < result_Location->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_Location->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(location, "address");
	if(cjson_address)
	{
		result_Location->address = Deserialize_Address(arena, cjson_address);
	}
	cJSON *cjson_physicalType =  cJSON_GetObjectItem(location, "physicalType");
	if(cjson_physicalType)
	{
		result_Location->physicalType = Deserialize_CodeableConcept(arena, cjson_physicalType);
	}
	cJSON *cjson_position =  cJSON_GetObjectItem(location, "position");
	if(cjson_position)
	{
		result_Location->position = Deserialize_Location_Position(arena, cjson_position);
	}
	cJSON *cjson_managingOrganization =  cJSON_GetObjectItem(location, "managingOrganization");
	if(cjson_managingOrganization)
	{
		result_Location->managingOrganization = Deserialize_Reference(arena, cjson_managingOrganization);
	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(location, "partOf");
	if(cjson_partOf)
	{
		result_Location->partOf = Deserialize_Reference(arena, cjson_partOf);
	}
	cJSON *cjson_hoursOfOperation =  cJSON_GetObjectItem(location, "hoursOfOperation");
	if(cjson_hoursOfOperation)
	{
		result_Location->hoursOfOperation_count = cJSON_GetArraySize(cjson_hoursOfOperation);
		result_Location->hoursOfOperation = PushArray(arena, Location_HoursOfOperation, result_Location->hoursOfOperation_count);
		for(int i = 0; i < result_Location->hoursOfOperation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_hoursOfOperation, i);
			result_Location->hoursOfOperation[i] = *Deserialize_Location_HoursOfOperation(arena, internal);
		}

	}
	cJSON *cjson_availabilityExceptions =  cJSON_GetObjectItem(location, "availabilityExceptions");
	if(cjson_availabilityExceptions)
	{
		result_Location->availabilityExceptions = Str8C(cJSON_GetStringValue(cjson_availabilityExceptions));
	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(location, "endpoint");
	if(cjson_endpoint)
	{
		result_Location->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_Location->endpoint = PushArray(arena, Reference, result_Location->endpoint_count);
		for(int i = 0; i < result_Location->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_Location->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Location;
}

Location_Position*
Deserialize_Location_Position(Arena *arena, cJSON *location_Position)
{
	Location_Position *result_Location_Position = PushArray(arena, Location_Position, 1);
	result_Location_Position->resourceType = ResourceType::Location_Position;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(location_Position, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(location_Position, "id");
	if(cjson_id)
	{
		result_Location_Position->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(location_Position, "extension");
	if(cjson_extension)
	{
		result_Location_Position->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Location_Position->extension = PushArray(arena, Extension, result_Location_Position->extension_count);
		for(int i = 0; i < result_Location_Position->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Location_Position->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(location_Position, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Location_Position->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Location_Position->modifierExtension = PushArray(arena, Extension, result_Location_Position->modifierExtension_count);
		for(int i = 0; i < result_Location_Position->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Location_Position->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_longitude =  cJSON_GetObjectItem(location_Position, "longitude");
	if(cjson_longitude)
	{
		result_Location_Position->longitude = cJSON_GetNumberValue(cjson_longitude);
	}
	cJSON *cjson_latitude =  cJSON_GetObjectItem(location_Position, "latitude");
	if(cjson_latitude)
	{
		result_Location_Position->latitude = cJSON_GetNumberValue(cjson_latitude);
	}
	cJSON *cjson_altitude =  cJSON_GetObjectItem(location_Position, "altitude");
	if(cjson_altitude)
	{
		result_Location_Position->altitude = cJSON_GetNumberValue(cjson_altitude);
	}
	return result_Location_Position;
}

Location_HoursOfOperation*
Deserialize_Location_HoursOfOperation(Arena *arena, cJSON *location_HoursOfOperation)
{
	Location_HoursOfOperation *result_Location_HoursOfOperation = PushArray(arena, Location_HoursOfOperation, 1);
	result_Location_HoursOfOperation->resourceType = ResourceType::Location_HoursOfOperation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(location_HoursOfOperation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(location_HoursOfOperation, "id");
	if(cjson_id)
	{
		result_Location_HoursOfOperation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(location_HoursOfOperation, "extension");
	if(cjson_extension)
	{
		result_Location_HoursOfOperation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Location_HoursOfOperation->extension = PushArray(arena, Extension, result_Location_HoursOfOperation->extension_count);
		for(int i = 0; i < result_Location_HoursOfOperation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Location_HoursOfOperation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(location_HoursOfOperation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Location_HoursOfOperation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Location_HoursOfOperation->modifierExtension = PushArray(arena, Extension, result_Location_HoursOfOperation->modifierExtension_count);
		for(int i = 0; i < result_Location_HoursOfOperation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Location_HoursOfOperation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_daysOfWeek =  cJSON_GetObjectItem(location_HoursOfOperation, "daysOfWeek");
	if(cjson_daysOfWeek)
	{
		result_Location_HoursOfOperation->daysOfWeek_count = cJSON_GetArraySize(cjson_daysOfWeek);
		result_Location_HoursOfOperation->daysOfWeek = PushArray(arena, fhir_code, result_Location_HoursOfOperation->daysOfWeek_count);
		for(int i = 0; i < result_Location_HoursOfOperation->daysOfWeek_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_daysOfWeek, i);
			result_Location_HoursOfOperation->daysOfWeek[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_allDay =  cJSON_GetObjectItem(location_HoursOfOperation, "allDay");
	if(cjson_allDay)
	{
		result_Location_HoursOfOperation->allDay = (boolean)cJSON_IsTrue(cjson_allDay);
	}
	cJSON *cjson_openingTime =  cJSON_GetObjectItem(location_HoursOfOperation, "openingTime");
	if(cjson_openingTime)
	{
		result_Location_HoursOfOperation->openingTime = Str8C(cJSON_GetStringValue(cjson_openingTime));
	}
	cJSON *cjson_closingTime =  cJSON_GetObjectItem(location_HoursOfOperation, "closingTime");
	if(cjson_closingTime)
	{
		result_Location_HoursOfOperation->closingTime = Str8C(cJSON_GetStringValue(cjson_closingTime));
	}
	return result_Location_HoursOfOperation;
}

Measure*
Deserialize_Measure(Arena *arena, cJSON *measure)
{
	Measure *result_Measure = PushArray(arena, Measure, 1);
	result_Measure->resourceType = ResourceType::Measure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measure, "id");
	if(cjson_id)
	{
		result_Measure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(measure, "meta");
	if(cjson_meta)
	{
		result_Measure->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(measure, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Measure->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(measure, "language");
	if(cjson_language)
	{
		result_Measure->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(measure, "text");
	if(cjson_text)
	{
		result_Measure->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(measure, "contained");
	if(cjson_contained)
	{
		result_Measure->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Measure->contained = PushArray(arena, Resource, result_Measure->contained_count);
		for(int i = 0; i < result_Measure->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Measure->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measure, "extension");
	if(cjson_extension)
	{
		result_Measure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Measure->extension = PushArray(arena, Extension, result_Measure->extension_count);
		for(int i = 0; i < result_Measure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Measure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Measure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Measure->modifierExtension = PushArray(arena, Extension, result_Measure->modifierExtension_count);
		for(int i = 0; i < result_Measure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Measure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(measure, "url");
	if(cjson_url)
	{
		result_Measure->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(measure, "identifier");
	if(cjson_identifier)
	{
		result_Measure->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Measure->identifier = PushArray(arena, Identifier, result_Measure->identifier_count);
		for(int i = 0; i < result_Measure->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Measure->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(measure, "version");
	if(cjson_version)
	{
		result_Measure->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(measure, "name");
	if(cjson_name)
	{
		result_Measure->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(measure, "title");
	if(cjson_title)
	{
		result_Measure->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(measure, "subtitle");
	if(cjson_subtitle)
	{
		result_Measure->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(measure, "status");
	if(cjson_status)
	{
		result_Measure->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(measure, "experimental");
	if(cjson_experimental)
	{
		result_Measure->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	if((bool)cJSON_HasObjectItem(measure, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(measure, "valueCodeableConcept");
		result_Measure->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Measure->subject_type = Measure::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(measure, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(measure, "valueReference");
		result_Measure->subject.valueReference = Deserialize_Reference(arena, item);
		result_Measure->subject_type = Measure::SubjectType::Reference;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(measure, "date");
	if(cjson_date)
	{
		result_Measure->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(measure, "publisher");
	if(cjson_publisher)
	{
		result_Measure->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(measure, "contact");
	if(cjson_contact)
	{
		result_Measure->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Measure->contact = PushArray(arena, ContactDetail, result_Measure->contact_count);
		for(int i = 0; i < result_Measure->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Measure->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(measure, "description");
	if(cjson_description)
	{
		result_Measure->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(measure, "useContext");
	if(cjson_useContext)
	{
		result_Measure->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_Measure->useContext = PushArray(arena, UsageContext, result_Measure->useContext_count);
		for(int i = 0; i < result_Measure->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_Measure->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(measure, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_Measure->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_Measure->jurisdiction = PushArray(arena, CodeableConcept, result_Measure->jurisdiction_count);
		for(int i = 0; i < result_Measure->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_Measure->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(measure, "purpose");
	if(cjson_purpose)
	{
		result_Measure->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(measure, "usage");
	if(cjson_usage)
	{
		result_Measure->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(measure, "copyright");
	if(cjson_copyright)
	{
		result_Measure->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(measure, "approvalDate");
	if(cjson_approvalDate)
	{
		result_Measure->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(measure, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_Measure->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(measure, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_Measure->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(measure, "topic");
	if(cjson_topic)
	{
		result_Measure->topic_count = cJSON_GetArraySize(cjson_topic);
		result_Measure->topic = PushArray(arena, CodeableConcept, result_Measure->topic_count);
		for(int i = 0; i < result_Measure->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_Measure->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(measure, "author");
	if(cjson_author)
	{
		result_Measure->author_count = cJSON_GetArraySize(cjson_author);
		result_Measure->author = PushArray(arena, ContactDetail, result_Measure->author_count);
		for(int i = 0; i < result_Measure->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_Measure->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(measure, "editor");
	if(cjson_editor)
	{
		result_Measure->editor_count = cJSON_GetArraySize(cjson_editor);
		result_Measure->editor = PushArray(arena, ContactDetail, result_Measure->editor_count);
		for(int i = 0; i < result_Measure->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_Measure->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(measure, "reviewer");
	if(cjson_reviewer)
	{
		result_Measure->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_Measure->reviewer = PushArray(arena, ContactDetail, result_Measure->reviewer_count);
		for(int i = 0; i < result_Measure->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_Measure->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(measure, "endorser");
	if(cjson_endorser)
	{
		result_Measure->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_Measure->endorser = PushArray(arena, ContactDetail, result_Measure->endorser_count);
		for(int i = 0; i < result_Measure->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_Measure->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(measure, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_Measure->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_Measure->relatedArtifact = PushArray(arena, RelatedArtifact, result_Measure->relatedArtifact_count);
		for(int i = 0; i < result_Measure->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_Measure->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_library =  cJSON_GetObjectItem(measure, "library");
	if(cjson_library)
	{
		result_Measure->library_count = cJSON_GetArraySize(cjson_library);
		result_Measure->library = PushArray(arena, fhir_canonical, result_Measure->library_count);
		for(int i = 0; i < result_Measure->library_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_library, i);
			result_Measure->library[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_disclaimer =  cJSON_GetObjectItem(measure, "disclaimer");
	if(cjson_disclaimer)
	{
		result_Measure->disclaimer = Str8C(cJSON_GetStringValue(cjson_disclaimer));
	}
	cJSON *cjson_scoring =  cJSON_GetObjectItem(measure, "scoring");
	if(cjson_scoring)
	{
		result_Measure->scoring = Deserialize_CodeableConcept(arena, cjson_scoring);
	}
	cJSON *cjson_compositeScoring =  cJSON_GetObjectItem(measure, "compositeScoring");
	if(cjson_compositeScoring)
	{
		result_Measure->compositeScoring = Deserialize_CodeableConcept(arena, cjson_compositeScoring);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(measure, "type");
	if(cjson_type)
	{
		result_Measure->type_count = cJSON_GetArraySize(cjson_type);
		result_Measure->type = PushArray(arena, CodeableConcept, result_Measure->type_count);
		for(int i = 0; i < result_Measure->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Measure->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_riskAdjustment =  cJSON_GetObjectItem(measure, "riskAdjustment");
	if(cjson_riskAdjustment)
	{
		result_Measure->riskAdjustment = Str8C(cJSON_GetStringValue(cjson_riskAdjustment));
	}
	cJSON *cjson_rateAggregation =  cJSON_GetObjectItem(measure, "rateAggregation");
	if(cjson_rateAggregation)
	{
		result_Measure->rateAggregation = Str8C(cJSON_GetStringValue(cjson_rateAggregation));
	}
	cJSON *cjson_rationale =  cJSON_GetObjectItem(measure, "rationale");
	if(cjson_rationale)
	{
		result_Measure->rationale = Str8C(cJSON_GetStringValue(cjson_rationale));
	}
	cJSON *cjson_clinicalRecommendationStatement =  cJSON_GetObjectItem(measure, "clinicalRecommendationStatement");
	if(cjson_clinicalRecommendationStatement)
	{
		result_Measure->clinicalRecommendationStatement = Str8C(cJSON_GetStringValue(cjson_clinicalRecommendationStatement));
	}
	cJSON *cjson_improvementNotation =  cJSON_GetObjectItem(measure, "improvementNotation");
	if(cjson_improvementNotation)
	{
		result_Measure->improvementNotation = Deserialize_CodeableConcept(arena, cjson_improvementNotation);
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(measure, "definition");
	if(cjson_definition)
	{
		result_Measure->definition_count = cJSON_GetArraySize(cjson_definition);
		result_Measure->definition = PushArray(arena, fhir_markdown, result_Measure->definition_count);
		for(int i = 0; i < result_Measure->definition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_definition, i);
			result_Measure->definition[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_guidance =  cJSON_GetObjectItem(measure, "guidance");
	if(cjson_guidance)
	{
		result_Measure->guidance = Str8C(cJSON_GetStringValue(cjson_guidance));
	}
	cJSON *cjson_group =  cJSON_GetObjectItem(measure, "group");
	if(cjson_group)
	{
		result_Measure->group_count = cJSON_GetArraySize(cjson_group);
		result_Measure->group = PushArray(arena, Measure_Group, result_Measure->group_count);
		for(int i = 0; i < result_Measure->group_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_group, i);
			result_Measure->group[i] = *Deserialize_Measure_Group(arena, internal);
		}

	}
	cJSON *cjson_supplementalData =  cJSON_GetObjectItem(measure, "supplementalData");
	if(cjson_supplementalData)
	{
		result_Measure->supplementalData_count = cJSON_GetArraySize(cjson_supplementalData);
		result_Measure->supplementalData = PushArray(arena, Measure_SupplementalData, result_Measure->supplementalData_count);
		for(int i = 0; i < result_Measure->supplementalData_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supplementalData, i);
			result_Measure->supplementalData[i] = *Deserialize_Measure_SupplementalData(arena, internal);
		}

	}
	return result_Measure;
}

Measure_Group*
Deserialize_Measure_Group(Arena *arena, cJSON *measure_Group)
{
	Measure_Group *result_Measure_Group = PushArray(arena, Measure_Group, 1);
	result_Measure_Group->resourceType = ResourceType::Measure_Group;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measure_Group, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measure_Group, "id");
	if(cjson_id)
	{
		result_Measure_Group->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measure_Group, "extension");
	if(cjson_extension)
	{
		result_Measure_Group->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Measure_Group->extension = PushArray(arena, Extension, result_Measure_Group->extension_count);
		for(int i = 0; i < result_Measure_Group->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Measure_Group->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measure_Group, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Measure_Group->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Measure_Group->modifierExtension = PushArray(arena, Extension, result_Measure_Group->modifierExtension_count);
		for(int i = 0; i < result_Measure_Group->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Measure_Group->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measure_Group, "code");
	if(cjson_code)
	{
		result_Measure_Group->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(measure_Group, "description");
	if(cjson_description)
	{
		result_Measure_Group->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_population =  cJSON_GetObjectItem(measure_Group, "population");
	if(cjson_population)
	{
		result_Measure_Group->population_count = cJSON_GetArraySize(cjson_population);
		result_Measure_Group->population = PushArray(arena, Measure_Group_Population, result_Measure_Group->population_count);
		for(int i = 0; i < result_Measure_Group->population_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_population, i);
			result_Measure_Group->population[i] = *Deserialize_Measure_Group_Population(arena, internal);
		}

	}
	cJSON *cjson_stratifier =  cJSON_GetObjectItem(measure_Group, "stratifier");
	if(cjson_stratifier)
	{
		result_Measure_Group->stratifier_count = cJSON_GetArraySize(cjson_stratifier);
		result_Measure_Group->stratifier = PushArray(arena, Measure_Group_Stratifier, result_Measure_Group->stratifier_count);
		for(int i = 0; i < result_Measure_Group->stratifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_stratifier, i);
			result_Measure_Group->stratifier[i] = *Deserialize_Measure_Group_Stratifier(arena, internal);
		}

	}
	return result_Measure_Group;
}

Measure_Group_Population*
Deserialize_Measure_Group_Population(Arena *arena, cJSON *measure_Group_Population)
{
	Measure_Group_Population *result_Measure_Group_Population = PushArray(arena, Measure_Group_Population, 1);
	result_Measure_Group_Population->resourceType = ResourceType::Measure_Group_Population;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measure_Group_Population, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measure_Group_Population, "id");
	if(cjson_id)
	{
		result_Measure_Group_Population->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measure_Group_Population, "extension");
	if(cjson_extension)
	{
		result_Measure_Group_Population->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Measure_Group_Population->extension = PushArray(arena, Extension, result_Measure_Group_Population->extension_count);
		for(int i = 0; i < result_Measure_Group_Population->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Measure_Group_Population->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measure_Group_Population, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Measure_Group_Population->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Measure_Group_Population->modifierExtension = PushArray(arena, Extension, result_Measure_Group_Population->modifierExtension_count);
		for(int i = 0; i < result_Measure_Group_Population->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Measure_Group_Population->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measure_Group_Population, "code");
	if(cjson_code)
	{
		result_Measure_Group_Population->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(measure_Group_Population, "description");
	if(cjson_description)
	{
		result_Measure_Group_Population->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_criteria =  cJSON_GetObjectItem(measure_Group_Population, "criteria");
	if(cjson_criteria)
	{
		result_Measure_Group_Population->criteria = Deserialize_Expression(arena, cjson_criteria);
	}
	return result_Measure_Group_Population;
}

Measure_Group_Stratifier*
Deserialize_Measure_Group_Stratifier(Arena *arena, cJSON *measure_Group_Stratifier)
{
	Measure_Group_Stratifier *result_Measure_Group_Stratifier = PushArray(arena, Measure_Group_Stratifier, 1);
	result_Measure_Group_Stratifier->resourceType = ResourceType::Measure_Group_Stratifier;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measure_Group_Stratifier, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measure_Group_Stratifier, "id");
	if(cjson_id)
	{
		result_Measure_Group_Stratifier->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measure_Group_Stratifier, "extension");
	if(cjson_extension)
	{
		result_Measure_Group_Stratifier->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Measure_Group_Stratifier->extension = PushArray(arena, Extension, result_Measure_Group_Stratifier->extension_count);
		for(int i = 0; i < result_Measure_Group_Stratifier->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Measure_Group_Stratifier->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measure_Group_Stratifier, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Measure_Group_Stratifier->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Measure_Group_Stratifier->modifierExtension = PushArray(arena, Extension, result_Measure_Group_Stratifier->modifierExtension_count);
		for(int i = 0; i < result_Measure_Group_Stratifier->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Measure_Group_Stratifier->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measure_Group_Stratifier, "code");
	if(cjson_code)
	{
		result_Measure_Group_Stratifier->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(measure_Group_Stratifier, "description");
	if(cjson_description)
	{
		result_Measure_Group_Stratifier->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_criteria =  cJSON_GetObjectItem(measure_Group_Stratifier, "criteria");
	if(cjson_criteria)
	{
		result_Measure_Group_Stratifier->criteria = Deserialize_Expression(arena, cjson_criteria);
	}
	cJSON *cjson_component =  cJSON_GetObjectItem(measure_Group_Stratifier, "component");
	if(cjson_component)
	{
		result_Measure_Group_Stratifier->component_count = cJSON_GetArraySize(cjson_component);
		result_Measure_Group_Stratifier->component = PushArray(arena, Measure_Group_Stratifier_Component, result_Measure_Group_Stratifier->component_count);
		for(int i = 0; i < result_Measure_Group_Stratifier->component_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_component, i);
			result_Measure_Group_Stratifier->component[i] = *Deserialize_Measure_Group_Stratifier_Component(arena, internal);
		}

	}
	return result_Measure_Group_Stratifier;
}

Measure_Group_Stratifier_Component*
Deserialize_Measure_Group_Stratifier_Component(Arena *arena, cJSON *measure_Group_Stratifier_Component)
{
	Measure_Group_Stratifier_Component *result_Measure_Group_Stratifier_Component = PushArray(arena, Measure_Group_Stratifier_Component, 1);
	result_Measure_Group_Stratifier_Component->resourceType = ResourceType::Measure_Group_Stratifier_Component;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measure_Group_Stratifier_Component, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measure_Group_Stratifier_Component, "id");
	if(cjson_id)
	{
		result_Measure_Group_Stratifier_Component->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measure_Group_Stratifier_Component, "extension");
	if(cjson_extension)
	{
		result_Measure_Group_Stratifier_Component->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Measure_Group_Stratifier_Component->extension = PushArray(arena, Extension, result_Measure_Group_Stratifier_Component->extension_count);
		for(int i = 0; i < result_Measure_Group_Stratifier_Component->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Measure_Group_Stratifier_Component->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measure_Group_Stratifier_Component, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Measure_Group_Stratifier_Component->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Measure_Group_Stratifier_Component->modifierExtension = PushArray(arena, Extension, result_Measure_Group_Stratifier_Component->modifierExtension_count);
		for(int i = 0; i < result_Measure_Group_Stratifier_Component->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Measure_Group_Stratifier_Component->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measure_Group_Stratifier_Component, "code");
	if(cjson_code)
	{
		result_Measure_Group_Stratifier_Component->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(measure_Group_Stratifier_Component, "description");
	if(cjson_description)
	{
		result_Measure_Group_Stratifier_Component->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_criteria =  cJSON_GetObjectItem(measure_Group_Stratifier_Component, "criteria");
	if(cjson_criteria)
	{
		result_Measure_Group_Stratifier_Component->criteria = Deserialize_Expression(arena, cjson_criteria);
	}
	return result_Measure_Group_Stratifier_Component;
}

Measure_SupplementalData*
Deserialize_Measure_SupplementalData(Arena *arena, cJSON *measure_SupplementalData)
{
	Measure_SupplementalData *result_Measure_SupplementalData = PushArray(arena, Measure_SupplementalData, 1);
	result_Measure_SupplementalData->resourceType = ResourceType::Measure_SupplementalData;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measure_SupplementalData, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measure_SupplementalData, "id");
	if(cjson_id)
	{
		result_Measure_SupplementalData->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measure_SupplementalData, "extension");
	if(cjson_extension)
	{
		result_Measure_SupplementalData->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Measure_SupplementalData->extension = PushArray(arena, Extension, result_Measure_SupplementalData->extension_count);
		for(int i = 0; i < result_Measure_SupplementalData->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Measure_SupplementalData->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measure_SupplementalData, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Measure_SupplementalData->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Measure_SupplementalData->modifierExtension = PushArray(arena, Extension, result_Measure_SupplementalData->modifierExtension_count);
		for(int i = 0; i < result_Measure_SupplementalData->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Measure_SupplementalData->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measure_SupplementalData, "code");
	if(cjson_code)
	{
		result_Measure_SupplementalData->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(measure_SupplementalData, "usage");
	if(cjson_usage)
	{
		result_Measure_SupplementalData->usage_count = cJSON_GetArraySize(cjson_usage);
		result_Measure_SupplementalData->usage = PushArray(arena, CodeableConcept, result_Measure_SupplementalData->usage_count);
		for(int i = 0; i < result_Measure_SupplementalData->usage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_usage, i);
			result_Measure_SupplementalData->usage[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(measure_SupplementalData, "description");
	if(cjson_description)
	{
		result_Measure_SupplementalData->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_criteria =  cJSON_GetObjectItem(measure_SupplementalData, "criteria");
	if(cjson_criteria)
	{
		result_Measure_SupplementalData->criteria = Deserialize_Expression(arena, cjson_criteria);
	}
	return result_Measure_SupplementalData;
}

MeasureReport*
Deserialize_MeasureReport(Arena *arena, cJSON *measureReport)
{
	MeasureReport *result_MeasureReport = PushArray(arena, MeasureReport, 1);
	result_MeasureReport->resourceType = ResourceType::MeasureReport;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measureReport, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measureReport, "id");
	if(cjson_id)
	{
		result_MeasureReport->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(measureReport, "meta");
	if(cjson_meta)
	{
		result_MeasureReport->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(measureReport, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MeasureReport->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(measureReport, "language");
	if(cjson_language)
	{
		result_MeasureReport->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(measureReport, "text");
	if(cjson_text)
	{
		result_MeasureReport->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(measureReport, "contained");
	if(cjson_contained)
	{
		result_MeasureReport->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MeasureReport->contained = PushArray(arena, Resource, result_MeasureReport->contained_count);
		for(int i = 0; i < result_MeasureReport->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MeasureReport->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measureReport, "extension");
	if(cjson_extension)
	{
		result_MeasureReport->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MeasureReport->extension = PushArray(arena, Extension, result_MeasureReport->extension_count);
		for(int i = 0; i < result_MeasureReport->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MeasureReport->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measureReport, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MeasureReport->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MeasureReport->modifierExtension = PushArray(arena, Extension, result_MeasureReport->modifierExtension_count);
		for(int i = 0; i < result_MeasureReport->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MeasureReport->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(measureReport, "identifier");
	if(cjson_identifier)
	{
		result_MeasureReport->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MeasureReport->identifier = PushArray(arena, Identifier, result_MeasureReport->identifier_count);
		for(int i = 0; i < result_MeasureReport->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MeasureReport->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(measureReport, "status");
	if(cjson_status)
	{
		result_MeasureReport->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(measureReport, "type");
	if(cjson_type)
	{
		result_MeasureReport->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_measure =  cJSON_GetObjectItem(measureReport, "measure");
	if(cjson_measure)
	{
		result_MeasureReport->measure = Str8C(cJSON_GetStringValue(cjson_measure));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(measureReport, "subject");
	if(cjson_subject)
	{
		result_MeasureReport->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(measureReport, "date");
	if(cjson_date)
	{
		result_MeasureReport->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_reporter =  cJSON_GetObjectItem(measureReport, "reporter");
	if(cjson_reporter)
	{
		result_MeasureReport->reporter = Deserialize_Reference(arena, cjson_reporter);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(measureReport, "period");
	if(cjson_period)
	{
		result_MeasureReport->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_improvementNotation =  cJSON_GetObjectItem(measureReport, "improvementNotation");
	if(cjson_improvementNotation)
	{
		result_MeasureReport->improvementNotation = Deserialize_CodeableConcept(arena, cjson_improvementNotation);
	}
	cJSON *cjson_group =  cJSON_GetObjectItem(measureReport, "group");
	if(cjson_group)
	{
		result_MeasureReport->group_count = cJSON_GetArraySize(cjson_group);
		result_MeasureReport->group = PushArray(arena, MeasureReport_Group, result_MeasureReport->group_count);
		for(int i = 0; i < result_MeasureReport->group_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_group, i);
			result_MeasureReport->group[i] = *Deserialize_MeasureReport_Group(arena, internal);
		}

	}
	cJSON *cjson_evaluatedResource =  cJSON_GetObjectItem(measureReport, "evaluatedResource");
	if(cjson_evaluatedResource)
	{
		result_MeasureReport->evaluatedResource_count = cJSON_GetArraySize(cjson_evaluatedResource);
		result_MeasureReport->evaluatedResource = PushArray(arena, Reference, result_MeasureReport->evaluatedResource_count);
		for(int i = 0; i < result_MeasureReport->evaluatedResource_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_evaluatedResource, i);
			result_MeasureReport->evaluatedResource[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_MeasureReport;
}

MeasureReport_Group*
Deserialize_MeasureReport_Group(Arena *arena, cJSON *measureReport_Group)
{
	MeasureReport_Group *result_MeasureReport_Group = PushArray(arena, MeasureReport_Group, 1);
	result_MeasureReport_Group->resourceType = ResourceType::MeasureReport_Group;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measureReport_Group, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measureReport_Group, "id");
	if(cjson_id)
	{
		result_MeasureReport_Group->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measureReport_Group, "extension");
	if(cjson_extension)
	{
		result_MeasureReport_Group->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MeasureReport_Group->extension = PushArray(arena, Extension, result_MeasureReport_Group->extension_count);
		for(int i = 0; i < result_MeasureReport_Group->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MeasureReport_Group->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measureReport_Group, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MeasureReport_Group->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MeasureReport_Group->modifierExtension = PushArray(arena, Extension, result_MeasureReport_Group->modifierExtension_count);
		for(int i = 0; i < result_MeasureReport_Group->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MeasureReport_Group->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measureReport_Group, "code");
	if(cjson_code)
	{
		result_MeasureReport_Group->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_population =  cJSON_GetObjectItem(measureReport_Group, "population");
	if(cjson_population)
	{
		result_MeasureReport_Group->population_count = cJSON_GetArraySize(cjson_population);
		result_MeasureReport_Group->population = PushArray(arena, MeasureReport_Group_Population, result_MeasureReport_Group->population_count);
		for(int i = 0; i < result_MeasureReport_Group->population_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_population, i);
			result_MeasureReport_Group->population[i] = *Deserialize_MeasureReport_Group_Population(arena, internal);
		}

	}
	cJSON *cjson_measureScore =  cJSON_GetObjectItem(measureReport_Group, "measureScore");
	if(cjson_measureScore)
	{
		result_MeasureReport_Group->measureScore = Deserialize_Quantity(arena, cjson_measureScore);
	}
	cJSON *cjson_stratifier =  cJSON_GetObjectItem(measureReport_Group, "stratifier");
	if(cjson_stratifier)
	{
		result_MeasureReport_Group->stratifier_count = cJSON_GetArraySize(cjson_stratifier);
		result_MeasureReport_Group->stratifier = PushArray(arena, MeasureReport_Group_Stratifier, result_MeasureReport_Group->stratifier_count);
		for(int i = 0; i < result_MeasureReport_Group->stratifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_stratifier, i);
			result_MeasureReport_Group->stratifier[i] = *Deserialize_MeasureReport_Group_Stratifier(arena, internal);
		}

	}
	return result_MeasureReport_Group;
}

MeasureReport_Group_Population*
Deserialize_MeasureReport_Group_Population(Arena *arena, cJSON *measureReport_Group_Population)
{
	MeasureReport_Group_Population *result_MeasureReport_Group_Population = PushArray(arena, MeasureReport_Group_Population, 1);
	result_MeasureReport_Group_Population->resourceType = ResourceType::MeasureReport_Group_Population;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measureReport_Group_Population, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measureReport_Group_Population, "id");
	if(cjson_id)
	{
		result_MeasureReport_Group_Population->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measureReport_Group_Population, "extension");
	if(cjson_extension)
	{
		result_MeasureReport_Group_Population->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MeasureReport_Group_Population->extension = PushArray(arena, Extension, result_MeasureReport_Group_Population->extension_count);
		for(int i = 0; i < result_MeasureReport_Group_Population->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MeasureReport_Group_Population->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measureReport_Group_Population, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MeasureReport_Group_Population->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MeasureReport_Group_Population->modifierExtension = PushArray(arena, Extension, result_MeasureReport_Group_Population->modifierExtension_count);
		for(int i = 0; i < result_MeasureReport_Group_Population->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MeasureReport_Group_Population->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measureReport_Group_Population, "code");
	if(cjson_code)
	{
		result_MeasureReport_Group_Population->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_count =  cJSON_GetObjectItem(measureReport_Group_Population, "count");
	if(cjson_count)
	{
		result_MeasureReport_Group_Population->count = Deserialize_Integer(arena, cjson_count);
	}
	cJSON *cjson_subjectResults =  cJSON_GetObjectItem(measureReport_Group_Population, "subjectResults");
	if(cjson_subjectResults)
	{
		result_MeasureReport_Group_Population->subjectResults = Deserialize_Reference(arena, cjson_subjectResults);
	}
	return result_MeasureReport_Group_Population;
}

MeasureReport_Group_Stratifier*
Deserialize_MeasureReport_Group_Stratifier(Arena *arena, cJSON *measureReport_Group_Stratifier)
{
	MeasureReport_Group_Stratifier *result_MeasureReport_Group_Stratifier = PushArray(arena, MeasureReport_Group_Stratifier, 1);
	result_MeasureReport_Group_Stratifier->resourceType = ResourceType::MeasureReport_Group_Stratifier;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measureReport_Group_Stratifier, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measureReport_Group_Stratifier, "id");
	if(cjson_id)
	{
		result_MeasureReport_Group_Stratifier->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measureReport_Group_Stratifier, "extension");
	if(cjson_extension)
	{
		result_MeasureReport_Group_Stratifier->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MeasureReport_Group_Stratifier->extension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier->extension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MeasureReport_Group_Stratifier->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measureReport_Group_Stratifier, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MeasureReport_Group_Stratifier->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MeasureReport_Group_Stratifier->modifierExtension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier->modifierExtension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MeasureReport_Group_Stratifier->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measureReport_Group_Stratifier, "code");
	if(cjson_code)
	{
		result_MeasureReport_Group_Stratifier->code_count = cJSON_GetArraySize(cjson_code);
		result_MeasureReport_Group_Stratifier->code = PushArray(arena, CodeableConcept, result_MeasureReport_Group_Stratifier->code_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_MeasureReport_Group_Stratifier->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_stratum =  cJSON_GetObjectItem(measureReport_Group_Stratifier, "stratum");
	if(cjson_stratum)
	{
		result_MeasureReport_Group_Stratifier->stratum_count = cJSON_GetArraySize(cjson_stratum);
		result_MeasureReport_Group_Stratifier->stratum = PushArray(arena, MeasureReport_Group_Stratifier_Stratum, result_MeasureReport_Group_Stratifier->stratum_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier->stratum_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_stratum, i);
			result_MeasureReport_Group_Stratifier->stratum[i] = *Deserialize_MeasureReport_Group_Stratifier_Stratum(arena, internal);
		}

	}
	return result_MeasureReport_Group_Stratifier;
}

MeasureReport_Group_Stratifier_Stratum*
Deserialize_MeasureReport_Group_Stratifier_Stratum(Arena *arena, cJSON *measureReport_Group_Stratifier_Stratum)
{
	MeasureReport_Group_Stratifier_Stratum *result_MeasureReport_Group_Stratifier_Stratum = PushArray(arena, MeasureReport_Group_Stratifier_Stratum, 1);
	result_MeasureReport_Group_Stratifier_Stratum->resourceType = ResourceType::MeasureReport_Group_Stratifier_Stratum;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "id");
	if(cjson_id)
	{
		result_MeasureReport_Group_Stratifier_Stratum->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "extension");
	if(cjson_extension)
	{
		result_MeasureReport_Group_Stratifier_Stratum->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MeasureReport_Group_Stratifier_Stratum->extension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier_Stratum->extension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MeasureReport_Group_Stratifier_Stratum->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MeasureReport_Group_Stratifier_Stratum->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MeasureReport_Group_Stratifier_Stratum->modifierExtension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier_Stratum->modifierExtension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MeasureReport_Group_Stratifier_Stratum->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "value");
	if(cjson_value)
	{
		result_MeasureReport_Group_Stratifier_Stratum->value = Deserialize_CodeableConcept(arena, cjson_value);
	}
	cJSON *cjson_component =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "component");
	if(cjson_component)
	{
		result_MeasureReport_Group_Stratifier_Stratum->component_count = cJSON_GetArraySize(cjson_component);
		result_MeasureReport_Group_Stratifier_Stratum->component = PushArray(arena, MeasureReport_Group_Stratifier_Stratum_Component, result_MeasureReport_Group_Stratifier_Stratum->component_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum->component_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_component, i);
			result_MeasureReport_Group_Stratifier_Stratum->component[i] = *Deserialize_MeasureReport_Group_Stratifier_Stratum_Component(arena, internal);
		}

	}
	cJSON *cjson_population =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "population");
	if(cjson_population)
	{
		result_MeasureReport_Group_Stratifier_Stratum->population_count = cJSON_GetArraySize(cjson_population);
		result_MeasureReport_Group_Stratifier_Stratum->population = PushArray(arena, MeasureReport_Group_Stratifier_Stratum_Population, result_MeasureReport_Group_Stratifier_Stratum->population_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum->population_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_population, i);
			result_MeasureReport_Group_Stratifier_Stratum->population[i] = *Deserialize_MeasureReport_Group_Stratifier_Stratum_Population(arena, internal);
		}

	}
	cJSON *cjson_measureScore =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum, "measureScore");
	if(cjson_measureScore)
	{
		result_MeasureReport_Group_Stratifier_Stratum->measureScore = Deserialize_Quantity(arena, cjson_measureScore);
	}
	return result_MeasureReport_Group_Stratifier_Stratum;
}

MeasureReport_Group_Stratifier_Stratum_Component*
Deserialize_MeasureReport_Group_Stratifier_Stratum_Component(Arena *arena, cJSON *measureReport_Group_Stratifier_Stratum_Component)
{
	MeasureReport_Group_Stratifier_Stratum_Component *result_MeasureReport_Group_Stratifier_Stratum_Component = PushArray(arena, MeasureReport_Group_Stratifier_Stratum_Component, 1);
	result_MeasureReport_Group_Stratifier_Stratum_Component->resourceType = ResourceType::MeasureReport_Group_Stratifier_Stratum_Component;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Component, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Component, "id");
	if(cjson_id)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Component->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Component, "extension");
	if(cjson_extension)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Component->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MeasureReport_Group_Stratifier_Stratum_Component->extension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier_Stratum_Component->extension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum_Component->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MeasureReport_Group_Stratifier_Stratum_Component->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Component, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Component->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MeasureReport_Group_Stratifier_Stratum_Component->modifierExtension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier_Stratum_Component->modifierExtension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum_Component->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MeasureReport_Group_Stratifier_Stratum_Component->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Component, "code");
	if(cjson_code)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Component->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Component, "value");
	if(cjson_value)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Component->value = Deserialize_CodeableConcept(arena, cjson_value);
	}
	return result_MeasureReport_Group_Stratifier_Stratum_Component;
}

MeasureReport_Group_Stratifier_Stratum_Population*
Deserialize_MeasureReport_Group_Stratifier_Stratum_Population(Arena *arena, cJSON *measureReport_Group_Stratifier_Stratum_Population)
{
	MeasureReport_Group_Stratifier_Stratum_Population *result_MeasureReport_Group_Stratifier_Stratum_Population = PushArray(arena, MeasureReport_Group_Stratifier_Stratum_Population, 1);
	result_MeasureReport_Group_Stratifier_Stratum_Population->resourceType = ResourceType::MeasureReport_Group_Stratifier_Stratum_Population;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Population, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Population, "id");
	if(cjson_id)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Population->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Population, "extension");
	if(cjson_extension)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Population->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MeasureReport_Group_Stratifier_Stratum_Population->extension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier_Stratum_Population->extension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum_Population->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MeasureReport_Group_Stratifier_Stratum_Population->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Population, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Population->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MeasureReport_Group_Stratifier_Stratum_Population->modifierExtension = PushArray(arena, Extension, result_MeasureReport_Group_Stratifier_Stratum_Population->modifierExtension_count);
		for(int i = 0; i < result_MeasureReport_Group_Stratifier_Stratum_Population->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MeasureReport_Group_Stratifier_Stratum_Population->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Population, "code");
	if(cjson_code)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Population->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_count =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Population, "count");
	if(cjson_count)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Population->count = Deserialize_Integer(arena, cjson_count);
	}
	cJSON *cjson_subjectResults =  cJSON_GetObjectItem(measureReport_Group_Stratifier_Stratum_Population, "subjectResults");
	if(cjson_subjectResults)
	{
		result_MeasureReport_Group_Stratifier_Stratum_Population->subjectResults = Deserialize_Reference(arena, cjson_subjectResults);
	}
	return result_MeasureReport_Group_Stratifier_Stratum_Population;
}

Media*
Deserialize_Media(Arena *arena, cJSON *media)
{
	Media *result_Media = PushArray(arena, Media, 1);
	result_Media->resourceType = ResourceType::Media;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(media, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(media, "id");
	if(cjson_id)
	{
		result_Media->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(media, "meta");
	if(cjson_meta)
	{
		result_Media->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(media, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Media->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(media, "language");
	if(cjson_language)
	{
		result_Media->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(media, "text");
	if(cjson_text)
	{
		result_Media->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(media, "contained");
	if(cjson_contained)
	{
		result_Media->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Media->contained = PushArray(arena, Resource, result_Media->contained_count);
		for(int i = 0; i < result_Media->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Media->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(media, "extension");
	if(cjson_extension)
	{
		result_Media->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Media->extension = PushArray(arena, Extension, result_Media->extension_count);
		for(int i = 0; i < result_Media->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Media->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(media, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Media->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Media->modifierExtension = PushArray(arena, Extension, result_Media->modifierExtension_count);
		for(int i = 0; i < result_Media->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Media->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(media, "identifier");
	if(cjson_identifier)
	{
		result_Media->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Media->identifier = PushArray(arena, Identifier, result_Media->identifier_count);
		for(int i = 0; i < result_Media->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Media->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(media, "basedOn");
	if(cjson_basedOn)
	{
		result_Media->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_Media->basedOn = PushArray(arena, Reference, result_Media->basedOn_count);
		for(int i = 0; i < result_Media->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_Media->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(media, "partOf");
	if(cjson_partOf)
	{
		result_Media->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_Media->partOf = PushArray(arena, Reference, result_Media->partOf_count);
		for(int i = 0; i < result_Media->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_Media->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(media, "status");
	if(cjson_status)
	{
		result_Media->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(media, "type");
	if(cjson_type)
	{
		result_Media->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_modality =  cJSON_GetObjectItem(media, "modality");
	if(cjson_modality)
	{
		result_Media->modality = Deserialize_CodeableConcept(arena, cjson_modality);
	}
	cJSON *cjson_view =  cJSON_GetObjectItem(media, "view");
	if(cjson_view)
	{
		result_Media->view = Deserialize_CodeableConcept(arena, cjson_view);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(media, "subject");
	if(cjson_subject)
	{
		result_Media->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(media, "encounter");
	if(cjson_encounter)
	{
		result_Media->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(media, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(media, "valueDateTime");
		result_Media->created.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Media->created_type = Media::CreatedType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(media, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(media, "valuePeriod");
		result_Media->created.valuePeriod = Deserialize_Period(arena, item);
		result_Media->created_type = Media::CreatedType::Period;
	}


	cJSON *cjson_issued =  cJSON_GetObjectItem(media, "issued");
	if(cjson_issued)
	{
		result_Media->issued = Str8C(cJSON_GetStringValue(cjson_issued));
	}
	cJSON *cjson_operator_ =  cJSON_GetObjectItem(media, "operator_");
	if(cjson_operator_)
	{
		result_Media->operator_ = Deserialize_Reference(arena, cjson_operator_);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(media, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Media->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_Media->reasonCode = PushArray(arena, CodeableConcept, result_Media->reasonCode_count);
		for(int i = 0; i < result_Media->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_Media->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(media, "bodySite");
	if(cjson_bodySite)
	{
		result_Media->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	cJSON *cjson_deviceName =  cJSON_GetObjectItem(media, "deviceName");
	if(cjson_deviceName)
	{
		result_Media->deviceName = Str8C(cJSON_GetStringValue(cjson_deviceName));
	}
	cJSON *cjson_device =  cJSON_GetObjectItem(media, "device");
	if(cjson_device)
	{
		result_Media->device = Deserialize_Reference(arena, cjson_device);
	}
	cJSON *cjson_height =  cJSON_GetObjectItem(media, "height");
	if(cjson_height)
	{
		result_Media->height = (int)cJSON_GetNumberValue(cjson_height);
	}
	cJSON *cjson_width =  cJSON_GetObjectItem(media, "width");
	if(cjson_width)
	{
		result_Media->width = (int)cJSON_GetNumberValue(cjson_width);
	}
	cJSON *cjson_frames =  cJSON_GetObjectItem(media, "frames");
	if(cjson_frames)
	{
		result_Media->frames = (int)cJSON_GetNumberValue(cjson_frames);
	}
	cJSON *cjson_duration =  cJSON_GetObjectItem(media, "duration");
	if(cjson_duration)
	{
		result_Media->duration = cJSON_GetNumberValue(cjson_duration);
	}
	cJSON *cjson_content =  cJSON_GetObjectItem(media, "content");
	if(cjson_content)
	{
		result_Media->content = Deserialize_Attachment(arena, cjson_content);
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(media, "note");
	if(cjson_note)
	{
		result_Media->note_count = cJSON_GetArraySize(cjson_note);
		result_Media->note = PushArray(arena, Annotation, result_Media->note_count);
		for(int i = 0; i < result_Media->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Media->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_Media;
}

Medication*
Deserialize_Medication(Arena *arena, cJSON *medication)
{
	Medication *result_Medication = PushArray(arena, Medication, 1);
	result_Medication->resourceType = ResourceType::Medication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medication, "id");
	if(cjson_id)
	{
		result_Medication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medication, "meta");
	if(cjson_meta)
	{
		result_Medication->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medication, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Medication->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medication, "language");
	if(cjson_language)
	{
		result_Medication->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medication, "text");
	if(cjson_text)
	{
		result_Medication->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medication, "contained");
	if(cjson_contained)
	{
		result_Medication->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Medication->contained = PushArray(arena, Resource, result_Medication->contained_count);
		for(int i = 0; i < result_Medication->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Medication->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medication, "extension");
	if(cjson_extension)
	{
		result_Medication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Medication->extension = PushArray(arena, Extension, result_Medication->extension_count);
		for(int i = 0; i < result_Medication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Medication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Medication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Medication->modifierExtension = PushArray(arena, Extension, result_Medication->modifierExtension_count);
		for(int i = 0; i < result_Medication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Medication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medication, "identifier");
	if(cjson_identifier)
	{
		result_Medication->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Medication->identifier = PushArray(arena, Identifier, result_Medication->identifier_count);
		for(int i = 0; i < result_Medication->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Medication->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(medication, "code");
	if(cjson_code)
	{
		result_Medication->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medication, "status");
	if(cjson_status)
	{
		result_Medication->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(medication, "manufacturer");
	if(cjson_manufacturer)
	{
		result_Medication->manufacturer = Deserialize_Reference(arena, cjson_manufacturer);
	}
	cJSON *cjson_form =  cJSON_GetObjectItem(medication, "form");
	if(cjson_form)
	{
		result_Medication->form = Deserialize_CodeableConcept(arena, cjson_form);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(medication, "amount");
	if(cjson_amount)
	{
		result_Medication->amount = Deserialize_Ratio(arena, cjson_amount);
	}
	cJSON *cjson_ingredient =  cJSON_GetObjectItem(medication, "ingredient");
	if(cjson_ingredient)
	{
		result_Medication->ingredient_count = cJSON_GetArraySize(cjson_ingredient);
		result_Medication->ingredient = PushArray(arena, Medication_Ingredient, result_Medication->ingredient_count);
		for(int i = 0; i < result_Medication->ingredient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_ingredient, i);
			result_Medication->ingredient[i] = *Deserialize_Medication_Ingredient(arena, internal);
		}

	}
	cJSON *cjson_batch =  cJSON_GetObjectItem(medication, "batch");
	if(cjson_batch)
	{
		result_Medication->batch = Deserialize_Medication_Batch(arena, cjson_batch);
	}
	return result_Medication;
}

Medication_Ingredient*
Deserialize_Medication_Ingredient(Arena *arena, cJSON *medication_Ingredient)
{
	Medication_Ingredient *result_Medication_Ingredient = PushArray(arena, Medication_Ingredient, 1);
	result_Medication_Ingredient->resourceType = ResourceType::Medication_Ingredient;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medication_Ingredient, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medication_Ingredient, "id");
	if(cjson_id)
	{
		result_Medication_Ingredient->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medication_Ingredient, "extension");
	if(cjson_extension)
	{
		result_Medication_Ingredient->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Medication_Ingredient->extension = PushArray(arena, Extension, result_Medication_Ingredient->extension_count);
		for(int i = 0; i < result_Medication_Ingredient->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Medication_Ingredient->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medication_Ingredient, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Medication_Ingredient->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Medication_Ingredient->modifierExtension = PushArray(arena, Extension, result_Medication_Ingredient->modifierExtension_count);
		for(int i = 0; i < result_Medication_Ingredient->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Medication_Ingredient->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(medication_Ingredient, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medication_Ingredient, "valueCodeableConcept");
		result_Medication_Ingredient->item.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Medication_Ingredient->item_type = Medication_Ingredient::ItemType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medication_Ingredient, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medication_Ingredient, "valueReference");
		result_Medication_Ingredient->item.valueReference = Deserialize_Reference(arena, item);
		result_Medication_Ingredient->item_type = Medication_Ingredient::ItemType::Reference;
	}


	cJSON *cjson_isActive =  cJSON_GetObjectItem(medication_Ingredient, "isActive");
	if(cjson_isActive)
	{
		result_Medication_Ingredient->isActive = (boolean)cJSON_IsTrue(cjson_isActive);
	}
	cJSON *cjson_strength =  cJSON_GetObjectItem(medication_Ingredient, "strength");
	if(cjson_strength)
	{
		result_Medication_Ingredient->strength = Deserialize_Ratio(arena, cjson_strength);
	}
	return result_Medication_Ingredient;
}

Medication_Batch*
Deserialize_Medication_Batch(Arena *arena, cJSON *medication_Batch)
{
	Medication_Batch *result_Medication_Batch = PushArray(arena, Medication_Batch, 1);
	result_Medication_Batch->resourceType = ResourceType::Medication_Batch;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medication_Batch, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medication_Batch, "id");
	if(cjson_id)
	{
		result_Medication_Batch->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medication_Batch, "extension");
	if(cjson_extension)
	{
		result_Medication_Batch->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Medication_Batch->extension = PushArray(arena, Extension, result_Medication_Batch->extension_count);
		for(int i = 0; i < result_Medication_Batch->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Medication_Batch->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medication_Batch, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Medication_Batch->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Medication_Batch->modifierExtension = PushArray(arena, Extension, result_Medication_Batch->modifierExtension_count);
		for(int i = 0; i < result_Medication_Batch->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Medication_Batch->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_lotNumber =  cJSON_GetObjectItem(medication_Batch, "lotNumber");
	if(cjson_lotNumber)
	{
		result_Medication_Batch->lotNumber = Str8C(cJSON_GetStringValue(cjson_lotNumber));
	}
	cJSON *cjson_expirationDate =  cJSON_GetObjectItem(medication_Batch, "expirationDate");
	if(cjson_expirationDate)
	{
		result_Medication_Batch->expirationDate = Str8C(cJSON_GetStringValue(cjson_expirationDate));
	}
	return result_Medication_Batch;
}

MedicationAdministration*
Deserialize_MedicationAdministration(Arena *arena, cJSON *medicationAdministration)
{
	MedicationAdministration *result_MedicationAdministration = PushArray(arena, MedicationAdministration, 1);
	result_MedicationAdministration->resourceType = ResourceType::MedicationAdministration;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationAdministration, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationAdministration, "id");
	if(cjson_id)
	{
		result_MedicationAdministration->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicationAdministration, "meta");
	if(cjson_meta)
	{
		result_MedicationAdministration->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicationAdministration, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicationAdministration->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicationAdministration, "language");
	if(cjson_language)
	{
		result_MedicationAdministration->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicationAdministration, "text");
	if(cjson_text)
	{
		result_MedicationAdministration->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicationAdministration, "contained");
	if(cjson_contained)
	{
		result_MedicationAdministration->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicationAdministration->contained = PushArray(arena, Resource, result_MedicationAdministration->contained_count);
		for(int i = 0; i < result_MedicationAdministration->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicationAdministration->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationAdministration, "extension");
	if(cjson_extension)
	{
		result_MedicationAdministration->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationAdministration->extension = PushArray(arena, Extension, result_MedicationAdministration->extension_count);
		for(int i = 0; i < result_MedicationAdministration->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationAdministration->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationAdministration, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationAdministration->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationAdministration->modifierExtension = PushArray(arena, Extension, result_MedicationAdministration->modifierExtension_count);
		for(int i = 0; i < result_MedicationAdministration->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationAdministration->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicationAdministration, "identifier");
	if(cjson_identifier)
	{
		result_MedicationAdministration->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicationAdministration->identifier = PushArray(arena, Identifier, result_MedicationAdministration->identifier_count);
		for(int i = 0; i < result_MedicationAdministration->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicationAdministration->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiates =  cJSON_GetObjectItem(medicationAdministration, "instantiates");
	if(cjson_instantiates)
	{
		result_MedicationAdministration->instantiates_count = cJSON_GetArraySize(cjson_instantiates);
		result_MedicationAdministration->instantiates = PushArray(arena, fhir_uri, result_MedicationAdministration->instantiates_count);
		for(int i = 0; i < result_MedicationAdministration->instantiates_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiates, i);
			result_MedicationAdministration->instantiates[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(medicationAdministration, "partOf");
	if(cjson_partOf)
	{
		result_MedicationAdministration->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_MedicationAdministration->partOf = PushArray(arena, Reference, result_MedicationAdministration->partOf_count);
		for(int i = 0; i < result_MedicationAdministration->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_MedicationAdministration->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medicationAdministration, "status");
	if(cjson_status)
	{
		result_MedicationAdministration->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(medicationAdministration, "statusReason");
	if(cjson_statusReason)
	{
		result_MedicationAdministration->statusReason_count = cJSON_GetArraySize(cjson_statusReason);
		result_MedicationAdministration->statusReason = PushArray(arena, CodeableConcept, result_MedicationAdministration->statusReason_count);
		for(int i = 0; i < result_MedicationAdministration->statusReason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_statusReason, i);
			result_MedicationAdministration->statusReason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(medicationAdministration, "category");
	if(cjson_category)
	{
		result_MedicationAdministration->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	if((bool)cJSON_HasObjectItem(medicationAdministration, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationAdministration, "valueCodeableConcept");
		result_MedicationAdministration->medication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationAdministration->medication_type = MedicationAdministration::MedicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationAdministration, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationAdministration, "valueReference");
		result_MedicationAdministration->medication.valueReference = Deserialize_Reference(arena, item);
		result_MedicationAdministration->medication_type = MedicationAdministration::MedicationType::Reference;
	}


	cJSON *cjson_subject =  cJSON_GetObjectItem(medicationAdministration, "subject");
	if(cjson_subject)
	{
		result_MedicationAdministration->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(medicationAdministration, "context");
	if(cjson_context)
	{
		result_MedicationAdministration->context = Deserialize_Reference(arena, cjson_context);
	}
	cJSON *cjson_supportingInformation =  cJSON_GetObjectItem(medicationAdministration, "supportingInformation");
	if(cjson_supportingInformation)
	{
		result_MedicationAdministration->supportingInformation_count = cJSON_GetArraySize(cjson_supportingInformation);
		result_MedicationAdministration->supportingInformation = PushArray(arena, Reference, result_MedicationAdministration->supportingInformation_count);
		for(int i = 0; i < result_MedicationAdministration->supportingInformation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInformation, i);
			result_MedicationAdministration->supportingInformation[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(medicationAdministration, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationAdministration, "valueDateTime");
		result_MedicationAdministration->effective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_MedicationAdministration->effective_type = MedicationAdministration::EffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(medicationAdministration, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationAdministration, "valuePeriod");
		result_MedicationAdministration->effective.valuePeriod = Deserialize_Period(arena, item);
		result_MedicationAdministration->effective_type = MedicationAdministration::EffectiveType::Period;
	}


	cJSON *cjson_performer =  cJSON_GetObjectItem(medicationAdministration, "performer");
	if(cjson_performer)
	{
		result_MedicationAdministration->performer_count = cJSON_GetArraySize(cjson_performer);
		result_MedicationAdministration->performer = PushArray(arena, MedicationAdministration_Performer, result_MedicationAdministration->performer_count);
		for(int i = 0; i < result_MedicationAdministration->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_MedicationAdministration->performer[i] = *Deserialize_MedicationAdministration_Performer(arena, internal);
		}

	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(medicationAdministration, "reasonCode");
	if(cjson_reasonCode)
	{
		result_MedicationAdministration->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_MedicationAdministration->reasonCode = PushArray(arena, CodeableConcept, result_MedicationAdministration->reasonCode_count);
		for(int i = 0; i < result_MedicationAdministration->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_MedicationAdministration->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(medicationAdministration, "reasonReference");
	if(cjson_reasonReference)
	{
		result_MedicationAdministration->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_MedicationAdministration->reasonReference = PushArray(arena, Reference, result_MedicationAdministration->reasonReference_count);
		for(int i = 0; i < result_MedicationAdministration->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_MedicationAdministration->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_request =  cJSON_GetObjectItem(medicationAdministration, "request");
	if(cjson_request)
	{
		result_MedicationAdministration->request = Deserialize_Reference(arena, cjson_request);
	}
	cJSON *cjson_device =  cJSON_GetObjectItem(medicationAdministration, "device");
	if(cjson_device)
	{
		result_MedicationAdministration->device_count = cJSON_GetArraySize(cjson_device);
		result_MedicationAdministration->device = PushArray(arena, Reference, result_MedicationAdministration->device_count);
		for(int i = 0; i < result_MedicationAdministration->device_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_device, i);
			result_MedicationAdministration->device[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(medicationAdministration, "note");
	if(cjson_note)
	{
		result_MedicationAdministration->note_count = cJSON_GetArraySize(cjson_note);
		result_MedicationAdministration->note = PushArray(arena, Annotation, result_MedicationAdministration->note_count);
		for(int i = 0; i < result_MedicationAdministration->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_MedicationAdministration->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_dosage =  cJSON_GetObjectItem(medicationAdministration, "dosage");
	if(cjson_dosage)
	{
		result_MedicationAdministration->dosage = Deserialize_MedicationAdministration_Dosage(arena, cjson_dosage);
	}
	cJSON *cjson_eventHistory =  cJSON_GetObjectItem(medicationAdministration, "eventHistory");
	if(cjson_eventHistory)
	{
		result_MedicationAdministration->eventHistory_count = cJSON_GetArraySize(cjson_eventHistory);
		result_MedicationAdministration->eventHistory = PushArray(arena, Reference, result_MedicationAdministration->eventHistory_count);
		for(int i = 0; i < result_MedicationAdministration->eventHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_eventHistory, i);
			result_MedicationAdministration->eventHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_MedicationAdministration;
}

MedicationAdministration_Performer*
Deserialize_MedicationAdministration_Performer(Arena *arena, cJSON *medicationAdministration_Performer)
{
	MedicationAdministration_Performer *result_MedicationAdministration_Performer = PushArray(arena, MedicationAdministration_Performer, 1);
	result_MedicationAdministration_Performer->resourceType = ResourceType::MedicationAdministration_Performer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationAdministration_Performer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationAdministration_Performer, "id");
	if(cjson_id)
	{
		result_MedicationAdministration_Performer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationAdministration_Performer, "extension");
	if(cjson_extension)
	{
		result_MedicationAdministration_Performer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationAdministration_Performer->extension = PushArray(arena, Extension, result_MedicationAdministration_Performer->extension_count);
		for(int i = 0; i < result_MedicationAdministration_Performer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationAdministration_Performer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationAdministration_Performer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationAdministration_Performer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationAdministration_Performer->modifierExtension = PushArray(arena, Extension, result_MedicationAdministration_Performer->modifierExtension_count);
		for(int i = 0; i < result_MedicationAdministration_Performer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationAdministration_Performer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_function_ =  cJSON_GetObjectItem(medicationAdministration_Performer, "function_");
	if(cjson_function_)
	{
		result_MedicationAdministration_Performer->function_ = Deserialize_CodeableConcept(arena, cjson_function_);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(medicationAdministration_Performer, "actor");
	if(cjson_actor)
	{
		result_MedicationAdministration_Performer->actor = Deserialize_Reference(arena, cjson_actor);
	}
	return result_MedicationAdministration_Performer;
}

MedicationAdministration_Dosage*
Deserialize_MedicationAdministration_Dosage(Arena *arena, cJSON *medicationAdministration_Dosage)
{
	MedicationAdministration_Dosage *result_MedicationAdministration_Dosage = PushArray(arena, MedicationAdministration_Dosage, 1);
	result_MedicationAdministration_Dosage->resourceType = ResourceType::MedicationAdministration_Dosage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationAdministration_Dosage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationAdministration_Dosage, "id");
	if(cjson_id)
	{
		result_MedicationAdministration_Dosage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationAdministration_Dosage, "extension");
	if(cjson_extension)
	{
		result_MedicationAdministration_Dosage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationAdministration_Dosage->extension = PushArray(arena, Extension, result_MedicationAdministration_Dosage->extension_count);
		for(int i = 0; i < result_MedicationAdministration_Dosage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationAdministration_Dosage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationAdministration_Dosage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationAdministration_Dosage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationAdministration_Dosage->modifierExtension = PushArray(arena, Extension, result_MedicationAdministration_Dosage->modifierExtension_count);
		for(int i = 0; i < result_MedicationAdministration_Dosage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationAdministration_Dosage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicationAdministration_Dosage, "text");
	if(cjson_text)
	{
		result_MedicationAdministration_Dosage->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_site =  cJSON_GetObjectItem(medicationAdministration_Dosage, "site");
	if(cjson_site)
	{
		result_MedicationAdministration_Dosage->site = Deserialize_CodeableConcept(arena, cjson_site);
	}
	cJSON *cjson_route =  cJSON_GetObjectItem(medicationAdministration_Dosage, "route");
	if(cjson_route)
	{
		result_MedicationAdministration_Dosage->route = Deserialize_CodeableConcept(arena, cjson_route);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(medicationAdministration_Dosage, "method");
	if(cjson_method)
	{
		result_MedicationAdministration_Dosage->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_dose =  cJSON_GetObjectItem(medicationAdministration_Dosage, "dose");
	if(cjson_dose)
	{
		result_MedicationAdministration_Dosage->dose = Deserialize_Quantity(arena, cjson_dose);
	}
	if((bool)cJSON_HasObjectItem(medicationAdministration_Dosage, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationAdministration_Dosage, "valueRatio");
		result_MedicationAdministration_Dosage->rate.valueRatio = Deserialize_Ratio(arena, item);
		result_MedicationAdministration_Dosage->rate_type = MedicationAdministration_Dosage::RateType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(medicationAdministration_Dosage, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationAdministration_Dosage, "valueQuantity");
		result_MedicationAdministration_Dosage->rate.valueQuantity = Deserialize_Quantity(arena, item);
		result_MedicationAdministration_Dosage->rate_type = MedicationAdministration_Dosage::RateType::Quantity;
	}


	return result_MedicationAdministration_Dosage;
}

MedicationDispense*
Deserialize_MedicationDispense(Arena *arena, cJSON *medicationDispense)
{
	MedicationDispense *result_MedicationDispense = PushArray(arena, MedicationDispense, 1);
	result_MedicationDispense->resourceType = ResourceType::MedicationDispense;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationDispense, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationDispense, "id");
	if(cjson_id)
	{
		result_MedicationDispense->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicationDispense, "meta");
	if(cjson_meta)
	{
		result_MedicationDispense->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicationDispense, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicationDispense->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicationDispense, "language");
	if(cjson_language)
	{
		result_MedicationDispense->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicationDispense, "text");
	if(cjson_text)
	{
		result_MedicationDispense->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicationDispense, "contained");
	if(cjson_contained)
	{
		result_MedicationDispense->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicationDispense->contained = PushArray(arena, Resource, result_MedicationDispense->contained_count);
		for(int i = 0; i < result_MedicationDispense->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicationDispense->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationDispense, "extension");
	if(cjson_extension)
	{
		result_MedicationDispense->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationDispense->extension = PushArray(arena, Extension, result_MedicationDispense->extension_count);
		for(int i = 0; i < result_MedicationDispense->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationDispense->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationDispense, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationDispense->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationDispense->modifierExtension = PushArray(arena, Extension, result_MedicationDispense->modifierExtension_count);
		for(int i = 0; i < result_MedicationDispense->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationDispense->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicationDispense, "identifier");
	if(cjson_identifier)
	{
		result_MedicationDispense->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicationDispense->identifier = PushArray(arena, Identifier, result_MedicationDispense->identifier_count);
		for(int i = 0; i < result_MedicationDispense->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicationDispense->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(medicationDispense, "partOf");
	if(cjson_partOf)
	{
		result_MedicationDispense->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_MedicationDispense->partOf = PushArray(arena, Reference, result_MedicationDispense->partOf_count);
		for(int i = 0; i < result_MedicationDispense->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_MedicationDispense->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medicationDispense, "status");
	if(cjson_status)
	{
		result_MedicationDispense->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	if((bool)cJSON_HasObjectItem(medicationDispense, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationDispense, "valueCodeableConcept");
		result_MedicationDispense->statusReason.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationDispense->statusReason_type = MedicationDispense::StatusReasonType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationDispense, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationDispense, "valueReference");
		result_MedicationDispense->statusReason.valueReference = Deserialize_Reference(arena, item);
		result_MedicationDispense->statusReason_type = MedicationDispense::StatusReasonType::Reference;
	}


	cJSON *cjson_category =  cJSON_GetObjectItem(medicationDispense, "category");
	if(cjson_category)
	{
		result_MedicationDispense->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	if((bool)cJSON_HasObjectItem(medicationDispense, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationDispense, "valueCodeableConcept");
		result_MedicationDispense->medication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationDispense->medication_type = MedicationDispense::MedicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationDispense, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationDispense, "valueReference");
		result_MedicationDispense->medication.valueReference = Deserialize_Reference(arena, item);
		result_MedicationDispense->medication_type = MedicationDispense::MedicationType::Reference;
	}


	cJSON *cjson_subject =  cJSON_GetObjectItem(medicationDispense, "subject");
	if(cjson_subject)
	{
		result_MedicationDispense->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(medicationDispense, "context");
	if(cjson_context)
	{
		result_MedicationDispense->context = Deserialize_Reference(arena, cjson_context);
	}
	cJSON *cjson_supportingInformation =  cJSON_GetObjectItem(medicationDispense, "supportingInformation");
	if(cjson_supportingInformation)
	{
		result_MedicationDispense->supportingInformation_count = cJSON_GetArraySize(cjson_supportingInformation);
		result_MedicationDispense->supportingInformation = PushArray(arena, Reference, result_MedicationDispense->supportingInformation_count);
		for(int i = 0; i < result_MedicationDispense->supportingInformation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInformation, i);
			result_MedicationDispense->supportingInformation[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(medicationDispense, "performer");
	if(cjson_performer)
	{
		result_MedicationDispense->performer_count = cJSON_GetArraySize(cjson_performer);
		result_MedicationDispense->performer = PushArray(arena, MedicationDispense_Performer, result_MedicationDispense->performer_count);
		for(int i = 0; i < result_MedicationDispense->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_MedicationDispense->performer[i] = *Deserialize_MedicationDispense_Performer(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(medicationDispense, "location");
	if(cjson_location)
	{
		result_MedicationDispense->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_authorizingPrescription =  cJSON_GetObjectItem(medicationDispense, "authorizingPrescription");
	if(cjson_authorizingPrescription)
	{
		result_MedicationDispense->authorizingPrescription_count = cJSON_GetArraySize(cjson_authorizingPrescription);
		result_MedicationDispense->authorizingPrescription = PushArray(arena, Reference, result_MedicationDispense->authorizingPrescription_count);
		for(int i = 0; i < result_MedicationDispense->authorizingPrescription_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_authorizingPrescription, i);
			result_MedicationDispense->authorizingPrescription[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationDispense, "type");
	if(cjson_type)
	{
		result_MedicationDispense->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(medicationDispense, "quantity");
	if(cjson_quantity)
	{
		result_MedicationDispense->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_daysSupply =  cJSON_GetObjectItem(medicationDispense, "daysSupply");
	if(cjson_daysSupply)
	{
		result_MedicationDispense->daysSupply = Deserialize_Quantity(arena, cjson_daysSupply);
	}
	cJSON *cjson_whenPrepared =  cJSON_GetObjectItem(medicationDispense, "whenPrepared");
	if(cjson_whenPrepared)
	{
		result_MedicationDispense->whenPrepared = Str8C(cJSON_GetStringValue(cjson_whenPrepared));
	}
	cJSON *cjson_whenHandedOver =  cJSON_GetObjectItem(medicationDispense, "whenHandedOver");
	if(cjson_whenHandedOver)
	{
		result_MedicationDispense->whenHandedOver = Str8C(cJSON_GetStringValue(cjson_whenHandedOver));
	}
	cJSON *cjson_destination =  cJSON_GetObjectItem(medicationDispense, "destination");
	if(cjson_destination)
	{
		result_MedicationDispense->destination = Deserialize_Reference(arena, cjson_destination);
	}
	cJSON *cjson_receiver =  cJSON_GetObjectItem(medicationDispense, "receiver");
	if(cjson_receiver)
	{
		result_MedicationDispense->receiver_count = cJSON_GetArraySize(cjson_receiver);
		result_MedicationDispense->receiver = PushArray(arena, Reference, result_MedicationDispense->receiver_count);
		for(int i = 0; i < result_MedicationDispense->receiver_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_receiver, i);
			result_MedicationDispense->receiver[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(medicationDispense, "note");
	if(cjson_note)
	{
		result_MedicationDispense->note_count = cJSON_GetArraySize(cjson_note);
		result_MedicationDispense->note = PushArray(arena, Annotation, result_MedicationDispense->note_count);
		for(int i = 0; i < result_MedicationDispense->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_MedicationDispense->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_dosageInstruction =  cJSON_GetObjectItem(medicationDispense, "dosageInstruction");
	if(cjson_dosageInstruction)
	{
		result_MedicationDispense->dosageInstruction_count = cJSON_GetArraySize(cjson_dosageInstruction);
		result_MedicationDispense->dosageInstruction = PushArray(arena, Dosage, result_MedicationDispense->dosageInstruction_count);
		for(int i = 0; i < result_MedicationDispense->dosageInstruction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dosageInstruction, i);
			result_MedicationDispense->dosageInstruction[i] = *Deserialize_Dosage(arena, internal);
		}

	}
	cJSON *cjson_substitution =  cJSON_GetObjectItem(medicationDispense, "substitution");
	if(cjson_substitution)
	{
		result_MedicationDispense->substitution = Deserialize_MedicationDispense_Substitution(arena, cjson_substitution);
	}
	cJSON *cjson_detectedIssue =  cJSON_GetObjectItem(medicationDispense, "detectedIssue");
	if(cjson_detectedIssue)
	{
		result_MedicationDispense->detectedIssue_count = cJSON_GetArraySize(cjson_detectedIssue);
		result_MedicationDispense->detectedIssue = PushArray(arena, Reference, result_MedicationDispense->detectedIssue_count);
		for(int i = 0; i < result_MedicationDispense->detectedIssue_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detectedIssue, i);
			result_MedicationDispense->detectedIssue[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_eventHistory =  cJSON_GetObjectItem(medicationDispense, "eventHistory");
	if(cjson_eventHistory)
	{
		result_MedicationDispense->eventHistory_count = cJSON_GetArraySize(cjson_eventHistory);
		result_MedicationDispense->eventHistory = PushArray(arena, Reference, result_MedicationDispense->eventHistory_count);
		for(int i = 0; i < result_MedicationDispense->eventHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_eventHistory, i);
			result_MedicationDispense->eventHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_MedicationDispense;
}

MedicationDispense_Performer*
Deserialize_MedicationDispense_Performer(Arena *arena, cJSON *medicationDispense_Performer)
{
	MedicationDispense_Performer *result_MedicationDispense_Performer = PushArray(arena, MedicationDispense_Performer, 1);
	result_MedicationDispense_Performer->resourceType = ResourceType::MedicationDispense_Performer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationDispense_Performer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationDispense_Performer, "id");
	if(cjson_id)
	{
		result_MedicationDispense_Performer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationDispense_Performer, "extension");
	if(cjson_extension)
	{
		result_MedicationDispense_Performer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationDispense_Performer->extension = PushArray(arena, Extension, result_MedicationDispense_Performer->extension_count);
		for(int i = 0; i < result_MedicationDispense_Performer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationDispense_Performer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationDispense_Performer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationDispense_Performer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationDispense_Performer->modifierExtension = PushArray(arena, Extension, result_MedicationDispense_Performer->modifierExtension_count);
		for(int i = 0; i < result_MedicationDispense_Performer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationDispense_Performer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_function_ =  cJSON_GetObjectItem(medicationDispense_Performer, "function_");
	if(cjson_function_)
	{
		result_MedicationDispense_Performer->function_ = Deserialize_CodeableConcept(arena, cjson_function_);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(medicationDispense_Performer, "actor");
	if(cjson_actor)
	{
		result_MedicationDispense_Performer->actor = Deserialize_Reference(arena, cjson_actor);
	}
	return result_MedicationDispense_Performer;
}

MedicationDispense_Substitution*
Deserialize_MedicationDispense_Substitution(Arena *arena, cJSON *medicationDispense_Substitution)
{
	MedicationDispense_Substitution *result_MedicationDispense_Substitution = PushArray(arena, MedicationDispense_Substitution, 1);
	result_MedicationDispense_Substitution->resourceType = ResourceType::MedicationDispense_Substitution;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationDispense_Substitution, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationDispense_Substitution, "id");
	if(cjson_id)
	{
		result_MedicationDispense_Substitution->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationDispense_Substitution, "extension");
	if(cjson_extension)
	{
		result_MedicationDispense_Substitution->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationDispense_Substitution->extension = PushArray(arena, Extension, result_MedicationDispense_Substitution->extension_count);
		for(int i = 0; i < result_MedicationDispense_Substitution->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationDispense_Substitution->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationDispense_Substitution, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationDispense_Substitution->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationDispense_Substitution->modifierExtension = PushArray(arena, Extension, result_MedicationDispense_Substitution->modifierExtension_count);
		for(int i = 0; i < result_MedicationDispense_Substitution->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationDispense_Substitution->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_wasSubstituted =  cJSON_GetObjectItem(medicationDispense_Substitution, "wasSubstituted");
	if(cjson_wasSubstituted)
	{
		result_MedicationDispense_Substitution->wasSubstituted = (boolean)cJSON_IsTrue(cjson_wasSubstituted);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationDispense_Substitution, "type");
	if(cjson_type)
	{
		result_MedicationDispense_Substitution->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(medicationDispense_Substitution, "reason");
	if(cjson_reason)
	{
		result_MedicationDispense_Substitution->reason_count = cJSON_GetArraySize(cjson_reason);
		result_MedicationDispense_Substitution->reason = PushArray(arena, CodeableConcept, result_MedicationDispense_Substitution->reason_count);
		for(int i = 0; i < result_MedicationDispense_Substitution->reason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reason, i);
			result_MedicationDispense_Substitution->reason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_responsibleParty =  cJSON_GetObjectItem(medicationDispense_Substitution, "responsibleParty");
	if(cjson_responsibleParty)
	{
		result_MedicationDispense_Substitution->responsibleParty_count = cJSON_GetArraySize(cjson_responsibleParty);
		result_MedicationDispense_Substitution->responsibleParty = PushArray(arena, Reference, result_MedicationDispense_Substitution->responsibleParty_count);
		for(int i = 0; i < result_MedicationDispense_Substitution->responsibleParty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_responsibleParty, i);
			result_MedicationDispense_Substitution->responsibleParty[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_MedicationDispense_Substitution;
}

MedicationKnowledge*
Deserialize_MedicationKnowledge(Arena *arena, cJSON *medicationKnowledge)
{
	MedicationKnowledge *result_MedicationKnowledge = PushArray(arena, MedicationKnowledge, 1);
	result_MedicationKnowledge->resourceType = ResourceType::MedicationKnowledge;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicationKnowledge, "meta");
	if(cjson_meta)
	{
		result_MedicationKnowledge->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicationKnowledge, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicationKnowledge->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicationKnowledge, "language");
	if(cjson_language)
	{
		result_MedicationKnowledge->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicationKnowledge, "text");
	if(cjson_text)
	{
		result_MedicationKnowledge->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicationKnowledge, "contained");
	if(cjson_contained)
	{
		result_MedicationKnowledge->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicationKnowledge->contained = PushArray(arena, Resource, result_MedicationKnowledge->contained_count);
		for(int i = 0; i < result_MedicationKnowledge->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicationKnowledge->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge->extension = PushArray(arena, Extension, result_MedicationKnowledge->extension_count);
		for(int i = 0; i < result_MedicationKnowledge->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(medicationKnowledge, "code");
	if(cjson_code)
	{
		result_MedicationKnowledge->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medicationKnowledge, "status");
	if(cjson_status)
	{
		result_MedicationKnowledge->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(medicationKnowledge, "manufacturer");
	if(cjson_manufacturer)
	{
		result_MedicationKnowledge->manufacturer = Deserialize_Reference(arena, cjson_manufacturer);
	}
	cJSON *cjson_doseForm =  cJSON_GetObjectItem(medicationKnowledge, "doseForm");
	if(cjson_doseForm)
	{
		result_MedicationKnowledge->doseForm = Deserialize_CodeableConcept(arena, cjson_doseForm);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(medicationKnowledge, "amount");
	if(cjson_amount)
	{
		result_MedicationKnowledge->amount = Deserialize_Quantity(arena, cjson_amount);
	}
	cJSON *cjson_synonym =  cJSON_GetObjectItem(medicationKnowledge, "synonym");
	if(cjson_synonym)
	{
		result_MedicationKnowledge->synonym_count = cJSON_GetArraySize(cjson_synonym);
		result_MedicationKnowledge->synonym = PushArray(arena, fhir_string, result_MedicationKnowledge->synonym_count);
		for(int i = 0; i < result_MedicationKnowledge->synonym_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_synonym, i);
			result_MedicationKnowledge->synonym[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_relatedMedicationKnowledge =  cJSON_GetObjectItem(medicationKnowledge, "relatedMedicationKnowledge");
	if(cjson_relatedMedicationKnowledge)
	{
		result_MedicationKnowledge->relatedMedicationKnowledge_count = cJSON_GetArraySize(cjson_relatedMedicationKnowledge);
		result_MedicationKnowledge->relatedMedicationKnowledge = PushArray(arena, MedicationKnowledge_RelatedMedicationKnowledge, result_MedicationKnowledge->relatedMedicationKnowledge_count);
		for(int i = 0; i < result_MedicationKnowledge->relatedMedicationKnowledge_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedMedicationKnowledge, i);
			result_MedicationKnowledge->relatedMedicationKnowledge[i] = *Deserialize_MedicationKnowledge_RelatedMedicationKnowledge(arena, internal);
		}

	}
	cJSON *cjson_associatedMedication =  cJSON_GetObjectItem(medicationKnowledge, "associatedMedication");
	if(cjson_associatedMedication)
	{
		result_MedicationKnowledge->associatedMedication_count = cJSON_GetArraySize(cjson_associatedMedication);
		result_MedicationKnowledge->associatedMedication = PushArray(arena, Reference, result_MedicationKnowledge->associatedMedication_count);
		for(int i = 0; i < result_MedicationKnowledge->associatedMedication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_associatedMedication, i);
			result_MedicationKnowledge->associatedMedication[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_productType =  cJSON_GetObjectItem(medicationKnowledge, "productType");
	if(cjson_productType)
	{
		result_MedicationKnowledge->productType_count = cJSON_GetArraySize(cjson_productType);
		result_MedicationKnowledge->productType = PushArray(arena, CodeableConcept, result_MedicationKnowledge->productType_count);
		for(int i = 0; i < result_MedicationKnowledge->productType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_productType, i);
			result_MedicationKnowledge->productType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_monograph =  cJSON_GetObjectItem(medicationKnowledge, "monograph");
	if(cjson_monograph)
	{
		result_MedicationKnowledge->monograph_count = cJSON_GetArraySize(cjson_monograph);
		result_MedicationKnowledge->monograph = PushArray(arena, MedicationKnowledge_Monograph, result_MedicationKnowledge->monograph_count);
		for(int i = 0; i < result_MedicationKnowledge->monograph_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_monograph, i);
			result_MedicationKnowledge->monograph[i] = *Deserialize_MedicationKnowledge_Monograph(arena, internal);
		}

	}
	cJSON *cjson_ingredient =  cJSON_GetObjectItem(medicationKnowledge, "ingredient");
	if(cjson_ingredient)
	{
		result_MedicationKnowledge->ingredient_count = cJSON_GetArraySize(cjson_ingredient);
		result_MedicationKnowledge->ingredient = PushArray(arena, MedicationKnowledge_Ingredient, result_MedicationKnowledge->ingredient_count);
		for(int i = 0; i < result_MedicationKnowledge->ingredient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_ingredient, i);
			result_MedicationKnowledge->ingredient[i] = *Deserialize_MedicationKnowledge_Ingredient(arena, internal);
		}

	}
	cJSON *cjson_preparationInstruction =  cJSON_GetObjectItem(medicationKnowledge, "preparationInstruction");
	if(cjson_preparationInstruction)
	{
		result_MedicationKnowledge->preparationInstruction = Str8C(cJSON_GetStringValue(cjson_preparationInstruction));
	}
	cJSON *cjson_intendedRoute =  cJSON_GetObjectItem(medicationKnowledge, "intendedRoute");
	if(cjson_intendedRoute)
	{
		result_MedicationKnowledge->intendedRoute_count = cJSON_GetArraySize(cjson_intendedRoute);
		result_MedicationKnowledge->intendedRoute = PushArray(arena, CodeableConcept, result_MedicationKnowledge->intendedRoute_count);
		for(int i = 0; i < result_MedicationKnowledge->intendedRoute_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_intendedRoute, i);
			result_MedicationKnowledge->intendedRoute[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_cost =  cJSON_GetObjectItem(medicationKnowledge, "cost");
	if(cjson_cost)
	{
		result_MedicationKnowledge->cost_count = cJSON_GetArraySize(cjson_cost);
		result_MedicationKnowledge->cost = PushArray(arena, MedicationKnowledge_Cost, result_MedicationKnowledge->cost_count);
		for(int i = 0; i < result_MedicationKnowledge->cost_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_cost, i);
			result_MedicationKnowledge->cost[i] = *Deserialize_MedicationKnowledge_Cost(arena, internal);
		}

	}
	cJSON *cjson_monitoringProgram =  cJSON_GetObjectItem(medicationKnowledge, "monitoringProgram");
	if(cjson_monitoringProgram)
	{
		result_MedicationKnowledge->monitoringProgram_count = cJSON_GetArraySize(cjson_monitoringProgram);
		result_MedicationKnowledge->monitoringProgram = PushArray(arena, MedicationKnowledge_MonitoringProgram, result_MedicationKnowledge->monitoringProgram_count);
		for(int i = 0; i < result_MedicationKnowledge->monitoringProgram_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_monitoringProgram, i);
			result_MedicationKnowledge->monitoringProgram[i] = *Deserialize_MedicationKnowledge_MonitoringProgram(arena, internal);
		}

	}
	cJSON *cjson_administrationGuidelines =  cJSON_GetObjectItem(medicationKnowledge, "administrationGuidelines");
	if(cjson_administrationGuidelines)
	{
		result_MedicationKnowledge->administrationGuidelines_count = cJSON_GetArraySize(cjson_administrationGuidelines);
		result_MedicationKnowledge->administrationGuidelines = PushArray(arena, MedicationKnowledge_AdministrationGuidelines, result_MedicationKnowledge->administrationGuidelines_count);
		for(int i = 0; i < result_MedicationKnowledge->administrationGuidelines_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_administrationGuidelines, i);
			result_MedicationKnowledge->administrationGuidelines[i] = *Deserialize_MedicationKnowledge_AdministrationGuidelines(arena, internal);
		}

	}
	cJSON *cjson_medicineClassification =  cJSON_GetObjectItem(medicationKnowledge, "medicineClassification");
	if(cjson_medicineClassification)
	{
		result_MedicationKnowledge->medicineClassification_count = cJSON_GetArraySize(cjson_medicineClassification);
		result_MedicationKnowledge->medicineClassification = PushArray(arena, MedicationKnowledge_MedicineClassification, result_MedicationKnowledge->medicineClassification_count);
		for(int i = 0; i < result_MedicationKnowledge->medicineClassification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_medicineClassification, i);
			result_MedicationKnowledge->medicineClassification[i] = *Deserialize_MedicationKnowledge_MedicineClassification(arena, internal);
		}

	}
	cJSON *cjson_packaging =  cJSON_GetObjectItem(medicationKnowledge, "packaging");
	if(cjson_packaging)
	{
		result_MedicationKnowledge->packaging = Deserialize_MedicationKnowledge_Packaging(arena, cjson_packaging);
	}
	cJSON *cjson_drugCharacteristic =  cJSON_GetObjectItem(medicationKnowledge, "drugCharacteristic");
	if(cjson_drugCharacteristic)
	{
		result_MedicationKnowledge->drugCharacteristic_count = cJSON_GetArraySize(cjson_drugCharacteristic);
		result_MedicationKnowledge->drugCharacteristic = PushArray(arena, MedicationKnowledge_DrugCharacteristic, result_MedicationKnowledge->drugCharacteristic_count);
		for(int i = 0; i < result_MedicationKnowledge->drugCharacteristic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_drugCharacteristic, i);
			result_MedicationKnowledge->drugCharacteristic[i] = *Deserialize_MedicationKnowledge_DrugCharacteristic(arena, internal);
		}

	}
	cJSON *cjson_contraindication =  cJSON_GetObjectItem(medicationKnowledge, "contraindication");
	if(cjson_contraindication)
	{
		result_MedicationKnowledge->contraindication_count = cJSON_GetArraySize(cjson_contraindication);
		result_MedicationKnowledge->contraindication = PushArray(arena, Reference, result_MedicationKnowledge->contraindication_count);
		for(int i = 0; i < result_MedicationKnowledge->contraindication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contraindication, i);
			result_MedicationKnowledge->contraindication[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_regulatory =  cJSON_GetObjectItem(medicationKnowledge, "regulatory");
	if(cjson_regulatory)
	{
		result_MedicationKnowledge->regulatory_count = cJSON_GetArraySize(cjson_regulatory);
		result_MedicationKnowledge->regulatory = PushArray(arena, MedicationKnowledge_Regulatory, result_MedicationKnowledge->regulatory_count);
		for(int i = 0; i < result_MedicationKnowledge->regulatory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_regulatory, i);
			result_MedicationKnowledge->regulatory[i] = *Deserialize_MedicationKnowledge_Regulatory(arena, internal);
		}

	}
	cJSON *cjson_kinetics =  cJSON_GetObjectItem(medicationKnowledge, "kinetics");
	if(cjson_kinetics)
	{
		result_MedicationKnowledge->kinetics_count = cJSON_GetArraySize(cjson_kinetics);
		result_MedicationKnowledge->kinetics = PushArray(arena, MedicationKnowledge_Kinetics, result_MedicationKnowledge->kinetics_count);
		for(int i = 0; i < result_MedicationKnowledge->kinetics_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_kinetics, i);
			result_MedicationKnowledge->kinetics[i] = *Deserialize_MedicationKnowledge_Kinetics(arena, internal);
		}

	}
	return result_MedicationKnowledge;
}

MedicationKnowledge_RelatedMedicationKnowledge*
Deserialize_MedicationKnowledge_RelatedMedicationKnowledge(Arena *arena, cJSON *medicationKnowledge_RelatedMedicationKnowledge)
{
	MedicationKnowledge_RelatedMedicationKnowledge *result_MedicationKnowledge_RelatedMedicationKnowledge = PushArray(arena, MedicationKnowledge_RelatedMedicationKnowledge, 1);
	result_MedicationKnowledge_RelatedMedicationKnowledge->resourceType = ResourceType::MedicationKnowledge_RelatedMedicationKnowledge;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_RelatedMedicationKnowledge, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_RelatedMedicationKnowledge, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_RelatedMedicationKnowledge->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_RelatedMedicationKnowledge, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_RelatedMedicationKnowledge->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_RelatedMedicationKnowledge->extension = PushArray(arena, Extension, result_MedicationKnowledge_RelatedMedicationKnowledge->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_RelatedMedicationKnowledge->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_RelatedMedicationKnowledge->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_RelatedMedicationKnowledge, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_RelatedMedicationKnowledge->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_RelatedMedicationKnowledge->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_RelatedMedicationKnowledge->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_RelatedMedicationKnowledge->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_RelatedMedicationKnowledge->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_RelatedMedicationKnowledge, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_RelatedMedicationKnowledge->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(medicationKnowledge_RelatedMedicationKnowledge, "reference");
	if(cjson_reference)
	{
		result_MedicationKnowledge_RelatedMedicationKnowledge->reference_count = cJSON_GetArraySize(cjson_reference);
		result_MedicationKnowledge_RelatedMedicationKnowledge->reference = PushArray(arena, Reference, result_MedicationKnowledge_RelatedMedicationKnowledge->reference_count);
		for(int i = 0; i < result_MedicationKnowledge_RelatedMedicationKnowledge->reference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reference, i);
			result_MedicationKnowledge_RelatedMedicationKnowledge->reference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_MedicationKnowledge_RelatedMedicationKnowledge;
}

MedicationKnowledge_Monograph*
Deserialize_MedicationKnowledge_Monograph(Arena *arena, cJSON *medicationKnowledge_Monograph)
{
	MedicationKnowledge_Monograph *result_MedicationKnowledge_Monograph = PushArray(arena, MedicationKnowledge_Monograph, 1);
	result_MedicationKnowledge_Monograph->resourceType = ResourceType::MedicationKnowledge_Monograph;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Monograph, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Monograph, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Monograph->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Monograph, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Monograph->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Monograph->extension = PushArray(arena, Extension, result_MedicationKnowledge_Monograph->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Monograph->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Monograph->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Monograph, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Monograph->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Monograph->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Monograph->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Monograph->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Monograph->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_Monograph, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_Monograph->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(medicationKnowledge_Monograph, "source");
	if(cjson_source)
	{
		result_MedicationKnowledge_Monograph->source = Deserialize_Reference(arena, cjson_source);
	}
	return result_MedicationKnowledge_Monograph;
}

MedicationKnowledge_Ingredient*
Deserialize_MedicationKnowledge_Ingredient(Arena *arena, cJSON *medicationKnowledge_Ingredient)
{
	MedicationKnowledge_Ingredient *result_MedicationKnowledge_Ingredient = PushArray(arena, MedicationKnowledge_Ingredient, 1);
	result_MedicationKnowledge_Ingredient->resourceType = ResourceType::MedicationKnowledge_Ingredient;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Ingredient, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Ingredient, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Ingredient->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Ingredient, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Ingredient->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Ingredient->extension = PushArray(arena, Extension, result_MedicationKnowledge_Ingredient->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Ingredient->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Ingredient->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Ingredient, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Ingredient->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Ingredient->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Ingredient->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Ingredient->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Ingredient->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(medicationKnowledge_Ingredient, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_Ingredient, "valueCodeableConcept");
		result_MedicationKnowledge_Ingredient->item.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationKnowledge_Ingredient->item_type = MedicationKnowledge_Ingredient::ItemType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationKnowledge_Ingredient, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_Ingredient, "valueReference");
		result_MedicationKnowledge_Ingredient->item.valueReference = Deserialize_Reference(arena, item);
		result_MedicationKnowledge_Ingredient->item_type = MedicationKnowledge_Ingredient::ItemType::Reference;
	}


	cJSON *cjson_isActive =  cJSON_GetObjectItem(medicationKnowledge_Ingredient, "isActive");
	if(cjson_isActive)
	{
		result_MedicationKnowledge_Ingredient->isActive = (boolean)cJSON_IsTrue(cjson_isActive);
	}
	cJSON *cjson_strength =  cJSON_GetObjectItem(medicationKnowledge_Ingredient, "strength");
	if(cjson_strength)
	{
		result_MedicationKnowledge_Ingredient->strength = Deserialize_Ratio(arena, cjson_strength);
	}
	return result_MedicationKnowledge_Ingredient;
}

MedicationKnowledge_Cost*
Deserialize_MedicationKnowledge_Cost(Arena *arena, cJSON *medicationKnowledge_Cost)
{
	MedicationKnowledge_Cost *result_MedicationKnowledge_Cost = PushArray(arena, MedicationKnowledge_Cost, 1);
	result_MedicationKnowledge_Cost->resourceType = ResourceType::MedicationKnowledge_Cost;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Cost, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Cost, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Cost->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Cost, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Cost->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Cost->extension = PushArray(arena, Extension, result_MedicationKnowledge_Cost->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Cost->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Cost->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Cost, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Cost->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Cost->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Cost->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Cost->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Cost->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_Cost, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_Cost->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(medicationKnowledge_Cost, "source");
	if(cjson_source)
	{
		result_MedicationKnowledge_Cost->source = Str8C(cJSON_GetStringValue(cjson_source));
	}
	cJSON *cjson_cost =  cJSON_GetObjectItem(medicationKnowledge_Cost, "cost");
	if(cjson_cost)
	{
		result_MedicationKnowledge_Cost->cost = Deserialize_Money(arena, cjson_cost);
	}
	return result_MedicationKnowledge_Cost;
}

MedicationKnowledge_MonitoringProgram*
Deserialize_MedicationKnowledge_MonitoringProgram(Arena *arena, cJSON *medicationKnowledge_MonitoringProgram)
{
	MedicationKnowledge_MonitoringProgram *result_MedicationKnowledge_MonitoringProgram = PushArray(arena, MedicationKnowledge_MonitoringProgram, 1);
	result_MedicationKnowledge_MonitoringProgram->resourceType = ResourceType::MedicationKnowledge_MonitoringProgram;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_MonitoringProgram, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_MonitoringProgram, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_MonitoringProgram->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_MonitoringProgram, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_MonitoringProgram->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_MonitoringProgram->extension = PushArray(arena, Extension, result_MedicationKnowledge_MonitoringProgram->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_MonitoringProgram->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_MonitoringProgram->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_MonitoringProgram, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_MonitoringProgram->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_MonitoringProgram->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_MonitoringProgram->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_MonitoringProgram->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_MonitoringProgram->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_MonitoringProgram, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_MonitoringProgram->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(medicationKnowledge_MonitoringProgram, "name");
	if(cjson_name)
	{
		result_MedicationKnowledge_MonitoringProgram->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	return result_MedicationKnowledge_MonitoringProgram;
}

MedicationKnowledge_AdministrationGuidelines*
Deserialize_MedicationKnowledge_AdministrationGuidelines(Arena *arena, cJSON *medicationKnowledge_AdministrationGuidelines)
{
	MedicationKnowledge_AdministrationGuidelines *result_MedicationKnowledge_AdministrationGuidelines = PushArray(arena, MedicationKnowledge_AdministrationGuidelines, 1);
	result_MedicationKnowledge_AdministrationGuidelines->resourceType = ResourceType::MedicationKnowledge_AdministrationGuidelines;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_AdministrationGuidelines->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_AdministrationGuidelines->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_AdministrationGuidelines->extension = PushArray(arena, Extension, result_MedicationKnowledge_AdministrationGuidelines->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_AdministrationGuidelines->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_AdministrationGuidelines->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_AdministrationGuidelines->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_AdministrationGuidelines->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_AdministrationGuidelines->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_dosage =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "dosage");
	if(cjson_dosage)
	{
		result_MedicationKnowledge_AdministrationGuidelines->dosage_count = cJSON_GetArraySize(cjson_dosage);
		result_MedicationKnowledge_AdministrationGuidelines->dosage = PushArray(arena, MedicationKnowledge_AdministrationGuidelines_Dosage, result_MedicationKnowledge_AdministrationGuidelines->dosage_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines->dosage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dosage, i);
			result_MedicationKnowledge_AdministrationGuidelines->dosage[i] = *Deserialize_MedicationKnowledge_AdministrationGuidelines_Dosage(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(medicationKnowledge_AdministrationGuidelines, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "valueCodeableConcept");
		result_MedicationKnowledge_AdministrationGuidelines->indication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationKnowledge_AdministrationGuidelines->indication_type = MedicationKnowledge_AdministrationGuidelines::IndicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationKnowledge_AdministrationGuidelines, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "valueReference");
		result_MedicationKnowledge_AdministrationGuidelines->indication.valueReference = Deserialize_Reference(arena, item);
		result_MedicationKnowledge_AdministrationGuidelines->indication_type = MedicationKnowledge_AdministrationGuidelines::IndicationType::Reference;
	}


	cJSON *cjson_patientCharacteristics =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines, "patientCharacteristics");
	if(cjson_patientCharacteristics)
	{
		result_MedicationKnowledge_AdministrationGuidelines->patientCharacteristics_count = cJSON_GetArraySize(cjson_patientCharacteristics);
		result_MedicationKnowledge_AdministrationGuidelines->patientCharacteristics = PushArray(arena, MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics, result_MedicationKnowledge_AdministrationGuidelines->patientCharacteristics_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines->patientCharacteristics_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_patientCharacteristics, i);
			result_MedicationKnowledge_AdministrationGuidelines->patientCharacteristics[i] = *Deserialize_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics(arena, internal);
		}

	}
	return result_MedicationKnowledge_AdministrationGuidelines;
}

MedicationKnowledge_AdministrationGuidelines_Dosage*
Deserialize_MedicationKnowledge_AdministrationGuidelines_Dosage(Arena *arena, cJSON *medicationKnowledge_AdministrationGuidelines_Dosage)
{
	MedicationKnowledge_AdministrationGuidelines_Dosage *result_MedicationKnowledge_AdministrationGuidelines_Dosage = PushArray(arena, MedicationKnowledge_AdministrationGuidelines_Dosage, 1);
	result_MedicationKnowledge_AdministrationGuidelines_Dosage->resourceType = ResourceType::MedicationKnowledge_AdministrationGuidelines_Dosage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_Dosage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_Dosage, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_Dosage, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->extension = PushArray(arena, Extension, result_MedicationKnowledge_AdministrationGuidelines_Dosage->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines_Dosage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_AdministrationGuidelines_Dosage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_Dosage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_Dosage, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_dosage =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_Dosage, "dosage");
	if(cjson_dosage)
	{
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->dosage_count = cJSON_GetArraySize(cjson_dosage);
		result_MedicationKnowledge_AdministrationGuidelines_Dosage->dosage = PushArray(arena, Dosage, result_MedicationKnowledge_AdministrationGuidelines_Dosage->dosage_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines_Dosage->dosage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dosage, i);
			result_MedicationKnowledge_AdministrationGuidelines_Dosage->dosage[i] = *Deserialize_Dosage(arena, internal);
		}

	}
	return result_MedicationKnowledge_AdministrationGuidelines_Dosage;
}

MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics*
Deserialize_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics(Arena *arena, cJSON *medicationKnowledge_AdministrationGuidelines_PatientCharacteristics)
{
	MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics *result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics = PushArray(arena, MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics, 1);
	result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->resourceType = ResourceType::MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension = PushArray(arena, Extension, result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "valueCodeableConcept");
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic_type = MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics::CharacteristicType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "valueQuantity");
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic.valueQuantity = Deserialize_Quantity(arena, item);
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic_type = MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics::CharacteristicType::Quantity;
	}


	cJSON *cjson_value =  cJSON_GetObjectItem(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics, "value");
	if(cjson_value)
	{
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value_count = cJSON_GetArraySize(cjson_value);
		result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value = PushArray(arena, fhir_string, result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value_count);
		for(int i = 0; i < result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_value, i);
			result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics;
}

MedicationKnowledge_MedicineClassification*
Deserialize_MedicationKnowledge_MedicineClassification(Arena *arena, cJSON *medicationKnowledge_MedicineClassification)
{
	MedicationKnowledge_MedicineClassification *result_MedicationKnowledge_MedicineClassification = PushArray(arena, MedicationKnowledge_MedicineClassification, 1);
	result_MedicationKnowledge_MedicineClassification->resourceType = ResourceType::MedicationKnowledge_MedicineClassification;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_MedicineClassification, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_MedicineClassification, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_MedicineClassification->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_MedicineClassification, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_MedicineClassification->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_MedicineClassification->extension = PushArray(arena, Extension, result_MedicationKnowledge_MedicineClassification->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_MedicineClassification->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_MedicineClassification->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_MedicineClassification, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_MedicineClassification->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_MedicineClassification->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_MedicineClassification->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_MedicineClassification->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_MedicineClassification->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_MedicineClassification, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_MedicineClassification->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_classification =  cJSON_GetObjectItem(medicationKnowledge_MedicineClassification, "classification");
	if(cjson_classification)
	{
		result_MedicationKnowledge_MedicineClassification->classification_count = cJSON_GetArraySize(cjson_classification);
		result_MedicationKnowledge_MedicineClassification->classification = PushArray(arena, CodeableConcept, result_MedicationKnowledge_MedicineClassification->classification_count);
		for(int i = 0; i < result_MedicationKnowledge_MedicineClassification->classification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_classification, i);
			result_MedicationKnowledge_MedicineClassification->classification[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_MedicationKnowledge_MedicineClassification;
}

MedicationKnowledge_Packaging*
Deserialize_MedicationKnowledge_Packaging(Arena *arena, cJSON *medicationKnowledge_Packaging)
{
	MedicationKnowledge_Packaging *result_MedicationKnowledge_Packaging = PushArray(arena, MedicationKnowledge_Packaging, 1);
	result_MedicationKnowledge_Packaging->resourceType = ResourceType::MedicationKnowledge_Packaging;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Packaging, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Packaging, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Packaging->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Packaging, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Packaging->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Packaging->extension = PushArray(arena, Extension, result_MedicationKnowledge_Packaging->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Packaging->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Packaging->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Packaging, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Packaging->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Packaging->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Packaging->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Packaging->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Packaging->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_Packaging, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_Packaging->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(medicationKnowledge_Packaging, "quantity");
	if(cjson_quantity)
	{
		result_MedicationKnowledge_Packaging->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	return result_MedicationKnowledge_Packaging;
}

MedicationKnowledge_DrugCharacteristic*
Deserialize_MedicationKnowledge_DrugCharacteristic(Arena *arena, cJSON *medicationKnowledge_DrugCharacteristic)
{
	MedicationKnowledge_DrugCharacteristic *result_MedicationKnowledge_DrugCharacteristic = PushArray(arena, MedicationKnowledge_DrugCharacteristic, 1);
	result_MedicationKnowledge_DrugCharacteristic->resourceType = ResourceType::MedicationKnowledge_DrugCharacteristic;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_DrugCharacteristic->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_DrugCharacteristic->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_DrugCharacteristic->extension = PushArray(arena, Extension, result_MedicationKnowledge_DrugCharacteristic->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_DrugCharacteristic->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_DrugCharacteristic->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_DrugCharacteristic->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_DrugCharacteristic->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_DrugCharacteristic->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_DrugCharacteristic->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_DrugCharacteristic->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_DrugCharacteristic->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(medicationKnowledge_DrugCharacteristic, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "valueCodeableConcept");
		result_MedicationKnowledge_DrugCharacteristic->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationKnowledge_DrugCharacteristic->value_type = MedicationKnowledge_DrugCharacteristic::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationKnowledge_DrugCharacteristic, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "valueString");
		result_MedicationKnowledge_DrugCharacteristic->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_MedicationKnowledge_DrugCharacteristic->value_type = MedicationKnowledge_DrugCharacteristic::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(medicationKnowledge_DrugCharacteristic, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "valueQuantity");
		result_MedicationKnowledge_DrugCharacteristic->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_MedicationKnowledge_DrugCharacteristic->value_type = MedicationKnowledge_DrugCharacteristic::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(medicationKnowledge_DrugCharacteristic, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationKnowledge_DrugCharacteristic, "valueBase64Binary");
		result_MedicationKnowledge_DrugCharacteristic->value.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_MedicationKnowledge_DrugCharacteristic->value_type = MedicationKnowledge_DrugCharacteristic::ValueType::fhir_base64Binary;
	}


	return result_MedicationKnowledge_DrugCharacteristic;
}

MedicationKnowledge_Regulatory*
Deserialize_MedicationKnowledge_Regulatory(Arena *arena, cJSON *medicationKnowledge_Regulatory)
{
	MedicationKnowledge_Regulatory *result_MedicationKnowledge_Regulatory = PushArray(arena, MedicationKnowledge_Regulatory, 1);
	result_MedicationKnowledge_Regulatory->resourceType = ResourceType::MedicationKnowledge_Regulatory;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Regulatory->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Regulatory->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Regulatory->extension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Regulatory->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Regulatory->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Regulatory->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Regulatory->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_regulatoryAuthority =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "regulatoryAuthority");
	if(cjson_regulatoryAuthority)
	{
		result_MedicationKnowledge_Regulatory->regulatoryAuthority = Deserialize_Reference(arena, cjson_regulatoryAuthority);
	}
	cJSON *cjson_substitution =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "substitution");
	if(cjson_substitution)
	{
		result_MedicationKnowledge_Regulatory->substitution_count = cJSON_GetArraySize(cjson_substitution);
		result_MedicationKnowledge_Regulatory->substitution = PushArray(arena, MedicationKnowledge_Regulatory_Substitution, result_MedicationKnowledge_Regulatory->substitution_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory->substitution_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_substitution, i);
			result_MedicationKnowledge_Regulatory->substitution[i] = *Deserialize_MedicationKnowledge_Regulatory_Substitution(arena, internal);
		}

	}
	cJSON *cjson_schedule =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "schedule");
	if(cjson_schedule)
	{
		result_MedicationKnowledge_Regulatory->schedule_count = cJSON_GetArraySize(cjson_schedule);
		result_MedicationKnowledge_Regulatory->schedule = PushArray(arena, MedicationKnowledge_Regulatory_Schedule, result_MedicationKnowledge_Regulatory->schedule_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory->schedule_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_schedule, i);
			result_MedicationKnowledge_Regulatory->schedule[i] = *Deserialize_MedicationKnowledge_Regulatory_Schedule(arena, internal);
		}

	}
	cJSON *cjson_maxDispense =  cJSON_GetObjectItem(medicationKnowledge_Regulatory, "maxDispense");
	if(cjson_maxDispense)
	{
		result_MedicationKnowledge_Regulatory->maxDispense = Deserialize_MedicationKnowledge_Regulatory_MaxDispense(arena, cjson_maxDispense);
	}
	return result_MedicationKnowledge_Regulatory;
}

MedicationKnowledge_Regulatory_Substitution*
Deserialize_MedicationKnowledge_Regulatory_Substitution(Arena *arena, cJSON *medicationKnowledge_Regulatory_Substitution)
{
	MedicationKnowledge_Regulatory_Substitution *result_MedicationKnowledge_Regulatory_Substitution = PushArray(arena, MedicationKnowledge_Regulatory_Substitution, 1);
	result_MedicationKnowledge_Regulatory_Substitution->resourceType = ResourceType::MedicationKnowledge_Regulatory_Substitution;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Substitution, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Substitution, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Regulatory_Substitution->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Substitution, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Regulatory_Substitution->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Regulatory_Substitution->extension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory_Substitution->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory_Substitution->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Regulatory_Substitution->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Substitution, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Regulatory_Substitution->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Regulatory_Substitution->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory_Substitution->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory_Substitution->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Regulatory_Substitution->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Substitution, "type");
	if(cjson_type)
	{
		result_MedicationKnowledge_Regulatory_Substitution->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_allowed =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Substitution, "allowed");
	if(cjson_allowed)
	{
		result_MedicationKnowledge_Regulatory_Substitution->allowed = (boolean)cJSON_IsTrue(cjson_allowed);
	}
	return result_MedicationKnowledge_Regulatory_Substitution;
}

MedicationKnowledge_Regulatory_Schedule*
Deserialize_MedicationKnowledge_Regulatory_Schedule(Arena *arena, cJSON *medicationKnowledge_Regulatory_Schedule)
{
	MedicationKnowledge_Regulatory_Schedule *result_MedicationKnowledge_Regulatory_Schedule = PushArray(arena, MedicationKnowledge_Regulatory_Schedule, 1);
	result_MedicationKnowledge_Regulatory_Schedule->resourceType = ResourceType::MedicationKnowledge_Regulatory_Schedule;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Schedule, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Schedule, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Regulatory_Schedule->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Schedule, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Regulatory_Schedule->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Regulatory_Schedule->extension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory_Schedule->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory_Schedule->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Regulatory_Schedule->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Schedule, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Regulatory_Schedule->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Regulatory_Schedule->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory_Schedule->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory_Schedule->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Regulatory_Schedule->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_schedule =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_Schedule, "schedule");
	if(cjson_schedule)
	{
		result_MedicationKnowledge_Regulatory_Schedule->schedule = Deserialize_CodeableConcept(arena, cjson_schedule);
	}
	return result_MedicationKnowledge_Regulatory_Schedule;
}

MedicationKnowledge_Regulatory_MaxDispense*
Deserialize_MedicationKnowledge_Regulatory_MaxDispense(Arena *arena, cJSON *medicationKnowledge_Regulatory_MaxDispense)
{
	MedicationKnowledge_Regulatory_MaxDispense *result_MedicationKnowledge_Regulatory_MaxDispense = PushArray(arena, MedicationKnowledge_Regulatory_MaxDispense, 1);
	result_MedicationKnowledge_Regulatory_MaxDispense->resourceType = ResourceType::MedicationKnowledge_Regulatory_MaxDispense;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_MaxDispense, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_MaxDispense, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Regulatory_MaxDispense->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_MaxDispense, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Regulatory_MaxDispense->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Regulatory_MaxDispense->extension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory_MaxDispense->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory_MaxDispense->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Regulatory_MaxDispense->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_MaxDispense, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Regulatory_MaxDispense->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Regulatory_MaxDispense->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Regulatory_MaxDispense->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Regulatory_MaxDispense->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Regulatory_MaxDispense->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_MaxDispense, "quantity");
	if(cjson_quantity)
	{
		result_MedicationKnowledge_Regulatory_MaxDispense->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(medicationKnowledge_Regulatory_MaxDispense, "period");
	if(cjson_period)
	{
		result_MedicationKnowledge_Regulatory_MaxDispense->period = Deserialize_Duration(arena, cjson_period);
	}
	return result_MedicationKnowledge_Regulatory_MaxDispense;
}

MedicationKnowledge_Kinetics*
Deserialize_MedicationKnowledge_Kinetics(Arena *arena, cJSON *medicationKnowledge_Kinetics)
{
	MedicationKnowledge_Kinetics *result_MedicationKnowledge_Kinetics = PushArray(arena, MedicationKnowledge_Kinetics, 1);
	result_MedicationKnowledge_Kinetics->resourceType = ResourceType::MedicationKnowledge_Kinetics;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationKnowledge_Kinetics, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationKnowledge_Kinetics, "id");
	if(cjson_id)
	{
		result_MedicationKnowledge_Kinetics->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationKnowledge_Kinetics, "extension");
	if(cjson_extension)
	{
		result_MedicationKnowledge_Kinetics->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationKnowledge_Kinetics->extension = PushArray(arena, Extension, result_MedicationKnowledge_Kinetics->extension_count);
		for(int i = 0; i < result_MedicationKnowledge_Kinetics->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationKnowledge_Kinetics->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationKnowledge_Kinetics, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationKnowledge_Kinetics->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationKnowledge_Kinetics->modifierExtension = PushArray(arena, Extension, result_MedicationKnowledge_Kinetics->modifierExtension_count);
		for(int i = 0; i < result_MedicationKnowledge_Kinetics->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationKnowledge_Kinetics->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_areaUnderCurve =  cJSON_GetObjectItem(medicationKnowledge_Kinetics, "areaUnderCurve");
	if(cjson_areaUnderCurve)
	{
		result_MedicationKnowledge_Kinetics->areaUnderCurve_count = cJSON_GetArraySize(cjson_areaUnderCurve);
		result_MedicationKnowledge_Kinetics->areaUnderCurve = PushArray(arena, Quantity, result_MedicationKnowledge_Kinetics->areaUnderCurve_count);
		for(int i = 0; i < result_MedicationKnowledge_Kinetics->areaUnderCurve_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_areaUnderCurve, i);
			result_MedicationKnowledge_Kinetics->areaUnderCurve[i] = *Deserialize_Quantity(arena, internal);
		}

	}
	cJSON *cjson_lethalDose50 =  cJSON_GetObjectItem(medicationKnowledge_Kinetics, "lethalDose50");
	if(cjson_lethalDose50)
	{
		result_MedicationKnowledge_Kinetics->lethalDose50_count = cJSON_GetArraySize(cjson_lethalDose50);
		result_MedicationKnowledge_Kinetics->lethalDose50 = PushArray(arena, Quantity, result_MedicationKnowledge_Kinetics->lethalDose50_count);
		for(int i = 0; i < result_MedicationKnowledge_Kinetics->lethalDose50_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_lethalDose50, i);
			result_MedicationKnowledge_Kinetics->lethalDose50[i] = *Deserialize_Quantity(arena, internal);
		}

	}
	cJSON *cjson_halfLifePeriod =  cJSON_GetObjectItem(medicationKnowledge_Kinetics, "halfLifePeriod");
	if(cjson_halfLifePeriod)
	{
		result_MedicationKnowledge_Kinetics->halfLifePeriod = Deserialize_Duration(arena, cjson_halfLifePeriod);
	}
	return result_MedicationKnowledge_Kinetics;
}

MedicationRequest*
Deserialize_MedicationRequest(Arena *arena, cJSON *medicationRequest)
{
	MedicationRequest *result_MedicationRequest = PushArray(arena, MedicationRequest, 1);
	result_MedicationRequest->resourceType = ResourceType::MedicationRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationRequest, "id");
	if(cjson_id)
	{
		result_MedicationRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicationRequest, "meta");
	if(cjson_meta)
	{
		result_MedicationRequest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicationRequest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicationRequest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicationRequest, "language");
	if(cjson_language)
	{
		result_MedicationRequest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicationRequest, "text");
	if(cjson_text)
	{
		result_MedicationRequest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicationRequest, "contained");
	if(cjson_contained)
	{
		result_MedicationRequest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicationRequest->contained = PushArray(arena, Resource, result_MedicationRequest->contained_count);
		for(int i = 0; i < result_MedicationRequest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicationRequest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationRequest, "extension");
	if(cjson_extension)
	{
		result_MedicationRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationRequest->extension = PushArray(arena, Extension, result_MedicationRequest->extension_count);
		for(int i = 0; i < result_MedicationRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationRequest->modifierExtension = PushArray(arena, Extension, result_MedicationRequest->modifierExtension_count);
		for(int i = 0; i < result_MedicationRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicationRequest, "identifier");
	if(cjson_identifier)
	{
		result_MedicationRequest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicationRequest->identifier = PushArray(arena, Identifier, result_MedicationRequest->identifier_count);
		for(int i = 0; i < result_MedicationRequest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicationRequest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medicationRequest, "status");
	if(cjson_status)
	{
		result_MedicationRequest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(medicationRequest, "statusReason");
	if(cjson_statusReason)
	{
		result_MedicationRequest->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(medicationRequest, "intent");
	if(cjson_intent)
	{
		result_MedicationRequest->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(medicationRequest, "category");
	if(cjson_category)
	{
		result_MedicationRequest->category_count = cJSON_GetArraySize(cjson_category);
		result_MedicationRequest->category = PushArray(arena, CodeableConcept, result_MedicationRequest->category_count);
		for(int i = 0; i < result_MedicationRequest->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_MedicationRequest->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(medicationRequest, "priority");
	if(cjson_priority)
	{
		result_MedicationRequest->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_doNotPerform =  cJSON_GetObjectItem(medicationRequest, "doNotPerform");
	if(cjson_doNotPerform)
	{
		result_MedicationRequest->doNotPerform = (boolean)cJSON_IsTrue(cjson_doNotPerform);
	}
	if((bool)cJSON_HasObjectItem(medicationRequest, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationRequest, "valueBoolean");
		result_MedicationRequest->reported.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_MedicationRequest->reported_type = MedicationRequest::ReportedType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(medicationRequest, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationRequest, "valueReference");
		result_MedicationRequest->reported.valueReference = Deserialize_Reference(arena, item);
		result_MedicationRequest->reported_type = MedicationRequest::ReportedType::Reference;
	}


	if((bool)cJSON_HasObjectItem(medicationRequest, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationRequest, "valueCodeableConcept");
		result_MedicationRequest->medication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationRequest->medication_type = MedicationRequest::MedicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationRequest, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationRequest, "valueReference");
		result_MedicationRequest->medication.valueReference = Deserialize_Reference(arena, item);
		result_MedicationRequest->medication_type = MedicationRequest::MedicationType::Reference;
	}


	cJSON *cjson_subject =  cJSON_GetObjectItem(medicationRequest, "subject");
	if(cjson_subject)
	{
		result_MedicationRequest->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(medicationRequest, "encounter");
	if(cjson_encounter)
	{
		result_MedicationRequest->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_supportingInformation =  cJSON_GetObjectItem(medicationRequest, "supportingInformation");
	if(cjson_supportingInformation)
	{
		result_MedicationRequest->supportingInformation_count = cJSON_GetArraySize(cjson_supportingInformation);
		result_MedicationRequest->supportingInformation = PushArray(arena, Reference, result_MedicationRequest->supportingInformation_count);
		for(int i = 0; i < result_MedicationRequest->supportingInformation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInformation, i);
			result_MedicationRequest->supportingInformation[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_authoredOn =  cJSON_GetObjectItem(medicationRequest, "authoredOn");
	if(cjson_authoredOn)
	{
		result_MedicationRequest->authoredOn = Str8C(cJSON_GetStringValue(cjson_authoredOn));
	}
	cJSON *cjson_requester =  cJSON_GetObjectItem(medicationRequest, "requester");
	if(cjson_requester)
	{
		result_MedicationRequest->requester = Deserialize_Reference(arena, cjson_requester);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(medicationRequest, "performer");
	if(cjson_performer)
	{
		result_MedicationRequest->performer = Deserialize_Reference(arena, cjson_performer);
	}
	cJSON *cjson_performerType =  cJSON_GetObjectItem(medicationRequest, "performerType");
	if(cjson_performerType)
	{
		result_MedicationRequest->performerType = Deserialize_CodeableConcept(arena, cjson_performerType);
	}
	cJSON *cjson_recorder =  cJSON_GetObjectItem(medicationRequest, "recorder");
	if(cjson_recorder)
	{
		result_MedicationRequest->recorder = Deserialize_Reference(arena, cjson_recorder);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(medicationRequest, "reasonCode");
	if(cjson_reasonCode)
	{
		result_MedicationRequest->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_MedicationRequest->reasonCode = PushArray(arena, CodeableConcept, result_MedicationRequest->reasonCode_count);
		for(int i = 0; i < result_MedicationRequest->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_MedicationRequest->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(medicationRequest, "reasonReference");
	if(cjson_reasonReference)
	{
		result_MedicationRequest->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_MedicationRequest->reasonReference = PushArray(arena, Reference, result_MedicationRequest->reasonReference_count);
		for(int i = 0; i < result_MedicationRequest->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_MedicationRequest->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(medicationRequest, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_MedicationRequest->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_MedicationRequest->instantiatesCanonical = PushArray(arena, fhir_canonical, result_MedicationRequest->instantiatesCanonical_count);
		for(int i = 0; i < result_MedicationRequest->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_MedicationRequest->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(medicationRequest, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_MedicationRequest->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_MedicationRequest->instantiatesUri = PushArray(arena, fhir_uri, result_MedicationRequest->instantiatesUri_count);
		for(int i = 0; i < result_MedicationRequest->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_MedicationRequest->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(medicationRequest, "basedOn");
	if(cjson_basedOn)
	{
		result_MedicationRequest->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_MedicationRequest->basedOn = PushArray(arena, Reference, result_MedicationRequest->basedOn_count);
		for(int i = 0; i < result_MedicationRequest->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_MedicationRequest->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_groupIdentifier =  cJSON_GetObjectItem(medicationRequest, "groupIdentifier");
	if(cjson_groupIdentifier)
	{
		result_MedicationRequest->groupIdentifier = Deserialize_Identifier(arena, cjson_groupIdentifier);
	}
	cJSON *cjson_courseOfTherapyType =  cJSON_GetObjectItem(medicationRequest, "courseOfTherapyType");
	if(cjson_courseOfTherapyType)
	{
		result_MedicationRequest->courseOfTherapyType = Deserialize_CodeableConcept(arena, cjson_courseOfTherapyType);
	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(medicationRequest, "insurance");
	if(cjson_insurance)
	{
		result_MedicationRequest->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_MedicationRequest->insurance = PushArray(arena, Reference, result_MedicationRequest->insurance_count);
		for(int i = 0; i < result_MedicationRequest->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_MedicationRequest->insurance[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(medicationRequest, "note");
	if(cjson_note)
	{
		result_MedicationRequest->note_count = cJSON_GetArraySize(cjson_note);
		result_MedicationRequest->note = PushArray(arena, Annotation, result_MedicationRequest->note_count);
		for(int i = 0; i < result_MedicationRequest->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_MedicationRequest->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_dosageInstruction =  cJSON_GetObjectItem(medicationRequest, "dosageInstruction");
	if(cjson_dosageInstruction)
	{
		result_MedicationRequest->dosageInstruction_count = cJSON_GetArraySize(cjson_dosageInstruction);
		result_MedicationRequest->dosageInstruction = PushArray(arena, Dosage, result_MedicationRequest->dosageInstruction_count);
		for(int i = 0; i < result_MedicationRequest->dosageInstruction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dosageInstruction, i);
			result_MedicationRequest->dosageInstruction[i] = *Deserialize_Dosage(arena, internal);
		}

	}
	cJSON *cjson_dispenseRequest =  cJSON_GetObjectItem(medicationRequest, "dispenseRequest");
	if(cjson_dispenseRequest)
	{
		result_MedicationRequest->dispenseRequest = Deserialize_MedicationRequest_DispenseRequest(arena, cjson_dispenseRequest);
	}
	cJSON *cjson_substitution =  cJSON_GetObjectItem(medicationRequest, "substitution");
	if(cjson_substitution)
	{
		result_MedicationRequest->substitution = Deserialize_MedicationRequest_Substitution(arena, cjson_substitution);
	}
	cJSON *cjson_priorPrescription =  cJSON_GetObjectItem(medicationRequest, "priorPrescription");
	if(cjson_priorPrescription)
	{
		result_MedicationRequest->priorPrescription = Deserialize_Reference(arena, cjson_priorPrescription);
	}
	cJSON *cjson_detectedIssue =  cJSON_GetObjectItem(medicationRequest, "detectedIssue");
	if(cjson_detectedIssue)
	{
		result_MedicationRequest->detectedIssue_count = cJSON_GetArraySize(cjson_detectedIssue);
		result_MedicationRequest->detectedIssue = PushArray(arena, Reference, result_MedicationRequest->detectedIssue_count);
		for(int i = 0; i < result_MedicationRequest->detectedIssue_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detectedIssue, i);
			result_MedicationRequest->detectedIssue[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_eventHistory =  cJSON_GetObjectItem(medicationRequest, "eventHistory");
	if(cjson_eventHistory)
	{
		result_MedicationRequest->eventHistory_count = cJSON_GetArraySize(cjson_eventHistory);
		result_MedicationRequest->eventHistory = PushArray(arena, Reference, result_MedicationRequest->eventHistory_count);
		for(int i = 0; i < result_MedicationRequest->eventHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_eventHistory, i);
			result_MedicationRequest->eventHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_MedicationRequest;
}

MedicationRequest_DispenseRequest*
Deserialize_MedicationRequest_DispenseRequest(Arena *arena, cJSON *medicationRequest_DispenseRequest)
{
	MedicationRequest_DispenseRequest *result_MedicationRequest_DispenseRequest = PushArray(arena, MedicationRequest_DispenseRequest, 1);
	result_MedicationRequest_DispenseRequest->resourceType = ResourceType::MedicationRequest_DispenseRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "id");
	if(cjson_id)
	{
		result_MedicationRequest_DispenseRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "extension");
	if(cjson_extension)
	{
		result_MedicationRequest_DispenseRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationRequest_DispenseRequest->extension = PushArray(arena, Extension, result_MedicationRequest_DispenseRequest->extension_count);
		for(int i = 0; i < result_MedicationRequest_DispenseRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationRequest_DispenseRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationRequest_DispenseRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationRequest_DispenseRequest->modifierExtension = PushArray(arena, Extension, result_MedicationRequest_DispenseRequest->modifierExtension_count);
		for(int i = 0; i < result_MedicationRequest_DispenseRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationRequest_DispenseRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_initialFill =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "initialFill");
	if(cjson_initialFill)
	{
		result_MedicationRequest_DispenseRequest->initialFill = Deserialize_MedicationRequest_DispenseRequest_InitialFill(arena, cjson_initialFill);
	}
	cJSON *cjson_dispenseInterval =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "dispenseInterval");
	if(cjson_dispenseInterval)
	{
		result_MedicationRequest_DispenseRequest->dispenseInterval = Deserialize_Duration(arena, cjson_dispenseInterval);
	}
	cJSON *cjson_validityPeriod =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "validityPeriod");
	if(cjson_validityPeriod)
	{
		result_MedicationRequest_DispenseRequest->validityPeriod = Deserialize_Period(arena, cjson_validityPeriod);
	}
	cJSON *cjson_numberOfRepeatsAllowed =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "numberOfRepeatsAllowed");
	if(cjson_numberOfRepeatsAllowed)
	{
		result_MedicationRequest_DispenseRequest->numberOfRepeatsAllowed = (int)cJSON_GetNumberValue(cjson_numberOfRepeatsAllowed);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "quantity");
	if(cjson_quantity)
	{
		result_MedicationRequest_DispenseRequest->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_expectedSupplyDuration =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "expectedSupplyDuration");
	if(cjson_expectedSupplyDuration)
	{
		result_MedicationRequest_DispenseRequest->expectedSupplyDuration = Deserialize_Duration(arena, cjson_expectedSupplyDuration);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(medicationRequest_DispenseRequest, "performer");
	if(cjson_performer)
	{
		result_MedicationRequest_DispenseRequest->performer = Deserialize_Reference(arena, cjson_performer);
	}
	return result_MedicationRequest_DispenseRequest;
}

MedicationRequest_DispenseRequest_InitialFill*
Deserialize_MedicationRequest_DispenseRequest_InitialFill(Arena *arena, cJSON *medicationRequest_DispenseRequest_InitialFill)
{
	MedicationRequest_DispenseRequest_InitialFill *result_MedicationRequest_DispenseRequest_InitialFill = PushArray(arena, MedicationRequest_DispenseRequest_InitialFill, 1);
	result_MedicationRequest_DispenseRequest_InitialFill->resourceType = ResourceType::MedicationRequest_DispenseRequest_InitialFill;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationRequest_DispenseRequest_InitialFill, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationRequest_DispenseRequest_InitialFill, "id");
	if(cjson_id)
	{
		result_MedicationRequest_DispenseRequest_InitialFill->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationRequest_DispenseRequest_InitialFill, "extension");
	if(cjson_extension)
	{
		result_MedicationRequest_DispenseRequest_InitialFill->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationRequest_DispenseRequest_InitialFill->extension = PushArray(arena, Extension, result_MedicationRequest_DispenseRequest_InitialFill->extension_count);
		for(int i = 0; i < result_MedicationRequest_DispenseRequest_InitialFill->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationRequest_DispenseRequest_InitialFill->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationRequest_DispenseRequest_InitialFill, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationRequest_DispenseRequest_InitialFill->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationRequest_DispenseRequest_InitialFill->modifierExtension = PushArray(arena, Extension, result_MedicationRequest_DispenseRequest_InitialFill->modifierExtension_count);
		for(int i = 0; i < result_MedicationRequest_DispenseRequest_InitialFill->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationRequest_DispenseRequest_InitialFill->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(medicationRequest_DispenseRequest_InitialFill, "quantity");
	if(cjson_quantity)
	{
		result_MedicationRequest_DispenseRequest_InitialFill->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_duration =  cJSON_GetObjectItem(medicationRequest_DispenseRequest_InitialFill, "duration");
	if(cjson_duration)
	{
		result_MedicationRequest_DispenseRequest_InitialFill->duration = Deserialize_Duration(arena, cjson_duration);
	}
	return result_MedicationRequest_DispenseRequest_InitialFill;
}

MedicationRequest_Substitution*
Deserialize_MedicationRequest_Substitution(Arena *arena, cJSON *medicationRequest_Substitution)
{
	MedicationRequest_Substitution *result_MedicationRequest_Substitution = PushArray(arena, MedicationRequest_Substitution, 1);
	result_MedicationRequest_Substitution->resourceType = ResourceType::MedicationRequest_Substitution;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationRequest_Substitution, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationRequest_Substitution, "id");
	if(cjson_id)
	{
		result_MedicationRequest_Substitution->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationRequest_Substitution, "extension");
	if(cjson_extension)
	{
		result_MedicationRequest_Substitution->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationRequest_Substitution->extension = PushArray(arena, Extension, result_MedicationRequest_Substitution->extension_count);
		for(int i = 0; i < result_MedicationRequest_Substitution->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationRequest_Substitution->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationRequest_Substitution, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationRequest_Substitution->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationRequest_Substitution->modifierExtension = PushArray(arena, Extension, result_MedicationRequest_Substitution->modifierExtension_count);
		for(int i = 0; i < result_MedicationRequest_Substitution->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationRequest_Substitution->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(medicationRequest_Substitution, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationRequest_Substitution, "valueBoolean");
		result_MedicationRequest_Substitution->allowed.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_MedicationRequest_Substitution->allowed_type = MedicationRequest_Substitution::AllowedType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(medicationRequest_Substitution, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationRequest_Substitution, "valueCodeableConcept");
		result_MedicationRequest_Substitution->allowed.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationRequest_Substitution->allowed_type = MedicationRequest_Substitution::AllowedType::CodeableConcept;
	}


	cJSON *cjson_reason =  cJSON_GetObjectItem(medicationRequest_Substitution, "reason");
	if(cjson_reason)
	{
		result_MedicationRequest_Substitution->reason = Deserialize_CodeableConcept(arena, cjson_reason);
	}
	return result_MedicationRequest_Substitution;
}

MedicationStatement*
Deserialize_MedicationStatement(Arena *arena, cJSON *medicationStatement)
{
	MedicationStatement *result_MedicationStatement = PushArray(arena, MedicationStatement, 1);
	result_MedicationStatement->resourceType = ResourceType::MedicationStatement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicationStatement, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicationStatement, "id");
	if(cjson_id)
	{
		result_MedicationStatement->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicationStatement, "meta");
	if(cjson_meta)
	{
		result_MedicationStatement->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicationStatement, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicationStatement->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicationStatement, "language");
	if(cjson_language)
	{
		result_MedicationStatement->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicationStatement, "text");
	if(cjson_text)
	{
		result_MedicationStatement->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicationStatement, "contained");
	if(cjson_contained)
	{
		result_MedicationStatement->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicationStatement->contained = PushArray(arena, Resource, result_MedicationStatement->contained_count);
		for(int i = 0; i < result_MedicationStatement->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicationStatement->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicationStatement, "extension");
	if(cjson_extension)
	{
		result_MedicationStatement->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicationStatement->extension = PushArray(arena, Extension, result_MedicationStatement->extension_count);
		for(int i = 0; i < result_MedicationStatement->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicationStatement->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicationStatement, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicationStatement->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicationStatement->modifierExtension = PushArray(arena, Extension, result_MedicationStatement->modifierExtension_count);
		for(int i = 0; i < result_MedicationStatement->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicationStatement->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicationStatement, "identifier");
	if(cjson_identifier)
	{
		result_MedicationStatement->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicationStatement->identifier = PushArray(arena, Identifier, result_MedicationStatement->identifier_count);
		for(int i = 0; i < result_MedicationStatement->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicationStatement->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(medicationStatement, "basedOn");
	if(cjson_basedOn)
	{
		result_MedicationStatement->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_MedicationStatement->basedOn = PushArray(arena, Reference, result_MedicationStatement->basedOn_count);
		for(int i = 0; i < result_MedicationStatement->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_MedicationStatement->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(medicationStatement, "partOf");
	if(cjson_partOf)
	{
		result_MedicationStatement->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_MedicationStatement->partOf = PushArray(arena, Reference, result_MedicationStatement->partOf_count);
		for(int i = 0; i < result_MedicationStatement->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_MedicationStatement->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medicationStatement, "status");
	if(cjson_status)
	{
		result_MedicationStatement->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(medicationStatement, "statusReason");
	if(cjson_statusReason)
	{
		result_MedicationStatement->statusReason_count = cJSON_GetArraySize(cjson_statusReason);
		result_MedicationStatement->statusReason = PushArray(arena, CodeableConcept, result_MedicationStatement->statusReason_count);
		for(int i = 0; i < result_MedicationStatement->statusReason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_statusReason, i);
			result_MedicationStatement->statusReason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(medicationStatement, "category");
	if(cjson_category)
	{
		result_MedicationStatement->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	if((bool)cJSON_HasObjectItem(medicationStatement, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationStatement, "valueCodeableConcept");
		result_MedicationStatement->medication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicationStatement->medication_type = MedicationStatement::MedicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicationStatement, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationStatement, "valueReference");
		result_MedicationStatement->medication.valueReference = Deserialize_Reference(arena, item);
		result_MedicationStatement->medication_type = MedicationStatement::MedicationType::Reference;
	}


	cJSON *cjson_subject =  cJSON_GetObjectItem(medicationStatement, "subject");
	if(cjson_subject)
	{
		result_MedicationStatement->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(medicationStatement, "context");
	if(cjson_context)
	{
		result_MedicationStatement->context = Deserialize_Reference(arena, cjson_context);
	}
	if((bool)cJSON_HasObjectItem(medicationStatement, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationStatement, "valueDateTime");
		result_MedicationStatement->effective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_MedicationStatement->effective_type = MedicationStatement::EffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(medicationStatement, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicationStatement, "valuePeriod");
		result_MedicationStatement->effective.valuePeriod = Deserialize_Period(arena, item);
		result_MedicationStatement->effective_type = MedicationStatement::EffectiveType::Period;
	}


	cJSON *cjson_dateAsserted =  cJSON_GetObjectItem(medicationStatement, "dateAsserted");
	if(cjson_dateAsserted)
	{
		result_MedicationStatement->dateAsserted = Str8C(cJSON_GetStringValue(cjson_dateAsserted));
	}
	cJSON *cjson_informationSource =  cJSON_GetObjectItem(medicationStatement, "informationSource");
	if(cjson_informationSource)
	{
		result_MedicationStatement->informationSource = Deserialize_Reference(arena, cjson_informationSource);
	}
	cJSON *cjson_derivedFrom =  cJSON_GetObjectItem(medicationStatement, "derivedFrom");
	if(cjson_derivedFrom)
	{
		result_MedicationStatement->derivedFrom_count = cJSON_GetArraySize(cjson_derivedFrom);
		result_MedicationStatement->derivedFrom = PushArray(arena, Reference, result_MedicationStatement->derivedFrom_count);
		for(int i = 0; i < result_MedicationStatement->derivedFrom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_derivedFrom, i);
			result_MedicationStatement->derivedFrom[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(medicationStatement, "reasonCode");
	if(cjson_reasonCode)
	{
		result_MedicationStatement->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_MedicationStatement->reasonCode = PushArray(arena, CodeableConcept, result_MedicationStatement->reasonCode_count);
		for(int i = 0; i < result_MedicationStatement->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_MedicationStatement->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(medicationStatement, "reasonReference");
	if(cjson_reasonReference)
	{
		result_MedicationStatement->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_MedicationStatement->reasonReference = PushArray(arena, Reference, result_MedicationStatement->reasonReference_count);
		for(int i = 0; i < result_MedicationStatement->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_MedicationStatement->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(medicationStatement, "note");
	if(cjson_note)
	{
		result_MedicationStatement->note_count = cJSON_GetArraySize(cjson_note);
		result_MedicationStatement->note = PushArray(arena, Annotation, result_MedicationStatement->note_count);
		for(int i = 0; i < result_MedicationStatement->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_MedicationStatement->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_dosage =  cJSON_GetObjectItem(medicationStatement, "dosage");
	if(cjson_dosage)
	{
		result_MedicationStatement->dosage_count = cJSON_GetArraySize(cjson_dosage);
		result_MedicationStatement->dosage = PushArray(arena, Dosage, result_MedicationStatement->dosage_count);
		for(int i = 0; i < result_MedicationStatement->dosage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dosage, i);
			result_MedicationStatement->dosage[i] = *Deserialize_Dosage(arena, internal);
		}

	}
	return result_MedicationStatement;
}

MedicinalProduct*
Deserialize_MedicinalProduct(Arena *arena, cJSON *medicinalProduct)
{
	MedicinalProduct *result_MedicinalProduct = PushArray(arena, MedicinalProduct, 1);
	result_MedicinalProduct->resourceType = ResourceType::MedicinalProduct;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProduct, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProduct, "id");
	if(cjson_id)
	{
		result_MedicinalProduct->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProduct, "meta");
	if(cjson_meta)
	{
		result_MedicinalProduct->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProduct, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProduct->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProduct, "language");
	if(cjson_language)
	{
		result_MedicinalProduct->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProduct, "text");
	if(cjson_text)
	{
		result_MedicinalProduct->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProduct, "contained");
	if(cjson_contained)
	{
		result_MedicinalProduct->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProduct->contained = PushArray(arena, Resource, result_MedicinalProduct->contained_count);
		for(int i = 0; i < result_MedicinalProduct->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProduct->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProduct, "extension");
	if(cjson_extension)
	{
		result_MedicinalProduct->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProduct->extension = PushArray(arena, Extension, result_MedicinalProduct->extension_count);
		for(int i = 0; i < result_MedicinalProduct->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProduct->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProduct, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProduct->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProduct->modifierExtension = PushArray(arena, Extension, result_MedicinalProduct->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProduct->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProduct->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProduct, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProduct->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicinalProduct->identifier = PushArray(arena, Identifier, result_MedicinalProduct->identifier_count);
		for(int i = 0; i < result_MedicinalProduct->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicinalProduct->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicinalProduct, "type");
	if(cjson_type)
	{
		result_MedicinalProduct->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_domain =  cJSON_GetObjectItem(medicinalProduct, "domain");
	if(cjson_domain)
	{
		result_MedicinalProduct->domain = Deserialize_Coding(arena, cjson_domain);
	}
	cJSON *cjson_combinedPharmaceuticalDoseForm =  cJSON_GetObjectItem(medicinalProduct, "combinedPharmaceuticalDoseForm");
	if(cjson_combinedPharmaceuticalDoseForm)
	{
		result_MedicinalProduct->combinedPharmaceuticalDoseForm = Deserialize_CodeableConcept(arena, cjson_combinedPharmaceuticalDoseForm);
	}
	cJSON *cjson_legalStatusOfSupply =  cJSON_GetObjectItem(medicinalProduct, "legalStatusOfSupply");
	if(cjson_legalStatusOfSupply)
	{
		result_MedicinalProduct->legalStatusOfSupply = Deserialize_CodeableConcept(arena, cjson_legalStatusOfSupply);
	}
	cJSON *cjson_additionalMonitoringIndicator =  cJSON_GetObjectItem(medicinalProduct, "additionalMonitoringIndicator");
	if(cjson_additionalMonitoringIndicator)
	{
		result_MedicinalProduct->additionalMonitoringIndicator = Deserialize_CodeableConcept(arena, cjson_additionalMonitoringIndicator);
	}
	cJSON *cjson_specialMeasures =  cJSON_GetObjectItem(medicinalProduct, "specialMeasures");
	if(cjson_specialMeasures)
	{
		result_MedicinalProduct->specialMeasures_count = cJSON_GetArraySize(cjson_specialMeasures);
		result_MedicinalProduct->specialMeasures = PushArray(arena, fhir_string, result_MedicinalProduct->specialMeasures_count);
		for(int i = 0; i < result_MedicinalProduct->specialMeasures_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialMeasures, i);
			result_MedicinalProduct->specialMeasures[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_paediatricUseIndicator =  cJSON_GetObjectItem(medicinalProduct, "paediatricUseIndicator");
	if(cjson_paediatricUseIndicator)
	{
		result_MedicinalProduct->paediatricUseIndicator = Deserialize_CodeableConcept(arena, cjson_paediatricUseIndicator);
	}
	cJSON *cjson_productClassification =  cJSON_GetObjectItem(medicinalProduct, "productClassification");
	if(cjson_productClassification)
	{
		result_MedicinalProduct->productClassification_count = cJSON_GetArraySize(cjson_productClassification);
		result_MedicinalProduct->productClassification = PushArray(arena, CodeableConcept, result_MedicinalProduct->productClassification_count);
		for(int i = 0; i < result_MedicinalProduct->productClassification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_productClassification, i);
			result_MedicinalProduct->productClassification[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_marketingStatus =  cJSON_GetObjectItem(medicinalProduct, "marketingStatus");
	if(cjson_marketingStatus)
	{
		result_MedicinalProduct->marketingStatus_count = cJSON_GetArraySize(cjson_marketingStatus);
		result_MedicinalProduct->marketingStatus = PushArray(arena, MarketingStatus, result_MedicinalProduct->marketingStatus_count);
		for(int i = 0; i < result_MedicinalProduct->marketingStatus_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_marketingStatus, i);
			result_MedicinalProduct->marketingStatus[i] = *Deserialize_MarketingStatus(arena, internal);
		}

	}
	cJSON *cjson_pharmaceuticalProduct =  cJSON_GetObjectItem(medicinalProduct, "pharmaceuticalProduct");
	if(cjson_pharmaceuticalProduct)
	{
		result_MedicinalProduct->pharmaceuticalProduct_count = cJSON_GetArraySize(cjson_pharmaceuticalProduct);
		result_MedicinalProduct->pharmaceuticalProduct = PushArray(arena, Reference, result_MedicinalProduct->pharmaceuticalProduct_count);
		for(int i = 0; i < result_MedicinalProduct->pharmaceuticalProduct_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_pharmaceuticalProduct, i);
			result_MedicinalProduct->pharmaceuticalProduct[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_packagedMedicinalProduct =  cJSON_GetObjectItem(medicinalProduct, "packagedMedicinalProduct");
	if(cjson_packagedMedicinalProduct)
	{
		result_MedicinalProduct->packagedMedicinalProduct_count = cJSON_GetArraySize(cjson_packagedMedicinalProduct);
		result_MedicinalProduct->packagedMedicinalProduct = PushArray(arena, Reference, result_MedicinalProduct->packagedMedicinalProduct_count);
		for(int i = 0; i < result_MedicinalProduct->packagedMedicinalProduct_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_packagedMedicinalProduct, i);
			result_MedicinalProduct->packagedMedicinalProduct[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_attachedDocument =  cJSON_GetObjectItem(medicinalProduct, "attachedDocument");
	if(cjson_attachedDocument)
	{
		result_MedicinalProduct->attachedDocument_count = cJSON_GetArraySize(cjson_attachedDocument);
		result_MedicinalProduct->attachedDocument = PushArray(arena, Reference, result_MedicinalProduct->attachedDocument_count);
		for(int i = 0; i < result_MedicinalProduct->attachedDocument_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_attachedDocument, i);
			result_MedicinalProduct->attachedDocument[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_masterFile =  cJSON_GetObjectItem(medicinalProduct, "masterFile");
	if(cjson_masterFile)
	{
		result_MedicinalProduct->masterFile_count = cJSON_GetArraySize(cjson_masterFile);
		result_MedicinalProduct->masterFile = PushArray(arena, Reference, result_MedicinalProduct->masterFile_count);
		for(int i = 0; i < result_MedicinalProduct->masterFile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_masterFile, i);
			result_MedicinalProduct->masterFile[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(medicinalProduct, "contact");
	if(cjson_contact)
	{
		result_MedicinalProduct->contact_count = cJSON_GetArraySize(cjson_contact);
		result_MedicinalProduct->contact = PushArray(arena, Reference, result_MedicinalProduct->contact_count);
		for(int i = 0; i < result_MedicinalProduct->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_MedicinalProduct->contact[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_clinicalTrial =  cJSON_GetObjectItem(medicinalProduct, "clinicalTrial");
	if(cjson_clinicalTrial)
	{
		result_MedicinalProduct->clinicalTrial_count = cJSON_GetArraySize(cjson_clinicalTrial);
		result_MedicinalProduct->clinicalTrial = PushArray(arena, Reference, result_MedicinalProduct->clinicalTrial_count);
		for(int i = 0; i < result_MedicinalProduct->clinicalTrial_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_clinicalTrial, i);
			result_MedicinalProduct->clinicalTrial[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(medicinalProduct, "name");
	if(cjson_name)
	{
		result_MedicinalProduct->name_count = cJSON_GetArraySize(cjson_name);
		result_MedicinalProduct->name = PushArray(arena, MedicinalProduct_Name, result_MedicinalProduct->name_count);
		for(int i = 0; i < result_MedicinalProduct->name_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_name, i);
			result_MedicinalProduct->name[i] = *Deserialize_MedicinalProduct_Name(arena, internal);
		}

	}
	cJSON *cjson_crossReference =  cJSON_GetObjectItem(medicinalProduct, "crossReference");
	if(cjson_crossReference)
	{
		result_MedicinalProduct->crossReference_count = cJSON_GetArraySize(cjson_crossReference);
		result_MedicinalProduct->crossReference = PushArray(arena, Identifier, result_MedicinalProduct->crossReference_count);
		for(int i = 0; i < result_MedicinalProduct->crossReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_crossReference, i);
			result_MedicinalProduct->crossReference[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_manufacturingBusinessOperation =  cJSON_GetObjectItem(medicinalProduct, "manufacturingBusinessOperation");
	if(cjson_manufacturingBusinessOperation)
	{
		result_MedicinalProduct->manufacturingBusinessOperation_count = cJSON_GetArraySize(cjson_manufacturingBusinessOperation);
		result_MedicinalProduct->manufacturingBusinessOperation = PushArray(arena, MedicinalProduct_ManufacturingBusinessOperation, result_MedicinalProduct->manufacturingBusinessOperation_count);
		for(int i = 0; i < result_MedicinalProduct->manufacturingBusinessOperation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manufacturingBusinessOperation, i);
			result_MedicinalProduct->manufacturingBusinessOperation[i] = *Deserialize_MedicinalProduct_ManufacturingBusinessOperation(arena, internal);
		}

	}
	cJSON *cjson_specialDesignation =  cJSON_GetObjectItem(medicinalProduct, "specialDesignation");
	if(cjson_specialDesignation)
	{
		result_MedicinalProduct->specialDesignation_count = cJSON_GetArraySize(cjson_specialDesignation);
		result_MedicinalProduct->specialDesignation = PushArray(arena, MedicinalProduct_SpecialDesignation, result_MedicinalProduct->specialDesignation_count);
		for(int i = 0; i < result_MedicinalProduct->specialDesignation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialDesignation, i);
			result_MedicinalProduct->specialDesignation[i] = *Deserialize_MedicinalProduct_SpecialDesignation(arena, internal);
		}

	}
	return result_MedicinalProduct;
}

MedicinalProduct_Name*
Deserialize_MedicinalProduct_Name(Arena *arena, cJSON *medicinalProduct_Name)
{
	MedicinalProduct_Name *result_MedicinalProduct_Name = PushArray(arena, MedicinalProduct_Name, 1);
	result_MedicinalProduct_Name->resourceType = ResourceType::MedicinalProduct_Name;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProduct_Name, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProduct_Name, "id");
	if(cjson_id)
	{
		result_MedicinalProduct_Name->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProduct_Name, "extension");
	if(cjson_extension)
	{
		result_MedicinalProduct_Name->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProduct_Name->extension = PushArray(arena, Extension, result_MedicinalProduct_Name->extension_count);
		for(int i = 0; i < result_MedicinalProduct_Name->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProduct_Name->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProduct_Name, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProduct_Name->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProduct_Name->modifierExtension = PushArray(arena, Extension, result_MedicinalProduct_Name->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProduct_Name->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProduct_Name->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_productName =  cJSON_GetObjectItem(medicinalProduct_Name, "productName");
	if(cjson_productName)
	{
		result_MedicinalProduct_Name->productName = Str8C(cJSON_GetStringValue(cjson_productName));
	}
	cJSON *cjson_namePart =  cJSON_GetObjectItem(medicinalProduct_Name, "namePart");
	if(cjson_namePart)
	{
		result_MedicinalProduct_Name->namePart_count = cJSON_GetArraySize(cjson_namePart);
		result_MedicinalProduct_Name->namePart = PushArray(arena, MedicinalProduct_Name_NamePart, result_MedicinalProduct_Name->namePart_count);
		for(int i = 0; i < result_MedicinalProduct_Name->namePart_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_namePart, i);
			result_MedicinalProduct_Name->namePart[i] = *Deserialize_MedicinalProduct_Name_NamePart(arena, internal);
		}

	}
	cJSON *cjson_countryLanguage =  cJSON_GetObjectItem(medicinalProduct_Name, "countryLanguage");
	if(cjson_countryLanguage)
	{
		result_MedicinalProduct_Name->countryLanguage_count = cJSON_GetArraySize(cjson_countryLanguage);
		result_MedicinalProduct_Name->countryLanguage = PushArray(arena, MedicinalProduct_Name_CountryLanguage, result_MedicinalProduct_Name->countryLanguage_count);
		for(int i = 0; i < result_MedicinalProduct_Name->countryLanguage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_countryLanguage, i);
			result_MedicinalProduct_Name->countryLanguage[i] = *Deserialize_MedicinalProduct_Name_CountryLanguage(arena, internal);
		}

	}
	return result_MedicinalProduct_Name;
}

MedicinalProduct_Name_NamePart*
Deserialize_MedicinalProduct_Name_NamePart(Arena *arena, cJSON *medicinalProduct_Name_NamePart)
{
	MedicinalProduct_Name_NamePart *result_MedicinalProduct_Name_NamePart = PushArray(arena, MedicinalProduct_Name_NamePart, 1);
	result_MedicinalProduct_Name_NamePart->resourceType = ResourceType::MedicinalProduct_Name_NamePart;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProduct_Name_NamePart, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProduct_Name_NamePart, "id");
	if(cjson_id)
	{
		result_MedicinalProduct_Name_NamePart->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProduct_Name_NamePart, "extension");
	if(cjson_extension)
	{
		result_MedicinalProduct_Name_NamePart->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProduct_Name_NamePart->extension = PushArray(arena, Extension, result_MedicinalProduct_Name_NamePart->extension_count);
		for(int i = 0; i < result_MedicinalProduct_Name_NamePart->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProduct_Name_NamePart->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProduct_Name_NamePart, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProduct_Name_NamePart->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProduct_Name_NamePart->modifierExtension = PushArray(arena, Extension, result_MedicinalProduct_Name_NamePart->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProduct_Name_NamePart->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProduct_Name_NamePart->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_part =  cJSON_GetObjectItem(medicinalProduct_Name_NamePart, "part");
	if(cjson_part)
	{
		result_MedicinalProduct_Name_NamePart->part = Str8C(cJSON_GetStringValue(cjson_part));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicinalProduct_Name_NamePart, "type");
	if(cjson_type)
	{
		result_MedicinalProduct_Name_NamePart->type = Deserialize_Coding(arena, cjson_type);
	}
	return result_MedicinalProduct_Name_NamePart;
}

MedicinalProduct_Name_CountryLanguage*
Deserialize_MedicinalProduct_Name_CountryLanguage(Arena *arena, cJSON *medicinalProduct_Name_CountryLanguage)
{
	MedicinalProduct_Name_CountryLanguage *result_MedicinalProduct_Name_CountryLanguage = PushArray(arena, MedicinalProduct_Name_CountryLanguage, 1);
	result_MedicinalProduct_Name_CountryLanguage->resourceType = ResourceType::MedicinalProduct_Name_CountryLanguage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProduct_Name_CountryLanguage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProduct_Name_CountryLanguage, "id");
	if(cjson_id)
	{
		result_MedicinalProduct_Name_CountryLanguage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProduct_Name_CountryLanguage, "extension");
	if(cjson_extension)
	{
		result_MedicinalProduct_Name_CountryLanguage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProduct_Name_CountryLanguage->extension = PushArray(arena, Extension, result_MedicinalProduct_Name_CountryLanguage->extension_count);
		for(int i = 0; i < result_MedicinalProduct_Name_CountryLanguage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProduct_Name_CountryLanguage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProduct_Name_CountryLanguage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProduct_Name_CountryLanguage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProduct_Name_CountryLanguage->modifierExtension = PushArray(arena, Extension, result_MedicinalProduct_Name_CountryLanguage->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProduct_Name_CountryLanguage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProduct_Name_CountryLanguage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_country =  cJSON_GetObjectItem(medicinalProduct_Name_CountryLanguage, "country");
	if(cjson_country)
	{
		result_MedicinalProduct_Name_CountryLanguage->country = Deserialize_CodeableConcept(arena, cjson_country);
	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(medicinalProduct_Name_CountryLanguage, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_MedicinalProduct_Name_CountryLanguage->jurisdiction = Deserialize_CodeableConcept(arena, cjson_jurisdiction);
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProduct_Name_CountryLanguage, "language");
	if(cjson_language)
	{
		result_MedicinalProduct_Name_CountryLanguage->language = Deserialize_CodeableConcept(arena, cjson_language);
	}
	return result_MedicinalProduct_Name_CountryLanguage;
}

MedicinalProduct_ManufacturingBusinessOperation*
Deserialize_MedicinalProduct_ManufacturingBusinessOperation(Arena *arena, cJSON *medicinalProduct_ManufacturingBusinessOperation)
{
	MedicinalProduct_ManufacturingBusinessOperation *result_MedicinalProduct_ManufacturingBusinessOperation = PushArray(arena, MedicinalProduct_ManufacturingBusinessOperation, 1);
	result_MedicinalProduct_ManufacturingBusinessOperation->resourceType = ResourceType::MedicinalProduct_ManufacturingBusinessOperation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "id");
	if(cjson_id)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "extension");
	if(cjson_extension)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProduct_ManufacturingBusinessOperation->extension = PushArray(arena, Extension, result_MedicinalProduct_ManufacturingBusinessOperation->extension_count);
		for(int i = 0; i < result_MedicinalProduct_ManufacturingBusinessOperation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProduct_ManufacturingBusinessOperation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProduct_ManufacturingBusinessOperation->modifierExtension = PushArray(arena, Extension, result_MedicinalProduct_ManufacturingBusinessOperation->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProduct_ManufacturingBusinessOperation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProduct_ManufacturingBusinessOperation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_operationType =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "operationType");
	if(cjson_operationType)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->operationType = Deserialize_CodeableConcept(arena, cjson_operationType);
	}
	cJSON *cjson_authorisationReferenceNumber =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "authorisationReferenceNumber");
	if(cjson_authorisationReferenceNumber)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->authorisationReferenceNumber = Deserialize_Identifier(arena, cjson_authorisationReferenceNumber);
	}
	cJSON *cjson_effectiveDate =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "effectiveDate");
	if(cjson_effectiveDate)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->effectiveDate = Str8C(cJSON_GetStringValue(cjson_effectiveDate));
	}
	cJSON *cjson_confidentialityIndicator =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "confidentialityIndicator");
	if(cjson_confidentialityIndicator)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->confidentialityIndicator = Deserialize_CodeableConcept(arena, cjson_confidentialityIndicator);
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "manufacturer");
	if(cjson_manufacturer)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->manufacturer_count = cJSON_GetArraySize(cjson_manufacturer);
		result_MedicinalProduct_ManufacturingBusinessOperation->manufacturer = PushArray(arena, Reference, result_MedicinalProduct_ManufacturingBusinessOperation->manufacturer_count);
		for(int i = 0; i < result_MedicinalProduct_ManufacturingBusinessOperation->manufacturer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manufacturer, i);
			result_MedicinalProduct_ManufacturingBusinessOperation->manufacturer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_regulator =  cJSON_GetObjectItem(medicinalProduct_ManufacturingBusinessOperation, "regulator");
	if(cjson_regulator)
	{
		result_MedicinalProduct_ManufacturingBusinessOperation->regulator = Deserialize_Reference(arena, cjson_regulator);
	}
	return result_MedicinalProduct_ManufacturingBusinessOperation;
}

MedicinalProduct_SpecialDesignation*
Deserialize_MedicinalProduct_SpecialDesignation(Arena *arena, cJSON *medicinalProduct_SpecialDesignation)
{
	MedicinalProduct_SpecialDesignation *result_MedicinalProduct_SpecialDesignation = PushArray(arena, MedicinalProduct_SpecialDesignation, 1);
	result_MedicinalProduct_SpecialDesignation->resourceType = ResourceType::MedicinalProduct_SpecialDesignation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "id");
	if(cjson_id)
	{
		result_MedicinalProduct_SpecialDesignation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "extension");
	if(cjson_extension)
	{
		result_MedicinalProduct_SpecialDesignation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProduct_SpecialDesignation->extension = PushArray(arena, Extension, result_MedicinalProduct_SpecialDesignation->extension_count);
		for(int i = 0; i < result_MedicinalProduct_SpecialDesignation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProduct_SpecialDesignation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProduct_SpecialDesignation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProduct_SpecialDesignation->modifierExtension = PushArray(arena, Extension, result_MedicinalProduct_SpecialDesignation->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProduct_SpecialDesignation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProduct_SpecialDesignation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProduct_SpecialDesignation->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicinalProduct_SpecialDesignation->identifier = PushArray(arena, Identifier, result_MedicinalProduct_SpecialDesignation->identifier_count);
		for(int i = 0; i < result_MedicinalProduct_SpecialDesignation->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicinalProduct_SpecialDesignation->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "type");
	if(cjson_type)
	{
		result_MedicinalProduct_SpecialDesignation->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_intendedUse =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "intendedUse");
	if(cjson_intendedUse)
	{
		result_MedicinalProduct_SpecialDesignation->intendedUse = Deserialize_CodeableConcept(arena, cjson_intendedUse);
	}
	if((bool)cJSON_HasObjectItem(medicinalProduct_SpecialDesignation, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "valueCodeableConcept");
		result_MedicinalProduct_SpecialDesignation->indication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicinalProduct_SpecialDesignation->indication_type = MedicinalProduct_SpecialDesignation::IndicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicinalProduct_SpecialDesignation, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "valueReference");
		result_MedicinalProduct_SpecialDesignation->indication.valueReference = Deserialize_Reference(arena, item);
		result_MedicinalProduct_SpecialDesignation->indication_type = MedicinalProduct_SpecialDesignation::IndicationType::Reference;
	}


	cJSON *cjson_status =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "status");
	if(cjson_status)
	{
		result_MedicinalProduct_SpecialDesignation->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "date");
	if(cjson_date)
	{
		result_MedicinalProduct_SpecialDesignation->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_species =  cJSON_GetObjectItem(medicinalProduct_SpecialDesignation, "species");
	if(cjson_species)
	{
		result_MedicinalProduct_SpecialDesignation->species = Deserialize_CodeableConcept(arena, cjson_species);
	}
	return result_MedicinalProduct_SpecialDesignation;
}

MedicinalProductAuthorization*
Deserialize_MedicinalProductAuthorization(Arena *arena, cJSON *medicinalProductAuthorization)
{
	MedicinalProductAuthorization *result_MedicinalProductAuthorization = PushArray(arena, MedicinalProductAuthorization, 1);
	result_MedicinalProductAuthorization->resourceType = ResourceType::MedicinalProductAuthorization;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductAuthorization, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductAuthorization, "id");
	if(cjson_id)
	{
		result_MedicinalProductAuthorization->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductAuthorization, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductAuthorization->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductAuthorization, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductAuthorization->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductAuthorization, "language");
	if(cjson_language)
	{
		result_MedicinalProductAuthorization->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductAuthorization, "text");
	if(cjson_text)
	{
		result_MedicinalProductAuthorization->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductAuthorization, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductAuthorization->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductAuthorization->contained = PushArray(arena, Resource, result_MedicinalProductAuthorization->contained_count);
		for(int i = 0; i < result_MedicinalProductAuthorization->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductAuthorization->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductAuthorization, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductAuthorization->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductAuthorization->extension = PushArray(arena, Extension, result_MedicinalProductAuthorization->extension_count);
		for(int i = 0; i < result_MedicinalProductAuthorization->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductAuthorization->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductAuthorization, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductAuthorization->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductAuthorization->modifierExtension = PushArray(arena, Extension, result_MedicinalProductAuthorization->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductAuthorization->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductAuthorization->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProductAuthorization, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProductAuthorization->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicinalProductAuthorization->identifier = PushArray(arena, Identifier, result_MedicinalProductAuthorization->identifier_count);
		for(int i = 0; i < result_MedicinalProductAuthorization->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicinalProductAuthorization->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(medicinalProductAuthorization, "subject");
	if(cjson_subject)
	{
		result_MedicinalProductAuthorization->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_country =  cJSON_GetObjectItem(medicinalProductAuthorization, "country");
	if(cjson_country)
	{
		result_MedicinalProductAuthorization->country_count = cJSON_GetArraySize(cjson_country);
		result_MedicinalProductAuthorization->country = PushArray(arena, CodeableConcept, result_MedicinalProductAuthorization->country_count);
		for(int i = 0; i < result_MedicinalProductAuthorization->country_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_country, i);
			result_MedicinalProductAuthorization->country[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(medicinalProductAuthorization, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_MedicinalProductAuthorization->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_MedicinalProductAuthorization->jurisdiction = PushArray(arena, CodeableConcept, result_MedicinalProductAuthorization->jurisdiction_count);
		for(int i = 0; i < result_MedicinalProductAuthorization->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_MedicinalProductAuthorization->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medicinalProductAuthorization, "status");
	if(cjson_status)
	{
		result_MedicinalProductAuthorization->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_statusDate =  cJSON_GetObjectItem(medicinalProductAuthorization, "statusDate");
	if(cjson_statusDate)
	{
		result_MedicinalProductAuthorization->statusDate = Str8C(cJSON_GetStringValue(cjson_statusDate));
	}
	cJSON *cjson_restoreDate =  cJSON_GetObjectItem(medicinalProductAuthorization, "restoreDate");
	if(cjson_restoreDate)
	{
		result_MedicinalProductAuthorization->restoreDate = Str8C(cJSON_GetStringValue(cjson_restoreDate));
	}
	cJSON *cjson_validityPeriod =  cJSON_GetObjectItem(medicinalProductAuthorization, "validityPeriod");
	if(cjson_validityPeriod)
	{
		result_MedicinalProductAuthorization->validityPeriod = Deserialize_Period(arena, cjson_validityPeriod);
	}
	cJSON *cjson_dataExclusivityPeriod =  cJSON_GetObjectItem(medicinalProductAuthorization, "dataExclusivityPeriod");
	if(cjson_dataExclusivityPeriod)
	{
		result_MedicinalProductAuthorization->dataExclusivityPeriod = Deserialize_Period(arena, cjson_dataExclusivityPeriod);
	}
	cJSON *cjson_dateOfFirstAuthorization =  cJSON_GetObjectItem(medicinalProductAuthorization, "dateOfFirstAuthorization");
	if(cjson_dateOfFirstAuthorization)
	{
		result_MedicinalProductAuthorization->dateOfFirstAuthorization = Str8C(cJSON_GetStringValue(cjson_dateOfFirstAuthorization));
	}
	cJSON *cjson_internationalBirthDate =  cJSON_GetObjectItem(medicinalProductAuthorization, "internationalBirthDate");
	if(cjson_internationalBirthDate)
	{
		result_MedicinalProductAuthorization->internationalBirthDate = Str8C(cJSON_GetStringValue(cjson_internationalBirthDate));
	}
	cJSON *cjson_legalBasis =  cJSON_GetObjectItem(medicinalProductAuthorization, "legalBasis");
	if(cjson_legalBasis)
	{
		result_MedicinalProductAuthorization->legalBasis = Deserialize_CodeableConcept(arena, cjson_legalBasis);
	}
	cJSON *cjson_jurisdictionalAuthorization =  cJSON_GetObjectItem(medicinalProductAuthorization, "jurisdictionalAuthorization");
	if(cjson_jurisdictionalAuthorization)
	{
		result_MedicinalProductAuthorization->jurisdictionalAuthorization_count = cJSON_GetArraySize(cjson_jurisdictionalAuthorization);
		result_MedicinalProductAuthorization->jurisdictionalAuthorization = PushArray(arena, MedicinalProductAuthorization_JurisdictionalAuthorization, result_MedicinalProductAuthorization->jurisdictionalAuthorization_count);
		for(int i = 0; i < result_MedicinalProductAuthorization->jurisdictionalAuthorization_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdictionalAuthorization, i);
			result_MedicinalProductAuthorization->jurisdictionalAuthorization[i] = *Deserialize_MedicinalProductAuthorization_JurisdictionalAuthorization(arena, internal);
		}

	}
	cJSON *cjson_holder =  cJSON_GetObjectItem(medicinalProductAuthorization, "holder");
	if(cjson_holder)
	{
		result_MedicinalProductAuthorization->holder = Deserialize_Reference(arena, cjson_holder);
	}
	cJSON *cjson_regulator =  cJSON_GetObjectItem(medicinalProductAuthorization, "regulator");
	if(cjson_regulator)
	{
		result_MedicinalProductAuthorization->regulator = Deserialize_Reference(arena, cjson_regulator);
	}
	cJSON *cjson_procedure =  cJSON_GetObjectItem(medicinalProductAuthorization, "procedure");
	if(cjson_procedure)
	{
		result_MedicinalProductAuthorization->procedure = Deserialize_MedicinalProductAuthorization_Procedure(arena, cjson_procedure);
	}
	return result_MedicinalProductAuthorization;
}

MedicinalProductAuthorization_JurisdictionalAuthorization*
Deserialize_MedicinalProductAuthorization_JurisdictionalAuthorization(Arena *arena, cJSON *medicinalProductAuthorization_JurisdictionalAuthorization)
{
	MedicinalProductAuthorization_JurisdictionalAuthorization *result_MedicinalProductAuthorization_JurisdictionalAuthorization = PushArray(arena, MedicinalProductAuthorization_JurisdictionalAuthorization, 1);
	result_MedicinalProductAuthorization_JurisdictionalAuthorization->resourceType = ResourceType::MedicinalProductAuthorization_JurisdictionalAuthorization;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "id");
	if(cjson_id)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->extension = PushArray(arena, Extension, result_MedicinalProductAuthorization_JurisdictionalAuthorization->extension_count);
		for(int i = 0; i < result_MedicinalProductAuthorization_JurisdictionalAuthorization->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductAuthorization_JurisdictionalAuthorization->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension = PushArray(arena, Extension, result_MedicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->identifier = PushArray(arena, Identifier, result_MedicinalProductAuthorization_JurisdictionalAuthorization->identifier_count);
		for(int i = 0; i < result_MedicinalProductAuthorization_JurisdictionalAuthorization->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicinalProductAuthorization_JurisdictionalAuthorization->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_country =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "country");
	if(cjson_country)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->country = Deserialize_CodeableConcept(arena, cjson_country);
	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction = PushArray(arena, CodeableConcept, result_MedicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction_count);
		for(int i = 0; i < result_MedicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_MedicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_legalStatusOfSupply =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "legalStatusOfSupply");
	if(cjson_legalStatusOfSupply)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->legalStatusOfSupply = Deserialize_CodeableConcept(arena, cjson_legalStatusOfSupply);
	}
	cJSON *cjson_validityPeriod =  cJSON_GetObjectItem(medicinalProductAuthorization_JurisdictionalAuthorization, "validityPeriod");
	if(cjson_validityPeriod)
	{
		result_MedicinalProductAuthorization_JurisdictionalAuthorization->validityPeriod = Deserialize_Period(arena, cjson_validityPeriod);
	}
	return result_MedicinalProductAuthorization_JurisdictionalAuthorization;
}

MedicinalProductAuthorization_Procedure*
Deserialize_MedicinalProductAuthorization_Procedure(Arena *arena, cJSON *medicinalProductAuthorization_Procedure)
{
	MedicinalProductAuthorization_Procedure *result_MedicinalProductAuthorization_Procedure = PushArray(arena, MedicinalProductAuthorization_Procedure, 1);
	result_MedicinalProductAuthorization_Procedure->resourceType = ResourceType::MedicinalProductAuthorization_Procedure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "id");
	if(cjson_id)
	{
		result_MedicinalProductAuthorization_Procedure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductAuthorization_Procedure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductAuthorization_Procedure->extension = PushArray(arena, Extension, result_MedicinalProductAuthorization_Procedure->extension_count);
		for(int i = 0; i < result_MedicinalProductAuthorization_Procedure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductAuthorization_Procedure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductAuthorization_Procedure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductAuthorization_Procedure->modifierExtension = PushArray(arena, Extension, result_MedicinalProductAuthorization_Procedure->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductAuthorization_Procedure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductAuthorization_Procedure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProductAuthorization_Procedure->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "type");
	if(cjson_type)
	{
		result_MedicinalProductAuthorization_Procedure->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(medicinalProductAuthorization_Procedure, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "valuePeriod");
		result_MedicinalProductAuthorization_Procedure->date.valuePeriod = Deserialize_Period(arena, item);
		result_MedicinalProductAuthorization_Procedure->date_type = MedicinalProductAuthorization_Procedure::DateType::Period;
	}
	else if((bool)cJSON_HasObjectItem(medicinalProductAuthorization_Procedure, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "valueDateTime");
		result_MedicinalProductAuthorization_Procedure->date.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_MedicinalProductAuthorization_Procedure->date_type = MedicinalProductAuthorization_Procedure::DateType::fhir_dateTime;
	}


	cJSON *cjson_application =  cJSON_GetObjectItem(medicinalProductAuthorization_Procedure, "application");
	if(cjson_application)
	{
		result_MedicinalProductAuthorization_Procedure->application_count = cJSON_GetArraySize(cjson_application);
		result_MedicinalProductAuthorization_Procedure->application = PushArray(arena, MedicinalProductAuthorization_Procedure, result_MedicinalProductAuthorization_Procedure->application_count);
		for(int i = 0; i < result_MedicinalProductAuthorization_Procedure->application_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_application, i);
			result_MedicinalProductAuthorization_Procedure->application[i] = *Deserialize_MedicinalProductAuthorization_Procedure(arena, internal);
		}

	}
	return result_MedicinalProductAuthorization_Procedure;
}

MedicinalProductContraindication*
Deserialize_MedicinalProductContraindication(Arena *arena, cJSON *medicinalProductContraindication)
{
	MedicinalProductContraindication *result_MedicinalProductContraindication = PushArray(arena, MedicinalProductContraindication, 1);
	result_MedicinalProductContraindication->resourceType = ResourceType::MedicinalProductContraindication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductContraindication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductContraindication, "id");
	if(cjson_id)
	{
		result_MedicinalProductContraindication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductContraindication, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductContraindication->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductContraindication, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductContraindication->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductContraindication, "language");
	if(cjson_language)
	{
		result_MedicinalProductContraindication->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductContraindication, "text");
	if(cjson_text)
	{
		result_MedicinalProductContraindication->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductContraindication, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductContraindication->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductContraindication->contained = PushArray(arena, Resource, result_MedicinalProductContraindication->contained_count);
		for(int i = 0; i < result_MedicinalProductContraindication->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductContraindication->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductContraindication, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductContraindication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductContraindication->extension = PushArray(arena, Extension, result_MedicinalProductContraindication->extension_count);
		for(int i = 0; i < result_MedicinalProductContraindication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductContraindication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductContraindication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductContraindication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductContraindication->modifierExtension = PushArray(arena, Extension, result_MedicinalProductContraindication->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductContraindication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductContraindication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(medicinalProductContraindication, "subject");
	if(cjson_subject)
	{
		result_MedicinalProductContraindication->subject_count = cJSON_GetArraySize(cjson_subject);
		result_MedicinalProductContraindication->subject = PushArray(arena, Reference, result_MedicinalProductContraindication->subject_count);
		for(int i = 0; i < result_MedicinalProductContraindication->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_MedicinalProductContraindication->subject[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_disease =  cJSON_GetObjectItem(medicinalProductContraindication, "disease");
	if(cjson_disease)
	{
		result_MedicinalProductContraindication->disease = Deserialize_CodeableConcept(arena, cjson_disease);
	}
	cJSON *cjson_diseaseStatus =  cJSON_GetObjectItem(medicinalProductContraindication, "diseaseStatus");
	if(cjson_diseaseStatus)
	{
		result_MedicinalProductContraindication->diseaseStatus = Deserialize_CodeableConcept(arena, cjson_diseaseStatus);
	}
	cJSON *cjson_comorbidity =  cJSON_GetObjectItem(medicinalProductContraindication, "comorbidity");
	if(cjson_comorbidity)
	{
		result_MedicinalProductContraindication->comorbidity_count = cJSON_GetArraySize(cjson_comorbidity);
		result_MedicinalProductContraindication->comorbidity = PushArray(arena, CodeableConcept, result_MedicinalProductContraindication->comorbidity_count);
		for(int i = 0; i < result_MedicinalProductContraindication->comorbidity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_comorbidity, i);
			result_MedicinalProductContraindication->comorbidity[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_therapeuticIndication =  cJSON_GetObjectItem(medicinalProductContraindication, "therapeuticIndication");
	if(cjson_therapeuticIndication)
	{
		result_MedicinalProductContraindication->therapeuticIndication_count = cJSON_GetArraySize(cjson_therapeuticIndication);
		result_MedicinalProductContraindication->therapeuticIndication = PushArray(arena, Reference, result_MedicinalProductContraindication->therapeuticIndication_count);
		for(int i = 0; i < result_MedicinalProductContraindication->therapeuticIndication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_therapeuticIndication, i);
			result_MedicinalProductContraindication->therapeuticIndication[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_otherTherapy =  cJSON_GetObjectItem(medicinalProductContraindication, "otherTherapy");
	if(cjson_otherTherapy)
	{
		result_MedicinalProductContraindication->otherTherapy_count = cJSON_GetArraySize(cjson_otherTherapy);
		result_MedicinalProductContraindication->otherTherapy = PushArray(arena, MedicinalProductContraindication_OtherTherapy, result_MedicinalProductContraindication->otherTherapy_count);
		for(int i = 0; i < result_MedicinalProductContraindication->otherTherapy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_otherTherapy, i);
			result_MedicinalProductContraindication->otherTherapy[i] = *Deserialize_MedicinalProductContraindication_OtherTherapy(arena, internal);
		}

	}
	cJSON *cjson_population =  cJSON_GetObjectItem(medicinalProductContraindication, "population");
	if(cjson_population)
	{
		result_MedicinalProductContraindication->population_count = cJSON_GetArraySize(cjson_population);
		result_MedicinalProductContraindication->population = PushArray(arena, Population, result_MedicinalProductContraindication->population_count);
		for(int i = 0; i < result_MedicinalProductContraindication->population_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_population, i);
			result_MedicinalProductContraindication->population[i] = *Deserialize_Population(arena, internal);
		}

	}
	return result_MedicinalProductContraindication;
}

MedicinalProductContraindication_OtherTherapy*
Deserialize_MedicinalProductContraindication_OtherTherapy(Arena *arena, cJSON *medicinalProductContraindication_OtherTherapy)
{
	MedicinalProductContraindication_OtherTherapy *result_MedicinalProductContraindication_OtherTherapy = PushArray(arena, MedicinalProductContraindication_OtherTherapy, 1);
	result_MedicinalProductContraindication_OtherTherapy->resourceType = ResourceType::MedicinalProductContraindication_OtherTherapy;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductContraindication_OtherTherapy, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductContraindication_OtherTherapy, "id");
	if(cjson_id)
	{
		result_MedicinalProductContraindication_OtherTherapy->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductContraindication_OtherTherapy, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductContraindication_OtherTherapy->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductContraindication_OtherTherapy->extension = PushArray(arena, Extension, result_MedicinalProductContraindication_OtherTherapy->extension_count);
		for(int i = 0; i < result_MedicinalProductContraindication_OtherTherapy->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductContraindication_OtherTherapy->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductContraindication_OtherTherapy, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductContraindication_OtherTherapy->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductContraindication_OtherTherapy->modifierExtension = PushArray(arena, Extension, result_MedicinalProductContraindication_OtherTherapy->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductContraindication_OtherTherapy->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductContraindication_OtherTherapy->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_therapyRelationshipType =  cJSON_GetObjectItem(medicinalProductContraindication_OtherTherapy, "therapyRelationshipType");
	if(cjson_therapyRelationshipType)
	{
		result_MedicinalProductContraindication_OtherTherapy->therapyRelationshipType = Deserialize_CodeableConcept(arena, cjson_therapyRelationshipType);
	}
	if((bool)cJSON_HasObjectItem(medicinalProductContraindication_OtherTherapy, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductContraindication_OtherTherapy, "valueCodeableConcept");
		result_MedicinalProductContraindication_OtherTherapy->medication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicinalProductContraindication_OtherTherapy->medication_type = MedicinalProductContraindication_OtherTherapy::MedicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicinalProductContraindication_OtherTherapy, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductContraindication_OtherTherapy, "valueReference");
		result_MedicinalProductContraindication_OtherTherapy->medication.valueReference = Deserialize_Reference(arena, item);
		result_MedicinalProductContraindication_OtherTherapy->medication_type = MedicinalProductContraindication_OtherTherapy::MedicationType::Reference;
	}


	return result_MedicinalProductContraindication_OtherTherapy;
}

MedicinalProductIndication*
Deserialize_MedicinalProductIndication(Arena *arena, cJSON *medicinalProductIndication)
{
	MedicinalProductIndication *result_MedicinalProductIndication = PushArray(arena, MedicinalProductIndication, 1);
	result_MedicinalProductIndication->resourceType = ResourceType::MedicinalProductIndication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductIndication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductIndication, "id");
	if(cjson_id)
	{
		result_MedicinalProductIndication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductIndication, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductIndication->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductIndication, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductIndication->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductIndication, "language");
	if(cjson_language)
	{
		result_MedicinalProductIndication->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductIndication, "text");
	if(cjson_text)
	{
		result_MedicinalProductIndication->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductIndication, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductIndication->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductIndication->contained = PushArray(arena, Resource, result_MedicinalProductIndication->contained_count);
		for(int i = 0; i < result_MedicinalProductIndication->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductIndication->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductIndication, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductIndication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductIndication->extension = PushArray(arena, Extension, result_MedicinalProductIndication->extension_count);
		for(int i = 0; i < result_MedicinalProductIndication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductIndication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductIndication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductIndication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductIndication->modifierExtension = PushArray(arena, Extension, result_MedicinalProductIndication->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductIndication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductIndication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(medicinalProductIndication, "subject");
	if(cjson_subject)
	{
		result_MedicinalProductIndication->subject_count = cJSON_GetArraySize(cjson_subject);
		result_MedicinalProductIndication->subject = PushArray(arena, Reference, result_MedicinalProductIndication->subject_count);
		for(int i = 0; i < result_MedicinalProductIndication->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_MedicinalProductIndication->subject[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_diseaseSymptomProcedure =  cJSON_GetObjectItem(medicinalProductIndication, "diseaseSymptomProcedure");
	if(cjson_diseaseSymptomProcedure)
	{
		result_MedicinalProductIndication->diseaseSymptomProcedure = Deserialize_CodeableConcept(arena, cjson_diseaseSymptomProcedure);
	}
	cJSON *cjson_diseaseStatus =  cJSON_GetObjectItem(medicinalProductIndication, "diseaseStatus");
	if(cjson_diseaseStatus)
	{
		result_MedicinalProductIndication->diseaseStatus = Deserialize_CodeableConcept(arena, cjson_diseaseStatus);
	}
	cJSON *cjson_comorbidity =  cJSON_GetObjectItem(medicinalProductIndication, "comorbidity");
	if(cjson_comorbidity)
	{
		result_MedicinalProductIndication->comorbidity_count = cJSON_GetArraySize(cjson_comorbidity);
		result_MedicinalProductIndication->comorbidity = PushArray(arena, CodeableConcept, result_MedicinalProductIndication->comorbidity_count);
		for(int i = 0; i < result_MedicinalProductIndication->comorbidity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_comorbidity, i);
			result_MedicinalProductIndication->comorbidity[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_intendedEffect =  cJSON_GetObjectItem(medicinalProductIndication, "intendedEffect");
	if(cjson_intendedEffect)
	{
		result_MedicinalProductIndication->intendedEffect = Deserialize_CodeableConcept(arena, cjson_intendedEffect);
	}
	cJSON *cjson_duration =  cJSON_GetObjectItem(medicinalProductIndication, "duration");
	if(cjson_duration)
	{
		result_MedicinalProductIndication->duration = Deserialize_Quantity(arena, cjson_duration);
	}
	cJSON *cjson_otherTherapy =  cJSON_GetObjectItem(medicinalProductIndication, "otherTherapy");
	if(cjson_otherTherapy)
	{
		result_MedicinalProductIndication->otherTherapy_count = cJSON_GetArraySize(cjson_otherTherapy);
		result_MedicinalProductIndication->otherTherapy = PushArray(arena, MedicinalProductIndication_OtherTherapy, result_MedicinalProductIndication->otherTherapy_count);
		for(int i = 0; i < result_MedicinalProductIndication->otherTherapy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_otherTherapy, i);
			result_MedicinalProductIndication->otherTherapy[i] = *Deserialize_MedicinalProductIndication_OtherTherapy(arena, internal);
		}

	}
	cJSON *cjson_undesirableEffect =  cJSON_GetObjectItem(medicinalProductIndication, "undesirableEffect");
	if(cjson_undesirableEffect)
	{
		result_MedicinalProductIndication->undesirableEffect_count = cJSON_GetArraySize(cjson_undesirableEffect);
		result_MedicinalProductIndication->undesirableEffect = PushArray(arena, Reference, result_MedicinalProductIndication->undesirableEffect_count);
		for(int i = 0; i < result_MedicinalProductIndication->undesirableEffect_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_undesirableEffect, i);
			result_MedicinalProductIndication->undesirableEffect[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_population =  cJSON_GetObjectItem(medicinalProductIndication, "population");
	if(cjson_population)
	{
		result_MedicinalProductIndication->population_count = cJSON_GetArraySize(cjson_population);
		result_MedicinalProductIndication->population = PushArray(arena, Population, result_MedicinalProductIndication->population_count);
		for(int i = 0; i < result_MedicinalProductIndication->population_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_population, i);
			result_MedicinalProductIndication->population[i] = *Deserialize_Population(arena, internal);
		}

	}
	return result_MedicinalProductIndication;
}

MedicinalProductIndication_OtherTherapy*
Deserialize_MedicinalProductIndication_OtherTherapy(Arena *arena, cJSON *medicinalProductIndication_OtherTherapy)
{
	MedicinalProductIndication_OtherTherapy *result_MedicinalProductIndication_OtherTherapy = PushArray(arena, MedicinalProductIndication_OtherTherapy, 1);
	result_MedicinalProductIndication_OtherTherapy->resourceType = ResourceType::MedicinalProductIndication_OtherTherapy;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductIndication_OtherTherapy, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductIndication_OtherTherapy, "id");
	if(cjson_id)
	{
		result_MedicinalProductIndication_OtherTherapy->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductIndication_OtherTherapy, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductIndication_OtherTherapy->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductIndication_OtherTherapy->extension = PushArray(arena, Extension, result_MedicinalProductIndication_OtherTherapy->extension_count);
		for(int i = 0; i < result_MedicinalProductIndication_OtherTherapy->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductIndication_OtherTherapy->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductIndication_OtherTherapy, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductIndication_OtherTherapy->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductIndication_OtherTherapy->modifierExtension = PushArray(arena, Extension, result_MedicinalProductIndication_OtherTherapy->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductIndication_OtherTherapy->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductIndication_OtherTherapy->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_therapyRelationshipType =  cJSON_GetObjectItem(medicinalProductIndication_OtherTherapy, "therapyRelationshipType");
	if(cjson_therapyRelationshipType)
	{
		result_MedicinalProductIndication_OtherTherapy->therapyRelationshipType = Deserialize_CodeableConcept(arena, cjson_therapyRelationshipType);
	}
	if((bool)cJSON_HasObjectItem(medicinalProductIndication_OtherTherapy, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductIndication_OtherTherapy, "valueCodeableConcept");
		result_MedicinalProductIndication_OtherTherapy->medication.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicinalProductIndication_OtherTherapy->medication_type = MedicinalProductIndication_OtherTherapy::MedicationType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(medicinalProductIndication_OtherTherapy, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductIndication_OtherTherapy, "valueReference");
		result_MedicinalProductIndication_OtherTherapy->medication.valueReference = Deserialize_Reference(arena, item);
		result_MedicinalProductIndication_OtherTherapy->medication_type = MedicinalProductIndication_OtherTherapy::MedicationType::Reference;
	}


	return result_MedicinalProductIndication_OtherTherapy;
}

MedicinalProductIngredient*
Deserialize_MedicinalProductIngredient(Arena *arena, cJSON *medicinalProductIngredient)
{
	MedicinalProductIngredient *result_MedicinalProductIngredient = PushArray(arena, MedicinalProductIngredient, 1);
	result_MedicinalProductIngredient->resourceType = ResourceType::MedicinalProductIngredient;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductIngredient, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductIngredient, "id");
	if(cjson_id)
	{
		result_MedicinalProductIngredient->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductIngredient, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductIngredient->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductIngredient, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductIngredient->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductIngredient, "language");
	if(cjson_language)
	{
		result_MedicinalProductIngredient->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductIngredient, "text");
	if(cjson_text)
	{
		result_MedicinalProductIngredient->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductIngredient, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductIngredient->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductIngredient->contained = PushArray(arena, Resource, result_MedicinalProductIngredient->contained_count);
		for(int i = 0; i < result_MedicinalProductIngredient->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductIngredient->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductIngredient, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductIngredient->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductIngredient->extension = PushArray(arena, Extension, result_MedicinalProductIngredient->extension_count);
		for(int i = 0; i < result_MedicinalProductIngredient->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductIngredient->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductIngredient, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductIngredient->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductIngredient->modifierExtension = PushArray(arena, Extension, result_MedicinalProductIngredient->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductIngredient->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductIngredient->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProductIngredient, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProductIngredient->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(medicinalProductIngredient, "role");
	if(cjson_role)
	{
		result_MedicinalProductIngredient->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	cJSON *cjson_allergenicIndicator =  cJSON_GetObjectItem(medicinalProductIngredient, "allergenicIndicator");
	if(cjson_allergenicIndicator)
	{
		result_MedicinalProductIngredient->allergenicIndicator = (boolean)cJSON_IsTrue(cjson_allergenicIndicator);
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(medicinalProductIngredient, "manufacturer");
	if(cjson_manufacturer)
	{
		result_MedicinalProductIngredient->manufacturer_count = cJSON_GetArraySize(cjson_manufacturer);
		result_MedicinalProductIngredient->manufacturer = PushArray(arena, Reference, result_MedicinalProductIngredient->manufacturer_count);
		for(int i = 0; i < result_MedicinalProductIngredient->manufacturer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manufacturer, i);
			result_MedicinalProductIngredient->manufacturer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_specifiedSubstance =  cJSON_GetObjectItem(medicinalProductIngredient, "specifiedSubstance");
	if(cjson_specifiedSubstance)
	{
		result_MedicinalProductIngredient->specifiedSubstance_count = cJSON_GetArraySize(cjson_specifiedSubstance);
		result_MedicinalProductIngredient->specifiedSubstance = PushArray(arena, MedicinalProductIngredient_SpecifiedSubstance, result_MedicinalProductIngredient->specifiedSubstance_count);
		for(int i = 0; i < result_MedicinalProductIngredient->specifiedSubstance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specifiedSubstance, i);
			result_MedicinalProductIngredient->specifiedSubstance[i] = *Deserialize_MedicinalProductIngredient_SpecifiedSubstance(arena, internal);
		}

	}
	cJSON *cjson_substance =  cJSON_GetObjectItem(medicinalProductIngredient, "substance");
	if(cjson_substance)
	{
		result_MedicinalProductIngredient->substance = Deserialize_MedicinalProductIngredient_Substance(arena, cjson_substance);
	}
	return result_MedicinalProductIngredient;
}

MedicinalProductIngredient_SpecifiedSubstance*
Deserialize_MedicinalProductIngredient_SpecifiedSubstance(Arena *arena, cJSON *medicinalProductIngredient_SpecifiedSubstance)
{
	MedicinalProductIngredient_SpecifiedSubstance *result_MedicinalProductIngredient_SpecifiedSubstance = PushArray(arena, MedicinalProductIngredient_SpecifiedSubstance, 1);
	result_MedicinalProductIngredient_SpecifiedSubstance->resourceType = ResourceType::MedicinalProductIngredient_SpecifiedSubstance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "id");
	if(cjson_id)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductIngredient_SpecifiedSubstance->extension = PushArray(arena, Extension, result_MedicinalProductIngredient_SpecifiedSubstance->extension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductIngredient_SpecifiedSubstance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductIngredient_SpecifiedSubstance->modifierExtension = PushArray(arena, Extension, result_MedicinalProductIngredient_SpecifiedSubstance->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductIngredient_SpecifiedSubstance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "code");
	if(cjson_code)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_group =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "group");
	if(cjson_group)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance->group = Deserialize_CodeableConcept(arena, cjson_group);
	}
	cJSON *cjson_confidentiality =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "confidentiality");
	if(cjson_confidentiality)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance->confidentiality = Deserialize_CodeableConcept(arena, cjson_confidentiality);
	}
	cJSON *cjson_strength =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance, "strength");
	if(cjson_strength)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance->strength_count = cJSON_GetArraySize(cjson_strength);
		result_MedicinalProductIngredient_SpecifiedSubstance->strength = PushArray(arena, MedicinalProductIngredient_SpecifiedSubstance_Strength, result_MedicinalProductIngredient_SpecifiedSubstance->strength_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance->strength_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_strength, i);
			result_MedicinalProductIngredient_SpecifiedSubstance->strength[i] = *Deserialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(arena, internal);
		}

	}
	return result_MedicinalProductIngredient_SpecifiedSubstance;
}

MedicinalProductIngredient_SpecifiedSubstance_Strength*
Deserialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(Arena *arena, cJSON *medicinalProductIngredient_SpecifiedSubstance_Strength)
{
	MedicinalProductIngredient_SpecifiedSubstance_Strength *result_MedicinalProductIngredient_SpecifiedSubstance_Strength = PushArray(arena, MedicinalProductIngredient_SpecifiedSubstance_Strength, 1);
	result_MedicinalProductIngredient_SpecifiedSubstance_Strength->resourceType = ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "id");
	if(cjson_id)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->extension = PushArray(arena, Extension, result_MedicinalProductIngredient_SpecifiedSubstance_Strength->extension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance_Strength->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductIngredient_SpecifiedSubstance_Strength->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension = PushArray(arena, Extension, result_MedicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_presentation =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "presentation");
	if(cjson_presentation)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->presentation = Deserialize_Ratio(arena, cjson_presentation);
	}
	cJSON *cjson_presentationLowLimit =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "presentationLowLimit");
	if(cjson_presentationLowLimit)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->presentationLowLimit = Deserialize_Ratio(arena, cjson_presentationLowLimit);
	}
	cJSON *cjson_concentration =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "concentration");
	if(cjson_concentration)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->concentration = Deserialize_Ratio(arena, cjson_concentration);
	}
	cJSON *cjson_concentrationLowLimit =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "concentrationLowLimit");
	if(cjson_concentrationLowLimit)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->concentrationLowLimit = Deserialize_Ratio(arena, cjson_concentrationLowLimit);
	}
	cJSON *cjson_measurementPoint =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "measurementPoint");
	if(cjson_measurementPoint)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->measurementPoint = Str8C(cJSON_GetStringValue(cjson_measurementPoint));
	}
	cJSON *cjson_country =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "country");
	if(cjson_country)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->country_count = cJSON_GetArraySize(cjson_country);
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->country = PushArray(arena, CodeableConcept, result_MedicinalProductIngredient_SpecifiedSubstance_Strength->country_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance_Strength->country_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_country, i);
			result_MedicinalProductIngredient_SpecifiedSubstance_Strength->country[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_referenceStrength =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength, "referenceStrength");
	if(cjson_referenceStrength)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength_count = cJSON_GetArraySize(cjson_referenceStrength);
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength = PushArray(arena, MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, result_MedicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referenceStrength, i);
			result_MedicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength[i] = *Deserialize_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength(arena, internal);
		}

	}
	return result_MedicinalProductIngredient_SpecifiedSubstance_Strength;
}

MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength*
Deserialize_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength(Arena *arena, cJSON *medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength)
{
	MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength *result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength = PushArray(arena, MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, 1);
	result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->resourceType = ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "id");
	if(cjson_id)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension = PushArray(arena, Extension, result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension = PushArray(arena, Extension, result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_substance =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "substance");
	if(cjson_substance)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->substance = Deserialize_CodeableConcept(arena, cjson_substance);
	}
	cJSON *cjson_strength =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "strength");
	if(cjson_strength)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->strength = Deserialize_Ratio(arena, cjson_strength);
	}
	cJSON *cjson_strengthLowLimit =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "strengthLowLimit");
	if(cjson_strengthLowLimit)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->strengthLowLimit = Deserialize_Ratio(arena, cjson_strengthLowLimit);
	}
	cJSON *cjson_measurementPoint =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "measurementPoint");
	if(cjson_measurementPoint)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->measurementPoint = Str8C(cJSON_GetStringValue(cjson_measurementPoint));
	}
	cJSON *cjson_country =  cJSON_GetObjectItem(medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, "country");
	if(cjson_country)
	{
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country_count = cJSON_GetArraySize(cjson_country);
		result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country = PushArray(arena, CodeableConcept, result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country_count);
		for(int i = 0; i < result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_country, i);
			result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength;
}

MedicinalProductIngredient_Substance*
Deserialize_MedicinalProductIngredient_Substance(Arena *arena, cJSON *medicinalProductIngredient_Substance)
{
	MedicinalProductIngredient_Substance *result_MedicinalProductIngredient_Substance = PushArray(arena, MedicinalProductIngredient_Substance, 1);
	result_MedicinalProductIngredient_Substance->resourceType = ResourceType::MedicinalProductIngredient_Substance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductIngredient_Substance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductIngredient_Substance, "id");
	if(cjson_id)
	{
		result_MedicinalProductIngredient_Substance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductIngredient_Substance, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductIngredient_Substance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductIngredient_Substance->extension = PushArray(arena, Extension, result_MedicinalProductIngredient_Substance->extension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_Substance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductIngredient_Substance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductIngredient_Substance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductIngredient_Substance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductIngredient_Substance->modifierExtension = PushArray(arena, Extension, result_MedicinalProductIngredient_Substance->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductIngredient_Substance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductIngredient_Substance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(medicinalProductIngredient_Substance, "code");
	if(cjson_code)
	{
		result_MedicinalProductIngredient_Substance->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_strength =  cJSON_GetObjectItem(medicinalProductIngredient_Substance, "strength");
	if(cjson_strength)
	{
		result_MedicinalProductIngredient_Substance->strength_count = cJSON_GetArraySize(cjson_strength);
		result_MedicinalProductIngredient_Substance->strength = PushArray(arena, MedicinalProductIngredient_SpecifiedSubstance_Strength, result_MedicinalProductIngredient_Substance->strength_count);
		for(int i = 0; i < result_MedicinalProductIngredient_Substance->strength_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_strength, i);
			result_MedicinalProductIngredient_Substance->strength[i] = *Deserialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(arena, internal);
		}

	}
	return result_MedicinalProductIngredient_Substance;
}

MedicinalProductInteraction*
Deserialize_MedicinalProductInteraction(Arena *arena, cJSON *medicinalProductInteraction)
{
	MedicinalProductInteraction *result_MedicinalProductInteraction = PushArray(arena, MedicinalProductInteraction, 1);
	result_MedicinalProductInteraction->resourceType = ResourceType::MedicinalProductInteraction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductInteraction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductInteraction, "id");
	if(cjson_id)
	{
		result_MedicinalProductInteraction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductInteraction, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductInteraction->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductInteraction, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductInteraction->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductInteraction, "language");
	if(cjson_language)
	{
		result_MedicinalProductInteraction->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductInteraction, "text");
	if(cjson_text)
	{
		result_MedicinalProductInteraction->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductInteraction, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductInteraction->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductInteraction->contained = PushArray(arena, Resource, result_MedicinalProductInteraction->contained_count);
		for(int i = 0; i < result_MedicinalProductInteraction->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductInteraction->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductInteraction, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductInteraction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductInteraction->extension = PushArray(arena, Extension, result_MedicinalProductInteraction->extension_count);
		for(int i = 0; i < result_MedicinalProductInteraction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductInteraction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductInteraction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductInteraction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductInteraction->modifierExtension = PushArray(arena, Extension, result_MedicinalProductInteraction->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductInteraction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductInteraction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(medicinalProductInteraction, "subject");
	if(cjson_subject)
	{
		result_MedicinalProductInteraction->subject_count = cJSON_GetArraySize(cjson_subject);
		result_MedicinalProductInteraction->subject = PushArray(arena, Reference, result_MedicinalProductInteraction->subject_count);
		for(int i = 0; i < result_MedicinalProductInteraction->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_MedicinalProductInteraction->subject[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(medicinalProductInteraction, "description");
	if(cjson_description)
	{
		result_MedicinalProductInteraction->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_interactant =  cJSON_GetObjectItem(medicinalProductInteraction, "interactant");
	if(cjson_interactant)
	{
		result_MedicinalProductInteraction->interactant_count = cJSON_GetArraySize(cjson_interactant);
		result_MedicinalProductInteraction->interactant = PushArray(arena, MedicinalProductInteraction_Interactant, result_MedicinalProductInteraction->interactant_count);
		for(int i = 0; i < result_MedicinalProductInteraction->interactant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_interactant, i);
			result_MedicinalProductInteraction->interactant[i] = *Deserialize_MedicinalProductInteraction_Interactant(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicinalProductInteraction, "type");
	if(cjson_type)
	{
		result_MedicinalProductInteraction->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_effect =  cJSON_GetObjectItem(medicinalProductInteraction, "effect");
	if(cjson_effect)
	{
		result_MedicinalProductInteraction->effect = Deserialize_CodeableConcept(arena, cjson_effect);
	}
	cJSON *cjson_incidence =  cJSON_GetObjectItem(medicinalProductInteraction, "incidence");
	if(cjson_incidence)
	{
		result_MedicinalProductInteraction->incidence = Deserialize_CodeableConcept(arena, cjson_incidence);
	}
	cJSON *cjson_management =  cJSON_GetObjectItem(medicinalProductInteraction, "management");
	if(cjson_management)
	{
		result_MedicinalProductInteraction->management = Deserialize_CodeableConcept(arena, cjson_management);
	}
	return result_MedicinalProductInteraction;
}

MedicinalProductInteraction_Interactant*
Deserialize_MedicinalProductInteraction_Interactant(Arena *arena, cJSON *medicinalProductInteraction_Interactant)
{
	MedicinalProductInteraction_Interactant *result_MedicinalProductInteraction_Interactant = PushArray(arena, MedicinalProductInteraction_Interactant, 1);
	result_MedicinalProductInteraction_Interactant->resourceType = ResourceType::MedicinalProductInteraction_Interactant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductInteraction_Interactant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductInteraction_Interactant, "id");
	if(cjson_id)
	{
		result_MedicinalProductInteraction_Interactant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductInteraction_Interactant, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductInteraction_Interactant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductInteraction_Interactant->extension = PushArray(arena, Extension, result_MedicinalProductInteraction_Interactant->extension_count);
		for(int i = 0; i < result_MedicinalProductInteraction_Interactant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductInteraction_Interactant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductInteraction_Interactant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductInteraction_Interactant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductInteraction_Interactant->modifierExtension = PushArray(arena, Extension, result_MedicinalProductInteraction_Interactant->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductInteraction_Interactant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductInteraction_Interactant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(medicinalProductInteraction_Interactant, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductInteraction_Interactant, "valueReference");
		result_MedicinalProductInteraction_Interactant->item.valueReference = Deserialize_Reference(arena, item);
		result_MedicinalProductInteraction_Interactant->item_type = MedicinalProductInteraction_Interactant::ItemType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(medicinalProductInteraction_Interactant, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(medicinalProductInteraction_Interactant, "valueCodeableConcept");
		result_MedicinalProductInteraction_Interactant->item.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_MedicinalProductInteraction_Interactant->item_type = MedicinalProductInteraction_Interactant::ItemType::CodeableConcept;
	}


	return result_MedicinalProductInteraction_Interactant;
}

MedicinalProductManufactured*
Deserialize_MedicinalProductManufactured(Arena *arena, cJSON *medicinalProductManufactured)
{
	MedicinalProductManufactured *result_MedicinalProductManufactured = PushArray(arena, MedicinalProductManufactured, 1);
	result_MedicinalProductManufactured->resourceType = ResourceType::MedicinalProductManufactured;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductManufactured, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductManufactured, "id");
	if(cjson_id)
	{
		result_MedicinalProductManufactured->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductManufactured, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductManufactured->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductManufactured, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductManufactured->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductManufactured, "language");
	if(cjson_language)
	{
		result_MedicinalProductManufactured->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductManufactured, "text");
	if(cjson_text)
	{
		result_MedicinalProductManufactured->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductManufactured, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductManufactured->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductManufactured->contained = PushArray(arena, Resource, result_MedicinalProductManufactured->contained_count);
		for(int i = 0; i < result_MedicinalProductManufactured->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductManufactured->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductManufactured, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductManufactured->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductManufactured->extension = PushArray(arena, Extension, result_MedicinalProductManufactured->extension_count);
		for(int i = 0; i < result_MedicinalProductManufactured->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductManufactured->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductManufactured, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductManufactured->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductManufactured->modifierExtension = PushArray(arena, Extension, result_MedicinalProductManufactured->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductManufactured->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductManufactured->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_manufacturedDoseForm =  cJSON_GetObjectItem(medicinalProductManufactured, "manufacturedDoseForm");
	if(cjson_manufacturedDoseForm)
	{
		result_MedicinalProductManufactured->manufacturedDoseForm = Deserialize_CodeableConcept(arena, cjson_manufacturedDoseForm);
	}
	cJSON *cjson_unitOfPresentation =  cJSON_GetObjectItem(medicinalProductManufactured, "unitOfPresentation");
	if(cjson_unitOfPresentation)
	{
		result_MedicinalProductManufactured->unitOfPresentation = Deserialize_CodeableConcept(arena, cjson_unitOfPresentation);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(medicinalProductManufactured, "quantity");
	if(cjson_quantity)
	{
		result_MedicinalProductManufactured->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(medicinalProductManufactured, "manufacturer");
	if(cjson_manufacturer)
	{
		result_MedicinalProductManufactured->manufacturer_count = cJSON_GetArraySize(cjson_manufacturer);
		result_MedicinalProductManufactured->manufacturer = PushArray(arena, Reference, result_MedicinalProductManufactured->manufacturer_count);
		for(int i = 0; i < result_MedicinalProductManufactured->manufacturer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manufacturer, i);
			result_MedicinalProductManufactured->manufacturer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_ingredient =  cJSON_GetObjectItem(medicinalProductManufactured, "ingredient");
	if(cjson_ingredient)
	{
		result_MedicinalProductManufactured->ingredient_count = cJSON_GetArraySize(cjson_ingredient);
		result_MedicinalProductManufactured->ingredient = PushArray(arena, Reference, result_MedicinalProductManufactured->ingredient_count);
		for(int i = 0; i < result_MedicinalProductManufactured->ingredient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_ingredient, i);
			result_MedicinalProductManufactured->ingredient[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_physicalCharacteristics =  cJSON_GetObjectItem(medicinalProductManufactured, "physicalCharacteristics");
	if(cjson_physicalCharacteristics)
	{
		result_MedicinalProductManufactured->physicalCharacteristics = Deserialize_ProdCharacteristic(arena, cjson_physicalCharacteristics);
	}
	cJSON *cjson_otherCharacteristics =  cJSON_GetObjectItem(medicinalProductManufactured, "otherCharacteristics");
	if(cjson_otherCharacteristics)
	{
		result_MedicinalProductManufactured->otherCharacteristics_count = cJSON_GetArraySize(cjson_otherCharacteristics);
		result_MedicinalProductManufactured->otherCharacteristics = PushArray(arena, CodeableConcept, result_MedicinalProductManufactured->otherCharacteristics_count);
		for(int i = 0; i < result_MedicinalProductManufactured->otherCharacteristics_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_otherCharacteristics, i);
			result_MedicinalProductManufactured->otherCharacteristics[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_MedicinalProductManufactured;
}

MedicinalProductPackaged*
Deserialize_MedicinalProductPackaged(Arena *arena, cJSON *medicinalProductPackaged)
{
	MedicinalProductPackaged *result_MedicinalProductPackaged = PushArray(arena, MedicinalProductPackaged, 1);
	result_MedicinalProductPackaged->resourceType = ResourceType::MedicinalProductPackaged;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPackaged, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPackaged, "id");
	if(cjson_id)
	{
		result_MedicinalProductPackaged->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductPackaged, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductPackaged->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductPackaged, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductPackaged->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductPackaged, "language");
	if(cjson_language)
	{
		result_MedicinalProductPackaged->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductPackaged, "text");
	if(cjson_text)
	{
		result_MedicinalProductPackaged->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductPackaged, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductPackaged->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductPackaged->contained = PushArray(arena, Resource, result_MedicinalProductPackaged->contained_count);
		for(int i = 0; i < result_MedicinalProductPackaged->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductPackaged->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPackaged, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPackaged->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPackaged->extension = PushArray(arena, Extension, result_MedicinalProductPackaged->extension_count);
		for(int i = 0; i < result_MedicinalProductPackaged->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPackaged->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPackaged, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPackaged->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPackaged->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPackaged->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPackaged->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPackaged->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProductPackaged, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProductPackaged->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicinalProductPackaged->identifier = PushArray(arena, Identifier, result_MedicinalProductPackaged->identifier_count);
		for(int i = 0; i < result_MedicinalProductPackaged->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicinalProductPackaged->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(medicinalProductPackaged, "subject");
	if(cjson_subject)
	{
		result_MedicinalProductPackaged->subject_count = cJSON_GetArraySize(cjson_subject);
		result_MedicinalProductPackaged->subject = PushArray(arena, Reference, result_MedicinalProductPackaged->subject_count);
		for(int i = 0; i < result_MedicinalProductPackaged->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_MedicinalProductPackaged->subject[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(medicinalProductPackaged, "description");
	if(cjson_description)
	{
		result_MedicinalProductPackaged->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_legalStatusOfSupply =  cJSON_GetObjectItem(medicinalProductPackaged, "legalStatusOfSupply");
	if(cjson_legalStatusOfSupply)
	{
		result_MedicinalProductPackaged->legalStatusOfSupply = Deserialize_CodeableConcept(arena, cjson_legalStatusOfSupply);
	}
	cJSON *cjson_marketingStatus =  cJSON_GetObjectItem(medicinalProductPackaged, "marketingStatus");
	if(cjson_marketingStatus)
	{
		result_MedicinalProductPackaged->marketingStatus_count = cJSON_GetArraySize(cjson_marketingStatus);
		result_MedicinalProductPackaged->marketingStatus = PushArray(arena, MarketingStatus, result_MedicinalProductPackaged->marketingStatus_count);
		for(int i = 0; i < result_MedicinalProductPackaged->marketingStatus_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_marketingStatus, i);
			result_MedicinalProductPackaged->marketingStatus[i] = *Deserialize_MarketingStatus(arena, internal);
		}

	}
	cJSON *cjson_marketingAuthorization =  cJSON_GetObjectItem(medicinalProductPackaged, "marketingAuthorization");
	if(cjson_marketingAuthorization)
	{
		result_MedicinalProductPackaged->marketingAuthorization = Deserialize_Reference(arena, cjson_marketingAuthorization);
	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(medicinalProductPackaged, "manufacturer");
	if(cjson_manufacturer)
	{
		result_MedicinalProductPackaged->manufacturer_count = cJSON_GetArraySize(cjson_manufacturer);
		result_MedicinalProductPackaged->manufacturer = PushArray(arena, Reference, result_MedicinalProductPackaged->manufacturer_count);
		for(int i = 0; i < result_MedicinalProductPackaged->manufacturer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manufacturer, i);
			result_MedicinalProductPackaged->manufacturer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_batchIdentifier =  cJSON_GetObjectItem(medicinalProductPackaged, "batchIdentifier");
	if(cjson_batchIdentifier)
	{
		result_MedicinalProductPackaged->batchIdentifier_count = cJSON_GetArraySize(cjson_batchIdentifier);
		result_MedicinalProductPackaged->batchIdentifier = PushArray(arena, MedicinalProductPackaged_BatchIdentifier, result_MedicinalProductPackaged->batchIdentifier_count);
		for(int i = 0; i < result_MedicinalProductPackaged->batchIdentifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_batchIdentifier, i);
			result_MedicinalProductPackaged->batchIdentifier[i] = *Deserialize_MedicinalProductPackaged_BatchIdentifier(arena, internal);
		}

	}
	cJSON *cjson_packageItem =  cJSON_GetObjectItem(medicinalProductPackaged, "packageItem");
	if(cjson_packageItem)
	{
		result_MedicinalProductPackaged->packageItem_count = cJSON_GetArraySize(cjson_packageItem);
		result_MedicinalProductPackaged->packageItem = PushArray(arena, MedicinalProductPackaged_PackageItem, result_MedicinalProductPackaged->packageItem_count);
		for(int i = 0; i < result_MedicinalProductPackaged->packageItem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_packageItem, i);
			result_MedicinalProductPackaged->packageItem[i] = *Deserialize_MedicinalProductPackaged_PackageItem(arena, internal);
		}

	}
	return result_MedicinalProductPackaged;
}

MedicinalProductPackaged_BatchIdentifier*
Deserialize_MedicinalProductPackaged_BatchIdentifier(Arena *arena, cJSON *medicinalProductPackaged_BatchIdentifier)
{
	MedicinalProductPackaged_BatchIdentifier *result_MedicinalProductPackaged_BatchIdentifier = PushArray(arena, MedicinalProductPackaged_BatchIdentifier, 1);
	result_MedicinalProductPackaged_BatchIdentifier->resourceType = ResourceType::MedicinalProductPackaged_BatchIdentifier;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPackaged_BatchIdentifier, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPackaged_BatchIdentifier, "id");
	if(cjson_id)
	{
		result_MedicinalProductPackaged_BatchIdentifier->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPackaged_BatchIdentifier, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPackaged_BatchIdentifier->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPackaged_BatchIdentifier->extension = PushArray(arena, Extension, result_MedicinalProductPackaged_BatchIdentifier->extension_count);
		for(int i = 0; i < result_MedicinalProductPackaged_BatchIdentifier->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPackaged_BatchIdentifier->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPackaged_BatchIdentifier, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPackaged_BatchIdentifier->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPackaged_BatchIdentifier->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPackaged_BatchIdentifier->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPackaged_BatchIdentifier->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPackaged_BatchIdentifier->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_outerPackaging =  cJSON_GetObjectItem(medicinalProductPackaged_BatchIdentifier, "outerPackaging");
	if(cjson_outerPackaging)
	{
		result_MedicinalProductPackaged_BatchIdentifier->outerPackaging = Deserialize_Identifier(arena, cjson_outerPackaging);
	}
	cJSON *cjson_immediatePackaging =  cJSON_GetObjectItem(medicinalProductPackaged_BatchIdentifier, "immediatePackaging");
	if(cjson_immediatePackaging)
	{
		result_MedicinalProductPackaged_BatchIdentifier->immediatePackaging = Deserialize_Identifier(arena, cjson_immediatePackaging);
	}
	return result_MedicinalProductPackaged_BatchIdentifier;
}

MedicinalProductPackaged_PackageItem*
Deserialize_MedicinalProductPackaged_PackageItem(Arena *arena, cJSON *medicinalProductPackaged_PackageItem)
{
	MedicinalProductPackaged_PackageItem *result_MedicinalProductPackaged_PackageItem = PushArray(arena, MedicinalProductPackaged_PackageItem, 1);
	result_MedicinalProductPackaged_PackageItem->resourceType = ResourceType::MedicinalProductPackaged_PackageItem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "id");
	if(cjson_id)
	{
		result_MedicinalProductPackaged_PackageItem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPackaged_PackageItem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPackaged_PackageItem->extension = PushArray(arena, Extension, result_MedicinalProductPackaged_PackageItem->extension_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPackaged_PackageItem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPackaged_PackageItem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPackaged_PackageItem->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPackaged_PackageItem->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPackaged_PackageItem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProductPackaged_PackageItem->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicinalProductPackaged_PackageItem->identifier = PushArray(arena, Identifier, result_MedicinalProductPackaged_PackageItem->identifier_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicinalProductPackaged_PackageItem->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "type");
	if(cjson_type)
	{
		result_MedicinalProductPackaged_PackageItem->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "quantity");
	if(cjson_quantity)
	{
		result_MedicinalProductPackaged_PackageItem->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_material =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "material");
	if(cjson_material)
	{
		result_MedicinalProductPackaged_PackageItem->material_count = cJSON_GetArraySize(cjson_material);
		result_MedicinalProductPackaged_PackageItem->material = PushArray(arena, CodeableConcept, result_MedicinalProductPackaged_PackageItem->material_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->material_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_material, i);
			result_MedicinalProductPackaged_PackageItem->material[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_alternateMaterial =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "alternateMaterial");
	if(cjson_alternateMaterial)
	{
		result_MedicinalProductPackaged_PackageItem->alternateMaterial_count = cJSON_GetArraySize(cjson_alternateMaterial);
		result_MedicinalProductPackaged_PackageItem->alternateMaterial = PushArray(arena, CodeableConcept, result_MedicinalProductPackaged_PackageItem->alternateMaterial_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->alternateMaterial_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_alternateMaterial, i);
			result_MedicinalProductPackaged_PackageItem->alternateMaterial[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_device =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "device");
	if(cjson_device)
	{
		result_MedicinalProductPackaged_PackageItem->device_count = cJSON_GetArraySize(cjson_device);
		result_MedicinalProductPackaged_PackageItem->device = PushArray(arena, Reference, result_MedicinalProductPackaged_PackageItem->device_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->device_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_device, i);
			result_MedicinalProductPackaged_PackageItem->device[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_manufacturedItem =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "manufacturedItem");
	if(cjson_manufacturedItem)
	{
		result_MedicinalProductPackaged_PackageItem->manufacturedItem_count = cJSON_GetArraySize(cjson_manufacturedItem);
		result_MedicinalProductPackaged_PackageItem->manufacturedItem = PushArray(arena, Reference, result_MedicinalProductPackaged_PackageItem->manufacturedItem_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->manufacturedItem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manufacturedItem, i);
			result_MedicinalProductPackaged_PackageItem->manufacturedItem[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_packageItem =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "packageItem");
	if(cjson_packageItem)
	{
		result_MedicinalProductPackaged_PackageItem->packageItem_count = cJSON_GetArraySize(cjson_packageItem);
		result_MedicinalProductPackaged_PackageItem->packageItem = PushArray(arena, MedicinalProductPackaged_PackageItem, result_MedicinalProductPackaged_PackageItem->packageItem_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->packageItem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_packageItem, i);
			result_MedicinalProductPackaged_PackageItem->packageItem[i] = *Deserialize_MedicinalProductPackaged_PackageItem(arena, internal);
		}

	}
	cJSON *cjson_physicalCharacteristics =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "physicalCharacteristics");
	if(cjson_physicalCharacteristics)
	{
		result_MedicinalProductPackaged_PackageItem->physicalCharacteristics = Deserialize_ProdCharacteristic(arena, cjson_physicalCharacteristics);
	}
	cJSON *cjson_otherCharacteristics =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "otherCharacteristics");
	if(cjson_otherCharacteristics)
	{
		result_MedicinalProductPackaged_PackageItem->otherCharacteristics_count = cJSON_GetArraySize(cjson_otherCharacteristics);
		result_MedicinalProductPackaged_PackageItem->otherCharacteristics = PushArray(arena, CodeableConcept, result_MedicinalProductPackaged_PackageItem->otherCharacteristics_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->otherCharacteristics_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_otherCharacteristics, i);
			result_MedicinalProductPackaged_PackageItem->otherCharacteristics[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_shelfLifeStorage =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "shelfLifeStorage");
	if(cjson_shelfLifeStorage)
	{
		result_MedicinalProductPackaged_PackageItem->shelfLifeStorage_count = cJSON_GetArraySize(cjson_shelfLifeStorage);
		result_MedicinalProductPackaged_PackageItem->shelfLifeStorage = PushArray(arena, ProductShelfLife, result_MedicinalProductPackaged_PackageItem->shelfLifeStorage_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->shelfLifeStorage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_shelfLifeStorage, i);
			result_MedicinalProductPackaged_PackageItem->shelfLifeStorage[i] = *Deserialize_ProductShelfLife(arena, internal);
		}

	}
	cJSON *cjson_manufacturer =  cJSON_GetObjectItem(medicinalProductPackaged_PackageItem, "manufacturer");
	if(cjson_manufacturer)
	{
		result_MedicinalProductPackaged_PackageItem->manufacturer_count = cJSON_GetArraySize(cjson_manufacturer);
		result_MedicinalProductPackaged_PackageItem->manufacturer = PushArray(arena, Reference, result_MedicinalProductPackaged_PackageItem->manufacturer_count);
		for(int i = 0; i < result_MedicinalProductPackaged_PackageItem->manufacturer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_manufacturer, i);
			result_MedicinalProductPackaged_PackageItem->manufacturer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_MedicinalProductPackaged_PackageItem;
}

MedicinalProductPharmaceutical*
Deserialize_MedicinalProductPharmaceutical(Arena *arena, cJSON *medicinalProductPharmaceutical)
{
	MedicinalProductPharmaceutical *result_MedicinalProductPharmaceutical = PushArray(arena, MedicinalProductPharmaceutical, 1);
	result_MedicinalProductPharmaceutical->resourceType = ResourceType::MedicinalProductPharmaceutical;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "id");
	if(cjson_id)
	{
		result_MedicinalProductPharmaceutical->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductPharmaceutical->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductPharmaceutical->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "language");
	if(cjson_language)
	{
		result_MedicinalProductPharmaceutical->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "text");
	if(cjson_text)
	{
		result_MedicinalProductPharmaceutical->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductPharmaceutical->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductPharmaceutical->contained = PushArray(arena, Resource, result_MedicinalProductPharmaceutical->contained_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductPharmaceutical->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPharmaceutical->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPharmaceutical->extension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical->extension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPharmaceutical->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPharmaceutical->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPharmaceutical->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPharmaceutical->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "identifier");
	if(cjson_identifier)
	{
		result_MedicinalProductPharmaceutical->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MedicinalProductPharmaceutical->identifier = PushArray(arena, Identifier, result_MedicinalProductPharmaceutical->identifier_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MedicinalProductPharmaceutical->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_administrableDoseForm =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "administrableDoseForm");
	if(cjson_administrableDoseForm)
	{
		result_MedicinalProductPharmaceutical->administrableDoseForm = Deserialize_CodeableConcept(arena, cjson_administrableDoseForm);
	}
	cJSON *cjson_unitOfPresentation =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "unitOfPresentation");
	if(cjson_unitOfPresentation)
	{
		result_MedicinalProductPharmaceutical->unitOfPresentation = Deserialize_CodeableConcept(arena, cjson_unitOfPresentation);
	}
	cJSON *cjson_ingredient =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "ingredient");
	if(cjson_ingredient)
	{
		result_MedicinalProductPharmaceutical->ingredient_count = cJSON_GetArraySize(cjson_ingredient);
		result_MedicinalProductPharmaceutical->ingredient = PushArray(arena, Reference, result_MedicinalProductPharmaceutical->ingredient_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->ingredient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_ingredient, i);
			result_MedicinalProductPharmaceutical->ingredient[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_device =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "device");
	if(cjson_device)
	{
		result_MedicinalProductPharmaceutical->device_count = cJSON_GetArraySize(cjson_device);
		result_MedicinalProductPharmaceutical->device = PushArray(arena, Reference, result_MedicinalProductPharmaceutical->device_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->device_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_device, i);
			result_MedicinalProductPharmaceutical->device[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_characteristics =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "characteristics");
	if(cjson_characteristics)
	{
		result_MedicinalProductPharmaceutical->characteristics_count = cJSON_GetArraySize(cjson_characteristics);
		result_MedicinalProductPharmaceutical->characteristics = PushArray(arena, MedicinalProductPharmaceutical_Characteristics, result_MedicinalProductPharmaceutical->characteristics_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->characteristics_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_characteristics, i);
			result_MedicinalProductPharmaceutical->characteristics[i] = *Deserialize_MedicinalProductPharmaceutical_Characteristics(arena, internal);
		}

	}
	cJSON *cjson_routeOfAdministration =  cJSON_GetObjectItem(medicinalProductPharmaceutical, "routeOfAdministration");
	if(cjson_routeOfAdministration)
	{
		result_MedicinalProductPharmaceutical->routeOfAdministration_count = cJSON_GetArraySize(cjson_routeOfAdministration);
		result_MedicinalProductPharmaceutical->routeOfAdministration = PushArray(arena, MedicinalProductPharmaceutical_RouteOfAdministration, result_MedicinalProductPharmaceutical->routeOfAdministration_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical->routeOfAdministration_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_routeOfAdministration, i);
			result_MedicinalProductPharmaceutical->routeOfAdministration[i] = *Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration(arena, internal);
		}

	}
	return result_MedicinalProductPharmaceutical;
}

MedicinalProductPharmaceutical_Characteristics*
Deserialize_MedicinalProductPharmaceutical_Characteristics(Arena *arena, cJSON *medicinalProductPharmaceutical_Characteristics)
{
	MedicinalProductPharmaceutical_Characteristics *result_MedicinalProductPharmaceutical_Characteristics = PushArray(arena, MedicinalProductPharmaceutical_Characteristics, 1);
	result_MedicinalProductPharmaceutical_Characteristics->resourceType = ResourceType::MedicinalProductPharmaceutical_Characteristics;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPharmaceutical_Characteristics, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPharmaceutical_Characteristics, "id");
	if(cjson_id)
	{
		result_MedicinalProductPharmaceutical_Characteristics->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_Characteristics, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPharmaceutical_Characteristics->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPharmaceutical_Characteristics->extension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_Characteristics->extension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_Characteristics->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPharmaceutical_Characteristics->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_Characteristics, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPharmaceutical_Characteristics->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPharmaceutical_Characteristics->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_Characteristics->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_Characteristics->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPharmaceutical_Characteristics->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(medicinalProductPharmaceutical_Characteristics, "code");
	if(cjson_code)
	{
		result_MedicinalProductPharmaceutical_Characteristics->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(medicinalProductPharmaceutical_Characteristics, "status");
	if(cjson_status)
	{
		result_MedicinalProductPharmaceutical_Characteristics->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	return result_MedicinalProductPharmaceutical_Characteristics;
}

MedicinalProductPharmaceutical_RouteOfAdministration*
Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration(Arena *arena, cJSON *medicinalProductPharmaceutical_RouteOfAdministration)
{
	MedicinalProductPharmaceutical_RouteOfAdministration *result_MedicinalProductPharmaceutical_RouteOfAdministration = PushArray(arena, MedicinalProductPharmaceutical_RouteOfAdministration, 1);
	result_MedicinalProductPharmaceutical_RouteOfAdministration->resourceType = ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "id");
	if(cjson_id)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPharmaceutical_RouteOfAdministration->extension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_RouteOfAdministration->extension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPharmaceutical_RouteOfAdministration->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_RouteOfAdministration->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "code");
	if(cjson_code)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_firstDose =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "firstDose");
	if(cjson_firstDose)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->firstDose = Deserialize_Quantity(arena, cjson_firstDose);
	}
	cJSON *cjson_maxSingleDose =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "maxSingleDose");
	if(cjson_maxSingleDose)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->maxSingleDose = Deserialize_Quantity(arena, cjson_maxSingleDose);
	}
	cJSON *cjson_maxDosePerDay =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "maxDosePerDay");
	if(cjson_maxDosePerDay)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->maxDosePerDay = Deserialize_Quantity(arena, cjson_maxDosePerDay);
	}
	cJSON *cjson_maxDosePerTreatmentPeriod =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "maxDosePerTreatmentPeriod");
	if(cjson_maxDosePerTreatmentPeriod)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->maxDosePerTreatmentPeriod = Deserialize_Ratio(arena, cjson_maxDosePerTreatmentPeriod);
	}
	cJSON *cjson_maxTreatmentPeriod =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "maxTreatmentPeriod");
	if(cjson_maxTreatmentPeriod)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->maxTreatmentPeriod = Deserialize_Duration(arena, cjson_maxTreatmentPeriod);
	}
	cJSON *cjson_targetSpecies =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration, "targetSpecies");
	if(cjson_targetSpecies)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration->targetSpecies_count = cJSON_GetArraySize(cjson_targetSpecies);
		result_MedicinalProductPharmaceutical_RouteOfAdministration->targetSpecies = PushArray(arena, MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, result_MedicinalProductPharmaceutical_RouteOfAdministration->targetSpecies_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration->targetSpecies_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_targetSpecies, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration->targetSpecies[i] = *Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies(arena, internal);
		}

	}
	return result_MedicinalProductPharmaceutical_RouteOfAdministration;
}

MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies*
Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies(Arena *arena, cJSON *medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies)
{
	MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies *result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies = PushArray(arena, MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, 1);
	result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->resourceType = ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, "id");
	if(cjson_id)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, "code");
	if(cjson_code)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_withdrawalPeriod =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies, "withdrawalPeriod");
	if(cjson_withdrawalPeriod)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod_count = cJSON_GetArraySize(cjson_withdrawalPeriod);
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod = PushArray(arena, MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_withdrawalPeriod, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod[i] = *Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod(arena, internal);
		}

	}
	return result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies;
}

MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod*
Deserialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod(Arena *arena, cJSON *medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod)
{
	MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod *result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod = PushArray(arena, MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, 1);
	result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->resourceType = ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, "id");
	if(cjson_id)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension = PushArray(arena, Extension, result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_tissue =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, "tissue");
	if(cjson_tissue)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->tissue = Deserialize_CodeableConcept(arena, cjson_tissue);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, "value");
	if(cjson_value)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->value = Deserialize_Quantity(arena, cjson_value);
	}
	cJSON *cjson_supportingInformation =  cJSON_GetObjectItem(medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod, "supportingInformation");
	if(cjson_supportingInformation)
	{
		result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->supportingInformation = Str8C(cJSON_GetStringValue(cjson_supportingInformation));
	}
	return result_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod;
}

MedicinalProductUndesirableEffect*
Deserialize_MedicinalProductUndesirableEffect(Arena *arena, cJSON *medicinalProductUndesirableEffect)
{
	MedicinalProductUndesirableEffect *result_MedicinalProductUndesirableEffect = PushArray(arena, MedicinalProductUndesirableEffect, 1);
	result_MedicinalProductUndesirableEffect->resourceType = ResourceType::MedicinalProductUndesirableEffect;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "id");
	if(cjson_id)
	{
		result_MedicinalProductUndesirableEffect->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "meta");
	if(cjson_meta)
	{
		result_MedicinalProductUndesirableEffect->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MedicinalProductUndesirableEffect->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "language");
	if(cjson_language)
	{
		result_MedicinalProductUndesirableEffect->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "text");
	if(cjson_text)
	{
		result_MedicinalProductUndesirableEffect->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "contained");
	if(cjson_contained)
	{
		result_MedicinalProductUndesirableEffect->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MedicinalProductUndesirableEffect->contained = PushArray(arena, Resource, result_MedicinalProductUndesirableEffect->contained_count);
		for(int i = 0; i < result_MedicinalProductUndesirableEffect->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MedicinalProductUndesirableEffect->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "extension");
	if(cjson_extension)
	{
		result_MedicinalProductUndesirableEffect->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MedicinalProductUndesirableEffect->extension = PushArray(arena, Extension, result_MedicinalProductUndesirableEffect->extension_count);
		for(int i = 0; i < result_MedicinalProductUndesirableEffect->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MedicinalProductUndesirableEffect->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MedicinalProductUndesirableEffect->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MedicinalProductUndesirableEffect->modifierExtension = PushArray(arena, Extension, result_MedicinalProductUndesirableEffect->modifierExtension_count);
		for(int i = 0; i < result_MedicinalProductUndesirableEffect->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MedicinalProductUndesirableEffect->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "subject");
	if(cjson_subject)
	{
		result_MedicinalProductUndesirableEffect->subject_count = cJSON_GetArraySize(cjson_subject);
		result_MedicinalProductUndesirableEffect->subject = PushArray(arena, Reference, result_MedicinalProductUndesirableEffect->subject_count);
		for(int i = 0; i < result_MedicinalProductUndesirableEffect->subject_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subject, i);
			result_MedicinalProductUndesirableEffect->subject[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_symptomConditionEffect =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "symptomConditionEffect");
	if(cjson_symptomConditionEffect)
	{
		result_MedicinalProductUndesirableEffect->symptomConditionEffect = Deserialize_CodeableConcept(arena, cjson_symptomConditionEffect);
	}
	cJSON *cjson_classification =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "classification");
	if(cjson_classification)
	{
		result_MedicinalProductUndesirableEffect->classification = Deserialize_CodeableConcept(arena, cjson_classification);
	}
	cJSON *cjson_frequencyOfOccurrence =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "frequencyOfOccurrence");
	if(cjson_frequencyOfOccurrence)
	{
		result_MedicinalProductUndesirableEffect->frequencyOfOccurrence = Deserialize_CodeableConcept(arena, cjson_frequencyOfOccurrence);
	}
	cJSON *cjson_population =  cJSON_GetObjectItem(medicinalProductUndesirableEffect, "population");
	if(cjson_population)
	{
		result_MedicinalProductUndesirableEffect->population_count = cJSON_GetArraySize(cjson_population);
		result_MedicinalProductUndesirableEffect->population = PushArray(arena, Population, result_MedicinalProductUndesirableEffect->population_count);
		for(int i = 0; i < result_MedicinalProductUndesirableEffect->population_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_population, i);
			result_MedicinalProductUndesirableEffect->population[i] = *Deserialize_Population(arena, internal);
		}

	}
	return result_MedicinalProductUndesirableEffect;
}

MessageDefinition*
Deserialize_MessageDefinition(Arena *arena, cJSON *messageDefinition)
{
	MessageDefinition *result_MessageDefinition = PushArray(arena, MessageDefinition, 1);
	result_MessageDefinition->resourceType = ResourceType::MessageDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(messageDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(messageDefinition, "id");
	if(cjson_id)
	{
		result_MessageDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(messageDefinition, "meta");
	if(cjson_meta)
	{
		result_MessageDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(messageDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MessageDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(messageDefinition, "language");
	if(cjson_language)
	{
		result_MessageDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(messageDefinition, "text");
	if(cjson_text)
	{
		result_MessageDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(messageDefinition, "contained");
	if(cjson_contained)
	{
		result_MessageDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MessageDefinition->contained = PushArray(arena, Resource, result_MessageDefinition->contained_count);
		for(int i = 0; i < result_MessageDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MessageDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(messageDefinition, "extension");
	if(cjson_extension)
	{
		result_MessageDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MessageDefinition->extension = PushArray(arena, Extension, result_MessageDefinition->extension_count);
		for(int i = 0; i < result_MessageDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MessageDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(messageDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MessageDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MessageDefinition->modifierExtension = PushArray(arena, Extension, result_MessageDefinition->modifierExtension_count);
		for(int i = 0; i < result_MessageDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MessageDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(messageDefinition, "url");
	if(cjson_url)
	{
		result_MessageDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(messageDefinition, "identifier");
	if(cjson_identifier)
	{
		result_MessageDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MessageDefinition->identifier = PushArray(arena, Identifier, result_MessageDefinition->identifier_count);
		for(int i = 0; i < result_MessageDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MessageDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(messageDefinition, "version");
	if(cjson_version)
	{
		result_MessageDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(messageDefinition, "name");
	if(cjson_name)
	{
		result_MessageDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(messageDefinition, "title");
	if(cjson_title)
	{
		result_MessageDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_replaces =  cJSON_GetObjectItem(messageDefinition, "replaces");
	if(cjson_replaces)
	{
		result_MessageDefinition->replaces_count = cJSON_GetArraySize(cjson_replaces);
		result_MessageDefinition->replaces = PushArray(arena, fhir_canonical, result_MessageDefinition->replaces_count);
		for(int i = 0; i < result_MessageDefinition->replaces_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_replaces, i);
			result_MessageDefinition->replaces[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(messageDefinition, "status");
	if(cjson_status)
	{
		result_MessageDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(messageDefinition, "experimental");
	if(cjson_experimental)
	{
		result_MessageDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(messageDefinition, "date");
	if(cjson_date)
	{
		result_MessageDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(messageDefinition, "publisher");
	if(cjson_publisher)
	{
		result_MessageDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(messageDefinition, "contact");
	if(cjson_contact)
	{
		result_MessageDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_MessageDefinition->contact = PushArray(arena, ContactDetail, result_MessageDefinition->contact_count);
		for(int i = 0; i < result_MessageDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_MessageDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(messageDefinition, "description");
	if(cjson_description)
	{
		result_MessageDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(messageDefinition, "useContext");
	if(cjson_useContext)
	{
		result_MessageDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_MessageDefinition->useContext = PushArray(arena, UsageContext, result_MessageDefinition->useContext_count);
		for(int i = 0; i < result_MessageDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_MessageDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(messageDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_MessageDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_MessageDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_MessageDefinition->jurisdiction_count);
		for(int i = 0; i < result_MessageDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_MessageDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(messageDefinition, "purpose");
	if(cjson_purpose)
	{
		result_MessageDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(messageDefinition, "copyright");
	if(cjson_copyright)
	{
		result_MessageDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_base =  cJSON_GetObjectItem(messageDefinition, "base");
	if(cjson_base)
	{
		result_MessageDefinition->base = Str8C(cJSON_GetStringValue(cjson_base));
	}
	cJSON *cjson_parent =  cJSON_GetObjectItem(messageDefinition, "parent");
	if(cjson_parent)
	{
		result_MessageDefinition->parent_count = cJSON_GetArraySize(cjson_parent);
		result_MessageDefinition->parent = PushArray(arena, fhir_canonical, result_MessageDefinition->parent_count);
		for(int i = 0; i < result_MessageDefinition->parent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parent, i);
			result_MessageDefinition->parent[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	if((bool)cJSON_HasObjectItem(messageDefinition, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(messageDefinition, "valueCoding");
		result_MessageDefinition->event.valueCoding = Deserialize_Coding(arena, item);
		result_MessageDefinition->event_type = MessageDefinition::EventType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(messageDefinition, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(messageDefinition, "valueUri");
		result_MessageDefinition->event.valueUri = Str8C(cJSON_GetStringValue(item));
		result_MessageDefinition->event_type = MessageDefinition::EventType::fhir_uri;
	}


	cJSON *cjson_category =  cJSON_GetObjectItem(messageDefinition, "category");
	if(cjson_category)
	{
		result_MessageDefinition->category = Str8C(cJSON_GetStringValue(cjson_category));
	}
	cJSON *cjson_focus =  cJSON_GetObjectItem(messageDefinition, "focus");
	if(cjson_focus)
	{
		result_MessageDefinition->focus_count = cJSON_GetArraySize(cjson_focus);
		result_MessageDefinition->focus = PushArray(arena, MessageDefinition_Focus, result_MessageDefinition->focus_count);
		for(int i = 0; i < result_MessageDefinition->focus_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_focus, i);
			result_MessageDefinition->focus[i] = *Deserialize_MessageDefinition_Focus(arena, internal);
		}

	}
	cJSON *cjson_responseRequired =  cJSON_GetObjectItem(messageDefinition, "responseRequired");
	if(cjson_responseRequired)
	{
		result_MessageDefinition->responseRequired = Str8C(cJSON_GetStringValue(cjson_responseRequired));
	}
	cJSON *cjson_allowedResponse =  cJSON_GetObjectItem(messageDefinition, "allowedResponse");
	if(cjson_allowedResponse)
	{
		result_MessageDefinition->allowedResponse_count = cJSON_GetArraySize(cjson_allowedResponse);
		result_MessageDefinition->allowedResponse = PushArray(arena, MessageDefinition_AllowedResponse, result_MessageDefinition->allowedResponse_count);
		for(int i = 0; i < result_MessageDefinition->allowedResponse_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_allowedResponse, i);
			result_MessageDefinition->allowedResponse[i] = *Deserialize_MessageDefinition_AllowedResponse(arena, internal);
		}

	}
	cJSON *cjson_graph =  cJSON_GetObjectItem(messageDefinition, "graph");
	if(cjson_graph)
	{
		result_MessageDefinition->graph_count = cJSON_GetArraySize(cjson_graph);
		result_MessageDefinition->graph = PushArray(arena, fhir_canonical, result_MessageDefinition->graph_count);
		for(int i = 0; i < result_MessageDefinition->graph_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_graph, i);
			result_MessageDefinition->graph[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_MessageDefinition;
}

MessageDefinition_Focus*
Deserialize_MessageDefinition_Focus(Arena *arena, cJSON *messageDefinition_Focus)
{
	MessageDefinition_Focus *result_MessageDefinition_Focus = PushArray(arena, MessageDefinition_Focus, 1);
	result_MessageDefinition_Focus->resourceType = ResourceType::MessageDefinition_Focus;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(messageDefinition_Focus, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(messageDefinition_Focus, "id");
	if(cjson_id)
	{
		result_MessageDefinition_Focus->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(messageDefinition_Focus, "extension");
	if(cjson_extension)
	{
		result_MessageDefinition_Focus->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MessageDefinition_Focus->extension = PushArray(arena, Extension, result_MessageDefinition_Focus->extension_count);
		for(int i = 0; i < result_MessageDefinition_Focus->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MessageDefinition_Focus->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(messageDefinition_Focus, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MessageDefinition_Focus->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MessageDefinition_Focus->modifierExtension = PushArray(arena, Extension, result_MessageDefinition_Focus->modifierExtension_count);
		for(int i = 0; i < result_MessageDefinition_Focus->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MessageDefinition_Focus->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(messageDefinition_Focus, "code");
	if(cjson_code)
	{
		result_MessageDefinition_Focus->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(messageDefinition_Focus, "profile");
	if(cjson_profile)
	{
		result_MessageDefinition_Focus->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	cJSON *cjson_min =  cJSON_GetObjectItem(messageDefinition_Focus, "min");
	if(cjson_min)
	{
		result_MessageDefinition_Focus->min = (int)cJSON_GetNumberValue(cjson_min);
	}
	cJSON *cjson_max =  cJSON_GetObjectItem(messageDefinition_Focus, "max");
	if(cjson_max)
	{
		result_MessageDefinition_Focus->max = Str8C(cJSON_GetStringValue(cjson_max));
	}
	return result_MessageDefinition_Focus;
}

MessageDefinition_AllowedResponse*
Deserialize_MessageDefinition_AllowedResponse(Arena *arena, cJSON *messageDefinition_AllowedResponse)
{
	MessageDefinition_AllowedResponse *result_MessageDefinition_AllowedResponse = PushArray(arena, MessageDefinition_AllowedResponse, 1);
	result_MessageDefinition_AllowedResponse->resourceType = ResourceType::MessageDefinition_AllowedResponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(messageDefinition_AllowedResponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(messageDefinition_AllowedResponse, "id");
	if(cjson_id)
	{
		result_MessageDefinition_AllowedResponse->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(messageDefinition_AllowedResponse, "extension");
	if(cjson_extension)
	{
		result_MessageDefinition_AllowedResponse->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MessageDefinition_AllowedResponse->extension = PushArray(arena, Extension, result_MessageDefinition_AllowedResponse->extension_count);
		for(int i = 0; i < result_MessageDefinition_AllowedResponse->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MessageDefinition_AllowedResponse->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(messageDefinition_AllowedResponse, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MessageDefinition_AllowedResponse->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MessageDefinition_AllowedResponse->modifierExtension = PushArray(arena, Extension, result_MessageDefinition_AllowedResponse->modifierExtension_count);
		for(int i = 0; i < result_MessageDefinition_AllowedResponse->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MessageDefinition_AllowedResponse->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_message =  cJSON_GetObjectItem(messageDefinition_AllowedResponse, "message");
	if(cjson_message)
	{
		result_MessageDefinition_AllowedResponse->message = Str8C(cJSON_GetStringValue(cjson_message));
	}
	cJSON *cjson_situation =  cJSON_GetObjectItem(messageDefinition_AllowedResponse, "situation");
	if(cjson_situation)
	{
		result_MessageDefinition_AllowedResponse->situation = Str8C(cJSON_GetStringValue(cjson_situation));
	}
	return result_MessageDefinition_AllowedResponse;
}

MessageHeader*
Deserialize_MessageHeader(Arena *arena, cJSON *messageHeader)
{
	MessageHeader *result_MessageHeader = PushArray(arena, MessageHeader, 1);
	result_MessageHeader->resourceType = ResourceType::MessageHeader;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(messageHeader, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(messageHeader, "id");
	if(cjson_id)
	{
		result_MessageHeader->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(messageHeader, "meta");
	if(cjson_meta)
	{
		result_MessageHeader->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(messageHeader, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MessageHeader->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(messageHeader, "language");
	if(cjson_language)
	{
		result_MessageHeader->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(messageHeader, "text");
	if(cjson_text)
	{
		result_MessageHeader->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(messageHeader, "contained");
	if(cjson_contained)
	{
		result_MessageHeader->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MessageHeader->contained = PushArray(arena, Resource, result_MessageHeader->contained_count);
		for(int i = 0; i < result_MessageHeader->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MessageHeader->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(messageHeader, "extension");
	if(cjson_extension)
	{
		result_MessageHeader->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MessageHeader->extension = PushArray(arena, Extension, result_MessageHeader->extension_count);
		for(int i = 0; i < result_MessageHeader->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MessageHeader->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(messageHeader, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MessageHeader->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MessageHeader->modifierExtension = PushArray(arena, Extension, result_MessageHeader->modifierExtension_count);
		for(int i = 0; i < result_MessageHeader->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MessageHeader->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(messageHeader, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(messageHeader, "valueCoding");
		result_MessageHeader->event.valueCoding = Deserialize_Coding(arena, item);
		result_MessageHeader->event_type = MessageHeader::EventType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(messageHeader, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(messageHeader, "valueUri");
		result_MessageHeader->event.valueUri = Str8C(cJSON_GetStringValue(item));
		result_MessageHeader->event_type = MessageHeader::EventType::fhir_uri;
	}


	cJSON *cjson_destination =  cJSON_GetObjectItem(messageHeader, "destination");
	if(cjson_destination)
	{
		result_MessageHeader->destination_count = cJSON_GetArraySize(cjson_destination);
		result_MessageHeader->destination = PushArray(arena, MessageHeader_Destination, result_MessageHeader->destination_count);
		for(int i = 0; i < result_MessageHeader->destination_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_destination, i);
			result_MessageHeader->destination[i] = *Deserialize_MessageHeader_Destination(arena, internal);
		}

	}
	cJSON *cjson_sender =  cJSON_GetObjectItem(messageHeader, "sender");
	if(cjson_sender)
	{
		result_MessageHeader->sender = Deserialize_Reference(arena, cjson_sender);
	}
	cJSON *cjson_enterer =  cJSON_GetObjectItem(messageHeader, "enterer");
	if(cjson_enterer)
	{
		result_MessageHeader->enterer = Deserialize_Reference(arena, cjson_enterer);
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(messageHeader, "author");
	if(cjson_author)
	{
		result_MessageHeader->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(messageHeader, "source");
	if(cjson_source)
	{
		result_MessageHeader->source = Deserialize_MessageHeader_Source(arena, cjson_source);
	}
	cJSON *cjson_responsible =  cJSON_GetObjectItem(messageHeader, "responsible");
	if(cjson_responsible)
	{
		result_MessageHeader->responsible = Deserialize_Reference(arena, cjson_responsible);
	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(messageHeader, "reason");
	if(cjson_reason)
	{
		result_MessageHeader->reason = Deserialize_CodeableConcept(arena, cjson_reason);
	}
	cJSON *cjson_response =  cJSON_GetObjectItem(messageHeader, "response");
	if(cjson_response)
	{
		result_MessageHeader->response = Deserialize_MessageHeader_Response(arena, cjson_response);
	}
	cJSON *cjson_focus =  cJSON_GetObjectItem(messageHeader, "focus");
	if(cjson_focus)
	{
		result_MessageHeader->focus_count = cJSON_GetArraySize(cjson_focus);
		result_MessageHeader->focus = PushArray(arena, Reference, result_MessageHeader->focus_count);
		for(int i = 0; i < result_MessageHeader->focus_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_focus, i);
			result_MessageHeader->focus[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(messageHeader, "definition");
	if(cjson_definition)
	{
		result_MessageHeader->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	return result_MessageHeader;
}

MessageHeader_Destination*
Deserialize_MessageHeader_Destination(Arena *arena, cJSON *messageHeader_Destination)
{
	MessageHeader_Destination *result_MessageHeader_Destination = PushArray(arena, MessageHeader_Destination, 1);
	result_MessageHeader_Destination->resourceType = ResourceType::MessageHeader_Destination;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(messageHeader_Destination, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(messageHeader_Destination, "id");
	if(cjson_id)
	{
		result_MessageHeader_Destination->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(messageHeader_Destination, "extension");
	if(cjson_extension)
	{
		result_MessageHeader_Destination->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MessageHeader_Destination->extension = PushArray(arena, Extension, result_MessageHeader_Destination->extension_count);
		for(int i = 0; i < result_MessageHeader_Destination->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MessageHeader_Destination->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(messageHeader_Destination, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MessageHeader_Destination->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MessageHeader_Destination->modifierExtension = PushArray(arena, Extension, result_MessageHeader_Destination->modifierExtension_count);
		for(int i = 0; i < result_MessageHeader_Destination->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MessageHeader_Destination->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(messageHeader_Destination, "name");
	if(cjson_name)
	{
		result_MessageHeader_Destination->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_target =  cJSON_GetObjectItem(messageHeader_Destination, "target");
	if(cjson_target)
	{
		result_MessageHeader_Destination->target = Deserialize_Reference(arena, cjson_target);
	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(messageHeader_Destination, "endpoint");
	if(cjson_endpoint)
	{
		result_MessageHeader_Destination->endpoint = Str8C(cJSON_GetStringValue(cjson_endpoint));
	}
	cJSON *cjson_receiver =  cJSON_GetObjectItem(messageHeader_Destination, "receiver");
	if(cjson_receiver)
	{
		result_MessageHeader_Destination->receiver = Deserialize_Reference(arena, cjson_receiver);
	}
	return result_MessageHeader_Destination;
}

MessageHeader_Source*
Deserialize_MessageHeader_Source(Arena *arena, cJSON *messageHeader_Source)
{
	MessageHeader_Source *result_MessageHeader_Source = PushArray(arena, MessageHeader_Source, 1);
	result_MessageHeader_Source->resourceType = ResourceType::MessageHeader_Source;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(messageHeader_Source, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(messageHeader_Source, "id");
	if(cjson_id)
	{
		result_MessageHeader_Source->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(messageHeader_Source, "extension");
	if(cjson_extension)
	{
		result_MessageHeader_Source->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MessageHeader_Source->extension = PushArray(arena, Extension, result_MessageHeader_Source->extension_count);
		for(int i = 0; i < result_MessageHeader_Source->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MessageHeader_Source->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(messageHeader_Source, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MessageHeader_Source->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MessageHeader_Source->modifierExtension = PushArray(arena, Extension, result_MessageHeader_Source->modifierExtension_count);
		for(int i = 0; i < result_MessageHeader_Source->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MessageHeader_Source->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(messageHeader_Source, "name");
	if(cjson_name)
	{
		result_MessageHeader_Source->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_software =  cJSON_GetObjectItem(messageHeader_Source, "software");
	if(cjson_software)
	{
		result_MessageHeader_Source->software = Str8C(cJSON_GetStringValue(cjson_software));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(messageHeader_Source, "version");
	if(cjson_version)
	{
		result_MessageHeader_Source->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(messageHeader_Source, "contact");
	if(cjson_contact)
	{
		result_MessageHeader_Source->contact = Deserialize_ContactPoint(arena, cjson_contact);
	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(messageHeader_Source, "endpoint");
	if(cjson_endpoint)
	{
		result_MessageHeader_Source->endpoint = Str8C(cJSON_GetStringValue(cjson_endpoint));
	}
	return result_MessageHeader_Source;
}

MessageHeader_Response*
Deserialize_MessageHeader_Response(Arena *arena, cJSON *messageHeader_Response)
{
	MessageHeader_Response *result_MessageHeader_Response = PushArray(arena, MessageHeader_Response, 1);
	result_MessageHeader_Response->resourceType = ResourceType::MessageHeader_Response;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(messageHeader_Response, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(messageHeader_Response, "id");
	if(cjson_id)
	{
		result_MessageHeader_Response->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(messageHeader_Response, "extension");
	if(cjson_extension)
	{
		result_MessageHeader_Response->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MessageHeader_Response->extension = PushArray(arena, Extension, result_MessageHeader_Response->extension_count);
		for(int i = 0; i < result_MessageHeader_Response->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MessageHeader_Response->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(messageHeader_Response, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MessageHeader_Response->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MessageHeader_Response->modifierExtension = PushArray(arena, Extension, result_MessageHeader_Response->modifierExtension_count);
		for(int i = 0; i < result_MessageHeader_Response->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MessageHeader_Response->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(messageHeader_Response, "identifier");
	if(cjson_identifier)
	{
		result_MessageHeader_Response->identifier = Str8C(cJSON_GetStringValue(cjson_identifier));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(messageHeader_Response, "code");
	if(cjson_code)
	{
		result_MessageHeader_Response->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_details =  cJSON_GetObjectItem(messageHeader_Response, "details");
	if(cjson_details)
	{
		result_MessageHeader_Response->details = Deserialize_Reference(arena, cjson_details);
	}
	return result_MessageHeader_Response;
}

MolecularSequence*
Deserialize_MolecularSequence(Arena *arena, cJSON *molecularSequence)
{
	MolecularSequence *result_MolecularSequence = PushArray(arena, MolecularSequence, 1);
	result_MolecularSequence->resourceType = ResourceType::MolecularSequence;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence, "id");
	if(cjson_id)
	{
		result_MolecularSequence->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(molecularSequence, "meta");
	if(cjson_meta)
	{
		result_MolecularSequence->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(molecularSequence, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MolecularSequence->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(molecularSequence, "language");
	if(cjson_language)
	{
		result_MolecularSequence->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(molecularSequence, "text");
	if(cjson_text)
	{
		result_MolecularSequence->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(molecularSequence, "contained");
	if(cjson_contained)
	{
		result_MolecularSequence->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MolecularSequence->contained = PushArray(arena, Resource, result_MolecularSequence->contained_count);
		for(int i = 0; i < result_MolecularSequence->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MolecularSequence->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence->extension = PushArray(arena, Extension, result_MolecularSequence->extension_count);
		for(int i = 0; i < result_MolecularSequence->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence->modifierExtension = PushArray(arena, Extension, result_MolecularSequence->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(molecularSequence, "identifier");
	if(cjson_identifier)
	{
		result_MolecularSequence->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_MolecularSequence->identifier = PushArray(arena, Identifier, result_MolecularSequence->identifier_count);
		for(int i = 0; i < result_MolecularSequence->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_MolecularSequence->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(molecularSequence, "type");
	if(cjson_type)
	{
		result_MolecularSequence->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_coordinateSystem =  cJSON_GetObjectItem(molecularSequence, "coordinateSystem");
	if(cjson_coordinateSystem)
	{
		result_MolecularSequence->coordinateSystem = Deserialize_Integer(arena, cjson_coordinateSystem);
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(molecularSequence, "patient");
	if(cjson_patient)
	{
		result_MolecularSequence->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_specimen =  cJSON_GetObjectItem(molecularSequence, "specimen");
	if(cjson_specimen)
	{
		result_MolecularSequence->specimen = Deserialize_Reference(arena, cjson_specimen);
	}
	cJSON *cjson_device =  cJSON_GetObjectItem(molecularSequence, "device");
	if(cjson_device)
	{
		result_MolecularSequence->device = Deserialize_Reference(arena, cjson_device);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(molecularSequence, "performer");
	if(cjson_performer)
	{
		result_MolecularSequence->performer = Deserialize_Reference(arena, cjson_performer);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(molecularSequence, "quantity");
	if(cjson_quantity)
	{
		result_MolecularSequence->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_referenceSeq =  cJSON_GetObjectItem(molecularSequence, "referenceSeq");
	if(cjson_referenceSeq)
	{
		result_MolecularSequence->referenceSeq = Deserialize_MolecularSequence_ReferenceSeq(arena, cjson_referenceSeq);
	}
	cJSON *cjson_variant =  cJSON_GetObjectItem(molecularSequence, "variant");
	if(cjson_variant)
	{
		result_MolecularSequence->variant_count = cJSON_GetArraySize(cjson_variant);
		result_MolecularSequence->variant = PushArray(arena, MolecularSequence_Variant, result_MolecularSequence->variant_count);
		for(int i = 0; i < result_MolecularSequence->variant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_variant, i);
			result_MolecularSequence->variant[i] = *Deserialize_MolecularSequence_Variant(arena, internal);
		}

	}
	cJSON *cjson_observedSeq =  cJSON_GetObjectItem(molecularSequence, "observedSeq");
	if(cjson_observedSeq)
	{
		result_MolecularSequence->observedSeq = Str8C(cJSON_GetStringValue(cjson_observedSeq));
	}
	cJSON *cjson_quality =  cJSON_GetObjectItem(molecularSequence, "quality");
	if(cjson_quality)
	{
		result_MolecularSequence->quality_count = cJSON_GetArraySize(cjson_quality);
		result_MolecularSequence->quality = PushArray(arena, MolecularSequence_Quality, result_MolecularSequence->quality_count);
		for(int i = 0; i < result_MolecularSequence->quality_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_quality, i);
			result_MolecularSequence->quality[i] = *Deserialize_MolecularSequence_Quality(arena, internal);
		}

	}
	cJSON *cjson_readCoverage =  cJSON_GetObjectItem(molecularSequence, "readCoverage");
	if(cjson_readCoverage)
	{
		result_MolecularSequence->readCoverage = Deserialize_Integer(arena, cjson_readCoverage);
	}
	cJSON *cjson_repository =  cJSON_GetObjectItem(molecularSequence, "repository");
	if(cjson_repository)
	{
		result_MolecularSequence->repository_count = cJSON_GetArraySize(cjson_repository);
		result_MolecularSequence->repository = PushArray(arena, MolecularSequence_Repository, result_MolecularSequence->repository_count);
		for(int i = 0; i < result_MolecularSequence->repository_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_repository, i);
			result_MolecularSequence->repository[i] = *Deserialize_MolecularSequence_Repository(arena, internal);
		}

	}
	cJSON *cjson_pointer =  cJSON_GetObjectItem(molecularSequence, "pointer");
	if(cjson_pointer)
	{
		result_MolecularSequence->pointer_count = cJSON_GetArraySize(cjson_pointer);
		result_MolecularSequence->pointer = PushArray(arena, Reference, result_MolecularSequence->pointer_count);
		for(int i = 0; i < result_MolecularSequence->pointer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_pointer, i);
			result_MolecularSequence->pointer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_structureVariant =  cJSON_GetObjectItem(molecularSequence, "structureVariant");
	if(cjson_structureVariant)
	{
		result_MolecularSequence->structureVariant_count = cJSON_GetArraySize(cjson_structureVariant);
		result_MolecularSequence->structureVariant = PushArray(arena, MolecularSequence_StructureVariant, result_MolecularSequence->structureVariant_count);
		for(int i = 0; i < result_MolecularSequence->structureVariant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_structureVariant, i);
			result_MolecularSequence->structureVariant[i] = *Deserialize_MolecularSequence_StructureVariant(arena, internal);
		}

	}
	return result_MolecularSequence;
}

MolecularSequence_ReferenceSeq*
Deserialize_MolecularSequence_ReferenceSeq(Arena *arena, cJSON *molecularSequence_ReferenceSeq)
{
	MolecularSequence_ReferenceSeq *result_MolecularSequence_ReferenceSeq = PushArray(arena, MolecularSequence_ReferenceSeq, 1);
	result_MolecularSequence_ReferenceSeq->resourceType = ResourceType::MolecularSequence_ReferenceSeq;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "id");
	if(cjson_id)
	{
		result_MolecularSequence_ReferenceSeq->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_ReferenceSeq->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_ReferenceSeq->extension = PushArray(arena, Extension, result_MolecularSequence_ReferenceSeq->extension_count);
		for(int i = 0; i < result_MolecularSequence_ReferenceSeq->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_ReferenceSeq->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_ReferenceSeq->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_ReferenceSeq->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_ReferenceSeq->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_ReferenceSeq->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_ReferenceSeq->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_chromosome =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "chromosome");
	if(cjson_chromosome)
	{
		result_MolecularSequence_ReferenceSeq->chromosome = Deserialize_CodeableConcept(arena, cjson_chromosome);
	}
	cJSON *cjson_genomeBuild =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "genomeBuild");
	if(cjson_genomeBuild)
	{
		result_MolecularSequence_ReferenceSeq->genomeBuild = Str8C(cJSON_GetStringValue(cjson_genomeBuild));
	}
	cJSON *cjson_orientation =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "orientation");
	if(cjson_orientation)
	{
		result_MolecularSequence_ReferenceSeq->orientation = Str8C(cJSON_GetStringValue(cjson_orientation));
	}
	cJSON *cjson_referenceSeqId =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "referenceSeqId");
	if(cjson_referenceSeqId)
	{
		result_MolecularSequence_ReferenceSeq->referenceSeqId = Deserialize_CodeableConcept(arena, cjson_referenceSeqId);
	}
	cJSON *cjson_referenceSeqPointer =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "referenceSeqPointer");
	if(cjson_referenceSeqPointer)
	{
		result_MolecularSequence_ReferenceSeq->referenceSeqPointer = Deserialize_Reference(arena, cjson_referenceSeqPointer);
	}
	cJSON *cjson_referenceSeqString =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "referenceSeqString");
	if(cjson_referenceSeqString)
	{
		result_MolecularSequence_ReferenceSeq->referenceSeqString = Str8C(cJSON_GetStringValue(cjson_referenceSeqString));
	}
	cJSON *cjson_strand =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "strand");
	if(cjson_strand)
	{
		result_MolecularSequence_ReferenceSeq->strand = Str8C(cJSON_GetStringValue(cjson_strand));
	}
	cJSON *cjson_windowStart =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "windowStart");
	if(cjson_windowStart)
	{
		result_MolecularSequence_ReferenceSeq->windowStart = Deserialize_Integer(arena, cjson_windowStart);
	}
	cJSON *cjson_windowEnd =  cJSON_GetObjectItem(molecularSequence_ReferenceSeq, "windowEnd");
	if(cjson_windowEnd)
	{
		result_MolecularSequence_ReferenceSeq->windowEnd = Deserialize_Integer(arena, cjson_windowEnd);
	}
	return result_MolecularSequence_ReferenceSeq;
}

MolecularSequence_Variant*
Deserialize_MolecularSequence_Variant(Arena *arena, cJSON *molecularSequence_Variant)
{
	MolecularSequence_Variant *result_MolecularSequence_Variant = PushArray(arena, MolecularSequence_Variant, 1);
	result_MolecularSequence_Variant->resourceType = ResourceType::MolecularSequence_Variant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_Variant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_Variant, "id");
	if(cjson_id)
	{
		result_MolecularSequence_Variant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_Variant, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_Variant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_Variant->extension = PushArray(arena, Extension, result_MolecularSequence_Variant->extension_count);
		for(int i = 0; i < result_MolecularSequence_Variant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_Variant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_Variant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_Variant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_Variant->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_Variant->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_Variant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_Variant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_start =  cJSON_GetObjectItem(molecularSequence_Variant, "start");
	if(cjson_start)
	{
		result_MolecularSequence_Variant->start = Deserialize_Integer(arena, cjson_start);
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(molecularSequence_Variant, "end");
	if(cjson_end)
	{
		result_MolecularSequence_Variant->end = Deserialize_Integer(arena, cjson_end);
	}
	cJSON *cjson_observedAllele =  cJSON_GetObjectItem(molecularSequence_Variant, "observedAllele");
	if(cjson_observedAllele)
	{
		result_MolecularSequence_Variant->observedAllele = Str8C(cJSON_GetStringValue(cjson_observedAllele));
	}
	cJSON *cjson_referenceAllele =  cJSON_GetObjectItem(molecularSequence_Variant, "referenceAllele");
	if(cjson_referenceAllele)
	{
		result_MolecularSequence_Variant->referenceAllele = Str8C(cJSON_GetStringValue(cjson_referenceAllele));
	}
	cJSON *cjson_cigar =  cJSON_GetObjectItem(molecularSequence_Variant, "cigar");
	if(cjson_cigar)
	{
		result_MolecularSequence_Variant->cigar = Str8C(cJSON_GetStringValue(cjson_cigar));
	}
	cJSON *cjson_variantPointer =  cJSON_GetObjectItem(molecularSequence_Variant, "variantPointer");
	if(cjson_variantPointer)
	{
		result_MolecularSequence_Variant->variantPointer = Deserialize_Reference(arena, cjson_variantPointer);
	}
	return result_MolecularSequence_Variant;
}

MolecularSequence_Quality*
Deserialize_MolecularSequence_Quality(Arena *arena, cJSON *molecularSequence_Quality)
{
	MolecularSequence_Quality *result_MolecularSequence_Quality = PushArray(arena, MolecularSequence_Quality, 1);
	result_MolecularSequence_Quality->resourceType = ResourceType::MolecularSequence_Quality;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_Quality, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_Quality, "id");
	if(cjson_id)
	{
		result_MolecularSequence_Quality->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_Quality, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_Quality->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_Quality->extension = PushArray(arena, Extension, result_MolecularSequence_Quality->extension_count);
		for(int i = 0; i < result_MolecularSequence_Quality->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_Quality->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_Quality, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_Quality->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_Quality->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_Quality->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_Quality->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_Quality->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(molecularSequence_Quality, "type");
	if(cjson_type)
	{
		result_MolecularSequence_Quality->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_standardSequence =  cJSON_GetObjectItem(molecularSequence_Quality, "standardSequence");
	if(cjson_standardSequence)
	{
		result_MolecularSequence_Quality->standardSequence = Deserialize_CodeableConcept(arena, cjson_standardSequence);
	}
	cJSON *cjson_start =  cJSON_GetObjectItem(molecularSequence_Quality, "start");
	if(cjson_start)
	{
		result_MolecularSequence_Quality->start = Deserialize_Integer(arena, cjson_start);
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(molecularSequence_Quality, "end");
	if(cjson_end)
	{
		result_MolecularSequence_Quality->end = Deserialize_Integer(arena, cjson_end);
	}
	cJSON *cjson_score =  cJSON_GetObjectItem(molecularSequence_Quality, "score");
	if(cjson_score)
	{
		result_MolecularSequence_Quality->score = Deserialize_Quantity(arena, cjson_score);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(molecularSequence_Quality, "method");
	if(cjson_method)
	{
		result_MolecularSequence_Quality->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_truthTP =  cJSON_GetObjectItem(molecularSequence_Quality, "truthTP");
	if(cjson_truthTP)
	{
		result_MolecularSequence_Quality->truthTP = cJSON_GetNumberValue(cjson_truthTP);
	}
	cJSON *cjson_queryTP =  cJSON_GetObjectItem(molecularSequence_Quality, "queryTP");
	if(cjson_queryTP)
	{
		result_MolecularSequence_Quality->queryTP = cJSON_GetNumberValue(cjson_queryTP);
	}
	cJSON *cjson_truthFN =  cJSON_GetObjectItem(molecularSequence_Quality, "truthFN");
	if(cjson_truthFN)
	{
		result_MolecularSequence_Quality->truthFN = cJSON_GetNumberValue(cjson_truthFN);
	}
	cJSON *cjson_queryFP =  cJSON_GetObjectItem(molecularSequence_Quality, "queryFP");
	if(cjson_queryFP)
	{
		result_MolecularSequence_Quality->queryFP = cJSON_GetNumberValue(cjson_queryFP);
	}
	cJSON *cjson_gtFP =  cJSON_GetObjectItem(molecularSequence_Quality, "gtFP");
	if(cjson_gtFP)
	{
		result_MolecularSequence_Quality->gtFP = cJSON_GetNumberValue(cjson_gtFP);
	}
	cJSON *cjson_precision =  cJSON_GetObjectItem(molecularSequence_Quality, "precision");
	if(cjson_precision)
	{
		result_MolecularSequence_Quality->precision = cJSON_GetNumberValue(cjson_precision);
	}
	cJSON *cjson_recall =  cJSON_GetObjectItem(molecularSequence_Quality, "recall");
	if(cjson_recall)
	{
		result_MolecularSequence_Quality->recall = cJSON_GetNumberValue(cjson_recall);
	}
	cJSON *cjson_fScore =  cJSON_GetObjectItem(molecularSequence_Quality, "fScore");
	if(cjson_fScore)
	{
		result_MolecularSequence_Quality->fScore = cJSON_GetNumberValue(cjson_fScore);
	}
	cJSON *cjson_roc =  cJSON_GetObjectItem(molecularSequence_Quality, "roc");
	if(cjson_roc)
	{
		result_MolecularSequence_Quality->roc = Deserialize_MolecularSequence_Quality_Roc(arena, cjson_roc);
	}
	return result_MolecularSequence_Quality;
}

MolecularSequence_Quality_Roc*
Deserialize_MolecularSequence_Quality_Roc(Arena *arena, cJSON *molecularSequence_Quality_Roc)
{
	MolecularSequence_Quality_Roc *result_MolecularSequence_Quality_Roc = PushArray(arena, MolecularSequence_Quality_Roc, 1);
	result_MolecularSequence_Quality_Roc->resourceType = ResourceType::MolecularSequence_Quality_Roc;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "id");
	if(cjson_id)
	{
		result_MolecularSequence_Quality_Roc->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_Quality_Roc->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_Quality_Roc->extension = PushArray(arena, Extension, result_MolecularSequence_Quality_Roc->extension_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_Quality_Roc->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_Quality_Roc->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_Quality_Roc->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_Quality_Roc->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_Quality_Roc->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_score =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "score");
	if(cjson_score)
	{
		result_MolecularSequence_Quality_Roc->score_count = cJSON_GetArraySize(cjson_score);
		result_MolecularSequence_Quality_Roc->score = PushArray(arena, Integer, result_MolecularSequence_Quality_Roc->score_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->score_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_score, i);
			result_MolecularSequence_Quality_Roc->score[i] = *Deserialize_Integer(arena, internal);
		}

	}
	cJSON *cjson_numTP =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "numTP");
	if(cjson_numTP)
	{
		result_MolecularSequence_Quality_Roc->numTP_count = cJSON_GetArraySize(cjson_numTP);
		result_MolecularSequence_Quality_Roc->numTP = PushArray(arena, Integer, result_MolecularSequence_Quality_Roc->numTP_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->numTP_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_numTP, i);
			result_MolecularSequence_Quality_Roc->numTP[i] = *Deserialize_Integer(arena, internal);
		}

	}
	cJSON *cjson_numFP =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "numFP");
	if(cjson_numFP)
	{
		result_MolecularSequence_Quality_Roc->numFP_count = cJSON_GetArraySize(cjson_numFP);
		result_MolecularSequence_Quality_Roc->numFP = PushArray(arena, Integer, result_MolecularSequence_Quality_Roc->numFP_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->numFP_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_numFP, i);
			result_MolecularSequence_Quality_Roc->numFP[i] = *Deserialize_Integer(arena, internal);
		}

	}
	cJSON *cjson_numFN =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "numFN");
	if(cjson_numFN)
	{
		result_MolecularSequence_Quality_Roc->numFN_count = cJSON_GetArraySize(cjson_numFN);
		result_MolecularSequence_Quality_Roc->numFN = PushArray(arena, Integer, result_MolecularSequence_Quality_Roc->numFN_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->numFN_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_numFN, i);
			result_MolecularSequence_Quality_Roc->numFN[i] = *Deserialize_Integer(arena, internal);
		}

	}
	cJSON *cjson_precision =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "precision");
	if(cjson_precision)
	{
		result_MolecularSequence_Quality_Roc->precision_count = cJSON_GetArraySize(cjson_precision);
		result_MolecularSequence_Quality_Roc->precision = PushArray(arena, fhir_decimal, result_MolecularSequence_Quality_Roc->precision_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->precision_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_precision, i);
			result_MolecularSequence_Quality_Roc->precision[i] = cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_sensitivity =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "sensitivity");
	if(cjson_sensitivity)
	{
		result_MolecularSequence_Quality_Roc->sensitivity_count = cJSON_GetArraySize(cjson_sensitivity);
		result_MolecularSequence_Quality_Roc->sensitivity = PushArray(arena, fhir_decimal, result_MolecularSequence_Quality_Roc->sensitivity_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->sensitivity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_sensitivity, i);
			result_MolecularSequence_Quality_Roc->sensitivity[i] = cJSON_GetNumberValue(internal);
		}

	}
	cJSON *cjson_fMeasure =  cJSON_GetObjectItem(molecularSequence_Quality_Roc, "fMeasure");
	if(cjson_fMeasure)
	{
		result_MolecularSequence_Quality_Roc->fMeasure_count = cJSON_GetArraySize(cjson_fMeasure);
		result_MolecularSequence_Quality_Roc->fMeasure = PushArray(arena, fhir_decimal, result_MolecularSequence_Quality_Roc->fMeasure_count);
		for(int i = 0; i < result_MolecularSequence_Quality_Roc->fMeasure_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_fMeasure, i);
			result_MolecularSequence_Quality_Roc->fMeasure[i] = cJSON_GetNumberValue(internal);
		}

	}
	return result_MolecularSequence_Quality_Roc;
}

MolecularSequence_Repository*
Deserialize_MolecularSequence_Repository(Arena *arena, cJSON *molecularSequence_Repository)
{
	MolecularSequence_Repository *result_MolecularSequence_Repository = PushArray(arena, MolecularSequence_Repository, 1);
	result_MolecularSequence_Repository->resourceType = ResourceType::MolecularSequence_Repository;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_Repository, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_Repository, "id");
	if(cjson_id)
	{
		result_MolecularSequence_Repository->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_Repository, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_Repository->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_Repository->extension = PushArray(arena, Extension, result_MolecularSequence_Repository->extension_count);
		for(int i = 0; i < result_MolecularSequence_Repository->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_Repository->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_Repository, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_Repository->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_Repository->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_Repository->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_Repository->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_Repository->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(molecularSequence_Repository, "type");
	if(cjson_type)
	{
		result_MolecularSequence_Repository->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(molecularSequence_Repository, "url");
	if(cjson_url)
	{
		result_MolecularSequence_Repository->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(molecularSequence_Repository, "name");
	if(cjson_name)
	{
		result_MolecularSequence_Repository->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_datasetId =  cJSON_GetObjectItem(molecularSequence_Repository, "datasetId");
	if(cjson_datasetId)
	{
		result_MolecularSequence_Repository->datasetId = Str8C(cJSON_GetStringValue(cjson_datasetId));
	}
	cJSON *cjson_variantsetId =  cJSON_GetObjectItem(molecularSequence_Repository, "variantsetId");
	if(cjson_variantsetId)
	{
		result_MolecularSequence_Repository->variantsetId = Str8C(cJSON_GetStringValue(cjson_variantsetId));
	}
	cJSON *cjson_readsetId =  cJSON_GetObjectItem(molecularSequence_Repository, "readsetId");
	if(cjson_readsetId)
	{
		result_MolecularSequence_Repository->readsetId = Str8C(cJSON_GetStringValue(cjson_readsetId));
	}
	return result_MolecularSequence_Repository;
}

MolecularSequence_StructureVariant*
Deserialize_MolecularSequence_StructureVariant(Arena *arena, cJSON *molecularSequence_StructureVariant)
{
	MolecularSequence_StructureVariant *result_MolecularSequence_StructureVariant = PushArray(arena, MolecularSequence_StructureVariant, 1);
	result_MolecularSequence_StructureVariant->resourceType = ResourceType::MolecularSequence_StructureVariant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "id");
	if(cjson_id)
	{
		result_MolecularSequence_StructureVariant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_StructureVariant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_StructureVariant->extension = PushArray(arena, Extension, result_MolecularSequence_StructureVariant->extension_count);
		for(int i = 0; i < result_MolecularSequence_StructureVariant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_StructureVariant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_StructureVariant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_StructureVariant->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_StructureVariant->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_StructureVariant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_StructureVariant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_variantType =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "variantType");
	if(cjson_variantType)
	{
		result_MolecularSequence_StructureVariant->variantType = Deserialize_CodeableConcept(arena, cjson_variantType);
	}
	cJSON *cjson_exact =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "exact");
	if(cjson_exact)
	{
		result_MolecularSequence_StructureVariant->exact = (boolean)cJSON_IsTrue(cjson_exact);
	}
	cJSON *cjson_length =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "length");
	if(cjson_length)
	{
		result_MolecularSequence_StructureVariant->length = Deserialize_Integer(arena, cjson_length);
	}
	cJSON *cjson_outer =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "outer");
	if(cjson_outer)
	{
		result_MolecularSequence_StructureVariant->outer = Deserialize_MolecularSequence_StructureVariant_Outer(arena, cjson_outer);
	}
	cJSON *cjson_inner =  cJSON_GetObjectItem(molecularSequence_StructureVariant, "inner");
	if(cjson_inner)
	{
		result_MolecularSequence_StructureVariant->inner = Deserialize_MolecularSequence_StructureVariant_Inner(arena, cjson_inner);
	}
	return result_MolecularSequence_StructureVariant;
}

MolecularSequence_StructureVariant_Outer*
Deserialize_MolecularSequence_StructureVariant_Outer(Arena *arena, cJSON *molecularSequence_StructureVariant_Outer)
{
	MolecularSequence_StructureVariant_Outer *result_MolecularSequence_StructureVariant_Outer = PushArray(arena, MolecularSequence_StructureVariant_Outer, 1);
	result_MolecularSequence_StructureVariant_Outer->resourceType = ResourceType::MolecularSequence_StructureVariant_Outer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Outer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Outer, "id");
	if(cjson_id)
	{
		result_MolecularSequence_StructureVariant_Outer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Outer, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_StructureVariant_Outer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_StructureVariant_Outer->extension = PushArray(arena, Extension, result_MolecularSequence_StructureVariant_Outer->extension_count);
		for(int i = 0; i < result_MolecularSequence_StructureVariant_Outer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_StructureVariant_Outer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Outer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_StructureVariant_Outer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_StructureVariant_Outer->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_StructureVariant_Outer->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_StructureVariant_Outer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_StructureVariant_Outer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_start =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Outer, "start");
	if(cjson_start)
	{
		result_MolecularSequence_StructureVariant_Outer->start = Deserialize_Integer(arena, cjson_start);
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Outer, "end");
	if(cjson_end)
	{
		result_MolecularSequence_StructureVariant_Outer->end = Deserialize_Integer(arena, cjson_end);
	}
	return result_MolecularSequence_StructureVariant_Outer;
}

MolecularSequence_StructureVariant_Inner*
Deserialize_MolecularSequence_StructureVariant_Inner(Arena *arena, cJSON *molecularSequence_StructureVariant_Inner)
{
	MolecularSequence_StructureVariant_Inner *result_MolecularSequence_StructureVariant_Inner = PushArray(arena, MolecularSequence_StructureVariant_Inner, 1);
	result_MolecularSequence_StructureVariant_Inner->resourceType = ResourceType::MolecularSequence_StructureVariant_Inner;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Inner, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Inner, "id");
	if(cjson_id)
	{
		result_MolecularSequence_StructureVariant_Inner->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Inner, "extension");
	if(cjson_extension)
	{
		result_MolecularSequence_StructureVariant_Inner->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MolecularSequence_StructureVariant_Inner->extension = PushArray(arena, Extension, result_MolecularSequence_StructureVariant_Inner->extension_count);
		for(int i = 0; i < result_MolecularSequence_StructureVariant_Inner->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MolecularSequence_StructureVariant_Inner->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Inner, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MolecularSequence_StructureVariant_Inner->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MolecularSequence_StructureVariant_Inner->modifierExtension = PushArray(arena, Extension, result_MolecularSequence_StructureVariant_Inner->modifierExtension_count);
		for(int i = 0; i < result_MolecularSequence_StructureVariant_Inner->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MolecularSequence_StructureVariant_Inner->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_start =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Inner, "start");
	if(cjson_start)
	{
		result_MolecularSequence_StructureVariant_Inner->start = Deserialize_Integer(arena, cjson_start);
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(molecularSequence_StructureVariant_Inner, "end");
	if(cjson_end)
	{
		result_MolecularSequence_StructureVariant_Inner->end = Deserialize_Integer(arena, cjson_end);
	}
	return result_MolecularSequence_StructureVariant_Inner;
}

NamingSystem*
Deserialize_NamingSystem(Arena *arena, cJSON *namingSystem)
{
	NamingSystem *result_NamingSystem = PushArray(arena, NamingSystem, 1);
	result_NamingSystem->resourceType = ResourceType::NamingSystem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(namingSystem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(namingSystem, "id");
	if(cjson_id)
	{
		result_NamingSystem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(namingSystem, "meta");
	if(cjson_meta)
	{
		result_NamingSystem->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(namingSystem, "implicitRules");
	if(cjson_implicitRules)
	{
		result_NamingSystem->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(namingSystem, "language");
	if(cjson_language)
	{
		result_NamingSystem->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(namingSystem, "text");
	if(cjson_text)
	{
		result_NamingSystem->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(namingSystem, "contained");
	if(cjson_contained)
	{
		result_NamingSystem->contained_count = cJSON_GetArraySize(cjson_contained);
		result_NamingSystem->contained = PushArray(arena, Resource, result_NamingSystem->contained_count);
		for(int i = 0; i < result_NamingSystem->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_NamingSystem->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(namingSystem, "extension");
	if(cjson_extension)
	{
		result_NamingSystem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NamingSystem->extension = PushArray(arena, Extension, result_NamingSystem->extension_count);
		for(int i = 0; i < result_NamingSystem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NamingSystem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(namingSystem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NamingSystem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NamingSystem->modifierExtension = PushArray(arena, Extension, result_NamingSystem->modifierExtension_count);
		for(int i = 0; i < result_NamingSystem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NamingSystem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(namingSystem, "name");
	if(cjson_name)
	{
		result_NamingSystem->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(namingSystem, "status");
	if(cjson_status)
	{
		result_NamingSystem->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(namingSystem, "kind");
	if(cjson_kind)
	{
		result_NamingSystem->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(namingSystem, "date");
	if(cjson_date)
	{
		result_NamingSystem->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(namingSystem, "publisher");
	if(cjson_publisher)
	{
		result_NamingSystem->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(namingSystem, "contact");
	if(cjson_contact)
	{
		result_NamingSystem->contact_count = cJSON_GetArraySize(cjson_contact);
		result_NamingSystem->contact = PushArray(arena, ContactDetail, result_NamingSystem->contact_count);
		for(int i = 0; i < result_NamingSystem->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_NamingSystem->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_responsible =  cJSON_GetObjectItem(namingSystem, "responsible");
	if(cjson_responsible)
	{
		result_NamingSystem->responsible = Str8C(cJSON_GetStringValue(cjson_responsible));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(namingSystem, "type");
	if(cjson_type)
	{
		result_NamingSystem->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(namingSystem, "description");
	if(cjson_description)
	{
		result_NamingSystem->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(namingSystem, "useContext");
	if(cjson_useContext)
	{
		result_NamingSystem->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_NamingSystem->useContext = PushArray(arena, UsageContext, result_NamingSystem->useContext_count);
		for(int i = 0; i < result_NamingSystem->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_NamingSystem->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(namingSystem, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_NamingSystem->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_NamingSystem->jurisdiction = PushArray(arena, CodeableConcept, result_NamingSystem->jurisdiction_count);
		for(int i = 0; i < result_NamingSystem->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_NamingSystem->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(namingSystem, "usage");
	if(cjson_usage)
	{
		result_NamingSystem->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_uniqueId =  cJSON_GetObjectItem(namingSystem, "uniqueId");
	if(cjson_uniqueId)
	{
		result_NamingSystem->uniqueId_count = cJSON_GetArraySize(cjson_uniqueId);
		result_NamingSystem->uniqueId = PushArray(arena, NamingSystem_UniqueId, result_NamingSystem->uniqueId_count);
		for(int i = 0; i < result_NamingSystem->uniqueId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_uniqueId, i);
			result_NamingSystem->uniqueId[i] = *Deserialize_NamingSystem_UniqueId(arena, internal);
		}

	}
	return result_NamingSystem;
}

NamingSystem_UniqueId*
Deserialize_NamingSystem_UniqueId(Arena *arena, cJSON *namingSystem_UniqueId)
{
	NamingSystem_UniqueId *result_NamingSystem_UniqueId = PushArray(arena, NamingSystem_UniqueId, 1);
	result_NamingSystem_UniqueId->resourceType = ResourceType::NamingSystem_UniqueId;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(namingSystem_UniqueId, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(namingSystem_UniqueId, "id");
	if(cjson_id)
	{
		result_NamingSystem_UniqueId->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(namingSystem_UniqueId, "extension");
	if(cjson_extension)
	{
		result_NamingSystem_UniqueId->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NamingSystem_UniqueId->extension = PushArray(arena, Extension, result_NamingSystem_UniqueId->extension_count);
		for(int i = 0; i < result_NamingSystem_UniqueId->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NamingSystem_UniqueId->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(namingSystem_UniqueId, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NamingSystem_UniqueId->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NamingSystem_UniqueId->modifierExtension = PushArray(arena, Extension, result_NamingSystem_UniqueId->modifierExtension_count);
		for(int i = 0; i < result_NamingSystem_UniqueId->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NamingSystem_UniqueId->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(namingSystem_UniqueId, "type");
	if(cjson_type)
	{
		result_NamingSystem_UniqueId->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(namingSystem_UniqueId, "value");
	if(cjson_value)
	{
		result_NamingSystem_UniqueId->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	cJSON *cjson_preferred =  cJSON_GetObjectItem(namingSystem_UniqueId, "preferred");
	if(cjson_preferred)
	{
		result_NamingSystem_UniqueId->preferred = (boolean)cJSON_IsTrue(cjson_preferred);
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(namingSystem_UniqueId, "comment");
	if(cjson_comment)
	{
		result_NamingSystem_UniqueId->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(namingSystem_UniqueId, "period");
	if(cjson_period)
	{
		result_NamingSystem_UniqueId->period = Deserialize_Period(arena, cjson_period);
	}
	return result_NamingSystem_UniqueId;
}

NutritionOrder*
Deserialize_NutritionOrder(Arena *arena, cJSON *nutritionOrder)
{
	NutritionOrder *result_NutritionOrder = PushArray(arena, NutritionOrder, 1);
	result_NutritionOrder->resourceType = ResourceType::NutritionOrder;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(nutritionOrder, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(nutritionOrder, "id");
	if(cjson_id)
	{
		result_NutritionOrder->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(nutritionOrder, "meta");
	if(cjson_meta)
	{
		result_NutritionOrder->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(nutritionOrder, "implicitRules");
	if(cjson_implicitRules)
	{
		result_NutritionOrder->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(nutritionOrder, "language");
	if(cjson_language)
	{
		result_NutritionOrder->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(nutritionOrder, "text");
	if(cjson_text)
	{
		result_NutritionOrder->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(nutritionOrder, "contained");
	if(cjson_contained)
	{
		result_NutritionOrder->contained_count = cJSON_GetArraySize(cjson_contained);
		result_NutritionOrder->contained = PushArray(arena, Resource, result_NutritionOrder->contained_count);
		for(int i = 0; i < result_NutritionOrder->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_NutritionOrder->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(nutritionOrder, "extension");
	if(cjson_extension)
	{
		result_NutritionOrder->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NutritionOrder->extension = PushArray(arena, Extension, result_NutritionOrder->extension_count);
		for(int i = 0; i < result_NutritionOrder->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NutritionOrder->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(nutritionOrder, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NutritionOrder->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NutritionOrder->modifierExtension = PushArray(arena, Extension, result_NutritionOrder->modifierExtension_count);
		for(int i = 0; i < result_NutritionOrder->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NutritionOrder->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(nutritionOrder, "identifier");
	if(cjson_identifier)
	{
		result_NutritionOrder->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_NutritionOrder->identifier = PushArray(arena, Identifier, result_NutritionOrder->identifier_count);
		for(int i = 0; i < result_NutritionOrder->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_NutritionOrder->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(nutritionOrder, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_NutritionOrder->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_NutritionOrder->instantiatesCanonical = PushArray(arena, fhir_canonical, result_NutritionOrder->instantiatesCanonical_count);
		for(int i = 0; i < result_NutritionOrder->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_NutritionOrder->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(nutritionOrder, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_NutritionOrder->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_NutritionOrder->instantiatesUri = PushArray(arena, fhir_uri, result_NutritionOrder->instantiatesUri_count);
		for(int i = 0; i < result_NutritionOrder->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_NutritionOrder->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiates =  cJSON_GetObjectItem(nutritionOrder, "instantiates");
	if(cjson_instantiates)
	{
		result_NutritionOrder->instantiates_count = cJSON_GetArraySize(cjson_instantiates);
		result_NutritionOrder->instantiates = PushArray(arena, fhir_uri, result_NutritionOrder->instantiates_count);
		for(int i = 0; i < result_NutritionOrder->instantiates_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiates, i);
			result_NutritionOrder->instantiates[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(nutritionOrder, "status");
	if(cjson_status)
	{
		result_NutritionOrder->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(nutritionOrder, "intent");
	if(cjson_intent)
	{
		result_NutritionOrder->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(nutritionOrder, "patient");
	if(cjson_patient)
	{
		result_NutritionOrder->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(nutritionOrder, "encounter");
	if(cjson_encounter)
	{
		result_NutritionOrder->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_dateTime =  cJSON_GetObjectItem(nutritionOrder, "dateTime");
	if(cjson_dateTime)
	{
		result_NutritionOrder->dateTime = Str8C(cJSON_GetStringValue(cjson_dateTime));
	}
	cJSON *cjson_orderer =  cJSON_GetObjectItem(nutritionOrder, "orderer");
	if(cjson_orderer)
	{
		result_NutritionOrder->orderer = Deserialize_Reference(arena, cjson_orderer);
	}
	cJSON *cjson_allergyIntolerance =  cJSON_GetObjectItem(nutritionOrder, "allergyIntolerance");
	if(cjson_allergyIntolerance)
	{
		result_NutritionOrder->allergyIntolerance_count = cJSON_GetArraySize(cjson_allergyIntolerance);
		result_NutritionOrder->allergyIntolerance = PushArray(arena, Reference, result_NutritionOrder->allergyIntolerance_count);
		for(int i = 0; i < result_NutritionOrder->allergyIntolerance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_allergyIntolerance, i);
			result_NutritionOrder->allergyIntolerance[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_foodPreferenceModifier =  cJSON_GetObjectItem(nutritionOrder, "foodPreferenceModifier");
	if(cjson_foodPreferenceModifier)
	{
		result_NutritionOrder->foodPreferenceModifier_count = cJSON_GetArraySize(cjson_foodPreferenceModifier);
		result_NutritionOrder->foodPreferenceModifier = PushArray(arena, CodeableConcept, result_NutritionOrder->foodPreferenceModifier_count);
		for(int i = 0; i < result_NutritionOrder->foodPreferenceModifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_foodPreferenceModifier, i);
			result_NutritionOrder->foodPreferenceModifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_excludeFoodModifier =  cJSON_GetObjectItem(nutritionOrder, "excludeFoodModifier");
	if(cjson_excludeFoodModifier)
	{
		result_NutritionOrder->excludeFoodModifier_count = cJSON_GetArraySize(cjson_excludeFoodModifier);
		result_NutritionOrder->excludeFoodModifier = PushArray(arena, CodeableConcept, result_NutritionOrder->excludeFoodModifier_count);
		for(int i = 0; i < result_NutritionOrder->excludeFoodModifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_excludeFoodModifier, i);
			result_NutritionOrder->excludeFoodModifier[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_oralDiet =  cJSON_GetObjectItem(nutritionOrder, "oralDiet");
	if(cjson_oralDiet)
	{
		result_NutritionOrder->oralDiet = Deserialize_NutritionOrder_OralDiet(arena, cjson_oralDiet);
	}
	cJSON *cjson_supplement =  cJSON_GetObjectItem(nutritionOrder, "supplement");
	if(cjson_supplement)
	{
		result_NutritionOrder->supplement_count = cJSON_GetArraySize(cjson_supplement);
		result_NutritionOrder->supplement = PushArray(arena, NutritionOrder_Supplement, result_NutritionOrder->supplement_count);
		for(int i = 0; i < result_NutritionOrder->supplement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supplement, i);
			result_NutritionOrder->supplement[i] = *Deserialize_NutritionOrder_Supplement(arena, internal);
		}

	}
	cJSON *cjson_enteralFormula =  cJSON_GetObjectItem(nutritionOrder, "enteralFormula");
	if(cjson_enteralFormula)
	{
		result_NutritionOrder->enteralFormula = Deserialize_NutritionOrder_EnteralFormula(arena, cjson_enteralFormula);
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(nutritionOrder, "note");
	if(cjson_note)
	{
		result_NutritionOrder->note_count = cJSON_GetArraySize(cjson_note);
		result_NutritionOrder->note = PushArray(arena, Annotation, result_NutritionOrder->note_count);
		for(int i = 0; i < result_NutritionOrder->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_NutritionOrder->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_NutritionOrder;
}

NutritionOrder_OralDiet*
Deserialize_NutritionOrder_OralDiet(Arena *arena, cJSON *nutritionOrder_OralDiet)
{
	NutritionOrder_OralDiet *result_NutritionOrder_OralDiet = PushArray(arena, NutritionOrder_OralDiet, 1);
	result_NutritionOrder_OralDiet->resourceType = ResourceType::NutritionOrder_OralDiet;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "id");
	if(cjson_id)
	{
		result_NutritionOrder_OralDiet->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "extension");
	if(cjson_extension)
	{
		result_NutritionOrder_OralDiet->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NutritionOrder_OralDiet->extension = PushArray(arena, Extension, result_NutritionOrder_OralDiet->extension_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NutritionOrder_OralDiet->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NutritionOrder_OralDiet->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NutritionOrder_OralDiet->modifierExtension = PushArray(arena, Extension, result_NutritionOrder_OralDiet->modifierExtension_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NutritionOrder_OralDiet->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "type");
	if(cjson_type)
	{
		result_NutritionOrder_OralDiet->type_count = cJSON_GetArraySize(cjson_type);
		result_NutritionOrder_OralDiet->type = PushArray(arena, CodeableConcept, result_NutritionOrder_OralDiet->type_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_NutritionOrder_OralDiet->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_schedule =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "schedule");
	if(cjson_schedule)
	{
		result_NutritionOrder_OralDiet->schedule_count = cJSON_GetArraySize(cjson_schedule);
		result_NutritionOrder_OralDiet->schedule = PushArray(arena, Timing, result_NutritionOrder_OralDiet->schedule_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet->schedule_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_schedule, i);
			result_NutritionOrder_OralDiet->schedule[i] = *Deserialize_Timing(arena, internal);
		}

	}
	cJSON *cjson_nutrient =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "nutrient");
	if(cjson_nutrient)
	{
		result_NutritionOrder_OralDiet->nutrient_count = cJSON_GetArraySize(cjson_nutrient);
		result_NutritionOrder_OralDiet->nutrient = PushArray(arena, NutritionOrder_OralDiet_Nutrient, result_NutritionOrder_OralDiet->nutrient_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet->nutrient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_nutrient, i);
			result_NutritionOrder_OralDiet->nutrient[i] = *Deserialize_NutritionOrder_OralDiet_Nutrient(arena, internal);
		}

	}
	cJSON *cjson_texture =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "texture");
	if(cjson_texture)
	{
		result_NutritionOrder_OralDiet->texture_count = cJSON_GetArraySize(cjson_texture);
		result_NutritionOrder_OralDiet->texture = PushArray(arena, NutritionOrder_OralDiet_Texture, result_NutritionOrder_OralDiet->texture_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet->texture_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_texture, i);
			result_NutritionOrder_OralDiet->texture[i] = *Deserialize_NutritionOrder_OralDiet_Texture(arena, internal);
		}

	}
	cJSON *cjson_fluidConsistencyType =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "fluidConsistencyType");
	if(cjson_fluidConsistencyType)
	{
		result_NutritionOrder_OralDiet->fluidConsistencyType_count = cJSON_GetArraySize(cjson_fluidConsistencyType);
		result_NutritionOrder_OralDiet->fluidConsistencyType = PushArray(arena, CodeableConcept, result_NutritionOrder_OralDiet->fluidConsistencyType_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet->fluidConsistencyType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_fluidConsistencyType, i);
			result_NutritionOrder_OralDiet->fluidConsistencyType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_instruction =  cJSON_GetObjectItem(nutritionOrder_OralDiet, "instruction");
	if(cjson_instruction)
	{
		result_NutritionOrder_OralDiet->instruction = Str8C(cJSON_GetStringValue(cjson_instruction));
	}
	return result_NutritionOrder_OralDiet;
}

NutritionOrder_OralDiet_Nutrient*
Deserialize_NutritionOrder_OralDiet_Nutrient(Arena *arena, cJSON *nutritionOrder_OralDiet_Nutrient)
{
	NutritionOrder_OralDiet_Nutrient *result_NutritionOrder_OralDiet_Nutrient = PushArray(arena, NutritionOrder_OralDiet_Nutrient, 1);
	result_NutritionOrder_OralDiet_Nutrient->resourceType = ResourceType::NutritionOrder_OralDiet_Nutrient;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Nutrient, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Nutrient, "id");
	if(cjson_id)
	{
		result_NutritionOrder_OralDiet_Nutrient->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Nutrient, "extension");
	if(cjson_extension)
	{
		result_NutritionOrder_OralDiet_Nutrient->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NutritionOrder_OralDiet_Nutrient->extension = PushArray(arena, Extension, result_NutritionOrder_OralDiet_Nutrient->extension_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet_Nutrient->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NutritionOrder_OralDiet_Nutrient->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Nutrient, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NutritionOrder_OralDiet_Nutrient->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NutritionOrder_OralDiet_Nutrient->modifierExtension = PushArray(arena, Extension, result_NutritionOrder_OralDiet_Nutrient->modifierExtension_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet_Nutrient->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NutritionOrder_OralDiet_Nutrient->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Nutrient, "modifier");
	if(cjson_modifier)
	{
		result_NutritionOrder_OralDiet_Nutrient->modifier = Deserialize_CodeableConcept(arena, cjson_modifier);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Nutrient, "amount");
	if(cjson_amount)
	{
		result_NutritionOrder_OralDiet_Nutrient->amount = Deserialize_Quantity(arena, cjson_amount);
	}
	return result_NutritionOrder_OralDiet_Nutrient;
}

NutritionOrder_OralDiet_Texture*
Deserialize_NutritionOrder_OralDiet_Texture(Arena *arena, cJSON *nutritionOrder_OralDiet_Texture)
{
	NutritionOrder_OralDiet_Texture *result_NutritionOrder_OralDiet_Texture = PushArray(arena, NutritionOrder_OralDiet_Texture, 1);
	result_NutritionOrder_OralDiet_Texture->resourceType = ResourceType::NutritionOrder_OralDiet_Texture;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Texture, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Texture, "id");
	if(cjson_id)
	{
		result_NutritionOrder_OralDiet_Texture->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Texture, "extension");
	if(cjson_extension)
	{
		result_NutritionOrder_OralDiet_Texture->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NutritionOrder_OralDiet_Texture->extension = PushArray(arena, Extension, result_NutritionOrder_OralDiet_Texture->extension_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet_Texture->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NutritionOrder_OralDiet_Texture->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Texture, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NutritionOrder_OralDiet_Texture->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NutritionOrder_OralDiet_Texture->modifierExtension = PushArray(arena, Extension, result_NutritionOrder_OralDiet_Texture->modifierExtension_count);
		for(int i = 0; i < result_NutritionOrder_OralDiet_Texture->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NutritionOrder_OralDiet_Texture->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Texture, "modifier");
	if(cjson_modifier)
	{
		result_NutritionOrder_OralDiet_Texture->modifier = Deserialize_CodeableConcept(arena, cjson_modifier);
	}
	cJSON *cjson_foodType =  cJSON_GetObjectItem(nutritionOrder_OralDiet_Texture, "foodType");
	if(cjson_foodType)
	{
		result_NutritionOrder_OralDiet_Texture->foodType = Deserialize_CodeableConcept(arena, cjson_foodType);
	}
	return result_NutritionOrder_OralDiet_Texture;
}

NutritionOrder_Supplement*
Deserialize_NutritionOrder_Supplement(Arena *arena, cJSON *nutritionOrder_Supplement)
{
	NutritionOrder_Supplement *result_NutritionOrder_Supplement = PushArray(arena, NutritionOrder_Supplement, 1);
	result_NutritionOrder_Supplement->resourceType = ResourceType::NutritionOrder_Supplement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(nutritionOrder_Supplement, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(nutritionOrder_Supplement, "id");
	if(cjson_id)
	{
		result_NutritionOrder_Supplement->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(nutritionOrder_Supplement, "extension");
	if(cjson_extension)
	{
		result_NutritionOrder_Supplement->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NutritionOrder_Supplement->extension = PushArray(arena, Extension, result_NutritionOrder_Supplement->extension_count);
		for(int i = 0; i < result_NutritionOrder_Supplement->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NutritionOrder_Supplement->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(nutritionOrder_Supplement, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NutritionOrder_Supplement->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NutritionOrder_Supplement->modifierExtension = PushArray(arena, Extension, result_NutritionOrder_Supplement->modifierExtension_count);
		for(int i = 0; i < result_NutritionOrder_Supplement->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NutritionOrder_Supplement->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(nutritionOrder_Supplement, "type");
	if(cjson_type)
	{
		result_NutritionOrder_Supplement->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_productName =  cJSON_GetObjectItem(nutritionOrder_Supplement, "productName");
	if(cjson_productName)
	{
		result_NutritionOrder_Supplement->productName = Str8C(cJSON_GetStringValue(cjson_productName));
	}
	cJSON *cjson_schedule =  cJSON_GetObjectItem(nutritionOrder_Supplement, "schedule");
	if(cjson_schedule)
	{
		result_NutritionOrder_Supplement->schedule_count = cJSON_GetArraySize(cjson_schedule);
		result_NutritionOrder_Supplement->schedule = PushArray(arena, Timing, result_NutritionOrder_Supplement->schedule_count);
		for(int i = 0; i < result_NutritionOrder_Supplement->schedule_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_schedule, i);
			result_NutritionOrder_Supplement->schedule[i] = *Deserialize_Timing(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(nutritionOrder_Supplement, "quantity");
	if(cjson_quantity)
	{
		result_NutritionOrder_Supplement->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_instruction =  cJSON_GetObjectItem(nutritionOrder_Supplement, "instruction");
	if(cjson_instruction)
	{
		result_NutritionOrder_Supplement->instruction = Str8C(cJSON_GetStringValue(cjson_instruction));
	}
	return result_NutritionOrder_Supplement;
}

NutritionOrder_EnteralFormula*
Deserialize_NutritionOrder_EnteralFormula(Arena *arena, cJSON *nutritionOrder_EnteralFormula)
{
	NutritionOrder_EnteralFormula *result_NutritionOrder_EnteralFormula = PushArray(arena, NutritionOrder_EnteralFormula, 1);
	result_NutritionOrder_EnteralFormula->resourceType = ResourceType::NutritionOrder_EnteralFormula;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "id");
	if(cjson_id)
	{
		result_NutritionOrder_EnteralFormula->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "extension");
	if(cjson_extension)
	{
		result_NutritionOrder_EnteralFormula->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NutritionOrder_EnteralFormula->extension = PushArray(arena, Extension, result_NutritionOrder_EnteralFormula->extension_count);
		for(int i = 0; i < result_NutritionOrder_EnteralFormula->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NutritionOrder_EnteralFormula->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NutritionOrder_EnteralFormula->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NutritionOrder_EnteralFormula->modifierExtension = PushArray(arena, Extension, result_NutritionOrder_EnteralFormula->modifierExtension_count);
		for(int i = 0; i < result_NutritionOrder_EnteralFormula->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NutritionOrder_EnteralFormula->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_baseFormulaType =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "baseFormulaType");
	if(cjson_baseFormulaType)
	{
		result_NutritionOrder_EnteralFormula->baseFormulaType = Deserialize_CodeableConcept(arena, cjson_baseFormulaType);
	}
	cJSON *cjson_baseFormulaProductName =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "baseFormulaProductName");
	if(cjson_baseFormulaProductName)
	{
		result_NutritionOrder_EnteralFormula->baseFormulaProductName = Str8C(cJSON_GetStringValue(cjson_baseFormulaProductName));
	}
	cJSON *cjson_additiveType =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "additiveType");
	if(cjson_additiveType)
	{
		result_NutritionOrder_EnteralFormula->additiveType = Deserialize_CodeableConcept(arena, cjson_additiveType);
	}
	cJSON *cjson_additiveProductName =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "additiveProductName");
	if(cjson_additiveProductName)
	{
		result_NutritionOrder_EnteralFormula->additiveProductName = Str8C(cJSON_GetStringValue(cjson_additiveProductName));
	}
	cJSON *cjson_caloricDensity =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "caloricDensity");
	if(cjson_caloricDensity)
	{
		result_NutritionOrder_EnteralFormula->caloricDensity = Deserialize_Quantity(arena, cjson_caloricDensity);
	}
	cJSON *cjson_routeofAdministration =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "routeofAdministration");
	if(cjson_routeofAdministration)
	{
		result_NutritionOrder_EnteralFormula->routeofAdministration = Deserialize_CodeableConcept(arena, cjson_routeofAdministration);
	}
	cJSON *cjson_administration =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "administration");
	if(cjson_administration)
	{
		result_NutritionOrder_EnteralFormula->administration_count = cJSON_GetArraySize(cjson_administration);
		result_NutritionOrder_EnteralFormula->administration = PushArray(arena, NutritionOrder_EnteralFormula_Administration, result_NutritionOrder_EnteralFormula->administration_count);
		for(int i = 0; i < result_NutritionOrder_EnteralFormula->administration_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_administration, i);
			result_NutritionOrder_EnteralFormula->administration[i] = *Deserialize_NutritionOrder_EnteralFormula_Administration(arena, internal);
		}

	}
	cJSON *cjson_maxVolumeToDeliver =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "maxVolumeToDeliver");
	if(cjson_maxVolumeToDeliver)
	{
		result_NutritionOrder_EnteralFormula->maxVolumeToDeliver = Deserialize_Quantity(arena, cjson_maxVolumeToDeliver);
	}
	cJSON *cjson_administrationInstruction =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula, "administrationInstruction");
	if(cjson_administrationInstruction)
	{
		result_NutritionOrder_EnteralFormula->administrationInstruction = Str8C(cJSON_GetStringValue(cjson_administrationInstruction));
	}
	return result_NutritionOrder_EnteralFormula;
}

NutritionOrder_EnteralFormula_Administration*
Deserialize_NutritionOrder_EnteralFormula_Administration(Arena *arena, cJSON *nutritionOrder_EnteralFormula_Administration)
{
	NutritionOrder_EnteralFormula_Administration *result_NutritionOrder_EnteralFormula_Administration = PushArray(arena, NutritionOrder_EnteralFormula_Administration, 1);
	result_NutritionOrder_EnteralFormula_Administration->resourceType = ResourceType::NutritionOrder_EnteralFormula_Administration;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "id");
	if(cjson_id)
	{
		result_NutritionOrder_EnteralFormula_Administration->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "extension");
	if(cjson_extension)
	{
		result_NutritionOrder_EnteralFormula_Administration->extension_count = cJSON_GetArraySize(cjson_extension);
		result_NutritionOrder_EnteralFormula_Administration->extension = PushArray(arena, Extension, result_NutritionOrder_EnteralFormula_Administration->extension_count);
		for(int i = 0; i < result_NutritionOrder_EnteralFormula_Administration->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_NutritionOrder_EnteralFormula_Administration->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_NutritionOrder_EnteralFormula_Administration->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_NutritionOrder_EnteralFormula_Administration->modifierExtension = PushArray(arena, Extension, result_NutritionOrder_EnteralFormula_Administration->modifierExtension_count);
		for(int i = 0; i < result_NutritionOrder_EnteralFormula_Administration->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_NutritionOrder_EnteralFormula_Administration->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_schedule =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "schedule");
	if(cjson_schedule)
	{
		result_NutritionOrder_EnteralFormula_Administration->schedule = Deserialize_Timing(arena, cjson_schedule);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "quantity");
	if(cjson_quantity)
	{
		result_NutritionOrder_EnteralFormula_Administration->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	if((bool)cJSON_HasObjectItem(nutritionOrder_EnteralFormula_Administration, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "valueQuantity");
		result_NutritionOrder_EnteralFormula_Administration->rate.valueQuantity = Deserialize_Quantity(arena, item);
		result_NutritionOrder_EnteralFormula_Administration->rate_type = NutritionOrder_EnteralFormula_Administration::RateType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(nutritionOrder_EnteralFormula_Administration, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(nutritionOrder_EnteralFormula_Administration, "valueRatio");
		result_NutritionOrder_EnteralFormula_Administration->rate.valueRatio = Deserialize_Ratio(arena, item);
		result_NutritionOrder_EnteralFormula_Administration->rate_type = NutritionOrder_EnteralFormula_Administration::RateType::Ratio;
	}


	return result_NutritionOrder_EnteralFormula_Administration;
}

Observation*
Deserialize_Observation(Arena *arena, cJSON *observation)
{
	Observation *result_Observation = PushArray(arena, Observation, 1);
	result_Observation->resourceType = ResourceType::Observation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(observation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(observation, "id");
	if(cjson_id)
	{
		result_Observation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(observation, "meta");
	if(cjson_meta)
	{
		result_Observation->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(observation, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Observation->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(observation, "language");
	if(cjson_language)
	{
		result_Observation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(observation, "text");
	if(cjson_text)
	{
		result_Observation->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(observation, "contained");
	if(cjson_contained)
	{
		result_Observation->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Observation->contained = PushArray(arena, Resource, result_Observation->contained_count);
		for(int i = 0; i < result_Observation->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Observation->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(observation, "extension");
	if(cjson_extension)
	{
		result_Observation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Observation->extension = PushArray(arena, Extension, result_Observation->extension_count);
		for(int i = 0; i < result_Observation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Observation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(observation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Observation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Observation->modifierExtension = PushArray(arena, Extension, result_Observation->modifierExtension_count);
		for(int i = 0; i < result_Observation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Observation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(observation, "identifier");
	if(cjson_identifier)
	{
		result_Observation->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Observation->identifier = PushArray(arena, Identifier, result_Observation->identifier_count);
		for(int i = 0; i < result_Observation->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Observation->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(observation, "basedOn");
	if(cjson_basedOn)
	{
		result_Observation->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_Observation->basedOn = PushArray(arena, Reference, result_Observation->basedOn_count);
		for(int i = 0; i < result_Observation->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_Observation->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(observation, "partOf");
	if(cjson_partOf)
	{
		result_Observation->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_Observation->partOf = PushArray(arena, Reference, result_Observation->partOf_count);
		for(int i = 0; i < result_Observation->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_Observation->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(observation, "status");
	if(cjson_status)
	{
		result_Observation->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(observation, "category");
	if(cjson_category)
	{
		result_Observation->category_count = cJSON_GetArraySize(cjson_category);
		result_Observation->category = PushArray(arena, CodeableConcept, result_Observation->category_count);
		for(int i = 0; i < result_Observation->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Observation->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(observation, "code");
	if(cjson_code)
	{
		result_Observation->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(observation, "subject");
	if(cjson_subject)
	{
		result_Observation->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_focus =  cJSON_GetObjectItem(observation, "focus");
	if(cjson_focus)
	{
		result_Observation->focus_count = cJSON_GetArraySize(cjson_focus);
		result_Observation->focus = PushArray(arena, Reference, result_Observation->focus_count);
		for(int i = 0; i < result_Observation->focus_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_focus, i);
			result_Observation->focus[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(observation, "encounter");
	if(cjson_encounter)
	{
		result_Observation->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(observation, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueDateTime");
		result_Observation->effective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Observation->effective_type = Observation::EffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valuePeriod");
		result_Observation->effective.valuePeriod = Deserialize_Period(arena, item);
		result_Observation->effective_type = Observation::EffectiveType::Period;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueTiming");
		result_Observation->effective.valueTiming = Deserialize_Timing(arena, item);
		result_Observation->effective_type = Observation::EffectiveType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueInstant");
		result_Observation->effective.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_Observation->effective_type = Observation::EffectiveType::fhir_instant;
	}


	cJSON *cjson_issued =  cJSON_GetObjectItem(observation, "issued");
	if(cjson_issued)
	{
		result_Observation->issued = Str8C(cJSON_GetStringValue(cjson_issued));
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(observation, "performer");
	if(cjson_performer)
	{
		result_Observation->performer_count = cJSON_GetArraySize(cjson_performer);
		result_Observation->performer = PushArray(arena, Reference, result_Observation->performer_count);
		for(int i = 0; i < result_Observation->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_Observation->performer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(observation, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueQuantity");
		result_Observation->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Observation->value_type = Observation::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueCodeableConcept");
		result_Observation->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Observation->value_type = Observation::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueString");
		result_Observation->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Observation->value_type = Observation::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueBoolean");
		result_Observation->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Observation->value_type = Observation::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueInteger");
		result_Observation->value.valueInteger = Deserialize_Integer(arena, item);
		result_Observation->value_type = Observation::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueRange");
		result_Observation->value.valueRange = Deserialize_Range(arena, item);
		result_Observation->value_type = Observation::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueRatio");
		result_Observation->value.valueRatio = Deserialize_Ratio(arena, item);
		result_Observation->value_type = Observation::ValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueSampledData");
		result_Observation->value.valueSampledData = Deserialize_SampledData(arena, item);
		result_Observation->value_type = Observation::ValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueTime");
		result_Observation->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Observation->value_type = Observation::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valueDateTime");
		result_Observation->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Observation->value_type = Observation::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(observation, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation, "valuePeriod");
		result_Observation->value.valuePeriod = Deserialize_Period(arena, item);
		result_Observation->value_type = Observation::ValueType::Period;
	}


	cJSON *cjson_dataAbsentReason =  cJSON_GetObjectItem(observation, "dataAbsentReason");
	if(cjson_dataAbsentReason)
	{
		result_Observation->dataAbsentReason = Deserialize_CodeableConcept(arena, cjson_dataAbsentReason);
	}
	cJSON *cjson_interpretation =  cJSON_GetObjectItem(observation, "interpretation");
	if(cjson_interpretation)
	{
		result_Observation->interpretation_count = cJSON_GetArraySize(cjson_interpretation);
		result_Observation->interpretation = PushArray(arena, CodeableConcept, result_Observation->interpretation_count);
		for(int i = 0; i < result_Observation->interpretation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_interpretation, i);
			result_Observation->interpretation[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(observation, "note");
	if(cjson_note)
	{
		result_Observation->note_count = cJSON_GetArraySize(cjson_note);
		result_Observation->note = PushArray(arena, Annotation, result_Observation->note_count);
		for(int i = 0; i < result_Observation->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Observation->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(observation, "bodySite");
	if(cjson_bodySite)
	{
		result_Observation->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(observation, "method");
	if(cjson_method)
	{
		result_Observation->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_specimen =  cJSON_GetObjectItem(observation, "specimen");
	if(cjson_specimen)
	{
		result_Observation->specimen = Deserialize_Reference(arena, cjson_specimen);
	}
	cJSON *cjson_device =  cJSON_GetObjectItem(observation, "device");
	if(cjson_device)
	{
		result_Observation->device = Deserialize_Reference(arena, cjson_device);
	}
	cJSON *cjson_referenceRange =  cJSON_GetObjectItem(observation, "referenceRange");
	if(cjson_referenceRange)
	{
		result_Observation->referenceRange_count = cJSON_GetArraySize(cjson_referenceRange);
		result_Observation->referenceRange = PushArray(arena, Observation_ReferenceRange, result_Observation->referenceRange_count);
		for(int i = 0; i < result_Observation->referenceRange_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referenceRange, i);
			result_Observation->referenceRange[i] = *Deserialize_Observation_ReferenceRange(arena, internal);
		}

	}
	cJSON *cjson_hasMember =  cJSON_GetObjectItem(observation, "hasMember");
	if(cjson_hasMember)
	{
		result_Observation->hasMember_count = cJSON_GetArraySize(cjson_hasMember);
		result_Observation->hasMember = PushArray(arena, Reference, result_Observation->hasMember_count);
		for(int i = 0; i < result_Observation->hasMember_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_hasMember, i);
			result_Observation->hasMember[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_derivedFrom =  cJSON_GetObjectItem(observation, "derivedFrom");
	if(cjson_derivedFrom)
	{
		result_Observation->derivedFrom_count = cJSON_GetArraySize(cjson_derivedFrom);
		result_Observation->derivedFrom = PushArray(arena, Reference, result_Observation->derivedFrom_count);
		for(int i = 0; i < result_Observation->derivedFrom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_derivedFrom, i);
			result_Observation->derivedFrom[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_component =  cJSON_GetObjectItem(observation, "component");
	if(cjson_component)
	{
		result_Observation->component_count = cJSON_GetArraySize(cjson_component);
		result_Observation->component = PushArray(arena, Observation_Component, result_Observation->component_count);
		for(int i = 0; i < result_Observation->component_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_component, i);
			result_Observation->component[i] = *Deserialize_Observation_Component(arena, internal);
		}

	}
	return result_Observation;
}

Observation_ReferenceRange*
Deserialize_Observation_ReferenceRange(Arena *arena, cJSON *observation_ReferenceRange)
{
	Observation_ReferenceRange *result_Observation_ReferenceRange = PushArray(arena, Observation_ReferenceRange, 1);
	result_Observation_ReferenceRange->resourceType = ResourceType::Observation_ReferenceRange;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(observation_ReferenceRange, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(observation_ReferenceRange, "id");
	if(cjson_id)
	{
		result_Observation_ReferenceRange->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(observation_ReferenceRange, "extension");
	if(cjson_extension)
	{
		result_Observation_ReferenceRange->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Observation_ReferenceRange->extension = PushArray(arena, Extension, result_Observation_ReferenceRange->extension_count);
		for(int i = 0; i < result_Observation_ReferenceRange->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Observation_ReferenceRange->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(observation_ReferenceRange, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Observation_ReferenceRange->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Observation_ReferenceRange->modifierExtension = PushArray(arena, Extension, result_Observation_ReferenceRange->modifierExtension_count);
		for(int i = 0; i < result_Observation_ReferenceRange->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Observation_ReferenceRange->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_low =  cJSON_GetObjectItem(observation_ReferenceRange, "low");
	if(cjson_low)
	{
		result_Observation_ReferenceRange->low = Deserialize_Quantity(arena, cjson_low);
	}
	cJSON *cjson_high =  cJSON_GetObjectItem(observation_ReferenceRange, "high");
	if(cjson_high)
	{
		result_Observation_ReferenceRange->high = Deserialize_Quantity(arena, cjson_high);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(observation_ReferenceRange, "type");
	if(cjson_type)
	{
		result_Observation_ReferenceRange->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_appliesTo =  cJSON_GetObjectItem(observation_ReferenceRange, "appliesTo");
	if(cjson_appliesTo)
	{
		result_Observation_ReferenceRange->appliesTo_count = cJSON_GetArraySize(cjson_appliesTo);
		result_Observation_ReferenceRange->appliesTo = PushArray(arena, CodeableConcept, result_Observation_ReferenceRange->appliesTo_count);
		for(int i = 0; i < result_Observation_ReferenceRange->appliesTo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_appliesTo, i);
			result_Observation_ReferenceRange->appliesTo[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_age =  cJSON_GetObjectItem(observation_ReferenceRange, "age");
	if(cjson_age)
	{
		result_Observation_ReferenceRange->age = Deserialize_Range(arena, cjson_age);
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(observation_ReferenceRange, "text");
	if(cjson_text)
	{
		result_Observation_ReferenceRange->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	return result_Observation_ReferenceRange;
}

Observation_Component*
Deserialize_Observation_Component(Arena *arena, cJSON *observation_Component)
{
	Observation_Component *result_Observation_Component = PushArray(arena, Observation_Component, 1);
	result_Observation_Component->resourceType = ResourceType::Observation_Component;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(observation_Component, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(observation_Component, "id");
	if(cjson_id)
	{
		result_Observation_Component->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(observation_Component, "extension");
	if(cjson_extension)
	{
		result_Observation_Component->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Observation_Component->extension = PushArray(arena, Extension, result_Observation_Component->extension_count);
		for(int i = 0; i < result_Observation_Component->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Observation_Component->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(observation_Component, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Observation_Component->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Observation_Component->modifierExtension = PushArray(arena, Extension, result_Observation_Component->modifierExtension_count);
		for(int i = 0; i < result_Observation_Component->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Observation_Component->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(observation_Component, "code");
	if(cjson_code)
	{
		result_Observation_Component->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	if((bool)cJSON_HasObjectItem(observation_Component, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueQuantity");
		result_Observation_Component->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Observation_Component->value_type = Observation_Component::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueCodeableConcept");
		result_Observation_Component->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Observation_Component->value_type = Observation_Component::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueString");
		result_Observation_Component->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Observation_Component->value_type = Observation_Component::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueBoolean");
		result_Observation_Component->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Observation_Component->value_type = Observation_Component::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueInteger");
		result_Observation_Component->value.valueInteger = Deserialize_Integer(arena, item);
		result_Observation_Component->value_type = Observation_Component::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueRange");
		result_Observation_Component->value.valueRange = Deserialize_Range(arena, item);
		result_Observation_Component->value_type = Observation_Component::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueRatio");
		result_Observation_Component->value.valueRatio = Deserialize_Ratio(arena, item);
		result_Observation_Component->value_type = Observation_Component::ValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueSampledData");
		result_Observation_Component->value.valueSampledData = Deserialize_SampledData(arena, item);
		result_Observation_Component->value_type = Observation_Component::ValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueTime");
		result_Observation_Component->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Observation_Component->value_type = Observation_Component::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valueDateTime");
		result_Observation_Component->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Observation_Component->value_type = Observation_Component::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(observation_Component, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(observation_Component, "valuePeriod");
		result_Observation_Component->value.valuePeriod = Deserialize_Period(arena, item);
		result_Observation_Component->value_type = Observation_Component::ValueType::Period;
	}


	cJSON *cjson_dataAbsentReason =  cJSON_GetObjectItem(observation_Component, "dataAbsentReason");
	if(cjson_dataAbsentReason)
	{
		result_Observation_Component->dataAbsentReason = Deserialize_CodeableConcept(arena, cjson_dataAbsentReason);
	}
	cJSON *cjson_interpretation =  cJSON_GetObjectItem(observation_Component, "interpretation");
	if(cjson_interpretation)
	{
		result_Observation_Component->interpretation_count = cJSON_GetArraySize(cjson_interpretation);
		result_Observation_Component->interpretation = PushArray(arena, CodeableConcept, result_Observation_Component->interpretation_count);
		for(int i = 0; i < result_Observation_Component->interpretation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_interpretation, i);
			result_Observation_Component->interpretation[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_referenceRange =  cJSON_GetObjectItem(observation_Component, "referenceRange");
	if(cjson_referenceRange)
	{
		result_Observation_Component->referenceRange_count = cJSON_GetArraySize(cjson_referenceRange);
		result_Observation_Component->referenceRange = PushArray(arena, Observation_ReferenceRange, result_Observation_Component->referenceRange_count);
		for(int i = 0; i < result_Observation_Component->referenceRange_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referenceRange, i);
			result_Observation_Component->referenceRange[i] = *Deserialize_Observation_ReferenceRange(arena, internal);
		}

	}
	return result_Observation_Component;
}

ObservationDefinition*
Deserialize_ObservationDefinition(Arena *arena, cJSON *observationDefinition)
{
	ObservationDefinition *result_ObservationDefinition = PushArray(arena, ObservationDefinition, 1);
	result_ObservationDefinition->resourceType = ResourceType::ObservationDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(observationDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(observationDefinition, "id");
	if(cjson_id)
	{
		result_ObservationDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(observationDefinition, "meta");
	if(cjson_meta)
	{
		result_ObservationDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(observationDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ObservationDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(observationDefinition, "language");
	if(cjson_language)
	{
		result_ObservationDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(observationDefinition, "text");
	if(cjson_text)
	{
		result_ObservationDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(observationDefinition, "contained");
	if(cjson_contained)
	{
		result_ObservationDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ObservationDefinition->contained = PushArray(arena, Resource, result_ObservationDefinition->contained_count);
		for(int i = 0; i < result_ObservationDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ObservationDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(observationDefinition, "extension");
	if(cjson_extension)
	{
		result_ObservationDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ObservationDefinition->extension = PushArray(arena, Extension, result_ObservationDefinition->extension_count);
		for(int i = 0; i < result_ObservationDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ObservationDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(observationDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ObservationDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ObservationDefinition->modifierExtension = PushArray(arena, Extension, result_ObservationDefinition->modifierExtension_count);
		for(int i = 0; i < result_ObservationDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ObservationDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(observationDefinition, "category");
	if(cjson_category)
	{
		result_ObservationDefinition->category_count = cJSON_GetArraySize(cjson_category);
		result_ObservationDefinition->category = PushArray(arena, CodeableConcept, result_ObservationDefinition->category_count);
		for(int i = 0; i < result_ObservationDefinition->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_ObservationDefinition->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(observationDefinition, "code");
	if(cjson_code)
	{
		result_ObservationDefinition->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(observationDefinition, "identifier");
	if(cjson_identifier)
	{
		result_ObservationDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ObservationDefinition->identifier = PushArray(arena, Identifier, result_ObservationDefinition->identifier_count);
		for(int i = 0; i < result_ObservationDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ObservationDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_permittedDataType =  cJSON_GetObjectItem(observationDefinition, "permittedDataType");
	if(cjson_permittedDataType)
	{
		result_ObservationDefinition->permittedDataType_count = cJSON_GetArraySize(cjson_permittedDataType);
		result_ObservationDefinition->permittedDataType = PushArray(arena, fhir_code, result_ObservationDefinition->permittedDataType_count);
		for(int i = 0; i < result_ObservationDefinition->permittedDataType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_permittedDataType, i);
			result_ObservationDefinition->permittedDataType[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_multipleResultsAllowed =  cJSON_GetObjectItem(observationDefinition, "multipleResultsAllowed");
	if(cjson_multipleResultsAllowed)
	{
		result_ObservationDefinition->multipleResultsAllowed = (boolean)cJSON_IsTrue(cjson_multipleResultsAllowed);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(observationDefinition, "method");
	if(cjson_method)
	{
		result_ObservationDefinition->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_preferredReportName =  cJSON_GetObjectItem(observationDefinition, "preferredReportName");
	if(cjson_preferredReportName)
	{
		result_ObservationDefinition->preferredReportName = Str8C(cJSON_GetStringValue(cjson_preferredReportName));
	}
	cJSON *cjson_quantitativeDetails =  cJSON_GetObjectItem(observationDefinition, "quantitativeDetails");
	if(cjson_quantitativeDetails)
	{
		result_ObservationDefinition->quantitativeDetails = Deserialize_ObservationDefinition_QuantitativeDetails(arena, cjson_quantitativeDetails);
	}
	cJSON *cjson_qualifiedInterval =  cJSON_GetObjectItem(observationDefinition, "qualifiedInterval");
	if(cjson_qualifiedInterval)
	{
		result_ObservationDefinition->qualifiedInterval_count = cJSON_GetArraySize(cjson_qualifiedInterval);
		result_ObservationDefinition->qualifiedInterval = PushArray(arena, ObservationDefinition_QualifiedInterval, result_ObservationDefinition->qualifiedInterval_count);
		for(int i = 0; i < result_ObservationDefinition->qualifiedInterval_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_qualifiedInterval, i);
			result_ObservationDefinition->qualifiedInterval[i] = *Deserialize_ObservationDefinition_QualifiedInterval(arena, internal);
		}

	}
	cJSON *cjson_validCodedValueSet =  cJSON_GetObjectItem(observationDefinition, "validCodedValueSet");
	if(cjson_validCodedValueSet)
	{
		result_ObservationDefinition->validCodedValueSet = Deserialize_Reference(arena, cjson_validCodedValueSet);
	}
	cJSON *cjson_normalCodedValueSet =  cJSON_GetObjectItem(observationDefinition, "normalCodedValueSet");
	if(cjson_normalCodedValueSet)
	{
		result_ObservationDefinition->normalCodedValueSet = Deserialize_Reference(arena, cjson_normalCodedValueSet);
	}
	cJSON *cjson_abnormalCodedValueSet =  cJSON_GetObjectItem(observationDefinition, "abnormalCodedValueSet");
	if(cjson_abnormalCodedValueSet)
	{
		result_ObservationDefinition->abnormalCodedValueSet = Deserialize_Reference(arena, cjson_abnormalCodedValueSet);
	}
	cJSON *cjson_criticalCodedValueSet =  cJSON_GetObjectItem(observationDefinition, "criticalCodedValueSet");
	if(cjson_criticalCodedValueSet)
	{
		result_ObservationDefinition->criticalCodedValueSet = Deserialize_Reference(arena, cjson_criticalCodedValueSet);
	}
	return result_ObservationDefinition;
}

ObservationDefinition_QuantitativeDetails*
Deserialize_ObservationDefinition_QuantitativeDetails(Arena *arena, cJSON *observationDefinition_QuantitativeDetails)
{
	ObservationDefinition_QuantitativeDetails *result_ObservationDefinition_QuantitativeDetails = PushArray(arena, ObservationDefinition_QuantitativeDetails, 1);
	result_ObservationDefinition_QuantitativeDetails->resourceType = ResourceType::ObservationDefinition_QuantitativeDetails;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "id");
	if(cjson_id)
	{
		result_ObservationDefinition_QuantitativeDetails->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "extension");
	if(cjson_extension)
	{
		result_ObservationDefinition_QuantitativeDetails->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ObservationDefinition_QuantitativeDetails->extension = PushArray(arena, Extension, result_ObservationDefinition_QuantitativeDetails->extension_count);
		for(int i = 0; i < result_ObservationDefinition_QuantitativeDetails->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ObservationDefinition_QuantitativeDetails->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ObservationDefinition_QuantitativeDetails->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ObservationDefinition_QuantitativeDetails->modifierExtension = PushArray(arena, Extension, result_ObservationDefinition_QuantitativeDetails->modifierExtension_count);
		for(int i = 0; i < result_ObservationDefinition_QuantitativeDetails->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ObservationDefinition_QuantitativeDetails->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_customaryUnit =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "customaryUnit");
	if(cjson_customaryUnit)
	{
		result_ObservationDefinition_QuantitativeDetails->customaryUnit = Deserialize_CodeableConcept(arena, cjson_customaryUnit);
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "unit");
	if(cjson_unit)
	{
		result_ObservationDefinition_QuantitativeDetails->unit = Deserialize_CodeableConcept(arena, cjson_unit);
	}
	cJSON *cjson_conversionFactor =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "conversionFactor");
	if(cjson_conversionFactor)
	{
		result_ObservationDefinition_QuantitativeDetails->conversionFactor = cJSON_GetNumberValue(cjson_conversionFactor);
	}
	cJSON *cjson_decimalPrecision =  cJSON_GetObjectItem(observationDefinition_QuantitativeDetails, "decimalPrecision");
	if(cjson_decimalPrecision)
	{
		result_ObservationDefinition_QuantitativeDetails->decimalPrecision = Deserialize_Integer(arena, cjson_decimalPrecision);
	}
	return result_ObservationDefinition_QuantitativeDetails;
}

ObservationDefinition_QualifiedInterval*
Deserialize_ObservationDefinition_QualifiedInterval(Arena *arena, cJSON *observationDefinition_QualifiedInterval)
{
	ObservationDefinition_QualifiedInterval *result_ObservationDefinition_QualifiedInterval = PushArray(arena, ObservationDefinition_QualifiedInterval, 1);
	result_ObservationDefinition_QualifiedInterval->resourceType = ResourceType::ObservationDefinition_QualifiedInterval;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "id");
	if(cjson_id)
	{
		result_ObservationDefinition_QualifiedInterval->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "extension");
	if(cjson_extension)
	{
		result_ObservationDefinition_QualifiedInterval->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ObservationDefinition_QualifiedInterval->extension = PushArray(arena, Extension, result_ObservationDefinition_QualifiedInterval->extension_count);
		for(int i = 0; i < result_ObservationDefinition_QualifiedInterval->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ObservationDefinition_QualifiedInterval->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ObservationDefinition_QualifiedInterval->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ObservationDefinition_QualifiedInterval->modifierExtension = PushArray(arena, Extension, result_ObservationDefinition_QualifiedInterval->modifierExtension_count);
		for(int i = 0; i < result_ObservationDefinition_QualifiedInterval->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ObservationDefinition_QualifiedInterval->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "category");
	if(cjson_category)
	{
		result_ObservationDefinition_QualifiedInterval->category = Str8C(cJSON_GetStringValue(cjson_category));
	}
	cJSON *cjson_range =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "range");
	if(cjson_range)
	{
		result_ObservationDefinition_QualifiedInterval->range = Deserialize_Range(arena, cjson_range);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "context");
	if(cjson_context)
	{
		result_ObservationDefinition_QualifiedInterval->context = Deserialize_CodeableConcept(arena, cjson_context);
	}
	cJSON *cjson_appliesTo =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "appliesTo");
	if(cjson_appliesTo)
	{
		result_ObservationDefinition_QualifiedInterval->appliesTo_count = cJSON_GetArraySize(cjson_appliesTo);
		result_ObservationDefinition_QualifiedInterval->appliesTo = PushArray(arena, CodeableConcept, result_ObservationDefinition_QualifiedInterval->appliesTo_count);
		for(int i = 0; i < result_ObservationDefinition_QualifiedInterval->appliesTo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_appliesTo, i);
			result_ObservationDefinition_QualifiedInterval->appliesTo[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_gender =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "gender");
	if(cjson_gender)
	{
		result_ObservationDefinition_QualifiedInterval->gender = Str8C(cJSON_GetStringValue(cjson_gender));
	}
	cJSON *cjson_age =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "age");
	if(cjson_age)
	{
		result_ObservationDefinition_QualifiedInterval->age = Deserialize_Range(arena, cjson_age);
	}
	cJSON *cjson_gestationalAge =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "gestationalAge");
	if(cjson_gestationalAge)
	{
		result_ObservationDefinition_QualifiedInterval->gestationalAge = Deserialize_Range(arena, cjson_gestationalAge);
	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(observationDefinition_QualifiedInterval, "condition");
	if(cjson_condition)
	{
		result_ObservationDefinition_QualifiedInterval->condition = Str8C(cJSON_GetStringValue(cjson_condition));
	}
	return result_ObservationDefinition_QualifiedInterval;
}

OperationDefinition*
Deserialize_OperationDefinition(Arena *arena, cJSON *operationDefinition)
{
	OperationDefinition *result_OperationDefinition = PushArray(arena, OperationDefinition, 1);
	result_OperationDefinition->resourceType = ResourceType::OperationDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(operationDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(operationDefinition, "id");
	if(cjson_id)
	{
		result_OperationDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(operationDefinition, "meta");
	if(cjson_meta)
	{
		result_OperationDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(operationDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_OperationDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(operationDefinition, "language");
	if(cjson_language)
	{
		result_OperationDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(operationDefinition, "text");
	if(cjson_text)
	{
		result_OperationDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(operationDefinition, "contained");
	if(cjson_contained)
	{
		result_OperationDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_OperationDefinition->contained = PushArray(arena, Resource, result_OperationDefinition->contained_count);
		for(int i = 0; i < result_OperationDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_OperationDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(operationDefinition, "extension");
	if(cjson_extension)
	{
		result_OperationDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OperationDefinition->extension = PushArray(arena, Extension, result_OperationDefinition->extension_count);
		for(int i = 0; i < result_OperationDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OperationDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(operationDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OperationDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OperationDefinition->modifierExtension = PushArray(arena, Extension, result_OperationDefinition->modifierExtension_count);
		for(int i = 0; i < result_OperationDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OperationDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(operationDefinition, "url");
	if(cjson_url)
	{
		result_OperationDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(operationDefinition, "version");
	if(cjson_version)
	{
		result_OperationDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(operationDefinition, "name");
	if(cjson_name)
	{
		result_OperationDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(operationDefinition, "title");
	if(cjson_title)
	{
		result_OperationDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(operationDefinition, "status");
	if(cjson_status)
	{
		result_OperationDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(operationDefinition, "kind");
	if(cjson_kind)
	{
		result_OperationDefinition->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(operationDefinition, "experimental");
	if(cjson_experimental)
	{
		result_OperationDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(operationDefinition, "date");
	if(cjson_date)
	{
		result_OperationDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(operationDefinition, "publisher");
	if(cjson_publisher)
	{
		result_OperationDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(operationDefinition, "contact");
	if(cjson_contact)
	{
		result_OperationDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_OperationDefinition->contact = PushArray(arena, ContactDetail, result_OperationDefinition->contact_count);
		for(int i = 0; i < result_OperationDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_OperationDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(operationDefinition, "description");
	if(cjson_description)
	{
		result_OperationDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(operationDefinition, "useContext");
	if(cjson_useContext)
	{
		result_OperationDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_OperationDefinition->useContext = PushArray(arena, UsageContext, result_OperationDefinition->useContext_count);
		for(int i = 0; i < result_OperationDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_OperationDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(operationDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_OperationDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_OperationDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_OperationDefinition->jurisdiction_count);
		for(int i = 0; i < result_OperationDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_OperationDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(operationDefinition, "purpose");
	if(cjson_purpose)
	{
		result_OperationDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_affectsState =  cJSON_GetObjectItem(operationDefinition, "affectsState");
	if(cjson_affectsState)
	{
		result_OperationDefinition->affectsState = (boolean)cJSON_IsTrue(cjson_affectsState);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(operationDefinition, "code");
	if(cjson_code)
	{
		result_OperationDefinition->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(operationDefinition, "comment");
	if(cjson_comment)
	{
		result_OperationDefinition->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_base =  cJSON_GetObjectItem(operationDefinition, "base");
	if(cjson_base)
	{
		result_OperationDefinition->base = Str8C(cJSON_GetStringValue(cjson_base));
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(operationDefinition, "resource");
	if(cjson_resource)
	{
		result_OperationDefinition->resource_count = cJSON_GetArraySize(cjson_resource);
		result_OperationDefinition->resource = PushArray(arena, fhir_code, result_OperationDefinition->resource_count);
		for(int i = 0; i < result_OperationDefinition->resource_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_resource, i);
			result_OperationDefinition->resource[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_system =  cJSON_GetObjectItem(operationDefinition, "system");
	if(cjson_system)
	{
		result_OperationDefinition->system = (boolean)cJSON_IsTrue(cjson_system);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(operationDefinition, "type");
	if(cjson_type)
	{
		result_OperationDefinition->type = (boolean)cJSON_IsTrue(cjson_type);
	}
	cJSON *cjson_instance =  cJSON_GetObjectItem(operationDefinition, "instance");
	if(cjson_instance)
	{
		result_OperationDefinition->instance = (boolean)cJSON_IsTrue(cjson_instance);
	}
	cJSON *cjson_inputProfile =  cJSON_GetObjectItem(operationDefinition, "inputProfile");
	if(cjson_inputProfile)
	{
		result_OperationDefinition->inputProfile = Str8C(cJSON_GetStringValue(cjson_inputProfile));
	}
	cJSON *cjson_outputProfile =  cJSON_GetObjectItem(operationDefinition, "outputProfile");
	if(cjson_outputProfile)
	{
		result_OperationDefinition->outputProfile = Str8C(cJSON_GetStringValue(cjson_outputProfile));
	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(operationDefinition, "parameter");
	if(cjson_parameter)
	{
		result_OperationDefinition->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_OperationDefinition->parameter = PushArray(arena, OperationDefinition_Parameter, result_OperationDefinition->parameter_count);
		for(int i = 0; i < result_OperationDefinition->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_OperationDefinition->parameter[i] = *Deserialize_OperationDefinition_Parameter(arena, internal);
		}

	}
	cJSON *cjson_overload =  cJSON_GetObjectItem(operationDefinition, "overload");
	if(cjson_overload)
	{
		result_OperationDefinition->overload_count = cJSON_GetArraySize(cjson_overload);
		result_OperationDefinition->overload = PushArray(arena, OperationDefinition_Overload, result_OperationDefinition->overload_count);
		for(int i = 0; i < result_OperationDefinition->overload_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_overload, i);
			result_OperationDefinition->overload[i] = *Deserialize_OperationDefinition_Overload(arena, internal);
		}

	}
	return result_OperationDefinition;
}

OperationDefinition_Parameter*
Deserialize_OperationDefinition_Parameter(Arena *arena, cJSON *operationDefinition_Parameter)
{
	OperationDefinition_Parameter *result_OperationDefinition_Parameter = PushArray(arena, OperationDefinition_Parameter, 1);
	result_OperationDefinition_Parameter->resourceType = ResourceType::OperationDefinition_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(operationDefinition_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(operationDefinition_Parameter, "id");
	if(cjson_id)
	{
		result_OperationDefinition_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(operationDefinition_Parameter, "extension");
	if(cjson_extension)
	{
		result_OperationDefinition_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OperationDefinition_Parameter->extension = PushArray(arena, Extension, result_OperationDefinition_Parameter->extension_count);
		for(int i = 0; i < result_OperationDefinition_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OperationDefinition_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(operationDefinition_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OperationDefinition_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OperationDefinition_Parameter->modifierExtension = PushArray(arena, Extension, result_OperationDefinition_Parameter->modifierExtension_count);
		for(int i = 0; i < result_OperationDefinition_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OperationDefinition_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(operationDefinition_Parameter, "name");
	if(cjson_name)
	{
		result_OperationDefinition_Parameter->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(operationDefinition_Parameter, "use");
	if(cjson_use)
	{
		result_OperationDefinition_Parameter->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_min =  cJSON_GetObjectItem(operationDefinition_Parameter, "min");
	if(cjson_min)
	{
		result_OperationDefinition_Parameter->min = Deserialize_Integer(arena, cjson_min);
	}
	cJSON *cjson_max =  cJSON_GetObjectItem(operationDefinition_Parameter, "max");
	if(cjson_max)
	{
		result_OperationDefinition_Parameter->max = Str8C(cJSON_GetStringValue(cjson_max));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(operationDefinition_Parameter, "documentation");
	if(cjson_documentation)
	{
		result_OperationDefinition_Parameter->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(operationDefinition_Parameter, "type");
	if(cjson_type)
	{
		result_OperationDefinition_Parameter->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_targetProfile =  cJSON_GetObjectItem(operationDefinition_Parameter, "targetProfile");
	if(cjson_targetProfile)
	{
		result_OperationDefinition_Parameter->targetProfile_count = cJSON_GetArraySize(cjson_targetProfile);
		result_OperationDefinition_Parameter->targetProfile = PushArray(arena, fhir_canonical, result_OperationDefinition_Parameter->targetProfile_count);
		for(int i = 0; i < result_OperationDefinition_Parameter->targetProfile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_targetProfile, i);
			result_OperationDefinition_Parameter->targetProfile[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_searchType =  cJSON_GetObjectItem(operationDefinition_Parameter, "searchType");
	if(cjson_searchType)
	{
		result_OperationDefinition_Parameter->searchType = Str8C(cJSON_GetStringValue(cjson_searchType));
	}
	cJSON *cjson_binding =  cJSON_GetObjectItem(operationDefinition_Parameter, "binding");
	if(cjson_binding)
	{
		result_OperationDefinition_Parameter->binding = Deserialize_OperationDefinition_Parameter_Binding(arena, cjson_binding);
	}
	cJSON *cjson_referencedFrom =  cJSON_GetObjectItem(operationDefinition_Parameter, "referencedFrom");
	if(cjson_referencedFrom)
	{
		result_OperationDefinition_Parameter->referencedFrom_count = cJSON_GetArraySize(cjson_referencedFrom);
		result_OperationDefinition_Parameter->referencedFrom = PushArray(arena, OperationDefinition_Parameter_ReferencedFrom, result_OperationDefinition_Parameter->referencedFrom_count);
		for(int i = 0; i < result_OperationDefinition_Parameter->referencedFrom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_referencedFrom, i);
			result_OperationDefinition_Parameter->referencedFrom[i] = *Deserialize_OperationDefinition_Parameter_ReferencedFrom(arena, internal);
		}

	}
	cJSON *cjson_part =  cJSON_GetObjectItem(operationDefinition_Parameter, "part");
	if(cjson_part)
	{
		result_OperationDefinition_Parameter->part_count = cJSON_GetArraySize(cjson_part);
		result_OperationDefinition_Parameter->part = PushArray(arena, OperationDefinition_Parameter, result_OperationDefinition_Parameter->part_count);
		for(int i = 0; i < result_OperationDefinition_Parameter->part_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_part, i);
			result_OperationDefinition_Parameter->part[i] = *Deserialize_OperationDefinition_Parameter(arena, internal);
		}

	}
	return result_OperationDefinition_Parameter;
}

OperationDefinition_Parameter_Binding*
Deserialize_OperationDefinition_Parameter_Binding(Arena *arena, cJSON *operationDefinition_Parameter_Binding)
{
	OperationDefinition_Parameter_Binding *result_OperationDefinition_Parameter_Binding = PushArray(arena, OperationDefinition_Parameter_Binding, 1);
	result_OperationDefinition_Parameter_Binding->resourceType = ResourceType::OperationDefinition_Parameter_Binding;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(operationDefinition_Parameter_Binding, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(operationDefinition_Parameter_Binding, "id");
	if(cjson_id)
	{
		result_OperationDefinition_Parameter_Binding->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(operationDefinition_Parameter_Binding, "extension");
	if(cjson_extension)
	{
		result_OperationDefinition_Parameter_Binding->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OperationDefinition_Parameter_Binding->extension = PushArray(arena, Extension, result_OperationDefinition_Parameter_Binding->extension_count);
		for(int i = 0; i < result_OperationDefinition_Parameter_Binding->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OperationDefinition_Parameter_Binding->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(operationDefinition_Parameter_Binding, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OperationDefinition_Parameter_Binding->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OperationDefinition_Parameter_Binding->modifierExtension = PushArray(arena, Extension, result_OperationDefinition_Parameter_Binding->modifierExtension_count);
		for(int i = 0; i < result_OperationDefinition_Parameter_Binding->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OperationDefinition_Parameter_Binding->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_strength =  cJSON_GetObjectItem(operationDefinition_Parameter_Binding, "strength");
	if(cjson_strength)
	{
		result_OperationDefinition_Parameter_Binding->strength = Str8C(cJSON_GetStringValue(cjson_strength));
	}
	cJSON *cjson_valueSet =  cJSON_GetObjectItem(operationDefinition_Parameter_Binding, "valueSet");
	if(cjson_valueSet)
	{
		result_OperationDefinition_Parameter_Binding->valueSet = Str8C(cJSON_GetStringValue(cjson_valueSet));
	}
	return result_OperationDefinition_Parameter_Binding;
}

OperationDefinition_Parameter_ReferencedFrom*
Deserialize_OperationDefinition_Parameter_ReferencedFrom(Arena *arena, cJSON *operationDefinition_Parameter_ReferencedFrom)
{
	OperationDefinition_Parameter_ReferencedFrom *result_OperationDefinition_Parameter_ReferencedFrom = PushArray(arena, OperationDefinition_Parameter_ReferencedFrom, 1);
	result_OperationDefinition_Parameter_ReferencedFrom->resourceType = ResourceType::OperationDefinition_Parameter_ReferencedFrom;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(operationDefinition_Parameter_ReferencedFrom, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(operationDefinition_Parameter_ReferencedFrom, "id");
	if(cjson_id)
	{
		result_OperationDefinition_Parameter_ReferencedFrom->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(operationDefinition_Parameter_ReferencedFrom, "extension");
	if(cjson_extension)
	{
		result_OperationDefinition_Parameter_ReferencedFrom->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OperationDefinition_Parameter_ReferencedFrom->extension = PushArray(arena, Extension, result_OperationDefinition_Parameter_ReferencedFrom->extension_count);
		for(int i = 0; i < result_OperationDefinition_Parameter_ReferencedFrom->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OperationDefinition_Parameter_ReferencedFrom->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(operationDefinition_Parameter_ReferencedFrom, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OperationDefinition_Parameter_ReferencedFrom->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OperationDefinition_Parameter_ReferencedFrom->modifierExtension = PushArray(arena, Extension, result_OperationDefinition_Parameter_ReferencedFrom->modifierExtension_count);
		for(int i = 0; i < result_OperationDefinition_Parameter_ReferencedFrom->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OperationDefinition_Parameter_ReferencedFrom->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_source =  cJSON_GetObjectItem(operationDefinition_Parameter_ReferencedFrom, "source");
	if(cjson_source)
	{
		result_OperationDefinition_Parameter_ReferencedFrom->source = Str8C(cJSON_GetStringValue(cjson_source));
	}
	cJSON *cjson_sourceId =  cJSON_GetObjectItem(operationDefinition_Parameter_ReferencedFrom, "sourceId");
	if(cjson_sourceId)
	{
		result_OperationDefinition_Parameter_ReferencedFrom->sourceId = Str8C(cJSON_GetStringValue(cjson_sourceId));
	}
	return result_OperationDefinition_Parameter_ReferencedFrom;
}

OperationDefinition_Overload*
Deserialize_OperationDefinition_Overload(Arena *arena, cJSON *operationDefinition_Overload)
{
	OperationDefinition_Overload *result_OperationDefinition_Overload = PushArray(arena, OperationDefinition_Overload, 1);
	result_OperationDefinition_Overload->resourceType = ResourceType::OperationDefinition_Overload;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(operationDefinition_Overload, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(operationDefinition_Overload, "id");
	if(cjson_id)
	{
		result_OperationDefinition_Overload->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(operationDefinition_Overload, "extension");
	if(cjson_extension)
	{
		result_OperationDefinition_Overload->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OperationDefinition_Overload->extension = PushArray(arena, Extension, result_OperationDefinition_Overload->extension_count);
		for(int i = 0; i < result_OperationDefinition_Overload->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OperationDefinition_Overload->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(operationDefinition_Overload, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OperationDefinition_Overload->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OperationDefinition_Overload->modifierExtension = PushArray(arena, Extension, result_OperationDefinition_Overload->modifierExtension_count);
		for(int i = 0; i < result_OperationDefinition_Overload->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OperationDefinition_Overload->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_parameterName =  cJSON_GetObjectItem(operationDefinition_Overload, "parameterName");
	if(cjson_parameterName)
	{
		result_OperationDefinition_Overload->parameterName_count = cJSON_GetArraySize(cjson_parameterName);
		result_OperationDefinition_Overload->parameterName = PushArray(arena, fhir_string, result_OperationDefinition_Overload->parameterName_count);
		for(int i = 0; i < result_OperationDefinition_Overload->parameterName_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameterName, i);
			result_OperationDefinition_Overload->parameterName[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(operationDefinition_Overload, "comment");
	if(cjson_comment)
	{
		result_OperationDefinition_Overload->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_OperationDefinition_Overload;
}

OperationOutcome*
Deserialize_OperationOutcome(Arena *arena, cJSON *operationOutcome)
{
	OperationOutcome *result_OperationOutcome = PushArray(arena, OperationOutcome, 1);
	result_OperationOutcome->resourceType = ResourceType::OperationOutcome;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(operationOutcome, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(operationOutcome, "id");
	if(cjson_id)
	{
		result_OperationOutcome->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(operationOutcome, "meta");
	if(cjson_meta)
	{
		result_OperationOutcome->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(operationOutcome, "implicitRules");
	if(cjson_implicitRules)
	{
		result_OperationOutcome->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(operationOutcome, "language");
	if(cjson_language)
	{
		result_OperationOutcome->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(operationOutcome, "text");
	if(cjson_text)
	{
		result_OperationOutcome->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(operationOutcome, "contained");
	if(cjson_contained)
	{
		result_OperationOutcome->contained_count = cJSON_GetArraySize(cjson_contained);
		result_OperationOutcome->contained = PushArray(arena, Resource, result_OperationOutcome->contained_count);
		for(int i = 0; i < result_OperationOutcome->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_OperationOutcome->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(operationOutcome, "extension");
	if(cjson_extension)
	{
		result_OperationOutcome->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OperationOutcome->extension = PushArray(arena, Extension, result_OperationOutcome->extension_count);
		for(int i = 0; i < result_OperationOutcome->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OperationOutcome->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(operationOutcome, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OperationOutcome->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OperationOutcome->modifierExtension = PushArray(arena, Extension, result_OperationOutcome->modifierExtension_count);
		for(int i = 0; i < result_OperationOutcome->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OperationOutcome->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_issue =  cJSON_GetObjectItem(operationOutcome, "issue");
	if(cjson_issue)
	{
		result_OperationOutcome->issue_count = cJSON_GetArraySize(cjson_issue);
		result_OperationOutcome->issue = PushArray(arena, OperationOutcome_Issue, result_OperationOutcome->issue_count);
		for(int i = 0; i < result_OperationOutcome->issue_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_issue, i);
			result_OperationOutcome->issue[i] = *Deserialize_OperationOutcome_Issue(arena, internal);
		}

	}
	return result_OperationOutcome;
}

OperationOutcome_Issue*
Deserialize_OperationOutcome_Issue(Arena *arena, cJSON *operationOutcome_Issue)
{
	OperationOutcome_Issue *result_OperationOutcome_Issue = PushArray(arena, OperationOutcome_Issue, 1);
	result_OperationOutcome_Issue->resourceType = ResourceType::OperationOutcome_Issue;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(operationOutcome_Issue, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(operationOutcome_Issue, "id");
	if(cjson_id)
	{
		result_OperationOutcome_Issue->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(operationOutcome_Issue, "extension");
	if(cjson_extension)
	{
		result_OperationOutcome_Issue->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OperationOutcome_Issue->extension = PushArray(arena, Extension, result_OperationOutcome_Issue->extension_count);
		for(int i = 0; i < result_OperationOutcome_Issue->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OperationOutcome_Issue->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(operationOutcome_Issue, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OperationOutcome_Issue->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OperationOutcome_Issue->modifierExtension = PushArray(arena, Extension, result_OperationOutcome_Issue->modifierExtension_count);
		for(int i = 0; i < result_OperationOutcome_Issue->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OperationOutcome_Issue->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_severity =  cJSON_GetObjectItem(operationOutcome_Issue, "severity");
	if(cjson_severity)
	{
		result_OperationOutcome_Issue->severity = Str8C(cJSON_GetStringValue(cjson_severity));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(operationOutcome_Issue, "code");
	if(cjson_code)
	{
		result_OperationOutcome_Issue->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_details =  cJSON_GetObjectItem(operationOutcome_Issue, "details");
	if(cjson_details)
	{
		result_OperationOutcome_Issue->details = Deserialize_CodeableConcept(arena, cjson_details);
	}
	cJSON *cjson_diagnostics =  cJSON_GetObjectItem(operationOutcome_Issue, "diagnostics");
	if(cjson_diagnostics)
	{
		result_OperationOutcome_Issue->diagnostics = Str8C(cJSON_GetStringValue(cjson_diagnostics));
	}
	cJSON *cjson_location =  cJSON_GetObjectItem(operationOutcome_Issue, "location");
	if(cjson_location)
	{
		result_OperationOutcome_Issue->location_count = cJSON_GetArraySize(cjson_location);
		result_OperationOutcome_Issue->location = PushArray(arena, fhir_string, result_OperationOutcome_Issue->location_count);
		for(int i = 0; i < result_OperationOutcome_Issue->location_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_location, i);
			result_OperationOutcome_Issue->location[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(operationOutcome_Issue, "expression");
	if(cjson_expression)
	{
		result_OperationOutcome_Issue->expression_count = cJSON_GetArraySize(cjson_expression);
		result_OperationOutcome_Issue->expression = PushArray(arena, fhir_string, result_OperationOutcome_Issue->expression_count);
		for(int i = 0; i < result_OperationOutcome_Issue->expression_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_expression, i);
			result_OperationOutcome_Issue->expression[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_OperationOutcome_Issue;
}

Organization*
Deserialize_Organization(Arena *arena, cJSON *organization)
{
	Organization *result_Organization = PushArray(arena, Organization, 1);
	result_Organization->resourceType = ResourceType::Organization;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(organization, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(organization, "id");
	if(cjson_id)
	{
		result_Organization->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(organization, "meta");
	if(cjson_meta)
	{
		result_Organization->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(organization, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Organization->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(organization, "language");
	if(cjson_language)
	{
		result_Organization->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(organization, "text");
	if(cjson_text)
	{
		result_Organization->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(organization, "contained");
	if(cjson_contained)
	{
		result_Organization->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Organization->contained = PushArray(arena, Resource, result_Organization->contained_count);
		for(int i = 0; i < result_Organization->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Organization->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(organization, "extension");
	if(cjson_extension)
	{
		result_Organization->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Organization->extension = PushArray(arena, Extension, result_Organization->extension_count);
		for(int i = 0; i < result_Organization->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Organization->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(organization, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Organization->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Organization->modifierExtension = PushArray(arena, Extension, result_Organization->modifierExtension_count);
		for(int i = 0; i < result_Organization->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Organization->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(organization, "identifier");
	if(cjson_identifier)
	{
		result_Organization->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Organization->identifier = PushArray(arena, Identifier, result_Organization->identifier_count);
		for(int i = 0; i < result_Organization->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Organization->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(organization, "active");
	if(cjson_active)
	{
		result_Organization->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(organization, "type");
	if(cjson_type)
	{
		result_Organization->type_count = cJSON_GetArraySize(cjson_type);
		result_Organization->type = PushArray(arena, CodeableConcept, result_Organization->type_count);
		for(int i = 0; i < result_Organization->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Organization->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(organization, "name");
	if(cjson_name)
	{
		result_Organization->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_alias =  cJSON_GetObjectItem(organization, "alias");
	if(cjson_alias)
	{
		result_Organization->alias_count = cJSON_GetArraySize(cjson_alias);
		result_Organization->alias = PushArray(arena, fhir_string, result_Organization->alias_count);
		for(int i = 0; i < result_Organization->alias_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_alias, i);
			result_Organization->alias[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(organization, "telecom");
	if(cjson_telecom)
	{
		result_Organization->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_Organization->telecom = PushArray(arena, ContactPoint, result_Organization->telecom_count);
		for(int i = 0; i < result_Organization->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_Organization->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(organization, "address");
	if(cjson_address)
	{
		result_Organization->address_count = cJSON_GetArraySize(cjson_address);
		result_Organization->address = PushArray(arena, Address, result_Organization->address_count);
		for(int i = 0; i < result_Organization->address_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_address, i);
			result_Organization->address[i] = *Deserialize_Address(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(organization, "partOf");
	if(cjson_partOf)
	{
		result_Organization->partOf = Deserialize_Reference(arena, cjson_partOf);
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(organization, "contact");
	if(cjson_contact)
	{
		result_Organization->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Organization->contact = PushArray(arena, Organization_Contact, result_Organization->contact_count);
		for(int i = 0; i < result_Organization->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Organization->contact[i] = *Deserialize_Organization_Contact(arena, internal);
		}

	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(organization, "endpoint");
	if(cjson_endpoint)
	{
		result_Organization->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_Organization->endpoint = PushArray(arena, Reference, result_Organization->endpoint_count);
		for(int i = 0; i < result_Organization->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_Organization->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Organization;
}

Organization_Contact*
Deserialize_Organization_Contact(Arena *arena, cJSON *organization_Contact)
{
	Organization_Contact *result_Organization_Contact = PushArray(arena, Organization_Contact, 1);
	result_Organization_Contact->resourceType = ResourceType::Organization_Contact;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(organization_Contact, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(organization_Contact, "id");
	if(cjson_id)
	{
		result_Organization_Contact->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(organization_Contact, "extension");
	if(cjson_extension)
	{
		result_Organization_Contact->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Organization_Contact->extension = PushArray(arena, Extension, result_Organization_Contact->extension_count);
		for(int i = 0; i < result_Organization_Contact->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Organization_Contact->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(organization_Contact, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Organization_Contact->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Organization_Contact->modifierExtension = PushArray(arena, Extension, result_Organization_Contact->modifierExtension_count);
		for(int i = 0; i < result_Organization_Contact->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Organization_Contact->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(organization_Contact, "purpose");
	if(cjson_purpose)
	{
		result_Organization_Contact->purpose = Deserialize_CodeableConcept(arena, cjson_purpose);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(organization_Contact, "name");
	if(cjson_name)
	{
		result_Organization_Contact->name = Deserialize_HumanName(arena, cjson_name);
	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(organization_Contact, "telecom");
	if(cjson_telecom)
	{
		result_Organization_Contact->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_Organization_Contact->telecom = PushArray(arena, ContactPoint, result_Organization_Contact->telecom_count);
		for(int i = 0; i < result_Organization_Contact->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_Organization_Contact->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(organization_Contact, "address");
	if(cjson_address)
	{
		result_Organization_Contact->address = Deserialize_Address(arena, cjson_address);
	}
	return result_Organization_Contact;
}

OrganizationAffiliation*
Deserialize_OrganizationAffiliation(Arena *arena, cJSON *organizationAffiliation)
{
	OrganizationAffiliation *result_OrganizationAffiliation = PushArray(arena, OrganizationAffiliation, 1);
	result_OrganizationAffiliation->resourceType = ResourceType::OrganizationAffiliation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(organizationAffiliation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(organizationAffiliation, "id");
	if(cjson_id)
	{
		result_OrganizationAffiliation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(organizationAffiliation, "meta");
	if(cjson_meta)
	{
		result_OrganizationAffiliation->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(organizationAffiliation, "implicitRules");
	if(cjson_implicitRules)
	{
		result_OrganizationAffiliation->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(organizationAffiliation, "language");
	if(cjson_language)
	{
		result_OrganizationAffiliation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(organizationAffiliation, "text");
	if(cjson_text)
	{
		result_OrganizationAffiliation->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(organizationAffiliation, "contained");
	if(cjson_contained)
	{
		result_OrganizationAffiliation->contained_count = cJSON_GetArraySize(cjson_contained);
		result_OrganizationAffiliation->contained = PushArray(arena, Resource, result_OrganizationAffiliation->contained_count);
		for(int i = 0; i < result_OrganizationAffiliation->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_OrganizationAffiliation->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(organizationAffiliation, "extension");
	if(cjson_extension)
	{
		result_OrganizationAffiliation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_OrganizationAffiliation->extension = PushArray(arena, Extension, result_OrganizationAffiliation->extension_count);
		for(int i = 0; i < result_OrganizationAffiliation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_OrganizationAffiliation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(organizationAffiliation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_OrganizationAffiliation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_OrganizationAffiliation->modifierExtension = PushArray(arena, Extension, result_OrganizationAffiliation->modifierExtension_count);
		for(int i = 0; i < result_OrganizationAffiliation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_OrganizationAffiliation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(organizationAffiliation, "identifier");
	if(cjson_identifier)
	{
		result_OrganizationAffiliation->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_OrganizationAffiliation->identifier = PushArray(arena, Identifier, result_OrganizationAffiliation->identifier_count);
		for(int i = 0; i < result_OrganizationAffiliation->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_OrganizationAffiliation->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(organizationAffiliation, "active");
	if(cjson_active)
	{
		result_OrganizationAffiliation->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(organizationAffiliation, "period");
	if(cjson_period)
	{
		result_OrganizationAffiliation->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_organization =  cJSON_GetObjectItem(organizationAffiliation, "organization");
	if(cjson_organization)
	{
		result_OrganizationAffiliation->organization = Deserialize_Reference(arena, cjson_organization);
	}
	cJSON *cjson_participatingOrganization =  cJSON_GetObjectItem(organizationAffiliation, "participatingOrganization");
	if(cjson_participatingOrganization)
	{
		result_OrganizationAffiliation->participatingOrganization = Deserialize_Reference(arena, cjson_participatingOrganization);
	}
	cJSON *cjson_network =  cJSON_GetObjectItem(organizationAffiliation, "network");
	if(cjson_network)
	{
		result_OrganizationAffiliation->network_count = cJSON_GetArraySize(cjson_network);
		result_OrganizationAffiliation->network = PushArray(arena, Reference, result_OrganizationAffiliation->network_count);
		for(int i = 0; i < result_OrganizationAffiliation->network_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_network, i);
			result_OrganizationAffiliation->network[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(organizationAffiliation, "code");
	if(cjson_code)
	{
		result_OrganizationAffiliation->code_count = cJSON_GetArraySize(cjson_code);
		result_OrganizationAffiliation->code = PushArray(arena, CodeableConcept, result_OrganizationAffiliation->code_count);
		for(int i = 0; i < result_OrganizationAffiliation->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_OrganizationAffiliation->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialty =  cJSON_GetObjectItem(organizationAffiliation, "specialty");
	if(cjson_specialty)
	{
		result_OrganizationAffiliation->specialty_count = cJSON_GetArraySize(cjson_specialty);
		result_OrganizationAffiliation->specialty = PushArray(arena, CodeableConcept, result_OrganizationAffiliation->specialty_count);
		for(int i = 0; i < result_OrganizationAffiliation->specialty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialty, i);
			result_OrganizationAffiliation->specialty[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(organizationAffiliation, "location");
	if(cjson_location)
	{
		result_OrganizationAffiliation->location_count = cJSON_GetArraySize(cjson_location);
		result_OrganizationAffiliation->location = PushArray(arena, Reference, result_OrganizationAffiliation->location_count);
		for(int i = 0; i < result_OrganizationAffiliation->location_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_location, i);
			result_OrganizationAffiliation->location[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_healthcareService =  cJSON_GetObjectItem(organizationAffiliation, "healthcareService");
	if(cjson_healthcareService)
	{
		result_OrganizationAffiliation->healthcareService_count = cJSON_GetArraySize(cjson_healthcareService);
		result_OrganizationAffiliation->healthcareService = PushArray(arena, Reference, result_OrganizationAffiliation->healthcareService_count);
		for(int i = 0; i < result_OrganizationAffiliation->healthcareService_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_healthcareService, i);
			result_OrganizationAffiliation->healthcareService[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(organizationAffiliation, "telecom");
	if(cjson_telecom)
	{
		result_OrganizationAffiliation->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_OrganizationAffiliation->telecom = PushArray(arena, ContactPoint, result_OrganizationAffiliation->telecom_count);
		for(int i = 0; i < result_OrganizationAffiliation->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_OrganizationAffiliation->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(organizationAffiliation, "endpoint");
	if(cjson_endpoint)
	{
		result_OrganizationAffiliation->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_OrganizationAffiliation->endpoint = PushArray(arena, Reference, result_OrganizationAffiliation->endpoint_count);
		for(int i = 0; i < result_OrganizationAffiliation->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_OrganizationAffiliation->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_OrganizationAffiliation;
}

Parameters*
Deserialize_Parameters(Arena *arena, cJSON *parameters)
{
	Parameters *result_Parameters = PushArray(arena, Parameters, 1);
	result_Parameters->resourceType = ResourceType::Parameters;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(parameters, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(parameters, "id");
	if(cjson_id)
	{
		result_Parameters->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(parameters, "meta");
	if(cjson_meta)
	{
		result_Parameters->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(parameters, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Parameters->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(parameters, "language");
	if(cjson_language)
	{
		result_Parameters->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(parameters, "parameter");
	if(cjson_parameter)
	{
		result_Parameters->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_Parameters->parameter = PushArray(arena, Parameters_Parameter, result_Parameters->parameter_count);
		for(int i = 0; i < result_Parameters->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_Parameters->parameter[i] = *Deserialize_Parameters_Parameter(arena, internal);
		}

	}
	return result_Parameters;
}

Parameters_Parameter*
Deserialize_Parameters_Parameter(Arena *arena, cJSON *parameters_Parameter)
{
	Parameters_Parameter *result_Parameters_Parameter = PushArray(arena, Parameters_Parameter, 1);
	result_Parameters_Parameter->resourceType = ResourceType::Parameters_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(parameters_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(parameters_Parameter, "id");
	if(cjson_id)
	{
		result_Parameters_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(parameters_Parameter, "extension");
	if(cjson_extension)
	{
		result_Parameters_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Parameters_Parameter->extension = PushArray(arena, Extension, result_Parameters_Parameter->extension_count);
		for(int i = 0; i < result_Parameters_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Parameters_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(parameters_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Parameters_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Parameters_Parameter->modifierExtension = PushArray(arena, Extension, result_Parameters_Parameter->modifierExtension_count);
		for(int i = 0; i < result_Parameters_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Parameters_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(parameters_Parameter, "name");
	if(cjson_name)
	{
		result_Parameters_Parameter->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueBase64Binary");
		result_Parameters_Parameter->value.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueBoolean");
		result_Parameters_Parameter->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueCanonical");
		result_Parameters_Parameter->value.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueCode");
		result_Parameters_Parameter->value.valueCode = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueDate");
		result_Parameters_Parameter->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueDateTime");
		result_Parameters_Parameter->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueDecimal");
		result_Parameters_Parameter->value.valueDecimal = cJSON_GetNumberValue(item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueId");
		result_Parameters_Parameter->value.valueId = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueInstant");
		result_Parameters_Parameter->value.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueInteger");
		result_Parameters_Parameter->value.valueInteger = Deserialize_Integer(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueMarkdown");
		result_Parameters_Parameter->value.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueOid");
		result_Parameters_Parameter->value.valueOid = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valuePositiveInt");
		result_Parameters_Parameter->value.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueString");
		result_Parameters_Parameter->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueTime");
		result_Parameters_Parameter->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueUnsignedInt");
		result_Parameters_Parameter->value.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueUri");
		result_Parameters_Parameter->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueUrl");
		result_Parameters_Parameter->value.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueUuid");
		result_Parameters_Parameter->value.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueAddress");
		result_Parameters_Parameter->value.valueAddress = Deserialize_Address(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Address;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueAge");
		result_Parameters_Parameter->value.valueAge = Deserialize_Age(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Age;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueAnnotation");
		result_Parameters_Parameter->value.valueAnnotation = Deserialize_Annotation(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueAttachment");
		result_Parameters_Parameter->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueCodeableConcept");
		result_Parameters_Parameter->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueCoding");
		result_Parameters_Parameter->value.valueCoding = Deserialize_Coding(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueContactPoint");
		result_Parameters_Parameter->value.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueCount");
		result_Parameters_Parameter->value.valueCount = Deserialize_Count(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Count;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueDistance");
		result_Parameters_Parameter->value.valueDistance = Deserialize_Distance(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueDuration");
		result_Parameters_Parameter->value.valueDuration = Deserialize_Duration(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueHumanName");
		result_Parameters_Parameter->value.valueHumanName = Deserialize_HumanName(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueIdentifier");
		result_Parameters_Parameter->value.valueIdentifier = Deserialize_Identifier(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueMoney");
		result_Parameters_Parameter->value.valueMoney = Deserialize_Money(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Money;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valuePeriod");
		result_Parameters_Parameter->value.valuePeriod = Deserialize_Period(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueQuantity");
		result_Parameters_Parameter->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueRange");
		result_Parameters_Parameter->value.valueRange = Deserialize_Range(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueRatio");
		result_Parameters_Parameter->value.valueRatio = Deserialize_Ratio(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueReference");
		result_Parameters_Parameter->value.valueReference = Deserialize_Reference(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueSampledData");
		result_Parameters_Parameter->value.valueSampledData = Deserialize_SampledData(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueSignature");
		result_Parameters_Parameter->value.valueSignature = Deserialize_Signature(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueTiming");
		result_Parameters_Parameter->value.valueTiming = Deserialize_Timing(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueContactDetail");
		result_Parameters_Parameter->value.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueContributor");
		result_Parameters_Parameter->value.valueContributor = Deserialize_Contributor(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueDataRequirement");
		result_Parameters_Parameter->value.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueExpression");
		result_Parameters_Parameter->value.valueExpression = Deserialize_Expression(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueParameterDefinition");
		result_Parameters_Parameter->value.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueRelatedArtifact");
		result_Parameters_Parameter->value.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueTriggerDefinition");
		result_Parameters_Parameter->value.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueUsageContext");
		result_Parameters_Parameter->value.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueDosage");
		result_Parameters_Parameter->value.valueDosage = Deserialize_Dosage(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(parameters_Parameter, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(parameters_Parameter, "valueMeta");
		result_Parameters_Parameter->value.valueMeta = Deserialize_Meta(arena, item);
		result_Parameters_Parameter->value_type = Parameters_Parameter::ValueType::Meta;
	}


	cJSON *cjson_resource =  cJSON_GetObjectItem(parameters_Parameter, "resource");
	if(cjson_resource)
	{
		result_Parameters_Parameter->resource = Deserialize_Resource(arena, cjson_resource);
	}
	cJSON *cjson_part =  cJSON_GetObjectItem(parameters_Parameter, "part");
	if(cjson_part)
	{
		result_Parameters_Parameter->part_count = cJSON_GetArraySize(cjson_part);
		result_Parameters_Parameter->part = PushArray(arena, Parameters_Parameter, result_Parameters_Parameter->part_count);
		for(int i = 0; i < result_Parameters_Parameter->part_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_part, i);
			result_Parameters_Parameter->part[i] = *Deserialize_Parameters_Parameter(arena, internal);
		}

	}
	return result_Parameters_Parameter;
}

Patient*
Deserialize_Patient(Arena *arena, cJSON *patient)
{
	Patient *result_Patient = PushArray(arena, Patient, 1);
	result_Patient->resourceType = ResourceType::Patient;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(patient, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(patient, "id");
	if(cjson_id)
	{
		result_Patient->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(patient, "meta");
	if(cjson_meta)
	{
		result_Patient->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(patient, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Patient->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(patient, "language");
	if(cjson_language)
	{
		result_Patient->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(patient, "text");
	if(cjson_text)
	{
		result_Patient->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(patient, "contained");
	if(cjson_contained)
	{
		result_Patient->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Patient->contained = PushArray(arena, Resource, result_Patient->contained_count);
		for(int i = 0; i < result_Patient->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Patient->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(patient, "extension");
	if(cjson_extension)
	{
		result_Patient->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Patient->extension = PushArray(arena, Extension, result_Patient->extension_count);
		for(int i = 0; i < result_Patient->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Patient->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(patient, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Patient->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Patient->modifierExtension = PushArray(arena, Extension, result_Patient->modifierExtension_count);
		for(int i = 0; i < result_Patient->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Patient->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(patient, "identifier");
	if(cjson_identifier)
	{
		result_Patient->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Patient->identifier = PushArray(arena, Identifier, result_Patient->identifier_count);
		for(int i = 0; i < result_Patient->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Patient->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(patient, "active");
	if(cjson_active)
	{
		result_Patient->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(patient, "name");
	if(cjson_name)
	{
		result_Patient->name_count = cJSON_GetArraySize(cjson_name);
		result_Patient->name = PushArray(arena, HumanName, result_Patient->name_count);
		for(int i = 0; i < result_Patient->name_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_name, i);
			result_Patient->name[i] = *Deserialize_HumanName(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(patient, "telecom");
	if(cjson_telecom)
	{
		result_Patient->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_Patient->telecom = PushArray(arena, ContactPoint, result_Patient->telecom_count);
		for(int i = 0; i < result_Patient->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_Patient->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_gender =  cJSON_GetObjectItem(patient, "gender");
	if(cjson_gender)
	{
		result_Patient->gender = Str8C(cJSON_GetStringValue(cjson_gender));
	}
	cJSON *cjson_birthDate =  cJSON_GetObjectItem(patient, "birthDate");
	if(cjson_birthDate)
	{
		result_Patient->birthDate = Str8C(cJSON_GetStringValue(cjson_birthDate));
	}
	if((bool)cJSON_HasObjectItem(patient, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(patient, "valueBoolean");
		result_Patient->deceased.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Patient->deceased_type = Patient::DeceasedType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(patient, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(patient, "valueDateTime");
		result_Patient->deceased.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Patient->deceased_type = Patient::DeceasedType::fhir_dateTime;
	}


	cJSON *cjson_address =  cJSON_GetObjectItem(patient, "address");
	if(cjson_address)
	{
		result_Patient->address_count = cJSON_GetArraySize(cjson_address);
		result_Patient->address = PushArray(arena, Address, result_Patient->address_count);
		for(int i = 0; i < result_Patient->address_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_address, i);
			result_Patient->address[i] = *Deserialize_Address(arena, internal);
		}

	}
	cJSON *cjson_maritalStatus =  cJSON_GetObjectItem(patient, "maritalStatus");
	if(cjson_maritalStatus)
	{
		result_Patient->maritalStatus = Deserialize_CodeableConcept(arena, cjson_maritalStatus);
	}
	if((bool)cJSON_HasObjectItem(patient, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(patient, "valueBoolean");
		result_Patient->multipleBirth.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Patient->multipleBirth_type = Patient::MultipleBirthType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(patient, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(patient, "valueInteger");
		result_Patient->multipleBirth.valueInteger = Deserialize_Integer(arena, item);
		result_Patient->multipleBirth_type = Patient::MultipleBirthType::Integer;
	}


	cJSON *cjson_photo =  cJSON_GetObjectItem(patient, "photo");
	if(cjson_photo)
	{
		result_Patient->photo_count = cJSON_GetArraySize(cjson_photo);
		result_Patient->photo = PushArray(arena, Attachment, result_Patient->photo_count);
		for(int i = 0; i < result_Patient->photo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_photo, i);
			result_Patient->photo[i] = *Deserialize_Attachment(arena, internal);
		}

	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(patient, "contact");
	if(cjson_contact)
	{
		result_Patient->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Patient->contact = PushArray(arena, Patient_Contact, result_Patient->contact_count);
		for(int i = 0; i < result_Patient->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Patient->contact[i] = *Deserialize_Patient_Contact(arena, internal);
		}

	}
	cJSON *cjson_communication =  cJSON_GetObjectItem(patient, "communication");
	if(cjson_communication)
	{
		result_Patient->communication_count = cJSON_GetArraySize(cjson_communication);
		result_Patient->communication = PushArray(arena, Patient_Communication, result_Patient->communication_count);
		for(int i = 0; i < result_Patient->communication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_communication, i);
			result_Patient->communication[i] = *Deserialize_Patient_Communication(arena, internal);
		}

	}
	cJSON *cjson_generalPractitioner =  cJSON_GetObjectItem(patient, "generalPractitioner");
	if(cjson_generalPractitioner)
	{
		result_Patient->generalPractitioner_count = cJSON_GetArraySize(cjson_generalPractitioner);
		result_Patient->generalPractitioner = PushArray(arena, Reference, result_Patient->generalPractitioner_count);
		for(int i = 0; i < result_Patient->generalPractitioner_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_generalPractitioner, i);
			result_Patient->generalPractitioner[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_managingOrganization =  cJSON_GetObjectItem(patient, "managingOrganization");
	if(cjson_managingOrganization)
	{
		result_Patient->managingOrganization = Deserialize_Reference(arena, cjson_managingOrganization);
	}
	cJSON *cjson_link =  cJSON_GetObjectItem(patient, "link");
	if(cjson_link)
	{
		result_Patient->link_count = cJSON_GetArraySize(cjson_link);
		result_Patient->link = PushArray(arena, Patient_Link, result_Patient->link_count);
		for(int i = 0; i < result_Patient->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_Patient->link[i] = *Deserialize_Patient_Link(arena, internal);
		}

	}
	return result_Patient;
}

Patient_Contact*
Deserialize_Patient_Contact(Arena *arena, cJSON *patient_Contact)
{
	Patient_Contact *result_Patient_Contact = PushArray(arena, Patient_Contact, 1);
	result_Patient_Contact->resourceType = ResourceType::Patient_Contact;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(patient_Contact, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(patient_Contact, "id");
	if(cjson_id)
	{
		result_Patient_Contact->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(patient_Contact, "extension");
	if(cjson_extension)
	{
		result_Patient_Contact->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Patient_Contact->extension = PushArray(arena, Extension, result_Patient_Contact->extension_count);
		for(int i = 0; i < result_Patient_Contact->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Patient_Contact->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(patient_Contact, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Patient_Contact->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Patient_Contact->modifierExtension = PushArray(arena, Extension, result_Patient_Contact->modifierExtension_count);
		for(int i = 0; i < result_Patient_Contact->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Patient_Contact->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(patient_Contact, "relationship");
	if(cjson_relationship)
	{
		result_Patient_Contact->relationship_count = cJSON_GetArraySize(cjson_relationship);
		result_Patient_Contact->relationship = PushArray(arena, CodeableConcept, result_Patient_Contact->relationship_count);
		for(int i = 0; i < result_Patient_Contact->relationship_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relationship, i);
			result_Patient_Contact->relationship[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(patient_Contact, "name");
	if(cjson_name)
	{
		result_Patient_Contact->name = Deserialize_HumanName(arena, cjson_name);
	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(patient_Contact, "telecom");
	if(cjson_telecom)
	{
		result_Patient_Contact->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_Patient_Contact->telecom = PushArray(arena, ContactPoint, result_Patient_Contact->telecom_count);
		for(int i = 0; i < result_Patient_Contact->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_Patient_Contact->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(patient_Contact, "address");
	if(cjson_address)
	{
		result_Patient_Contact->address = Deserialize_Address(arena, cjson_address);
	}
	cJSON *cjson_gender =  cJSON_GetObjectItem(patient_Contact, "gender");
	if(cjson_gender)
	{
		result_Patient_Contact->gender = Str8C(cJSON_GetStringValue(cjson_gender));
	}
	cJSON *cjson_organization =  cJSON_GetObjectItem(patient_Contact, "organization");
	if(cjson_organization)
	{
		result_Patient_Contact->organization = Deserialize_Reference(arena, cjson_organization);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(patient_Contact, "period");
	if(cjson_period)
	{
		result_Patient_Contact->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Patient_Contact;
}

Patient_Communication*
Deserialize_Patient_Communication(Arena *arena, cJSON *patient_Communication)
{
	Patient_Communication *result_Patient_Communication = PushArray(arena, Patient_Communication, 1);
	result_Patient_Communication->resourceType = ResourceType::Patient_Communication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(patient_Communication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(patient_Communication, "id");
	if(cjson_id)
	{
		result_Patient_Communication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(patient_Communication, "extension");
	if(cjson_extension)
	{
		result_Patient_Communication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Patient_Communication->extension = PushArray(arena, Extension, result_Patient_Communication->extension_count);
		for(int i = 0; i < result_Patient_Communication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Patient_Communication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(patient_Communication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Patient_Communication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Patient_Communication->modifierExtension = PushArray(arena, Extension, result_Patient_Communication->modifierExtension_count);
		for(int i = 0; i < result_Patient_Communication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Patient_Communication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_language =  cJSON_GetObjectItem(patient_Communication, "language");
	if(cjson_language)
	{
		result_Patient_Communication->language = Deserialize_CodeableConcept(arena, cjson_language);
	}
	cJSON *cjson_preferred =  cJSON_GetObjectItem(patient_Communication, "preferred");
	if(cjson_preferred)
	{
		result_Patient_Communication->preferred = (boolean)cJSON_IsTrue(cjson_preferred);
	}
	return result_Patient_Communication;
}

Patient_Link*
Deserialize_Patient_Link(Arena *arena, cJSON *patient_Link)
{
	Patient_Link *result_Patient_Link = PushArray(arena, Patient_Link, 1);
	result_Patient_Link->resourceType = ResourceType::Patient_Link;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(patient_Link, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(patient_Link, "id");
	if(cjson_id)
	{
		result_Patient_Link->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(patient_Link, "extension");
	if(cjson_extension)
	{
		result_Patient_Link->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Patient_Link->extension = PushArray(arena, Extension, result_Patient_Link->extension_count);
		for(int i = 0; i < result_Patient_Link->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Patient_Link->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(patient_Link, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Patient_Link->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Patient_Link->modifierExtension = PushArray(arena, Extension, result_Patient_Link->modifierExtension_count);
		for(int i = 0; i < result_Patient_Link->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Patient_Link->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_other =  cJSON_GetObjectItem(patient_Link, "other");
	if(cjson_other)
	{
		result_Patient_Link->other = Deserialize_Reference(arena, cjson_other);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(patient_Link, "type");
	if(cjson_type)
	{
		result_Patient_Link->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	return result_Patient_Link;
}

PaymentNotice*
Deserialize_PaymentNotice(Arena *arena, cJSON *paymentNotice)
{
	PaymentNotice *result_PaymentNotice = PushArray(arena, PaymentNotice, 1);
	result_PaymentNotice->resourceType = ResourceType::PaymentNotice;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(paymentNotice, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(paymentNotice, "id");
	if(cjson_id)
	{
		result_PaymentNotice->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(paymentNotice, "meta");
	if(cjson_meta)
	{
		result_PaymentNotice->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(paymentNotice, "implicitRules");
	if(cjson_implicitRules)
	{
		result_PaymentNotice->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(paymentNotice, "language");
	if(cjson_language)
	{
		result_PaymentNotice->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(paymentNotice, "text");
	if(cjson_text)
	{
		result_PaymentNotice->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(paymentNotice, "contained");
	if(cjson_contained)
	{
		result_PaymentNotice->contained_count = cJSON_GetArraySize(cjson_contained);
		result_PaymentNotice->contained = PushArray(arena, Resource, result_PaymentNotice->contained_count);
		for(int i = 0; i < result_PaymentNotice->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_PaymentNotice->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(paymentNotice, "extension");
	if(cjson_extension)
	{
		result_PaymentNotice->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PaymentNotice->extension = PushArray(arena, Extension, result_PaymentNotice->extension_count);
		for(int i = 0; i < result_PaymentNotice->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PaymentNotice->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(paymentNotice, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PaymentNotice->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PaymentNotice->modifierExtension = PushArray(arena, Extension, result_PaymentNotice->modifierExtension_count);
		for(int i = 0; i < result_PaymentNotice->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PaymentNotice->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(paymentNotice, "identifier");
	if(cjson_identifier)
	{
		result_PaymentNotice->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_PaymentNotice->identifier = PushArray(arena, Identifier, result_PaymentNotice->identifier_count);
		for(int i = 0; i < result_PaymentNotice->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_PaymentNotice->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(paymentNotice, "status");
	if(cjson_status)
	{
		result_PaymentNotice->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(paymentNotice, "request");
	if(cjson_request)
	{
		result_PaymentNotice->request = Deserialize_Reference(arena, cjson_request);
	}
	cJSON *cjson_response =  cJSON_GetObjectItem(paymentNotice, "response");
	if(cjson_response)
	{
		result_PaymentNotice->response = Deserialize_Reference(arena, cjson_response);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(paymentNotice, "created");
	if(cjson_created)
	{
		result_PaymentNotice->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_provider =  cJSON_GetObjectItem(paymentNotice, "provider");
	if(cjson_provider)
	{
		result_PaymentNotice->provider = Deserialize_Reference(arena, cjson_provider);
	}
	cJSON *cjson_payment =  cJSON_GetObjectItem(paymentNotice, "payment");
	if(cjson_payment)
	{
		result_PaymentNotice->payment = Deserialize_Reference(arena, cjson_payment);
	}
	cJSON *cjson_paymentDate =  cJSON_GetObjectItem(paymentNotice, "paymentDate");
	if(cjson_paymentDate)
	{
		result_PaymentNotice->paymentDate = Str8C(cJSON_GetStringValue(cjson_paymentDate));
	}
	cJSON *cjson_payee =  cJSON_GetObjectItem(paymentNotice, "payee");
	if(cjson_payee)
	{
		result_PaymentNotice->payee = Deserialize_Reference(arena, cjson_payee);
	}
	cJSON *cjson_recipient =  cJSON_GetObjectItem(paymentNotice, "recipient");
	if(cjson_recipient)
	{
		result_PaymentNotice->recipient = Deserialize_Reference(arena, cjson_recipient);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(paymentNotice, "amount");
	if(cjson_amount)
	{
		result_PaymentNotice->amount = Deserialize_Money(arena, cjson_amount);
	}
	cJSON *cjson_paymentStatus =  cJSON_GetObjectItem(paymentNotice, "paymentStatus");
	if(cjson_paymentStatus)
	{
		result_PaymentNotice->paymentStatus = Deserialize_CodeableConcept(arena, cjson_paymentStatus);
	}
	return result_PaymentNotice;
}

PaymentReconciliation*
Deserialize_PaymentReconciliation(Arena *arena, cJSON *paymentReconciliation)
{
	PaymentReconciliation *result_PaymentReconciliation = PushArray(arena, PaymentReconciliation, 1);
	result_PaymentReconciliation->resourceType = ResourceType::PaymentReconciliation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(paymentReconciliation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(paymentReconciliation, "id");
	if(cjson_id)
	{
		result_PaymentReconciliation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(paymentReconciliation, "meta");
	if(cjson_meta)
	{
		result_PaymentReconciliation->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(paymentReconciliation, "implicitRules");
	if(cjson_implicitRules)
	{
		result_PaymentReconciliation->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(paymentReconciliation, "language");
	if(cjson_language)
	{
		result_PaymentReconciliation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(paymentReconciliation, "text");
	if(cjson_text)
	{
		result_PaymentReconciliation->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(paymentReconciliation, "contained");
	if(cjson_contained)
	{
		result_PaymentReconciliation->contained_count = cJSON_GetArraySize(cjson_contained);
		result_PaymentReconciliation->contained = PushArray(arena, Resource, result_PaymentReconciliation->contained_count);
		for(int i = 0; i < result_PaymentReconciliation->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_PaymentReconciliation->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(paymentReconciliation, "extension");
	if(cjson_extension)
	{
		result_PaymentReconciliation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PaymentReconciliation->extension = PushArray(arena, Extension, result_PaymentReconciliation->extension_count);
		for(int i = 0; i < result_PaymentReconciliation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PaymentReconciliation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(paymentReconciliation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PaymentReconciliation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PaymentReconciliation->modifierExtension = PushArray(arena, Extension, result_PaymentReconciliation->modifierExtension_count);
		for(int i = 0; i < result_PaymentReconciliation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PaymentReconciliation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(paymentReconciliation, "identifier");
	if(cjson_identifier)
	{
		result_PaymentReconciliation->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_PaymentReconciliation->identifier = PushArray(arena, Identifier, result_PaymentReconciliation->identifier_count);
		for(int i = 0; i < result_PaymentReconciliation->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_PaymentReconciliation->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(paymentReconciliation, "status");
	if(cjson_status)
	{
		result_PaymentReconciliation->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(paymentReconciliation, "period");
	if(cjson_period)
	{
		result_PaymentReconciliation->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(paymentReconciliation, "created");
	if(cjson_created)
	{
		result_PaymentReconciliation->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_paymentIssuer =  cJSON_GetObjectItem(paymentReconciliation, "paymentIssuer");
	if(cjson_paymentIssuer)
	{
		result_PaymentReconciliation->paymentIssuer = Deserialize_Reference(arena, cjson_paymentIssuer);
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(paymentReconciliation, "request");
	if(cjson_request)
	{
		result_PaymentReconciliation->request = Deserialize_Reference(arena, cjson_request);
	}
	cJSON *cjson_requestor =  cJSON_GetObjectItem(paymentReconciliation, "requestor");
	if(cjson_requestor)
	{
		result_PaymentReconciliation->requestor = Deserialize_Reference(arena, cjson_requestor);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(paymentReconciliation, "outcome");
	if(cjson_outcome)
	{
		result_PaymentReconciliation->outcome = Str8C(cJSON_GetStringValue(cjson_outcome));
	}
	cJSON *cjson_disposition =  cJSON_GetObjectItem(paymentReconciliation, "disposition");
	if(cjson_disposition)
	{
		result_PaymentReconciliation->disposition = Str8C(cJSON_GetStringValue(cjson_disposition));
	}
	cJSON *cjson_paymentDate =  cJSON_GetObjectItem(paymentReconciliation, "paymentDate");
	if(cjson_paymentDate)
	{
		result_PaymentReconciliation->paymentDate = Str8C(cJSON_GetStringValue(cjson_paymentDate));
	}
	cJSON *cjson_paymentAmount =  cJSON_GetObjectItem(paymentReconciliation, "paymentAmount");
	if(cjson_paymentAmount)
	{
		result_PaymentReconciliation->paymentAmount = Deserialize_Money(arena, cjson_paymentAmount);
	}
	cJSON *cjson_paymentIdentifier =  cJSON_GetObjectItem(paymentReconciliation, "paymentIdentifier");
	if(cjson_paymentIdentifier)
	{
		result_PaymentReconciliation->paymentIdentifier = Deserialize_Identifier(arena, cjson_paymentIdentifier);
	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(paymentReconciliation, "detail");
	if(cjson_detail)
	{
		result_PaymentReconciliation->detail_count = cJSON_GetArraySize(cjson_detail);
		result_PaymentReconciliation->detail = PushArray(arena, PaymentReconciliation_Detail, result_PaymentReconciliation->detail_count);
		for(int i = 0; i < result_PaymentReconciliation->detail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_detail, i);
			result_PaymentReconciliation->detail[i] = *Deserialize_PaymentReconciliation_Detail(arena, internal);
		}

	}
	cJSON *cjson_formCode =  cJSON_GetObjectItem(paymentReconciliation, "formCode");
	if(cjson_formCode)
	{
		result_PaymentReconciliation->formCode = Deserialize_CodeableConcept(arena, cjson_formCode);
	}
	cJSON *cjson_processNote =  cJSON_GetObjectItem(paymentReconciliation, "processNote");
	if(cjson_processNote)
	{
		result_PaymentReconciliation->processNote_count = cJSON_GetArraySize(cjson_processNote);
		result_PaymentReconciliation->processNote = PushArray(arena, PaymentReconciliation_ProcessNote, result_PaymentReconciliation->processNote_count);
		for(int i = 0; i < result_PaymentReconciliation->processNote_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_processNote, i);
			result_PaymentReconciliation->processNote[i] = *Deserialize_PaymentReconciliation_ProcessNote(arena, internal);
		}

	}
	return result_PaymentReconciliation;
}

PaymentReconciliation_Detail*
Deserialize_PaymentReconciliation_Detail(Arena *arena, cJSON *paymentReconciliation_Detail)
{
	PaymentReconciliation_Detail *result_PaymentReconciliation_Detail = PushArray(arena, PaymentReconciliation_Detail, 1);
	result_PaymentReconciliation_Detail->resourceType = ResourceType::PaymentReconciliation_Detail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(paymentReconciliation_Detail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(paymentReconciliation_Detail, "id");
	if(cjson_id)
	{
		result_PaymentReconciliation_Detail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(paymentReconciliation_Detail, "extension");
	if(cjson_extension)
	{
		result_PaymentReconciliation_Detail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PaymentReconciliation_Detail->extension = PushArray(arena, Extension, result_PaymentReconciliation_Detail->extension_count);
		for(int i = 0; i < result_PaymentReconciliation_Detail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PaymentReconciliation_Detail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(paymentReconciliation_Detail, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PaymentReconciliation_Detail->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PaymentReconciliation_Detail->modifierExtension = PushArray(arena, Extension, result_PaymentReconciliation_Detail->modifierExtension_count);
		for(int i = 0; i < result_PaymentReconciliation_Detail->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PaymentReconciliation_Detail->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(paymentReconciliation_Detail, "identifier");
	if(cjson_identifier)
	{
		result_PaymentReconciliation_Detail->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_predecessor =  cJSON_GetObjectItem(paymentReconciliation_Detail, "predecessor");
	if(cjson_predecessor)
	{
		result_PaymentReconciliation_Detail->predecessor = Deserialize_Identifier(arena, cjson_predecessor);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(paymentReconciliation_Detail, "type");
	if(cjson_type)
	{
		result_PaymentReconciliation_Detail->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_request =  cJSON_GetObjectItem(paymentReconciliation_Detail, "request");
	if(cjson_request)
	{
		result_PaymentReconciliation_Detail->request = Deserialize_Reference(arena, cjson_request);
	}
	cJSON *cjson_submitter =  cJSON_GetObjectItem(paymentReconciliation_Detail, "submitter");
	if(cjson_submitter)
	{
		result_PaymentReconciliation_Detail->submitter = Deserialize_Reference(arena, cjson_submitter);
	}
	cJSON *cjson_response =  cJSON_GetObjectItem(paymentReconciliation_Detail, "response");
	if(cjson_response)
	{
		result_PaymentReconciliation_Detail->response = Deserialize_Reference(arena, cjson_response);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(paymentReconciliation_Detail, "date");
	if(cjson_date)
	{
		result_PaymentReconciliation_Detail->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_responsible =  cJSON_GetObjectItem(paymentReconciliation_Detail, "responsible");
	if(cjson_responsible)
	{
		result_PaymentReconciliation_Detail->responsible = Deserialize_Reference(arena, cjson_responsible);
	}
	cJSON *cjson_payee =  cJSON_GetObjectItem(paymentReconciliation_Detail, "payee");
	if(cjson_payee)
	{
		result_PaymentReconciliation_Detail->payee = Deserialize_Reference(arena, cjson_payee);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(paymentReconciliation_Detail, "amount");
	if(cjson_amount)
	{
		result_PaymentReconciliation_Detail->amount = Deserialize_Money(arena, cjson_amount);
	}
	return result_PaymentReconciliation_Detail;
}

PaymentReconciliation_ProcessNote*
Deserialize_PaymentReconciliation_ProcessNote(Arena *arena, cJSON *paymentReconciliation_ProcessNote)
{
	PaymentReconciliation_ProcessNote *result_PaymentReconciliation_ProcessNote = PushArray(arena, PaymentReconciliation_ProcessNote, 1);
	result_PaymentReconciliation_ProcessNote->resourceType = ResourceType::PaymentReconciliation_ProcessNote;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(paymentReconciliation_ProcessNote, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(paymentReconciliation_ProcessNote, "id");
	if(cjson_id)
	{
		result_PaymentReconciliation_ProcessNote->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(paymentReconciliation_ProcessNote, "extension");
	if(cjson_extension)
	{
		result_PaymentReconciliation_ProcessNote->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PaymentReconciliation_ProcessNote->extension = PushArray(arena, Extension, result_PaymentReconciliation_ProcessNote->extension_count);
		for(int i = 0; i < result_PaymentReconciliation_ProcessNote->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PaymentReconciliation_ProcessNote->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(paymentReconciliation_ProcessNote, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PaymentReconciliation_ProcessNote->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PaymentReconciliation_ProcessNote->modifierExtension = PushArray(arena, Extension, result_PaymentReconciliation_ProcessNote->modifierExtension_count);
		for(int i = 0; i < result_PaymentReconciliation_ProcessNote->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PaymentReconciliation_ProcessNote->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(paymentReconciliation_ProcessNote, "type");
	if(cjson_type)
	{
		result_PaymentReconciliation_ProcessNote->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(paymentReconciliation_ProcessNote, "text");
	if(cjson_text)
	{
		result_PaymentReconciliation_ProcessNote->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	return result_PaymentReconciliation_ProcessNote;
}

Person*
Deserialize_Person(Arena *arena, cJSON *person)
{
	Person *result_Person = PushArray(arena, Person, 1);
	result_Person->resourceType = ResourceType::Person;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(person, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(person, "id");
	if(cjson_id)
	{
		result_Person->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(person, "meta");
	if(cjson_meta)
	{
		result_Person->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(person, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Person->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(person, "language");
	if(cjson_language)
	{
		result_Person->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(person, "text");
	if(cjson_text)
	{
		result_Person->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(person, "contained");
	if(cjson_contained)
	{
		result_Person->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Person->contained = PushArray(arena, Resource, result_Person->contained_count);
		for(int i = 0; i < result_Person->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Person->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(person, "extension");
	if(cjson_extension)
	{
		result_Person->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Person->extension = PushArray(arena, Extension, result_Person->extension_count);
		for(int i = 0; i < result_Person->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Person->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(person, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Person->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Person->modifierExtension = PushArray(arena, Extension, result_Person->modifierExtension_count);
		for(int i = 0; i < result_Person->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Person->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(person, "identifier");
	if(cjson_identifier)
	{
		result_Person->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Person->identifier = PushArray(arena, Identifier, result_Person->identifier_count);
		for(int i = 0; i < result_Person->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Person->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(person, "name");
	if(cjson_name)
	{
		result_Person->name_count = cJSON_GetArraySize(cjson_name);
		result_Person->name = PushArray(arena, HumanName, result_Person->name_count);
		for(int i = 0; i < result_Person->name_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_name, i);
			result_Person->name[i] = *Deserialize_HumanName(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(person, "telecom");
	if(cjson_telecom)
	{
		result_Person->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_Person->telecom = PushArray(arena, ContactPoint, result_Person->telecom_count);
		for(int i = 0; i < result_Person->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_Person->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_gender =  cJSON_GetObjectItem(person, "gender");
	if(cjson_gender)
	{
		result_Person->gender = Str8C(cJSON_GetStringValue(cjson_gender));
	}
	cJSON *cjson_birthDate =  cJSON_GetObjectItem(person, "birthDate");
	if(cjson_birthDate)
	{
		result_Person->birthDate = Str8C(cJSON_GetStringValue(cjson_birthDate));
	}
	cJSON *cjson_address =  cJSON_GetObjectItem(person, "address");
	if(cjson_address)
	{
		result_Person->address_count = cJSON_GetArraySize(cjson_address);
		result_Person->address = PushArray(arena, Address, result_Person->address_count);
		for(int i = 0; i < result_Person->address_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_address, i);
			result_Person->address[i] = *Deserialize_Address(arena, internal);
		}

	}
	cJSON *cjson_photo =  cJSON_GetObjectItem(person, "photo");
	if(cjson_photo)
	{
		result_Person->photo = Deserialize_Attachment(arena, cjson_photo);
	}
	cJSON *cjson_managingOrganization =  cJSON_GetObjectItem(person, "managingOrganization");
	if(cjson_managingOrganization)
	{
		result_Person->managingOrganization = Deserialize_Reference(arena, cjson_managingOrganization);
	}
	cJSON *cjson_active =  cJSON_GetObjectItem(person, "active");
	if(cjson_active)
	{
		result_Person->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_link =  cJSON_GetObjectItem(person, "link");
	if(cjson_link)
	{
		result_Person->link_count = cJSON_GetArraySize(cjson_link);
		result_Person->link = PushArray(arena, Person_Link, result_Person->link_count);
		for(int i = 0; i < result_Person->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_Person->link[i] = *Deserialize_Person_Link(arena, internal);
		}

	}
	return result_Person;
}

Person_Link*
Deserialize_Person_Link(Arena *arena, cJSON *person_Link)
{
	Person_Link *result_Person_Link = PushArray(arena, Person_Link, 1);
	result_Person_Link->resourceType = ResourceType::Person_Link;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(person_Link, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(person_Link, "id");
	if(cjson_id)
	{
		result_Person_Link->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(person_Link, "extension");
	if(cjson_extension)
	{
		result_Person_Link->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Person_Link->extension = PushArray(arena, Extension, result_Person_Link->extension_count);
		for(int i = 0; i < result_Person_Link->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Person_Link->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(person_Link, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Person_Link->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Person_Link->modifierExtension = PushArray(arena, Extension, result_Person_Link->modifierExtension_count);
		for(int i = 0; i < result_Person_Link->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Person_Link->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_target =  cJSON_GetObjectItem(person_Link, "target");
	if(cjson_target)
	{
		result_Person_Link->target = Deserialize_Reference(arena, cjson_target);
	}
	cJSON *cjson_assurance =  cJSON_GetObjectItem(person_Link, "assurance");
	if(cjson_assurance)
	{
		result_Person_Link->assurance = Str8C(cJSON_GetStringValue(cjson_assurance));
	}
	return result_Person_Link;
}

PlanDefinition*
Deserialize_PlanDefinition(Arena *arena, cJSON *planDefinition)
{
	PlanDefinition *result_PlanDefinition = PushArray(arena, PlanDefinition, 1);
	result_PlanDefinition->resourceType = ResourceType::PlanDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition, "id");
	if(cjson_id)
	{
		result_PlanDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(planDefinition, "meta");
	if(cjson_meta)
	{
		result_PlanDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(planDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_PlanDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(planDefinition, "language");
	if(cjson_language)
	{
		result_PlanDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(planDefinition, "text");
	if(cjson_text)
	{
		result_PlanDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(planDefinition, "contained");
	if(cjson_contained)
	{
		result_PlanDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_PlanDefinition->contained = PushArray(arena, Resource, result_PlanDefinition->contained_count);
		for(int i = 0; i < result_PlanDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_PlanDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition->extension = PushArray(arena, Extension, result_PlanDefinition->extension_count);
		for(int i = 0; i < result_PlanDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition->modifierExtension = PushArray(arena, Extension, result_PlanDefinition->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(planDefinition, "url");
	if(cjson_url)
	{
		result_PlanDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(planDefinition, "identifier");
	if(cjson_identifier)
	{
		result_PlanDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_PlanDefinition->identifier = PushArray(arena, Identifier, result_PlanDefinition->identifier_count);
		for(int i = 0; i < result_PlanDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_PlanDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(planDefinition, "version");
	if(cjson_version)
	{
		result_PlanDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(planDefinition, "name");
	if(cjson_name)
	{
		result_PlanDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(planDefinition, "title");
	if(cjson_title)
	{
		result_PlanDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(planDefinition, "subtitle");
	if(cjson_subtitle)
	{
		result_PlanDefinition->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(planDefinition, "type");
	if(cjson_type)
	{
		result_PlanDefinition->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(planDefinition, "status");
	if(cjson_status)
	{
		result_PlanDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(planDefinition, "experimental");
	if(cjson_experimental)
	{
		result_PlanDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	if((bool)cJSON_HasObjectItem(planDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition, "valueCodeableConcept");
		result_PlanDefinition->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_PlanDefinition->subject_type = PlanDefinition::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition, "valueReference");
		result_PlanDefinition->subject.valueReference = Deserialize_Reference(arena, item);
		result_PlanDefinition->subject_type = PlanDefinition::SubjectType::Reference;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(planDefinition, "date");
	if(cjson_date)
	{
		result_PlanDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(planDefinition, "publisher");
	if(cjson_publisher)
	{
		result_PlanDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(planDefinition, "contact");
	if(cjson_contact)
	{
		result_PlanDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_PlanDefinition->contact = PushArray(arena, ContactDetail, result_PlanDefinition->contact_count);
		for(int i = 0; i < result_PlanDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_PlanDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(planDefinition, "description");
	if(cjson_description)
	{
		result_PlanDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(planDefinition, "useContext");
	if(cjson_useContext)
	{
		result_PlanDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_PlanDefinition->useContext = PushArray(arena, UsageContext, result_PlanDefinition->useContext_count);
		for(int i = 0; i < result_PlanDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_PlanDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(planDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_PlanDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_PlanDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_PlanDefinition->jurisdiction_count);
		for(int i = 0; i < result_PlanDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_PlanDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(planDefinition, "purpose");
	if(cjson_purpose)
	{
		result_PlanDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(planDefinition, "usage");
	if(cjson_usage)
	{
		result_PlanDefinition->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(planDefinition, "copyright");
	if(cjson_copyright)
	{
		result_PlanDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(planDefinition, "approvalDate");
	if(cjson_approvalDate)
	{
		result_PlanDefinition->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(planDefinition, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_PlanDefinition->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(planDefinition, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_PlanDefinition->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(planDefinition, "topic");
	if(cjson_topic)
	{
		result_PlanDefinition->topic_count = cJSON_GetArraySize(cjson_topic);
		result_PlanDefinition->topic = PushArray(arena, CodeableConcept, result_PlanDefinition->topic_count);
		for(int i = 0; i < result_PlanDefinition->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_PlanDefinition->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(planDefinition, "author");
	if(cjson_author)
	{
		result_PlanDefinition->author_count = cJSON_GetArraySize(cjson_author);
		result_PlanDefinition->author = PushArray(arena, ContactDetail, result_PlanDefinition->author_count);
		for(int i = 0; i < result_PlanDefinition->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_PlanDefinition->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(planDefinition, "editor");
	if(cjson_editor)
	{
		result_PlanDefinition->editor_count = cJSON_GetArraySize(cjson_editor);
		result_PlanDefinition->editor = PushArray(arena, ContactDetail, result_PlanDefinition->editor_count);
		for(int i = 0; i < result_PlanDefinition->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_PlanDefinition->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(planDefinition, "reviewer");
	if(cjson_reviewer)
	{
		result_PlanDefinition->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_PlanDefinition->reviewer = PushArray(arena, ContactDetail, result_PlanDefinition->reviewer_count);
		for(int i = 0; i < result_PlanDefinition->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_PlanDefinition->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(planDefinition, "endorser");
	if(cjson_endorser)
	{
		result_PlanDefinition->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_PlanDefinition->endorser = PushArray(arena, ContactDetail, result_PlanDefinition->endorser_count);
		for(int i = 0; i < result_PlanDefinition->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_PlanDefinition->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(planDefinition, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_PlanDefinition->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_PlanDefinition->relatedArtifact = PushArray(arena, RelatedArtifact, result_PlanDefinition->relatedArtifact_count);
		for(int i = 0; i < result_PlanDefinition->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_PlanDefinition->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_library =  cJSON_GetObjectItem(planDefinition, "library");
	if(cjson_library)
	{
		result_PlanDefinition->library_count = cJSON_GetArraySize(cjson_library);
		result_PlanDefinition->library = PushArray(arena, fhir_canonical, result_PlanDefinition->library_count);
		for(int i = 0; i < result_PlanDefinition->library_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_library, i);
			result_PlanDefinition->library[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_goal =  cJSON_GetObjectItem(planDefinition, "goal");
	if(cjson_goal)
	{
		result_PlanDefinition->goal_count = cJSON_GetArraySize(cjson_goal);
		result_PlanDefinition->goal = PushArray(arena, PlanDefinition_Goal, result_PlanDefinition->goal_count);
		for(int i = 0; i < result_PlanDefinition->goal_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_goal, i);
			result_PlanDefinition->goal[i] = *Deserialize_PlanDefinition_Goal(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(planDefinition, "action");
	if(cjson_action)
	{
		result_PlanDefinition->action_count = cJSON_GetArraySize(cjson_action);
		result_PlanDefinition->action = PushArray(arena, PlanDefinition_Action, result_PlanDefinition->action_count);
		for(int i = 0; i < result_PlanDefinition->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_PlanDefinition->action[i] = *Deserialize_PlanDefinition_Action(arena, internal);
		}

	}
	return result_PlanDefinition;
}

PlanDefinition_Goal*
Deserialize_PlanDefinition_Goal(Arena *arena, cJSON *planDefinition_Goal)
{
	PlanDefinition_Goal *result_PlanDefinition_Goal = PushArray(arena, PlanDefinition_Goal, 1);
	result_PlanDefinition_Goal->resourceType = ResourceType::PlanDefinition_Goal;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition_Goal, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition_Goal, "id");
	if(cjson_id)
	{
		result_PlanDefinition_Goal->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition_Goal, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition_Goal->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition_Goal->extension = PushArray(arena, Extension, result_PlanDefinition_Goal->extension_count);
		for(int i = 0; i < result_PlanDefinition_Goal->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition_Goal->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition_Goal, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition_Goal->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition_Goal->modifierExtension = PushArray(arena, Extension, result_PlanDefinition_Goal->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition_Goal->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition_Goal->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(planDefinition_Goal, "category");
	if(cjson_category)
	{
		result_PlanDefinition_Goal->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(planDefinition_Goal, "description");
	if(cjson_description)
	{
		result_PlanDefinition_Goal->description = Deserialize_CodeableConcept(arena, cjson_description);
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(planDefinition_Goal, "priority");
	if(cjson_priority)
	{
		result_PlanDefinition_Goal->priority = Deserialize_CodeableConcept(arena, cjson_priority);
	}
	cJSON *cjson_start =  cJSON_GetObjectItem(planDefinition_Goal, "start");
	if(cjson_start)
	{
		result_PlanDefinition_Goal->start = Deserialize_CodeableConcept(arena, cjson_start);
	}
	cJSON *cjson_addresses =  cJSON_GetObjectItem(planDefinition_Goal, "addresses");
	if(cjson_addresses)
	{
		result_PlanDefinition_Goal->addresses_count = cJSON_GetArraySize(cjson_addresses);
		result_PlanDefinition_Goal->addresses = PushArray(arena, CodeableConcept, result_PlanDefinition_Goal->addresses_count);
		for(int i = 0; i < result_PlanDefinition_Goal->addresses_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_addresses, i);
			result_PlanDefinition_Goal->addresses[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(planDefinition_Goal, "documentation");
	if(cjson_documentation)
	{
		result_PlanDefinition_Goal->documentation_count = cJSON_GetArraySize(cjson_documentation);
		result_PlanDefinition_Goal->documentation = PushArray(arena, RelatedArtifact, result_PlanDefinition_Goal->documentation_count);
		for(int i = 0; i < result_PlanDefinition_Goal->documentation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_documentation, i);
			result_PlanDefinition_Goal->documentation[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_target =  cJSON_GetObjectItem(planDefinition_Goal, "target");
	if(cjson_target)
	{
		result_PlanDefinition_Goal->target_count = cJSON_GetArraySize(cjson_target);
		result_PlanDefinition_Goal->target = PushArray(arena, PlanDefinition_Goal_Target, result_PlanDefinition_Goal->target_count);
		for(int i = 0; i < result_PlanDefinition_Goal->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_PlanDefinition_Goal->target[i] = *Deserialize_PlanDefinition_Goal_Target(arena, internal);
		}

	}
	return result_PlanDefinition_Goal;
}

PlanDefinition_Goal_Target*
Deserialize_PlanDefinition_Goal_Target(Arena *arena, cJSON *planDefinition_Goal_Target)
{
	PlanDefinition_Goal_Target *result_PlanDefinition_Goal_Target = PushArray(arena, PlanDefinition_Goal_Target, 1);
	result_PlanDefinition_Goal_Target->resourceType = ResourceType::PlanDefinition_Goal_Target;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition_Goal_Target, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition_Goal_Target, "id");
	if(cjson_id)
	{
		result_PlanDefinition_Goal_Target->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition_Goal_Target, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition_Goal_Target->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition_Goal_Target->extension = PushArray(arena, Extension, result_PlanDefinition_Goal_Target->extension_count);
		for(int i = 0; i < result_PlanDefinition_Goal_Target->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition_Goal_Target->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition_Goal_Target, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition_Goal_Target->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition_Goal_Target->modifierExtension = PushArray(arena, Extension, result_PlanDefinition_Goal_Target->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition_Goal_Target->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition_Goal_Target->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_measure =  cJSON_GetObjectItem(planDefinition_Goal_Target, "measure");
	if(cjson_measure)
	{
		result_PlanDefinition_Goal_Target->measure = Deserialize_CodeableConcept(arena, cjson_measure);
	}
	if((bool)cJSON_HasObjectItem(planDefinition_Goal_Target, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Goal_Target, "valueQuantity");
		result_PlanDefinition_Goal_Target->detail.valueQuantity = Deserialize_Quantity(arena, item);
		result_PlanDefinition_Goal_Target->detail_type = PlanDefinition_Goal_Target::DetailType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Goal_Target, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Goal_Target, "valueRange");
		result_PlanDefinition_Goal_Target->detail.valueRange = Deserialize_Range(arena, item);
		result_PlanDefinition_Goal_Target->detail_type = PlanDefinition_Goal_Target::DetailType::Range;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Goal_Target, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Goal_Target, "valueCodeableConcept");
		result_PlanDefinition_Goal_Target->detail.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_PlanDefinition_Goal_Target->detail_type = PlanDefinition_Goal_Target::DetailType::CodeableConcept;
	}


	cJSON *cjson_due =  cJSON_GetObjectItem(planDefinition_Goal_Target, "due");
	if(cjson_due)
	{
		result_PlanDefinition_Goal_Target->due = Deserialize_Duration(arena, cjson_due);
	}
	return result_PlanDefinition_Goal_Target;
}

PlanDefinition_Action*
Deserialize_PlanDefinition_Action(Arena *arena, cJSON *planDefinition_Action)
{
	PlanDefinition_Action *result_PlanDefinition_Action = PushArray(arena, PlanDefinition_Action, 1);
	result_PlanDefinition_Action->resourceType = ResourceType::PlanDefinition_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition_Action, "id");
	if(cjson_id)
	{
		result_PlanDefinition_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition_Action, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition_Action->extension = PushArray(arena, Extension, result_PlanDefinition_Action->extension_count);
		for(int i = 0; i < result_PlanDefinition_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition_Action->modifierExtension = PushArray(arena, Extension, result_PlanDefinition_Action->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_prefix =  cJSON_GetObjectItem(planDefinition_Action, "prefix");
	if(cjson_prefix)
	{
		result_PlanDefinition_Action->prefix = Str8C(cJSON_GetStringValue(cjson_prefix));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(planDefinition_Action, "title");
	if(cjson_title)
	{
		result_PlanDefinition_Action->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(planDefinition_Action, "description");
	if(cjson_description)
	{
		result_PlanDefinition_Action->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_textEquivalent =  cJSON_GetObjectItem(planDefinition_Action, "textEquivalent");
	if(cjson_textEquivalent)
	{
		result_PlanDefinition_Action->textEquivalent = Str8C(cJSON_GetStringValue(cjson_textEquivalent));
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(planDefinition_Action, "priority");
	if(cjson_priority)
	{
		result_PlanDefinition_Action->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(planDefinition_Action, "code");
	if(cjson_code)
	{
		result_PlanDefinition_Action->code_count = cJSON_GetArraySize(cjson_code);
		result_PlanDefinition_Action->code = PushArray(arena, CodeableConcept, result_PlanDefinition_Action->code_count);
		for(int i = 0; i < result_PlanDefinition_Action->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_PlanDefinition_Action->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(planDefinition_Action, "reason");
	if(cjson_reason)
	{
		result_PlanDefinition_Action->reason_count = cJSON_GetArraySize(cjson_reason);
		result_PlanDefinition_Action->reason = PushArray(arena, CodeableConcept, result_PlanDefinition_Action->reason_count);
		for(int i = 0; i < result_PlanDefinition_Action->reason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reason, i);
			result_PlanDefinition_Action->reason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(planDefinition_Action, "documentation");
	if(cjson_documentation)
	{
		result_PlanDefinition_Action->documentation_count = cJSON_GetArraySize(cjson_documentation);
		result_PlanDefinition_Action->documentation = PushArray(arena, RelatedArtifact, result_PlanDefinition_Action->documentation_count);
		for(int i = 0; i < result_PlanDefinition_Action->documentation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_documentation, i);
			result_PlanDefinition_Action->documentation[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_goalId =  cJSON_GetObjectItem(planDefinition_Action, "goalId");
	if(cjson_goalId)
	{
		result_PlanDefinition_Action->goalId_count = cJSON_GetArraySize(cjson_goalId);
		result_PlanDefinition_Action->goalId = PushArray(arena, fhir_id, result_PlanDefinition_Action->goalId_count);
		for(int i = 0; i < result_PlanDefinition_Action->goalId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_goalId, i);
			result_PlanDefinition_Action->goalId[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueCodeableConcept");
		result_PlanDefinition_Action->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_PlanDefinition_Action->subject_type = PlanDefinition_Action::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueReference");
		result_PlanDefinition_Action->subject.valueReference = Deserialize_Reference(arena, item);
		result_PlanDefinition_Action->subject_type = PlanDefinition_Action::SubjectType::Reference;
	}


	cJSON *cjson_trigger =  cJSON_GetObjectItem(planDefinition_Action, "trigger");
	if(cjson_trigger)
	{
		result_PlanDefinition_Action->trigger_count = cJSON_GetArraySize(cjson_trigger);
		result_PlanDefinition_Action->trigger = PushArray(arena, TriggerDefinition, result_PlanDefinition_Action->trigger_count);
		for(int i = 0; i < result_PlanDefinition_Action->trigger_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_trigger, i);
			result_PlanDefinition_Action->trigger[i] = *Deserialize_TriggerDefinition(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(planDefinition_Action, "condition");
	if(cjson_condition)
	{
		result_PlanDefinition_Action->condition_count = cJSON_GetArraySize(cjson_condition);
		result_PlanDefinition_Action->condition = PushArray(arena, PlanDefinition_Action_Condition, result_PlanDefinition_Action->condition_count);
		for(int i = 0; i < result_PlanDefinition_Action->condition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_condition, i);
			result_PlanDefinition_Action->condition[i] = *Deserialize_PlanDefinition_Action_Condition(arena, internal);
		}

	}
	cJSON *cjson_input =  cJSON_GetObjectItem(planDefinition_Action, "input");
	if(cjson_input)
	{
		result_PlanDefinition_Action->input_count = cJSON_GetArraySize(cjson_input);
		result_PlanDefinition_Action->input = PushArray(arena, DataRequirement, result_PlanDefinition_Action->input_count);
		for(int i = 0; i < result_PlanDefinition_Action->input_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_input, i);
			result_PlanDefinition_Action->input[i] = *Deserialize_DataRequirement(arena, internal);
		}

	}
	cJSON *cjson_output =  cJSON_GetObjectItem(planDefinition_Action, "output");
	if(cjson_output)
	{
		result_PlanDefinition_Action->output_count = cJSON_GetArraySize(cjson_output);
		result_PlanDefinition_Action->output = PushArray(arena, DataRequirement, result_PlanDefinition_Action->output_count);
		for(int i = 0; i < result_PlanDefinition_Action->output_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_output, i);
			result_PlanDefinition_Action->output[i] = *Deserialize_DataRequirement(arena, internal);
		}

	}
	cJSON *cjson_relatedAction =  cJSON_GetObjectItem(planDefinition_Action, "relatedAction");
	if(cjson_relatedAction)
	{
		result_PlanDefinition_Action->relatedAction_count = cJSON_GetArraySize(cjson_relatedAction);
		result_PlanDefinition_Action->relatedAction = PushArray(arena, PlanDefinition_Action_RelatedAction, result_PlanDefinition_Action->relatedAction_count);
		for(int i = 0; i < result_PlanDefinition_Action->relatedAction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedAction, i);
			result_PlanDefinition_Action->relatedAction[i] = *Deserialize_PlanDefinition_Action_RelatedAction(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueDateTime");
		result_PlanDefinition_Action->timing.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_PlanDefinition_Action->timing_type = PlanDefinition_Action::TimingType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueAge");
		result_PlanDefinition_Action->timing.valueAge = Deserialize_Age(arena, item);
		result_PlanDefinition_Action->timing_type = PlanDefinition_Action::TimingType::Age;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valuePeriod");
		result_PlanDefinition_Action->timing.valuePeriod = Deserialize_Period(arena, item);
		result_PlanDefinition_Action->timing_type = PlanDefinition_Action::TimingType::Period;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueDuration");
		result_PlanDefinition_Action->timing.valueDuration = Deserialize_Duration(arena, item);
		result_PlanDefinition_Action->timing_type = PlanDefinition_Action::TimingType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueRange");
		result_PlanDefinition_Action->timing.valueRange = Deserialize_Range(arena, item);
		result_PlanDefinition_Action->timing_type = PlanDefinition_Action::TimingType::Range;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueTiming");
		result_PlanDefinition_Action->timing.valueTiming = Deserialize_Timing(arena, item);
		result_PlanDefinition_Action->timing_type = PlanDefinition_Action::TimingType::Timing;
	}


	cJSON *cjson_participant =  cJSON_GetObjectItem(planDefinition_Action, "participant");
	if(cjson_participant)
	{
		result_PlanDefinition_Action->participant_count = cJSON_GetArraySize(cjson_participant);
		result_PlanDefinition_Action->participant = PushArray(arena, PlanDefinition_Action_Participant, result_PlanDefinition_Action->participant_count);
		for(int i = 0; i < result_PlanDefinition_Action->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_PlanDefinition_Action->participant[i] = *Deserialize_PlanDefinition_Action_Participant(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(planDefinition_Action, "type");
	if(cjson_type)
	{
		result_PlanDefinition_Action->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_groupingBehavior =  cJSON_GetObjectItem(planDefinition_Action, "groupingBehavior");
	if(cjson_groupingBehavior)
	{
		result_PlanDefinition_Action->groupingBehavior = Str8C(cJSON_GetStringValue(cjson_groupingBehavior));
	}
	cJSON *cjson_selectionBehavior =  cJSON_GetObjectItem(planDefinition_Action, "selectionBehavior");
	if(cjson_selectionBehavior)
	{
		result_PlanDefinition_Action->selectionBehavior = Str8C(cJSON_GetStringValue(cjson_selectionBehavior));
	}
	cJSON *cjson_requiredBehavior =  cJSON_GetObjectItem(planDefinition_Action, "requiredBehavior");
	if(cjson_requiredBehavior)
	{
		result_PlanDefinition_Action->requiredBehavior = Str8C(cJSON_GetStringValue(cjson_requiredBehavior));
	}
	cJSON *cjson_precheckBehavior =  cJSON_GetObjectItem(planDefinition_Action, "precheckBehavior");
	if(cjson_precheckBehavior)
	{
		result_PlanDefinition_Action->precheckBehavior = Str8C(cJSON_GetStringValue(cjson_precheckBehavior));
	}
	cJSON *cjson_cardinalityBehavior =  cJSON_GetObjectItem(planDefinition_Action, "cardinalityBehavior");
	if(cjson_cardinalityBehavior)
	{
		result_PlanDefinition_Action->cardinalityBehavior = Str8C(cJSON_GetStringValue(cjson_cardinalityBehavior));
	}
	if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueCanonical");
		result_PlanDefinition_Action->definition.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_PlanDefinition_Action->definition_type = PlanDefinition_Action::DefinitionType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action, "valueUri");
		result_PlanDefinition_Action->definition.valueUri = Str8C(cJSON_GetStringValue(item));
		result_PlanDefinition_Action->definition_type = PlanDefinition_Action::DefinitionType::fhir_uri;
	}


	cJSON *cjson_transform =  cJSON_GetObjectItem(planDefinition_Action, "transform");
	if(cjson_transform)
	{
		result_PlanDefinition_Action->transform = Str8C(cJSON_GetStringValue(cjson_transform));
	}
	cJSON *cjson_dynamicValue =  cJSON_GetObjectItem(planDefinition_Action, "dynamicValue");
	if(cjson_dynamicValue)
	{
		result_PlanDefinition_Action->dynamicValue_count = cJSON_GetArraySize(cjson_dynamicValue);
		result_PlanDefinition_Action->dynamicValue = PushArray(arena, PlanDefinition_Action_DynamicValue, result_PlanDefinition_Action->dynamicValue_count);
		for(int i = 0; i < result_PlanDefinition_Action->dynamicValue_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dynamicValue, i);
			result_PlanDefinition_Action->dynamicValue[i] = *Deserialize_PlanDefinition_Action_DynamicValue(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(planDefinition_Action, "action");
	if(cjson_action)
	{
		result_PlanDefinition_Action->action_count = cJSON_GetArraySize(cjson_action);
		result_PlanDefinition_Action->action = PushArray(arena, PlanDefinition_Action, result_PlanDefinition_Action->action_count);
		for(int i = 0; i < result_PlanDefinition_Action->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_PlanDefinition_Action->action[i] = *Deserialize_PlanDefinition_Action(arena, internal);
		}

	}
	return result_PlanDefinition_Action;
}

PlanDefinition_Action_Condition*
Deserialize_PlanDefinition_Action_Condition(Arena *arena, cJSON *planDefinition_Action_Condition)
{
	PlanDefinition_Action_Condition *result_PlanDefinition_Action_Condition = PushArray(arena, PlanDefinition_Action_Condition, 1);
	result_PlanDefinition_Action_Condition->resourceType = ResourceType::PlanDefinition_Action_Condition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition_Action_Condition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition_Action_Condition, "id");
	if(cjson_id)
	{
		result_PlanDefinition_Action_Condition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition_Action_Condition, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition_Action_Condition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition_Action_Condition->extension = PushArray(arena, Extension, result_PlanDefinition_Action_Condition->extension_count);
		for(int i = 0; i < result_PlanDefinition_Action_Condition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition_Action_Condition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition_Action_Condition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition_Action_Condition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition_Action_Condition->modifierExtension = PushArray(arena, Extension, result_PlanDefinition_Action_Condition->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition_Action_Condition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition_Action_Condition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(planDefinition_Action_Condition, "kind");
	if(cjson_kind)
	{
		result_PlanDefinition_Action_Condition->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(planDefinition_Action_Condition, "expression");
	if(cjson_expression)
	{
		result_PlanDefinition_Action_Condition->expression = Deserialize_Expression(arena, cjson_expression);
	}
	return result_PlanDefinition_Action_Condition;
}

PlanDefinition_Action_RelatedAction*
Deserialize_PlanDefinition_Action_RelatedAction(Arena *arena, cJSON *planDefinition_Action_RelatedAction)
{
	PlanDefinition_Action_RelatedAction *result_PlanDefinition_Action_RelatedAction = PushArray(arena, PlanDefinition_Action_RelatedAction, 1);
	result_PlanDefinition_Action_RelatedAction->resourceType = ResourceType::PlanDefinition_Action_RelatedAction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "id");
	if(cjson_id)
	{
		result_PlanDefinition_Action_RelatedAction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition_Action_RelatedAction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition_Action_RelatedAction->extension = PushArray(arena, Extension, result_PlanDefinition_Action_RelatedAction->extension_count);
		for(int i = 0; i < result_PlanDefinition_Action_RelatedAction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition_Action_RelatedAction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition_Action_RelatedAction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition_Action_RelatedAction->modifierExtension = PushArray(arena, Extension, result_PlanDefinition_Action_RelatedAction->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition_Action_RelatedAction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition_Action_RelatedAction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_actionId =  cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "actionId");
	if(cjson_actionId)
	{
		result_PlanDefinition_Action_RelatedAction->actionId = Str8C(cJSON_GetStringValue(cjson_actionId));
	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "relationship");
	if(cjson_relationship)
	{
		result_PlanDefinition_Action_RelatedAction->relationship = Str8C(cJSON_GetStringValue(cjson_relationship));
	}
	if((bool)cJSON_HasObjectItem(planDefinition_Action_RelatedAction, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "valueDuration");
		result_PlanDefinition_Action_RelatedAction->offset.valueDuration = Deserialize_Duration(arena, item);
		result_PlanDefinition_Action_RelatedAction->offset_type = PlanDefinition_Action_RelatedAction::OffsetType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(planDefinition_Action_RelatedAction, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(planDefinition_Action_RelatedAction, "valueRange");
		result_PlanDefinition_Action_RelatedAction->offset.valueRange = Deserialize_Range(arena, item);
		result_PlanDefinition_Action_RelatedAction->offset_type = PlanDefinition_Action_RelatedAction::OffsetType::Range;
	}


	return result_PlanDefinition_Action_RelatedAction;
}

PlanDefinition_Action_Participant*
Deserialize_PlanDefinition_Action_Participant(Arena *arena, cJSON *planDefinition_Action_Participant)
{
	PlanDefinition_Action_Participant *result_PlanDefinition_Action_Participant = PushArray(arena, PlanDefinition_Action_Participant, 1);
	result_PlanDefinition_Action_Participant->resourceType = ResourceType::PlanDefinition_Action_Participant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition_Action_Participant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition_Action_Participant, "id");
	if(cjson_id)
	{
		result_PlanDefinition_Action_Participant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition_Action_Participant, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition_Action_Participant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition_Action_Participant->extension = PushArray(arena, Extension, result_PlanDefinition_Action_Participant->extension_count);
		for(int i = 0; i < result_PlanDefinition_Action_Participant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition_Action_Participant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition_Action_Participant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition_Action_Participant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition_Action_Participant->modifierExtension = PushArray(arena, Extension, result_PlanDefinition_Action_Participant->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition_Action_Participant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition_Action_Participant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(planDefinition_Action_Participant, "type");
	if(cjson_type)
	{
		result_PlanDefinition_Action_Participant->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(planDefinition_Action_Participant, "role");
	if(cjson_role)
	{
		result_PlanDefinition_Action_Participant->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	return result_PlanDefinition_Action_Participant;
}

PlanDefinition_Action_DynamicValue*
Deserialize_PlanDefinition_Action_DynamicValue(Arena *arena, cJSON *planDefinition_Action_DynamicValue)
{
	PlanDefinition_Action_DynamicValue *result_PlanDefinition_Action_DynamicValue = PushArray(arena, PlanDefinition_Action_DynamicValue, 1);
	result_PlanDefinition_Action_DynamicValue->resourceType = ResourceType::PlanDefinition_Action_DynamicValue;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(planDefinition_Action_DynamicValue, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(planDefinition_Action_DynamicValue, "id");
	if(cjson_id)
	{
		result_PlanDefinition_Action_DynamicValue->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(planDefinition_Action_DynamicValue, "extension");
	if(cjson_extension)
	{
		result_PlanDefinition_Action_DynamicValue->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PlanDefinition_Action_DynamicValue->extension = PushArray(arena, Extension, result_PlanDefinition_Action_DynamicValue->extension_count);
		for(int i = 0; i < result_PlanDefinition_Action_DynamicValue->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PlanDefinition_Action_DynamicValue->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(planDefinition_Action_DynamicValue, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PlanDefinition_Action_DynamicValue->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PlanDefinition_Action_DynamicValue->modifierExtension = PushArray(arena, Extension, result_PlanDefinition_Action_DynamicValue->modifierExtension_count);
		for(int i = 0; i < result_PlanDefinition_Action_DynamicValue->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PlanDefinition_Action_DynamicValue->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(planDefinition_Action_DynamicValue, "path");
	if(cjson_path)
	{
		result_PlanDefinition_Action_DynamicValue->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(planDefinition_Action_DynamicValue, "expression");
	if(cjson_expression)
	{
		result_PlanDefinition_Action_DynamicValue->expression = Deserialize_Expression(arena, cjson_expression);
	}
	return result_PlanDefinition_Action_DynamicValue;
}

Practitioner*
Deserialize_Practitioner(Arena *arena, cJSON *practitioner)
{
	Practitioner *result_Practitioner = PushArray(arena, Practitioner, 1);
	result_Practitioner->resourceType = ResourceType::Practitioner;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(practitioner, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(practitioner, "id");
	if(cjson_id)
	{
		result_Practitioner->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(practitioner, "meta");
	if(cjson_meta)
	{
		result_Practitioner->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(practitioner, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Practitioner->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(practitioner, "language");
	if(cjson_language)
	{
		result_Practitioner->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(practitioner, "text");
	if(cjson_text)
	{
		result_Practitioner->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(practitioner, "contained");
	if(cjson_contained)
	{
		result_Practitioner->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Practitioner->contained = PushArray(arena, Resource, result_Practitioner->contained_count);
		for(int i = 0; i < result_Practitioner->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Practitioner->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(practitioner, "extension");
	if(cjson_extension)
	{
		result_Practitioner->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Practitioner->extension = PushArray(arena, Extension, result_Practitioner->extension_count);
		for(int i = 0; i < result_Practitioner->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Practitioner->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(practitioner, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Practitioner->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Practitioner->modifierExtension = PushArray(arena, Extension, result_Practitioner->modifierExtension_count);
		for(int i = 0; i < result_Practitioner->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Practitioner->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(practitioner, "identifier");
	if(cjson_identifier)
	{
		result_Practitioner->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Practitioner->identifier = PushArray(arena, Identifier, result_Practitioner->identifier_count);
		for(int i = 0; i < result_Practitioner->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Practitioner->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(practitioner, "active");
	if(cjson_active)
	{
		result_Practitioner->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(practitioner, "name");
	if(cjson_name)
	{
		result_Practitioner->name_count = cJSON_GetArraySize(cjson_name);
		result_Practitioner->name = PushArray(arena, HumanName, result_Practitioner->name_count);
		for(int i = 0; i < result_Practitioner->name_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_name, i);
			result_Practitioner->name[i] = *Deserialize_HumanName(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(practitioner, "telecom");
	if(cjson_telecom)
	{
		result_Practitioner->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_Practitioner->telecom = PushArray(arena, ContactPoint, result_Practitioner->telecom_count);
		for(int i = 0; i < result_Practitioner->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_Practitioner->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_address =  cJSON_GetObjectItem(practitioner, "address");
	if(cjson_address)
	{
		result_Practitioner->address_count = cJSON_GetArraySize(cjson_address);
		result_Practitioner->address = PushArray(arena, Address, result_Practitioner->address_count);
		for(int i = 0; i < result_Practitioner->address_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_address, i);
			result_Practitioner->address[i] = *Deserialize_Address(arena, internal);
		}

	}
	cJSON *cjson_gender =  cJSON_GetObjectItem(practitioner, "gender");
	if(cjson_gender)
	{
		result_Practitioner->gender = Str8C(cJSON_GetStringValue(cjson_gender));
	}
	cJSON *cjson_birthDate =  cJSON_GetObjectItem(practitioner, "birthDate");
	if(cjson_birthDate)
	{
		result_Practitioner->birthDate = Str8C(cJSON_GetStringValue(cjson_birthDate));
	}
	cJSON *cjson_photo =  cJSON_GetObjectItem(practitioner, "photo");
	if(cjson_photo)
	{
		result_Practitioner->photo_count = cJSON_GetArraySize(cjson_photo);
		result_Practitioner->photo = PushArray(arena, Attachment, result_Practitioner->photo_count);
		for(int i = 0; i < result_Practitioner->photo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_photo, i);
			result_Practitioner->photo[i] = *Deserialize_Attachment(arena, internal);
		}

	}
	cJSON *cjson_qualification =  cJSON_GetObjectItem(practitioner, "qualification");
	if(cjson_qualification)
	{
		result_Practitioner->qualification_count = cJSON_GetArraySize(cjson_qualification);
		result_Practitioner->qualification = PushArray(arena, Practitioner_Qualification, result_Practitioner->qualification_count);
		for(int i = 0; i < result_Practitioner->qualification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_qualification, i);
			result_Practitioner->qualification[i] = *Deserialize_Practitioner_Qualification(arena, internal);
		}

	}
	cJSON *cjson_communication =  cJSON_GetObjectItem(practitioner, "communication");
	if(cjson_communication)
	{
		result_Practitioner->communication_count = cJSON_GetArraySize(cjson_communication);
		result_Practitioner->communication = PushArray(arena, CodeableConcept, result_Practitioner->communication_count);
		for(int i = 0; i < result_Practitioner->communication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_communication, i);
			result_Practitioner->communication[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_Practitioner;
}

Practitioner_Qualification*
Deserialize_Practitioner_Qualification(Arena *arena, cJSON *practitioner_Qualification)
{
	Practitioner_Qualification *result_Practitioner_Qualification = PushArray(arena, Practitioner_Qualification, 1);
	result_Practitioner_Qualification->resourceType = ResourceType::Practitioner_Qualification;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(practitioner_Qualification, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(practitioner_Qualification, "id");
	if(cjson_id)
	{
		result_Practitioner_Qualification->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(practitioner_Qualification, "extension");
	if(cjson_extension)
	{
		result_Practitioner_Qualification->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Practitioner_Qualification->extension = PushArray(arena, Extension, result_Practitioner_Qualification->extension_count);
		for(int i = 0; i < result_Practitioner_Qualification->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Practitioner_Qualification->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(practitioner_Qualification, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Practitioner_Qualification->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Practitioner_Qualification->modifierExtension = PushArray(arena, Extension, result_Practitioner_Qualification->modifierExtension_count);
		for(int i = 0; i < result_Practitioner_Qualification->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Practitioner_Qualification->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(practitioner_Qualification, "identifier");
	if(cjson_identifier)
	{
		result_Practitioner_Qualification->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Practitioner_Qualification->identifier = PushArray(arena, Identifier, result_Practitioner_Qualification->identifier_count);
		for(int i = 0; i < result_Practitioner_Qualification->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Practitioner_Qualification->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(practitioner_Qualification, "code");
	if(cjson_code)
	{
		result_Practitioner_Qualification->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(practitioner_Qualification, "period");
	if(cjson_period)
	{
		result_Practitioner_Qualification->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_issuer =  cJSON_GetObjectItem(practitioner_Qualification, "issuer");
	if(cjson_issuer)
	{
		result_Practitioner_Qualification->issuer = Deserialize_Reference(arena, cjson_issuer);
	}
	return result_Practitioner_Qualification;
}

PractitionerRole*
Deserialize_PractitionerRole(Arena *arena, cJSON *practitionerRole)
{
	PractitionerRole *result_PractitionerRole = PushArray(arena, PractitionerRole, 1);
	result_PractitionerRole->resourceType = ResourceType::PractitionerRole;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(practitionerRole, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(practitionerRole, "id");
	if(cjson_id)
	{
		result_PractitionerRole->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(practitionerRole, "meta");
	if(cjson_meta)
	{
		result_PractitionerRole->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(practitionerRole, "implicitRules");
	if(cjson_implicitRules)
	{
		result_PractitionerRole->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(practitionerRole, "language");
	if(cjson_language)
	{
		result_PractitionerRole->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(practitionerRole, "text");
	if(cjson_text)
	{
		result_PractitionerRole->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(practitionerRole, "contained");
	if(cjson_contained)
	{
		result_PractitionerRole->contained_count = cJSON_GetArraySize(cjson_contained);
		result_PractitionerRole->contained = PushArray(arena, Resource, result_PractitionerRole->contained_count);
		for(int i = 0; i < result_PractitionerRole->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_PractitionerRole->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(practitionerRole, "extension");
	if(cjson_extension)
	{
		result_PractitionerRole->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PractitionerRole->extension = PushArray(arena, Extension, result_PractitionerRole->extension_count);
		for(int i = 0; i < result_PractitionerRole->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PractitionerRole->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(practitionerRole, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PractitionerRole->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PractitionerRole->modifierExtension = PushArray(arena, Extension, result_PractitionerRole->modifierExtension_count);
		for(int i = 0; i < result_PractitionerRole->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PractitionerRole->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(practitionerRole, "identifier");
	if(cjson_identifier)
	{
		result_PractitionerRole->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_PractitionerRole->identifier = PushArray(arena, Identifier, result_PractitionerRole->identifier_count);
		for(int i = 0; i < result_PractitionerRole->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_PractitionerRole->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(practitionerRole, "active");
	if(cjson_active)
	{
		result_PractitionerRole->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(practitionerRole, "period");
	if(cjson_period)
	{
		result_PractitionerRole->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_practitioner =  cJSON_GetObjectItem(practitionerRole, "practitioner");
	if(cjson_practitioner)
	{
		result_PractitionerRole->practitioner = Deserialize_Reference(arena, cjson_practitioner);
	}
	cJSON *cjson_organization =  cJSON_GetObjectItem(practitionerRole, "organization");
	if(cjson_organization)
	{
		result_PractitionerRole->organization = Deserialize_Reference(arena, cjson_organization);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(practitionerRole, "code");
	if(cjson_code)
	{
		result_PractitionerRole->code_count = cJSON_GetArraySize(cjson_code);
		result_PractitionerRole->code = PushArray(arena, CodeableConcept, result_PractitionerRole->code_count);
		for(int i = 0; i < result_PractitionerRole->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_PractitionerRole->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialty =  cJSON_GetObjectItem(practitionerRole, "specialty");
	if(cjson_specialty)
	{
		result_PractitionerRole->specialty_count = cJSON_GetArraySize(cjson_specialty);
		result_PractitionerRole->specialty = PushArray(arena, CodeableConcept, result_PractitionerRole->specialty_count);
		for(int i = 0; i < result_PractitionerRole->specialty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialty, i);
			result_PractitionerRole->specialty[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(practitionerRole, "location");
	if(cjson_location)
	{
		result_PractitionerRole->location_count = cJSON_GetArraySize(cjson_location);
		result_PractitionerRole->location = PushArray(arena, Reference, result_PractitionerRole->location_count);
		for(int i = 0; i < result_PractitionerRole->location_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_location, i);
			result_PractitionerRole->location[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_healthcareService =  cJSON_GetObjectItem(practitionerRole, "healthcareService");
	if(cjson_healthcareService)
	{
		result_PractitionerRole->healthcareService_count = cJSON_GetArraySize(cjson_healthcareService);
		result_PractitionerRole->healthcareService = PushArray(arena, Reference, result_PractitionerRole->healthcareService_count);
		for(int i = 0; i < result_PractitionerRole->healthcareService_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_healthcareService, i);
			result_PractitionerRole->healthcareService[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(practitionerRole, "telecom");
	if(cjson_telecom)
	{
		result_PractitionerRole->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_PractitionerRole->telecom = PushArray(arena, ContactPoint, result_PractitionerRole->telecom_count);
		for(int i = 0; i < result_PractitionerRole->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_PractitionerRole->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_availableTime =  cJSON_GetObjectItem(practitionerRole, "availableTime");
	if(cjson_availableTime)
	{
		result_PractitionerRole->availableTime_count = cJSON_GetArraySize(cjson_availableTime);
		result_PractitionerRole->availableTime = PushArray(arena, PractitionerRole_AvailableTime, result_PractitionerRole->availableTime_count);
		for(int i = 0; i < result_PractitionerRole->availableTime_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_availableTime, i);
			result_PractitionerRole->availableTime[i] = *Deserialize_PractitionerRole_AvailableTime(arena, internal);
		}

	}
	cJSON *cjson_notAvailable =  cJSON_GetObjectItem(practitionerRole, "notAvailable");
	if(cjson_notAvailable)
	{
		result_PractitionerRole->notAvailable_count = cJSON_GetArraySize(cjson_notAvailable);
		result_PractitionerRole->notAvailable = PushArray(arena, PractitionerRole_NotAvailable, result_PractitionerRole->notAvailable_count);
		for(int i = 0; i < result_PractitionerRole->notAvailable_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_notAvailable, i);
			result_PractitionerRole->notAvailable[i] = *Deserialize_PractitionerRole_NotAvailable(arena, internal);
		}

	}
	cJSON *cjson_availabilityExceptions =  cJSON_GetObjectItem(practitionerRole, "availabilityExceptions");
	if(cjson_availabilityExceptions)
	{
		result_PractitionerRole->availabilityExceptions = Str8C(cJSON_GetStringValue(cjson_availabilityExceptions));
	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(practitionerRole, "endpoint");
	if(cjson_endpoint)
	{
		result_PractitionerRole->endpoint_count = cJSON_GetArraySize(cjson_endpoint);
		result_PractitionerRole->endpoint = PushArray(arena, Reference, result_PractitionerRole->endpoint_count);
		for(int i = 0; i < result_PractitionerRole->endpoint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endpoint, i);
			result_PractitionerRole->endpoint[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_PractitionerRole;
}

PractitionerRole_AvailableTime*
Deserialize_PractitionerRole_AvailableTime(Arena *arena, cJSON *practitionerRole_AvailableTime)
{
	PractitionerRole_AvailableTime *result_PractitionerRole_AvailableTime = PushArray(arena, PractitionerRole_AvailableTime, 1);
	result_PractitionerRole_AvailableTime->resourceType = ResourceType::PractitionerRole_AvailableTime;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "id");
	if(cjson_id)
	{
		result_PractitionerRole_AvailableTime->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "extension");
	if(cjson_extension)
	{
		result_PractitionerRole_AvailableTime->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PractitionerRole_AvailableTime->extension = PushArray(arena, Extension, result_PractitionerRole_AvailableTime->extension_count);
		for(int i = 0; i < result_PractitionerRole_AvailableTime->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PractitionerRole_AvailableTime->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PractitionerRole_AvailableTime->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PractitionerRole_AvailableTime->modifierExtension = PushArray(arena, Extension, result_PractitionerRole_AvailableTime->modifierExtension_count);
		for(int i = 0; i < result_PractitionerRole_AvailableTime->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PractitionerRole_AvailableTime->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_daysOfWeek =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "daysOfWeek");
	if(cjson_daysOfWeek)
	{
		result_PractitionerRole_AvailableTime->daysOfWeek_count = cJSON_GetArraySize(cjson_daysOfWeek);
		result_PractitionerRole_AvailableTime->daysOfWeek = PushArray(arena, fhir_code, result_PractitionerRole_AvailableTime->daysOfWeek_count);
		for(int i = 0; i < result_PractitionerRole_AvailableTime->daysOfWeek_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_daysOfWeek, i);
			result_PractitionerRole_AvailableTime->daysOfWeek[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_allDay =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "allDay");
	if(cjson_allDay)
	{
		result_PractitionerRole_AvailableTime->allDay = (boolean)cJSON_IsTrue(cjson_allDay);
	}
	cJSON *cjson_availableStartTime =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "availableStartTime");
	if(cjson_availableStartTime)
	{
		result_PractitionerRole_AvailableTime->availableStartTime = Str8C(cJSON_GetStringValue(cjson_availableStartTime));
	}
	cJSON *cjson_availableEndTime =  cJSON_GetObjectItem(practitionerRole_AvailableTime, "availableEndTime");
	if(cjson_availableEndTime)
	{
		result_PractitionerRole_AvailableTime->availableEndTime = Str8C(cJSON_GetStringValue(cjson_availableEndTime));
	}
	return result_PractitionerRole_AvailableTime;
}

PractitionerRole_NotAvailable*
Deserialize_PractitionerRole_NotAvailable(Arena *arena, cJSON *practitionerRole_NotAvailable)
{
	PractitionerRole_NotAvailable *result_PractitionerRole_NotAvailable = PushArray(arena, PractitionerRole_NotAvailable, 1);
	result_PractitionerRole_NotAvailable->resourceType = ResourceType::PractitionerRole_NotAvailable;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(practitionerRole_NotAvailable, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(practitionerRole_NotAvailable, "id");
	if(cjson_id)
	{
		result_PractitionerRole_NotAvailable->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(practitionerRole_NotAvailable, "extension");
	if(cjson_extension)
	{
		result_PractitionerRole_NotAvailable->extension_count = cJSON_GetArraySize(cjson_extension);
		result_PractitionerRole_NotAvailable->extension = PushArray(arena, Extension, result_PractitionerRole_NotAvailable->extension_count);
		for(int i = 0; i < result_PractitionerRole_NotAvailable->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_PractitionerRole_NotAvailable->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(practitionerRole_NotAvailable, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_PractitionerRole_NotAvailable->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_PractitionerRole_NotAvailable->modifierExtension = PushArray(arena, Extension, result_PractitionerRole_NotAvailable->modifierExtension_count);
		for(int i = 0; i < result_PractitionerRole_NotAvailable->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_PractitionerRole_NotAvailable->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(practitionerRole_NotAvailable, "description");
	if(cjson_description)
	{
		result_PractitionerRole_NotAvailable->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_during =  cJSON_GetObjectItem(practitionerRole_NotAvailable, "during");
	if(cjson_during)
	{
		result_PractitionerRole_NotAvailable->during = Deserialize_Period(arena, cjson_during);
	}
	return result_PractitionerRole_NotAvailable;
}

Procedure*
Deserialize_Procedure(Arena *arena, cJSON *procedure)
{
	Procedure *result_Procedure = PushArray(arena, Procedure, 1);
	result_Procedure->resourceType = ResourceType::Procedure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(procedure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(procedure, "id");
	if(cjson_id)
	{
		result_Procedure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(procedure, "meta");
	if(cjson_meta)
	{
		result_Procedure->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(procedure, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Procedure->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(procedure, "language");
	if(cjson_language)
	{
		result_Procedure->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(procedure, "text");
	if(cjson_text)
	{
		result_Procedure->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(procedure, "contained");
	if(cjson_contained)
	{
		result_Procedure->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Procedure->contained = PushArray(arena, Resource, result_Procedure->contained_count);
		for(int i = 0; i < result_Procedure->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Procedure->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(procedure, "extension");
	if(cjson_extension)
	{
		result_Procedure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Procedure->extension = PushArray(arena, Extension, result_Procedure->extension_count);
		for(int i = 0; i < result_Procedure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Procedure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(procedure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Procedure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Procedure->modifierExtension = PushArray(arena, Extension, result_Procedure->modifierExtension_count);
		for(int i = 0; i < result_Procedure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Procedure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(procedure, "identifier");
	if(cjson_identifier)
	{
		result_Procedure->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Procedure->identifier = PushArray(arena, Identifier, result_Procedure->identifier_count);
		for(int i = 0; i < result_Procedure->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Procedure->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(procedure, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_Procedure->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_Procedure->instantiatesCanonical = PushArray(arena, fhir_canonical, result_Procedure->instantiatesCanonical_count);
		for(int i = 0; i < result_Procedure->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_Procedure->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(procedure, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_Procedure->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_Procedure->instantiatesUri = PushArray(arena, fhir_uri, result_Procedure->instantiatesUri_count);
		for(int i = 0; i < result_Procedure->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_Procedure->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(procedure, "basedOn");
	if(cjson_basedOn)
	{
		result_Procedure->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_Procedure->basedOn = PushArray(arena, Reference, result_Procedure->basedOn_count);
		for(int i = 0; i < result_Procedure->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_Procedure->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(procedure, "partOf");
	if(cjson_partOf)
	{
		result_Procedure->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_Procedure->partOf = PushArray(arena, Reference, result_Procedure->partOf_count);
		for(int i = 0; i < result_Procedure->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_Procedure->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(procedure, "status");
	if(cjson_status)
	{
		result_Procedure->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(procedure, "statusReason");
	if(cjson_statusReason)
	{
		result_Procedure->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(procedure, "category");
	if(cjson_category)
	{
		result_Procedure->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(procedure, "code");
	if(cjson_code)
	{
		result_Procedure->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(procedure, "subject");
	if(cjson_subject)
	{
		result_Procedure->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(procedure, "encounter");
	if(cjson_encounter)
	{
		result_Procedure->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(procedure, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(procedure, "valueDateTime");
		result_Procedure->performed.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Procedure->performed_type = Procedure::PerformedType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(procedure, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(procedure, "valuePeriod");
		result_Procedure->performed.valuePeriod = Deserialize_Period(arena, item);
		result_Procedure->performed_type = Procedure::PerformedType::Period;
	}
	else if((bool)cJSON_HasObjectItem(procedure, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(procedure, "valueString");
		result_Procedure->performed.valueString = Str8C(cJSON_GetStringValue(item));
		result_Procedure->performed_type = Procedure::PerformedType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(procedure, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(procedure, "valueAge");
		result_Procedure->performed.valueAge = Deserialize_Age(arena, item);
		result_Procedure->performed_type = Procedure::PerformedType::Age;
	}
	else if((bool)cJSON_HasObjectItem(procedure, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(procedure, "valueRange");
		result_Procedure->performed.valueRange = Deserialize_Range(arena, item);
		result_Procedure->performed_type = Procedure::PerformedType::Range;
	}


	cJSON *cjson_recorder =  cJSON_GetObjectItem(procedure, "recorder");
	if(cjson_recorder)
	{
		result_Procedure->recorder = Deserialize_Reference(arena, cjson_recorder);
	}
	cJSON *cjson_asserter =  cJSON_GetObjectItem(procedure, "asserter");
	if(cjson_asserter)
	{
		result_Procedure->asserter = Deserialize_Reference(arena, cjson_asserter);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(procedure, "performer");
	if(cjson_performer)
	{
		result_Procedure->performer_count = cJSON_GetArraySize(cjson_performer);
		result_Procedure->performer = PushArray(arena, Procedure_Performer, result_Procedure->performer_count);
		for(int i = 0; i < result_Procedure->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_Procedure->performer[i] = *Deserialize_Procedure_Performer(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(procedure, "location");
	if(cjson_location)
	{
		result_Procedure->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(procedure, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Procedure->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_Procedure->reasonCode = PushArray(arena, CodeableConcept, result_Procedure->reasonCode_count);
		for(int i = 0; i < result_Procedure->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_Procedure->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(procedure, "reasonReference");
	if(cjson_reasonReference)
	{
		result_Procedure->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_Procedure->reasonReference = PushArray(arena, Reference, result_Procedure->reasonReference_count);
		for(int i = 0; i < result_Procedure->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_Procedure->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(procedure, "bodySite");
	if(cjson_bodySite)
	{
		result_Procedure->bodySite_count = cJSON_GetArraySize(cjson_bodySite);
		result_Procedure->bodySite = PushArray(arena, CodeableConcept, result_Procedure->bodySite_count);
		for(int i = 0; i < result_Procedure->bodySite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_bodySite, i);
			result_Procedure->bodySite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(procedure, "outcome");
	if(cjson_outcome)
	{
		result_Procedure->outcome = Deserialize_CodeableConcept(arena, cjson_outcome);
	}
	cJSON *cjson_report =  cJSON_GetObjectItem(procedure, "report");
	if(cjson_report)
	{
		result_Procedure->report_count = cJSON_GetArraySize(cjson_report);
		result_Procedure->report = PushArray(arena, Reference, result_Procedure->report_count);
		for(int i = 0; i < result_Procedure->report_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_report, i);
			result_Procedure->report[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_complication =  cJSON_GetObjectItem(procedure, "complication");
	if(cjson_complication)
	{
		result_Procedure->complication_count = cJSON_GetArraySize(cjson_complication);
		result_Procedure->complication = PushArray(arena, CodeableConcept, result_Procedure->complication_count);
		for(int i = 0; i < result_Procedure->complication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_complication, i);
			result_Procedure->complication[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_complicationDetail =  cJSON_GetObjectItem(procedure, "complicationDetail");
	if(cjson_complicationDetail)
	{
		result_Procedure->complicationDetail_count = cJSON_GetArraySize(cjson_complicationDetail);
		result_Procedure->complicationDetail = PushArray(arena, Reference, result_Procedure->complicationDetail_count);
		for(int i = 0; i < result_Procedure->complicationDetail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_complicationDetail, i);
			result_Procedure->complicationDetail[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_followUp =  cJSON_GetObjectItem(procedure, "followUp");
	if(cjson_followUp)
	{
		result_Procedure->followUp_count = cJSON_GetArraySize(cjson_followUp);
		result_Procedure->followUp = PushArray(arena, CodeableConcept, result_Procedure->followUp_count);
		for(int i = 0; i < result_Procedure->followUp_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_followUp, i);
			result_Procedure->followUp[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(procedure, "note");
	if(cjson_note)
	{
		result_Procedure->note_count = cJSON_GetArraySize(cjson_note);
		result_Procedure->note = PushArray(arena, Annotation, result_Procedure->note_count);
		for(int i = 0; i < result_Procedure->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Procedure->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_focalDevice =  cJSON_GetObjectItem(procedure, "focalDevice");
	if(cjson_focalDevice)
	{
		result_Procedure->focalDevice_count = cJSON_GetArraySize(cjson_focalDevice);
		result_Procedure->focalDevice = PushArray(arena, Procedure_FocalDevice, result_Procedure->focalDevice_count);
		for(int i = 0; i < result_Procedure->focalDevice_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_focalDevice, i);
			result_Procedure->focalDevice[i] = *Deserialize_Procedure_FocalDevice(arena, internal);
		}

	}
	cJSON *cjson_usedReference =  cJSON_GetObjectItem(procedure, "usedReference");
	if(cjson_usedReference)
	{
		result_Procedure->usedReference_count = cJSON_GetArraySize(cjson_usedReference);
		result_Procedure->usedReference = PushArray(arena, Reference, result_Procedure->usedReference_count);
		for(int i = 0; i < result_Procedure->usedReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_usedReference, i);
			result_Procedure->usedReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_usedCode =  cJSON_GetObjectItem(procedure, "usedCode");
	if(cjson_usedCode)
	{
		result_Procedure->usedCode_count = cJSON_GetArraySize(cjson_usedCode);
		result_Procedure->usedCode = PushArray(arena, CodeableConcept, result_Procedure->usedCode_count);
		for(int i = 0; i < result_Procedure->usedCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_usedCode, i);
			result_Procedure->usedCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_Procedure;
}

Procedure_Performer*
Deserialize_Procedure_Performer(Arena *arena, cJSON *procedure_Performer)
{
	Procedure_Performer *result_Procedure_Performer = PushArray(arena, Procedure_Performer, 1);
	result_Procedure_Performer->resourceType = ResourceType::Procedure_Performer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(procedure_Performer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(procedure_Performer, "id");
	if(cjson_id)
	{
		result_Procedure_Performer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(procedure_Performer, "extension");
	if(cjson_extension)
	{
		result_Procedure_Performer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Procedure_Performer->extension = PushArray(arena, Extension, result_Procedure_Performer->extension_count);
		for(int i = 0; i < result_Procedure_Performer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Procedure_Performer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(procedure_Performer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Procedure_Performer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Procedure_Performer->modifierExtension = PushArray(arena, Extension, result_Procedure_Performer->modifierExtension_count);
		for(int i = 0; i < result_Procedure_Performer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Procedure_Performer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_function_ =  cJSON_GetObjectItem(procedure_Performer, "function_");
	if(cjson_function_)
	{
		result_Procedure_Performer->function_ = Deserialize_CodeableConcept(arena, cjson_function_);
	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(procedure_Performer, "actor");
	if(cjson_actor)
	{
		result_Procedure_Performer->actor = Deserialize_Reference(arena, cjson_actor);
	}
	cJSON *cjson_onBehalfOf =  cJSON_GetObjectItem(procedure_Performer, "onBehalfOf");
	if(cjson_onBehalfOf)
	{
		result_Procedure_Performer->onBehalfOf = Deserialize_Reference(arena, cjson_onBehalfOf);
	}
	return result_Procedure_Performer;
}

Procedure_FocalDevice*
Deserialize_Procedure_FocalDevice(Arena *arena, cJSON *procedure_FocalDevice)
{
	Procedure_FocalDevice *result_Procedure_FocalDevice = PushArray(arena, Procedure_FocalDevice, 1);
	result_Procedure_FocalDevice->resourceType = ResourceType::Procedure_FocalDevice;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(procedure_FocalDevice, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(procedure_FocalDevice, "id");
	if(cjson_id)
	{
		result_Procedure_FocalDevice->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(procedure_FocalDevice, "extension");
	if(cjson_extension)
	{
		result_Procedure_FocalDevice->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Procedure_FocalDevice->extension = PushArray(arena, Extension, result_Procedure_FocalDevice->extension_count);
		for(int i = 0; i < result_Procedure_FocalDevice->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Procedure_FocalDevice->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(procedure_FocalDevice, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Procedure_FocalDevice->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Procedure_FocalDevice->modifierExtension = PushArray(arena, Extension, result_Procedure_FocalDevice->modifierExtension_count);
		for(int i = 0; i < result_Procedure_FocalDevice->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Procedure_FocalDevice->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(procedure_FocalDevice, "action");
	if(cjson_action)
	{
		result_Procedure_FocalDevice->action = Deserialize_CodeableConcept(arena, cjson_action);
	}
	cJSON *cjson_manipulated =  cJSON_GetObjectItem(procedure_FocalDevice, "manipulated");
	if(cjson_manipulated)
	{
		result_Procedure_FocalDevice->manipulated = Deserialize_Reference(arena, cjson_manipulated);
	}
	return result_Procedure_FocalDevice;
}

Provenance*
Deserialize_Provenance(Arena *arena, cJSON *provenance)
{
	Provenance *result_Provenance = PushArray(arena, Provenance, 1);
	result_Provenance->resourceType = ResourceType::Provenance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(provenance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(provenance, "id");
	if(cjson_id)
	{
		result_Provenance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(provenance, "meta");
	if(cjson_meta)
	{
		result_Provenance->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(provenance, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Provenance->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(provenance, "language");
	if(cjson_language)
	{
		result_Provenance->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(provenance, "text");
	if(cjson_text)
	{
		result_Provenance->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(provenance, "contained");
	if(cjson_contained)
	{
		result_Provenance->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Provenance->contained = PushArray(arena, Resource, result_Provenance->contained_count);
		for(int i = 0; i < result_Provenance->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Provenance->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(provenance, "extension");
	if(cjson_extension)
	{
		result_Provenance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Provenance->extension = PushArray(arena, Extension, result_Provenance->extension_count);
		for(int i = 0; i < result_Provenance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Provenance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(provenance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Provenance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Provenance->modifierExtension = PushArray(arena, Extension, result_Provenance->modifierExtension_count);
		for(int i = 0; i < result_Provenance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Provenance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_target =  cJSON_GetObjectItem(provenance, "target");
	if(cjson_target)
	{
		result_Provenance->target_count = cJSON_GetArraySize(cjson_target);
		result_Provenance->target = PushArray(arena, Reference, result_Provenance->target_count);
		for(int i = 0; i < result_Provenance->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_Provenance->target[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(provenance, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(provenance, "valuePeriod");
		result_Provenance->occurred.valuePeriod = Deserialize_Period(arena, item);
		result_Provenance->occurred_type = Provenance::OccurredType::Period;
	}
	else if((bool)cJSON_HasObjectItem(provenance, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(provenance, "valueDateTime");
		result_Provenance->occurred.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Provenance->occurred_type = Provenance::OccurredType::fhir_dateTime;
	}


	cJSON *cjson_recorded =  cJSON_GetObjectItem(provenance, "recorded");
	if(cjson_recorded)
	{
		result_Provenance->recorded = Str8C(cJSON_GetStringValue(cjson_recorded));
	}
	cJSON *cjson_policy =  cJSON_GetObjectItem(provenance, "policy");
	if(cjson_policy)
	{
		result_Provenance->policy_count = cJSON_GetArraySize(cjson_policy);
		result_Provenance->policy = PushArray(arena, fhir_uri, result_Provenance->policy_count);
		for(int i = 0; i < result_Provenance->policy_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_policy, i);
			result_Provenance->policy[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(provenance, "location");
	if(cjson_location)
	{
		result_Provenance->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(provenance, "reason");
	if(cjson_reason)
	{
		result_Provenance->reason_count = cJSON_GetArraySize(cjson_reason);
		result_Provenance->reason = PushArray(arena, CodeableConcept, result_Provenance->reason_count);
		for(int i = 0; i < result_Provenance->reason_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reason, i);
			result_Provenance->reason[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_activity =  cJSON_GetObjectItem(provenance, "activity");
	if(cjson_activity)
	{
		result_Provenance->activity = Deserialize_CodeableConcept(arena, cjson_activity);
	}
	cJSON *cjson_agent =  cJSON_GetObjectItem(provenance, "agent");
	if(cjson_agent)
	{
		result_Provenance->agent_count = cJSON_GetArraySize(cjson_agent);
		result_Provenance->agent = PushArray(arena, Provenance_Agent, result_Provenance->agent_count);
		for(int i = 0; i < result_Provenance->agent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_agent, i);
			result_Provenance->agent[i] = *Deserialize_Provenance_Agent(arena, internal);
		}

	}
	cJSON *cjson_entity =  cJSON_GetObjectItem(provenance, "entity");
	if(cjson_entity)
	{
		result_Provenance->entity_count = cJSON_GetArraySize(cjson_entity);
		result_Provenance->entity = PushArray(arena, Provenance_Entity, result_Provenance->entity_count);
		for(int i = 0; i < result_Provenance->entity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_entity, i);
			result_Provenance->entity[i] = *Deserialize_Provenance_Entity(arena, internal);
		}

	}
	cJSON *cjson_signature =  cJSON_GetObjectItem(provenance, "signature");
	if(cjson_signature)
	{
		result_Provenance->signature_count = cJSON_GetArraySize(cjson_signature);
		result_Provenance->signature = PushArray(arena, Signature, result_Provenance->signature_count);
		for(int i = 0; i < result_Provenance->signature_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_signature, i);
			result_Provenance->signature[i] = *Deserialize_Signature(arena, internal);
		}

	}
	return result_Provenance;
}

Provenance_Agent*
Deserialize_Provenance_Agent(Arena *arena, cJSON *provenance_Agent)
{
	Provenance_Agent *result_Provenance_Agent = PushArray(arena, Provenance_Agent, 1);
	result_Provenance_Agent->resourceType = ResourceType::Provenance_Agent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(provenance_Agent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(provenance_Agent, "id");
	if(cjson_id)
	{
		result_Provenance_Agent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(provenance_Agent, "extension");
	if(cjson_extension)
	{
		result_Provenance_Agent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Provenance_Agent->extension = PushArray(arena, Extension, result_Provenance_Agent->extension_count);
		for(int i = 0; i < result_Provenance_Agent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Provenance_Agent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(provenance_Agent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Provenance_Agent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Provenance_Agent->modifierExtension = PushArray(arena, Extension, result_Provenance_Agent->modifierExtension_count);
		for(int i = 0; i < result_Provenance_Agent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Provenance_Agent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(provenance_Agent, "type");
	if(cjson_type)
	{
		result_Provenance_Agent->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_role =  cJSON_GetObjectItem(provenance_Agent, "role");
	if(cjson_role)
	{
		result_Provenance_Agent->role_count = cJSON_GetArraySize(cjson_role);
		result_Provenance_Agent->role = PushArray(arena, CodeableConcept, result_Provenance_Agent->role_count);
		for(int i = 0; i < result_Provenance_Agent->role_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_role, i);
			result_Provenance_Agent->role[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_who =  cJSON_GetObjectItem(provenance_Agent, "who");
	if(cjson_who)
	{
		result_Provenance_Agent->who = Deserialize_Reference(arena, cjson_who);
	}
	cJSON *cjson_onBehalfOf =  cJSON_GetObjectItem(provenance_Agent, "onBehalfOf");
	if(cjson_onBehalfOf)
	{
		result_Provenance_Agent->onBehalfOf = Deserialize_Reference(arena, cjson_onBehalfOf);
	}
	return result_Provenance_Agent;
}

Provenance_Entity*
Deserialize_Provenance_Entity(Arena *arena, cJSON *provenance_Entity)
{
	Provenance_Entity *result_Provenance_Entity = PushArray(arena, Provenance_Entity, 1);
	result_Provenance_Entity->resourceType = ResourceType::Provenance_Entity;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(provenance_Entity, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(provenance_Entity, "id");
	if(cjson_id)
	{
		result_Provenance_Entity->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(provenance_Entity, "extension");
	if(cjson_extension)
	{
		result_Provenance_Entity->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Provenance_Entity->extension = PushArray(arena, Extension, result_Provenance_Entity->extension_count);
		for(int i = 0; i < result_Provenance_Entity->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Provenance_Entity->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(provenance_Entity, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Provenance_Entity->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Provenance_Entity->modifierExtension = PushArray(arena, Extension, result_Provenance_Entity->modifierExtension_count);
		for(int i = 0; i < result_Provenance_Entity->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Provenance_Entity->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_role =  cJSON_GetObjectItem(provenance_Entity, "role");
	if(cjson_role)
	{
		result_Provenance_Entity->role = Str8C(cJSON_GetStringValue(cjson_role));
	}
	cJSON *cjson_what =  cJSON_GetObjectItem(provenance_Entity, "what");
	if(cjson_what)
	{
		result_Provenance_Entity->what = Deserialize_Reference(arena, cjson_what);
	}
	cJSON *cjson_agent =  cJSON_GetObjectItem(provenance_Entity, "agent");
	if(cjson_agent)
	{
		result_Provenance_Entity->agent_count = cJSON_GetArraySize(cjson_agent);
		result_Provenance_Entity->agent = PushArray(arena, Provenance_Agent, result_Provenance_Entity->agent_count);
		for(int i = 0; i < result_Provenance_Entity->agent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_agent, i);
			result_Provenance_Entity->agent[i] = *Deserialize_Provenance_Agent(arena, internal);
		}

	}
	return result_Provenance_Entity;
}

Questionnaire*
Deserialize_Questionnaire(Arena *arena, cJSON *questionnaire)
{
	Questionnaire *result_Questionnaire = PushArray(arena, Questionnaire, 1);
	result_Questionnaire->resourceType = ResourceType::Questionnaire;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaire, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaire, "id");
	if(cjson_id)
	{
		result_Questionnaire->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(questionnaire, "meta");
	if(cjson_meta)
	{
		result_Questionnaire->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(questionnaire, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Questionnaire->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(questionnaire, "language");
	if(cjson_language)
	{
		result_Questionnaire->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(questionnaire, "text");
	if(cjson_text)
	{
		result_Questionnaire->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(questionnaire, "contained");
	if(cjson_contained)
	{
		result_Questionnaire->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Questionnaire->contained = PushArray(arena, Resource, result_Questionnaire->contained_count);
		for(int i = 0; i < result_Questionnaire->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Questionnaire->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaire, "extension");
	if(cjson_extension)
	{
		result_Questionnaire->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Questionnaire->extension = PushArray(arena, Extension, result_Questionnaire->extension_count);
		for(int i = 0; i < result_Questionnaire->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Questionnaire->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaire, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Questionnaire->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Questionnaire->modifierExtension = PushArray(arena, Extension, result_Questionnaire->modifierExtension_count);
		for(int i = 0; i < result_Questionnaire->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Questionnaire->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(questionnaire, "url");
	if(cjson_url)
	{
		result_Questionnaire->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(questionnaire, "identifier");
	if(cjson_identifier)
	{
		result_Questionnaire->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Questionnaire->identifier = PushArray(arena, Identifier, result_Questionnaire->identifier_count);
		for(int i = 0; i < result_Questionnaire->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Questionnaire->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(questionnaire, "version");
	if(cjson_version)
	{
		result_Questionnaire->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(questionnaire, "name");
	if(cjson_name)
	{
		result_Questionnaire->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(questionnaire, "title");
	if(cjson_title)
	{
		result_Questionnaire->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_derivedFrom =  cJSON_GetObjectItem(questionnaire, "derivedFrom");
	if(cjson_derivedFrom)
	{
		result_Questionnaire->derivedFrom_count = cJSON_GetArraySize(cjson_derivedFrom);
		result_Questionnaire->derivedFrom = PushArray(arena, fhir_canonical, result_Questionnaire->derivedFrom_count);
		for(int i = 0; i < result_Questionnaire->derivedFrom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_derivedFrom, i);
			result_Questionnaire->derivedFrom[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(questionnaire, "status");
	if(cjson_status)
	{
		result_Questionnaire->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(questionnaire, "experimental");
	if(cjson_experimental)
	{
		result_Questionnaire->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_subjectType =  cJSON_GetObjectItem(questionnaire, "subjectType");
	if(cjson_subjectType)
	{
		result_Questionnaire->subjectType_count = cJSON_GetArraySize(cjson_subjectType);
		result_Questionnaire->subjectType = PushArray(arena, fhir_code, result_Questionnaire->subjectType_count);
		for(int i = 0; i < result_Questionnaire->subjectType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subjectType, i);
			result_Questionnaire->subjectType[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_date =  cJSON_GetObjectItem(questionnaire, "date");
	if(cjson_date)
	{
		result_Questionnaire->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(questionnaire, "publisher");
	if(cjson_publisher)
	{
		result_Questionnaire->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(questionnaire, "contact");
	if(cjson_contact)
	{
		result_Questionnaire->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Questionnaire->contact = PushArray(arena, ContactDetail, result_Questionnaire->contact_count);
		for(int i = 0; i < result_Questionnaire->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Questionnaire->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(questionnaire, "description");
	if(cjson_description)
	{
		result_Questionnaire->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(questionnaire, "useContext");
	if(cjson_useContext)
	{
		result_Questionnaire->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_Questionnaire->useContext = PushArray(arena, UsageContext, result_Questionnaire->useContext_count);
		for(int i = 0; i < result_Questionnaire->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_Questionnaire->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(questionnaire, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_Questionnaire->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_Questionnaire->jurisdiction = PushArray(arena, CodeableConcept, result_Questionnaire->jurisdiction_count);
		for(int i = 0; i < result_Questionnaire->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_Questionnaire->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(questionnaire, "purpose");
	if(cjson_purpose)
	{
		result_Questionnaire->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(questionnaire, "copyright");
	if(cjson_copyright)
	{
		result_Questionnaire->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(questionnaire, "approvalDate");
	if(cjson_approvalDate)
	{
		result_Questionnaire->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(questionnaire, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_Questionnaire->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(questionnaire, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_Questionnaire->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(questionnaire, "code");
	if(cjson_code)
	{
		result_Questionnaire->code_count = cJSON_GetArraySize(cjson_code);
		result_Questionnaire->code = PushArray(arena, Coding, result_Questionnaire->code_count);
		for(int i = 0; i < result_Questionnaire->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_Questionnaire->code[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_item =  cJSON_GetObjectItem(questionnaire, "item");
	if(cjson_item)
	{
		result_Questionnaire->item_count = cJSON_GetArraySize(cjson_item);
		result_Questionnaire->item = PushArray(arena, Questionnaire_Item, result_Questionnaire->item_count);
		for(int i = 0; i < result_Questionnaire->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_Questionnaire->item[i] = *Deserialize_Questionnaire_Item(arena, internal);
		}

	}
	return result_Questionnaire;
}

Questionnaire_Item*
Deserialize_Questionnaire_Item(Arena *arena, cJSON *questionnaire_Item)
{
	Questionnaire_Item *result_Questionnaire_Item = PushArray(arena, Questionnaire_Item, 1);
	result_Questionnaire_Item->resourceType = ResourceType::Questionnaire_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaire_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaire_Item, "id");
	if(cjson_id)
	{
		result_Questionnaire_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaire_Item, "extension");
	if(cjson_extension)
	{
		result_Questionnaire_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Questionnaire_Item->extension = PushArray(arena, Extension, result_Questionnaire_Item->extension_count);
		for(int i = 0; i < result_Questionnaire_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Questionnaire_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaire_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Questionnaire_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Questionnaire_Item->modifierExtension = PushArray(arena, Extension, result_Questionnaire_Item->modifierExtension_count);
		for(int i = 0; i < result_Questionnaire_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Questionnaire_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_linkId =  cJSON_GetObjectItem(questionnaire_Item, "linkId");
	if(cjson_linkId)
	{
		result_Questionnaire_Item->linkId = Str8C(cJSON_GetStringValue(cjson_linkId));
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(questionnaire_Item, "definition");
	if(cjson_definition)
	{
		result_Questionnaire_Item->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(questionnaire_Item, "code");
	if(cjson_code)
	{
		result_Questionnaire_Item->code_count = cJSON_GetArraySize(cjson_code);
		result_Questionnaire_Item->code = PushArray(arena, Coding, result_Questionnaire_Item->code_count);
		for(int i = 0; i < result_Questionnaire_Item->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_Questionnaire_Item->code[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_prefix =  cJSON_GetObjectItem(questionnaire_Item, "prefix");
	if(cjson_prefix)
	{
		result_Questionnaire_Item->prefix = Str8C(cJSON_GetStringValue(cjson_prefix));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(questionnaire_Item, "text");
	if(cjson_text)
	{
		result_Questionnaire_Item->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(questionnaire_Item, "type");
	if(cjson_type)
	{
		result_Questionnaire_Item->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_enableWhen =  cJSON_GetObjectItem(questionnaire_Item, "enableWhen");
	if(cjson_enableWhen)
	{
		result_Questionnaire_Item->enableWhen_count = cJSON_GetArraySize(cjson_enableWhen);
		result_Questionnaire_Item->enableWhen = PushArray(arena, Questionnaire_Item_EnableWhen, result_Questionnaire_Item->enableWhen_count);
		for(int i = 0; i < result_Questionnaire_Item->enableWhen_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_enableWhen, i);
			result_Questionnaire_Item->enableWhen[i] = *Deserialize_Questionnaire_Item_EnableWhen(arena, internal);
		}

	}
	cJSON *cjson_enableBehavior =  cJSON_GetObjectItem(questionnaire_Item, "enableBehavior");
	if(cjson_enableBehavior)
	{
		result_Questionnaire_Item->enableBehavior = Str8C(cJSON_GetStringValue(cjson_enableBehavior));
	}
	cJSON *cjson_required =  cJSON_GetObjectItem(questionnaire_Item, "required");
	if(cjson_required)
	{
		result_Questionnaire_Item->required = (boolean)cJSON_IsTrue(cjson_required);
	}
	cJSON *cjson_repeats =  cJSON_GetObjectItem(questionnaire_Item, "repeats");
	if(cjson_repeats)
	{
		result_Questionnaire_Item->repeats = (boolean)cJSON_IsTrue(cjson_repeats);
	}
	cJSON *cjson_readOnly =  cJSON_GetObjectItem(questionnaire_Item, "readOnly");
	if(cjson_readOnly)
	{
		result_Questionnaire_Item->readOnly = (boolean)cJSON_IsTrue(cjson_readOnly);
	}
	cJSON *cjson_maxLength =  cJSON_GetObjectItem(questionnaire_Item, "maxLength");
	if(cjson_maxLength)
	{
		result_Questionnaire_Item->maxLength = Deserialize_Integer(arena, cjson_maxLength);
	}
	cJSON *cjson_answerValueSet =  cJSON_GetObjectItem(questionnaire_Item, "answerValueSet");
	if(cjson_answerValueSet)
	{
		result_Questionnaire_Item->answerValueSet = Str8C(cJSON_GetStringValue(cjson_answerValueSet));
	}
	cJSON *cjson_answerOption =  cJSON_GetObjectItem(questionnaire_Item, "answerOption");
	if(cjson_answerOption)
	{
		result_Questionnaire_Item->answerOption_count = cJSON_GetArraySize(cjson_answerOption);
		result_Questionnaire_Item->answerOption = PushArray(arena, Questionnaire_Item_AnswerOption, result_Questionnaire_Item->answerOption_count);
		for(int i = 0; i < result_Questionnaire_Item->answerOption_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_answerOption, i);
			result_Questionnaire_Item->answerOption[i] = *Deserialize_Questionnaire_Item_AnswerOption(arena, internal);
		}

	}
	cJSON *cjson_initial =  cJSON_GetObjectItem(questionnaire_Item, "initial");
	if(cjson_initial)
	{
		result_Questionnaire_Item->initial_count = cJSON_GetArraySize(cjson_initial);
		result_Questionnaire_Item->initial = PushArray(arena, Questionnaire_Item_Initial, result_Questionnaire_Item->initial_count);
		for(int i = 0; i < result_Questionnaire_Item->initial_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_initial, i);
			result_Questionnaire_Item->initial[i] = *Deserialize_Questionnaire_Item_Initial(arena, internal);
		}

	}
	cJSON *cjson_item =  cJSON_GetObjectItem(questionnaire_Item, "item");
	if(cjson_item)
	{
		result_Questionnaire_Item->item_count = cJSON_GetArraySize(cjson_item);
		result_Questionnaire_Item->item = PushArray(arena, Questionnaire_Item, result_Questionnaire_Item->item_count);
		for(int i = 0; i < result_Questionnaire_Item->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_Questionnaire_Item->item[i] = *Deserialize_Questionnaire_Item(arena, internal);
		}

	}
	return result_Questionnaire_Item;
}

Questionnaire_Item_EnableWhen*
Deserialize_Questionnaire_Item_EnableWhen(Arena *arena, cJSON *questionnaire_Item_EnableWhen)
{
	Questionnaire_Item_EnableWhen *result_Questionnaire_Item_EnableWhen = PushArray(arena, Questionnaire_Item_EnableWhen, 1);
	result_Questionnaire_Item_EnableWhen->resourceType = ResourceType::Questionnaire_Item_EnableWhen;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "id");
	if(cjson_id)
	{
		result_Questionnaire_Item_EnableWhen->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "extension");
	if(cjson_extension)
	{
		result_Questionnaire_Item_EnableWhen->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Questionnaire_Item_EnableWhen->extension = PushArray(arena, Extension, result_Questionnaire_Item_EnableWhen->extension_count);
		for(int i = 0; i < result_Questionnaire_Item_EnableWhen->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Questionnaire_Item_EnableWhen->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Questionnaire_Item_EnableWhen->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Questionnaire_Item_EnableWhen->modifierExtension = PushArray(arena, Extension, result_Questionnaire_Item_EnableWhen->modifierExtension_count);
		for(int i = 0; i < result_Questionnaire_Item_EnableWhen->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Questionnaire_Item_EnableWhen->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_question =  cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "question");
	if(cjson_question)
	{
		result_Questionnaire_Item_EnableWhen->question = Str8C(cJSON_GetStringValue(cjson_question));
	}
	cJSON *cjson_operator_ =  cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "operator_");
	if(cjson_operator_)
	{
		result_Questionnaire_Item_EnableWhen->operator_ = Str8C(cJSON_GetStringValue(cjson_operator_));
	}
	if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueBoolean");
		result_Questionnaire_Item_EnableWhen->answer.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueDecimal");
		result_Questionnaire_Item_EnableWhen->answer.valueDecimal = cJSON_GetNumberValue(item);
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueInteger");
		result_Questionnaire_Item_EnableWhen->answer.valueInteger = Deserialize_Integer(arena, item);
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueDate");
		result_Questionnaire_Item_EnableWhen->answer.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueDateTime");
		result_Questionnaire_Item_EnableWhen->answer.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueTime");
		result_Questionnaire_Item_EnableWhen->answer.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueString");
		result_Questionnaire_Item_EnableWhen->answer.valueString = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueCoding");
		result_Questionnaire_Item_EnableWhen->answer.valueCoding = Deserialize_Coding(arena, item);
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueQuantity");
		result_Questionnaire_Item_EnableWhen->answer.valueQuantity = Deserialize_Quantity(arena, item);
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_EnableWhen, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_EnableWhen, "valueReference");
		result_Questionnaire_Item_EnableWhen->answer.valueReference = Deserialize_Reference(arena, item);
		result_Questionnaire_Item_EnableWhen->answer_type = Questionnaire_Item_EnableWhen::AnswerType::Reference;
	}


	return result_Questionnaire_Item_EnableWhen;
}

Questionnaire_Item_AnswerOption*
Deserialize_Questionnaire_Item_AnswerOption(Arena *arena, cJSON *questionnaire_Item_AnswerOption)
{
	Questionnaire_Item_AnswerOption *result_Questionnaire_Item_AnswerOption = PushArray(arena, Questionnaire_Item_AnswerOption, 1);
	result_Questionnaire_Item_AnswerOption->resourceType = ResourceType::Questionnaire_Item_AnswerOption;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "id");
	if(cjson_id)
	{
		result_Questionnaire_Item_AnswerOption->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "extension");
	if(cjson_extension)
	{
		result_Questionnaire_Item_AnswerOption->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Questionnaire_Item_AnswerOption->extension = PushArray(arena, Extension, result_Questionnaire_Item_AnswerOption->extension_count);
		for(int i = 0; i < result_Questionnaire_Item_AnswerOption->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Questionnaire_Item_AnswerOption->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Questionnaire_Item_AnswerOption->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Questionnaire_Item_AnswerOption->modifierExtension = PushArray(arena, Extension, result_Questionnaire_Item_AnswerOption->modifierExtension_count);
		for(int i = 0; i < result_Questionnaire_Item_AnswerOption->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Questionnaire_Item_AnswerOption->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(questionnaire_Item_AnswerOption, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "valueInteger");
		result_Questionnaire_Item_AnswerOption->value.valueInteger = Deserialize_Integer(arena, item);
		result_Questionnaire_Item_AnswerOption->value_type = Questionnaire_Item_AnswerOption::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_AnswerOption, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "valueDate");
		result_Questionnaire_Item_AnswerOption->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_AnswerOption->value_type = Questionnaire_Item_AnswerOption::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_AnswerOption, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "valueTime");
		result_Questionnaire_Item_AnswerOption->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_AnswerOption->value_type = Questionnaire_Item_AnswerOption::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_AnswerOption, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "valueString");
		result_Questionnaire_Item_AnswerOption->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_AnswerOption->value_type = Questionnaire_Item_AnswerOption::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_AnswerOption, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "valueCoding");
		result_Questionnaire_Item_AnswerOption->value.valueCoding = Deserialize_Coding(arena, item);
		result_Questionnaire_Item_AnswerOption->value_type = Questionnaire_Item_AnswerOption::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_AnswerOption, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "valueReference");
		result_Questionnaire_Item_AnswerOption->value.valueReference = Deserialize_Reference(arena, item);
		result_Questionnaire_Item_AnswerOption->value_type = Questionnaire_Item_AnswerOption::ValueType::Reference;
	}


	cJSON *cjson_initialSelected =  cJSON_GetObjectItem(questionnaire_Item_AnswerOption, "initialSelected");
	if(cjson_initialSelected)
	{
		result_Questionnaire_Item_AnswerOption->initialSelected = (boolean)cJSON_IsTrue(cjson_initialSelected);
	}
	return result_Questionnaire_Item_AnswerOption;
}

Questionnaire_Item_Initial*
Deserialize_Questionnaire_Item_Initial(Arena *arena, cJSON *questionnaire_Item_Initial)
{
	Questionnaire_Item_Initial *result_Questionnaire_Item_Initial = PushArray(arena, Questionnaire_Item_Initial, 1);
	result_Questionnaire_Item_Initial->resourceType = ResourceType::Questionnaire_Item_Initial;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaire_Item_Initial, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaire_Item_Initial, "id");
	if(cjson_id)
	{
		result_Questionnaire_Item_Initial->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaire_Item_Initial, "extension");
	if(cjson_extension)
	{
		result_Questionnaire_Item_Initial->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Questionnaire_Item_Initial->extension = PushArray(arena, Extension, result_Questionnaire_Item_Initial->extension_count);
		for(int i = 0; i < result_Questionnaire_Item_Initial->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Questionnaire_Item_Initial->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaire_Item_Initial, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Questionnaire_Item_Initial->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Questionnaire_Item_Initial->modifierExtension = PushArray(arena, Extension, result_Questionnaire_Item_Initial->modifierExtension_count);
		for(int i = 0; i < result_Questionnaire_Item_Initial->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Questionnaire_Item_Initial->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueBoolean");
		result_Questionnaire_Item_Initial->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueDecimal");
		result_Questionnaire_Item_Initial->value.valueDecimal = cJSON_GetNumberValue(item);
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueInteger");
		result_Questionnaire_Item_Initial->value.valueInteger = Deserialize_Integer(arena, item);
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueDate");
		result_Questionnaire_Item_Initial->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueDateTime");
		result_Questionnaire_Item_Initial->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueTime");
		result_Questionnaire_Item_Initial->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueString");
		result_Questionnaire_Item_Initial->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueUri");
		result_Questionnaire_Item_Initial->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueAttachment");
		result_Questionnaire_Item_Initial->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueCoding");
		result_Questionnaire_Item_Initial->value.valueCoding = Deserialize_Coding(arena, item);
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueQuantity");
		result_Questionnaire_Item_Initial->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(questionnaire_Item_Initial, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaire_Item_Initial, "valueReference");
		result_Questionnaire_Item_Initial->value.valueReference = Deserialize_Reference(arena, item);
		result_Questionnaire_Item_Initial->value_type = Questionnaire_Item_Initial::ValueType::Reference;
	}


	return result_Questionnaire_Item_Initial;
}

QuestionnaireResponse*
Deserialize_QuestionnaireResponse(Arena *arena, cJSON *questionnaireResponse)
{
	QuestionnaireResponse *result_QuestionnaireResponse = PushArray(arena, QuestionnaireResponse, 1);
	result_QuestionnaireResponse->resourceType = ResourceType::QuestionnaireResponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaireResponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaireResponse, "id");
	if(cjson_id)
	{
		result_QuestionnaireResponse->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(questionnaireResponse, "meta");
	if(cjson_meta)
	{
		result_QuestionnaireResponse->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(questionnaireResponse, "implicitRules");
	if(cjson_implicitRules)
	{
		result_QuestionnaireResponse->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(questionnaireResponse, "language");
	if(cjson_language)
	{
		result_QuestionnaireResponse->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(questionnaireResponse, "text");
	if(cjson_text)
	{
		result_QuestionnaireResponse->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(questionnaireResponse, "contained");
	if(cjson_contained)
	{
		result_QuestionnaireResponse->contained_count = cJSON_GetArraySize(cjson_contained);
		result_QuestionnaireResponse->contained = PushArray(arena, Resource, result_QuestionnaireResponse->contained_count);
		for(int i = 0; i < result_QuestionnaireResponse->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_QuestionnaireResponse->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaireResponse, "extension");
	if(cjson_extension)
	{
		result_QuestionnaireResponse->extension_count = cJSON_GetArraySize(cjson_extension);
		result_QuestionnaireResponse->extension = PushArray(arena, Extension, result_QuestionnaireResponse->extension_count);
		for(int i = 0; i < result_QuestionnaireResponse->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_QuestionnaireResponse->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaireResponse, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_QuestionnaireResponse->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_QuestionnaireResponse->modifierExtension = PushArray(arena, Extension, result_QuestionnaireResponse->modifierExtension_count);
		for(int i = 0; i < result_QuestionnaireResponse->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_QuestionnaireResponse->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(questionnaireResponse, "identifier");
	if(cjson_identifier)
	{
		result_QuestionnaireResponse->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(questionnaireResponse, "basedOn");
	if(cjson_basedOn)
	{
		result_QuestionnaireResponse->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_QuestionnaireResponse->basedOn = PushArray(arena, Reference, result_QuestionnaireResponse->basedOn_count);
		for(int i = 0; i < result_QuestionnaireResponse->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_QuestionnaireResponse->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(questionnaireResponse, "partOf");
	if(cjson_partOf)
	{
		result_QuestionnaireResponse->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_QuestionnaireResponse->partOf = PushArray(arena, Reference, result_QuestionnaireResponse->partOf_count);
		for(int i = 0; i < result_QuestionnaireResponse->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_QuestionnaireResponse->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_questionnaire =  cJSON_GetObjectItem(questionnaireResponse, "questionnaire");
	if(cjson_questionnaire)
	{
		result_QuestionnaireResponse->questionnaire = Str8C(cJSON_GetStringValue(cjson_questionnaire));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(questionnaireResponse, "status");
	if(cjson_status)
	{
		result_QuestionnaireResponse->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(questionnaireResponse, "subject");
	if(cjson_subject)
	{
		result_QuestionnaireResponse->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(questionnaireResponse, "encounter");
	if(cjson_encounter)
	{
		result_QuestionnaireResponse->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_authored =  cJSON_GetObjectItem(questionnaireResponse, "authored");
	if(cjson_authored)
	{
		result_QuestionnaireResponse->authored = Str8C(cJSON_GetStringValue(cjson_authored));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(questionnaireResponse, "author");
	if(cjson_author)
	{
		result_QuestionnaireResponse->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(questionnaireResponse, "source");
	if(cjson_source)
	{
		result_QuestionnaireResponse->source = Deserialize_Reference(arena, cjson_source);
	}
	cJSON *cjson_item =  cJSON_GetObjectItem(questionnaireResponse, "item");
	if(cjson_item)
	{
		result_QuestionnaireResponse->item_count = cJSON_GetArraySize(cjson_item);
		result_QuestionnaireResponse->item = PushArray(arena, QuestionnaireResponse_Item, result_QuestionnaireResponse->item_count);
		for(int i = 0; i < result_QuestionnaireResponse->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_QuestionnaireResponse->item[i] = *Deserialize_QuestionnaireResponse_Item(arena, internal);
		}

	}
	return result_QuestionnaireResponse;
}

QuestionnaireResponse_Item*
Deserialize_QuestionnaireResponse_Item(Arena *arena, cJSON *questionnaireResponse_Item)
{
	QuestionnaireResponse_Item *result_QuestionnaireResponse_Item = PushArray(arena, QuestionnaireResponse_Item, 1);
	result_QuestionnaireResponse_Item->resourceType = ResourceType::QuestionnaireResponse_Item;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaireResponse_Item, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaireResponse_Item, "id");
	if(cjson_id)
	{
		result_QuestionnaireResponse_Item->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaireResponse_Item, "extension");
	if(cjson_extension)
	{
		result_QuestionnaireResponse_Item->extension_count = cJSON_GetArraySize(cjson_extension);
		result_QuestionnaireResponse_Item->extension = PushArray(arena, Extension, result_QuestionnaireResponse_Item->extension_count);
		for(int i = 0; i < result_QuestionnaireResponse_Item->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_QuestionnaireResponse_Item->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaireResponse_Item, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_QuestionnaireResponse_Item->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_QuestionnaireResponse_Item->modifierExtension = PushArray(arena, Extension, result_QuestionnaireResponse_Item->modifierExtension_count);
		for(int i = 0; i < result_QuestionnaireResponse_Item->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_QuestionnaireResponse_Item->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_linkId =  cJSON_GetObjectItem(questionnaireResponse_Item, "linkId");
	if(cjson_linkId)
	{
		result_QuestionnaireResponse_Item->linkId = Str8C(cJSON_GetStringValue(cjson_linkId));
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(questionnaireResponse_Item, "definition");
	if(cjson_definition)
	{
		result_QuestionnaireResponse_Item->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(questionnaireResponse_Item, "text");
	if(cjson_text)
	{
		result_QuestionnaireResponse_Item->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_answer =  cJSON_GetObjectItem(questionnaireResponse_Item, "answer");
	if(cjson_answer)
	{
		result_QuestionnaireResponse_Item->answer_count = cJSON_GetArraySize(cjson_answer);
		result_QuestionnaireResponse_Item->answer = PushArray(arena, QuestionnaireResponse_Item_Answer, result_QuestionnaireResponse_Item->answer_count);
		for(int i = 0; i < result_QuestionnaireResponse_Item->answer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_answer, i);
			result_QuestionnaireResponse_Item->answer[i] = *Deserialize_QuestionnaireResponse_Item_Answer(arena, internal);
		}

	}
	cJSON *cjson_item =  cJSON_GetObjectItem(questionnaireResponse_Item, "item");
	if(cjson_item)
	{
		result_QuestionnaireResponse_Item->item_count = cJSON_GetArraySize(cjson_item);
		result_QuestionnaireResponse_Item->item = PushArray(arena, QuestionnaireResponse_Item, result_QuestionnaireResponse_Item->item_count);
		for(int i = 0; i < result_QuestionnaireResponse_Item->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_QuestionnaireResponse_Item->item[i] = *Deserialize_QuestionnaireResponse_Item(arena, internal);
		}

	}
	return result_QuestionnaireResponse_Item;
}

QuestionnaireResponse_Item_Answer*
Deserialize_QuestionnaireResponse_Item_Answer(Arena *arena, cJSON *questionnaireResponse_Item_Answer)
{
	QuestionnaireResponse_Item_Answer *result_QuestionnaireResponse_Item_Answer = PushArray(arena, QuestionnaireResponse_Item_Answer, 1);
	result_QuestionnaireResponse_Item_Answer->resourceType = ResourceType::QuestionnaireResponse_Item_Answer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "id");
	if(cjson_id)
	{
		result_QuestionnaireResponse_Item_Answer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "extension");
	if(cjson_extension)
	{
		result_QuestionnaireResponse_Item_Answer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_QuestionnaireResponse_Item_Answer->extension = PushArray(arena, Extension, result_QuestionnaireResponse_Item_Answer->extension_count);
		for(int i = 0; i < result_QuestionnaireResponse_Item_Answer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_QuestionnaireResponse_Item_Answer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_QuestionnaireResponse_Item_Answer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_QuestionnaireResponse_Item_Answer->modifierExtension = PushArray(arena, Extension, result_QuestionnaireResponse_Item_Answer->modifierExtension_count);
		for(int i = 0; i < result_QuestionnaireResponse_Item_Answer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_QuestionnaireResponse_Item_Answer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueBoolean");
		result_QuestionnaireResponse_Item_Answer->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueDecimal");
		result_QuestionnaireResponse_Item_Answer->value.valueDecimal = cJSON_GetNumberValue(item);
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueInteger");
		result_QuestionnaireResponse_Item_Answer->value.valueInteger = Deserialize_Integer(arena, item);
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueDate");
		result_QuestionnaireResponse_Item_Answer->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueDateTime");
		result_QuestionnaireResponse_Item_Answer->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueTime");
		result_QuestionnaireResponse_Item_Answer->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueString");
		result_QuestionnaireResponse_Item_Answer->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueUri");
		result_QuestionnaireResponse_Item_Answer->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueAttachment");
		result_QuestionnaireResponse_Item_Answer->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueCoding");
		result_QuestionnaireResponse_Item_Answer->value.valueCoding = Deserialize_Coding(arena, item);
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueQuantity");
		result_QuestionnaireResponse_Item_Answer->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(questionnaireResponse_Item_Answer, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "valueReference");
		result_QuestionnaireResponse_Item_Answer->value.valueReference = Deserialize_Reference(arena, item);
		result_QuestionnaireResponse_Item_Answer->value_type = QuestionnaireResponse_Item_Answer::ValueType::Reference;
	}


	cJSON *cjson_item =  cJSON_GetObjectItem(questionnaireResponse_Item_Answer, "item");
	if(cjson_item)
	{
		result_QuestionnaireResponse_Item_Answer->item_count = cJSON_GetArraySize(cjson_item);
		result_QuestionnaireResponse_Item_Answer->item = PushArray(arena, QuestionnaireResponse_Item, result_QuestionnaireResponse_Item_Answer->item_count);
		for(int i = 0; i < result_QuestionnaireResponse_Item_Answer->item_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_item, i);
			result_QuestionnaireResponse_Item_Answer->item[i] = *Deserialize_QuestionnaireResponse_Item(arena, internal);
		}

	}
	return result_QuestionnaireResponse_Item_Answer;
}

RelatedPerson*
Deserialize_RelatedPerson(Arena *arena, cJSON *relatedPerson)
{
	RelatedPerson *result_RelatedPerson = PushArray(arena, RelatedPerson, 1);
	result_RelatedPerson->resourceType = ResourceType::RelatedPerson;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(relatedPerson, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(relatedPerson, "id");
	if(cjson_id)
	{
		result_RelatedPerson->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(relatedPerson, "meta");
	if(cjson_meta)
	{
		result_RelatedPerson->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(relatedPerson, "implicitRules");
	if(cjson_implicitRules)
	{
		result_RelatedPerson->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(relatedPerson, "language");
	if(cjson_language)
	{
		result_RelatedPerson->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(relatedPerson, "text");
	if(cjson_text)
	{
		result_RelatedPerson->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(relatedPerson, "contained");
	if(cjson_contained)
	{
		result_RelatedPerson->contained_count = cJSON_GetArraySize(cjson_contained);
		result_RelatedPerson->contained = PushArray(arena, Resource, result_RelatedPerson->contained_count);
		for(int i = 0; i < result_RelatedPerson->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_RelatedPerson->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(relatedPerson, "extension");
	if(cjson_extension)
	{
		result_RelatedPerson->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RelatedPerson->extension = PushArray(arena, Extension, result_RelatedPerson->extension_count);
		for(int i = 0; i < result_RelatedPerson->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RelatedPerson->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(relatedPerson, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RelatedPerson->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RelatedPerson->modifierExtension = PushArray(arena, Extension, result_RelatedPerson->modifierExtension_count);
		for(int i = 0; i < result_RelatedPerson->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RelatedPerson->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(relatedPerson, "identifier");
	if(cjson_identifier)
	{
		result_RelatedPerson->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_RelatedPerson->identifier = PushArray(arena, Identifier, result_RelatedPerson->identifier_count);
		for(int i = 0; i < result_RelatedPerson->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_RelatedPerson->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(relatedPerson, "active");
	if(cjson_active)
	{
		result_RelatedPerson->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(relatedPerson, "patient");
	if(cjson_patient)
	{
		result_RelatedPerson->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(relatedPerson, "relationship");
	if(cjson_relationship)
	{
		result_RelatedPerson->relationship_count = cJSON_GetArraySize(cjson_relationship);
		result_RelatedPerson->relationship = PushArray(arena, CodeableConcept, result_RelatedPerson->relationship_count);
		for(int i = 0; i < result_RelatedPerson->relationship_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relationship, i);
			result_RelatedPerson->relationship[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(relatedPerson, "name");
	if(cjson_name)
	{
		result_RelatedPerson->name_count = cJSON_GetArraySize(cjson_name);
		result_RelatedPerson->name = PushArray(arena, HumanName, result_RelatedPerson->name_count);
		for(int i = 0; i < result_RelatedPerson->name_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_name, i);
			result_RelatedPerson->name[i] = *Deserialize_HumanName(arena, internal);
		}

	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(relatedPerson, "telecom");
	if(cjson_telecom)
	{
		result_RelatedPerson->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_RelatedPerson->telecom = PushArray(arena, ContactPoint, result_RelatedPerson->telecom_count);
		for(int i = 0; i < result_RelatedPerson->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_RelatedPerson->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_gender =  cJSON_GetObjectItem(relatedPerson, "gender");
	if(cjson_gender)
	{
		result_RelatedPerson->gender = Str8C(cJSON_GetStringValue(cjson_gender));
	}
	cJSON *cjson_birthDate =  cJSON_GetObjectItem(relatedPerson, "birthDate");
	if(cjson_birthDate)
	{
		result_RelatedPerson->birthDate = Str8C(cJSON_GetStringValue(cjson_birthDate));
	}
	cJSON *cjson_address =  cJSON_GetObjectItem(relatedPerson, "address");
	if(cjson_address)
	{
		result_RelatedPerson->address_count = cJSON_GetArraySize(cjson_address);
		result_RelatedPerson->address = PushArray(arena, Address, result_RelatedPerson->address_count);
		for(int i = 0; i < result_RelatedPerson->address_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_address, i);
			result_RelatedPerson->address[i] = *Deserialize_Address(arena, internal);
		}

	}
	cJSON *cjson_photo =  cJSON_GetObjectItem(relatedPerson, "photo");
	if(cjson_photo)
	{
		result_RelatedPerson->photo_count = cJSON_GetArraySize(cjson_photo);
		result_RelatedPerson->photo = PushArray(arena, Attachment, result_RelatedPerson->photo_count);
		for(int i = 0; i < result_RelatedPerson->photo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_photo, i);
			result_RelatedPerson->photo[i] = *Deserialize_Attachment(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(relatedPerson, "period");
	if(cjson_period)
	{
		result_RelatedPerson->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_communication =  cJSON_GetObjectItem(relatedPerson, "communication");
	if(cjson_communication)
	{
		result_RelatedPerson->communication_count = cJSON_GetArraySize(cjson_communication);
		result_RelatedPerson->communication = PushArray(arena, RelatedPerson_Communication, result_RelatedPerson->communication_count);
		for(int i = 0; i < result_RelatedPerson->communication_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_communication, i);
			result_RelatedPerson->communication[i] = *Deserialize_RelatedPerson_Communication(arena, internal);
		}

	}
	return result_RelatedPerson;
}

RelatedPerson_Communication*
Deserialize_RelatedPerson_Communication(Arena *arena, cJSON *relatedPerson_Communication)
{
	RelatedPerson_Communication *result_RelatedPerson_Communication = PushArray(arena, RelatedPerson_Communication, 1);
	result_RelatedPerson_Communication->resourceType = ResourceType::RelatedPerson_Communication;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(relatedPerson_Communication, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(relatedPerson_Communication, "id");
	if(cjson_id)
	{
		result_RelatedPerson_Communication->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(relatedPerson_Communication, "extension");
	if(cjson_extension)
	{
		result_RelatedPerson_Communication->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RelatedPerson_Communication->extension = PushArray(arena, Extension, result_RelatedPerson_Communication->extension_count);
		for(int i = 0; i < result_RelatedPerson_Communication->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RelatedPerson_Communication->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(relatedPerson_Communication, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RelatedPerson_Communication->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RelatedPerson_Communication->modifierExtension = PushArray(arena, Extension, result_RelatedPerson_Communication->modifierExtension_count);
		for(int i = 0; i < result_RelatedPerson_Communication->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RelatedPerson_Communication->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_language =  cJSON_GetObjectItem(relatedPerson_Communication, "language");
	if(cjson_language)
	{
		result_RelatedPerson_Communication->language = Deserialize_CodeableConcept(arena, cjson_language);
	}
	cJSON *cjson_preferred =  cJSON_GetObjectItem(relatedPerson_Communication, "preferred");
	if(cjson_preferred)
	{
		result_RelatedPerson_Communication->preferred = (boolean)cJSON_IsTrue(cjson_preferred);
	}
	return result_RelatedPerson_Communication;
}

RequestGroup*
Deserialize_RequestGroup(Arena *arena, cJSON *requestGroup)
{
	RequestGroup *result_RequestGroup = PushArray(arena, RequestGroup, 1);
	result_RequestGroup->resourceType = ResourceType::RequestGroup;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(requestGroup, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(requestGroup, "id");
	if(cjson_id)
	{
		result_RequestGroup->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(requestGroup, "meta");
	if(cjson_meta)
	{
		result_RequestGroup->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(requestGroup, "implicitRules");
	if(cjson_implicitRules)
	{
		result_RequestGroup->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(requestGroup, "language");
	if(cjson_language)
	{
		result_RequestGroup->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(requestGroup, "text");
	if(cjson_text)
	{
		result_RequestGroup->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(requestGroup, "contained");
	if(cjson_contained)
	{
		result_RequestGroup->contained_count = cJSON_GetArraySize(cjson_contained);
		result_RequestGroup->contained = PushArray(arena, Resource, result_RequestGroup->contained_count);
		for(int i = 0; i < result_RequestGroup->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_RequestGroup->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(requestGroup, "extension");
	if(cjson_extension)
	{
		result_RequestGroup->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RequestGroup->extension = PushArray(arena, Extension, result_RequestGroup->extension_count);
		for(int i = 0; i < result_RequestGroup->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RequestGroup->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(requestGroup, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RequestGroup->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RequestGroup->modifierExtension = PushArray(arena, Extension, result_RequestGroup->modifierExtension_count);
		for(int i = 0; i < result_RequestGroup->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RequestGroup->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(requestGroup, "identifier");
	if(cjson_identifier)
	{
		result_RequestGroup->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_RequestGroup->identifier = PushArray(arena, Identifier, result_RequestGroup->identifier_count);
		for(int i = 0; i < result_RequestGroup->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_RequestGroup->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(requestGroup, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_RequestGroup->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_RequestGroup->instantiatesCanonical = PushArray(arena, fhir_canonical, result_RequestGroup->instantiatesCanonical_count);
		for(int i = 0; i < result_RequestGroup->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_RequestGroup->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(requestGroup, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_RequestGroup->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_RequestGroup->instantiatesUri = PushArray(arena, fhir_uri, result_RequestGroup->instantiatesUri_count);
		for(int i = 0; i < result_RequestGroup->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_RequestGroup->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(requestGroup, "basedOn");
	if(cjson_basedOn)
	{
		result_RequestGroup->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_RequestGroup->basedOn = PushArray(arena, Reference, result_RequestGroup->basedOn_count);
		for(int i = 0; i < result_RequestGroup->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_RequestGroup->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_replaces =  cJSON_GetObjectItem(requestGroup, "replaces");
	if(cjson_replaces)
	{
		result_RequestGroup->replaces_count = cJSON_GetArraySize(cjson_replaces);
		result_RequestGroup->replaces = PushArray(arena, Reference, result_RequestGroup->replaces_count);
		for(int i = 0; i < result_RequestGroup->replaces_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_replaces, i);
			result_RequestGroup->replaces[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_groupIdentifier =  cJSON_GetObjectItem(requestGroup, "groupIdentifier");
	if(cjson_groupIdentifier)
	{
		result_RequestGroup->groupIdentifier = Deserialize_Identifier(arena, cjson_groupIdentifier);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(requestGroup, "status");
	if(cjson_status)
	{
		result_RequestGroup->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(requestGroup, "intent");
	if(cjson_intent)
	{
		result_RequestGroup->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(requestGroup, "priority");
	if(cjson_priority)
	{
		result_RequestGroup->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(requestGroup, "code");
	if(cjson_code)
	{
		result_RequestGroup->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(requestGroup, "subject");
	if(cjson_subject)
	{
		result_RequestGroup->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(requestGroup, "encounter");
	if(cjson_encounter)
	{
		result_RequestGroup->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_authoredOn =  cJSON_GetObjectItem(requestGroup, "authoredOn");
	if(cjson_authoredOn)
	{
		result_RequestGroup->authoredOn = Str8C(cJSON_GetStringValue(cjson_authoredOn));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(requestGroup, "author");
	if(cjson_author)
	{
		result_RequestGroup->author = Deserialize_Reference(arena, cjson_author);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(requestGroup, "reasonCode");
	if(cjson_reasonCode)
	{
		result_RequestGroup->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_RequestGroup->reasonCode = PushArray(arena, CodeableConcept, result_RequestGroup->reasonCode_count);
		for(int i = 0; i < result_RequestGroup->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_RequestGroup->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(requestGroup, "reasonReference");
	if(cjson_reasonReference)
	{
		result_RequestGroup->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_RequestGroup->reasonReference = PushArray(arena, Reference, result_RequestGroup->reasonReference_count);
		for(int i = 0; i < result_RequestGroup->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_RequestGroup->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(requestGroup, "note");
	if(cjson_note)
	{
		result_RequestGroup->note_count = cJSON_GetArraySize(cjson_note);
		result_RequestGroup->note = PushArray(arena, Annotation, result_RequestGroup->note_count);
		for(int i = 0; i < result_RequestGroup->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_RequestGroup->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(requestGroup, "action");
	if(cjson_action)
	{
		result_RequestGroup->action_count = cJSON_GetArraySize(cjson_action);
		result_RequestGroup->action = PushArray(arena, RequestGroup_Action, result_RequestGroup->action_count);
		for(int i = 0; i < result_RequestGroup->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_RequestGroup->action[i] = *Deserialize_RequestGroup_Action(arena, internal);
		}

	}
	return result_RequestGroup;
}

RequestGroup_Action*
Deserialize_RequestGroup_Action(Arena *arena, cJSON *requestGroup_Action)
{
	RequestGroup_Action *result_RequestGroup_Action = PushArray(arena, RequestGroup_Action, 1);
	result_RequestGroup_Action->resourceType = ResourceType::RequestGroup_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(requestGroup_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(requestGroup_Action, "id");
	if(cjson_id)
	{
		result_RequestGroup_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(requestGroup_Action, "extension");
	if(cjson_extension)
	{
		result_RequestGroup_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RequestGroup_Action->extension = PushArray(arena, Extension, result_RequestGroup_Action->extension_count);
		for(int i = 0; i < result_RequestGroup_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RequestGroup_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(requestGroup_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RequestGroup_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RequestGroup_Action->modifierExtension = PushArray(arena, Extension, result_RequestGroup_Action->modifierExtension_count);
		for(int i = 0; i < result_RequestGroup_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RequestGroup_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_prefix =  cJSON_GetObjectItem(requestGroup_Action, "prefix");
	if(cjson_prefix)
	{
		result_RequestGroup_Action->prefix = Str8C(cJSON_GetStringValue(cjson_prefix));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(requestGroup_Action, "title");
	if(cjson_title)
	{
		result_RequestGroup_Action->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(requestGroup_Action, "description");
	if(cjson_description)
	{
		result_RequestGroup_Action->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_textEquivalent =  cJSON_GetObjectItem(requestGroup_Action, "textEquivalent");
	if(cjson_textEquivalent)
	{
		result_RequestGroup_Action->textEquivalent = Str8C(cJSON_GetStringValue(cjson_textEquivalent));
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(requestGroup_Action, "priority");
	if(cjson_priority)
	{
		result_RequestGroup_Action->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(requestGroup_Action, "code");
	if(cjson_code)
	{
		result_RequestGroup_Action->code_count = cJSON_GetArraySize(cjson_code);
		result_RequestGroup_Action->code = PushArray(arena, CodeableConcept, result_RequestGroup_Action->code_count);
		for(int i = 0; i < result_RequestGroup_Action->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_RequestGroup_Action->code[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(requestGroup_Action, "documentation");
	if(cjson_documentation)
	{
		result_RequestGroup_Action->documentation_count = cJSON_GetArraySize(cjson_documentation);
		result_RequestGroup_Action->documentation = PushArray(arena, RelatedArtifact, result_RequestGroup_Action->documentation_count);
		for(int i = 0; i < result_RequestGroup_Action->documentation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_documentation, i);
			result_RequestGroup_Action->documentation[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(requestGroup_Action, "condition");
	if(cjson_condition)
	{
		result_RequestGroup_Action->condition_count = cJSON_GetArraySize(cjson_condition);
		result_RequestGroup_Action->condition = PushArray(arena, RequestGroup_Action_Condition, result_RequestGroup_Action->condition_count);
		for(int i = 0; i < result_RequestGroup_Action->condition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_condition, i);
			result_RequestGroup_Action->condition[i] = *Deserialize_RequestGroup_Action_Condition(arena, internal);
		}

	}
	cJSON *cjson_relatedAction =  cJSON_GetObjectItem(requestGroup_Action, "relatedAction");
	if(cjson_relatedAction)
	{
		result_RequestGroup_Action->relatedAction_count = cJSON_GetArraySize(cjson_relatedAction);
		result_RequestGroup_Action->relatedAction = PushArray(arena, RequestGroup_Action_RelatedAction, result_RequestGroup_Action->relatedAction_count);
		for(int i = 0; i < result_RequestGroup_Action->relatedAction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedAction, i);
			result_RequestGroup_Action->relatedAction[i] = *Deserialize_RequestGroup_Action_RelatedAction(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(requestGroup_Action, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action, "valueDateTime");
		result_RequestGroup_Action->timing.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_RequestGroup_Action->timing_type = RequestGroup_Action::TimingType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(requestGroup_Action, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action, "valueAge");
		result_RequestGroup_Action->timing.valueAge = Deserialize_Age(arena, item);
		result_RequestGroup_Action->timing_type = RequestGroup_Action::TimingType::Age;
	}
	else if((bool)cJSON_HasObjectItem(requestGroup_Action, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action, "valuePeriod");
		result_RequestGroup_Action->timing.valuePeriod = Deserialize_Period(arena, item);
		result_RequestGroup_Action->timing_type = RequestGroup_Action::TimingType::Period;
	}
	else if((bool)cJSON_HasObjectItem(requestGroup_Action, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action, "valueDuration");
		result_RequestGroup_Action->timing.valueDuration = Deserialize_Duration(arena, item);
		result_RequestGroup_Action->timing_type = RequestGroup_Action::TimingType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(requestGroup_Action, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action, "valueRange");
		result_RequestGroup_Action->timing.valueRange = Deserialize_Range(arena, item);
		result_RequestGroup_Action->timing_type = RequestGroup_Action::TimingType::Range;
	}
	else if((bool)cJSON_HasObjectItem(requestGroup_Action, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action, "valueTiming");
		result_RequestGroup_Action->timing.valueTiming = Deserialize_Timing(arena, item);
		result_RequestGroup_Action->timing_type = RequestGroup_Action::TimingType::Timing;
	}


	cJSON *cjson_participant =  cJSON_GetObjectItem(requestGroup_Action, "participant");
	if(cjson_participant)
	{
		result_RequestGroup_Action->participant_count = cJSON_GetArraySize(cjson_participant);
		result_RequestGroup_Action->participant = PushArray(arena, Reference, result_RequestGroup_Action->participant_count);
		for(int i = 0; i < result_RequestGroup_Action->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_RequestGroup_Action->participant[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(requestGroup_Action, "type");
	if(cjson_type)
	{
		result_RequestGroup_Action->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_groupingBehavior =  cJSON_GetObjectItem(requestGroup_Action, "groupingBehavior");
	if(cjson_groupingBehavior)
	{
		result_RequestGroup_Action->groupingBehavior = Str8C(cJSON_GetStringValue(cjson_groupingBehavior));
	}
	cJSON *cjson_selectionBehavior =  cJSON_GetObjectItem(requestGroup_Action, "selectionBehavior");
	if(cjson_selectionBehavior)
	{
		result_RequestGroup_Action->selectionBehavior = Str8C(cJSON_GetStringValue(cjson_selectionBehavior));
	}
	cJSON *cjson_requiredBehavior =  cJSON_GetObjectItem(requestGroup_Action, "requiredBehavior");
	if(cjson_requiredBehavior)
	{
		result_RequestGroup_Action->requiredBehavior = Str8C(cJSON_GetStringValue(cjson_requiredBehavior));
	}
	cJSON *cjson_precheckBehavior =  cJSON_GetObjectItem(requestGroup_Action, "precheckBehavior");
	if(cjson_precheckBehavior)
	{
		result_RequestGroup_Action->precheckBehavior = Str8C(cJSON_GetStringValue(cjson_precheckBehavior));
	}
	cJSON *cjson_cardinalityBehavior =  cJSON_GetObjectItem(requestGroup_Action, "cardinalityBehavior");
	if(cjson_cardinalityBehavior)
	{
		result_RequestGroup_Action->cardinalityBehavior = Str8C(cJSON_GetStringValue(cjson_cardinalityBehavior));
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(requestGroup_Action, "resource");
	if(cjson_resource)
	{
		result_RequestGroup_Action->resource = Deserialize_Reference(arena, cjson_resource);
	}
	cJSON *cjson_action =  cJSON_GetObjectItem(requestGroup_Action, "action");
	if(cjson_action)
	{
		result_RequestGroup_Action->action_count = cJSON_GetArraySize(cjson_action);
		result_RequestGroup_Action->action = PushArray(arena, RequestGroup_Action, result_RequestGroup_Action->action_count);
		for(int i = 0; i < result_RequestGroup_Action->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_RequestGroup_Action->action[i] = *Deserialize_RequestGroup_Action(arena, internal);
		}

	}
	return result_RequestGroup_Action;
}

RequestGroup_Action_Condition*
Deserialize_RequestGroup_Action_Condition(Arena *arena, cJSON *requestGroup_Action_Condition)
{
	RequestGroup_Action_Condition *result_RequestGroup_Action_Condition = PushArray(arena, RequestGroup_Action_Condition, 1);
	result_RequestGroup_Action_Condition->resourceType = ResourceType::RequestGroup_Action_Condition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(requestGroup_Action_Condition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(requestGroup_Action_Condition, "id");
	if(cjson_id)
	{
		result_RequestGroup_Action_Condition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(requestGroup_Action_Condition, "extension");
	if(cjson_extension)
	{
		result_RequestGroup_Action_Condition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RequestGroup_Action_Condition->extension = PushArray(arena, Extension, result_RequestGroup_Action_Condition->extension_count);
		for(int i = 0; i < result_RequestGroup_Action_Condition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RequestGroup_Action_Condition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(requestGroup_Action_Condition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RequestGroup_Action_Condition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RequestGroup_Action_Condition->modifierExtension = PushArray(arena, Extension, result_RequestGroup_Action_Condition->modifierExtension_count);
		for(int i = 0; i < result_RequestGroup_Action_Condition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RequestGroup_Action_Condition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(requestGroup_Action_Condition, "kind");
	if(cjson_kind)
	{
		result_RequestGroup_Action_Condition->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(requestGroup_Action_Condition, "expression");
	if(cjson_expression)
	{
		result_RequestGroup_Action_Condition->expression = Deserialize_Expression(arena, cjson_expression);
	}
	return result_RequestGroup_Action_Condition;
}

RequestGroup_Action_RelatedAction*
Deserialize_RequestGroup_Action_RelatedAction(Arena *arena, cJSON *requestGroup_Action_RelatedAction)
{
	RequestGroup_Action_RelatedAction *result_RequestGroup_Action_RelatedAction = PushArray(arena, RequestGroup_Action_RelatedAction, 1);
	result_RequestGroup_Action_RelatedAction->resourceType = ResourceType::RequestGroup_Action_RelatedAction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "id");
	if(cjson_id)
	{
		result_RequestGroup_Action_RelatedAction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "extension");
	if(cjson_extension)
	{
		result_RequestGroup_Action_RelatedAction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RequestGroup_Action_RelatedAction->extension = PushArray(arena, Extension, result_RequestGroup_Action_RelatedAction->extension_count);
		for(int i = 0; i < result_RequestGroup_Action_RelatedAction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RequestGroup_Action_RelatedAction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RequestGroup_Action_RelatedAction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RequestGroup_Action_RelatedAction->modifierExtension = PushArray(arena, Extension, result_RequestGroup_Action_RelatedAction->modifierExtension_count);
		for(int i = 0; i < result_RequestGroup_Action_RelatedAction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RequestGroup_Action_RelatedAction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_actionId =  cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "actionId");
	if(cjson_actionId)
	{
		result_RequestGroup_Action_RelatedAction->actionId = Str8C(cJSON_GetStringValue(cjson_actionId));
	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "relationship");
	if(cjson_relationship)
	{
		result_RequestGroup_Action_RelatedAction->relationship = Str8C(cJSON_GetStringValue(cjson_relationship));
	}
	if((bool)cJSON_HasObjectItem(requestGroup_Action_RelatedAction, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "valueDuration");
		result_RequestGroup_Action_RelatedAction->offset.valueDuration = Deserialize_Duration(arena, item);
		result_RequestGroup_Action_RelatedAction->offset_type = RequestGroup_Action_RelatedAction::OffsetType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(requestGroup_Action_RelatedAction, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(requestGroup_Action_RelatedAction, "valueRange");
		result_RequestGroup_Action_RelatedAction->offset.valueRange = Deserialize_Range(arena, item);
		result_RequestGroup_Action_RelatedAction->offset_type = RequestGroup_Action_RelatedAction::OffsetType::Range;
	}


	return result_RequestGroup_Action_RelatedAction;
}

ResearchDefinition*
Deserialize_ResearchDefinition(Arena *arena, cJSON *researchDefinition)
{
	ResearchDefinition *result_ResearchDefinition = PushArray(arena, ResearchDefinition, 1);
	result_ResearchDefinition->resourceType = ResourceType::ResearchDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(researchDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(researchDefinition, "id");
	if(cjson_id)
	{
		result_ResearchDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(researchDefinition, "meta");
	if(cjson_meta)
	{
		result_ResearchDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(researchDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ResearchDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(researchDefinition, "language");
	if(cjson_language)
	{
		result_ResearchDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(researchDefinition, "text");
	if(cjson_text)
	{
		result_ResearchDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(researchDefinition, "contained");
	if(cjson_contained)
	{
		result_ResearchDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ResearchDefinition->contained = PushArray(arena, Resource, result_ResearchDefinition->contained_count);
		for(int i = 0; i < result_ResearchDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ResearchDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(researchDefinition, "extension");
	if(cjson_extension)
	{
		result_ResearchDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ResearchDefinition->extension = PushArray(arena, Extension, result_ResearchDefinition->extension_count);
		for(int i = 0; i < result_ResearchDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ResearchDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(researchDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ResearchDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ResearchDefinition->modifierExtension = PushArray(arena, Extension, result_ResearchDefinition->modifierExtension_count);
		for(int i = 0; i < result_ResearchDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ResearchDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(researchDefinition, "url");
	if(cjson_url)
	{
		result_ResearchDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(researchDefinition, "identifier");
	if(cjson_identifier)
	{
		result_ResearchDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ResearchDefinition->identifier = PushArray(arena, Identifier, result_ResearchDefinition->identifier_count);
		for(int i = 0; i < result_ResearchDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ResearchDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(researchDefinition, "version");
	if(cjson_version)
	{
		result_ResearchDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(researchDefinition, "name");
	if(cjson_name)
	{
		result_ResearchDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(researchDefinition, "title");
	if(cjson_title)
	{
		result_ResearchDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_shortTitle =  cJSON_GetObjectItem(researchDefinition, "shortTitle");
	if(cjson_shortTitle)
	{
		result_ResearchDefinition->shortTitle = Str8C(cJSON_GetStringValue(cjson_shortTitle));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(researchDefinition, "subtitle");
	if(cjson_subtitle)
	{
		result_ResearchDefinition->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(researchDefinition, "status");
	if(cjson_status)
	{
		result_ResearchDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(researchDefinition, "experimental");
	if(cjson_experimental)
	{
		result_ResearchDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	if((bool)cJSON_HasObjectItem(researchDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchDefinition, "valueCodeableConcept");
		result_ResearchDefinition->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ResearchDefinition->subject_type = ResearchDefinition::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(researchDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchDefinition, "valueReference");
		result_ResearchDefinition->subject.valueReference = Deserialize_Reference(arena, item);
		result_ResearchDefinition->subject_type = ResearchDefinition::SubjectType::Reference;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(researchDefinition, "date");
	if(cjson_date)
	{
		result_ResearchDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(researchDefinition, "publisher");
	if(cjson_publisher)
	{
		result_ResearchDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(researchDefinition, "contact");
	if(cjson_contact)
	{
		result_ResearchDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ResearchDefinition->contact = PushArray(arena, ContactDetail, result_ResearchDefinition->contact_count);
		for(int i = 0; i < result_ResearchDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ResearchDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(researchDefinition, "description");
	if(cjson_description)
	{
		result_ResearchDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(researchDefinition, "comment");
	if(cjson_comment)
	{
		result_ResearchDefinition->comment_count = cJSON_GetArraySize(cjson_comment);
		result_ResearchDefinition->comment = PushArray(arena, fhir_string, result_ResearchDefinition->comment_count);
		for(int i = 0; i < result_ResearchDefinition->comment_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_comment, i);
			result_ResearchDefinition->comment[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(researchDefinition, "useContext");
	if(cjson_useContext)
	{
		result_ResearchDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ResearchDefinition->useContext = PushArray(arena, UsageContext, result_ResearchDefinition->useContext_count);
		for(int i = 0; i < result_ResearchDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ResearchDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(researchDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ResearchDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ResearchDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_ResearchDefinition->jurisdiction_count);
		for(int i = 0; i < result_ResearchDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ResearchDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(researchDefinition, "purpose");
	if(cjson_purpose)
	{
		result_ResearchDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(researchDefinition, "usage");
	if(cjson_usage)
	{
		result_ResearchDefinition->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(researchDefinition, "copyright");
	if(cjson_copyright)
	{
		result_ResearchDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(researchDefinition, "approvalDate");
	if(cjson_approvalDate)
	{
		result_ResearchDefinition->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(researchDefinition, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_ResearchDefinition->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(researchDefinition, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_ResearchDefinition->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(researchDefinition, "topic");
	if(cjson_topic)
	{
		result_ResearchDefinition->topic_count = cJSON_GetArraySize(cjson_topic);
		result_ResearchDefinition->topic = PushArray(arena, CodeableConcept, result_ResearchDefinition->topic_count);
		for(int i = 0; i < result_ResearchDefinition->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_ResearchDefinition->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(researchDefinition, "author");
	if(cjson_author)
	{
		result_ResearchDefinition->author_count = cJSON_GetArraySize(cjson_author);
		result_ResearchDefinition->author = PushArray(arena, ContactDetail, result_ResearchDefinition->author_count);
		for(int i = 0; i < result_ResearchDefinition->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_ResearchDefinition->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(researchDefinition, "editor");
	if(cjson_editor)
	{
		result_ResearchDefinition->editor_count = cJSON_GetArraySize(cjson_editor);
		result_ResearchDefinition->editor = PushArray(arena, ContactDetail, result_ResearchDefinition->editor_count);
		for(int i = 0; i < result_ResearchDefinition->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_ResearchDefinition->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(researchDefinition, "reviewer");
	if(cjson_reviewer)
	{
		result_ResearchDefinition->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_ResearchDefinition->reviewer = PushArray(arena, ContactDetail, result_ResearchDefinition->reviewer_count);
		for(int i = 0; i < result_ResearchDefinition->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_ResearchDefinition->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(researchDefinition, "endorser");
	if(cjson_endorser)
	{
		result_ResearchDefinition->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_ResearchDefinition->endorser = PushArray(arena, ContactDetail, result_ResearchDefinition->endorser_count);
		for(int i = 0; i < result_ResearchDefinition->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_ResearchDefinition->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(researchDefinition, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_ResearchDefinition->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_ResearchDefinition->relatedArtifact = PushArray(arena, RelatedArtifact, result_ResearchDefinition->relatedArtifact_count);
		for(int i = 0; i < result_ResearchDefinition->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_ResearchDefinition->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_library =  cJSON_GetObjectItem(researchDefinition, "library");
	if(cjson_library)
	{
		result_ResearchDefinition->library_count = cJSON_GetArraySize(cjson_library);
		result_ResearchDefinition->library = PushArray(arena, fhir_canonical, result_ResearchDefinition->library_count);
		for(int i = 0; i < result_ResearchDefinition->library_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_library, i);
			result_ResearchDefinition->library[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_population =  cJSON_GetObjectItem(researchDefinition, "population");
	if(cjson_population)
	{
		result_ResearchDefinition->population = Deserialize_Reference(arena, cjson_population);
	}
	cJSON *cjson_exposure =  cJSON_GetObjectItem(researchDefinition, "exposure");
	if(cjson_exposure)
	{
		result_ResearchDefinition->exposure = Deserialize_Reference(arena, cjson_exposure);
	}
	cJSON *cjson_exposureAlternative =  cJSON_GetObjectItem(researchDefinition, "exposureAlternative");
	if(cjson_exposureAlternative)
	{
		result_ResearchDefinition->exposureAlternative = Deserialize_Reference(arena, cjson_exposureAlternative);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(researchDefinition, "outcome");
	if(cjson_outcome)
	{
		result_ResearchDefinition->outcome = Deserialize_Reference(arena, cjson_outcome);
	}
	return result_ResearchDefinition;
}

ResearchElementDefinition*
Deserialize_ResearchElementDefinition(Arena *arena, cJSON *researchElementDefinition)
{
	ResearchElementDefinition *result_ResearchElementDefinition = PushArray(arena, ResearchElementDefinition, 1);
	result_ResearchElementDefinition->resourceType = ResourceType::ResearchElementDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(researchElementDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(researchElementDefinition, "id");
	if(cjson_id)
	{
		result_ResearchElementDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(researchElementDefinition, "meta");
	if(cjson_meta)
	{
		result_ResearchElementDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(researchElementDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ResearchElementDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(researchElementDefinition, "language");
	if(cjson_language)
	{
		result_ResearchElementDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(researchElementDefinition, "text");
	if(cjson_text)
	{
		result_ResearchElementDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(researchElementDefinition, "contained");
	if(cjson_contained)
	{
		result_ResearchElementDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ResearchElementDefinition->contained = PushArray(arena, Resource, result_ResearchElementDefinition->contained_count);
		for(int i = 0; i < result_ResearchElementDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ResearchElementDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(researchElementDefinition, "extension");
	if(cjson_extension)
	{
		result_ResearchElementDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ResearchElementDefinition->extension = PushArray(arena, Extension, result_ResearchElementDefinition->extension_count);
		for(int i = 0; i < result_ResearchElementDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ResearchElementDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(researchElementDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ResearchElementDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ResearchElementDefinition->modifierExtension = PushArray(arena, Extension, result_ResearchElementDefinition->modifierExtension_count);
		for(int i = 0; i < result_ResearchElementDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ResearchElementDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(researchElementDefinition, "url");
	if(cjson_url)
	{
		result_ResearchElementDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(researchElementDefinition, "identifier");
	if(cjson_identifier)
	{
		result_ResearchElementDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ResearchElementDefinition->identifier = PushArray(arena, Identifier, result_ResearchElementDefinition->identifier_count);
		for(int i = 0; i < result_ResearchElementDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ResearchElementDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(researchElementDefinition, "version");
	if(cjson_version)
	{
		result_ResearchElementDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(researchElementDefinition, "name");
	if(cjson_name)
	{
		result_ResearchElementDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(researchElementDefinition, "title");
	if(cjson_title)
	{
		result_ResearchElementDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_shortTitle =  cJSON_GetObjectItem(researchElementDefinition, "shortTitle");
	if(cjson_shortTitle)
	{
		result_ResearchElementDefinition->shortTitle = Str8C(cJSON_GetStringValue(cjson_shortTitle));
	}
	cJSON *cjson_subtitle =  cJSON_GetObjectItem(researchElementDefinition, "subtitle");
	if(cjson_subtitle)
	{
		result_ResearchElementDefinition->subtitle = Str8C(cJSON_GetStringValue(cjson_subtitle));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(researchElementDefinition, "status");
	if(cjson_status)
	{
		result_ResearchElementDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(researchElementDefinition, "experimental");
	if(cjson_experimental)
	{
		result_ResearchElementDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	if((bool)cJSON_HasObjectItem(researchElementDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition, "valueCodeableConcept");
		result_ResearchElementDefinition->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ResearchElementDefinition->subject_type = ResearchElementDefinition::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition, "valueReference");
		result_ResearchElementDefinition->subject.valueReference = Deserialize_Reference(arena, item);
		result_ResearchElementDefinition->subject_type = ResearchElementDefinition::SubjectType::Reference;
	}


	cJSON *cjson_date =  cJSON_GetObjectItem(researchElementDefinition, "date");
	if(cjson_date)
	{
		result_ResearchElementDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(researchElementDefinition, "publisher");
	if(cjson_publisher)
	{
		result_ResearchElementDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(researchElementDefinition, "contact");
	if(cjson_contact)
	{
		result_ResearchElementDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ResearchElementDefinition->contact = PushArray(arena, ContactDetail, result_ResearchElementDefinition->contact_count);
		for(int i = 0; i < result_ResearchElementDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ResearchElementDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(researchElementDefinition, "description");
	if(cjson_description)
	{
		result_ResearchElementDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(researchElementDefinition, "comment");
	if(cjson_comment)
	{
		result_ResearchElementDefinition->comment_count = cJSON_GetArraySize(cjson_comment);
		result_ResearchElementDefinition->comment = PushArray(arena, fhir_string, result_ResearchElementDefinition->comment_count);
		for(int i = 0; i < result_ResearchElementDefinition->comment_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_comment, i);
			result_ResearchElementDefinition->comment[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(researchElementDefinition, "useContext");
	if(cjson_useContext)
	{
		result_ResearchElementDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ResearchElementDefinition->useContext = PushArray(arena, UsageContext, result_ResearchElementDefinition->useContext_count);
		for(int i = 0; i < result_ResearchElementDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ResearchElementDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(researchElementDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ResearchElementDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ResearchElementDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_ResearchElementDefinition->jurisdiction_count);
		for(int i = 0; i < result_ResearchElementDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ResearchElementDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(researchElementDefinition, "purpose");
	if(cjson_purpose)
	{
		result_ResearchElementDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_usage =  cJSON_GetObjectItem(researchElementDefinition, "usage");
	if(cjson_usage)
	{
		result_ResearchElementDefinition->usage = Str8C(cJSON_GetStringValue(cjson_usage));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(researchElementDefinition, "copyright");
	if(cjson_copyright)
	{
		result_ResearchElementDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(researchElementDefinition, "approvalDate");
	if(cjson_approvalDate)
	{
		result_ResearchElementDefinition->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(researchElementDefinition, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_ResearchElementDefinition->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(researchElementDefinition, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_ResearchElementDefinition->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(researchElementDefinition, "topic");
	if(cjson_topic)
	{
		result_ResearchElementDefinition->topic_count = cJSON_GetArraySize(cjson_topic);
		result_ResearchElementDefinition->topic = PushArray(arena, CodeableConcept, result_ResearchElementDefinition->topic_count);
		for(int i = 0; i < result_ResearchElementDefinition->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_ResearchElementDefinition->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(researchElementDefinition, "author");
	if(cjson_author)
	{
		result_ResearchElementDefinition->author_count = cJSON_GetArraySize(cjson_author);
		result_ResearchElementDefinition->author = PushArray(arena, ContactDetail, result_ResearchElementDefinition->author_count);
		for(int i = 0; i < result_ResearchElementDefinition->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_ResearchElementDefinition->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(researchElementDefinition, "editor");
	if(cjson_editor)
	{
		result_ResearchElementDefinition->editor_count = cJSON_GetArraySize(cjson_editor);
		result_ResearchElementDefinition->editor = PushArray(arena, ContactDetail, result_ResearchElementDefinition->editor_count);
		for(int i = 0; i < result_ResearchElementDefinition->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_ResearchElementDefinition->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(researchElementDefinition, "reviewer");
	if(cjson_reviewer)
	{
		result_ResearchElementDefinition->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_ResearchElementDefinition->reviewer = PushArray(arena, ContactDetail, result_ResearchElementDefinition->reviewer_count);
		for(int i = 0; i < result_ResearchElementDefinition->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_ResearchElementDefinition->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(researchElementDefinition, "endorser");
	if(cjson_endorser)
	{
		result_ResearchElementDefinition->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_ResearchElementDefinition->endorser = PushArray(arena, ContactDetail, result_ResearchElementDefinition->endorser_count);
		for(int i = 0; i < result_ResearchElementDefinition->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_ResearchElementDefinition->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(researchElementDefinition, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_ResearchElementDefinition->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_ResearchElementDefinition->relatedArtifact = PushArray(arena, RelatedArtifact, result_ResearchElementDefinition->relatedArtifact_count);
		for(int i = 0; i < result_ResearchElementDefinition->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_ResearchElementDefinition->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_library =  cJSON_GetObjectItem(researchElementDefinition, "library");
	if(cjson_library)
	{
		result_ResearchElementDefinition->library_count = cJSON_GetArraySize(cjson_library);
		result_ResearchElementDefinition->library = PushArray(arena, fhir_canonical, result_ResearchElementDefinition->library_count);
		for(int i = 0; i < result_ResearchElementDefinition->library_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_library, i);
			result_ResearchElementDefinition->library[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(researchElementDefinition, "type");
	if(cjson_type)
	{
		result_ResearchElementDefinition->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_variableType =  cJSON_GetObjectItem(researchElementDefinition, "variableType");
	if(cjson_variableType)
	{
		result_ResearchElementDefinition->variableType = Str8C(cJSON_GetStringValue(cjson_variableType));
	}
	cJSON *cjson_characteristic =  cJSON_GetObjectItem(researchElementDefinition, "characteristic");
	if(cjson_characteristic)
	{
		result_ResearchElementDefinition->characteristic_count = cJSON_GetArraySize(cjson_characteristic);
		result_ResearchElementDefinition->characteristic = PushArray(arena, ResearchElementDefinition_Characteristic, result_ResearchElementDefinition->characteristic_count);
		for(int i = 0; i < result_ResearchElementDefinition->characteristic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_characteristic, i);
			result_ResearchElementDefinition->characteristic[i] = *Deserialize_ResearchElementDefinition_Characteristic(arena, internal);
		}

	}
	return result_ResearchElementDefinition;
}

ResearchElementDefinition_Characteristic*
Deserialize_ResearchElementDefinition_Characteristic(Arena *arena, cJSON *researchElementDefinition_Characteristic)
{
	ResearchElementDefinition_Characteristic *result_ResearchElementDefinition_Characteristic = PushArray(arena, ResearchElementDefinition_Characteristic, 1);
	result_ResearchElementDefinition_Characteristic->resourceType = ResourceType::ResearchElementDefinition_Characteristic;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "id");
	if(cjson_id)
	{
		result_ResearchElementDefinition_Characteristic->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "extension");
	if(cjson_extension)
	{
		result_ResearchElementDefinition_Characteristic->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ResearchElementDefinition_Characteristic->extension = PushArray(arena, Extension, result_ResearchElementDefinition_Characteristic->extension_count);
		for(int i = 0; i < result_ResearchElementDefinition_Characteristic->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ResearchElementDefinition_Characteristic->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ResearchElementDefinition_Characteristic->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ResearchElementDefinition_Characteristic->modifierExtension = PushArray(arena, Extension, result_ResearchElementDefinition_Characteristic->modifierExtension_count);
		for(int i = 0; i < result_ResearchElementDefinition_Characteristic->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ResearchElementDefinition_Characteristic->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueCodeableConcept");
		result_ResearchElementDefinition_Characteristic->definition.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ResearchElementDefinition_Characteristic->definition_type = ResearchElementDefinition_Characteristic::DefinitionType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueCanonical");
		result_ResearchElementDefinition_Characteristic->definition.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ResearchElementDefinition_Characteristic->definition_type = ResearchElementDefinition_Characteristic::DefinitionType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueExpression");
		result_ResearchElementDefinition_Characteristic->definition.valueExpression = Deserialize_Expression(arena, item);
		result_ResearchElementDefinition_Characteristic->definition_type = ResearchElementDefinition_Characteristic::DefinitionType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueDataRequirement");
		result_ResearchElementDefinition_Characteristic->definition.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_ResearchElementDefinition_Characteristic->definition_type = ResearchElementDefinition_Characteristic::DefinitionType::DataRequirement;
	}


	cJSON *cjson_usageContext =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "usageContext");
	if(cjson_usageContext)
	{
		result_ResearchElementDefinition_Characteristic->usageContext_count = cJSON_GetArraySize(cjson_usageContext);
		result_ResearchElementDefinition_Characteristic->usageContext = PushArray(arena, UsageContext, result_ResearchElementDefinition_Characteristic->usageContext_count);
		for(int i = 0; i < result_ResearchElementDefinition_Characteristic->usageContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_usageContext, i);
			result_ResearchElementDefinition_Characteristic->usageContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_exclude =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "exclude");
	if(cjson_exclude)
	{
		result_ResearchElementDefinition_Characteristic->exclude = (boolean)cJSON_IsTrue(cjson_exclude);
	}
	cJSON *cjson_unitOfMeasure =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "unitOfMeasure");
	if(cjson_unitOfMeasure)
	{
		result_ResearchElementDefinition_Characteristic->unitOfMeasure = Deserialize_CodeableConcept(arena, cjson_unitOfMeasure);
	}
	cJSON *cjson_studyEffectiveDescription =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "studyEffectiveDescription");
	if(cjson_studyEffectiveDescription)
	{
		result_ResearchElementDefinition_Characteristic->studyEffectiveDescription = Str8C(cJSON_GetStringValue(cjson_studyEffectiveDescription));
	}
	if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueDateTime");
		result_ResearchElementDefinition_Characteristic->studyEffective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ResearchElementDefinition_Characteristic->studyEffective_type = ResearchElementDefinition_Characteristic::StudyEffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valuePeriod");
		result_ResearchElementDefinition_Characteristic->studyEffective.valuePeriod = Deserialize_Period(arena, item);
		result_ResearchElementDefinition_Characteristic->studyEffective_type = ResearchElementDefinition_Characteristic::StudyEffectiveType::Period;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueDuration");
		result_ResearchElementDefinition_Characteristic->studyEffective.valueDuration = Deserialize_Duration(arena, item);
		result_ResearchElementDefinition_Characteristic->studyEffective_type = ResearchElementDefinition_Characteristic::StudyEffectiveType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueTiming");
		result_ResearchElementDefinition_Characteristic->studyEffective.valueTiming = Deserialize_Timing(arena, item);
		result_ResearchElementDefinition_Characteristic->studyEffective_type = ResearchElementDefinition_Characteristic::StudyEffectiveType::Timing;
	}


	cJSON *cjson_studyEffectiveTimeFromStart =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "studyEffectiveTimeFromStart");
	if(cjson_studyEffectiveTimeFromStart)
	{
		result_ResearchElementDefinition_Characteristic->studyEffectiveTimeFromStart = Deserialize_Duration(arena, cjson_studyEffectiveTimeFromStart);
	}
	cJSON *cjson_studyEffectiveGroupMeasure =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "studyEffectiveGroupMeasure");
	if(cjson_studyEffectiveGroupMeasure)
	{
		result_ResearchElementDefinition_Characteristic->studyEffectiveGroupMeasure = Str8C(cJSON_GetStringValue(cjson_studyEffectiveGroupMeasure));
	}
	cJSON *cjson_participantEffectiveDescription =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "participantEffectiveDescription");
	if(cjson_participantEffectiveDescription)
	{
		result_ResearchElementDefinition_Characteristic->participantEffectiveDescription = Str8C(cJSON_GetStringValue(cjson_participantEffectiveDescription));
	}
	if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueDateTime");
		result_ResearchElementDefinition_Characteristic->participantEffective.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ResearchElementDefinition_Characteristic->participantEffective_type = ResearchElementDefinition_Characteristic::ParticipantEffectiveType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valuePeriod");
		result_ResearchElementDefinition_Characteristic->participantEffective.valuePeriod = Deserialize_Period(arena, item);
		result_ResearchElementDefinition_Characteristic->participantEffective_type = ResearchElementDefinition_Characteristic::ParticipantEffectiveType::Period;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueDuration");
		result_ResearchElementDefinition_Characteristic->participantEffective.valueDuration = Deserialize_Duration(arena, item);
		result_ResearchElementDefinition_Characteristic->participantEffective_type = ResearchElementDefinition_Characteristic::ParticipantEffectiveType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(researchElementDefinition_Characteristic, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(researchElementDefinition_Characteristic, "valueTiming");
		result_ResearchElementDefinition_Characteristic->participantEffective.valueTiming = Deserialize_Timing(arena, item);
		result_ResearchElementDefinition_Characteristic->participantEffective_type = ResearchElementDefinition_Characteristic::ParticipantEffectiveType::Timing;
	}


	cJSON *cjson_participantEffectiveTimeFromStart =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "participantEffectiveTimeFromStart");
	if(cjson_participantEffectiveTimeFromStart)
	{
		result_ResearchElementDefinition_Characteristic->participantEffectiveTimeFromStart = Deserialize_Duration(arena, cjson_participantEffectiveTimeFromStart);
	}
	cJSON *cjson_participantEffectiveGroupMeasure =  cJSON_GetObjectItem(researchElementDefinition_Characteristic, "participantEffectiveGroupMeasure");
	if(cjson_participantEffectiveGroupMeasure)
	{
		result_ResearchElementDefinition_Characteristic->participantEffectiveGroupMeasure = Str8C(cJSON_GetStringValue(cjson_participantEffectiveGroupMeasure));
	}
	return result_ResearchElementDefinition_Characteristic;
}

ResearchStudy*
Deserialize_ResearchStudy(Arena *arena, cJSON *researchStudy)
{
	ResearchStudy *result_ResearchStudy = PushArray(arena, ResearchStudy, 1);
	result_ResearchStudy->resourceType = ResourceType::ResearchStudy;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(researchStudy, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(researchStudy, "id");
	if(cjson_id)
	{
		result_ResearchStudy->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(researchStudy, "meta");
	if(cjson_meta)
	{
		result_ResearchStudy->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(researchStudy, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ResearchStudy->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(researchStudy, "language");
	if(cjson_language)
	{
		result_ResearchStudy->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(researchStudy, "text");
	if(cjson_text)
	{
		result_ResearchStudy->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(researchStudy, "contained");
	if(cjson_contained)
	{
		result_ResearchStudy->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ResearchStudy->contained = PushArray(arena, Resource, result_ResearchStudy->contained_count);
		for(int i = 0; i < result_ResearchStudy->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ResearchStudy->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(researchStudy, "extension");
	if(cjson_extension)
	{
		result_ResearchStudy->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ResearchStudy->extension = PushArray(arena, Extension, result_ResearchStudy->extension_count);
		for(int i = 0; i < result_ResearchStudy->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ResearchStudy->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(researchStudy, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ResearchStudy->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ResearchStudy->modifierExtension = PushArray(arena, Extension, result_ResearchStudy->modifierExtension_count);
		for(int i = 0; i < result_ResearchStudy->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ResearchStudy->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(researchStudy, "identifier");
	if(cjson_identifier)
	{
		result_ResearchStudy->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ResearchStudy->identifier = PushArray(arena, Identifier, result_ResearchStudy->identifier_count);
		for(int i = 0; i < result_ResearchStudy->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ResearchStudy->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_title =  cJSON_GetObjectItem(researchStudy, "title");
	if(cjson_title)
	{
		result_ResearchStudy->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_protocol =  cJSON_GetObjectItem(researchStudy, "protocol");
	if(cjson_protocol)
	{
		result_ResearchStudy->protocol_count = cJSON_GetArraySize(cjson_protocol);
		result_ResearchStudy->protocol = PushArray(arena, Reference, result_ResearchStudy->protocol_count);
		for(int i = 0; i < result_ResearchStudy->protocol_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_protocol, i);
			result_ResearchStudy->protocol[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(researchStudy, "partOf");
	if(cjson_partOf)
	{
		result_ResearchStudy->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_ResearchStudy->partOf = PushArray(arena, Reference, result_ResearchStudy->partOf_count);
		for(int i = 0; i < result_ResearchStudy->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_ResearchStudy->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(researchStudy, "status");
	if(cjson_status)
	{
		result_ResearchStudy->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_primaryPurposeType =  cJSON_GetObjectItem(researchStudy, "primaryPurposeType");
	if(cjson_primaryPurposeType)
	{
		result_ResearchStudy->primaryPurposeType = Deserialize_CodeableConcept(arena, cjson_primaryPurposeType);
	}
	cJSON *cjson_phase =  cJSON_GetObjectItem(researchStudy, "phase");
	if(cjson_phase)
	{
		result_ResearchStudy->phase = Deserialize_CodeableConcept(arena, cjson_phase);
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(researchStudy, "category");
	if(cjson_category)
	{
		result_ResearchStudy->category_count = cJSON_GetArraySize(cjson_category);
		result_ResearchStudy->category = PushArray(arena, CodeableConcept, result_ResearchStudy->category_count);
		for(int i = 0; i < result_ResearchStudy->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_ResearchStudy->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_focus =  cJSON_GetObjectItem(researchStudy, "focus");
	if(cjson_focus)
	{
		result_ResearchStudy->focus_count = cJSON_GetArraySize(cjson_focus);
		result_ResearchStudy->focus = PushArray(arena, CodeableConcept, result_ResearchStudy->focus_count);
		for(int i = 0; i < result_ResearchStudy->focus_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_focus, i);
			result_ResearchStudy->focus[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(researchStudy, "condition");
	if(cjson_condition)
	{
		result_ResearchStudy->condition_count = cJSON_GetArraySize(cjson_condition);
		result_ResearchStudy->condition = PushArray(arena, CodeableConcept, result_ResearchStudy->condition_count);
		for(int i = 0; i < result_ResearchStudy->condition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_condition, i);
			result_ResearchStudy->condition[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(researchStudy, "contact");
	if(cjson_contact)
	{
		result_ResearchStudy->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ResearchStudy->contact = PushArray(arena, ContactDetail, result_ResearchStudy->contact_count);
		for(int i = 0; i < result_ResearchStudy->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ResearchStudy->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(researchStudy, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_ResearchStudy->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_ResearchStudy->relatedArtifact = PushArray(arena, RelatedArtifact, result_ResearchStudy->relatedArtifact_count);
		for(int i = 0; i < result_ResearchStudy->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_ResearchStudy->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_keyword =  cJSON_GetObjectItem(researchStudy, "keyword");
	if(cjson_keyword)
	{
		result_ResearchStudy->keyword_count = cJSON_GetArraySize(cjson_keyword);
		result_ResearchStudy->keyword = PushArray(arena, CodeableConcept, result_ResearchStudy->keyword_count);
		for(int i = 0; i < result_ResearchStudy->keyword_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_keyword, i);
			result_ResearchStudy->keyword[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_location =  cJSON_GetObjectItem(researchStudy, "location");
	if(cjson_location)
	{
		result_ResearchStudy->location_count = cJSON_GetArraySize(cjson_location);
		result_ResearchStudy->location = PushArray(arena, CodeableConcept, result_ResearchStudy->location_count);
		for(int i = 0; i < result_ResearchStudy->location_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_location, i);
			result_ResearchStudy->location[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(researchStudy, "description");
	if(cjson_description)
	{
		result_ResearchStudy->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_enrollment =  cJSON_GetObjectItem(researchStudy, "enrollment");
	if(cjson_enrollment)
	{
		result_ResearchStudy->enrollment_count = cJSON_GetArraySize(cjson_enrollment);
		result_ResearchStudy->enrollment = PushArray(arena, Reference, result_ResearchStudy->enrollment_count);
		for(int i = 0; i < result_ResearchStudy->enrollment_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_enrollment, i);
			result_ResearchStudy->enrollment[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(researchStudy, "period");
	if(cjson_period)
	{
		result_ResearchStudy->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_sponsor =  cJSON_GetObjectItem(researchStudy, "sponsor");
	if(cjson_sponsor)
	{
		result_ResearchStudy->sponsor = Deserialize_Reference(arena, cjson_sponsor);
	}
	cJSON *cjson_principalInvestigator =  cJSON_GetObjectItem(researchStudy, "principalInvestigator");
	if(cjson_principalInvestigator)
	{
		result_ResearchStudy->principalInvestigator = Deserialize_Reference(arena, cjson_principalInvestigator);
	}
	cJSON *cjson_site =  cJSON_GetObjectItem(researchStudy, "site");
	if(cjson_site)
	{
		result_ResearchStudy->site_count = cJSON_GetArraySize(cjson_site);
		result_ResearchStudy->site = PushArray(arena, Reference, result_ResearchStudy->site_count);
		for(int i = 0; i < result_ResearchStudy->site_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_site, i);
			result_ResearchStudy->site[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_reasonStopped =  cJSON_GetObjectItem(researchStudy, "reasonStopped");
	if(cjson_reasonStopped)
	{
		result_ResearchStudy->reasonStopped = Deserialize_CodeableConcept(arena, cjson_reasonStopped);
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(researchStudy, "note");
	if(cjson_note)
	{
		result_ResearchStudy->note_count = cJSON_GetArraySize(cjson_note);
		result_ResearchStudy->note = PushArray(arena, Annotation, result_ResearchStudy->note_count);
		for(int i = 0; i < result_ResearchStudy->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_ResearchStudy->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_arm =  cJSON_GetObjectItem(researchStudy, "arm");
	if(cjson_arm)
	{
		result_ResearchStudy->arm_count = cJSON_GetArraySize(cjson_arm);
		result_ResearchStudy->arm = PushArray(arena, ResearchStudy_Arm, result_ResearchStudy->arm_count);
		for(int i = 0; i < result_ResearchStudy->arm_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_arm, i);
			result_ResearchStudy->arm[i] = *Deserialize_ResearchStudy_Arm(arena, internal);
		}

	}
	cJSON *cjson_objective =  cJSON_GetObjectItem(researchStudy, "objective");
	if(cjson_objective)
	{
		result_ResearchStudy->objective_count = cJSON_GetArraySize(cjson_objective);
		result_ResearchStudy->objective = PushArray(arena, ResearchStudy_Objective, result_ResearchStudy->objective_count);
		for(int i = 0; i < result_ResearchStudy->objective_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_objective, i);
			result_ResearchStudy->objective[i] = *Deserialize_ResearchStudy_Objective(arena, internal);
		}

	}
	return result_ResearchStudy;
}

ResearchStudy_Arm*
Deserialize_ResearchStudy_Arm(Arena *arena, cJSON *researchStudy_Arm)
{
	ResearchStudy_Arm *result_ResearchStudy_Arm = PushArray(arena, ResearchStudy_Arm, 1);
	result_ResearchStudy_Arm->resourceType = ResourceType::ResearchStudy_Arm;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(researchStudy_Arm, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(researchStudy_Arm, "id");
	if(cjson_id)
	{
		result_ResearchStudy_Arm->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(researchStudy_Arm, "extension");
	if(cjson_extension)
	{
		result_ResearchStudy_Arm->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ResearchStudy_Arm->extension = PushArray(arena, Extension, result_ResearchStudy_Arm->extension_count);
		for(int i = 0; i < result_ResearchStudy_Arm->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ResearchStudy_Arm->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(researchStudy_Arm, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ResearchStudy_Arm->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ResearchStudy_Arm->modifierExtension = PushArray(arena, Extension, result_ResearchStudy_Arm->modifierExtension_count);
		for(int i = 0; i < result_ResearchStudy_Arm->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ResearchStudy_Arm->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(researchStudy_Arm, "name");
	if(cjson_name)
	{
		result_ResearchStudy_Arm->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(researchStudy_Arm, "type");
	if(cjson_type)
	{
		result_ResearchStudy_Arm->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(researchStudy_Arm, "description");
	if(cjson_description)
	{
		result_ResearchStudy_Arm->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_ResearchStudy_Arm;
}

ResearchStudy_Objective*
Deserialize_ResearchStudy_Objective(Arena *arena, cJSON *researchStudy_Objective)
{
	ResearchStudy_Objective *result_ResearchStudy_Objective = PushArray(arena, ResearchStudy_Objective, 1);
	result_ResearchStudy_Objective->resourceType = ResourceType::ResearchStudy_Objective;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(researchStudy_Objective, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(researchStudy_Objective, "id");
	if(cjson_id)
	{
		result_ResearchStudy_Objective->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(researchStudy_Objective, "extension");
	if(cjson_extension)
	{
		result_ResearchStudy_Objective->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ResearchStudy_Objective->extension = PushArray(arena, Extension, result_ResearchStudy_Objective->extension_count);
		for(int i = 0; i < result_ResearchStudy_Objective->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ResearchStudy_Objective->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(researchStudy_Objective, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ResearchStudy_Objective->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ResearchStudy_Objective->modifierExtension = PushArray(arena, Extension, result_ResearchStudy_Objective->modifierExtension_count);
		for(int i = 0; i < result_ResearchStudy_Objective->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ResearchStudy_Objective->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(researchStudy_Objective, "name");
	if(cjson_name)
	{
		result_ResearchStudy_Objective->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(researchStudy_Objective, "type");
	if(cjson_type)
	{
		result_ResearchStudy_Objective->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	return result_ResearchStudy_Objective;
}

ResearchSubject*
Deserialize_ResearchSubject(Arena *arena, cJSON *researchSubject)
{
	ResearchSubject *result_ResearchSubject = PushArray(arena, ResearchSubject, 1);
	result_ResearchSubject->resourceType = ResourceType::ResearchSubject;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(researchSubject, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(researchSubject, "id");
	if(cjson_id)
	{
		result_ResearchSubject->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(researchSubject, "meta");
	if(cjson_meta)
	{
		result_ResearchSubject->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(researchSubject, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ResearchSubject->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(researchSubject, "language");
	if(cjson_language)
	{
		result_ResearchSubject->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(researchSubject, "text");
	if(cjson_text)
	{
		result_ResearchSubject->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(researchSubject, "contained");
	if(cjson_contained)
	{
		result_ResearchSubject->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ResearchSubject->contained = PushArray(arena, Resource, result_ResearchSubject->contained_count);
		for(int i = 0; i < result_ResearchSubject->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ResearchSubject->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(researchSubject, "extension");
	if(cjson_extension)
	{
		result_ResearchSubject->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ResearchSubject->extension = PushArray(arena, Extension, result_ResearchSubject->extension_count);
		for(int i = 0; i < result_ResearchSubject->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ResearchSubject->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(researchSubject, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ResearchSubject->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ResearchSubject->modifierExtension = PushArray(arena, Extension, result_ResearchSubject->modifierExtension_count);
		for(int i = 0; i < result_ResearchSubject->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ResearchSubject->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(researchSubject, "identifier");
	if(cjson_identifier)
	{
		result_ResearchSubject->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ResearchSubject->identifier = PushArray(arena, Identifier, result_ResearchSubject->identifier_count);
		for(int i = 0; i < result_ResearchSubject->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ResearchSubject->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(researchSubject, "status");
	if(cjson_status)
	{
		result_ResearchSubject->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(researchSubject, "period");
	if(cjson_period)
	{
		result_ResearchSubject->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_study =  cJSON_GetObjectItem(researchSubject, "study");
	if(cjson_study)
	{
		result_ResearchSubject->study = Deserialize_Reference(arena, cjson_study);
	}
	cJSON *cjson_individual =  cJSON_GetObjectItem(researchSubject, "individual");
	if(cjson_individual)
	{
		result_ResearchSubject->individual = Deserialize_Reference(arena, cjson_individual);
	}
	cJSON *cjson_assignedArm =  cJSON_GetObjectItem(researchSubject, "assignedArm");
	if(cjson_assignedArm)
	{
		result_ResearchSubject->assignedArm = Str8C(cJSON_GetStringValue(cjson_assignedArm));
	}
	cJSON *cjson_actualArm =  cJSON_GetObjectItem(researchSubject, "actualArm");
	if(cjson_actualArm)
	{
		result_ResearchSubject->actualArm = Str8C(cJSON_GetStringValue(cjson_actualArm));
	}
	cJSON *cjson_consent =  cJSON_GetObjectItem(researchSubject, "consent");
	if(cjson_consent)
	{
		result_ResearchSubject->consent = Deserialize_Reference(arena, cjson_consent);
	}
	return result_ResearchSubject;
}

RiskAssessment*
Deserialize_RiskAssessment(Arena *arena, cJSON *riskAssessment)
{
	RiskAssessment *result_RiskAssessment = PushArray(arena, RiskAssessment, 1);
	result_RiskAssessment->resourceType = ResourceType::RiskAssessment;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskAssessment, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskAssessment, "id");
	if(cjson_id)
	{
		result_RiskAssessment->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(riskAssessment, "meta");
	if(cjson_meta)
	{
		result_RiskAssessment->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(riskAssessment, "implicitRules");
	if(cjson_implicitRules)
	{
		result_RiskAssessment->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(riskAssessment, "language");
	if(cjson_language)
	{
		result_RiskAssessment->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(riskAssessment, "text");
	if(cjson_text)
	{
		result_RiskAssessment->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(riskAssessment, "contained");
	if(cjson_contained)
	{
		result_RiskAssessment->contained_count = cJSON_GetArraySize(cjson_contained);
		result_RiskAssessment->contained = PushArray(arena, Resource, result_RiskAssessment->contained_count);
		for(int i = 0; i < result_RiskAssessment->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_RiskAssessment->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskAssessment, "extension");
	if(cjson_extension)
	{
		result_RiskAssessment->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskAssessment->extension = PushArray(arena, Extension, result_RiskAssessment->extension_count);
		for(int i = 0; i < result_RiskAssessment->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskAssessment->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskAssessment, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskAssessment->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskAssessment->modifierExtension = PushArray(arena, Extension, result_RiskAssessment->modifierExtension_count);
		for(int i = 0; i < result_RiskAssessment->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskAssessment->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(riskAssessment, "identifier");
	if(cjson_identifier)
	{
		result_RiskAssessment->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_RiskAssessment->identifier = PushArray(arena, Identifier, result_RiskAssessment->identifier_count);
		for(int i = 0; i < result_RiskAssessment->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_RiskAssessment->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(riskAssessment, "basedOn");
	if(cjson_basedOn)
	{
		result_RiskAssessment->basedOn = Deserialize_Reference(arena, cjson_basedOn);
	}
	cJSON *cjson_parent =  cJSON_GetObjectItem(riskAssessment, "parent");
	if(cjson_parent)
	{
		result_RiskAssessment->parent = Deserialize_Reference(arena, cjson_parent);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(riskAssessment, "status");
	if(cjson_status)
	{
		result_RiskAssessment->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(riskAssessment, "method");
	if(cjson_method)
	{
		result_RiskAssessment->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(riskAssessment, "code");
	if(cjson_code)
	{
		result_RiskAssessment->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(riskAssessment, "subject");
	if(cjson_subject)
	{
		result_RiskAssessment->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(riskAssessment, "encounter");
	if(cjson_encounter)
	{
		result_RiskAssessment->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(riskAssessment, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(riskAssessment, "valueDateTime");
		result_RiskAssessment->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_RiskAssessment->occurrence_type = RiskAssessment::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(riskAssessment, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(riskAssessment, "valuePeriod");
		result_RiskAssessment->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_RiskAssessment->occurrence_type = RiskAssessment::OccurrenceType::Period;
	}


	cJSON *cjson_condition =  cJSON_GetObjectItem(riskAssessment, "condition");
	if(cjson_condition)
	{
		result_RiskAssessment->condition = Deserialize_Reference(arena, cjson_condition);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(riskAssessment, "performer");
	if(cjson_performer)
	{
		result_RiskAssessment->performer = Deserialize_Reference(arena, cjson_performer);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(riskAssessment, "reasonCode");
	if(cjson_reasonCode)
	{
		result_RiskAssessment->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_RiskAssessment->reasonCode = PushArray(arena, CodeableConcept, result_RiskAssessment->reasonCode_count);
		for(int i = 0; i < result_RiskAssessment->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_RiskAssessment->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(riskAssessment, "reasonReference");
	if(cjson_reasonReference)
	{
		result_RiskAssessment->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_RiskAssessment->reasonReference = PushArray(arena, Reference, result_RiskAssessment->reasonReference_count);
		for(int i = 0; i < result_RiskAssessment->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_RiskAssessment->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_basis =  cJSON_GetObjectItem(riskAssessment, "basis");
	if(cjson_basis)
	{
		result_RiskAssessment->basis_count = cJSON_GetArraySize(cjson_basis);
		result_RiskAssessment->basis = PushArray(arena, Reference, result_RiskAssessment->basis_count);
		for(int i = 0; i < result_RiskAssessment->basis_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basis, i);
			result_RiskAssessment->basis[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_prediction =  cJSON_GetObjectItem(riskAssessment, "prediction");
	if(cjson_prediction)
	{
		result_RiskAssessment->prediction_count = cJSON_GetArraySize(cjson_prediction);
		result_RiskAssessment->prediction = PushArray(arena, RiskAssessment_Prediction, result_RiskAssessment->prediction_count);
		for(int i = 0; i < result_RiskAssessment->prediction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_prediction, i);
			result_RiskAssessment->prediction[i] = *Deserialize_RiskAssessment_Prediction(arena, internal);
		}

	}
	cJSON *cjson_mitigation =  cJSON_GetObjectItem(riskAssessment, "mitigation");
	if(cjson_mitigation)
	{
		result_RiskAssessment->mitigation = Str8C(cJSON_GetStringValue(cjson_mitigation));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(riskAssessment, "note");
	if(cjson_note)
	{
		result_RiskAssessment->note_count = cJSON_GetArraySize(cjson_note);
		result_RiskAssessment->note = PushArray(arena, Annotation, result_RiskAssessment->note_count);
		for(int i = 0; i < result_RiskAssessment->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_RiskAssessment->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_RiskAssessment;
}

RiskAssessment_Prediction*
Deserialize_RiskAssessment_Prediction(Arena *arena, cJSON *riskAssessment_Prediction)
{
	RiskAssessment_Prediction *result_RiskAssessment_Prediction = PushArray(arena, RiskAssessment_Prediction, 1);
	result_RiskAssessment_Prediction->resourceType = ResourceType::RiskAssessment_Prediction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskAssessment_Prediction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskAssessment_Prediction, "id");
	if(cjson_id)
	{
		result_RiskAssessment_Prediction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskAssessment_Prediction, "extension");
	if(cjson_extension)
	{
		result_RiskAssessment_Prediction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskAssessment_Prediction->extension = PushArray(arena, Extension, result_RiskAssessment_Prediction->extension_count);
		for(int i = 0; i < result_RiskAssessment_Prediction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskAssessment_Prediction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskAssessment_Prediction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskAssessment_Prediction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskAssessment_Prediction->modifierExtension = PushArray(arena, Extension, result_RiskAssessment_Prediction->modifierExtension_count);
		for(int i = 0; i < result_RiskAssessment_Prediction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskAssessment_Prediction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(riskAssessment_Prediction, "outcome");
	if(cjson_outcome)
	{
		result_RiskAssessment_Prediction->outcome = Deserialize_CodeableConcept(arena, cjson_outcome);
	}
	if((bool)cJSON_HasObjectItem(riskAssessment_Prediction, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(riskAssessment_Prediction, "valueDecimal");
		result_RiskAssessment_Prediction->probability.valueDecimal = cJSON_GetNumberValue(item);
		result_RiskAssessment_Prediction->probability_type = RiskAssessment_Prediction::ProbabilityType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(riskAssessment_Prediction, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(riskAssessment_Prediction, "valueRange");
		result_RiskAssessment_Prediction->probability.valueRange = Deserialize_Range(arena, item);
		result_RiskAssessment_Prediction->probability_type = RiskAssessment_Prediction::ProbabilityType::Range;
	}


	cJSON *cjson_qualitativeRisk =  cJSON_GetObjectItem(riskAssessment_Prediction, "qualitativeRisk");
	if(cjson_qualitativeRisk)
	{
		result_RiskAssessment_Prediction->qualitativeRisk = Deserialize_CodeableConcept(arena, cjson_qualitativeRisk);
	}
	cJSON *cjson_relativeRisk =  cJSON_GetObjectItem(riskAssessment_Prediction, "relativeRisk");
	if(cjson_relativeRisk)
	{
		result_RiskAssessment_Prediction->relativeRisk = cJSON_GetNumberValue(cjson_relativeRisk);
	}
	if((bool)cJSON_HasObjectItem(riskAssessment_Prediction, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(riskAssessment_Prediction, "valuePeriod");
		result_RiskAssessment_Prediction->when.valuePeriod = Deserialize_Period(arena, item);
		result_RiskAssessment_Prediction->when_type = RiskAssessment_Prediction::WhenType::Period;
	}
	else if((bool)cJSON_HasObjectItem(riskAssessment_Prediction, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(riskAssessment_Prediction, "valueRange");
		result_RiskAssessment_Prediction->when.valueRange = Deserialize_Range(arena, item);
		result_RiskAssessment_Prediction->when_type = RiskAssessment_Prediction::WhenType::Range;
	}


	cJSON *cjson_rationale =  cJSON_GetObjectItem(riskAssessment_Prediction, "rationale");
	if(cjson_rationale)
	{
		result_RiskAssessment_Prediction->rationale = Str8C(cJSON_GetStringValue(cjson_rationale));
	}
	return result_RiskAssessment_Prediction;
}

RiskEvidenceSynthesis*
Deserialize_RiskEvidenceSynthesis(Arena *arena, cJSON *riskEvidenceSynthesis)
{
	RiskEvidenceSynthesis *result_RiskEvidenceSynthesis = PushArray(arena, RiskEvidenceSynthesis, 1);
	result_RiskEvidenceSynthesis->resourceType = ResourceType::RiskEvidenceSynthesis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskEvidenceSynthesis, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskEvidenceSynthesis, "id");
	if(cjson_id)
	{
		result_RiskEvidenceSynthesis->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(riskEvidenceSynthesis, "meta");
	if(cjson_meta)
	{
		result_RiskEvidenceSynthesis->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(riskEvidenceSynthesis, "implicitRules");
	if(cjson_implicitRules)
	{
		result_RiskEvidenceSynthesis->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(riskEvidenceSynthesis, "language");
	if(cjson_language)
	{
		result_RiskEvidenceSynthesis->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(riskEvidenceSynthesis, "text");
	if(cjson_text)
	{
		result_RiskEvidenceSynthesis->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(riskEvidenceSynthesis, "contained");
	if(cjson_contained)
	{
		result_RiskEvidenceSynthesis->contained_count = cJSON_GetArraySize(cjson_contained);
		result_RiskEvidenceSynthesis->contained = PushArray(arena, Resource, result_RiskEvidenceSynthesis->contained_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_RiskEvidenceSynthesis->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskEvidenceSynthesis, "extension");
	if(cjson_extension)
	{
		result_RiskEvidenceSynthesis->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskEvidenceSynthesis->extension = PushArray(arena, Extension, result_RiskEvidenceSynthesis->extension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskEvidenceSynthesis->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskEvidenceSynthesis, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskEvidenceSynthesis->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskEvidenceSynthesis->modifierExtension = PushArray(arena, Extension, result_RiskEvidenceSynthesis->modifierExtension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskEvidenceSynthesis->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(riskEvidenceSynthesis, "url");
	if(cjson_url)
	{
		result_RiskEvidenceSynthesis->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(riskEvidenceSynthesis, "identifier");
	if(cjson_identifier)
	{
		result_RiskEvidenceSynthesis->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_RiskEvidenceSynthesis->identifier = PushArray(arena, Identifier, result_RiskEvidenceSynthesis->identifier_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_RiskEvidenceSynthesis->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(riskEvidenceSynthesis, "version");
	if(cjson_version)
	{
		result_RiskEvidenceSynthesis->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(riskEvidenceSynthesis, "name");
	if(cjson_name)
	{
		result_RiskEvidenceSynthesis->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(riskEvidenceSynthesis, "title");
	if(cjson_title)
	{
		result_RiskEvidenceSynthesis->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(riskEvidenceSynthesis, "status");
	if(cjson_status)
	{
		result_RiskEvidenceSynthesis->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(riskEvidenceSynthesis, "date");
	if(cjson_date)
	{
		result_RiskEvidenceSynthesis->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(riskEvidenceSynthesis, "publisher");
	if(cjson_publisher)
	{
		result_RiskEvidenceSynthesis->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(riskEvidenceSynthesis, "contact");
	if(cjson_contact)
	{
		result_RiskEvidenceSynthesis->contact_count = cJSON_GetArraySize(cjson_contact);
		result_RiskEvidenceSynthesis->contact = PushArray(arena, ContactDetail, result_RiskEvidenceSynthesis->contact_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_RiskEvidenceSynthesis->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(riskEvidenceSynthesis, "description");
	if(cjson_description)
	{
		result_RiskEvidenceSynthesis->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(riskEvidenceSynthesis, "note");
	if(cjson_note)
	{
		result_RiskEvidenceSynthesis->note_count = cJSON_GetArraySize(cjson_note);
		result_RiskEvidenceSynthesis->note = PushArray(arena, Annotation, result_RiskEvidenceSynthesis->note_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_RiskEvidenceSynthesis->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(riskEvidenceSynthesis, "useContext");
	if(cjson_useContext)
	{
		result_RiskEvidenceSynthesis->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_RiskEvidenceSynthesis->useContext = PushArray(arena, UsageContext, result_RiskEvidenceSynthesis->useContext_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_RiskEvidenceSynthesis->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(riskEvidenceSynthesis, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_RiskEvidenceSynthesis->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_RiskEvidenceSynthesis->jurisdiction = PushArray(arena, CodeableConcept, result_RiskEvidenceSynthesis->jurisdiction_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_RiskEvidenceSynthesis->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(riskEvidenceSynthesis, "copyright");
	if(cjson_copyright)
	{
		result_RiskEvidenceSynthesis->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_approvalDate =  cJSON_GetObjectItem(riskEvidenceSynthesis, "approvalDate");
	if(cjson_approvalDate)
	{
		result_RiskEvidenceSynthesis->approvalDate = Str8C(cJSON_GetStringValue(cjson_approvalDate));
	}
	cJSON *cjson_lastReviewDate =  cJSON_GetObjectItem(riskEvidenceSynthesis, "lastReviewDate");
	if(cjson_lastReviewDate)
	{
		result_RiskEvidenceSynthesis->lastReviewDate = Str8C(cJSON_GetStringValue(cjson_lastReviewDate));
	}
	cJSON *cjson_effectivePeriod =  cJSON_GetObjectItem(riskEvidenceSynthesis, "effectivePeriod");
	if(cjson_effectivePeriod)
	{
		result_RiskEvidenceSynthesis->effectivePeriod = Deserialize_Period(arena, cjson_effectivePeriod);
	}
	cJSON *cjson_topic =  cJSON_GetObjectItem(riskEvidenceSynthesis, "topic");
	if(cjson_topic)
	{
		result_RiskEvidenceSynthesis->topic_count = cJSON_GetArraySize(cjson_topic);
		result_RiskEvidenceSynthesis->topic = PushArray(arena, CodeableConcept, result_RiskEvidenceSynthesis->topic_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->topic_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_topic, i);
			result_RiskEvidenceSynthesis->topic[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_author =  cJSON_GetObjectItem(riskEvidenceSynthesis, "author");
	if(cjson_author)
	{
		result_RiskEvidenceSynthesis->author_count = cJSON_GetArraySize(cjson_author);
		result_RiskEvidenceSynthesis->author = PushArray(arena, ContactDetail, result_RiskEvidenceSynthesis->author_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_RiskEvidenceSynthesis->author[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_editor =  cJSON_GetObjectItem(riskEvidenceSynthesis, "editor");
	if(cjson_editor)
	{
		result_RiskEvidenceSynthesis->editor_count = cJSON_GetArraySize(cjson_editor);
		result_RiskEvidenceSynthesis->editor = PushArray(arena, ContactDetail, result_RiskEvidenceSynthesis->editor_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->editor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_editor, i);
			result_RiskEvidenceSynthesis->editor[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_reviewer =  cJSON_GetObjectItem(riskEvidenceSynthesis, "reviewer");
	if(cjson_reviewer)
	{
		result_RiskEvidenceSynthesis->reviewer_count = cJSON_GetArraySize(cjson_reviewer);
		result_RiskEvidenceSynthesis->reviewer = PushArray(arena, ContactDetail, result_RiskEvidenceSynthesis->reviewer_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->reviewer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reviewer, i);
			result_RiskEvidenceSynthesis->reviewer[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_endorser =  cJSON_GetObjectItem(riskEvidenceSynthesis, "endorser");
	if(cjson_endorser)
	{
		result_RiskEvidenceSynthesis->endorser_count = cJSON_GetArraySize(cjson_endorser);
		result_RiskEvidenceSynthesis->endorser = PushArray(arena, ContactDetail, result_RiskEvidenceSynthesis->endorser_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->endorser_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_endorser, i);
			result_RiskEvidenceSynthesis->endorser[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_relatedArtifact =  cJSON_GetObjectItem(riskEvidenceSynthesis, "relatedArtifact");
	if(cjson_relatedArtifact)
	{
		result_RiskEvidenceSynthesis->relatedArtifact_count = cJSON_GetArraySize(cjson_relatedArtifact);
		result_RiskEvidenceSynthesis->relatedArtifact = PushArray(arena, RelatedArtifact, result_RiskEvidenceSynthesis->relatedArtifact_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->relatedArtifact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relatedArtifact, i);
			result_RiskEvidenceSynthesis->relatedArtifact[i] = *Deserialize_RelatedArtifact(arena, internal);
		}

	}
	cJSON *cjson_synthesisType =  cJSON_GetObjectItem(riskEvidenceSynthesis, "synthesisType");
	if(cjson_synthesisType)
	{
		result_RiskEvidenceSynthesis->synthesisType = Deserialize_CodeableConcept(arena, cjson_synthesisType);
	}
	cJSON *cjson_studyType =  cJSON_GetObjectItem(riskEvidenceSynthesis, "studyType");
	if(cjson_studyType)
	{
		result_RiskEvidenceSynthesis->studyType = Deserialize_CodeableConcept(arena, cjson_studyType);
	}
	cJSON *cjson_population =  cJSON_GetObjectItem(riskEvidenceSynthesis, "population");
	if(cjson_population)
	{
		result_RiskEvidenceSynthesis->population = Deserialize_Reference(arena, cjson_population);
	}
	cJSON *cjson_exposure =  cJSON_GetObjectItem(riskEvidenceSynthesis, "exposure");
	if(cjson_exposure)
	{
		result_RiskEvidenceSynthesis->exposure = Deserialize_Reference(arena, cjson_exposure);
	}
	cJSON *cjson_outcome =  cJSON_GetObjectItem(riskEvidenceSynthesis, "outcome");
	if(cjson_outcome)
	{
		result_RiskEvidenceSynthesis->outcome = Deserialize_Reference(arena, cjson_outcome);
	}
	cJSON *cjson_sampleSize =  cJSON_GetObjectItem(riskEvidenceSynthesis, "sampleSize");
	if(cjson_sampleSize)
	{
		result_RiskEvidenceSynthesis->sampleSize = Deserialize_RiskEvidenceSynthesis_SampleSize(arena, cjson_sampleSize);
	}
	cJSON *cjson_riskEstimate =  cJSON_GetObjectItem(riskEvidenceSynthesis, "riskEstimate");
	if(cjson_riskEstimate)
	{
		result_RiskEvidenceSynthesis->riskEstimate = Deserialize_RiskEvidenceSynthesis_RiskEstimate(arena, cjson_riskEstimate);
	}
	cJSON *cjson_certainty =  cJSON_GetObjectItem(riskEvidenceSynthesis, "certainty");
	if(cjson_certainty)
	{
		result_RiskEvidenceSynthesis->certainty_count = cJSON_GetArraySize(cjson_certainty);
		result_RiskEvidenceSynthesis->certainty = PushArray(arena, RiskEvidenceSynthesis_Certainty, result_RiskEvidenceSynthesis->certainty_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis->certainty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_certainty, i);
			result_RiskEvidenceSynthesis->certainty[i] = *Deserialize_RiskEvidenceSynthesis_Certainty(arena, internal);
		}

	}
	return result_RiskEvidenceSynthesis;
}

RiskEvidenceSynthesis_SampleSize*
Deserialize_RiskEvidenceSynthesis_SampleSize(Arena *arena, cJSON *riskEvidenceSynthesis_SampleSize)
{
	RiskEvidenceSynthesis_SampleSize *result_RiskEvidenceSynthesis_SampleSize = PushArray(arena, RiskEvidenceSynthesis_SampleSize, 1);
	result_RiskEvidenceSynthesis_SampleSize->resourceType = ResourceType::RiskEvidenceSynthesis_SampleSize;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskEvidenceSynthesis_SampleSize, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskEvidenceSynthesis_SampleSize, "id");
	if(cjson_id)
	{
		result_RiskEvidenceSynthesis_SampleSize->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskEvidenceSynthesis_SampleSize, "extension");
	if(cjson_extension)
	{
		result_RiskEvidenceSynthesis_SampleSize->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskEvidenceSynthesis_SampleSize->extension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_SampleSize->extension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_SampleSize->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskEvidenceSynthesis_SampleSize->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskEvidenceSynthesis_SampleSize, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskEvidenceSynthesis_SampleSize->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskEvidenceSynthesis_SampleSize->modifierExtension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_SampleSize->modifierExtension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_SampleSize->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskEvidenceSynthesis_SampleSize->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(riskEvidenceSynthesis_SampleSize, "description");
	if(cjson_description)
	{
		result_RiskEvidenceSynthesis_SampleSize->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_numberOfStudies =  cJSON_GetObjectItem(riskEvidenceSynthesis_SampleSize, "numberOfStudies");
	if(cjson_numberOfStudies)
	{
		result_RiskEvidenceSynthesis_SampleSize->numberOfStudies = Deserialize_Integer(arena, cjson_numberOfStudies);
	}
	cJSON *cjson_numberOfParticipants =  cJSON_GetObjectItem(riskEvidenceSynthesis_SampleSize, "numberOfParticipants");
	if(cjson_numberOfParticipants)
	{
		result_RiskEvidenceSynthesis_SampleSize->numberOfParticipants = Deserialize_Integer(arena, cjson_numberOfParticipants);
	}
	return result_RiskEvidenceSynthesis_SampleSize;
}

RiskEvidenceSynthesis_RiskEstimate*
Deserialize_RiskEvidenceSynthesis_RiskEstimate(Arena *arena, cJSON *riskEvidenceSynthesis_RiskEstimate)
{
	RiskEvidenceSynthesis_RiskEstimate *result_RiskEvidenceSynthesis_RiskEstimate = PushArray(arena, RiskEvidenceSynthesis_RiskEstimate, 1);
	result_RiskEvidenceSynthesis_RiskEstimate->resourceType = ResourceType::RiskEvidenceSynthesis_RiskEstimate;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "id");
	if(cjson_id)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "extension");
	if(cjson_extension)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskEvidenceSynthesis_RiskEstimate->extension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_RiskEstimate->extension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_RiskEstimate->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskEvidenceSynthesis_RiskEstimate->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskEvidenceSynthesis_RiskEstimate->modifierExtension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_RiskEstimate->modifierExtension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_RiskEstimate->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskEvidenceSynthesis_RiskEstimate->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "description");
	if(cjson_description)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "type");
	if(cjson_type)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "value");
	if(cjson_value)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_unitOfMeasure =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "unitOfMeasure");
	if(cjson_unitOfMeasure)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->unitOfMeasure = Deserialize_CodeableConcept(arena, cjson_unitOfMeasure);
	}
	cJSON *cjson_denominatorCount =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "denominatorCount");
	if(cjson_denominatorCount)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->denominatorCount = Deserialize_Integer(arena, cjson_denominatorCount);
	}
	cJSON *cjson_numeratorCount =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "numeratorCount");
	if(cjson_numeratorCount)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->numeratorCount = Deserialize_Integer(arena, cjson_numeratorCount);
	}
	cJSON *cjson_precisionEstimate =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate, "precisionEstimate");
	if(cjson_precisionEstimate)
	{
		result_RiskEvidenceSynthesis_RiskEstimate->precisionEstimate_count = cJSON_GetArraySize(cjson_precisionEstimate);
		result_RiskEvidenceSynthesis_RiskEstimate->precisionEstimate = PushArray(arena, RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, result_RiskEvidenceSynthesis_RiskEstimate->precisionEstimate_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_RiskEstimate->precisionEstimate_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_precisionEstimate, i);
			result_RiskEvidenceSynthesis_RiskEstimate->precisionEstimate[i] = *Deserialize_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate(arena, internal);
		}

	}
	return result_RiskEvidenceSynthesis_RiskEstimate;
}

RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate*
Deserialize_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate(Arena *arena, cJSON *riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate)
{
	RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate *result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate = PushArray(arena, RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, 1);
	result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->resourceType = ResourceType::RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "id");
	if(cjson_id)
	{
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "extension");
	if(cjson_extension)
	{
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "type");
	if(cjson_type)
	{
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_level =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "level");
	if(cjson_level)
	{
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->level = cJSON_GetNumberValue(cjson_level);
	}
	cJSON *cjson_from =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "from");
	if(cjson_from)
	{
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->from = cJSON_GetNumberValue(cjson_from);
	}
	cJSON *cjson_to =  cJSON_GetObjectItem(riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate, "to");
	if(cjson_to)
	{
		result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->to = cJSON_GetNumberValue(cjson_to);
	}
	return result_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate;
}

RiskEvidenceSynthesis_Certainty*
Deserialize_RiskEvidenceSynthesis_Certainty(Arena *arena, cJSON *riskEvidenceSynthesis_Certainty)
{
	RiskEvidenceSynthesis_Certainty *result_RiskEvidenceSynthesis_Certainty = PushArray(arena, RiskEvidenceSynthesis_Certainty, 1);
	result_RiskEvidenceSynthesis_Certainty->resourceType = ResourceType::RiskEvidenceSynthesis_Certainty;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty, "id");
	if(cjson_id)
	{
		result_RiskEvidenceSynthesis_Certainty->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty, "extension");
	if(cjson_extension)
	{
		result_RiskEvidenceSynthesis_Certainty->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskEvidenceSynthesis_Certainty->extension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_Certainty->extension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskEvidenceSynthesis_Certainty->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskEvidenceSynthesis_Certainty->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskEvidenceSynthesis_Certainty->modifierExtension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_Certainty->modifierExtension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskEvidenceSynthesis_Certainty->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_rating =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty, "rating");
	if(cjson_rating)
	{
		result_RiskEvidenceSynthesis_Certainty->rating_count = cJSON_GetArraySize(cjson_rating);
		result_RiskEvidenceSynthesis_Certainty->rating = PushArray(arena, CodeableConcept, result_RiskEvidenceSynthesis_Certainty->rating_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty->rating_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rating, i);
			result_RiskEvidenceSynthesis_Certainty->rating[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty, "note");
	if(cjson_note)
	{
		result_RiskEvidenceSynthesis_Certainty->note_count = cJSON_GetArraySize(cjson_note);
		result_RiskEvidenceSynthesis_Certainty->note = PushArray(arena, Annotation, result_RiskEvidenceSynthesis_Certainty->note_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_RiskEvidenceSynthesis_Certainty->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_certaintySubcomponent =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty, "certaintySubcomponent");
	if(cjson_certaintySubcomponent)
	{
		result_RiskEvidenceSynthesis_Certainty->certaintySubcomponent_count = cJSON_GetArraySize(cjson_certaintySubcomponent);
		result_RiskEvidenceSynthesis_Certainty->certaintySubcomponent = PushArray(arena, RiskEvidenceSynthesis_Certainty_CertaintySubcomponent, result_RiskEvidenceSynthesis_Certainty->certaintySubcomponent_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty->certaintySubcomponent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_certaintySubcomponent, i);
			result_RiskEvidenceSynthesis_Certainty->certaintySubcomponent[i] = *Deserialize_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, internal);
		}

	}
	return result_RiskEvidenceSynthesis_Certainty;
}

RiskEvidenceSynthesis_Certainty_CertaintySubcomponent*
Deserialize_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent(Arena *arena, cJSON *riskEvidenceSynthesis_Certainty_CertaintySubcomponent)
{
	RiskEvidenceSynthesis_Certainty_CertaintySubcomponent *result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent = PushArray(arena, RiskEvidenceSynthesis_Certainty_CertaintySubcomponent, 1);
	result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->resourceType = ResourceType::RiskEvidenceSynthesis_Certainty_CertaintySubcomponent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty_CertaintySubcomponent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty_CertaintySubcomponent, "id");
	if(cjson_id)
	{
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty_CertaintySubcomponent, "extension");
	if(cjson_extension)
	{
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty_CertaintySubcomponent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension = PushArray(arena, Extension, result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty_CertaintySubcomponent, "type");
	if(cjson_type)
	{
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_rating =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty_CertaintySubcomponent, "rating");
	if(cjson_rating)
	{
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count = cJSON_GetArraySize(cjson_rating);
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating = PushArray(arena, CodeableConcept, result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rating, i);
			result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(riskEvidenceSynthesis_Certainty_CertaintySubcomponent, "note");
	if(cjson_note)
	{
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count = cJSON_GetArraySize(cjson_note);
		result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->note = PushArray(arena, Annotation, result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count);
		for(int i = 0; i < result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent;
}

Schedule*
Deserialize_Schedule(Arena *arena, cJSON *schedule)
{
	Schedule *result_Schedule = PushArray(arena, Schedule, 1);
	result_Schedule->resourceType = ResourceType::Schedule;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(schedule, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(schedule, "id");
	if(cjson_id)
	{
		result_Schedule->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(schedule, "meta");
	if(cjson_meta)
	{
		result_Schedule->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(schedule, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Schedule->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(schedule, "language");
	if(cjson_language)
	{
		result_Schedule->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(schedule, "text");
	if(cjson_text)
	{
		result_Schedule->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(schedule, "contained");
	if(cjson_contained)
	{
		result_Schedule->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Schedule->contained = PushArray(arena, Resource, result_Schedule->contained_count);
		for(int i = 0; i < result_Schedule->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Schedule->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(schedule, "extension");
	if(cjson_extension)
	{
		result_Schedule->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Schedule->extension = PushArray(arena, Extension, result_Schedule->extension_count);
		for(int i = 0; i < result_Schedule->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Schedule->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(schedule, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Schedule->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Schedule->modifierExtension = PushArray(arena, Extension, result_Schedule->modifierExtension_count);
		for(int i = 0; i < result_Schedule->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Schedule->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(schedule, "identifier");
	if(cjson_identifier)
	{
		result_Schedule->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Schedule->identifier = PushArray(arena, Identifier, result_Schedule->identifier_count);
		for(int i = 0; i < result_Schedule->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Schedule->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_active =  cJSON_GetObjectItem(schedule, "active");
	if(cjson_active)
	{
		result_Schedule->active = (boolean)cJSON_IsTrue(cjson_active);
	}
	cJSON *cjson_serviceCategory =  cJSON_GetObjectItem(schedule, "serviceCategory");
	if(cjson_serviceCategory)
	{
		result_Schedule->serviceCategory_count = cJSON_GetArraySize(cjson_serviceCategory);
		result_Schedule->serviceCategory = PushArray(arena, CodeableConcept, result_Schedule->serviceCategory_count);
		for(int i = 0; i < result_Schedule->serviceCategory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_serviceCategory, i);
			result_Schedule->serviceCategory[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_serviceType =  cJSON_GetObjectItem(schedule, "serviceType");
	if(cjson_serviceType)
	{
		result_Schedule->serviceType_count = cJSON_GetArraySize(cjson_serviceType);
		result_Schedule->serviceType = PushArray(arena, CodeableConcept, result_Schedule->serviceType_count);
		for(int i = 0; i < result_Schedule->serviceType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_serviceType, i);
			result_Schedule->serviceType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialty =  cJSON_GetObjectItem(schedule, "specialty");
	if(cjson_specialty)
	{
		result_Schedule->specialty_count = cJSON_GetArraySize(cjson_specialty);
		result_Schedule->specialty = PushArray(arena, CodeableConcept, result_Schedule->specialty_count);
		for(int i = 0; i < result_Schedule->specialty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialty, i);
			result_Schedule->specialty[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_actor =  cJSON_GetObjectItem(schedule, "actor");
	if(cjson_actor)
	{
		result_Schedule->actor_count = cJSON_GetArraySize(cjson_actor);
		result_Schedule->actor = PushArray(arena, Reference, result_Schedule->actor_count);
		for(int i = 0; i < result_Schedule->actor_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_actor, i);
			result_Schedule->actor[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_planningHorizon =  cJSON_GetObjectItem(schedule, "planningHorizon");
	if(cjson_planningHorizon)
	{
		result_Schedule->planningHorizon = Deserialize_Period(arena, cjson_planningHorizon);
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(schedule, "comment");
	if(cjson_comment)
	{
		result_Schedule->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_Schedule;
}

SearchParameter*
Deserialize_SearchParameter(Arena *arena, cJSON *searchParameter)
{
	SearchParameter *result_SearchParameter = PushArray(arena, SearchParameter, 1);
	result_SearchParameter->resourceType = ResourceType::SearchParameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(searchParameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(searchParameter, "id");
	if(cjson_id)
	{
		result_SearchParameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(searchParameter, "meta");
	if(cjson_meta)
	{
		result_SearchParameter->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(searchParameter, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SearchParameter->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(searchParameter, "language");
	if(cjson_language)
	{
		result_SearchParameter->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(searchParameter, "text");
	if(cjson_text)
	{
		result_SearchParameter->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(searchParameter, "contained");
	if(cjson_contained)
	{
		result_SearchParameter->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SearchParameter->contained = PushArray(arena, Resource, result_SearchParameter->contained_count);
		for(int i = 0; i < result_SearchParameter->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SearchParameter->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(searchParameter, "extension");
	if(cjson_extension)
	{
		result_SearchParameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SearchParameter->extension = PushArray(arena, Extension, result_SearchParameter->extension_count);
		for(int i = 0; i < result_SearchParameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SearchParameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(searchParameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SearchParameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SearchParameter->modifierExtension = PushArray(arena, Extension, result_SearchParameter->modifierExtension_count);
		for(int i = 0; i < result_SearchParameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SearchParameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(searchParameter, "url");
	if(cjson_url)
	{
		result_SearchParameter->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(searchParameter, "version");
	if(cjson_version)
	{
		result_SearchParameter->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(searchParameter, "name");
	if(cjson_name)
	{
		result_SearchParameter->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_derivedFrom =  cJSON_GetObjectItem(searchParameter, "derivedFrom");
	if(cjson_derivedFrom)
	{
		result_SearchParameter->derivedFrom = Str8C(cJSON_GetStringValue(cjson_derivedFrom));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(searchParameter, "status");
	if(cjson_status)
	{
		result_SearchParameter->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(searchParameter, "experimental");
	if(cjson_experimental)
	{
		result_SearchParameter->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(searchParameter, "date");
	if(cjson_date)
	{
		result_SearchParameter->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(searchParameter, "publisher");
	if(cjson_publisher)
	{
		result_SearchParameter->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(searchParameter, "contact");
	if(cjson_contact)
	{
		result_SearchParameter->contact_count = cJSON_GetArraySize(cjson_contact);
		result_SearchParameter->contact = PushArray(arena, ContactDetail, result_SearchParameter->contact_count);
		for(int i = 0; i < result_SearchParameter->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_SearchParameter->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(searchParameter, "description");
	if(cjson_description)
	{
		result_SearchParameter->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(searchParameter, "useContext");
	if(cjson_useContext)
	{
		result_SearchParameter->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_SearchParameter->useContext = PushArray(arena, UsageContext, result_SearchParameter->useContext_count);
		for(int i = 0; i < result_SearchParameter->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_SearchParameter->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(searchParameter, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_SearchParameter->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_SearchParameter->jurisdiction = PushArray(arena, CodeableConcept, result_SearchParameter->jurisdiction_count);
		for(int i = 0; i < result_SearchParameter->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_SearchParameter->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(searchParameter, "purpose");
	if(cjson_purpose)
	{
		result_SearchParameter->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(searchParameter, "code");
	if(cjson_code)
	{
		result_SearchParameter->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_base =  cJSON_GetObjectItem(searchParameter, "base");
	if(cjson_base)
	{
		result_SearchParameter->base_count = cJSON_GetArraySize(cjson_base);
		result_SearchParameter->base = PushArray(arena, fhir_code, result_SearchParameter->base_count);
		for(int i = 0; i < result_SearchParameter->base_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_base, i);
			result_SearchParameter->base[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(searchParameter, "type");
	if(cjson_type)
	{
		result_SearchParameter->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(searchParameter, "expression");
	if(cjson_expression)
	{
		result_SearchParameter->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	cJSON *cjson_xpath =  cJSON_GetObjectItem(searchParameter, "xpath");
	if(cjson_xpath)
	{
		result_SearchParameter->xpath = Str8C(cJSON_GetStringValue(cjson_xpath));
	}
	cJSON *cjson_xpathUsage =  cJSON_GetObjectItem(searchParameter, "xpathUsage");
	if(cjson_xpathUsage)
	{
		result_SearchParameter->xpathUsage = Str8C(cJSON_GetStringValue(cjson_xpathUsage));
	}
	cJSON *cjson_target =  cJSON_GetObjectItem(searchParameter, "target");
	if(cjson_target)
	{
		result_SearchParameter->target_count = cJSON_GetArraySize(cjson_target);
		result_SearchParameter->target = PushArray(arena, fhir_code, result_SearchParameter->target_count);
		for(int i = 0; i < result_SearchParameter->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_SearchParameter->target[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_multipleOr =  cJSON_GetObjectItem(searchParameter, "multipleOr");
	if(cjson_multipleOr)
	{
		result_SearchParameter->multipleOr = (boolean)cJSON_IsTrue(cjson_multipleOr);
	}
	cJSON *cjson_multipleAnd =  cJSON_GetObjectItem(searchParameter, "multipleAnd");
	if(cjson_multipleAnd)
	{
		result_SearchParameter->multipleAnd = (boolean)cJSON_IsTrue(cjson_multipleAnd);
	}
	cJSON *cjson_comparator =  cJSON_GetObjectItem(searchParameter, "comparator");
	if(cjson_comparator)
	{
		result_SearchParameter->comparator_count = cJSON_GetArraySize(cjson_comparator);
		result_SearchParameter->comparator = PushArray(arena, fhir_code, result_SearchParameter->comparator_count);
		for(int i = 0; i < result_SearchParameter->comparator_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_comparator, i);
			result_SearchParameter->comparator[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_modifier =  cJSON_GetObjectItem(searchParameter, "modifier");
	if(cjson_modifier)
	{
		result_SearchParameter->modifier_count = cJSON_GetArraySize(cjson_modifier);
		result_SearchParameter->modifier = PushArray(arena, fhir_code, result_SearchParameter->modifier_count);
		for(int i = 0; i < result_SearchParameter->modifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifier, i);
			result_SearchParameter->modifier[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_chain =  cJSON_GetObjectItem(searchParameter, "chain");
	if(cjson_chain)
	{
		result_SearchParameter->chain_count = cJSON_GetArraySize(cjson_chain);
		result_SearchParameter->chain = PushArray(arena, fhir_string, result_SearchParameter->chain_count);
		for(int i = 0; i < result_SearchParameter->chain_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_chain, i);
			result_SearchParameter->chain[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_component =  cJSON_GetObjectItem(searchParameter, "component");
	if(cjson_component)
	{
		result_SearchParameter->component_count = cJSON_GetArraySize(cjson_component);
		result_SearchParameter->component = PushArray(arena, SearchParameter_Component, result_SearchParameter->component_count);
		for(int i = 0; i < result_SearchParameter->component_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_component, i);
			result_SearchParameter->component[i] = *Deserialize_SearchParameter_Component(arena, internal);
		}

	}
	return result_SearchParameter;
}

SearchParameter_Component*
Deserialize_SearchParameter_Component(Arena *arena, cJSON *searchParameter_Component)
{
	SearchParameter_Component *result_SearchParameter_Component = PushArray(arena, SearchParameter_Component, 1);
	result_SearchParameter_Component->resourceType = ResourceType::SearchParameter_Component;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(searchParameter_Component, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(searchParameter_Component, "id");
	if(cjson_id)
	{
		result_SearchParameter_Component->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(searchParameter_Component, "extension");
	if(cjson_extension)
	{
		result_SearchParameter_Component->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SearchParameter_Component->extension = PushArray(arena, Extension, result_SearchParameter_Component->extension_count);
		for(int i = 0; i < result_SearchParameter_Component->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SearchParameter_Component->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(searchParameter_Component, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SearchParameter_Component->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SearchParameter_Component->modifierExtension = PushArray(arena, Extension, result_SearchParameter_Component->modifierExtension_count);
		for(int i = 0; i < result_SearchParameter_Component->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SearchParameter_Component->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(searchParameter_Component, "definition");
	if(cjson_definition)
	{
		result_SearchParameter_Component->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(searchParameter_Component, "expression");
	if(cjson_expression)
	{
		result_SearchParameter_Component->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	return result_SearchParameter_Component;
}

ServiceRequest*
Deserialize_ServiceRequest(Arena *arena, cJSON *serviceRequest)
{
	ServiceRequest *result_ServiceRequest = PushArray(arena, ServiceRequest, 1);
	result_ServiceRequest->resourceType = ResourceType::ServiceRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(serviceRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(serviceRequest, "id");
	if(cjson_id)
	{
		result_ServiceRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(serviceRequest, "meta");
	if(cjson_meta)
	{
		result_ServiceRequest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(serviceRequest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ServiceRequest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(serviceRequest, "language");
	if(cjson_language)
	{
		result_ServiceRequest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(serviceRequest, "text");
	if(cjson_text)
	{
		result_ServiceRequest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(serviceRequest, "contained");
	if(cjson_contained)
	{
		result_ServiceRequest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ServiceRequest->contained = PushArray(arena, Resource, result_ServiceRequest->contained_count);
		for(int i = 0; i < result_ServiceRequest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ServiceRequest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(serviceRequest, "extension");
	if(cjson_extension)
	{
		result_ServiceRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ServiceRequest->extension = PushArray(arena, Extension, result_ServiceRequest->extension_count);
		for(int i = 0; i < result_ServiceRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ServiceRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(serviceRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ServiceRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ServiceRequest->modifierExtension = PushArray(arena, Extension, result_ServiceRequest->modifierExtension_count);
		for(int i = 0; i < result_ServiceRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ServiceRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(serviceRequest, "identifier");
	if(cjson_identifier)
	{
		result_ServiceRequest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ServiceRequest->identifier = PushArray(arena, Identifier, result_ServiceRequest->identifier_count);
		for(int i = 0; i < result_ServiceRequest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ServiceRequest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(serviceRequest, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_ServiceRequest->instantiatesCanonical_count = cJSON_GetArraySize(cjson_instantiatesCanonical);
		result_ServiceRequest->instantiatesCanonical = PushArray(arena, fhir_canonical, result_ServiceRequest->instantiatesCanonical_count);
		for(int i = 0; i < result_ServiceRequest->instantiatesCanonical_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesCanonical, i);
			result_ServiceRequest->instantiatesCanonical[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(serviceRequest, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_ServiceRequest->instantiatesUri_count = cJSON_GetArraySize(cjson_instantiatesUri);
		result_ServiceRequest->instantiatesUri = PushArray(arena, fhir_uri, result_ServiceRequest->instantiatesUri_count);
		for(int i = 0; i < result_ServiceRequest->instantiatesUri_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instantiatesUri, i);
			result_ServiceRequest->instantiatesUri[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(serviceRequest, "basedOn");
	if(cjson_basedOn)
	{
		result_ServiceRequest->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_ServiceRequest->basedOn = PushArray(arena, Reference, result_ServiceRequest->basedOn_count);
		for(int i = 0; i < result_ServiceRequest->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_ServiceRequest->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_replaces =  cJSON_GetObjectItem(serviceRequest, "replaces");
	if(cjson_replaces)
	{
		result_ServiceRequest->replaces_count = cJSON_GetArraySize(cjson_replaces);
		result_ServiceRequest->replaces = PushArray(arena, Reference, result_ServiceRequest->replaces_count);
		for(int i = 0; i < result_ServiceRequest->replaces_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_replaces, i);
			result_ServiceRequest->replaces[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_requisition =  cJSON_GetObjectItem(serviceRequest, "requisition");
	if(cjson_requisition)
	{
		result_ServiceRequest->requisition = Deserialize_Identifier(arena, cjson_requisition);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(serviceRequest, "status");
	if(cjson_status)
	{
		result_ServiceRequest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(serviceRequest, "intent");
	if(cjson_intent)
	{
		result_ServiceRequest->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(serviceRequest, "category");
	if(cjson_category)
	{
		result_ServiceRequest->category_count = cJSON_GetArraySize(cjson_category);
		result_ServiceRequest->category = PushArray(arena, CodeableConcept, result_ServiceRequest->category_count);
		for(int i = 0; i < result_ServiceRequest->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_ServiceRequest->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(serviceRequest, "priority");
	if(cjson_priority)
	{
		result_ServiceRequest->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_doNotPerform =  cJSON_GetObjectItem(serviceRequest, "doNotPerform");
	if(cjson_doNotPerform)
	{
		result_ServiceRequest->doNotPerform = (boolean)cJSON_IsTrue(cjson_doNotPerform);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(serviceRequest, "code");
	if(cjson_code)
	{
		result_ServiceRequest->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_orderDetail =  cJSON_GetObjectItem(serviceRequest, "orderDetail");
	if(cjson_orderDetail)
	{
		result_ServiceRequest->orderDetail_count = cJSON_GetArraySize(cjson_orderDetail);
		result_ServiceRequest->orderDetail = PushArray(arena, CodeableConcept, result_ServiceRequest->orderDetail_count);
		for(int i = 0; i < result_ServiceRequest->orderDetail_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_orderDetail, i);
			result_ServiceRequest->orderDetail[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(serviceRequest, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valueQuantity");
		result_ServiceRequest->quantity.valueQuantity = Deserialize_Quantity(arena, item);
		result_ServiceRequest->quantity_type = ServiceRequest::QuantityType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(serviceRequest, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valueRatio");
		result_ServiceRequest->quantity.valueRatio = Deserialize_Ratio(arena, item);
		result_ServiceRequest->quantity_type = ServiceRequest::QuantityType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(serviceRequest, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valueRange");
		result_ServiceRequest->quantity.valueRange = Deserialize_Range(arena, item);
		result_ServiceRequest->quantity_type = ServiceRequest::QuantityType::Range;
	}


	cJSON *cjson_subject =  cJSON_GetObjectItem(serviceRequest, "subject");
	if(cjson_subject)
	{
		result_ServiceRequest->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(serviceRequest, "encounter");
	if(cjson_encounter)
	{
		result_ServiceRequest->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	if((bool)cJSON_HasObjectItem(serviceRequest, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valueDateTime");
		result_ServiceRequest->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ServiceRequest->occurrence_type = ServiceRequest::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(serviceRequest, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valuePeriod");
		result_ServiceRequest->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_ServiceRequest->occurrence_type = ServiceRequest::OccurrenceType::Period;
	}
	else if((bool)cJSON_HasObjectItem(serviceRequest, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valueTiming");
		result_ServiceRequest->occurrence.valueTiming = Deserialize_Timing(arena, item);
		result_ServiceRequest->occurrence_type = ServiceRequest::OccurrenceType::Timing;
	}


	if((bool)cJSON_HasObjectItem(serviceRequest, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valueBoolean");
		result_ServiceRequest->asNeeded.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ServiceRequest->asNeeded_type = ServiceRequest::AsNeededType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(serviceRequest, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(serviceRequest, "valueCodeableConcept");
		result_ServiceRequest->asNeeded.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ServiceRequest->asNeeded_type = ServiceRequest::AsNeededType::CodeableConcept;
	}


	cJSON *cjson_authoredOn =  cJSON_GetObjectItem(serviceRequest, "authoredOn");
	if(cjson_authoredOn)
	{
		result_ServiceRequest->authoredOn = Str8C(cJSON_GetStringValue(cjson_authoredOn));
	}
	cJSON *cjson_requester =  cJSON_GetObjectItem(serviceRequest, "requester");
	if(cjson_requester)
	{
		result_ServiceRequest->requester = Deserialize_Reference(arena, cjson_requester);
	}
	cJSON *cjson_performerType =  cJSON_GetObjectItem(serviceRequest, "performerType");
	if(cjson_performerType)
	{
		result_ServiceRequest->performerType = Deserialize_CodeableConcept(arena, cjson_performerType);
	}
	cJSON *cjson_performer =  cJSON_GetObjectItem(serviceRequest, "performer");
	if(cjson_performer)
	{
		result_ServiceRequest->performer_count = cJSON_GetArraySize(cjson_performer);
		result_ServiceRequest->performer = PushArray(arena, Reference, result_ServiceRequest->performer_count);
		for(int i = 0; i < result_ServiceRequest->performer_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performer, i);
			result_ServiceRequest->performer[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_locationCode =  cJSON_GetObjectItem(serviceRequest, "locationCode");
	if(cjson_locationCode)
	{
		result_ServiceRequest->locationCode_count = cJSON_GetArraySize(cjson_locationCode);
		result_ServiceRequest->locationCode = PushArray(arena, CodeableConcept, result_ServiceRequest->locationCode_count);
		for(int i = 0; i < result_ServiceRequest->locationCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_locationCode, i);
			result_ServiceRequest->locationCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_locationReference =  cJSON_GetObjectItem(serviceRequest, "locationReference");
	if(cjson_locationReference)
	{
		result_ServiceRequest->locationReference_count = cJSON_GetArraySize(cjson_locationReference);
		result_ServiceRequest->locationReference = PushArray(arena, Reference, result_ServiceRequest->locationReference_count);
		for(int i = 0; i < result_ServiceRequest->locationReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_locationReference, i);
			result_ServiceRequest->locationReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(serviceRequest, "reasonCode");
	if(cjson_reasonCode)
	{
		result_ServiceRequest->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_ServiceRequest->reasonCode = PushArray(arena, CodeableConcept, result_ServiceRequest->reasonCode_count);
		for(int i = 0; i < result_ServiceRequest->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_ServiceRequest->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(serviceRequest, "reasonReference");
	if(cjson_reasonReference)
	{
		result_ServiceRequest->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_ServiceRequest->reasonReference = PushArray(arena, Reference, result_ServiceRequest->reasonReference_count);
		for(int i = 0; i < result_ServiceRequest->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_ServiceRequest->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(serviceRequest, "insurance");
	if(cjson_insurance)
	{
		result_ServiceRequest->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_ServiceRequest->insurance = PushArray(arena, Reference, result_ServiceRequest->insurance_count);
		for(int i = 0; i < result_ServiceRequest->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_ServiceRequest->insurance[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_supportingInfo =  cJSON_GetObjectItem(serviceRequest, "supportingInfo");
	if(cjson_supportingInfo)
	{
		result_ServiceRequest->supportingInfo_count = cJSON_GetArraySize(cjson_supportingInfo);
		result_ServiceRequest->supportingInfo = PushArray(arena, Reference, result_ServiceRequest->supportingInfo_count);
		for(int i = 0; i < result_ServiceRequest->supportingInfo_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supportingInfo, i);
			result_ServiceRequest->supportingInfo[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_specimen =  cJSON_GetObjectItem(serviceRequest, "specimen");
	if(cjson_specimen)
	{
		result_ServiceRequest->specimen_count = cJSON_GetArraySize(cjson_specimen);
		result_ServiceRequest->specimen = PushArray(arena, Reference, result_ServiceRequest->specimen_count);
		for(int i = 0; i < result_ServiceRequest->specimen_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specimen, i);
			result_ServiceRequest->specimen[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(serviceRequest, "bodySite");
	if(cjson_bodySite)
	{
		result_ServiceRequest->bodySite_count = cJSON_GetArraySize(cjson_bodySite);
		result_ServiceRequest->bodySite = PushArray(arena, CodeableConcept, result_ServiceRequest->bodySite_count);
		for(int i = 0; i < result_ServiceRequest->bodySite_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_bodySite, i);
			result_ServiceRequest->bodySite[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(serviceRequest, "note");
	if(cjson_note)
	{
		result_ServiceRequest->note_count = cJSON_GetArraySize(cjson_note);
		result_ServiceRequest->note = PushArray(arena, Annotation, result_ServiceRequest->note_count);
		for(int i = 0; i < result_ServiceRequest->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_ServiceRequest->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_patientInstruction =  cJSON_GetObjectItem(serviceRequest, "patientInstruction");
	if(cjson_patientInstruction)
	{
		result_ServiceRequest->patientInstruction = Str8C(cJSON_GetStringValue(cjson_patientInstruction));
	}
	cJSON *cjson_relevantHistory =  cJSON_GetObjectItem(serviceRequest, "relevantHistory");
	if(cjson_relevantHistory)
	{
		result_ServiceRequest->relevantHistory_count = cJSON_GetArraySize(cjson_relevantHistory);
		result_ServiceRequest->relevantHistory = PushArray(arena, Reference, result_ServiceRequest->relevantHistory_count);
		for(int i = 0; i < result_ServiceRequest->relevantHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relevantHistory, i);
			result_ServiceRequest->relevantHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_ServiceRequest;
}

Slot*
Deserialize_Slot(Arena *arena, cJSON *slot)
{
	Slot *result_Slot = PushArray(arena, Slot, 1);
	result_Slot->resourceType = ResourceType::Slot;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(slot, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(slot, "id");
	if(cjson_id)
	{
		result_Slot->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(slot, "meta");
	if(cjson_meta)
	{
		result_Slot->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(slot, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Slot->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(slot, "language");
	if(cjson_language)
	{
		result_Slot->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(slot, "text");
	if(cjson_text)
	{
		result_Slot->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(slot, "contained");
	if(cjson_contained)
	{
		result_Slot->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Slot->contained = PushArray(arena, Resource, result_Slot->contained_count);
		for(int i = 0; i < result_Slot->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Slot->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(slot, "extension");
	if(cjson_extension)
	{
		result_Slot->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Slot->extension = PushArray(arena, Extension, result_Slot->extension_count);
		for(int i = 0; i < result_Slot->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Slot->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(slot, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Slot->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Slot->modifierExtension = PushArray(arena, Extension, result_Slot->modifierExtension_count);
		for(int i = 0; i < result_Slot->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Slot->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(slot, "identifier");
	if(cjson_identifier)
	{
		result_Slot->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Slot->identifier = PushArray(arena, Identifier, result_Slot->identifier_count);
		for(int i = 0; i < result_Slot->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Slot->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_serviceCategory =  cJSON_GetObjectItem(slot, "serviceCategory");
	if(cjson_serviceCategory)
	{
		result_Slot->serviceCategory_count = cJSON_GetArraySize(cjson_serviceCategory);
		result_Slot->serviceCategory = PushArray(arena, CodeableConcept, result_Slot->serviceCategory_count);
		for(int i = 0; i < result_Slot->serviceCategory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_serviceCategory, i);
			result_Slot->serviceCategory[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_serviceType =  cJSON_GetObjectItem(slot, "serviceType");
	if(cjson_serviceType)
	{
		result_Slot->serviceType_count = cJSON_GetArraySize(cjson_serviceType);
		result_Slot->serviceType = PushArray(arena, CodeableConcept, result_Slot->serviceType_count);
		for(int i = 0; i < result_Slot->serviceType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_serviceType, i);
			result_Slot->serviceType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_specialty =  cJSON_GetObjectItem(slot, "specialty");
	if(cjson_specialty)
	{
		result_Slot->specialty_count = cJSON_GetArraySize(cjson_specialty);
		result_Slot->specialty = PushArray(arena, CodeableConcept, result_Slot->specialty_count);
		for(int i = 0; i < result_Slot->specialty_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialty, i);
			result_Slot->specialty[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_appointmentType =  cJSON_GetObjectItem(slot, "appointmentType");
	if(cjson_appointmentType)
	{
		result_Slot->appointmentType = Deserialize_CodeableConcept(arena, cjson_appointmentType);
	}
	cJSON *cjson_schedule =  cJSON_GetObjectItem(slot, "schedule");
	if(cjson_schedule)
	{
		result_Slot->schedule = Deserialize_Reference(arena, cjson_schedule);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(slot, "status");
	if(cjson_status)
	{
		result_Slot->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_start =  cJSON_GetObjectItem(slot, "start");
	if(cjson_start)
	{
		result_Slot->start = Str8C(cJSON_GetStringValue(cjson_start));
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(slot, "end");
	if(cjson_end)
	{
		result_Slot->end = Str8C(cJSON_GetStringValue(cjson_end));
	}
	cJSON *cjson_overbooked =  cJSON_GetObjectItem(slot, "overbooked");
	if(cjson_overbooked)
	{
		result_Slot->overbooked = (boolean)cJSON_IsTrue(cjson_overbooked);
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(slot, "comment");
	if(cjson_comment)
	{
		result_Slot->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_Slot;
}

Specimen*
Deserialize_Specimen(Arena *arena, cJSON *specimen)
{
	Specimen *result_Specimen = PushArray(arena, Specimen, 1);
	result_Specimen->resourceType = ResourceType::Specimen;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimen, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimen, "id");
	if(cjson_id)
	{
		result_Specimen->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(specimen, "meta");
	if(cjson_meta)
	{
		result_Specimen->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(specimen, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Specimen->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(specimen, "language");
	if(cjson_language)
	{
		result_Specimen->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(specimen, "text");
	if(cjson_text)
	{
		result_Specimen->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(specimen, "contained");
	if(cjson_contained)
	{
		result_Specimen->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Specimen->contained = PushArray(arena, Resource, result_Specimen->contained_count);
		for(int i = 0; i < result_Specimen->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Specimen->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimen, "extension");
	if(cjson_extension)
	{
		result_Specimen->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Specimen->extension = PushArray(arena, Extension, result_Specimen->extension_count);
		for(int i = 0; i < result_Specimen->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Specimen->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimen, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Specimen->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Specimen->modifierExtension = PushArray(arena, Extension, result_Specimen->modifierExtension_count);
		for(int i = 0; i < result_Specimen->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Specimen->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(specimen, "identifier");
	if(cjson_identifier)
	{
		result_Specimen->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Specimen->identifier = PushArray(arena, Identifier, result_Specimen->identifier_count);
		for(int i = 0; i < result_Specimen->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Specimen->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_accessionIdentifier =  cJSON_GetObjectItem(specimen, "accessionIdentifier");
	if(cjson_accessionIdentifier)
	{
		result_Specimen->accessionIdentifier = Deserialize_Identifier(arena, cjson_accessionIdentifier);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(specimen, "status");
	if(cjson_status)
	{
		result_Specimen->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(specimen, "type");
	if(cjson_type)
	{
		result_Specimen->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_subject =  cJSON_GetObjectItem(specimen, "subject");
	if(cjson_subject)
	{
		result_Specimen->subject = Deserialize_Reference(arena, cjson_subject);
	}
	cJSON *cjson_receivedTime =  cJSON_GetObjectItem(specimen, "receivedTime");
	if(cjson_receivedTime)
	{
		result_Specimen->receivedTime = Str8C(cJSON_GetStringValue(cjson_receivedTime));
	}
	cJSON *cjson_parent =  cJSON_GetObjectItem(specimen, "parent");
	if(cjson_parent)
	{
		result_Specimen->parent_count = cJSON_GetArraySize(cjson_parent);
		result_Specimen->parent = PushArray(arena, Reference, result_Specimen->parent_count);
		for(int i = 0; i < result_Specimen->parent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parent, i);
			result_Specimen->parent[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_request =  cJSON_GetObjectItem(specimen, "request");
	if(cjson_request)
	{
		result_Specimen->request_count = cJSON_GetArraySize(cjson_request);
		result_Specimen->request = PushArray(arena, Reference, result_Specimen->request_count);
		for(int i = 0; i < result_Specimen->request_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_request, i);
			result_Specimen->request[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_collection =  cJSON_GetObjectItem(specimen, "collection");
	if(cjson_collection)
	{
		result_Specimen->collection = Deserialize_Specimen_Collection(arena, cjson_collection);
	}
	cJSON *cjson_processing =  cJSON_GetObjectItem(specimen, "processing");
	if(cjson_processing)
	{
		result_Specimen->processing_count = cJSON_GetArraySize(cjson_processing);
		result_Specimen->processing = PushArray(arena, Specimen_Processing, result_Specimen->processing_count);
		for(int i = 0; i < result_Specimen->processing_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_processing, i);
			result_Specimen->processing[i] = *Deserialize_Specimen_Processing(arena, internal);
		}

	}
	cJSON *cjson_container =  cJSON_GetObjectItem(specimen, "container");
	if(cjson_container)
	{
		result_Specimen->container_count = cJSON_GetArraySize(cjson_container);
		result_Specimen->container = PushArray(arena, Specimen_Container, result_Specimen->container_count);
		for(int i = 0; i < result_Specimen->container_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_container, i);
			result_Specimen->container[i] = *Deserialize_Specimen_Container(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(specimen, "condition");
	if(cjson_condition)
	{
		result_Specimen->condition_count = cJSON_GetArraySize(cjson_condition);
		result_Specimen->condition = PushArray(arena, CodeableConcept, result_Specimen->condition_count);
		for(int i = 0; i < result_Specimen->condition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_condition, i);
			result_Specimen->condition[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(specimen, "note");
	if(cjson_note)
	{
		result_Specimen->note_count = cJSON_GetArraySize(cjson_note);
		result_Specimen->note = PushArray(arena, Annotation, result_Specimen->note_count);
		for(int i = 0; i < result_Specimen->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Specimen->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_Specimen;
}

Specimen_Collection*
Deserialize_Specimen_Collection(Arena *arena, cJSON *specimen_Collection)
{
	Specimen_Collection *result_Specimen_Collection = PushArray(arena, Specimen_Collection, 1);
	result_Specimen_Collection->resourceType = ResourceType::Specimen_Collection;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimen_Collection, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimen_Collection, "id");
	if(cjson_id)
	{
		result_Specimen_Collection->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimen_Collection, "extension");
	if(cjson_extension)
	{
		result_Specimen_Collection->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Specimen_Collection->extension = PushArray(arena, Extension, result_Specimen_Collection->extension_count);
		for(int i = 0; i < result_Specimen_Collection->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Specimen_Collection->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimen_Collection, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Specimen_Collection->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Specimen_Collection->modifierExtension = PushArray(arena, Extension, result_Specimen_Collection->modifierExtension_count);
		for(int i = 0; i < result_Specimen_Collection->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Specimen_Collection->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_collector =  cJSON_GetObjectItem(specimen_Collection, "collector");
	if(cjson_collector)
	{
		result_Specimen_Collection->collector = Deserialize_Reference(arena, cjson_collector);
	}
	if((bool)cJSON_HasObjectItem(specimen_Collection, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Collection, "valueDateTime");
		result_Specimen_Collection->collected.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Specimen_Collection->collected_type = Specimen_Collection::CollectedType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(specimen_Collection, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Collection, "valuePeriod");
		result_Specimen_Collection->collected.valuePeriod = Deserialize_Period(arena, item);
		result_Specimen_Collection->collected_type = Specimen_Collection::CollectedType::Period;
	}


	cJSON *cjson_duration =  cJSON_GetObjectItem(specimen_Collection, "duration");
	if(cjson_duration)
	{
		result_Specimen_Collection->duration = Deserialize_Duration(arena, cjson_duration);
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(specimen_Collection, "quantity");
	if(cjson_quantity)
	{
		result_Specimen_Collection->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(specimen_Collection, "method");
	if(cjson_method)
	{
		result_Specimen_Collection->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_bodySite =  cJSON_GetObjectItem(specimen_Collection, "bodySite");
	if(cjson_bodySite)
	{
		result_Specimen_Collection->bodySite = Deserialize_CodeableConcept(arena, cjson_bodySite);
	}
	if((bool)cJSON_HasObjectItem(specimen_Collection, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Collection, "valueCodeableConcept");
		result_Specimen_Collection->fastingStatus.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Specimen_Collection->fastingStatus_type = Specimen_Collection::FastingStatusType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(specimen_Collection, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Collection, "valueDuration");
		result_Specimen_Collection->fastingStatus.valueDuration = Deserialize_Duration(arena, item);
		result_Specimen_Collection->fastingStatus_type = Specimen_Collection::FastingStatusType::Duration;
	}


	return result_Specimen_Collection;
}

Specimen_Processing*
Deserialize_Specimen_Processing(Arena *arena, cJSON *specimen_Processing)
{
	Specimen_Processing *result_Specimen_Processing = PushArray(arena, Specimen_Processing, 1);
	result_Specimen_Processing->resourceType = ResourceType::Specimen_Processing;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimen_Processing, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimen_Processing, "id");
	if(cjson_id)
	{
		result_Specimen_Processing->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimen_Processing, "extension");
	if(cjson_extension)
	{
		result_Specimen_Processing->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Specimen_Processing->extension = PushArray(arena, Extension, result_Specimen_Processing->extension_count);
		for(int i = 0; i < result_Specimen_Processing->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Specimen_Processing->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimen_Processing, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Specimen_Processing->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Specimen_Processing->modifierExtension = PushArray(arena, Extension, result_Specimen_Processing->modifierExtension_count);
		for(int i = 0; i < result_Specimen_Processing->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Specimen_Processing->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(specimen_Processing, "description");
	if(cjson_description)
	{
		result_Specimen_Processing->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_procedure =  cJSON_GetObjectItem(specimen_Processing, "procedure");
	if(cjson_procedure)
	{
		result_Specimen_Processing->procedure = Deserialize_CodeableConcept(arena, cjson_procedure);
	}
	cJSON *cjson_additive =  cJSON_GetObjectItem(specimen_Processing, "additive");
	if(cjson_additive)
	{
		result_Specimen_Processing->additive_count = cJSON_GetArraySize(cjson_additive);
		result_Specimen_Processing->additive = PushArray(arena, Reference, result_Specimen_Processing->additive_count);
		for(int i = 0; i < result_Specimen_Processing->additive_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_additive, i);
			result_Specimen_Processing->additive[i] = *Deserialize_Reference(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(specimen_Processing, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Processing, "valueDateTime");
		result_Specimen_Processing->time.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Specimen_Processing->time_type = Specimen_Processing::TimeType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(specimen_Processing, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Processing, "valuePeriod");
		result_Specimen_Processing->time.valuePeriod = Deserialize_Period(arena, item);
		result_Specimen_Processing->time_type = Specimen_Processing::TimeType::Period;
	}


	return result_Specimen_Processing;
}

Specimen_Container*
Deserialize_Specimen_Container(Arena *arena, cJSON *specimen_Container)
{
	Specimen_Container *result_Specimen_Container = PushArray(arena, Specimen_Container, 1);
	result_Specimen_Container->resourceType = ResourceType::Specimen_Container;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimen_Container, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimen_Container, "id");
	if(cjson_id)
	{
		result_Specimen_Container->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimen_Container, "extension");
	if(cjson_extension)
	{
		result_Specimen_Container->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Specimen_Container->extension = PushArray(arena, Extension, result_Specimen_Container->extension_count);
		for(int i = 0; i < result_Specimen_Container->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Specimen_Container->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimen_Container, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Specimen_Container->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Specimen_Container->modifierExtension = PushArray(arena, Extension, result_Specimen_Container->modifierExtension_count);
		for(int i = 0; i < result_Specimen_Container->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Specimen_Container->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(specimen_Container, "identifier");
	if(cjson_identifier)
	{
		result_Specimen_Container->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Specimen_Container->identifier = PushArray(arena, Identifier, result_Specimen_Container->identifier_count);
		for(int i = 0; i < result_Specimen_Container->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Specimen_Container->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(specimen_Container, "description");
	if(cjson_description)
	{
		result_Specimen_Container->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(specimen_Container, "type");
	if(cjson_type)
	{
		result_Specimen_Container->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_capacity =  cJSON_GetObjectItem(specimen_Container, "capacity");
	if(cjson_capacity)
	{
		result_Specimen_Container->capacity = Deserialize_Quantity(arena, cjson_capacity);
	}
	cJSON *cjson_specimenQuantity =  cJSON_GetObjectItem(specimen_Container, "specimenQuantity");
	if(cjson_specimenQuantity)
	{
		result_Specimen_Container->specimenQuantity = Deserialize_Quantity(arena, cjson_specimenQuantity);
	}
	if((bool)cJSON_HasObjectItem(specimen_Container, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Container, "valueCodeableConcept");
		result_Specimen_Container->additive.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Specimen_Container->additive_type = Specimen_Container::AdditiveType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(specimen_Container, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimen_Container, "valueReference");
		result_Specimen_Container->additive.valueReference = Deserialize_Reference(arena, item);
		result_Specimen_Container->additive_type = Specimen_Container::AdditiveType::Reference;
	}


	return result_Specimen_Container;
}

SpecimenDefinition*
Deserialize_SpecimenDefinition(Arena *arena, cJSON *specimenDefinition)
{
	SpecimenDefinition *result_SpecimenDefinition = PushArray(arena, SpecimenDefinition, 1);
	result_SpecimenDefinition->resourceType = ResourceType::SpecimenDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimenDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimenDefinition, "id");
	if(cjson_id)
	{
		result_SpecimenDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(specimenDefinition, "meta");
	if(cjson_meta)
	{
		result_SpecimenDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(specimenDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SpecimenDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(specimenDefinition, "language");
	if(cjson_language)
	{
		result_SpecimenDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(specimenDefinition, "text");
	if(cjson_text)
	{
		result_SpecimenDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(specimenDefinition, "contained");
	if(cjson_contained)
	{
		result_SpecimenDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SpecimenDefinition->contained = PushArray(arena, Resource, result_SpecimenDefinition->contained_count);
		for(int i = 0; i < result_SpecimenDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SpecimenDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimenDefinition, "extension");
	if(cjson_extension)
	{
		result_SpecimenDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SpecimenDefinition->extension = PushArray(arena, Extension, result_SpecimenDefinition->extension_count);
		for(int i = 0; i < result_SpecimenDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SpecimenDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimenDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SpecimenDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SpecimenDefinition->modifierExtension = PushArray(arena, Extension, result_SpecimenDefinition->modifierExtension_count);
		for(int i = 0; i < result_SpecimenDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SpecimenDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(specimenDefinition, "identifier");
	if(cjson_identifier)
	{
		result_SpecimenDefinition->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_typeCollected =  cJSON_GetObjectItem(specimenDefinition, "typeCollected");
	if(cjson_typeCollected)
	{
		result_SpecimenDefinition->typeCollected = Deserialize_CodeableConcept(arena, cjson_typeCollected);
	}
	cJSON *cjson_patientPreparation =  cJSON_GetObjectItem(specimenDefinition, "patientPreparation");
	if(cjson_patientPreparation)
	{
		result_SpecimenDefinition->patientPreparation_count = cJSON_GetArraySize(cjson_patientPreparation);
		result_SpecimenDefinition->patientPreparation = PushArray(arena, CodeableConcept, result_SpecimenDefinition->patientPreparation_count);
		for(int i = 0; i < result_SpecimenDefinition->patientPreparation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_patientPreparation, i);
			result_SpecimenDefinition->patientPreparation[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_timeAspect =  cJSON_GetObjectItem(specimenDefinition, "timeAspect");
	if(cjson_timeAspect)
	{
		result_SpecimenDefinition->timeAspect = Str8C(cJSON_GetStringValue(cjson_timeAspect));
	}
	cJSON *cjson_collection =  cJSON_GetObjectItem(specimenDefinition, "collection");
	if(cjson_collection)
	{
		result_SpecimenDefinition->collection_count = cJSON_GetArraySize(cjson_collection);
		result_SpecimenDefinition->collection = PushArray(arena, CodeableConcept, result_SpecimenDefinition->collection_count);
		for(int i = 0; i < result_SpecimenDefinition->collection_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_collection, i);
			result_SpecimenDefinition->collection[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_typeTested =  cJSON_GetObjectItem(specimenDefinition, "typeTested");
	if(cjson_typeTested)
	{
		result_SpecimenDefinition->typeTested_count = cJSON_GetArraySize(cjson_typeTested);
		result_SpecimenDefinition->typeTested = PushArray(arena, SpecimenDefinition_TypeTested, result_SpecimenDefinition->typeTested_count);
		for(int i = 0; i < result_SpecimenDefinition->typeTested_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_typeTested, i);
			result_SpecimenDefinition->typeTested[i] = *Deserialize_SpecimenDefinition_TypeTested(arena, internal);
		}

	}
	return result_SpecimenDefinition;
}

SpecimenDefinition_TypeTested*
Deserialize_SpecimenDefinition_TypeTested(Arena *arena, cJSON *specimenDefinition_TypeTested)
{
	SpecimenDefinition_TypeTested *result_SpecimenDefinition_TypeTested = PushArray(arena, SpecimenDefinition_TypeTested, 1);
	result_SpecimenDefinition_TypeTested->resourceType = ResourceType::SpecimenDefinition_TypeTested;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "id");
	if(cjson_id)
	{
		result_SpecimenDefinition_TypeTested->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "extension");
	if(cjson_extension)
	{
		result_SpecimenDefinition_TypeTested->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SpecimenDefinition_TypeTested->extension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested->extension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SpecimenDefinition_TypeTested->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SpecimenDefinition_TypeTested->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SpecimenDefinition_TypeTested->modifierExtension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested->modifierExtension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SpecimenDefinition_TypeTested->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_isDerived =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "isDerived");
	if(cjson_isDerived)
	{
		result_SpecimenDefinition_TypeTested->isDerived = (boolean)cJSON_IsTrue(cjson_isDerived);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "type");
	if(cjson_type)
	{
		result_SpecimenDefinition_TypeTested->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_preference =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "preference");
	if(cjson_preference)
	{
		result_SpecimenDefinition_TypeTested->preference = Str8C(cJSON_GetStringValue(cjson_preference));
	}
	cJSON *cjson_container =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "container");
	if(cjson_container)
	{
		result_SpecimenDefinition_TypeTested->container = Deserialize_SpecimenDefinition_TypeTested_Container(arena, cjson_container);
	}
	cJSON *cjson_requirement =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "requirement");
	if(cjson_requirement)
	{
		result_SpecimenDefinition_TypeTested->requirement = Str8C(cJSON_GetStringValue(cjson_requirement));
	}
	cJSON *cjson_retentionTime =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "retentionTime");
	if(cjson_retentionTime)
	{
		result_SpecimenDefinition_TypeTested->retentionTime = Deserialize_Duration(arena, cjson_retentionTime);
	}
	cJSON *cjson_rejectionCriterion =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "rejectionCriterion");
	if(cjson_rejectionCriterion)
	{
		result_SpecimenDefinition_TypeTested->rejectionCriterion_count = cJSON_GetArraySize(cjson_rejectionCriterion);
		result_SpecimenDefinition_TypeTested->rejectionCriterion = PushArray(arena, CodeableConcept, result_SpecimenDefinition_TypeTested->rejectionCriterion_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested->rejectionCriterion_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rejectionCriterion, i);
			result_SpecimenDefinition_TypeTested->rejectionCriterion[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_handling =  cJSON_GetObjectItem(specimenDefinition_TypeTested, "handling");
	if(cjson_handling)
	{
		result_SpecimenDefinition_TypeTested->handling_count = cJSON_GetArraySize(cjson_handling);
		result_SpecimenDefinition_TypeTested->handling = PushArray(arena, SpecimenDefinition_TypeTested_Handling, result_SpecimenDefinition_TypeTested->handling_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested->handling_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_handling, i);
			result_SpecimenDefinition_TypeTested->handling[i] = *Deserialize_SpecimenDefinition_TypeTested_Handling(arena, internal);
		}

	}
	return result_SpecimenDefinition_TypeTested;
}

SpecimenDefinition_TypeTested_Container*
Deserialize_SpecimenDefinition_TypeTested_Container(Arena *arena, cJSON *specimenDefinition_TypeTested_Container)
{
	SpecimenDefinition_TypeTested_Container *result_SpecimenDefinition_TypeTested_Container = PushArray(arena, SpecimenDefinition_TypeTested_Container, 1);
	result_SpecimenDefinition_TypeTested_Container->resourceType = ResourceType::SpecimenDefinition_TypeTested_Container;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "id");
	if(cjson_id)
	{
		result_SpecimenDefinition_TypeTested_Container->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "extension");
	if(cjson_extension)
	{
		result_SpecimenDefinition_TypeTested_Container->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SpecimenDefinition_TypeTested_Container->extension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested_Container->extension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested_Container->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SpecimenDefinition_TypeTested_Container->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SpecimenDefinition_TypeTested_Container->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SpecimenDefinition_TypeTested_Container->modifierExtension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested_Container->modifierExtension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested_Container->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SpecimenDefinition_TypeTested_Container->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_material =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "material");
	if(cjson_material)
	{
		result_SpecimenDefinition_TypeTested_Container->material = Deserialize_CodeableConcept(arena, cjson_material);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "type");
	if(cjson_type)
	{
		result_SpecimenDefinition_TypeTested_Container->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_cap =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "cap");
	if(cjson_cap)
	{
		result_SpecimenDefinition_TypeTested_Container->cap = Deserialize_CodeableConcept(arena, cjson_cap);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "description");
	if(cjson_description)
	{
		result_SpecimenDefinition_TypeTested_Container->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_capacity =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "capacity");
	if(cjson_capacity)
	{
		result_SpecimenDefinition_TypeTested_Container->capacity = Deserialize_Quantity(arena, cjson_capacity);
	}
	if((bool)cJSON_HasObjectItem(specimenDefinition_TypeTested_Container, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "valueQuantity");
		result_SpecimenDefinition_TypeTested_Container->minimumVolume.valueQuantity = Deserialize_Quantity(arena, item);
		result_SpecimenDefinition_TypeTested_Container->minimumVolume_type = SpecimenDefinition_TypeTested_Container::MinimumVolumeType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(specimenDefinition_TypeTested_Container, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "valueString");
		result_SpecimenDefinition_TypeTested_Container->minimumVolume.valueString = Str8C(cJSON_GetStringValue(item));
		result_SpecimenDefinition_TypeTested_Container->minimumVolume_type = SpecimenDefinition_TypeTested_Container::MinimumVolumeType::fhir_string;
	}


	cJSON *cjson_additive =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "additive");
	if(cjson_additive)
	{
		result_SpecimenDefinition_TypeTested_Container->additive_count = cJSON_GetArraySize(cjson_additive);
		result_SpecimenDefinition_TypeTested_Container->additive = PushArray(arena, SpecimenDefinition_TypeTested_Container_Additive, result_SpecimenDefinition_TypeTested_Container->additive_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested_Container->additive_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_additive, i);
			result_SpecimenDefinition_TypeTested_Container->additive[i] = *Deserialize_SpecimenDefinition_TypeTested_Container_Additive(arena, internal);
		}

	}
	cJSON *cjson_preparation =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container, "preparation");
	if(cjson_preparation)
	{
		result_SpecimenDefinition_TypeTested_Container->preparation = Str8C(cJSON_GetStringValue(cjson_preparation));
	}
	return result_SpecimenDefinition_TypeTested_Container;
}

SpecimenDefinition_TypeTested_Container_Additive*
Deserialize_SpecimenDefinition_TypeTested_Container_Additive(Arena *arena, cJSON *specimenDefinition_TypeTested_Container_Additive)
{
	SpecimenDefinition_TypeTested_Container_Additive *result_SpecimenDefinition_TypeTested_Container_Additive = PushArray(arena, SpecimenDefinition_TypeTested_Container_Additive, 1);
	result_SpecimenDefinition_TypeTested_Container_Additive->resourceType = ResourceType::SpecimenDefinition_TypeTested_Container_Additive;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container_Additive, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container_Additive, "id");
	if(cjson_id)
	{
		result_SpecimenDefinition_TypeTested_Container_Additive->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container_Additive, "extension");
	if(cjson_extension)
	{
		result_SpecimenDefinition_TypeTested_Container_Additive->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SpecimenDefinition_TypeTested_Container_Additive->extension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested_Container_Additive->extension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested_Container_Additive->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SpecimenDefinition_TypeTested_Container_Additive->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Container_Additive, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SpecimenDefinition_TypeTested_Container_Additive->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SpecimenDefinition_TypeTested_Container_Additive->modifierExtension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested_Container_Additive->modifierExtension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested_Container_Additive->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SpecimenDefinition_TypeTested_Container_Additive->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(specimenDefinition_TypeTested_Container_Additive, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimenDefinition_TypeTested_Container_Additive, "valueCodeableConcept");
		result_SpecimenDefinition_TypeTested_Container_Additive->additive.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_SpecimenDefinition_TypeTested_Container_Additive->additive_type = SpecimenDefinition_TypeTested_Container_Additive::AdditiveType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(specimenDefinition_TypeTested_Container_Additive, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(specimenDefinition_TypeTested_Container_Additive, "valueReference");
		result_SpecimenDefinition_TypeTested_Container_Additive->additive.valueReference = Deserialize_Reference(arena, item);
		result_SpecimenDefinition_TypeTested_Container_Additive->additive_type = SpecimenDefinition_TypeTested_Container_Additive::AdditiveType::Reference;
	}


	return result_SpecimenDefinition_TypeTested_Container_Additive;
}

SpecimenDefinition_TypeTested_Handling*
Deserialize_SpecimenDefinition_TypeTested_Handling(Arena *arena, cJSON *specimenDefinition_TypeTested_Handling)
{
	SpecimenDefinition_TypeTested_Handling *result_SpecimenDefinition_TypeTested_Handling = PushArray(arena, SpecimenDefinition_TypeTested_Handling, 1);
	result_SpecimenDefinition_TypeTested_Handling->resourceType = ResourceType::SpecimenDefinition_TypeTested_Handling;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "id");
	if(cjson_id)
	{
		result_SpecimenDefinition_TypeTested_Handling->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "extension");
	if(cjson_extension)
	{
		result_SpecimenDefinition_TypeTested_Handling->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SpecimenDefinition_TypeTested_Handling->extension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested_Handling->extension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested_Handling->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SpecimenDefinition_TypeTested_Handling->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SpecimenDefinition_TypeTested_Handling->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SpecimenDefinition_TypeTested_Handling->modifierExtension = PushArray(arena, Extension, result_SpecimenDefinition_TypeTested_Handling->modifierExtension_count);
		for(int i = 0; i < result_SpecimenDefinition_TypeTested_Handling->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SpecimenDefinition_TypeTested_Handling->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_temperatureQualifier =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "temperatureQualifier");
	if(cjson_temperatureQualifier)
	{
		result_SpecimenDefinition_TypeTested_Handling->temperatureQualifier = Deserialize_CodeableConcept(arena, cjson_temperatureQualifier);
	}
	cJSON *cjson_temperatureRange =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "temperatureRange");
	if(cjson_temperatureRange)
	{
		result_SpecimenDefinition_TypeTested_Handling->temperatureRange = Deserialize_Range(arena, cjson_temperatureRange);
	}
	cJSON *cjson_maxDuration =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "maxDuration");
	if(cjson_maxDuration)
	{
		result_SpecimenDefinition_TypeTested_Handling->maxDuration = Deserialize_Duration(arena, cjson_maxDuration);
	}
	cJSON *cjson_instruction =  cJSON_GetObjectItem(specimenDefinition_TypeTested_Handling, "instruction");
	if(cjson_instruction)
	{
		result_SpecimenDefinition_TypeTested_Handling->instruction = Str8C(cJSON_GetStringValue(cjson_instruction));
	}
	return result_SpecimenDefinition_TypeTested_Handling;
}

StructureDefinition*
Deserialize_StructureDefinition(Arena *arena, cJSON *structureDefinition)
{
	StructureDefinition *result_StructureDefinition = PushArray(arena, StructureDefinition, 1);
	result_StructureDefinition->resourceType = ResourceType::StructureDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureDefinition, "id");
	if(cjson_id)
	{
		result_StructureDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(structureDefinition, "meta");
	if(cjson_meta)
	{
		result_StructureDefinition->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(structureDefinition, "implicitRules");
	if(cjson_implicitRules)
	{
		result_StructureDefinition->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(structureDefinition, "language");
	if(cjson_language)
	{
		result_StructureDefinition->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(structureDefinition, "text");
	if(cjson_text)
	{
		result_StructureDefinition->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(structureDefinition, "contained");
	if(cjson_contained)
	{
		result_StructureDefinition->contained_count = cJSON_GetArraySize(cjson_contained);
		result_StructureDefinition->contained = PushArray(arena, Resource, result_StructureDefinition->contained_count);
		for(int i = 0; i < result_StructureDefinition->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_StructureDefinition->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureDefinition, "extension");
	if(cjson_extension)
	{
		result_StructureDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureDefinition->extension = PushArray(arena, Extension, result_StructureDefinition->extension_count);
		for(int i = 0; i < result_StructureDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureDefinition->modifierExtension = PushArray(arena, Extension, result_StructureDefinition->modifierExtension_count);
		for(int i = 0; i < result_StructureDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(structureDefinition, "url");
	if(cjson_url)
	{
		result_StructureDefinition->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(structureDefinition, "identifier");
	if(cjson_identifier)
	{
		result_StructureDefinition->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_StructureDefinition->identifier = PushArray(arena, Identifier, result_StructureDefinition->identifier_count);
		for(int i = 0; i < result_StructureDefinition->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_StructureDefinition->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(structureDefinition, "version");
	if(cjson_version)
	{
		result_StructureDefinition->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(structureDefinition, "name");
	if(cjson_name)
	{
		result_StructureDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(structureDefinition, "title");
	if(cjson_title)
	{
		result_StructureDefinition->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(structureDefinition, "status");
	if(cjson_status)
	{
		result_StructureDefinition->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(structureDefinition, "experimental");
	if(cjson_experimental)
	{
		result_StructureDefinition->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(structureDefinition, "date");
	if(cjson_date)
	{
		result_StructureDefinition->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(structureDefinition, "publisher");
	if(cjson_publisher)
	{
		result_StructureDefinition->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(structureDefinition, "contact");
	if(cjson_contact)
	{
		result_StructureDefinition->contact_count = cJSON_GetArraySize(cjson_contact);
		result_StructureDefinition->contact = PushArray(arena, ContactDetail, result_StructureDefinition->contact_count);
		for(int i = 0; i < result_StructureDefinition->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_StructureDefinition->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(structureDefinition, "description");
	if(cjson_description)
	{
		result_StructureDefinition->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(structureDefinition, "useContext");
	if(cjson_useContext)
	{
		result_StructureDefinition->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_StructureDefinition->useContext = PushArray(arena, UsageContext, result_StructureDefinition->useContext_count);
		for(int i = 0; i < result_StructureDefinition->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_StructureDefinition->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(structureDefinition, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_StructureDefinition->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_StructureDefinition->jurisdiction = PushArray(arena, CodeableConcept, result_StructureDefinition->jurisdiction_count);
		for(int i = 0; i < result_StructureDefinition->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_StructureDefinition->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(structureDefinition, "purpose");
	if(cjson_purpose)
	{
		result_StructureDefinition->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(structureDefinition, "copyright");
	if(cjson_copyright)
	{
		result_StructureDefinition->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_keyword =  cJSON_GetObjectItem(structureDefinition, "keyword");
	if(cjson_keyword)
	{
		result_StructureDefinition->keyword_count = cJSON_GetArraySize(cjson_keyword);
		result_StructureDefinition->keyword = PushArray(arena, Coding, result_StructureDefinition->keyword_count);
		for(int i = 0; i < result_StructureDefinition->keyword_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_keyword, i);
			result_StructureDefinition->keyword[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_fhirVersion =  cJSON_GetObjectItem(structureDefinition, "fhirVersion");
	if(cjson_fhirVersion)
	{
		result_StructureDefinition->fhirVersion = Str8C(cJSON_GetStringValue(cjson_fhirVersion));
	}
	cJSON *cjson_mapping =  cJSON_GetObjectItem(structureDefinition, "mapping");
	if(cjson_mapping)
	{
		result_StructureDefinition->mapping_count = cJSON_GetArraySize(cjson_mapping);
		result_StructureDefinition->mapping = PushArray(arena, StructureDefinition_Mapping, result_StructureDefinition->mapping_count);
		for(int i = 0; i < result_StructureDefinition->mapping_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_mapping, i);
			result_StructureDefinition->mapping[i] = *Deserialize_StructureDefinition_Mapping(arena, internal);
		}

	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(structureDefinition, "kind");
	if(cjson_kind)
	{
		result_StructureDefinition->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_abstract =  cJSON_GetObjectItem(structureDefinition, "abstract");
	if(cjson_abstract)
	{
		result_StructureDefinition->abstract = (boolean)cJSON_IsTrue(cjson_abstract);
	}
	cJSON *cjson_context =  cJSON_GetObjectItem(structureDefinition, "context");
	if(cjson_context)
	{
		result_StructureDefinition->context_count = cJSON_GetArraySize(cjson_context);
		result_StructureDefinition->context = PushArray(arena, StructureDefinition_Context, result_StructureDefinition->context_count);
		for(int i = 0; i < result_StructureDefinition->context_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_context, i);
			result_StructureDefinition->context[i] = *Deserialize_StructureDefinition_Context(arena, internal);
		}

	}
	cJSON *cjson_contextInvariant =  cJSON_GetObjectItem(structureDefinition, "contextInvariant");
	if(cjson_contextInvariant)
	{
		result_StructureDefinition->contextInvariant_count = cJSON_GetArraySize(cjson_contextInvariant);
		result_StructureDefinition->contextInvariant = PushArray(arena, fhir_string, result_StructureDefinition->contextInvariant_count);
		for(int i = 0; i < result_StructureDefinition->contextInvariant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contextInvariant, i);
			result_StructureDefinition->contextInvariant[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(structureDefinition, "type");
	if(cjson_type)
	{
		result_StructureDefinition->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_baseDefinition =  cJSON_GetObjectItem(structureDefinition, "baseDefinition");
	if(cjson_baseDefinition)
	{
		result_StructureDefinition->baseDefinition = Str8C(cJSON_GetStringValue(cjson_baseDefinition));
	}
	cJSON *cjson_derivation =  cJSON_GetObjectItem(structureDefinition, "derivation");
	if(cjson_derivation)
	{
		result_StructureDefinition->derivation = Str8C(cJSON_GetStringValue(cjson_derivation));
	}
	cJSON *cjson_snapshot =  cJSON_GetObjectItem(structureDefinition, "snapshot");
	if(cjson_snapshot)
	{
		result_StructureDefinition->snapshot = Deserialize_StructureDefinition_Snapshot(arena, cjson_snapshot);
	}
	cJSON *cjson_differential =  cJSON_GetObjectItem(structureDefinition, "differential");
	if(cjson_differential)
	{
		result_StructureDefinition->differential = Deserialize_StructureDefinition_Differential(arena, cjson_differential);
	}
	return result_StructureDefinition;
}

StructureDefinition_Mapping*
Deserialize_StructureDefinition_Mapping(Arena *arena, cJSON *structureDefinition_Mapping)
{
	StructureDefinition_Mapping *result_StructureDefinition_Mapping = PushArray(arena, StructureDefinition_Mapping, 1);
	result_StructureDefinition_Mapping->resourceType = ResourceType::StructureDefinition_Mapping;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureDefinition_Mapping, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureDefinition_Mapping, "id");
	if(cjson_id)
	{
		result_StructureDefinition_Mapping->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureDefinition_Mapping, "extension");
	if(cjson_extension)
	{
		result_StructureDefinition_Mapping->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureDefinition_Mapping->extension = PushArray(arena, Extension, result_StructureDefinition_Mapping->extension_count);
		for(int i = 0; i < result_StructureDefinition_Mapping->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureDefinition_Mapping->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureDefinition_Mapping, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureDefinition_Mapping->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureDefinition_Mapping->modifierExtension = PushArray(arena, Extension, result_StructureDefinition_Mapping->modifierExtension_count);
		for(int i = 0; i < result_StructureDefinition_Mapping->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureDefinition_Mapping->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identity =  cJSON_GetObjectItem(structureDefinition_Mapping, "identity");
	if(cjson_identity)
	{
		result_StructureDefinition_Mapping->identity = Str8C(cJSON_GetStringValue(cjson_identity));
	}
	cJSON *cjson_uri =  cJSON_GetObjectItem(structureDefinition_Mapping, "uri");
	if(cjson_uri)
	{
		result_StructureDefinition_Mapping->uri = Str8C(cJSON_GetStringValue(cjson_uri));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(structureDefinition_Mapping, "name");
	if(cjson_name)
	{
		result_StructureDefinition_Mapping->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(structureDefinition_Mapping, "comment");
	if(cjson_comment)
	{
		result_StructureDefinition_Mapping->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_StructureDefinition_Mapping;
}

StructureDefinition_Context*
Deserialize_StructureDefinition_Context(Arena *arena, cJSON *structureDefinition_Context)
{
	StructureDefinition_Context *result_StructureDefinition_Context = PushArray(arena, StructureDefinition_Context, 1);
	result_StructureDefinition_Context->resourceType = ResourceType::StructureDefinition_Context;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureDefinition_Context, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureDefinition_Context, "id");
	if(cjson_id)
	{
		result_StructureDefinition_Context->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureDefinition_Context, "extension");
	if(cjson_extension)
	{
		result_StructureDefinition_Context->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureDefinition_Context->extension = PushArray(arena, Extension, result_StructureDefinition_Context->extension_count);
		for(int i = 0; i < result_StructureDefinition_Context->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureDefinition_Context->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureDefinition_Context, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureDefinition_Context->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureDefinition_Context->modifierExtension = PushArray(arena, Extension, result_StructureDefinition_Context->modifierExtension_count);
		for(int i = 0; i < result_StructureDefinition_Context->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureDefinition_Context->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(structureDefinition_Context, "type");
	if(cjson_type)
	{
		result_StructureDefinition_Context->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(structureDefinition_Context, "expression");
	if(cjson_expression)
	{
		result_StructureDefinition_Context->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	return result_StructureDefinition_Context;
}

StructureDefinition_Snapshot*
Deserialize_StructureDefinition_Snapshot(Arena *arena, cJSON *structureDefinition_Snapshot)
{
	StructureDefinition_Snapshot *result_StructureDefinition_Snapshot = PushArray(arena, StructureDefinition_Snapshot, 1);
	result_StructureDefinition_Snapshot->resourceType = ResourceType::StructureDefinition_Snapshot;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureDefinition_Snapshot, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureDefinition_Snapshot, "id");
	if(cjson_id)
	{
		result_StructureDefinition_Snapshot->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureDefinition_Snapshot, "extension");
	if(cjson_extension)
	{
		result_StructureDefinition_Snapshot->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureDefinition_Snapshot->extension = PushArray(arena, Extension, result_StructureDefinition_Snapshot->extension_count);
		for(int i = 0; i < result_StructureDefinition_Snapshot->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureDefinition_Snapshot->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureDefinition_Snapshot, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureDefinition_Snapshot->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureDefinition_Snapshot->modifierExtension = PushArray(arena, Extension, result_StructureDefinition_Snapshot->modifierExtension_count);
		for(int i = 0; i < result_StructureDefinition_Snapshot->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureDefinition_Snapshot->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_element =  cJSON_GetObjectItem(structureDefinition_Snapshot, "element");
	if(cjson_element)
	{
		result_StructureDefinition_Snapshot->element_count = cJSON_GetArraySize(cjson_element);
		result_StructureDefinition_Snapshot->element = PushArray(arena, ElementDefinition, result_StructureDefinition_Snapshot->element_count);
		for(int i = 0; i < result_StructureDefinition_Snapshot->element_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_element, i);
			result_StructureDefinition_Snapshot->element[i] = *Deserialize_ElementDefinition(arena, internal);
		}

	}
	return result_StructureDefinition_Snapshot;
}

StructureDefinition_Differential*
Deserialize_StructureDefinition_Differential(Arena *arena, cJSON *structureDefinition_Differential)
{
	StructureDefinition_Differential *result_StructureDefinition_Differential = PushArray(arena, StructureDefinition_Differential, 1);
	result_StructureDefinition_Differential->resourceType = ResourceType::StructureDefinition_Differential;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureDefinition_Differential, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureDefinition_Differential, "id");
	if(cjson_id)
	{
		result_StructureDefinition_Differential->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureDefinition_Differential, "extension");
	if(cjson_extension)
	{
		result_StructureDefinition_Differential->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureDefinition_Differential->extension = PushArray(arena, Extension, result_StructureDefinition_Differential->extension_count);
		for(int i = 0; i < result_StructureDefinition_Differential->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureDefinition_Differential->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureDefinition_Differential, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureDefinition_Differential->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureDefinition_Differential->modifierExtension = PushArray(arena, Extension, result_StructureDefinition_Differential->modifierExtension_count);
		for(int i = 0; i < result_StructureDefinition_Differential->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureDefinition_Differential->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_element =  cJSON_GetObjectItem(structureDefinition_Differential, "element");
	if(cjson_element)
	{
		result_StructureDefinition_Differential->element_count = cJSON_GetArraySize(cjson_element);
		result_StructureDefinition_Differential->element = PushArray(arena, ElementDefinition, result_StructureDefinition_Differential->element_count);
		for(int i = 0; i < result_StructureDefinition_Differential->element_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_element, i);
			result_StructureDefinition_Differential->element[i] = *Deserialize_ElementDefinition(arena, internal);
		}

	}
	return result_StructureDefinition_Differential;
}

StructureMap*
Deserialize_StructureMap(Arena *arena, cJSON *structureMap)
{
	StructureMap *result_StructureMap = PushArray(arena, StructureMap, 1);
	result_StructureMap->resourceType = ResourceType::StructureMap;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap, "id");
	if(cjson_id)
	{
		result_StructureMap->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(structureMap, "meta");
	if(cjson_meta)
	{
		result_StructureMap->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(structureMap, "implicitRules");
	if(cjson_implicitRules)
	{
		result_StructureMap->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(structureMap, "language");
	if(cjson_language)
	{
		result_StructureMap->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(structureMap, "text");
	if(cjson_text)
	{
		result_StructureMap->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(structureMap, "contained");
	if(cjson_contained)
	{
		result_StructureMap->contained_count = cJSON_GetArraySize(cjson_contained);
		result_StructureMap->contained = PushArray(arena, Resource, result_StructureMap->contained_count);
		for(int i = 0; i < result_StructureMap->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_StructureMap->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap, "extension");
	if(cjson_extension)
	{
		result_StructureMap->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap->extension = PushArray(arena, Extension, result_StructureMap->extension_count);
		for(int i = 0; i < result_StructureMap->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap->modifierExtension = PushArray(arena, Extension, result_StructureMap->modifierExtension_count);
		for(int i = 0; i < result_StructureMap->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(structureMap, "url");
	if(cjson_url)
	{
		result_StructureMap->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(structureMap, "identifier");
	if(cjson_identifier)
	{
		result_StructureMap->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_StructureMap->identifier = PushArray(arena, Identifier, result_StructureMap->identifier_count);
		for(int i = 0; i < result_StructureMap->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_StructureMap->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(structureMap, "version");
	if(cjson_version)
	{
		result_StructureMap->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(structureMap, "name");
	if(cjson_name)
	{
		result_StructureMap->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(structureMap, "title");
	if(cjson_title)
	{
		result_StructureMap->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(structureMap, "status");
	if(cjson_status)
	{
		result_StructureMap->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(structureMap, "experimental");
	if(cjson_experimental)
	{
		result_StructureMap->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(structureMap, "date");
	if(cjson_date)
	{
		result_StructureMap->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(structureMap, "publisher");
	if(cjson_publisher)
	{
		result_StructureMap->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(structureMap, "contact");
	if(cjson_contact)
	{
		result_StructureMap->contact_count = cJSON_GetArraySize(cjson_contact);
		result_StructureMap->contact = PushArray(arena, ContactDetail, result_StructureMap->contact_count);
		for(int i = 0; i < result_StructureMap->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_StructureMap->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(structureMap, "description");
	if(cjson_description)
	{
		result_StructureMap->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(structureMap, "useContext");
	if(cjson_useContext)
	{
		result_StructureMap->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_StructureMap->useContext = PushArray(arena, UsageContext, result_StructureMap->useContext_count);
		for(int i = 0; i < result_StructureMap->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_StructureMap->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(structureMap, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_StructureMap->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_StructureMap->jurisdiction = PushArray(arena, CodeableConcept, result_StructureMap->jurisdiction_count);
		for(int i = 0; i < result_StructureMap->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_StructureMap->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(structureMap, "purpose");
	if(cjson_purpose)
	{
		result_StructureMap->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(structureMap, "copyright");
	if(cjson_copyright)
	{
		result_StructureMap->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_structure =  cJSON_GetObjectItem(structureMap, "structure");
	if(cjson_structure)
	{
		result_StructureMap->structure_count = cJSON_GetArraySize(cjson_structure);
		result_StructureMap->structure = PushArray(arena, StructureMap_Structure, result_StructureMap->structure_count);
		for(int i = 0; i < result_StructureMap->structure_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_structure, i);
			result_StructureMap->structure[i] = *Deserialize_StructureMap_Structure(arena, internal);
		}

	}
	cJSON *cjson_import =  cJSON_GetObjectItem(structureMap, "import");
	if(cjson_import)
	{
		result_StructureMap->import_count = cJSON_GetArraySize(cjson_import);
		result_StructureMap->import = PushArray(arena, fhir_canonical, result_StructureMap->import_count);
		for(int i = 0; i < result_StructureMap->import_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_import, i);
			result_StructureMap->import[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_group =  cJSON_GetObjectItem(structureMap, "group");
	if(cjson_group)
	{
		result_StructureMap->group_count = cJSON_GetArraySize(cjson_group);
		result_StructureMap->group = PushArray(arena, StructureMap_Group, result_StructureMap->group_count);
		for(int i = 0; i < result_StructureMap->group_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_group, i);
			result_StructureMap->group[i] = *Deserialize_StructureMap_Group(arena, internal);
		}

	}
	return result_StructureMap;
}

StructureMap_Structure*
Deserialize_StructureMap_Structure(Arena *arena, cJSON *structureMap_Structure)
{
	StructureMap_Structure *result_StructureMap_Structure = PushArray(arena, StructureMap_Structure, 1);
	result_StructureMap_Structure->resourceType = ResourceType::StructureMap_Structure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Structure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Structure, "id");
	if(cjson_id)
	{
		result_StructureMap_Structure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Structure, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Structure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Structure->extension = PushArray(arena, Extension, result_StructureMap_Structure->extension_count);
		for(int i = 0; i < result_StructureMap_Structure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Structure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Structure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Structure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Structure->modifierExtension = PushArray(arena, Extension, result_StructureMap_Structure->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Structure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Structure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(structureMap_Structure, "url");
	if(cjson_url)
	{
		result_StructureMap_Structure->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(structureMap_Structure, "mode");
	if(cjson_mode)
	{
		result_StructureMap_Structure->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_alias =  cJSON_GetObjectItem(structureMap_Structure, "alias");
	if(cjson_alias)
	{
		result_StructureMap_Structure->alias = Str8C(cJSON_GetStringValue(cjson_alias));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(structureMap_Structure, "documentation");
	if(cjson_documentation)
	{
		result_StructureMap_Structure->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_StructureMap_Structure;
}

StructureMap_Group*
Deserialize_StructureMap_Group(Arena *arena, cJSON *structureMap_Group)
{
	StructureMap_Group *result_StructureMap_Group = PushArray(arena, StructureMap_Group, 1);
	result_StructureMap_Group->resourceType = ResourceType::StructureMap_Group;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Group, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Group, "id");
	if(cjson_id)
	{
		result_StructureMap_Group->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Group, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Group->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Group->extension = PushArray(arena, Extension, result_StructureMap_Group->extension_count);
		for(int i = 0; i < result_StructureMap_Group->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Group->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Group, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Group->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Group->modifierExtension = PushArray(arena, Extension, result_StructureMap_Group->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Group->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Group->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(structureMap_Group, "name");
	if(cjson_name)
	{
		result_StructureMap_Group->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_extends =  cJSON_GetObjectItem(structureMap_Group, "extends");
	if(cjson_extends)
	{
		result_StructureMap_Group->extends = Str8C(cJSON_GetStringValue(cjson_extends));
	}
	cJSON *cjson_typeMode =  cJSON_GetObjectItem(structureMap_Group, "typeMode");
	if(cjson_typeMode)
	{
		result_StructureMap_Group->typeMode = Str8C(cJSON_GetStringValue(cjson_typeMode));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(structureMap_Group, "documentation");
	if(cjson_documentation)
	{
		result_StructureMap_Group->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	cJSON *cjson_input =  cJSON_GetObjectItem(structureMap_Group, "input");
	if(cjson_input)
	{
		result_StructureMap_Group->input_count = cJSON_GetArraySize(cjson_input);
		result_StructureMap_Group->input = PushArray(arena, StructureMap_Group_Input, result_StructureMap_Group->input_count);
		for(int i = 0; i < result_StructureMap_Group->input_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_input, i);
			result_StructureMap_Group->input[i] = *Deserialize_StructureMap_Group_Input(arena, internal);
		}

	}
	cJSON *cjson_rule =  cJSON_GetObjectItem(structureMap_Group, "rule");
	if(cjson_rule)
	{
		result_StructureMap_Group->rule_count = cJSON_GetArraySize(cjson_rule);
		result_StructureMap_Group->rule = PushArray(arena, StructureMap_Group_Rule, result_StructureMap_Group->rule_count);
		for(int i = 0; i < result_StructureMap_Group->rule_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rule, i);
			result_StructureMap_Group->rule[i] = *Deserialize_StructureMap_Group_Rule(arena, internal);
		}

	}
	return result_StructureMap_Group;
}

StructureMap_Group_Input*
Deserialize_StructureMap_Group_Input(Arena *arena, cJSON *structureMap_Group_Input)
{
	StructureMap_Group_Input *result_StructureMap_Group_Input = PushArray(arena, StructureMap_Group_Input, 1);
	result_StructureMap_Group_Input->resourceType = ResourceType::StructureMap_Group_Input;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Group_Input, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Group_Input, "id");
	if(cjson_id)
	{
		result_StructureMap_Group_Input->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Group_Input, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Group_Input->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Group_Input->extension = PushArray(arena, Extension, result_StructureMap_Group_Input->extension_count);
		for(int i = 0; i < result_StructureMap_Group_Input->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Group_Input->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Group_Input, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Group_Input->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Group_Input->modifierExtension = PushArray(arena, Extension, result_StructureMap_Group_Input->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Group_Input->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Group_Input->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(structureMap_Group_Input, "name");
	if(cjson_name)
	{
		result_StructureMap_Group_Input->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(structureMap_Group_Input, "type");
	if(cjson_type)
	{
		result_StructureMap_Group_Input->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_mode =  cJSON_GetObjectItem(structureMap_Group_Input, "mode");
	if(cjson_mode)
	{
		result_StructureMap_Group_Input->mode = Str8C(cJSON_GetStringValue(cjson_mode));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(structureMap_Group_Input, "documentation");
	if(cjson_documentation)
	{
		result_StructureMap_Group_Input->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_StructureMap_Group_Input;
}

StructureMap_Group_Rule*
Deserialize_StructureMap_Group_Rule(Arena *arena, cJSON *structureMap_Group_Rule)
{
	StructureMap_Group_Rule *result_StructureMap_Group_Rule = PushArray(arena, StructureMap_Group_Rule, 1);
	result_StructureMap_Group_Rule->resourceType = ResourceType::StructureMap_Group_Rule;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Group_Rule, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Group_Rule, "id");
	if(cjson_id)
	{
		result_StructureMap_Group_Rule->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Group_Rule, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Group_Rule->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Group_Rule->extension = PushArray(arena, Extension, result_StructureMap_Group_Rule->extension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Group_Rule->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Group_Rule, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Group_Rule->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Group_Rule->modifierExtension = PushArray(arena, Extension, result_StructureMap_Group_Rule->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Group_Rule->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(structureMap_Group_Rule, "name");
	if(cjson_name)
	{
		result_StructureMap_Group_Rule->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(structureMap_Group_Rule, "source");
	if(cjson_source)
	{
		result_StructureMap_Group_Rule->source_count = cJSON_GetArraySize(cjson_source);
		result_StructureMap_Group_Rule->source = PushArray(arena, StructureMap_Group_Rule_Source, result_StructureMap_Group_Rule->source_count);
		for(int i = 0; i < result_StructureMap_Group_Rule->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_StructureMap_Group_Rule->source[i] = *Deserialize_StructureMap_Group_Rule_Source(arena, internal);
		}

	}
	cJSON *cjson_target =  cJSON_GetObjectItem(structureMap_Group_Rule, "target");
	if(cjson_target)
	{
		result_StructureMap_Group_Rule->target_count = cJSON_GetArraySize(cjson_target);
		result_StructureMap_Group_Rule->target = PushArray(arena, StructureMap_Group_Rule_Target, result_StructureMap_Group_Rule->target_count);
		for(int i = 0; i < result_StructureMap_Group_Rule->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_StructureMap_Group_Rule->target[i] = *Deserialize_StructureMap_Group_Rule_Target(arena, internal);
		}

	}
	cJSON *cjson_rule =  cJSON_GetObjectItem(structureMap_Group_Rule, "rule");
	if(cjson_rule)
	{
		result_StructureMap_Group_Rule->rule_count = cJSON_GetArraySize(cjson_rule);
		result_StructureMap_Group_Rule->rule = PushArray(arena, StructureMap_Group_Rule, result_StructureMap_Group_Rule->rule_count);
		for(int i = 0; i < result_StructureMap_Group_Rule->rule_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_rule, i);
			result_StructureMap_Group_Rule->rule[i] = *Deserialize_StructureMap_Group_Rule(arena, internal);
		}

	}
	cJSON *cjson_dependent =  cJSON_GetObjectItem(structureMap_Group_Rule, "dependent");
	if(cjson_dependent)
	{
		result_StructureMap_Group_Rule->dependent_count = cJSON_GetArraySize(cjson_dependent);
		result_StructureMap_Group_Rule->dependent = PushArray(arena, StructureMap_Group_Rule_Dependent, result_StructureMap_Group_Rule->dependent_count);
		for(int i = 0; i < result_StructureMap_Group_Rule->dependent_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dependent, i);
			result_StructureMap_Group_Rule->dependent[i] = *Deserialize_StructureMap_Group_Rule_Dependent(arena, internal);
		}

	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(structureMap_Group_Rule, "documentation");
	if(cjson_documentation)
	{
		result_StructureMap_Group_Rule->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_StructureMap_Group_Rule;
}

StructureMap_Group_Rule_Source*
Deserialize_StructureMap_Group_Rule_Source(Arena *arena, cJSON *structureMap_Group_Rule_Source)
{
	StructureMap_Group_Rule_Source *result_StructureMap_Group_Rule_Source = PushArray(arena, StructureMap_Group_Rule_Source, 1);
	result_StructureMap_Group_Rule_Source->resourceType = ResourceType::StructureMap_Group_Rule_Source;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "id");
	if(cjson_id)
	{
		result_StructureMap_Group_Rule_Source->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Group_Rule_Source->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Group_Rule_Source->extension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Source->extension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Source->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Group_Rule_Source->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Group_Rule_Source->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Group_Rule_Source->modifierExtension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Source->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Source->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Group_Rule_Source->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_context =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "context");
	if(cjson_context)
	{
		result_StructureMap_Group_Rule_Source->context = Str8C(cJSON_GetStringValue(cjson_context));
	}
	cJSON *cjson_min =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "min");
	if(cjson_min)
	{
		result_StructureMap_Group_Rule_Source->min = Deserialize_Integer(arena, cjson_min);
	}
	cJSON *cjson_max =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "max");
	if(cjson_max)
	{
		result_StructureMap_Group_Rule_Source->max = Str8C(cJSON_GetStringValue(cjson_max));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "type");
	if(cjson_type)
	{
		result_StructureMap_Group_Rule_Source->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueBase64Binary");
		result_StructureMap_Group_Rule_Source->defaultValue.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueBoolean");
		result_StructureMap_Group_Rule_Source->defaultValue.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueCanonical");
		result_StructureMap_Group_Rule_Source->defaultValue.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueCode");
		result_StructureMap_Group_Rule_Source->defaultValue.valueCode = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueDate");
		result_StructureMap_Group_Rule_Source->defaultValue.valueDate = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueDateTime");
		result_StructureMap_Group_Rule_Source->defaultValue.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueDecimal");
		result_StructureMap_Group_Rule_Source->defaultValue.valueDecimal = cJSON_GetNumberValue(item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueId");
		result_StructureMap_Group_Rule_Source->defaultValue.valueId = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueInstant");
		result_StructureMap_Group_Rule_Source->defaultValue.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueInteger");
		result_StructureMap_Group_Rule_Source->defaultValue.valueInteger = Deserialize_Integer(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueMarkdown");
		result_StructureMap_Group_Rule_Source->defaultValue.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueOid");
		result_StructureMap_Group_Rule_Source->defaultValue.valueOid = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valuePositiveInt");
		result_StructureMap_Group_Rule_Source->defaultValue.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueString");
		result_StructureMap_Group_Rule_Source->defaultValue.valueString = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueTime");
		result_StructureMap_Group_Rule_Source->defaultValue.valueTime = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueUnsignedInt");
		result_StructureMap_Group_Rule_Source->defaultValue.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueUri");
		result_StructureMap_Group_Rule_Source->defaultValue.valueUri = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueUrl");
		result_StructureMap_Group_Rule_Source->defaultValue.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueUuid");
		result_StructureMap_Group_Rule_Source->defaultValue.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueAddress");
		result_StructureMap_Group_Rule_Source->defaultValue.valueAddress = Deserialize_Address(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Address;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueAge");
		result_StructureMap_Group_Rule_Source->defaultValue.valueAge = Deserialize_Age(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Age;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueAnnotation");
		result_StructureMap_Group_Rule_Source->defaultValue.valueAnnotation = Deserialize_Annotation(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueAttachment");
		result_StructureMap_Group_Rule_Source->defaultValue.valueAttachment = Deserialize_Attachment(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueCodeableConcept");
		result_StructureMap_Group_Rule_Source->defaultValue.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueCoding");
		result_StructureMap_Group_Rule_Source->defaultValue.valueCoding = Deserialize_Coding(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueContactPoint");
		result_StructureMap_Group_Rule_Source->defaultValue.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueCount");
		result_StructureMap_Group_Rule_Source->defaultValue.valueCount = Deserialize_Count(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Count;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueDistance");
		result_StructureMap_Group_Rule_Source->defaultValue.valueDistance = Deserialize_Distance(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueDuration");
		result_StructureMap_Group_Rule_Source->defaultValue.valueDuration = Deserialize_Duration(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueHumanName");
		result_StructureMap_Group_Rule_Source->defaultValue.valueHumanName = Deserialize_HumanName(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueIdentifier");
		result_StructureMap_Group_Rule_Source->defaultValue.valueIdentifier = Deserialize_Identifier(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueMoney");
		result_StructureMap_Group_Rule_Source->defaultValue.valueMoney = Deserialize_Money(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Money;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valuePeriod");
		result_StructureMap_Group_Rule_Source->defaultValue.valuePeriod = Deserialize_Period(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueQuantity");
		result_StructureMap_Group_Rule_Source->defaultValue.valueQuantity = Deserialize_Quantity(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueRange");
		result_StructureMap_Group_Rule_Source->defaultValue.valueRange = Deserialize_Range(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueRatio");
		result_StructureMap_Group_Rule_Source->defaultValue.valueRatio = Deserialize_Ratio(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueReference");
		result_StructureMap_Group_Rule_Source->defaultValue.valueReference = Deserialize_Reference(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueSampledData");
		result_StructureMap_Group_Rule_Source->defaultValue.valueSampledData = Deserialize_SampledData(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueSignature");
		result_StructureMap_Group_Rule_Source->defaultValue.valueSignature = Deserialize_Signature(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueTiming");
		result_StructureMap_Group_Rule_Source->defaultValue.valueTiming = Deserialize_Timing(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueContactDetail");
		result_StructureMap_Group_Rule_Source->defaultValue.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueContributor");
		result_StructureMap_Group_Rule_Source->defaultValue.valueContributor = Deserialize_Contributor(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueDataRequirement");
		result_StructureMap_Group_Rule_Source->defaultValue.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueExpression");
		result_StructureMap_Group_Rule_Source->defaultValue.valueExpression = Deserialize_Expression(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueParameterDefinition");
		result_StructureMap_Group_Rule_Source->defaultValue.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueRelatedArtifact");
		result_StructureMap_Group_Rule_Source->defaultValue.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueTriggerDefinition");
		result_StructureMap_Group_Rule_Source->defaultValue.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueUsageContext");
		result_StructureMap_Group_Rule_Source->defaultValue.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueDosage");
		result_StructureMap_Group_Rule_Source->defaultValue.valueDosage = Deserialize_Dosage(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Source, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Source, "valueMeta");
		result_StructureMap_Group_Rule_Source->defaultValue.valueMeta = Deserialize_Meta(arena, item);
		result_StructureMap_Group_Rule_Source->defaultValue_type = StructureMap_Group_Rule_Source::DefaultValueType::Meta;
	}


	cJSON *cjson_element =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "element");
	if(cjson_element)
	{
		result_StructureMap_Group_Rule_Source->element = Str8C(cJSON_GetStringValue(cjson_element));
	}
	cJSON *cjson_listMode =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "listMode");
	if(cjson_listMode)
	{
		result_StructureMap_Group_Rule_Source->listMode = Str8C(cJSON_GetStringValue(cjson_listMode));
	}
	cJSON *cjson_variable =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "variable");
	if(cjson_variable)
	{
		result_StructureMap_Group_Rule_Source->variable = Str8C(cJSON_GetStringValue(cjson_variable));
	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "condition");
	if(cjson_condition)
	{
		result_StructureMap_Group_Rule_Source->condition = Str8C(cJSON_GetStringValue(cjson_condition));
	}
	cJSON *cjson_check =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "check");
	if(cjson_check)
	{
		result_StructureMap_Group_Rule_Source->check = Str8C(cJSON_GetStringValue(cjson_check));
	}
	cJSON *cjson_logMessage =  cJSON_GetObjectItem(structureMap_Group_Rule_Source, "logMessage");
	if(cjson_logMessage)
	{
		result_StructureMap_Group_Rule_Source->logMessage = Str8C(cJSON_GetStringValue(cjson_logMessage));
	}
	return result_StructureMap_Group_Rule_Source;
}

StructureMap_Group_Rule_Target*
Deserialize_StructureMap_Group_Rule_Target(Arena *arena, cJSON *structureMap_Group_Rule_Target)
{
	StructureMap_Group_Rule_Target *result_StructureMap_Group_Rule_Target = PushArray(arena, StructureMap_Group_Rule_Target, 1);
	result_StructureMap_Group_Rule_Target->resourceType = ResourceType::StructureMap_Group_Rule_Target;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "id");
	if(cjson_id)
	{
		result_StructureMap_Group_Rule_Target->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Group_Rule_Target->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Group_Rule_Target->extension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Target->extension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Target->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Group_Rule_Target->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Group_Rule_Target->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Group_Rule_Target->modifierExtension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Target->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Target->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Group_Rule_Target->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_context =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "context");
	if(cjson_context)
	{
		result_StructureMap_Group_Rule_Target->context = Str8C(cJSON_GetStringValue(cjson_context));
	}
	cJSON *cjson_contextType =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "contextType");
	if(cjson_contextType)
	{
		result_StructureMap_Group_Rule_Target->contextType = Str8C(cJSON_GetStringValue(cjson_contextType));
	}
	cJSON *cjson_element =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "element");
	if(cjson_element)
	{
		result_StructureMap_Group_Rule_Target->element = Str8C(cJSON_GetStringValue(cjson_element));
	}
	cJSON *cjson_variable =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "variable");
	if(cjson_variable)
	{
		result_StructureMap_Group_Rule_Target->variable = Str8C(cJSON_GetStringValue(cjson_variable));
	}
	cJSON *cjson_listMode =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "listMode");
	if(cjson_listMode)
	{
		result_StructureMap_Group_Rule_Target->listMode_count = cJSON_GetArraySize(cjson_listMode);
		result_StructureMap_Group_Rule_Target->listMode = PushArray(arena, fhir_code, result_StructureMap_Group_Rule_Target->listMode_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Target->listMode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_listMode, i);
			result_StructureMap_Group_Rule_Target->listMode[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_listRuleId =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "listRuleId");
	if(cjson_listRuleId)
	{
		result_StructureMap_Group_Rule_Target->listRuleId = Str8C(cJSON_GetStringValue(cjson_listRuleId));
	}
	cJSON *cjson_transform =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "transform");
	if(cjson_transform)
	{
		result_StructureMap_Group_Rule_Target->transform = Str8C(cJSON_GetStringValue(cjson_transform));
	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(structureMap_Group_Rule_Target, "parameter");
	if(cjson_parameter)
	{
		result_StructureMap_Group_Rule_Target->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_StructureMap_Group_Rule_Target->parameter = PushArray(arena, StructureMap_Group_Rule_Target_Parameter, result_StructureMap_Group_Rule_Target->parameter_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Target->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_StructureMap_Group_Rule_Target->parameter[i] = *Deserialize_StructureMap_Group_Rule_Target_Parameter(arena, internal);
		}

	}
	return result_StructureMap_Group_Rule_Target;
}

StructureMap_Group_Rule_Target_Parameter*
Deserialize_StructureMap_Group_Rule_Target_Parameter(Arena *arena, cJSON *structureMap_Group_Rule_Target_Parameter)
{
	StructureMap_Group_Rule_Target_Parameter *result_StructureMap_Group_Rule_Target_Parameter = PushArray(arena, StructureMap_Group_Rule_Target_Parameter, 1);
	result_StructureMap_Group_Rule_Target_Parameter->resourceType = ResourceType::StructureMap_Group_Rule_Target_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "id");
	if(cjson_id)
	{
		result_StructureMap_Group_Rule_Target_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Group_Rule_Target_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Group_Rule_Target_Parameter->extension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Target_Parameter->extension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Target_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Group_Rule_Target_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Group_Rule_Target_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Group_Rule_Target_Parameter->modifierExtension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Target_Parameter->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Target_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Group_Rule_Target_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Target_Parameter, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "valueId");
		result_StructureMap_Group_Rule_Target_Parameter->value.valueId = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Target_Parameter->value_type = StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Target_Parameter, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "valueString");
		result_StructureMap_Group_Rule_Target_Parameter->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_StructureMap_Group_Rule_Target_Parameter->value_type = StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Target_Parameter, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "valueBoolean");
		result_StructureMap_Group_Rule_Target_Parameter->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_StructureMap_Group_Rule_Target_Parameter->value_type = StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Target_Parameter, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "valueInteger");
		result_StructureMap_Group_Rule_Target_Parameter->value.valueInteger = Deserialize_Integer(arena, item);
		result_StructureMap_Group_Rule_Target_Parameter->value_type = StructureMap_Group_Rule_Target_Parameter::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(structureMap_Group_Rule_Target_Parameter, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(structureMap_Group_Rule_Target_Parameter, "valueDecimal");
		result_StructureMap_Group_Rule_Target_Parameter->value.valueDecimal = cJSON_GetNumberValue(item);
		result_StructureMap_Group_Rule_Target_Parameter->value_type = StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_decimal;
	}


	return result_StructureMap_Group_Rule_Target_Parameter;
}

StructureMap_Group_Rule_Dependent*
Deserialize_StructureMap_Group_Rule_Dependent(Arena *arena, cJSON *structureMap_Group_Rule_Dependent)
{
	StructureMap_Group_Rule_Dependent *result_StructureMap_Group_Rule_Dependent = PushArray(arena, StructureMap_Group_Rule_Dependent, 1);
	result_StructureMap_Group_Rule_Dependent->resourceType = ResourceType::StructureMap_Group_Rule_Dependent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(structureMap_Group_Rule_Dependent, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(structureMap_Group_Rule_Dependent, "id");
	if(cjson_id)
	{
		result_StructureMap_Group_Rule_Dependent->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(structureMap_Group_Rule_Dependent, "extension");
	if(cjson_extension)
	{
		result_StructureMap_Group_Rule_Dependent->extension_count = cJSON_GetArraySize(cjson_extension);
		result_StructureMap_Group_Rule_Dependent->extension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Dependent->extension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Dependent->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_StructureMap_Group_Rule_Dependent->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(structureMap_Group_Rule_Dependent, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_StructureMap_Group_Rule_Dependent->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_StructureMap_Group_Rule_Dependent->modifierExtension = PushArray(arena, Extension, result_StructureMap_Group_Rule_Dependent->modifierExtension_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Dependent->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_StructureMap_Group_Rule_Dependent->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(structureMap_Group_Rule_Dependent, "name");
	if(cjson_name)
	{
		result_StructureMap_Group_Rule_Dependent->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_variable =  cJSON_GetObjectItem(structureMap_Group_Rule_Dependent, "variable");
	if(cjson_variable)
	{
		result_StructureMap_Group_Rule_Dependent->variable_count = cJSON_GetArraySize(cjson_variable);
		result_StructureMap_Group_Rule_Dependent->variable = PushArray(arena, fhir_string, result_StructureMap_Group_Rule_Dependent->variable_count);
		for(int i = 0; i < result_StructureMap_Group_Rule_Dependent->variable_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_variable, i);
			result_StructureMap_Group_Rule_Dependent->variable[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_StructureMap_Group_Rule_Dependent;
}

Subscription*
Deserialize_Subscription(Arena *arena, cJSON *subscription)
{
	Subscription *result_Subscription = PushArray(arena, Subscription, 1);
	result_Subscription->resourceType = ResourceType::Subscription;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(subscription, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(subscription, "id");
	if(cjson_id)
	{
		result_Subscription->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(subscription, "meta");
	if(cjson_meta)
	{
		result_Subscription->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(subscription, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Subscription->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(subscription, "language");
	if(cjson_language)
	{
		result_Subscription->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(subscription, "text");
	if(cjson_text)
	{
		result_Subscription->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(subscription, "contained");
	if(cjson_contained)
	{
		result_Subscription->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Subscription->contained = PushArray(arena, Resource, result_Subscription->contained_count);
		for(int i = 0; i < result_Subscription->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Subscription->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(subscription, "extension");
	if(cjson_extension)
	{
		result_Subscription->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Subscription->extension = PushArray(arena, Extension, result_Subscription->extension_count);
		for(int i = 0; i < result_Subscription->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Subscription->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(subscription, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Subscription->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Subscription->modifierExtension = PushArray(arena, Extension, result_Subscription->modifierExtension_count);
		for(int i = 0; i < result_Subscription->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Subscription->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(subscription, "status");
	if(cjson_status)
	{
		result_Subscription->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(subscription, "contact");
	if(cjson_contact)
	{
		result_Subscription->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Subscription->contact = PushArray(arena, ContactPoint, result_Subscription->contact_count);
		for(int i = 0; i < result_Subscription->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Subscription->contact[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	cJSON *cjson_end =  cJSON_GetObjectItem(subscription, "end");
	if(cjson_end)
	{
		result_Subscription->end = Str8C(cJSON_GetStringValue(cjson_end));
	}
	cJSON *cjson_reason =  cJSON_GetObjectItem(subscription, "reason");
	if(cjson_reason)
	{
		result_Subscription->reason = Str8C(cJSON_GetStringValue(cjson_reason));
	}
	cJSON *cjson_criteria =  cJSON_GetObjectItem(subscription, "criteria");
	if(cjson_criteria)
	{
		result_Subscription->criteria = Str8C(cJSON_GetStringValue(cjson_criteria));
	}
	cJSON *cjson_error =  cJSON_GetObjectItem(subscription, "error");
	if(cjson_error)
	{
		result_Subscription->error = Str8C(cJSON_GetStringValue(cjson_error));
	}
	cJSON *cjson_channel =  cJSON_GetObjectItem(subscription, "channel");
	if(cjson_channel)
	{
		result_Subscription->channel = Deserialize_Subscription_Channel(arena, cjson_channel);
	}
	return result_Subscription;
}

Subscription_Channel*
Deserialize_Subscription_Channel(Arena *arena, cJSON *subscription_Channel)
{
	Subscription_Channel *result_Subscription_Channel = PushArray(arena, Subscription_Channel, 1);
	result_Subscription_Channel->resourceType = ResourceType::Subscription_Channel;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(subscription_Channel, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(subscription_Channel, "id");
	if(cjson_id)
	{
		result_Subscription_Channel->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(subscription_Channel, "extension");
	if(cjson_extension)
	{
		result_Subscription_Channel->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Subscription_Channel->extension = PushArray(arena, Extension, result_Subscription_Channel->extension_count);
		for(int i = 0; i < result_Subscription_Channel->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Subscription_Channel->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(subscription_Channel, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Subscription_Channel->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Subscription_Channel->modifierExtension = PushArray(arena, Extension, result_Subscription_Channel->modifierExtension_count);
		for(int i = 0; i < result_Subscription_Channel->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Subscription_Channel->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(subscription_Channel, "type");
	if(cjson_type)
	{
		result_Subscription_Channel->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_endpoint =  cJSON_GetObjectItem(subscription_Channel, "endpoint");
	if(cjson_endpoint)
	{
		result_Subscription_Channel->endpoint = Str8C(cJSON_GetStringValue(cjson_endpoint));
	}
	cJSON *cjson_payload =  cJSON_GetObjectItem(subscription_Channel, "payload");
	if(cjson_payload)
	{
		result_Subscription_Channel->payload = Str8C(cJSON_GetStringValue(cjson_payload));
	}
	cJSON *cjson_header =  cJSON_GetObjectItem(subscription_Channel, "header");
	if(cjson_header)
	{
		result_Subscription_Channel->header_count = cJSON_GetArraySize(cjson_header);
		result_Subscription_Channel->header = PushArray(arena, fhir_string, result_Subscription_Channel->header_count);
		for(int i = 0; i < result_Subscription_Channel->header_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_header, i);
			result_Subscription_Channel->header[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_Subscription_Channel;
}

Substance*
Deserialize_Substance(Arena *arena, cJSON *substance)
{
	Substance *result_Substance = PushArray(arena, Substance, 1);
	result_Substance->resourceType = ResourceType::Substance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substance, "id");
	if(cjson_id)
	{
		result_Substance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(substance, "meta");
	if(cjson_meta)
	{
		result_Substance->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(substance, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Substance->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substance, "language");
	if(cjson_language)
	{
		result_Substance->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(substance, "text");
	if(cjson_text)
	{
		result_Substance->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(substance, "contained");
	if(cjson_contained)
	{
		result_Substance->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Substance->contained = PushArray(arena, Resource, result_Substance->contained_count);
		for(int i = 0; i < result_Substance->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Substance->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substance, "extension");
	if(cjson_extension)
	{
		result_Substance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Substance->extension = PushArray(arena, Extension, result_Substance->extension_count);
		for(int i = 0; i < result_Substance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Substance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Substance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Substance->modifierExtension = PushArray(arena, Extension, result_Substance->modifierExtension_count);
		for(int i = 0; i < result_Substance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Substance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(substance, "identifier");
	if(cjson_identifier)
	{
		result_Substance->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Substance->identifier = PushArray(arena, Identifier, result_Substance->identifier_count);
		for(int i = 0; i < result_Substance->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Substance->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(substance, "status");
	if(cjson_status)
	{
		result_Substance->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(substance, "category");
	if(cjson_category)
	{
		result_Substance->category_count = cJSON_GetArraySize(cjson_category);
		result_Substance->category = PushArray(arena, CodeableConcept, result_Substance->category_count);
		for(int i = 0; i < result_Substance->category_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_category, i);
			result_Substance->category[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(substance, "code");
	if(cjson_code)
	{
		result_Substance->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(substance, "description");
	if(cjson_description)
	{
		result_Substance->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_instance =  cJSON_GetObjectItem(substance, "instance");
	if(cjson_instance)
	{
		result_Substance->instance_count = cJSON_GetArraySize(cjson_instance);
		result_Substance->instance = PushArray(arena, Substance_Instance, result_Substance->instance_count);
		for(int i = 0; i < result_Substance->instance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_instance, i);
			result_Substance->instance[i] = *Deserialize_Substance_Instance(arena, internal);
		}

	}
	cJSON *cjson_ingredient =  cJSON_GetObjectItem(substance, "ingredient");
	if(cjson_ingredient)
	{
		result_Substance->ingredient_count = cJSON_GetArraySize(cjson_ingredient);
		result_Substance->ingredient = PushArray(arena, Substance_Ingredient, result_Substance->ingredient_count);
		for(int i = 0; i < result_Substance->ingredient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_ingredient, i);
			result_Substance->ingredient[i] = *Deserialize_Substance_Ingredient(arena, internal);
		}

	}
	return result_Substance;
}

Substance_Instance*
Deserialize_Substance_Instance(Arena *arena, cJSON *substance_Instance)
{
	Substance_Instance *result_Substance_Instance = PushArray(arena, Substance_Instance, 1);
	result_Substance_Instance->resourceType = ResourceType::Substance_Instance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substance_Instance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substance_Instance, "id");
	if(cjson_id)
	{
		result_Substance_Instance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substance_Instance, "extension");
	if(cjson_extension)
	{
		result_Substance_Instance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Substance_Instance->extension = PushArray(arena, Extension, result_Substance_Instance->extension_count);
		for(int i = 0; i < result_Substance_Instance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Substance_Instance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substance_Instance, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Substance_Instance->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Substance_Instance->modifierExtension = PushArray(arena, Extension, result_Substance_Instance->modifierExtension_count);
		for(int i = 0; i < result_Substance_Instance->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Substance_Instance->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(substance_Instance, "identifier");
	if(cjson_identifier)
	{
		result_Substance_Instance->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_expiry =  cJSON_GetObjectItem(substance_Instance, "expiry");
	if(cjson_expiry)
	{
		result_Substance_Instance->expiry = Str8C(cJSON_GetStringValue(cjson_expiry));
	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(substance_Instance, "quantity");
	if(cjson_quantity)
	{
		result_Substance_Instance->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	return result_Substance_Instance;
}

Substance_Ingredient*
Deserialize_Substance_Ingredient(Arena *arena, cJSON *substance_Ingredient)
{
	Substance_Ingredient *result_Substance_Ingredient = PushArray(arena, Substance_Ingredient, 1);
	result_Substance_Ingredient->resourceType = ResourceType::Substance_Ingredient;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substance_Ingredient, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substance_Ingredient, "id");
	if(cjson_id)
	{
		result_Substance_Ingredient->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substance_Ingredient, "extension");
	if(cjson_extension)
	{
		result_Substance_Ingredient->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Substance_Ingredient->extension = PushArray(arena, Extension, result_Substance_Ingredient->extension_count);
		for(int i = 0; i < result_Substance_Ingredient->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Substance_Ingredient->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substance_Ingredient, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Substance_Ingredient->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Substance_Ingredient->modifierExtension = PushArray(arena, Extension, result_Substance_Ingredient->modifierExtension_count);
		for(int i = 0; i < result_Substance_Ingredient->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Substance_Ingredient->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(substance_Ingredient, "quantity");
	if(cjson_quantity)
	{
		result_Substance_Ingredient->quantity = Deserialize_Ratio(arena, cjson_quantity);
	}
	if((bool)cJSON_HasObjectItem(substance_Ingredient, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(substance_Ingredient, "valueCodeableConcept");
		result_Substance_Ingredient->substance.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Substance_Ingredient->substance_type = Substance_Ingredient::SubstanceType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(substance_Ingredient, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(substance_Ingredient, "valueReference");
		result_Substance_Ingredient->substance.valueReference = Deserialize_Reference(arena, item);
		result_Substance_Ingredient->substance_type = Substance_Ingredient::SubstanceType::Reference;
	}


	return result_Substance_Ingredient;
}

SubstanceNucleicAcid*
Deserialize_SubstanceNucleicAcid(Arena *arena, cJSON *substanceNucleicAcid)
{
	SubstanceNucleicAcid *result_SubstanceNucleicAcid = PushArray(arena, SubstanceNucleicAcid, 1);
	result_SubstanceNucleicAcid->resourceType = ResourceType::SubstanceNucleicAcid;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceNucleicAcid, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceNucleicAcid, "id");
	if(cjson_id)
	{
		result_SubstanceNucleicAcid->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(substanceNucleicAcid, "meta");
	if(cjson_meta)
	{
		result_SubstanceNucleicAcid->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(substanceNucleicAcid, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SubstanceNucleicAcid->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substanceNucleicAcid, "language");
	if(cjson_language)
	{
		result_SubstanceNucleicAcid->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(substanceNucleicAcid, "text");
	if(cjson_text)
	{
		result_SubstanceNucleicAcid->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(substanceNucleicAcid, "contained");
	if(cjson_contained)
	{
		result_SubstanceNucleicAcid->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SubstanceNucleicAcid->contained = PushArray(arena, Resource, result_SubstanceNucleicAcid->contained_count);
		for(int i = 0; i < result_SubstanceNucleicAcid->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SubstanceNucleicAcid->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceNucleicAcid, "extension");
	if(cjson_extension)
	{
		result_SubstanceNucleicAcid->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceNucleicAcid->extension = PushArray(arena, Extension, result_SubstanceNucleicAcid->extension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceNucleicAcid->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceNucleicAcid, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceNucleicAcid->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceNucleicAcid->modifierExtension = PushArray(arena, Extension, result_SubstanceNucleicAcid->modifierExtension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceNucleicAcid->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequenceType =  cJSON_GetObjectItem(substanceNucleicAcid, "sequenceType");
	if(cjson_sequenceType)
	{
		result_SubstanceNucleicAcid->sequenceType = Deserialize_CodeableConcept(arena, cjson_sequenceType);
	}
	cJSON *cjson_numberOfSubunits =  cJSON_GetObjectItem(substanceNucleicAcid, "numberOfSubunits");
	if(cjson_numberOfSubunits)
	{
		result_SubstanceNucleicAcid->numberOfSubunits = Deserialize_Integer(arena, cjson_numberOfSubunits);
	}
	cJSON *cjson_areaOfHybridisation =  cJSON_GetObjectItem(substanceNucleicAcid, "areaOfHybridisation");
	if(cjson_areaOfHybridisation)
	{
		result_SubstanceNucleicAcid->areaOfHybridisation = Str8C(cJSON_GetStringValue(cjson_areaOfHybridisation));
	}
	cJSON *cjson_oligoNucleotideType =  cJSON_GetObjectItem(substanceNucleicAcid, "oligoNucleotideType");
	if(cjson_oligoNucleotideType)
	{
		result_SubstanceNucleicAcid->oligoNucleotideType = Deserialize_CodeableConcept(arena, cjson_oligoNucleotideType);
	}
	cJSON *cjson_subunit =  cJSON_GetObjectItem(substanceNucleicAcid, "subunit");
	if(cjson_subunit)
	{
		result_SubstanceNucleicAcid->subunit_count = cJSON_GetArraySize(cjson_subunit);
		result_SubstanceNucleicAcid->subunit = PushArray(arena, SubstanceNucleicAcid_Subunit, result_SubstanceNucleicAcid->subunit_count);
		for(int i = 0; i < result_SubstanceNucleicAcid->subunit_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subunit, i);
			result_SubstanceNucleicAcid->subunit[i] = *Deserialize_SubstanceNucleicAcid_Subunit(arena, internal);
		}

	}
	return result_SubstanceNucleicAcid;
}

SubstanceNucleicAcid_Subunit*
Deserialize_SubstanceNucleicAcid_Subunit(Arena *arena, cJSON *substanceNucleicAcid_Subunit)
{
	SubstanceNucleicAcid_Subunit *result_SubstanceNucleicAcid_Subunit = PushArray(arena, SubstanceNucleicAcid_Subunit, 1);
	result_SubstanceNucleicAcid_Subunit->resourceType = ResourceType::SubstanceNucleicAcid_Subunit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "id");
	if(cjson_id)
	{
		result_SubstanceNucleicAcid_Subunit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "extension");
	if(cjson_extension)
	{
		result_SubstanceNucleicAcid_Subunit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceNucleicAcid_Subunit->extension = PushArray(arena, Extension, result_SubstanceNucleicAcid_Subunit->extension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceNucleicAcid_Subunit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceNucleicAcid_Subunit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceNucleicAcid_Subunit->modifierExtension = PushArray(arena, Extension, result_SubstanceNucleicAcid_Subunit->modifierExtension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceNucleicAcid_Subunit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_subunit =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "subunit");
	if(cjson_subunit)
	{
		result_SubstanceNucleicAcid_Subunit->subunit = Deserialize_Integer(arena, cjson_subunit);
	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "sequence");
	if(cjson_sequence)
	{
		result_SubstanceNucleicAcid_Subunit->sequence = Str8C(cJSON_GetStringValue(cjson_sequence));
	}
	cJSON *cjson_length =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "length");
	if(cjson_length)
	{
		result_SubstanceNucleicAcid_Subunit->length = Deserialize_Integer(arena, cjson_length);
	}
	cJSON *cjson_sequenceAttachment =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "sequenceAttachment");
	if(cjson_sequenceAttachment)
	{
		result_SubstanceNucleicAcid_Subunit->sequenceAttachment = Deserialize_Attachment(arena, cjson_sequenceAttachment);
	}
	cJSON *cjson_fivePrime =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "fivePrime");
	if(cjson_fivePrime)
	{
		result_SubstanceNucleicAcid_Subunit->fivePrime = Deserialize_CodeableConcept(arena, cjson_fivePrime);
	}
	cJSON *cjson_threePrime =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "threePrime");
	if(cjson_threePrime)
	{
		result_SubstanceNucleicAcid_Subunit->threePrime = Deserialize_CodeableConcept(arena, cjson_threePrime);
	}
	cJSON *cjson_linkage =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "linkage");
	if(cjson_linkage)
	{
		result_SubstanceNucleicAcid_Subunit->linkage_count = cJSON_GetArraySize(cjson_linkage);
		result_SubstanceNucleicAcid_Subunit->linkage = PushArray(arena, SubstanceNucleicAcid_Subunit_Linkage, result_SubstanceNucleicAcid_Subunit->linkage_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit->linkage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_linkage, i);
			result_SubstanceNucleicAcid_Subunit->linkage[i] = *Deserialize_SubstanceNucleicAcid_Subunit_Linkage(arena, internal);
		}

	}
	cJSON *cjson_sugar =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit, "sugar");
	if(cjson_sugar)
	{
		result_SubstanceNucleicAcid_Subunit->sugar_count = cJSON_GetArraySize(cjson_sugar);
		result_SubstanceNucleicAcid_Subunit->sugar = PushArray(arena, SubstanceNucleicAcid_Subunit_Sugar, result_SubstanceNucleicAcid_Subunit->sugar_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit->sugar_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_sugar, i);
			result_SubstanceNucleicAcid_Subunit->sugar[i] = *Deserialize_SubstanceNucleicAcid_Subunit_Sugar(arena, internal);
		}

	}
	return result_SubstanceNucleicAcid_Subunit;
}

SubstanceNucleicAcid_Subunit_Linkage*
Deserialize_SubstanceNucleicAcid_Subunit_Linkage(Arena *arena, cJSON *substanceNucleicAcid_Subunit_Linkage)
{
	SubstanceNucleicAcid_Subunit_Linkage *result_SubstanceNucleicAcid_Subunit_Linkage = PushArray(arena, SubstanceNucleicAcid_Subunit_Linkage, 1);
	result_SubstanceNucleicAcid_Subunit_Linkage->resourceType = ResourceType::SubstanceNucleicAcid_Subunit_Linkage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "id");
	if(cjson_id)
	{
		result_SubstanceNucleicAcid_Subunit_Linkage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "extension");
	if(cjson_extension)
	{
		result_SubstanceNucleicAcid_Subunit_Linkage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceNucleicAcid_Subunit_Linkage->extension = PushArray(arena, Extension, result_SubstanceNucleicAcid_Subunit_Linkage->extension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit_Linkage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceNucleicAcid_Subunit_Linkage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceNucleicAcid_Subunit_Linkage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceNucleicAcid_Subunit_Linkage->modifierExtension = PushArray(arena, Extension, result_SubstanceNucleicAcid_Subunit_Linkage->modifierExtension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit_Linkage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceNucleicAcid_Subunit_Linkage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_connectivity =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "connectivity");
	if(cjson_connectivity)
	{
		result_SubstanceNucleicAcid_Subunit_Linkage->connectivity = Str8C(cJSON_GetStringValue(cjson_connectivity));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "identifier");
	if(cjson_identifier)
	{
		result_SubstanceNucleicAcid_Subunit_Linkage->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "name");
	if(cjson_name)
	{
		result_SubstanceNucleicAcid_Subunit_Linkage->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_residueSite =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Linkage, "residueSite");
	if(cjson_residueSite)
	{
		result_SubstanceNucleicAcid_Subunit_Linkage->residueSite = Str8C(cJSON_GetStringValue(cjson_residueSite));
	}
	return result_SubstanceNucleicAcid_Subunit_Linkage;
}

SubstanceNucleicAcid_Subunit_Sugar*
Deserialize_SubstanceNucleicAcid_Subunit_Sugar(Arena *arena, cJSON *substanceNucleicAcid_Subunit_Sugar)
{
	SubstanceNucleicAcid_Subunit_Sugar *result_SubstanceNucleicAcid_Subunit_Sugar = PushArray(arena, SubstanceNucleicAcid_Subunit_Sugar, 1);
	result_SubstanceNucleicAcid_Subunit_Sugar->resourceType = ResourceType::SubstanceNucleicAcid_Subunit_Sugar;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Sugar, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Sugar, "id");
	if(cjson_id)
	{
		result_SubstanceNucleicAcid_Subunit_Sugar->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Sugar, "extension");
	if(cjson_extension)
	{
		result_SubstanceNucleicAcid_Subunit_Sugar->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceNucleicAcid_Subunit_Sugar->extension = PushArray(arena, Extension, result_SubstanceNucleicAcid_Subunit_Sugar->extension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit_Sugar->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceNucleicAcid_Subunit_Sugar->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Sugar, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceNucleicAcid_Subunit_Sugar->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceNucleicAcid_Subunit_Sugar->modifierExtension = PushArray(arena, Extension, result_SubstanceNucleicAcid_Subunit_Sugar->modifierExtension_count);
		for(int i = 0; i < result_SubstanceNucleicAcid_Subunit_Sugar->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceNucleicAcid_Subunit_Sugar->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Sugar, "identifier");
	if(cjson_identifier)
	{
		result_SubstanceNucleicAcid_Subunit_Sugar->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Sugar, "name");
	if(cjson_name)
	{
		result_SubstanceNucleicAcid_Subunit_Sugar->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_residueSite =  cJSON_GetObjectItem(substanceNucleicAcid_Subunit_Sugar, "residueSite");
	if(cjson_residueSite)
	{
		result_SubstanceNucleicAcid_Subunit_Sugar->residueSite = Str8C(cJSON_GetStringValue(cjson_residueSite));
	}
	return result_SubstanceNucleicAcid_Subunit_Sugar;
}

SubstancePolymer*
Deserialize_SubstancePolymer(Arena *arena, cJSON *substancePolymer)
{
	SubstancePolymer *result_SubstancePolymer = PushArray(arena, SubstancePolymer, 1);
	result_SubstancePolymer->resourceType = ResourceType::SubstancePolymer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substancePolymer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substancePolymer, "id");
	if(cjson_id)
	{
		result_SubstancePolymer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(substancePolymer, "meta");
	if(cjson_meta)
	{
		result_SubstancePolymer->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(substancePolymer, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SubstancePolymer->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substancePolymer, "language");
	if(cjson_language)
	{
		result_SubstancePolymer->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(substancePolymer, "text");
	if(cjson_text)
	{
		result_SubstancePolymer->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(substancePolymer, "contained");
	if(cjson_contained)
	{
		result_SubstancePolymer->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SubstancePolymer->contained = PushArray(arena, Resource, result_SubstancePolymer->contained_count);
		for(int i = 0; i < result_SubstancePolymer->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SubstancePolymer->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substancePolymer, "extension");
	if(cjson_extension)
	{
		result_SubstancePolymer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstancePolymer->extension = PushArray(arena, Extension, result_SubstancePolymer->extension_count);
		for(int i = 0; i < result_SubstancePolymer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstancePolymer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substancePolymer, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstancePolymer->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstancePolymer->modifierExtension = PushArray(arena, Extension, result_SubstancePolymer->modifierExtension_count);
		for(int i = 0; i < result_SubstancePolymer->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstancePolymer->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_class_ =  cJSON_GetObjectItem(substancePolymer, "class_");
	if(cjson_class_)
	{
		result_SubstancePolymer->class_ = Deserialize_CodeableConcept(arena, cjson_class_);
	}
	cJSON *cjson_geometry =  cJSON_GetObjectItem(substancePolymer, "geometry");
	if(cjson_geometry)
	{
		result_SubstancePolymer->geometry = Deserialize_CodeableConcept(arena, cjson_geometry);
	}
	cJSON *cjson_copolymerConnectivity =  cJSON_GetObjectItem(substancePolymer, "copolymerConnectivity");
	if(cjson_copolymerConnectivity)
	{
		result_SubstancePolymer->copolymerConnectivity_count = cJSON_GetArraySize(cjson_copolymerConnectivity);
		result_SubstancePolymer->copolymerConnectivity = PushArray(arena, CodeableConcept, result_SubstancePolymer->copolymerConnectivity_count);
		for(int i = 0; i < result_SubstancePolymer->copolymerConnectivity_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_copolymerConnectivity, i);
			result_SubstancePolymer->copolymerConnectivity[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_modification =  cJSON_GetObjectItem(substancePolymer, "modification");
	if(cjson_modification)
	{
		result_SubstancePolymer->modification_count = cJSON_GetArraySize(cjson_modification);
		result_SubstancePolymer->modification = PushArray(arena, fhir_string, result_SubstancePolymer->modification_count);
		for(int i = 0; i < result_SubstancePolymer->modification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modification, i);
			result_SubstancePolymer->modification[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_monomerSet =  cJSON_GetObjectItem(substancePolymer, "monomerSet");
	if(cjson_monomerSet)
	{
		result_SubstancePolymer->monomerSet_count = cJSON_GetArraySize(cjson_monomerSet);
		result_SubstancePolymer->monomerSet = PushArray(arena, SubstancePolymer_MonomerSet, result_SubstancePolymer->monomerSet_count);
		for(int i = 0; i < result_SubstancePolymer->monomerSet_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_monomerSet, i);
			result_SubstancePolymer->monomerSet[i] = *Deserialize_SubstancePolymer_MonomerSet(arena, internal);
		}

	}
	cJSON *cjson_repeat =  cJSON_GetObjectItem(substancePolymer, "repeat");
	if(cjson_repeat)
	{
		result_SubstancePolymer->repeat_count = cJSON_GetArraySize(cjson_repeat);
		result_SubstancePolymer->repeat = PushArray(arena, SubstancePolymer_Repeat, result_SubstancePolymer->repeat_count);
		for(int i = 0; i < result_SubstancePolymer->repeat_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_repeat, i);
			result_SubstancePolymer->repeat[i] = *Deserialize_SubstancePolymer_Repeat(arena, internal);
		}

	}
	return result_SubstancePolymer;
}

SubstancePolymer_MonomerSet*
Deserialize_SubstancePolymer_MonomerSet(Arena *arena, cJSON *substancePolymer_MonomerSet)
{
	SubstancePolymer_MonomerSet *result_SubstancePolymer_MonomerSet = PushArray(arena, SubstancePolymer_MonomerSet, 1);
	result_SubstancePolymer_MonomerSet->resourceType = ResourceType::SubstancePolymer_MonomerSet;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substancePolymer_MonomerSet, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substancePolymer_MonomerSet, "id");
	if(cjson_id)
	{
		result_SubstancePolymer_MonomerSet->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substancePolymer_MonomerSet, "extension");
	if(cjson_extension)
	{
		result_SubstancePolymer_MonomerSet->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstancePolymer_MonomerSet->extension = PushArray(arena, Extension, result_SubstancePolymer_MonomerSet->extension_count);
		for(int i = 0; i < result_SubstancePolymer_MonomerSet->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstancePolymer_MonomerSet->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substancePolymer_MonomerSet, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstancePolymer_MonomerSet->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstancePolymer_MonomerSet->modifierExtension = PushArray(arena, Extension, result_SubstancePolymer_MonomerSet->modifierExtension_count);
		for(int i = 0; i < result_SubstancePolymer_MonomerSet->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstancePolymer_MonomerSet->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_ratioType =  cJSON_GetObjectItem(substancePolymer_MonomerSet, "ratioType");
	if(cjson_ratioType)
	{
		result_SubstancePolymer_MonomerSet->ratioType = Deserialize_CodeableConcept(arena, cjson_ratioType);
	}
	cJSON *cjson_startingMaterial =  cJSON_GetObjectItem(substancePolymer_MonomerSet, "startingMaterial");
	if(cjson_startingMaterial)
	{
		result_SubstancePolymer_MonomerSet->startingMaterial_count = cJSON_GetArraySize(cjson_startingMaterial);
		result_SubstancePolymer_MonomerSet->startingMaterial = PushArray(arena, SubstancePolymer_MonomerSet_StartingMaterial, result_SubstancePolymer_MonomerSet->startingMaterial_count);
		for(int i = 0; i < result_SubstancePolymer_MonomerSet->startingMaterial_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_startingMaterial, i);
			result_SubstancePolymer_MonomerSet->startingMaterial[i] = *Deserialize_SubstancePolymer_MonomerSet_StartingMaterial(arena, internal);
		}

	}
	return result_SubstancePolymer_MonomerSet;
}

SubstancePolymer_MonomerSet_StartingMaterial*
Deserialize_SubstancePolymer_MonomerSet_StartingMaterial(Arena *arena, cJSON *substancePolymer_MonomerSet_StartingMaterial)
{
	SubstancePolymer_MonomerSet_StartingMaterial *result_SubstancePolymer_MonomerSet_StartingMaterial = PushArray(arena, SubstancePolymer_MonomerSet_StartingMaterial, 1);
	result_SubstancePolymer_MonomerSet_StartingMaterial->resourceType = ResourceType::SubstancePolymer_MonomerSet_StartingMaterial;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "id");
	if(cjson_id)
	{
		result_SubstancePolymer_MonomerSet_StartingMaterial->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "extension");
	if(cjson_extension)
	{
		result_SubstancePolymer_MonomerSet_StartingMaterial->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstancePolymer_MonomerSet_StartingMaterial->extension = PushArray(arena, Extension, result_SubstancePolymer_MonomerSet_StartingMaterial->extension_count);
		for(int i = 0; i < result_SubstancePolymer_MonomerSet_StartingMaterial->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstancePolymer_MonomerSet_StartingMaterial->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstancePolymer_MonomerSet_StartingMaterial->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstancePolymer_MonomerSet_StartingMaterial->modifierExtension = PushArray(arena, Extension, result_SubstancePolymer_MonomerSet_StartingMaterial->modifierExtension_count);
		for(int i = 0; i < result_SubstancePolymer_MonomerSet_StartingMaterial->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstancePolymer_MonomerSet_StartingMaterial->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_material =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "material");
	if(cjson_material)
	{
		result_SubstancePolymer_MonomerSet_StartingMaterial->material = Deserialize_CodeableConcept(arena, cjson_material);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "type");
	if(cjson_type)
	{
		result_SubstancePolymer_MonomerSet_StartingMaterial->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_isDefining =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "isDefining");
	if(cjson_isDefining)
	{
		result_SubstancePolymer_MonomerSet_StartingMaterial->isDefining = (boolean)cJSON_IsTrue(cjson_isDefining);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(substancePolymer_MonomerSet_StartingMaterial, "amount");
	if(cjson_amount)
	{
		result_SubstancePolymer_MonomerSet_StartingMaterial->amount = Deserialize_SubstanceAmount(arena, cjson_amount);
	}
	return result_SubstancePolymer_MonomerSet_StartingMaterial;
}

SubstancePolymer_Repeat*
Deserialize_SubstancePolymer_Repeat(Arena *arena, cJSON *substancePolymer_Repeat)
{
	SubstancePolymer_Repeat *result_SubstancePolymer_Repeat = PushArray(arena, SubstancePolymer_Repeat, 1);
	result_SubstancePolymer_Repeat->resourceType = ResourceType::SubstancePolymer_Repeat;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substancePolymer_Repeat, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substancePolymer_Repeat, "id");
	if(cjson_id)
	{
		result_SubstancePolymer_Repeat->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substancePolymer_Repeat, "extension");
	if(cjson_extension)
	{
		result_SubstancePolymer_Repeat->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstancePolymer_Repeat->extension = PushArray(arena, Extension, result_SubstancePolymer_Repeat->extension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstancePolymer_Repeat->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substancePolymer_Repeat, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstancePolymer_Repeat->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstancePolymer_Repeat->modifierExtension = PushArray(arena, Extension, result_SubstancePolymer_Repeat->modifierExtension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstancePolymer_Repeat->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_numberOfUnits =  cJSON_GetObjectItem(substancePolymer_Repeat, "numberOfUnits");
	if(cjson_numberOfUnits)
	{
		result_SubstancePolymer_Repeat->numberOfUnits = Deserialize_Integer(arena, cjson_numberOfUnits);
	}
	cJSON *cjson_averageMolecularFormula =  cJSON_GetObjectItem(substancePolymer_Repeat, "averageMolecularFormula");
	if(cjson_averageMolecularFormula)
	{
		result_SubstancePolymer_Repeat->averageMolecularFormula = Str8C(cJSON_GetStringValue(cjson_averageMolecularFormula));
	}
	cJSON *cjson_repeatUnitAmountType =  cJSON_GetObjectItem(substancePolymer_Repeat, "repeatUnitAmountType");
	if(cjson_repeatUnitAmountType)
	{
		result_SubstancePolymer_Repeat->repeatUnitAmountType = Deserialize_CodeableConcept(arena, cjson_repeatUnitAmountType);
	}
	cJSON *cjson_repeatUnit =  cJSON_GetObjectItem(substancePolymer_Repeat, "repeatUnit");
	if(cjson_repeatUnit)
	{
		result_SubstancePolymer_Repeat->repeatUnit_count = cJSON_GetArraySize(cjson_repeatUnit);
		result_SubstancePolymer_Repeat->repeatUnit = PushArray(arena, SubstancePolymer_Repeat_RepeatUnit, result_SubstancePolymer_Repeat->repeatUnit_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat->repeatUnit_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_repeatUnit, i);
			result_SubstancePolymer_Repeat->repeatUnit[i] = *Deserialize_SubstancePolymer_Repeat_RepeatUnit(arena, internal);
		}

	}
	return result_SubstancePolymer_Repeat;
}

SubstancePolymer_Repeat_RepeatUnit*
Deserialize_SubstancePolymer_Repeat_RepeatUnit(Arena *arena, cJSON *substancePolymer_Repeat_RepeatUnit)
{
	SubstancePolymer_Repeat_RepeatUnit *result_SubstancePolymer_Repeat_RepeatUnit = PushArray(arena, SubstancePolymer_Repeat_RepeatUnit, 1);
	result_SubstancePolymer_Repeat_RepeatUnit->resourceType = ResourceType::SubstancePolymer_Repeat_RepeatUnit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "id");
	if(cjson_id)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "extension");
	if(cjson_extension)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstancePolymer_Repeat_RepeatUnit->extension = PushArray(arena, Extension, result_SubstancePolymer_Repeat_RepeatUnit->extension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstancePolymer_Repeat_RepeatUnit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstancePolymer_Repeat_RepeatUnit->modifierExtension = PushArray(arena, Extension, result_SubstancePolymer_Repeat_RepeatUnit->modifierExtension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstancePolymer_Repeat_RepeatUnit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_orientationOfPolymerisation =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "orientationOfPolymerisation");
	if(cjson_orientationOfPolymerisation)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->orientationOfPolymerisation = Deserialize_CodeableConcept(arena, cjson_orientationOfPolymerisation);
	}
	cJSON *cjson_repeatUnit =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "repeatUnit");
	if(cjson_repeatUnit)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->repeatUnit = Str8C(cJSON_GetStringValue(cjson_repeatUnit));
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "amount");
	if(cjson_amount)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->amount = Deserialize_SubstanceAmount(arena, cjson_amount);
	}
	cJSON *cjson_degreeOfPolymerisation =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "degreeOfPolymerisation");
	if(cjson_degreeOfPolymerisation)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation_count = cJSON_GetArraySize(cjson_degreeOfPolymerisation);
		result_SubstancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation = PushArray(arena, SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, result_SubstancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_degreeOfPolymerisation, i);
			result_SubstancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation[i] = *Deserialize_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation(arena, internal);
		}

	}
	cJSON *cjson_structuralRepresentation =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit, "structuralRepresentation");
	if(cjson_structuralRepresentation)
	{
		result_SubstancePolymer_Repeat_RepeatUnit->structuralRepresentation_count = cJSON_GetArraySize(cjson_structuralRepresentation);
		result_SubstancePolymer_Repeat_RepeatUnit->structuralRepresentation = PushArray(arena, SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation, result_SubstancePolymer_Repeat_RepeatUnit->structuralRepresentation_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit->structuralRepresentation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_structuralRepresentation, i);
			result_SubstancePolymer_Repeat_RepeatUnit->structuralRepresentation[i] = *Deserialize_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation(arena, internal);
		}

	}
	return result_SubstancePolymer_Repeat_RepeatUnit;
}

SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation*
Deserialize_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation(Arena *arena, cJSON *substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation)
{
	SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation *result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation = PushArray(arena, SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, 1);
	result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->resourceType = ResourceType::SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, "id");
	if(cjson_id)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, "extension");
	if(cjson_extension)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension = PushArray(arena, Extension, result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension = PushArray(arena, Extension, result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_degree =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, "degree");
	if(cjson_degree)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->degree = Deserialize_CodeableConcept(arena, cjson_degree);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation, "amount");
	if(cjson_amount)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->amount = Deserialize_SubstanceAmount(arena, cjson_amount);
	}
	return result_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation;
}

SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation*
Deserialize_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation(Arena *arena, cJSON *substancePolymer_Repeat_RepeatUnit_StructuralRepresentation)
{
	SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation *result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation = PushArray(arena, SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation, 1);
	result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->resourceType = ResourceType::SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_StructuralRepresentation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_StructuralRepresentation, "id");
	if(cjson_id)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_StructuralRepresentation, "extension");
	if(cjson_extension)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension = PushArray(arena, Extension, result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_StructuralRepresentation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension = PushArray(arena, Extension, result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension_count);
		for(int i = 0; i < result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_StructuralRepresentation, "type");
	if(cjson_type)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_representation =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_StructuralRepresentation, "representation");
	if(cjson_representation)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->representation = Str8C(cJSON_GetStringValue(cjson_representation));
	}
	cJSON *cjson_attachment =  cJSON_GetObjectItem(substancePolymer_Repeat_RepeatUnit_StructuralRepresentation, "attachment");
	if(cjson_attachment)
	{
		result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation->attachment = Deserialize_Attachment(arena, cjson_attachment);
	}
	return result_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation;
}

SubstanceProtein*
Deserialize_SubstanceProtein(Arena *arena, cJSON *substanceProtein)
{
	SubstanceProtein *result_SubstanceProtein = PushArray(arena, SubstanceProtein, 1);
	result_SubstanceProtein->resourceType = ResourceType::SubstanceProtein;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceProtein, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceProtein, "id");
	if(cjson_id)
	{
		result_SubstanceProtein->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(substanceProtein, "meta");
	if(cjson_meta)
	{
		result_SubstanceProtein->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(substanceProtein, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SubstanceProtein->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substanceProtein, "language");
	if(cjson_language)
	{
		result_SubstanceProtein->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(substanceProtein, "text");
	if(cjson_text)
	{
		result_SubstanceProtein->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(substanceProtein, "contained");
	if(cjson_contained)
	{
		result_SubstanceProtein->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SubstanceProtein->contained = PushArray(arena, Resource, result_SubstanceProtein->contained_count);
		for(int i = 0; i < result_SubstanceProtein->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SubstanceProtein->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceProtein, "extension");
	if(cjson_extension)
	{
		result_SubstanceProtein->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceProtein->extension = PushArray(arena, Extension, result_SubstanceProtein->extension_count);
		for(int i = 0; i < result_SubstanceProtein->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceProtein->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceProtein, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceProtein->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceProtein->modifierExtension = PushArray(arena, Extension, result_SubstanceProtein->modifierExtension_count);
		for(int i = 0; i < result_SubstanceProtein->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceProtein->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequenceType =  cJSON_GetObjectItem(substanceProtein, "sequenceType");
	if(cjson_sequenceType)
	{
		result_SubstanceProtein->sequenceType = Deserialize_CodeableConcept(arena, cjson_sequenceType);
	}
	cJSON *cjson_numberOfSubunits =  cJSON_GetObjectItem(substanceProtein, "numberOfSubunits");
	if(cjson_numberOfSubunits)
	{
		result_SubstanceProtein->numberOfSubunits = Deserialize_Integer(arena, cjson_numberOfSubunits);
	}
	cJSON *cjson_disulfideLinkage =  cJSON_GetObjectItem(substanceProtein, "disulfideLinkage");
	if(cjson_disulfideLinkage)
	{
		result_SubstanceProtein->disulfideLinkage_count = cJSON_GetArraySize(cjson_disulfideLinkage);
		result_SubstanceProtein->disulfideLinkage = PushArray(arena, fhir_string, result_SubstanceProtein->disulfideLinkage_count);
		for(int i = 0; i < result_SubstanceProtein->disulfideLinkage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_disulfideLinkage, i);
			result_SubstanceProtein->disulfideLinkage[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_subunit =  cJSON_GetObjectItem(substanceProtein, "subunit");
	if(cjson_subunit)
	{
		result_SubstanceProtein->subunit_count = cJSON_GetArraySize(cjson_subunit);
		result_SubstanceProtein->subunit = PushArray(arena, SubstanceProtein_Subunit, result_SubstanceProtein->subunit_count);
		for(int i = 0; i < result_SubstanceProtein->subunit_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subunit, i);
			result_SubstanceProtein->subunit[i] = *Deserialize_SubstanceProtein_Subunit(arena, internal);
		}

	}
	return result_SubstanceProtein;
}

SubstanceProtein_Subunit*
Deserialize_SubstanceProtein_Subunit(Arena *arena, cJSON *substanceProtein_Subunit)
{
	SubstanceProtein_Subunit *result_SubstanceProtein_Subunit = PushArray(arena, SubstanceProtein_Subunit, 1);
	result_SubstanceProtein_Subunit->resourceType = ResourceType::SubstanceProtein_Subunit;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceProtein_Subunit, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceProtein_Subunit, "id");
	if(cjson_id)
	{
		result_SubstanceProtein_Subunit->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceProtein_Subunit, "extension");
	if(cjson_extension)
	{
		result_SubstanceProtein_Subunit->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceProtein_Subunit->extension = PushArray(arena, Extension, result_SubstanceProtein_Subunit->extension_count);
		for(int i = 0; i < result_SubstanceProtein_Subunit->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceProtein_Subunit->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceProtein_Subunit, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceProtein_Subunit->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceProtein_Subunit->modifierExtension = PushArray(arena, Extension, result_SubstanceProtein_Subunit->modifierExtension_count);
		for(int i = 0; i < result_SubstanceProtein_Subunit->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceProtein_Subunit->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_subunit =  cJSON_GetObjectItem(substanceProtein_Subunit, "subunit");
	if(cjson_subunit)
	{
		result_SubstanceProtein_Subunit->subunit = Deserialize_Integer(arena, cjson_subunit);
	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(substanceProtein_Subunit, "sequence");
	if(cjson_sequence)
	{
		result_SubstanceProtein_Subunit->sequence = Str8C(cJSON_GetStringValue(cjson_sequence));
	}
	cJSON *cjson_length =  cJSON_GetObjectItem(substanceProtein_Subunit, "length");
	if(cjson_length)
	{
		result_SubstanceProtein_Subunit->length = Deserialize_Integer(arena, cjson_length);
	}
	cJSON *cjson_sequenceAttachment =  cJSON_GetObjectItem(substanceProtein_Subunit, "sequenceAttachment");
	if(cjson_sequenceAttachment)
	{
		result_SubstanceProtein_Subunit->sequenceAttachment = Deserialize_Attachment(arena, cjson_sequenceAttachment);
	}
	cJSON *cjson_nTerminalModificationId =  cJSON_GetObjectItem(substanceProtein_Subunit, "nTerminalModificationId");
	if(cjson_nTerminalModificationId)
	{
		result_SubstanceProtein_Subunit->nTerminalModificationId = Deserialize_Identifier(arena, cjson_nTerminalModificationId);
	}
	cJSON *cjson_nTerminalModification =  cJSON_GetObjectItem(substanceProtein_Subunit, "nTerminalModification");
	if(cjson_nTerminalModification)
	{
		result_SubstanceProtein_Subunit->nTerminalModification = Str8C(cJSON_GetStringValue(cjson_nTerminalModification));
	}
	cJSON *cjson_cTerminalModificationId =  cJSON_GetObjectItem(substanceProtein_Subunit, "cTerminalModificationId");
	if(cjson_cTerminalModificationId)
	{
		result_SubstanceProtein_Subunit->cTerminalModificationId = Deserialize_Identifier(arena, cjson_cTerminalModificationId);
	}
	cJSON *cjson_cTerminalModification =  cJSON_GetObjectItem(substanceProtein_Subunit, "cTerminalModification");
	if(cjson_cTerminalModification)
	{
		result_SubstanceProtein_Subunit->cTerminalModification = Str8C(cJSON_GetStringValue(cjson_cTerminalModification));
	}
	return result_SubstanceProtein_Subunit;
}

SubstanceReferenceInformation*
Deserialize_SubstanceReferenceInformation(Arena *arena, cJSON *substanceReferenceInformation)
{
	SubstanceReferenceInformation *result_SubstanceReferenceInformation = PushArray(arena, SubstanceReferenceInformation, 1);
	result_SubstanceReferenceInformation->resourceType = ResourceType::SubstanceReferenceInformation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceReferenceInformation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceReferenceInformation, "id");
	if(cjson_id)
	{
		result_SubstanceReferenceInformation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(substanceReferenceInformation, "meta");
	if(cjson_meta)
	{
		result_SubstanceReferenceInformation->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(substanceReferenceInformation, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SubstanceReferenceInformation->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substanceReferenceInformation, "language");
	if(cjson_language)
	{
		result_SubstanceReferenceInformation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(substanceReferenceInformation, "text");
	if(cjson_text)
	{
		result_SubstanceReferenceInformation->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(substanceReferenceInformation, "contained");
	if(cjson_contained)
	{
		result_SubstanceReferenceInformation->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SubstanceReferenceInformation->contained = PushArray(arena, Resource, result_SubstanceReferenceInformation->contained_count);
		for(int i = 0; i < result_SubstanceReferenceInformation->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SubstanceReferenceInformation->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceReferenceInformation, "extension");
	if(cjson_extension)
	{
		result_SubstanceReferenceInformation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceReferenceInformation->extension = PushArray(arena, Extension, result_SubstanceReferenceInformation->extension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceReferenceInformation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceReferenceInformation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceReferenceInformation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceReferenceInformation->modifierExtension = PushArray(arena, Extension, result_SubstanceReferenceInformation->modifierExtension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceReferenceInformation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(substanceReferenceInformation, "comment");
	if(cjson_comment)
	{
		result_SubstanceReferenceInformation->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_gene =  cJSON_GetObjectItem(substanceReferenceInformation, "gene");
	if(cjson_gene)
	{
		result_SubstanceReferenceInformation->gene_count = cJSON_GetArraySize(cjson_gene);
		result_SubstanceReferenceInformation->gene = PushArray(arena, SubstanceReferenceInformation_Gene, result_SubstanceReferenceInformation->gene_count);
		for(int i = 0; i < result_SubstanceReferenceInformation->gene_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_gene, i);
			result_SubstanceReferenceInformation->gene[i] = *Deserialize_SubstanceReferenceInformation_Gene(arena, internal);
		}

	}
	cJSON *cjson_geneElement =  cJSON_GetObjectItem(substanceReferenceInformation, "geneElement");
	if(cjson_geneElement)
	{
		result_SubstanceReferenceInformation->geneElement_count = cJSON_GetArraySize(cjson_geneElement);
		result_SubstanceReferenceInformation->geneElement = PushArray(arena, SubstanceReferenceInformation_GeneElement, result_SubstanceReferenceInformation->geneElement_count);
		for(int i = 0; i < result_SubstanceReferenceInformation->geneElement_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_geneElement, i);
			result_SubstanceReferenceInformation->geneElement[i] = *Deserialize_SubstanceReferenceInformation_GeneElement(arena, internal);
		}

	}
	cJSON *cjson_classification =  cJSON_GetObjectItem(substanceReferenceInformation, "classification");
	if(cjson_classification)
	{
		result_SubstanceReferenceInformation->classification_count = cJSON_GetArraySize(cjson_classification);
		result_SubstanceReferenceInformation->classification = PushArray(arena, SubstanceReferenceInformation_Classification, result_SubstanceReferenceInformation->classification_count);
		for(int i = 0; i < result_SubstanceReferenceInformation->classification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_classification, i);
			result_SubstanceReferenceInformation->classification[i] = *Deserialize_SubstanceReferenceInformation_Classification(arena, internal);
		}

	}
	cJSON *cjson_target =  cJSON_GetObjectItem(substanceReferenceInformation, "target");
	if(cjson_target)
	{
		result_SubstanceReferenceInformation->target_count = cJSON_GetArraySize(cjson_target);
		result_SubstanceReferenceInformation->target = PushArray(arena, SubstanceReferenceInformation_Target, result_SubstanceReferenceInformation->target_count);
		for(int i = 0; i < result_SubstanceReferenceInformation->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_SubstanceReferenceInformation->target[i] = *Deserialize_SubstanceReferenceInformation_Target(arena, internal);
		}

	}
	return result_SubstanceReferenceInformation;
}

SubstanceReferenceInformation_Gene*
Deserialize_SubstanceReferenceInformation_Gene(Arena *arena, cJSON *substanceReferenceInformation_Gene)
{
	SubstanceReferenceInformation_Gene *result_SubstanceReferenceInformation_Gene = PushArray(arena, SubstanceReferenceInformation_Gene, 1);
	result_SubstanceReferenceInformation_Gene->resourceType = ResourceType::SubstanceReferenceInformation_Gene;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceReferenceInformation_Gene, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceReferenceInformation_Gene, "id");
	if(cjson_id)
	{
		result_SubstanceReferenceInformation_Gene->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceReferenceInformation_Gene, "extension");
	if(cjson_extension)
	{
		result_SubstanceReferenceInformation_Gene->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceReferenceInformation_Gene->extension = PushArray(arena, Extension, result_SubstanceReferenceInformation_Gene->extension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Gene->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceReferenceInformation_Gene->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceReferenceInformation_Gene, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceReferenceInformation_Gene->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceReferenceInformation_Gene->modifierExtension = PushArray(arena, Extension, result_SubstanceReferenceInformation_Gene->modifierExtension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Gene->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceReferenceInformation_Gene->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_geneSequenceOrigin =  cJSON_GetObjectItem(substanceReferenceInformation_Gene, "geneSequenceOrigin");
	if(cjson_geneSequenceOrigin)
	{
		result_SubstanceReferenceInformation_Gene->geneSequenceOrigin = Deserialize_CodeableConcept(arena, cjson_geneSequenceOrigin);
	}
	cJSON *cjson_gene =  cJSON_GetObjectItem(substanceReferenceInformation_Gene, "gene");
	if(cjson_gene)
	{
		result_SubstanceReferenceInformation_Gene->gene = Deserialize_CodeableConcept(arena, cjson_gene);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceReferenceInformation_Gene, "source");
	if(cjson_source)
	{
		result_SubstanceReferenceInformation_Gene->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceReferenceInformation_Gene->source = PushArray(arena, Reference, result_SubstanceReferenceInformation_Gene->source_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Gene->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceReferenceInformation_Gene->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SubstanceReferenceInformation_Gene;
}

SubstanceReferenceInformation_GeneElement*
Deserialize_SubstanceReferenceInformation_GeneElement(Arena *arena, cJSON *substanceReferenceInformation_GeneElement)
{
	SubstanceReferenceInformation_GeneElement *result_SubstanceReferenceInformation_GeneElement = PushArray(arena, SubstanceReferenceInformation_GeneElement, 1);
	result_SubstanceReferenceInformation_GeneElement->resourceType = ResourceType::SubstanceReferenceInformation_GeneElement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceReferenceInformation_GeneElement, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceReferenceInformation_GeneElement, "id");
	if(cjson_id)
	{
		result_SubstanceReferenceInformation_GeneElement->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceReferenceInformation_GeneElement, "extension");
	if(cjson_extension)
	{
		result_SubstanceReferenceInformation_GeneElement->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceReferenceInformation_GeneElement->extension = PushArray(arena, Extension, result_SubstanceReferenceInformation_GeneElement->extension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_GeneElement->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceReferenceInformation_GeneElement->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceReferenceInformation_GeneElement, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceReferenceInformation_GeneElement->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceReferenceInformation_GeneElement->modifierExtension = PushArray(arena, Extension, result_SubstanceReferenceInformation_GeneElement->modifierExtension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_GeneElement->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceReferenceInformation_GeneElement->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substanceReferenceInformation_GeneElement, "type");
	if(cjson_type)
	{
		result_SubstanceReferenceInformation_GeneElement->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_element =  cJSON_GetObjectItem(substanceReferenceInformation_GeneElement, "element");
	if(cjson_element)
	{
		result_SubstanceReferenceInformation_GeneElement->element = Deserialize_Identifier(arena, cjson_element);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceReferenceInformation_GeneElement, "source");
	if(cjson_source)
	{
		result_SubstanceReferenceInformation_GeneElement->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceReferenceInformation_GeneElement->source = PushArray(arena, Reference, result_SubstanceReferenceInformation_GeneElement->source_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_GeneElement->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceReferenceInformation_GeneElement->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SubstanceReferenceInformation_GeneElement;
}

SubstanceReferenceInformation_Classification*
Deserialize_SubstanceReferenceInformation_Classification(Arena *arena, cJSON *substanceReferenceInformation_Classification)
{
	SubstanceReferenceInformation_Classification *result_SubstanceReferenceInformation_Classification = PushArray(arena, SubstanceReferenceInformation_Classification, 1);
	result_SubstanceReferenceInformation_Classification->resourceType = ResourceType::SubstanceReferenceInformation_Classification;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "id");
	if(cjson_id)
	{
		result_SubstanceReferenceInformation_Classification->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "extension");
	if(cjson_extension)
	{
		result_SubstanceReferenceInformation_Classification->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceReferenceInformation_Classification->extension = PushArray(arena, Extension, result_SubstanceReferenceInformation_Classification->extension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Classification->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceReferenceInformation_Classification->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceReferenceInformation_Classification->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceReferenceInformation_Classification->modifierExtension = PushArray(arena, Extension, result_SubstanceReferenceInformation_Classification->modifierExtension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Classification->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceReferenceInformation_Classification->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_domain =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "domain");
	if(cjson_domain)
	{
		result_SubstanceReferenceInformation_Classification->domain = Deserialize_CodeableConcept(arena, cjson_domain);
	}
	cJSON *cjson_classification =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "classification");
	if(cjson_classification)
	{
		result_SubstanceReferenceInformation_Classification->classification = Deserialize_CodeableConcept(arena, cjson_classification);
	}
	cJSON *cjson_subtype =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "subtype");
	if(cjson_subtype)
	{
		result_SubstanceReferenceInformation_Classification->subtype_count = cJSON_GetArraySize(cjson_subtype);
		result_SubstanceReferenceInformation_Classification->subtype = PushArray(arena, CodeableConcept, result_SubstanceReferenceInformation_Classification->subtype_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Classification->subtype_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_subtype, i);
			result_SubstanceReferenceInformation_Classification->subtype[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceReferenceInformation_Classification, "source");
	if(cjson_source)
	{
		result_SubstanceReferenceInformation_Classification->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceReferenceInformation_Classification->source = PushArray(arena, Reference, result_SubstanceReferenceInformation_Classification->source_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Classification->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceReferenceInformation_Classification->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SubstanceReferenceInformation_Classification;
}

SubstanceReferenceInformation_Target*
Deserialize_SubstanceReferenceInformation_Target(Arena *arena, cJSON *substanceReferenceInformation_Target)
{
	SubstanceReferenceInformation_Target *result_SubstanceReferenceInformation_Target = PushArray(arena, SubstanceReferenceInformation_Target, 1);
	result_SubstanceReferenceInformation_Target->resourceType = ResourceType::SubstanceReferenceInformation_Target;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "id");
	if(cjson_id)
	{
		result_SubstanceReferenceInformation_Target->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "extension");
	if(cjson_extension)
	{
		result_SubstanceReferenceInformation_Target->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceReferenceInformation_Target->extension = PushArray(arena, Extension, result_SubstanceReferenceInformation_Target->extension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Target->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceReferenceInformation_Target->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceReferenceInformation_Target->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceReferenceInformation_Target->modifierExtension = PushArray(arena, Extension, result_SubstanceReferenceInformation_Target->modifierExtension_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Target->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceReferenceInformation_Target->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_target =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "target");
	if(cjson_target)
	{
		result_SubstanceReferenceInformation_Target->target = Deserialize_Identifier(arena, cjson_target);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "type");
	if(cjson_type)
	{
		result_SubstanceReferenceInformation_Target->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_interaction =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "interaction");
	if(cjson_interaction)
	{
		result_SubstanceReferenceInformation_Target->interaction = Deserialize_CodeableConcept(arena, cjson_interaction);
	}
	cJSON *cjson_organism =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "organism");
	if(cjson_organism)
	{
		result_SubstanceReferenceInformation_Target->organism = Deserialize_CodeableConcept(arena, cjson_organism);
	}
	cJSON *cjson_organismType =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "organismType");
	if(cjson_organismType)
	{
		result_SubstanceReferenceInformation_Target->organismType = Deserialize_CodeableConcept(arena, cjson_organismType);
	}
	if((bool)cJSON_HasObjectItem(substanceReferenceInformation_Target, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceReferenceInformation_Target, "valueQuantity");
		result_SubstanceReferenceInformation_Target->amount.valueQuantity = Deserialize_Quantity(arena, item);
		result_SubstanceReferenceInformation_Target->amount_type = SubstanceReferenceInformation_Target::AmountType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(substanceReferenceInformation_Target, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceReferenceInformation_Target, "valueRange");
		result_SubstanceReferenceInformation_Target->amount.valueRange = Deserialize_Range(arena, item);
		result_SubstanceReferenceInformation_Target->amount_type = SubstanceReferenceInformation_Target::AmountType::Range;
	}
	else if((bool)cJSON_HasObjectItem(substanceReferenceInformation_Target, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceReferenceInformation_Target, "valueString");
		result_SubstanceReferenceInformation_Target->amount.valueString = Str8C(cJSON_GetStringValue(item));
		result_SubstanceReferenceInformation_Target->amount_type = SubstanceReferenceInformation_Target::AmountType::fhir_string;
	}


	cJSON *cjson_amountType =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "amountType");
	if(cjson_amountType)
	{
		result_SubstanceReferenceInformation_Target->amountType = Deserialize_CodeableConcept(arena, cjson_amountType);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceReferenceInformation_Target, "source");
	if(cjson_source)
	{
		result_SubstanceReferenceInformation_Target->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceReferenceInformation_Target->source = PushArray(arena, Reference, result_SubstanceReferenceInformation_Target->source_count);
		for(int i = 0; i < result_SubstanceReferenceInformation_Target->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceReferenceInformation_Target->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SubstanceReferenceInformation_Target;
}

SubstanceSourceMaterial*
Deserialize_SubstanceSourceMaterial(Arena *arena, cJSON *substanceSourceMaterial)
{
	SubstanceSourceMaterial *result_SubstanceSourceMaterial = PushArray(arena, SubstanceSourceMaterial, 1);
	result_SubstanceSourceMaterial->resourceType = ResourceType::SubstanceSourceMaterial;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSourceMaterial, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSourceMaterial, "id");
	if(cjson_id)
	{
		result_SubstanceSourceMaterial->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(substanceSourceMaterial, "meta");
	if(cjson_meta)
	{
		result_SubstanceSourceMaterial->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(substanceSourceMaterial, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SubstanceSourceMaterial->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substanceSourceMaterial, "language");
	if(cjson_language)
	{
		result_SubstanceSourceMaterial->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(substanceSourceMaterial, "text");
	if(cjson_text)
	{
		result_SubstanceSourceMaterial->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(substanceSourceMaterial, "contained");
	if(cjson_contained)
	{
		result_SubstanceSourceMaterial->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SubstanceSourceMaterial->contained = PushArray(arena, Resource, result_SubstanceSourceMaterial->contained_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SubstanceSourceMaterial->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSourceMaterial, "extension");
	if(cjson_extension)
	{
		result_SubstanceSourceMaterial->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSourceMaterial->extension = PushArray(arena, Extension, result_SubstanceSourceMaterial->extension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSourceMaterial->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSourceMaterial, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSourceMaterial->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSourceMaterial->modifierExtension = PushArray(arena, Extension, result_SubstanceSourceMaterial->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSourceMaterial->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sourceMaterialClass =  cJSON_GetObjectItem(substanceSourceMaterial, "sourceMaterialClass");
	if(cjson_sourceMaterialClass)
	{
		result_SubstanceSourceMaterial->sourceMaterialClass = Deserialize_CodeableConcept(arena, cjson_sourceMaterialClass);
	}
	cJSON *cjson_sourceMaterialType =  cJSON_GetObjectItem(substanceSourceMaterial, "sourceMaterialType");
	if(cjson_sourceMaterialType)
	{
		result_SubstanceSourceMaterial->sourceMaterialType = Deserialize_CodeableConcept(arena, cjson_sourceMaterialType);
	}
	cJSON *cjson_sourceMaterialState =  cJSON_GetObjectItem(substanceSourceMaterial, "sourceMaterialState");
	if(cjson_sourceMaterialState)
	{
		result_SubstanceSourceMaterial->sourceMaterialState = Deserialize_CodeableConcept(arena, cjson_sourceMaterialState);
	}
	cJSON *cjson_organismId =  cJSON_GetObjectItem(substanceSourceMaterial, "organismId");
	if(cjson_organismId)
	{
		result_SubstanceSourceMaterial->organismId = Deserialize_Identifier(arena, cjson_organismId);
	}
	cJSON *cjson_organismName =  cJSON_GetObjectItem(substanceSourceMaterial, "organismName");
	if(cjson_organismName)
	{
		result_SubstanceSourceMaterial->organismName = Str8C(cJSON_GetStringValue(cjson_organismName));
	}
	cJSON *cjson_parentSubstanceId =  cJSON_GetObjectItem(substanceSourceMaterial, "parentSubstanceId");
	if(cjson_parentSubstanceId)
	{
		result_SubstanceSourceMaterial->parentSubstanceId_count = cJSON_GetArraySize(cjson_parentSubstanceId);
		result_SubstanceSourceMaterial->parentSubstanceId = PushArray(arena, Identifier, result_SubstanceSourceMaterial->parentSubstanceId_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->parentSubstanceId_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parentSubstanceId, i);
			result_SubstanceSourceMaterial->parentSubstanceId[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_parentSubstanceName =  cJSON_GetObjectItem(substanceSourceMaterial, "parentSubstanceName");
	if(cjson_parentSubstanceName)
	{
		result_SubstanceSourceMaterial->parentSubstanceName_count = cJSON_GetArraySize(cjson_parentSubstanceName);
		result_SubstanceSourceMaterial->parentSubstanceName = PushArray(arena, fhir_string, result_SubstanceSourceMaterial->parentSubstanceName_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->parentSubstanceName_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parentSubstanceName, i);
			result_SubstanceSourceMaterial->parentSubstanceName[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_countryOfOrigin =  cJSON_GetObjectItem(substanceSourceMaterial, "countryOfOrigin");
	if(cjson_countryOfOrigin)
	{
		result_SubstanceSourceMaterial->countryOfOrigin_count = cJSON_GetArraySize(cjson_countryOfOrigin);
		result_SubstanceSourceMaterial->countryOfOrigin = PushArray(arena, CodeableConcept, result_SubstanceSourceMaterial->countryOfOrigin_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->countryOfOrigin_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_countryOfOrigin, i);
			result_SubstanceSourceMaterial->countryOfOrigin[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_geographicalLocation =  cJSON_GetObjectItem(substanceSourceMaterial, "geographicalLocation");
	if(cjson_geographicalLocation)
	{
		result_SubstanceSourceMaterial->geographicalLocation_count = cJSON_GetArraySize(cjson_geographicalLocation);
		result_SubstanceSourceMaterial->geographicalLocation = PushArray(arena, fhir_string, result_SubstanceSourceMaterial->geographicalLocation_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->geographicalLocation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_geographicalLocation, i);
			result_SubstanceSourceMaterial->geographicalLocation[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_developmentStage =  cJSON_GetObjectItem(substanceSourceMaterial, "developmentStage");
	if(cjson_developmentStage)
	{
		result_SubstanceSourceMaterial->developmentStage = Deserialize_CodeableConcept(arena, cjson_developmentStage);
	}
	cJSON *cjson_fractionDescription =  cJSON_GetObjectItem(substanceSourceMaterial, "fractionDescription");
	if(cjson_fractionDescription)
	{
		result_SubstanceSourceMaterial->fractionDescription_count = cJSON_GetArraySize(cjson_fractionDescription);
		result_SubstanceSourceMaterial->fractionDescription = PushArray(arena, SubstanceSourceMaterial_FractionDescription, result_SubstanceSourceMaterial->fractionDescription_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->fractionDescription_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_fractionDescription, i);
			result_SubstanceSourceMaterial->fractionDescription[i] = *Deserialize_SubstanceSourceMaterial_FractionDescription(arena, internal);
		}

	}
	cJSON *cjson_organism =  cJSON_GetObjectItem(substanceSourceMaterial, "organism");
	if(cjson_organism)
	{
		result_SubstanceSourceMaterial->organism = Deserialize_SubstanceSourceMaterial_Organism(arena, cjson_organism);
	}
	cJSON *cjson_partDescription =  cJSON_GetObjectItem(substanceSourceMaterial, "partDescription");
	if(cjson_partDescription)
	{
		result_SubstanceSourceMaterial->partDescription_count = cJSON_GetArraySize(cjson_partDescription);
		result_SubstanceSourceMaterial->partDescription = PushArray(arena, SubstanceSourceMaterial_PartDescription, result_SubstanceSourceMaterial->partDescription_count);
		for(int i = 0; i < result_SubstanceSourceMaterial->partDescription_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partDescription, i);
			result_SubstanceSourceMaterial->partDescription[i] = *Deserialize_SubstanceSourceMaterial_PartDescription(arena, internal);
		}

	}
	return result_SubstanceSourceMaterial;
}

SubstanceSourceMaterial_FractionDescription*
Deserialize_SubstanceSourceMaterial_FractionDescription(Arena *arena, cJSON *substanceSourceMaterial_FractionDescription)
{
	SubstanceSourceMaterial_FractionDescription *result_SubstanceSourceMaterial_FractionDescription = PushArray(arena, SubstanceSourceMaterial_FractionDescription, 1);
	result_SubstanceSourceMaterial_FractionDescription->resourceType = ResourceType::SubstanceSourceMaterial_FractionDescription;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSourceMaterial_FractionDescription, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSourceMaterial_FractionDescription, "id");
	if(cjson_id)
	{
		result_SubstanceSourceMaterial_FractionDescription->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSourceMaterial_FractionDescription, "extension");
	if(cjson_extension)
	{
		result_SubstanceSourceMaterial_FractionDescription->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSourceMaterial_FractionDescription->extension = PushArray(arena, Extension, result_SubstanceSourceMaterial_FractionDescription->extension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_FractionDescription->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSourceMaterial_FractionDescription->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSourceMaterial_FractionDescription, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSourceMaterial_FractionDescription->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSourceMaterial_FractionDescription->modifierExtension = PushArray(arena, Extension, result_SubstanceSourceMaterial_FractionDescription->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_FractionDescription->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSourceMaterial_FractionDescription->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_fraction =  cJSON_GetObjectItem(substanceSourceMaterial_FractionDescription, "fraction");
	if(cjson_fraction)
	{
		result_SubstanceSourceMaterial_FractionDescription->fraction = Str8C(cJSON_GetStringValue(cjson_fraction));
	}
	cJSON *cjson_materialType =  cJSON_GetObjectItem(substanceSourceMaterial_FractionDescription, "materialType");
	if(cjson_materialType)
	{
		result_SubstanceSourceMaterial_FractionDescription->materialType = Deserialize_CodeableConcept(arena, cjson_materialType);
	}
	return result_SubstanceSourceMaterial_FractionDescription;
}

SubstanceSourceMaterial_Organism*
Deserialize_SubstanceSourceMaterial_Organism(Arena *arena, cJSON *substanceSourceMaterial_Organism)
{
	SubstanceSourceMaterial_Organism *result_SubstanceSourceMaterial_Organism = PushArray(arena, SubstanceSourceMaterial_Organism, 1);
	result_SubstanceSourceMaterial_Organism->resourceType = ResourceType::SubstanceSourceMaterial_Organism;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "id");
	if(cjson_id)
	{
		result_SubstanceSourceMaterial_Organism->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "extension");
	if(cjson_extension)
	{
		result_SubstanceSourceMaterial_Organism->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSourceMaterial_Organism->extension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism->extension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSourceMaterial_Organism->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSourceMaterial_Organism->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSourceMaterial_Organism->modifierExtension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSourceMaterial_Organism->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_family =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "family");
	if(cjson_family)
	{
		result_SubstanceSourceMaterial_Organism->family = Deserialize_CodeableConcept(arena, cjson_family);
	}
	cJSON *cjson_genus =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "genus");
	if(cjson_genus)
	{
		result_SubstanceSourceMaterial_Organism->genus = Deserialize_CodeableConcept(arena, cjson_genus);
	}
	cJSON *cjson_species =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "species");
	if(cjson_species)
	{
		result_SubstanceSourceMaterial_Organism->species = Deserialize_CodeableConcept(arena, cjson_species);
	}
	cJSON *cjson_intraspecificType =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "intraspecificType");
	if(cjson_intraspecificType)
	{
		result_SubstanceSourceMaterial_Organism->intraspecificType = Deserialize_CodeableConcept(arena, cjson_intraspecificType);
	}
	cJSON *cjson_intraspecificDescription =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "intraspecificDescription");
	if(cjson_intraspecificDescription)
	{
		result_SubstanceSourceMaterial_Organism->intraspecificDescription = Str8C(cJSON_GetStringValue(cjson_intraspecificDescription));
	}
	cJSON *cjson_author =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "author");
	if(cjson_author)
	{
		result_SubstanceSourceMaterial_Organism->author_count = cJSON_GetArraySize(cjson_author);
		result_SubstanceSourceMaterial_Organism->author = PushArray(arena, SubstanceSourceMaterial_Organism_Author, result_SubstanceSourceMaterial_Organism->author_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism->author_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_author, i);
			result_SubstanceSourceMaterial_Organism->author[i] = *Deserialize_SubstanceSourceMaterial_Organism_Author(arena, internal);
		}

	}
	cJSON *cjson_hybrid =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "hybrid");
	if(cjson_hybrid)
	{
		result_SubstanceSourceMaterial_Organism->hybrid = Deserialize_SubstanceSourceMaterial_Organism_Hybrid(arena, cjson_hybrid);
	}
	cJSON *cjson_organismGeneral =  cJSON_GetObjectItem(substanceSourceMaterial_Organism, "organismGeneral");
	if(cjson_organismGeneral)
	{
		result_SubstanceSourceMaterial_Organism->organismGeneral = Deserialize_SubstanceSourceMaterial_Organism_OrganismGeneral(arena, cjson_organismGeneral);
	}
	return result_SubstanceSourceMaterial_Organism;
}

SubstanceSourceMaterial_Organism_Author*
Deserialize_SubstanceSourceMaterial_Organism_Author(Arena *arena, cJSON *substanceSourceMaterial_Organism_Author)
{
	SubstanceSourceMaterial_Organism_Author *result_SubstanceSourceMaterial_Organism_Author = PushArray(arena, SubstanceSourceMaterial_Organism_Author, 1);
	result_SubstanceSourceMaterial_Organism_Author->resourceType = ResourceType::SubstanceSourceMaterial_Organism_Author;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Author, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Author, "id");
	if(cjson_id)
	{
		result_SubstanceSourceMaterial_Organism_Author->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Author, "extension");
	if(cjson_extension)
	{
		result_SubstanceSourceMaterial_Organism_Author->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSourceMaterial_Organism_Author->extension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism_Author->extension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism_Author->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSourceMaterial_Organism_Author->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Author, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSourceMaterial_Organism_Author->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSourceMaterial_Organism_Author->modifierExtension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism_Author->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism_Author->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSourceMaterial_Organism_Author->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_authorType =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Author, "authorType");
	if(cjson_authorType)
	{
		result_SubstanceSourceMaterial_Organism_Author->authorType = Deserialize_CodeableConcept(arena, cjson_authorType);
	}
	cJSON *cjson_authorDescription =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Author, "authorDescription");
	if(cjson_authorDescription)
	{
		result_SubstanceSourceMaterial_Organism_Author->authorDescription = Str8C(cJSON_GetStringValue(cjson_authorDescription));
	}
	return result_SubstanceSourceMaterial_Organism_Author;
}

SubstanceSourceMaterial_Organism_Hybrid*
Deserialize_SubstanceSourceMaterial_Organism_Hybrid(Arena *arena, cJSON *substanceSourceMaterial_Organism_Hybrid)
{
	SubstanceSourceMaterial_Organism_Hybrid *result_SubstanceSourceMaterial_Organism_Hybrid = PushArray(arena, SubstanceSourceMaterial_Organism_Hybrid, 1);
	result_SubstanceSourceMaterial_Organism_Hybrid->resourceType = ResourceType::SubstanceSourceMaterial_Organism_Hybrid;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "id");
	if(cjson_id)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "extension");
	if(cjson_extension)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSourceMaterial_Organism_Hybrid->extension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism_Hybrid->extension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism_Hybrid->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSourceMaterial_Organism_Hybrid->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSourceMaterial_Organism_Hybrid->modifierExtension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism_Hybrid->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism_Hybrid->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSourceMaterial_Organism_Hybrid->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_maternalOrganismId =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "maternalOrganismId");
	if(cjson_maternalOrganismId)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->maternalOrganismId = Str8C(cJSON_GetStringValue(cjson_maternalOrganismId));
	}
	cJSON *cjson_maternalOrganismName =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "maternalOrganismName");
	if(cjson_maternalOrganismName)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->maternalOrganismName = Str8C(cJSON_GetStringValue(cjson_maternalOrganismName));
	}
	cJSON *cjson_paternalOrganismId =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "paternalOrganismId");
	if(cjson_paternalOrganismId)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->paternalOrganismId = Str8C(cJSON_GetStringValue(cjson_paternalOrganismId));
	}
	cJSON *cjson_paternalOrganismName =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "paternalOrganismName");
	if(cjson_paternalOrganismName)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->paternalOrganismName = Str8C(cJSON_GetStringValue(cjson_paternalOrganismName));
	}
	cJSON *cjson_hybridType =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_Hybrid, "hybridType");
	if(cjson_hybridType)
	{
		result_SubstanceSourceMaterial_Organism_Hybrid->hybridType = Deserialize_CodeableConcept(arena, cjson_hybridType);
	}
	return result_SubstanceSourceMaterial_Organism_Hybrid;
}

SubstanceSourceMaterial_Organism_OrganismGeneral*
Deserialize_SubstanceSourceMaterial_Organism_OrganismGeneral(Arena *arena, cJSON *substanceSourceMaterial_Organism_OrganismGeneral)
{
	SubstanceSourceMaterial_Organism_OrganismGeneral *result_SubstanceSourceMaterial_Organism_OrganismGeneral = PushArray(arena, SubstanceSourceMaterial_Organism_OrganismGeneral, 1);
	result_SubstanceSourceMaterial_Organism_OrganismGeneral->resourceType = ResourceType::SubstanceSourceMaterial_Organism_OrganismGeneral;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "id");
	if(cjson_id)
	{
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "extension");
	if(cjson_extension)
	{
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->extension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism_OrganismGeneral->extension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism_OrganismGeneral->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSourceMaterial_Organism_OrganismGeneral->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->modifierExtension = PushArray(arena, Extension, result_SubstanceSourceMaterial_Organism_OrganismGeneral->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_Organism_OrganismGeneral->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSourceMaterial_Organism_OrganismGeneral->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_kingdom =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "kingdom");
	if(cjson_kingdom)
	{
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->kingdom = Deserialize_CodeableConcept(arena, cjson_kingdom);
	}
	cJSON *cjson_phylum =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "phylum");
	if(cjson_phylum)
	{
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->phylum = Deserialize_CodeableConcept(arena, cjson_phylum);
	}
	cJSON *cjson_class_ =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "class_");
	if(cjson_class_)
	{
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->class_ = Deserialize_CodeableConcept(arena, cjson_class_);
	}
	cJSON *cjson_order =  cJSON_GetObjectItem(substanceSourceMaterial_Organism_OrganismGeneral, "order");
	if(cjson_order)
	{
		result_SubstanceSourceMaterial_Organism_OrganismGeneral->order = Deserialize_CodeableConcept(arena, cjson_order);
	}
	return result_SubstanceSourceMaterial_Organism_OrganismGeneral;
}

SubstanceSourceMaterial_PartDescription*
Deserialize_SubstanceSourceMaterial_PartDescription(Arena *arena, cJSON *substanceSourceMaterial_PartDescription)
{
	SubstanceSourceMaterial_PartDescription *result_SubstanceSourceMaterial_PartDescription = PushArray(arena, SubstanceSourceMaterial_PartDescription, 1);
	result_SubstanceSourceMaterial_PartDescription->resourceType = ResourceType::SubstanceSourceMaterial_PartDescription;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSourceMaterial_PartDescription, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSourceMaterial_PartDescription, "id");
	if(cjson_id)
	{
		result_SubstanceSourceMaterial_PartDescription->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSourceMaterial_PartDescription, "extension");
	if(cjson_extension)
	{
		result_SubstanceSourceMaterial_PartDescription->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSourceMaterial_PartDescription->extension = PushArray(arena, Extension, result_SubstanceSourceMaterial_PartDescription->extension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_PartDescription->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSourceMaterial_PartDescription->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSourceMaterial_PartDescription, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSourceMaterial_PartDescription->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSourceMaterial_PartDescription->modifierExtension = PushArray(arena, Extension, result_SubstanceSourceMaterial_PartDescription->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSourceMaterial_PartDescription->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSourceMaterial_PartDescription->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_part =  cJSON_GetObjectItem(substanceSourceMaterial_PartDescription, "part");
	if(cjson_part)
	{
		result_SubstanceSourceMaterial_PartDescription->part = Deserialize_CodeableConcept(arena, cjson_part);
	}
	cJSON *cjson_partLocation =  cJSON_GetObjectItem(substanceSourceMaterial_PartDescription, "partLocation");
	if(cjson_partLocation)
	{
		result_SubstanceSourceMaterial_PartDescription->partLocation = Deserialize_CodeableConcept(arena, cjson_partLocation);
	}
	return result_SubstanceSourceMaterial_PartDescription;
}

SubstanceSpecification*
Deserialize_SubstanceSpecification(Arena *arena, cJSON *substanceSpecification)
{
	SubstanceSpecification *result_SubstanceSpecification = PushArray(arena, SubstanceSpecification, 1);
	result_SubstanceSpecification->resourceType = ResourceType::SubstanceSpecification;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(substanceSpecification, "meta");
	if(cjson_meta)
	{
		result_SubstanceSpecification->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(substanceSpecification, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SubstanceSpecification->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substanceSpecification, "language");
	if(cjson_language)
	{
		result_SubstanceSpecification->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(substanceSpecification, "text");
	if(cjson_text)
	{
		result_SubstanceSpecification->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(substanceSpecification, "contained");
	if(cjson_contained)
	{
		result_SubstanceSpecification->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SubstanceSpecification->contained = PushArray(arena, Resource, result_SubstanceSpecification->contained_count);
		for(int i = 0; i < result_SubstanceSpecification->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SubstanceSpecification->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification->extension = PushArray(arena, Extension, result_SubstanceSpecification->extension_count);
		for(int i = 0; i < result_SubstanceSpecification->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(substanceSpecification, "identifier");
	if(cjson_identifier)
	{
		result_SubstanceSpecification->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substanceSpecification, "type");
	if(cjson_type)
	{
		result_SubstanceSpecification->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(substanceSpecification, "status");
	if(cjson_status)
	{
		result_SubstanceSpecification->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_domain =  cJSON_GetObjectItem(substanceSpecification, "domain");
	if(cjson_domain)
	{
		result_SubstanceSpecification->domain = Deserialize_CodeableConcept(arena, cjson_domain);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(substanceSpecification, "description");
	if(cjson_description)
	{
		result_SubstanceSpecification->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceSpecification, "source");
	if(cjson_source)
	{
		result_SubstanceSpecification->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceSpecification->source = PushArray(arena, Reference, result_SubstanceSpecification->source_count);
		for(int i = 0; i < result_SubstanceSpecification->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceSpecification->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(substanceSpecification, "comment");
	if(cjson_comment)
	{
		result_SubstanceSpecification->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_moiety =  cJSON_GetObjectItem(substanceSpecification, "moiety");
	if(cjson_moiety)
	{
		result_SubstanceSpecification->moiety_count = cJSON_GetArraySize(cjson_moiety);
		result_SubstanceSpecification->moiety = PushArray(arena, SubstanceSpecification_Moiety, result_SubstanceSpecification->moiety_count);
		for(int i = 0; i < result_SubstanceSpecification->moiety_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_moiety, i);
			result_SubstanceSpecification->moiety[i] = *Deserialize_SubstanceSpecification_Moiety(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(substanceSpecification, "property");
	if(cjson_property)
	{
		result_SubstanceSpecification->property_count = cJSON_GetArraySize(cjson_property);
		result_SubstanceSpecification->property = PushArray(arena, SubstanceSpecification_Property, result_SubstanceSpecification->property_count);
		for(int i = 0; i < result_SubstanceSpecification->property_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_property, i);
			result_SubstanceSpecification->property[i] = *Deserialize_SubstanceSpecification_Property(arena, internal);
		}

	}
	cJSON *cjson_referenceInformation =  cJSON_GetObjectItem(substanceSpecification, "referenceInformation");
	if(cjson_referenceInformation)
	{
		result_SubstanceSpecification->referenceInformation = Deserialize_Reference(arena, cjson_referenceInformation);
	}
	cJSON *cjson_structure =  cJSON_GetObjectItem(substanceSpecification, "structure");
	if(cjson_structure)
	{
		result_SubstanceSpecification->structure = Deserialize_SubstanceSpecification_Structure(arena, cjson_structure);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(substanceSpecification, "code");
	if(cjson_code)
	{
		result_SubstanceSpecification->code_count = cJSON_GetArraySize(cjson_code);
		result_SubstanceSpecification->code = PushArray(arena, SubstanceSpecification_Code, result_SubstanceSpecification->code_count);
		for(int i = 0; i < result_SubstanceSpecification->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_SubstanceSpecification->code[i] = *Deserialize_SubstanceSpecification_Code(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(substanceSpecification, "name");
	if(cjson_name)
	{
		result_SubstanceSpecification->name_count = cJSON_GetArraySize(cjson_name);
		result_SubstanceSpecification->name = PushArray(arena, SubstanceSpecification_Name, result_SubstanceSpecification->name_count);
		for(int i = 0; i < result_SubstanceSpecification->name_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_name, i);
			result_SubstanceSpecification->name[i] = *Deserialize_SubstanceSpecification_Name(arena, internal);
		}

	}
	cJSON *cjson_molecularWeight =  cJSON_GetObjectItem(substanceSpecification, "molecularWeight");
	if(cjson_molecularWeight)
	{
		result_SubstanceSpecification->molecularWeight_count = cJSON_GetArraySize(cjson_molecularWeight);
		result_SubstanceSpecification->molecularWeight = PushArray(arena, SubstanceSpecification_Structure_Isotope_MolecularWeight, result_SubstanceSpecification->molecularWeight_count);
		for(int i = 0; i < result_SubstanceSpecification->molecularWeight_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_molecularWeight, i);
			result_SubstanceSpecification->molecularWeight[i] = *Deserialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, internal);
		}

	}
	cJSON *cjson_relationship =  cJSON_GetObjectItem(substanceSpecification, "relationship");
	if(cjson_relationship)
	{
		result_SubstanceSpecification->relationship_count = cJSON_GetArraySize(cjson_relationship);
		result_SubstanceSpecification->relationship = PushArray(arena, SubstanceSpecification_Relationship, result_SubstanceSpecification->relationship_count);
		for(int i = 0; i < result_SubstanceSpecification->relationship_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relationship, i);
			result_SubstanceSpecification->relationship[i] = *Deserialize_SubstanceSpecification_Relationship(arena, internal);
		}

	}
	cJSON *cjson_nucleicAcid =  cJSON_GetObjectItem(substanceSpecification, "nucleicAcid");
	if(cjson_nucleicAcid)
	{
		result_SubstanceSpecification->nucleicAcid = Deserialize_Reference(arena, cjson_nucleicAcid);
	}
	cJSON *cjson_polymer =  cJSON_GetObjectItem(substanceSpecification, "polymer");
	if(cjson_polymer)
	{
		result_SubstanceSpecification->polymer = Deserialize_Reference(arena, cjson_polymer);
	}
	cJSON *cjson_protein =  cJSON_GetObjectItem(substanceSpecification, "protein");
	if(cjson_protein)
	{
		result_SubstanceSpecification->protein = Deserialize_Reference(arena, cjson_protein);
	}
	cJSON *cjson_sourceMaterial =  cJSON_GetObjectItem(substanceSpecification, "sourceMaterial");
	if(cjson_sourceMaterial)
	{
		result_SubstanceSpecification->sourceMaterial = Deserialize_Reference(arena, cjson_sourceMaterial);
	}
	return result_SubstanceSpecification;
}

SubstanceSpecification_Moiety*
Deserialize_SubstanceSpecification_Moiety(Arena *arena, cJSON *substanceSpecification_Moiety)
{
	SubstanceSpecification_Moiety *result_SubstanceSpecification_Moiety = PushArray(arena, SubstanceSpecification_Moiety, 1);
	result_SubstanceSpecification_Moiety->resourceType = ResourceType::SubstanceSpecification_Moiety;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Moiety, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Moiety, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Moiety->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Moiety, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Moiety->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Moiety->extension = PushArray(arena, Extension, result_SubstanceSpecification_Moiety->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Moiety->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Moiety->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Moiety, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Moiety->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Moiety->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Moiety->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Moiety->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Moiety->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_role =  cJSON_GetObjectItem(substanceSpecification_Moiety, "role");
	if(cjson_role)
	{
		result_SubstanceSpecification_Moiety->role = Deserialize_CodeableConcept(arena, cjson_role);
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(substanceSpecification_Moiety, "identifier");
	if(cjson_identifier)
	{
		result_SubstanceSpecification_Moiety->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(substanceSpecification_Moiety, "name");
	if(cjson_name)
	{
		result_SubstanceSpecification_Moiety->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_stereochemistry =  cJSON_GetObjectItem(substanceSpecification_Moiety, "stereochemistry");
	if(cjson_stereochemistry)
	{
		result_SubstanceSpecification_Moiety->stereochemistry = Deserialize_CodeableConcept(arena, cjson_stereochemistry);
	}
	cJSON *cjson_opticalActivity =  cJSON_GetObjectItem(substanceSpecification_Moiety, "opticalActivity");
	if(cjson_opticalActivity)
	{
		result_SubstanceSpecification_Moiety->opticalActivity = Deserialize_CodeableConcept(arena, cjson_opticalActivity);
	}
	cJSON *cjson_molecularFormula =  cJSON_GetObjectItem(substanceSpecification_Moiety, "molecularFormula");
	if(cjson_molecularFormula)
	{
		result_SubstanceSpecification_Moiety->molecularFormula = Str8C(cJSON_GetStringValue(cjson_molecularFormula));
	}
	if((bool)cJSON_HasObjectItem(substanceSpecification_Moiety, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Moiety, "valueQuantity");
		result_SubstanceSpecification_Moiety->amount.valueQuantity = Deserialize_Quantity(arena, item);
		result_SubstanceSpecification_Moiety->amount_type = SubstanceSpecification_Moiety::AmountType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(substanceSpecification_Moiety, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Moiety, "valueString");
		result_SubstanceSpecification_Moiety->amount.valueString = Str8C(cJSON_GetStringValue(item));
		result_SubstanceSpecification_Moiety->amount_type = SubstanceSpecification_Moiety::AmountType::fhir_string;
	}


	return result_SubstanceSpecification_Moiety;
}

SubstanceSpecification_Property*
Deserialize_SubstanceSpecification_Property(Arena *arena, cJSON *substanceSpecification_Property)
{
	SubstanceSpecification_Property *result_SubstanceSpecification_Property = PushArray(arena, SubstanceSpecification_Property, 1);
	result_SubstanceSpecification_Property->resourceType = ResourceType::SubstanceSpecification_Property;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Property, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Property, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Property->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Property, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Property->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Property->extension = PushArray(arena, Extension, result_SubstanceSpecification_Property->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Property->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Property->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Property, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Property->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Property->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Property->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Property->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Property->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_category =  cJSON_GetObjectItem(substanceSpecification_Property, "category");
	if(cjson_category)
	{
		result_SubstanceSpecification_Property->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(substanceSpecification_Property, "code");
	if(cjson_code)
	{
		result_SubstanceSpecification_Property->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_parameters =  cJSON_GetObjectItem(substanceSpecification_Property, "parameters");
	if(cjson_parameters)
	{
		result_SubstanceSpecification_Property->parameters = Str8C(cJSON_GetStringValue(cjson_parameters));
	}
	if((bool)cJSON_HasObjectItem(substanceSpecification_Property, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Property, "valueReference");
		result_SubstanceSpecification_Property->definingSubstance.valueReference = Deserialize_Reference(arena, item);
		result_SubstanceSpecification_Property->definingSubstance_type = SubstanceSpecification_Property::DefiningSubstanceType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(substanceSpecification_Property, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Property, "valueCodeableConcept");
		result_SubstanceSpecification_Property->definingSubstance.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_SubstanceSpecification_Property->definingSubstance_type = SubstanceSpecification_Property::DefiningSubstanceType::CodeableConcept;
	}


	if((bool)cJSON_HasObjectItem(substanceSpecification_Property, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Property, "valueQuantity");
		result_SubstanceSpecification_Property->amount.valueQuantity = Deserialize_Quantity(arena, item);
		result_SubstanceSpecification_Property->amount_type = SubstanceSpecification_Property::AmountType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(substanceSpecification_Property, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Property, "valueString");
		result_SubstanceSpecification_Property->amount.valueString = Str8C(cJSON_GetStringValue(item));
		result_SubstanceSpecification_Property->amount_type = SubstanceSpecification_Property::AmountType::fhir_string;
	}


	return result_SubstanceSpecification_Property;
}

SubstanceSpecification_Structure*
Deserialize_SubstanceSpecification_Structure(Arena *arena, cJSON *substanceSpecification_Structure)
{
	SubstanceSpecification_Structure *result_SubstanceSpecification_Structure = PushArray(arena, SubstanceSpecification_Structure, 1);
	result_SubstanceSpecification_Structure->resourceType = ResourceType::SubstanceSpecification_Structure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Structure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Structure, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Structure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Structure, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Structure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Structure->extension = PushArray(arena, Extension, result_SubstanceSpecification_Structure->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Structure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Structure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Structure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Structure->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Structure->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Structure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_stereochemistry =  cJSON_GetObjectItem(substanceSpecification_Structure, "stereochemistry");
	if(cjson_stereochemistry)
	{
		result_SubstanceSpecification_Structure->stereochemistry = Deserialize_CodeableConcept(arena, cjson_stereochemistry);
	}
	cJSON *cjson_opticalActivity =  cJSON_GetObjectItem(substanceSpecification_Structure, "opticalActivity");
	if(cjson_opticalActivity)
	{
		result_SubstanceSpecification_Structure->opticalActivity = Deserialize_CodeableConcept(arena, cjson_opticalActivity);
	}
	cJSON *cjson_molecularFormula =  cJSON_GetObjectItem(substanceSpecification_Structure, "molecularFormula");
	if(cjson_molecularFormula)
	{
		result_SubstanceSpecification_Structure->molecularFormula = Str8C(cJSON_GetStringValue(cjson_molecularFormula));
	}
	cJSON *cjson_molecularFormulaByMoiety =  cJSON_GetObjectItem(substanceSpecification_Structure, "molecularFormulaByMoiety");
	if(cjson_molecularFormulaByMoiety)
	{
		result_SubstanceSpecification_Structure->molecularFormulaByMoiety = Str8C(cJSON_GetStringValue(cjson_molecularFormulaByMoiety));
	}
	cJSON *cjson_isotope =  cJSON_GetObjectItem(substanceSpecification_Structure, "isotope");
	if(cjson_isotope)
	{
		result_SubstanceSpecification_Structure->isotope_count = cJSON_GetArraySize(cjson_isotope);
		result_SubstanceSpecification_Structure->isotope = PushArray(arena, SubstanceSpecification_Structure_Isotope, result_SubstanceSpecification_Structure->isotope_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure->isotope_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_isotope, i);
			result_SubstanceSpecification_Structure->isotope[i] = *Deserialize_SubstanceSpecification_Structure_Isotope(arena, internal);
		}

	}
	cJSON *cjson_molecularWeight =  cJSON_GetObjectItem(substanceSpecification_Structure, "molecularWeight");
	if(cjson_molecularWeight)
	{
		result_SubstanceSpecification_Structure->molecularWeight = Deserialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, cjson_molecularWeight);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceSpecification_Structure, "source");
	if(cjson_source)
	{
		result_SubstanceSpecification_Structure->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceSpecification_Structure->source = PushArray(arena, Reference, result_SubstanceSpecification_Structure->source_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceSpecification_Structure->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_representation =  cJSON_GetObjectItem(substanceSpecification_Structure, "representation");
	if(cjson_representation)
	{
		result_SubstanceSpecification_Structure->representation_count = cJSON_GetArraySize(cjson_representation);
		result_SubstanceSpecification_Structure->representation = PushArray(arena, SubstanceSpecification_Structure_Representation, result_SubstanceSpecification_Structure->representation_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure->representation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_representation, i);
			result_SubstanceSpecification_Structure->representation[i] = *Deserialize_SubstanceSpecification_Structure_Representation(arena, internal);
		}

	}
	return result_SubstanceSpecification_Structure;
}

SubstanceSpecification_Structure_Isotope*
Deserialize_SubstanceSpecification_Structure_Isotope(Arena *arena, cJSON *substanceSpecification_Structure_Isotope)
{
	SubstanceSpecification_Structure_Isotope *result_SubstanceSpecification_Structure_Isotope = PushArray(arena, SubstanceSpecification_Structure_Isotope, 1);
	result_SubstanceSpecification_Structure_Isotope->resourceType = ResourceType::SubstanceSpecification_Structure_Isotope;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Structure_Isotope->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Structure_Isotope->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Structure_Isotope->extension = PushArray(arena, Extension, result_SubstanceSpecification_Structure_Isotope->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure_Isotope->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Structure_Isotope->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Structure_Isotope->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Structure_Isotope->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Structure_Isotope->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure_Isotope->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Structure_Isotope->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "identifier");
	if(cjson_identifier)
	{
		result_SubstanceSpecification_Structure_Isotope->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "name");
	if(cjson_name)
	{
		result_SubstanceSpecification_Structure_Isotope->name = Deserialize_CodeableConcept(arena, cjson_name);
	}
	cJSON *cjson_substitution =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "substitution");
	if(cjson_substitution)
	{
		result_SubstanceSpecification_Structure_Isotope->substitution = Deserialize_CodeableConcept(arena, cjson_substitution);
	}
	cJSON *cjson_halfLife =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "halfLife");
	if(cjson_halfLife)
	{
		result_SubstanceSpecification_Structure_Isotope->halfLife = Deserialize_Quantity(arena, cjson_halfLife);
	}
	cJSON *cjson_molecularWeight =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope, "molecularWeight");
	if(cjson_molecularWeight)
	{
		result_SubstanceSpecification_Structure_Isotope->molecularWeight = Deserialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, cjson_molecularWeight);
	}
	return result_SubstanceSpecification_Structure_Isotope;
}

SubstanceSpecification_Structure_Isotope_MolecularWeight*
Deserialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(Arena *arena, cJSON *substanceSpecification_Structure_Isotope_MolecularWeight)
{
	SubstanceSpecification_Structure_Isotope_MolecularWeight *result_SubstanceSpecification_Structure_Isotope_MolecularWeight = PushArray(arena, SubstanceSpecification_Structure_Isotope_MolecularWeight, 1);
	result_SubstanceSpecification_Structure_Isotope_MolecularWeight->resourceType = ResourceType::SubstanceSpecification_Structure_Isotope_MolecularWeight;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope_MolecularWeight, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope_MolecularWeight, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope_MolecularWeight, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->extension = PushArray(arena, Extension, result_SubstanceSpecification_Structure_Isotope_MolecularWeight->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure_Isotope_MolecularWeight->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Structure_Isotope_MolecularWeight->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope_MolecularWeight, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_method =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope_MolecularWeight, "method");
	if(cjson_method)
	{
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope_MolecularWeight, "type");
	if(cjson_type)
	{
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(substanceSpecification_Structure_Isotope_MolecularWeight, "amount");
	if(cjson_amount)
	{
		result_SubstanceSpecification_Structure_Isotope_MolecularWeight->amount = Deserialize_Quantity(arena, cjson_amount);
	}
	return result_SubstanceSpecification_Structure_Isotope_MolecularWeight;
}

SubstanceSpecification_Structure_Representation*
Deserialize_SubstanceSpecification_Structure_Representation(Arena *arena, cJSON *substanceSpecification_Structure_Representation)
{
	SubstanceSpecification_Structure_Representation *result_SubstanceSpecification_Structure_Representation = PushArray(arena, SubstanceSpecification_Structure_Representation, 1);
	result_SubstanceSpecification_Structure_Representation->resourceType = ResourceType::SubstanceSpecification_Structure_Representation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Structure_Representation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Structure_Representation, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Structure_Representation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Structure_Representation, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Structure_Representation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Structure_Representation->extension = PushArray(arena, Extension, result_SubstanceSpecification_Structure_Representation->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure_Representation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Structure_Representation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Structure_Representation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Structure_Representation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Structure_Representation->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Structure_Representation->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Structure_Representation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Structure_Representation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substanceSpecification_Structure_Representation, "type");
	if(cjson_type)
	{
		result_SubstanceSpecification_Structure_Representation->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_representation =  cJSON_GetObjectItem(substanceSpecification_Structure_Representation, "representation");
	if(cjson_representation)
	{
		result_SubstanceSpecification_Structure_Representation->representation = Str8C(cJSON_GetStringValue(cjson_representation));
	}
	cJSON *cjson_attachment =  cJSON_GetObjectItem(substanceSpecification_Structure_Representation, "attachment");
	if(cjson_attachment)
	{
		result_SubstanceSpecification_Structure_Representation->attachment = Deserialize_Attachment(arena, cjson_attachment);
	}
	return result_SubstanceSpecification_Structure_Representation;
}

SubstanceSpecification_Code*
Deserialize_SubstanceSpecification_Code(Arena *arena, cJSON *substanceSpecification_Code)
{
	SubstanceSpecification_Code *result_SubstanceSpecification_Code = PushArray(arena, SubstanceSpecification_Code, 1);
	result_SubstanceSpecification_Code->resourceType = ResourceType::SubstanceSpecification_Code;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Code, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Code, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Code->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Code, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Code->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Code->extension = PushArray(arena, Extension, result_SubstanceSpecification_Code->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Code->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Code->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Code, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Code->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Code->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Code->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Code->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Code->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(substanceSpecification_Code, "code");
	if(cjson_code)
	{
		result_SubstanceSpecification_Code->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(substanceSpecification_Code, "status");
	if(cjson_status)
	{
		result_SubstanceSpecification_Code->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_statusDate =  cJSON_GetObjectItem(substanceSpecification_Code, "statusDate");
	if(cjson_statusDate)
	{
		result_SubstanceSpecification_Code->statusDate = Str8C(cJSON_GetStringValue(cjson_statusDate));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(substanceSpecification_Code, "comment");
	if(cjson_comment)
	{
		result_SubstanceSpecification_Code->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceSpecification_Code, "source");
	if(cjson_source)
	{
		result_SubstanceSpecification_Code->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceSpecification_Code->source = PushArray(arena, Reference, result_SubstanceSpecification_Code->source_count);
		for(int i = 0; i < result_SubstanceSpecification_Code->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceSpecification_Code->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SubstanceSpecification_Code;
}

SubstanceSpecification_Name*
Deserialize_SubstanceSpecification_Name(Arena *arena, cJSON *substanceSpecification_Name)
{
	SubstanceSpecification_Name *result_SubstanceSpecification_Name = PushArray(arena, SubstanceSpecification_Name, 1);
	result_SubstanceSpecification_Name->resourceType = ResourceType::SubstanceSpecification_Name;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Name, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Name, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Name->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Name, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Name->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Name->extension = PushArray(arena, Extension, result_SubstanceSpecification_Name->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Name->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Name, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Name->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Name->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Name->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Name->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(substanceSpecification_Name, "name");
	if(cjson_name)
	{
		result_SubstanceSpecification_Name->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(substanceSpecification_Name, "type");
	if(cjson_type)
	{
		result_SubstanceSpecification_Name->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(substanceSpecification_Name, "status");
	if(cjson_status)
	{
		result_SubstanceSpecification_Name->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_preferred =  cJSON_GetObjectItem(substanceSpecification_Name, "preferred");
	if(cjson_preferred)
	{
		result_SubstanceSpecification_Name->preferred = (boolean)cJSON_IsTrue(cjson_preferred);
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(substanceSpecification_Name, "language");
	if(cjson_language)
	{
		result_SubstanceSpecification_Name->language_count = cJSON_GetArraySize(cjson_language);
		result_SubstanceSpecification_Name->language = PushArray(arena, CodeableConcept, result_SubstanceSpecification_Name->language_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->language_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_language, i);
			result_SubstanceSpecification_Name->language[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_domain =  cJSON_GetObjectItem(substanceSpecification_Name, "domain");
	if(cjson_domain)
	{
		result_SubstanceSpecification_Name->domain_count = cJSON_GetArraySize(cjson_domain);
		result_SubstanceSpecification_Name->domain = PushArray(arena, CodeableConcept, result_SubstanceSpecification_Name->domain_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->domain_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_domain, i);
			result_SubstanceSpecification_Name->domain[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(substanceSpecification_Name, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_SubstanceSpecification_Name->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_SubstanceSpecification_Name->jurisdiction = PushArray(arena, CodeableConcept, result_SubstanceSpecification_Name->jurisdiction_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_SubstanceSpecification_Name->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_synonym =  cJSON_GetObjectItem(substanceSpecification_Name, "synonym");
	if(cjson_synonym)
	{
		result_SubstanceSpecification_Name->synonym_count = cJSON_GetArraySize(cjson_synonym);
		result_SubstanceSpecification_Name->synonym = PushArray(arena, SubstanceSpecification_Name, result_SubstanceSpecification_Name->synonym_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->synonym_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_synonym, i);
			result_SubstanceSpecification_Name->synonym[i] = *Deserialize_SubstanceSpecification_Name(arena, internal);
		}

	}
	cJSON *cjson_translation =  cJSON_GetObjectItem(substanceSpecification_Name, "translation");
	if(cjson_translation)
	{
		result_SubstanceSpecification_Name->translation_count = cJSON_GetArraySize(cjson_translation);
		result_SubstanceSpecification_Name->translation = PushArray(arena, SubstanceSpecification_Name, result_SubstanceSpecification_Name->translation_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->translation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_translation, i);
			result_SubstanceSpecification_Name->translation[i] = *Deserialize_SubstanceSpecification_Name(arena, internal);
		}

	}
	cJSON *cjson_official =  cJSON_GetObjectItem(substanceSpecification_Name, "official");
	if(cjson_official)
	{
		result_SubstanceSpecification_Name->official_count = cJSON_GetArraySize(cjson_official);
		result_SubstanceSpecification_Name->official = PushArray(arena, SubstanceSpecification_Name_Official, result_SubstanceSpecification_Name->official_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->official_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_official, i);
			result_SubstanceSpecification_Name->official[i] = *Deserialize_SubstanceSpecification_Name_Official(arena, internal);
		}

	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceSpecification_Name, "source");
	if(cjson_source)
	{
		result_SubstanceSpecification_Name->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceSpecification_Name->source = PushArray(arena, Reference, result_SubstanceSpecification_Name->source_count);
		for(int i = 0; i < result_SubstanceSpecification_Name->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceSpecification_Name->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SubstanceSpecification_Name;
}

SubstanceSpecification_Name_Official*
Deserialize_SubstanceSpecification_Name_Official(Arena *arena, cJSON *substanceSpecification_Name_Official)
{
	SubstanceSpecification_Name_Official *result_SubstanceSpecification_Name_Official = PushArray(arena, SubstanceSpecification_Name_Official, 1);
	result_SubstanceSpecification_Name_Official->resourceType = ResourceType::SubstanceSpecification_Name_Official;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Name_Official, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Name_Official, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Name_Official->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Name_Official, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Name_Official->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Name_Official->extension = PushArray(arena, Extension, result_SubstanceSpecification_Name_Official->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Name_Official->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Name_Official->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Name_Official, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Name_Official->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Name_Official->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Name_Official->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Name_Official->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Name_Official->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_authority =  cJSON_GetObjectItem(substanceSpecification_Name_Official, "authority");
	if(cjson_authority)
	{
		result_SubstanceSpecification_Name_Official->authority = Deserialize_CodeableConcept(arena, cjson_authority);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(substanceSpecification_Name_Official, "status");
	if(cjson_status)
	{
		result_SubstanceSpecification_Name_Official->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(substanceSpecification_Name_Official, "date");
	if(cjson_date)
	{
		result_SubstanceSpecification_Name_Official->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	return result_SubstanceSpecification_Name_Official;
}

SubstanceSpecification_Relationship*
Deserialize_SubstanceSpecification_Relationship(Arena *arena, cJSON *substanceSpecification_Relationship)
{
	SubstanceSpecification_Relationship *result_SubstanceSpecification_Relationship = PushArray(arena, SubstanceSpecification_Relationship, 1);
	result_SubstanceSpecification_Relationship->resourceType = ResourceType::SubstanceSpecification_Relationship;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceSpecification_Relationship, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceSpecification_Relationship, "id");
	if(cjson_id)
	{
		result_SubstanceSpecification_Relationship->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceSpecification_Relationship, "extension");
	if(cjson_extension)
	{
		result_SubstanceSpecification_Relationship->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceSpecification_Relationship->extension = PushArray(arena, Extension, result_SubstanceSpecification_Relationship->extension_count);
		for(int i = 0; i < result_SubstanceSpecification_Relationship->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceSpecification_Relationship->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceSpecification_Relationship, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceSpecification_Relationship->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceSpecification_Relationship->modifierExtension = PushArray(arena, Extension, result_SubstanceSpecification_Relationship->modifierExtension_count);
		for(int i = 0; i < result_SubstanceSpecification_Relationship->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceSpecification_Relationship->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(substanceSpecification_Relationship, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Relationship, "valueReference");
		result_SubstanceSpecification_Relationship->substance.valueReference = Deserialize_Reference(arena, item);
		result_SubstanceSpecification_Relationship->substance_type = SubstanceSpecification_Relationship::SubstanceType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(substanceSpecification_Relationship, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Relationship, "valueCodeableConcept");
		result_SubstanceSpecification_Relationship->substance.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_SubstanceSpecification_Relationship->substance_type = SubstanceSpecification_Relationship::SubstanceType::CodeableConcept;
	}


	cJSON *cjson_relationship =  cJSON_GetObjectItem(substanceSpecification_Relationship, "relationship");
	if(cjson_relationship)
	{
		result_SubstanceSpecification_Relationship->relationship = Deserialize_CodeableConcept(arena, cjson_relationship);
	}
	cJSON *cjson_isDefining =  cJSON_GetObjectItem(substanceSpecification_Relationship, "isDefining");
	if(cjson_isDefining)
	{
		result_SubstanceSpecification_Relationship->isDefining = (boolean)cJSON_IsTrue(cjson_isDefining);
	}
	if((bool)cJSON_HasObjectItem(substanceSpecification_Relationship, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Relationship, "valueQuantity");
		result_SubstanceSpecification_Relationship->amount.valueQuantity = Deserialize_Quantity(arena, item);
		result_SubstanceSpecification_Relationship->amount_type = SubstanceSpecification_Relationship::AmountType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(substanceSpecification_Relationship, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Relationship, "valueRange");
		result_SubstanceSpecification_Relationship->amount.valueRange = Deserialize_Range(arena, item);
		result_SubstanceSpecification_Relationship->amount_type = SubstanceSpecification_Relationship::AmountType::Range;
	}
	else if((bool)cJSON_HasObjectItem(substanceSpecification_Relationship, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Relationship, "valueRatio");
		result_SubstanceSpecification_Relationship->amount.valueRatio = Deserialize_Ratio(arena, item);
		result_SubstanceSpecification_Relationship->amount_type = SubstanceSpecification_Relationship::AmountType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(substanceSpecification_Relationship, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceSpecification_Relationship, "valueString");
		result_SubstanceSpecification_Relationship->amount.valueString = Str8C(cJSON_GetStringValue(item));
		result_SubstanceSpecification_Relationship->amount_type = SubstanceSpecification_Relationship::AmountType::fhir_string;
	}


	cJSON *cjson_amountRatioLowLimit =  cJSON_GetObjectItem(substanceSpecification_Relationship, "amountRatioLowLimit");
	if(cjson_amountRatioLowLimit)
	{
		result_SubstanceSpecification_Relationship->amountRatioLowLimit = Deserialize_Ratio(arena, cjson_amountRatioLowLimit);
	}
	cJSON *cjson_amountType =  cJSON_GetObjectItem(substanceSpecification_Relationship, "amountType");
	if(cjson_amountType)
	{
		result_SubstanceSpecification_Relationship->amountType = Deserialize_CodeableConcept(arena, cjson_amountType);
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(substanceSpecification_Relationship, "source");
	if(cjson_source)
	{
		result_SubstanceSpecification_Relationship->source_count = cJSON_GetArraySize(cjson_source);
		result_SubstanceSpecification_Relationship->source = PushArray(arena, Reference, result_SubstanceSpecification_Relationship->source_count);
		for(int i = 0; i < result_SubstanceSpecification_Relationship->source_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_source, i);
			result_SubstanceSpecification_Relationship->source[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SubstanceSpecification_Relationship;
}

SupplyDelivery*
Deserialize_SupplyDelivery(Arena *arena, cJSON *supplyDelivery)
{
	SupplyDelivery *result_SupplyDelivery = PushArray(arena, SupplyDelivery, 1);
	result_SupplyDelivery->resourceType = ResourceType::SupplyDelivery;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(supplyDelivery, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(supplyDelivery, "id");
	if(cjson_id)
	{
		result_SupplyDelivery->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(supplyDelivery, "meta");
	if(cjson_meta)
	{
		result_SupplyDelivery->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(supplyDelivery, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SupplyDelivery->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(supplyDelivery, "language");
	if(cjson_language)
	{
		result_SupplyDelivery->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(supplyDelivery, "text");
	if(cjson_text)
	{
		result_SupplyDelivery->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(supplyDelivery, "contained");
	if(cjson_contained)
	{
		result_SupplyDelivery->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SupplyDelivery->contained = PushArray(arena, Resource, result_SupplyDelivery->contained_count);
		for(int i = 0; i < result_SupplyDelivery->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SupplyDelivery->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(supplyDelivery, "extension");
	if(cjson_extension)
	{
		result_SupplyDelivery->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SupplyDelivery->extension = PushArray(arena, Extension, result_SupplyDelivery->extension_count);
		for(int i = 0; i < result_SupplyDelivery->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SupplyDelivery->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(supplyDelivery, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SupplyDelivery->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SupplyDelivery->modifierExtension = PushArray(arena, Extension, result_SupplyDelivery->modifierExtension_count);
		for(int i = 0; i < result_SupplyDelivery->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SupplyDelivery->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(supplyDelivery, "identifier");
	if(cjson_identifier)
	{
		result_SupplyDelivery->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_SupplyDelivery->identifier = PushArray(arena, Identifier, result_SupplyDelivery->identifier_count);
		for(int i = 0; i < result_SupplyDelivery->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_SupplyDelivery->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(supplyDelivery, "basedOn");
	if(cjson_basedOn)
	{
		result_SupplyDelivery->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_SupplyDelivery->basedOn = PushArray(arena, Reference, result_SupplyDelivery->basedOn_count);
		for(int i = 0; i < result_SupplyDelivery->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_SupplyDelivery->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(supplyDelivery, "partOf");
	if(cjson_partOf)
	{
		result_SupplyDelivery->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_SupplyDelivery->partOf = PushArray(arena, Reference, result_SupplyDelivery->partOf_count);
		for(int i = 0; i < result_SupplyDelivery->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_SupplyDelivery->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(supplyDelivery, "status");
	if(cjson_status)
	{
		result_SupplyDelivery->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(supplyDelivery, "patient");
	if(cjson_patient)
	{
		result_SupplyDelivery->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(supplyDelivery, "type");
	if(cjson_type)
	{
		result_SupplyDelivery->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_suppliedItem =  cJSON_GetObjectItem(supplyDelivery, "suppliedItem");
	if(cjson_suppliedItem)
	{
		result_SupplyDelivery->suppliedItem = Deserialize_SupplyDelivery_SuppliedItem(arena, cjson_suppliedItem);
	}
	if((bool)cJSON_HasObjectItem(supplyDelivery, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyDelivery, "valueDateTime");
		result_SupplyDelivery->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_SupplyDelivery->occurrence_type = SupplyDelivery::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(supplyDelivery, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyDelivery, "valuePeriod");
		result_SupplyDelivery->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_SupplyDelivery->occurrence_type = SupplyDelivery::OccurrenceType::Period;
	}
	else if((bool)cJSON_HasObjectItem(supplyDelivery, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyDelivery, "valueTiming");
		result_SupplyDelivery->occurrence.valueTiming = Deserialize_Timing(arena, item);
		result_SupplyDelivery->occurrence_type = SupplyDelivery::OccurrenceType::Timing;
	}


	cJSON *cjson_supplier =  cJSON_GetObjectItem(supplyDelivery, "supplier");
	if(cjson_supplier)
	{
		result_SupplyDelivery->supplier = Deserialize_Reference(arena, cjson_supplier);
	}
	cJSON *cjson_destination =  cJSON_GetObjectItem(supplyDelivery, "destination");
	if(cjson_destination)
	{
		result_SupplyDelivery->destination = Deserialize_Reference(arena, cjson_destination);
	}
	cJSON *cjson_receiver =  cJSON_GetObjectItem(supplyDelivery, "receiver");
	if(cjson_receiver)
	{
		result_SupplyDelivery->receiver_count = cJSON_GetArraySize(cjson_receiver);
		result_SupplyDelivery->receiver = PushArray(arena, Reference, result_SupplyDelivery->receiver_count);
		for(int i = 0; i < result_SupplyDelivery->receiver_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_receiver, i);
			result_SupplyDelivery->receiver[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_SupplyDelivery;
}

SupplyDelivery_SuppliedItem*
Deserialize_SupplyDelivery_SuppliedItem(Arena *arena, cJSON *supplyDelivery_SuppliedItem)
{
	SupplyDelivery_SuppliedItem *result_SupplyDelivery_SuppliedItem = PushArray(arena, SupplyDelivery_SuppliedItem, 1);
	result_SupplyDelivery_SuppliedItem->resourceType = ResourceType::SupplyDelivery_SuppliedItem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(supplyDelivery_SuppliedItem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(supplyDelivery_SuppliedItem, "id");
	if(cjson_id)
	{
		result_SupplyDelivery_SuppliedItem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(supplyDelivery_SuppliedItem, "extension");
	if(cjson_extension)
	{
		result_SupplyDelivery_SuppliedItem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SupplyDelivery_SuppliedItem->extension = PushArray(arena, Extension, result_SupplyDelivery_SuppliedItem->extension_count);
		for(int i = 0; i < result_SupplyDelivery_SuppliedItem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SupplyDelivery_SuppliedItem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(supplyDelivery_SuppliedItem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SupplyDelivery_SuppliedItem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SupplyDelivery_SuppliedItem->modifierExtension = PushArray(arena, Extension, result_SupplyDelivery_SuppliedItem->modifierExtension_count);
		for(int i = 0; i < result_SupplyDelivery_SuppliedItem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SupplyDelivery_SuppliedItem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_quantity =  cJSON_GetObjectItem(supplyDelivery_SuppliedItem, "quantity");
	if(cjson_quantity)
	{
		result_SupplyDelivery_SuppliedItem->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	if((bool)cJSON_HasObjectItem(supplyDelivery_SuppliedItem, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyDelivery_SuppliedItem, "valueCodeableConcept");
		result_SupplyDelivery_SuppliedItem->item.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_SupplyDelivery_SuppliedItem->item_type = SupplyDelivery_SuppliedItem::ItemType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(supplyDelivery_SuppliedItem, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyDelivery_SuppliedItem, "valueReference");
		result_SupplyDelivery_SuppliedItem->item.valueReference = Deserialize_Reference(arena, item);
		result_SupplyDelivery_SuppliedItem->item_type = SupplyDelivery_SuppliedItem::ItemType::Reference;
	}


	return result_SupplyDelivery_SuppliedItem;
}

SupplyRequest*
Deserialize_SupplyRequest(Arena *arena, cJSON *supplyRequest)
{
	SupplyRequest *result_SupplyRequest = PushArray(arena, SupplyRequest, 1);
	result_SupplyRequest->resourceType = ResourceType::SupplyRequest;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(supplyRequest, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(supplyRequest, "id");
	if(cjson_id)
	{
		result_SupplyRequest->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(supplyRequest, "meta");
	if(cjson_meta)
	{
		result_SupplyRequest->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(supplyRequest, "implicitRules");
	if(cjson_implicitRules)
	{
		result_SupplyRequest->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(supplyRequest, "language");
	if(cjson_language)
	{
		result_SupplyRequest->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(supplyRequest, "text");
	if(cjson_text)
	{
		result_SupplyRequest->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(supplyRequest, "contained");
	if(cjson_contained)
	{
		result_SupplyRequest->contained_count = cJSON_GetArraySize(cjson_contained);
		result_SupplyRequest->contained = PushArray(arena, Resource, result_SupplyRequest->contained_count);
		for(int i = 0; i < result_SupplyRequest->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_SupplyRequest->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(supplyRequest, "extension");
	if(cjson_extension)
	{
		result_SupplyRequest->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SupplyRequest->extension = PushArray(arena, Extension, result_SupplyRequest->extension_count);
		for(int i = 0; i < result_SupplyRequest->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SupplyRequest->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(supplyRequest, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SupplyRequest->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SupplyRequest->modifierExtension = PushArray(arena, Extension, result_SupplyRequest->modifierExtension_count);
		for(int i = 0; i < result_SupplyRequest->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SupplyRequest->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(supplyRequest, "identifier");
	if(cjson_identifier)
	{
		result_SupplyRequest->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_SupplyRequest->identifier = PushArray(arena, Identifier, result_SupplyRequest->identifier_count);
		for(int i = 0; i < result_SupplyRequest->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_SupplyRequest->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(supplyRequest, "status");
	if(cjson_status)
	{
		result_SupplyRequest->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_category =  cJSON_GetObjectItem(supplyRequest, "category");
	if(cjson_category)
	{
		result_SupplyRequest->category = Deserialize_CodeableConcept(arena, cjson_category);
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(supplyRequest, "priority");
	if(cjson_priority)
	{
		result_SupplyRequest->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	if((bool)cJSON_HasObjectItem(supplyRequest, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest, "valueCodeableConcept");
		result_SupplyRequest->item.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_SupplyRequest->item_type = SupplyRequest::ItemType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(supplyRequest, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest, "valueReference");
		result_SupplyRequest->item.valueReference = Deserialize_Reference(arena, item);
		result_SupplyRequest->item_type = SupplyRequest::ItemType::Reference;
	}


	cJSON *cjson_quantity =  cJSON_GetObjectItem(supplyRequest, "quantity");
	if(cjson_quantity)
	{
		result_SupplyRequest->quantity = Deserialize_Quantity(arena, cjson_quantity);
	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(supplyRequest, "parameter");
	if(cjson_parameter)
	{
		result_SupplyRequest->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_SupplyRequest->parameter = PushArray(arena, SupplyRequest_Parameter, result_SupplyRequest->parameter_count);
		for(int i = 0; i < result_SupplyRequest->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_SupplyRequest->parameter[i] = *Deserialize_SupplyRequest_Parameter(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(supplyRequest, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest, "valueDateTime");
		result_SupplyRequest->occurrence.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_SupplyRequest->occurrence_type = SupplyRequest::OccurrenceType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(supplyRequest, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest, "valuePeriod");
		result_SupplyRequest->occurrence.valuePeriod = Deserialize_Period(arena, item);
		result_SupplyRequest->occurrence_type = SupplyRequest::OccurrenceType::Period;
	}
	else if((bool)cJSON_HasObjectItem(supplyRequest, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest, "valueTiming");
		result_SupplyRequest->occurrence.valueTiming = Deserialize_Timing(arena, item);
		result_SupplyRequest->occurrence_type = SupplyRequest::OccurrenceType::Timing;
	}


	cJSON *cjson_authoredOn =  cJSON_GetObjectItem(supplyRequest, "authoredOn");
	if(cjson_authoredOn)
	{
		result_SupplyRequest->authoredOn = Str8C(cJSON_GetStringValue(cjson_authoredOn));
	}
	cJSON *cjson_requester =  cJSON_GetObjectItem(supplyRequest, "requester");
	if(cjson_requester)
	{
		result_SupplyRequest->requester = Deserialize_Reference(arena, cjson_requester);
	}
	cJSON *cjson_supplier =  cJSON_GetObjectItem(supplyRequest, "supplier");
	if(cjson_supplier)
	{
		result_SupplyRequest->supplier_count = cJSON_GetArraySize(cjson_supplier);
		result_SupplyRequest->supplier = PushArray(arena, Reference, result_SupplyRequest->supplier_count);
		for(int i = 0; i < result_SupplyRequest->supplier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_supplier, i);
			result_SupplyRequest->supplier[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(supplyRequest, "reasonCode");
	if(cjson_reasonCode)
	{
		result_SupplyRequest->reasonCode_count = cJSON_GetArraySize(cjson_reasonCode);
		result_SupplyRequest->reasonCode = PushArray(arena, CodeableConcept, result_SupplyRequest->reasonCode_count);
		for(int i = 0; i < result_SupplyRequest->reasonCode_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonCode, i);
			result_SupplyRequest->reasonCode[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(supplyRequest, "reasonReference");
	if(cjson_reasonReference)
	{
		result_SupplyRequest->reasonReference_count = cJSON_GetArraySize(cjson_reasonReference);
		result_SupplyRequest->reasonReference = PushArray(arena, Reference, result_SupplyRequest->reasonReference_count);
		for(int i = 0; i < result_SupplyRequest->reasonReference_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_reasonReference, i);
			result_SupplyRequest->reasonReference[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_deliverFrom =  cJSON_GetObjectItem(supplyRequest, "deliverFrom");
	if(cjson_deliverFrom)
	{
		result_SupplyRequest->deliverFrom = Deserialize_Reference(arena, cjson_deliverFrom);
	}
	cJSON *cjson_deliverTo =  cJSON_GetObjectItem(supplyRequest, "deliverTo");
	if(cjson_deliverTo)
	{
		result_SupplyRequest->deliverTo = Deserialize_Reference(arena, cjson_deliverTo);
	}
	return result_SupplyRequest;
}

SupplyRequest_Parameter*
Deserialize_SupplyRequest_Parameter(Arena *arena, cJSON *supplyRequest_Parameter)
{
	SupplyRequest_Parameter *result_SupplyRequest_Parameter = PushArray(arena, SupplyRequest_Parameter, 1);
	result_SupplyRequest_Parameter->resourceType = ResourceType::SupplyRequest_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(supplyRequest_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(supplyRequest_Parameter, "id");
	if(cjson_id)
	{
		result_SupplyRequest_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(supplyRequest_Parameter, "extension");
	if(cjson_extension)
	{
		result_SupplyRequest_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SupplyRequest_Parameter->extension = PushArray(arena, Extension, result_SupplyRequest_Parameter->extension_count);
		for(int i = 0; i < result_SupplyRequest_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SupplyRequest_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(supplyRequest_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SupplyRequest_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SupplyRequest_Parameter->modifierExtension = PushArray(arena, Extension, result_SupplyRequest_Parameter->modifierExtension_count);
		for(int i = 0; i < result_SupplyRequest_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SupplyRequest_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(supplyRequest_Parameter, "code");
	if(cjson_code)
	{
		result_SupplyRequest_Parameter->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	if((bool)cJSON_HasObjectItem(supplyRequest_Parameter, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest_Parameter, "valueCodeableConcept");
		result_SupplyRequest_Parameter->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_SupplyRequest_Parameter->value_type = SupplyRequest_Parameter::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(supplyRequest_Parameter, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest_Parameter, "valueQuantity");
		result_SupplyRequest_Parameter->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_SupplyRequest_Parameter->value_type = SupplyRequest_Parameter::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(supplyRequest_Parameter, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest_Parameter, "valueRange");
		result_SupplyRequest_Parameter->value.valueRange = Deserialize_Range(arena, item);
		result_SupplyRequest_Parameter->value_type = SupplyRequest_Parameter::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(supplyRequest_Parameter, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(supplyRequest_Parameter, "valueBoolean");
		result_SupplyRequest_Parameter->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_SupplyRequest_Parameter->value_type = SupplyRequest_Parameter::ValueType::fhir_boolean;
	}


	return result_SupplyRequest_Parameter;
}

Task*
Deserialize_Task(Arena *arena, cJSON *task)
{
	Task *result_Task = PushArray(arena, Task, 1);
	result_Task->resourceType = ResourceType::Task;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(task, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(task, "id");
	if(cjson_id)
	{
		result_Task->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(task, "meta");
	if(cjson_meta)
	{
		result_Task->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(task, "implicitRules");
	if(cjson_implicitRules)
	{
		result_Task->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(task, "language");
	if(cjson_language)
	{
		result_Task->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(task, "text");
	if(cjson_text)
	{
		result_Task->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(task, "contained");
	if(cjson_contained)
	{
		result_Task->contained_count = cJSON_GetArraySize(cjson_contained);
		result_Task->contained = PushArray(arena, Resource, result_Task->contained_count);
		for(int i = 0; i < result_Task->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_Task->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(task, "extension");
	if(cjson_extension)
	{
		result_Task->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Task->extension = PushArray(arena, Extension, result_Task->extension_count);
		for(int i = 0; i < result_Task->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Task->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(task, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Task->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Task->modifierExtension = PushArray(arena, Extension, result_Task->modifierExtension_count);
		for(int i = 0; i < result_Task->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Task->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(task, "identifier");
	if(cjson_identifier)
	{
		result_Task->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_Task->identifier = PushArray(arena, Identifier, result_Task->identifier_count);
		for(int i = 0; i < result_Task->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_Task->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_instantiatesCanonical =  cJSON_GetObjectItem(task, "instantiatesCanonical");
	if(cjson_instantiatesCanonical)
	{
		result_Task->instantiatesCanonical = Str8C(cJSON_GetStringValue(cjson_instantiatesCanonical));
	}
	cJSON *cjson_instantiatesUri =  cJSON_GetObjectItem(task, "instantiatesUri");
	if(cjson_instantiatesUri)
	{
		result_Task->instantiatesUri = Str8C(cJSON_GetStringValue(cjson_instantiatesUri));
	}
	cJSON *cjson_basedOn =  cJSON_GetObjectItem(task, "basedOn");
	if(cjson_basedOn)
	{
		result_Task->basedOn_count = cJSON_GetArraySize(cjson_basedOn);
		result_Task->basedOn = PushArray(arena, Reference, result_Task->basedOn_count);
		for(int i = 0; i < result_Task->basedOn_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_basedOn, i);
			result_Task->basedOn[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_groupIdentifier =  cJSON_GetObjectItem(task, "groupIdentifier");
	if(cjson_groupIdentifier)
	{
		result_Task->groupIdentifier = Deserialize_Identifier(arena, cjson_groupIdentifier);
	}
	cJSON *cjson_partOf =  cJSON_GetObjectItem(task, "partOf");
	if(cjson_partOf)
	{
		result_Task->partOf_count = cJSON_GetArraySize(cjson_partOf);
		result_Task->partOf = PushArray(arena, Reference, result_Task->partOf_count);
		for(int i = 0; i < result_Task->partOf_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_partOf, i);
			result_Task->partOf[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(task, "status");
	if(cjson_status)
	{
		result_Task->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusReason =  cJSON_GetObjectItem(task, "statusReason");
	if(cjson_statusReason)
	{
		result_Task->statusReason = Deserialize_CodeableConcept(arena, cjson_statusReason);
	}
	cJSON *cjson_businessStatus =  cJSON_GetObjectItem(task, "businessStatus");
	if(cjson_businessStatus)
	{
		result_Task->businessStatus = Deserialize_CodeableConcept(arena, cjson_businessStatus);
	}
	cJSON *cjson_intent =  cJSON_GetObjectItem(task, "intent");
	if(cjson_intent)
	{
		result_Task->intent = Str8C(cJSON_GetStringValue(cjson_intent));
	}
	cJSON *cjson_priority =  cJSON_GetObjectItem(task, "priority");
	if(cjson_priority)
	{
		result_Task->priority = Str8C(cJSON_GetStringValue(cjson_priority));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(task, "code");
	if(cjson_code)
	{
		result_Task->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(task, "description");
	if(cjson_description)
	{
		result_Task->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_focus =  cJSON_GetObjectItem(task, "focus");
	if(cjson_focus)
	{
		result_Task->focus = Deserialize_Reference(arena, cjson_focus);
	}
	cJSON *cjson_for_ =  cJSON_GetObjectItem(task, "for_");
	if(cjson_for_)
	{
		result_Task->for_ = Deserialize_Reference(arena, cjson_for_);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(task, "encounter");
	if(cjson_encounter)
	{
		result_Task->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_executionPeriod =  cJSON_GetObjectItem(task, "executionPeriod");
	if(cjson_executionPeriod)
	{
		result_Task->executionPeriod = Deserialize_Period(arena, cjson_executionPeriod);
	}
	cJSON *cjson_authoredOn =  cJSON_GetObjectItem(task, "authoredOn");
	if(cjson_authoredOn)
	{
		result_Task->authoredOn = Str8C(cJSON_GetStringValue(cjson_authoredOn));
	}
	cJSON *cjson_lastModified =  cJSON_GetObjectItem(task, "lastModified");
	if(cjson_lastModified)
	{
		result_Task->lastModified = Str8C(cJSON_GetStringValue(cjson_lastModified));
	}
	cJSON *cjson_requester =  cJSON_GetObjectItem(task, "requester");
	if(cjson_requester)
	{
		result_Task->requester = Deserialize_Reference(arena, cjson_requester);
	}
	cJSON *cjson_performerType =  cJSON_GetObjectItem(task, "performerType");
	if(cjson_performerType)
	{
		result_Task->performerType_count = cJSON_GetArraySize(cjson_performerType);
		result_Task->performerType = PushArray(arena, CodeableConcept, result_Task->performerType_count);
		for(int i = 0; i < result_Task->performerType_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_performerType, i);
			result_Task->performerType[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_owner =  cJSON_GetObjectItem(task, "owner");
	if(cjson_owner)
	{
		result_Task->owner = Deserialize_Reference(arena, cjson_owner);
	}
	cJSON *cjson_location =  cJSON_GetObjectItem(task, "location");
	if(cjson_location)
	{
		result_Task->location = Deserialize_Reference(arena, cjson_location);
	}
	cJSON *cjson_reasonCode =  cJSON_GetObjectItem(task, "reasonCode");
	if(cjson_reasonCode)
	{
		result_Task->reasonCode = Deserialize_CodeableConcept(arena, cjson_reasonCode);
	}
	cJSON *cjson_reasonReference =  cJSON_GetObjectItem(task, "reasonReference");
	if(cjson_reasonReference)
	{
		result_Task->reasonReference = Deserialize_Reference(arena, cjson_reasonReference);
	}
	cJSON *cjson_insurance =  cJSON_GetObjectItem(task, "insurance");
	if(cjson_insurance)
	{
		result_Task->insurance_count = cJSON_GetArraySize(cjson_insurance);
		result_Task->insurance = PushArray(arena, Reference, result_Task->insurance_count);
		for(int i = 0; i < result_Task->insurance_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_insurance, i);
			result_Task->insurance[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_note =  cJSON_GetObjectItem(task, "note");
	if(cjson_note)
	{
		result_Task->note_count = cJSON_GetArraySize(cjson_note);
		result_Task->note = PushArray(arena, Annotation, result_Task->note_count);
		for(int i = 0; i < result_Task->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_Task->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	cJSON *cjson_relevantHistory =  cJSON_GetObjectItem(task, "relevantHistory");
	if(cjson_relevantHistory)
	{
		result_Task->relevantHistory_count = cJSON_GetArraySize(cjson_relevantHistory);
		result_Task->relevantHistory = PushArray(arena, Reference, result_Task->relevantHistory_count);
		for(int i = 0; i < result_Task->relevantHistory_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_relevantHistory, i);
			result_Task->relevantHistory[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_restriction =  cJSON_GetObjectItem(task, "restriction");
	if(cjson_restriction)
	{
		result_Task->restriction = Deserialize_Task_Restriction(arena, cjson_restriction);
	}
	cJSON *cjson_input =  cJSON_GetObjectItem(task, "input");
	if(cjson_input)
	{
		result_Task->input_count = cJSON_GetArraySize(cjson_input);
		result_Task->input = PushArray(arena, Task_Input, result_Task->input_count);
		for(int i = 0; i < result_Task->input_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_input, i);
			result_Task->input[i] = *Deserialize_Task_Input(arena, internal);
		}

	}
	cJSON *cjson_output =  cJSON_GetObjectItem(task, "output");
	if(cjson_output)
	{
		result_Task->output_count = cJSON_GetArraySize(cjson_output);
		result_Task->output = PushArray(arena, Task_Output, result_Task->output_count);
		for(int i = 0; i < result_Task->output_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_output, i);
			result_Task->output[i] = *Deserialize_Task_Output(arena, internal);
		}

	}
	return result_Task;
}

Task_Restriction*
Deserialize_Task_Restriction(Arena *arena, cJSON *task_Restriction)
{
	Task_Restriction *result_Task_Restriction = PushArray(arena, Task_Restriction, 1);
	result_Task_Restriction->resourceType = ResourceType::Task_Restriction;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(task_Restriction, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(task_Restriction, "id");
	if(cjson_id)
	{
		result_Task_Restriction->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(task_Restriction, "extension");
	if(cjson_extension)
	{
		result_Task_Restriction->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Task_Restriction->extension = PushArray(arena, Extension, result_Task_Restriction->extension_count);
		for(int i = 0; i < result_Task_Restriction->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Task_Restriction->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(task_Restriction, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Task_Restriction->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Task_Restriction->modifierExtension = PushArray(arena, Extension, result_Task_Restriction->modifierExtension_count);
		for(int i = 0; i < result_Task_Restriction->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Task_Restriction->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_repetitions =  cJSON_GetObjectItem(task_Restriction, "repetitions");
	if(cjson_repetitions)
	{
		result_Task_Restriction->repetitions = (int)cJSON_GetNumberValue(cjson_repetitions);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(task_Restriction, "period");
	if(cjson_period)
	{
		result_Task_Restriction->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_recipient =  cJSON_GetObjectItem(task_Restriction, "recipient");
	if(cjson_recipient)
	{
		result_Task_Restriction->recipient_count = cJSON_GetArraySize(cjson_recipient);
		result_Task_Restriction->recipient = PushArray(arena, Reference, result_Task_Restriction->recipient_count);
		for(int i = 0; i < result_Task_Restriction->recipient_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_recipient, i);
			result_Task_Restriction->recipient[i] = *Deserialize_Reference(arena, internal);
		}

	}
	return result_Task_Restriction;
}

Task_Input*
Deserialize_Task_Input(Arena *arena, cJSON *task_Input)
{
	Task_Input *result_Task_Input = PushArray(arena, Task_Input, 1);
	result_Task_Input->resourceType = ResourceType::Task_Input;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(task_Input, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(task_Input, "id");
	if(cjson_id)
	{
		result_Task_Input->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(task_Input, "extension");
	if(cjson_extension)
	{
		result_Task_Input->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Task_Input->extension = PushArray(arena, Extension, result_Task_Input->extension_count);
		for(int i = 0; i < result_Task_Input->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Task_Input->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(task_Input, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Task_Input->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Task_Input->modifierExtension = PushArray(arena, Extension, result_Task_Input->modifierExtension_count);
		for(int i = 0; i < result_Task_Input->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Task_Input->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(task_Input, "type");
	if(cjson_type)
	{
		result_Task_Input->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(task_Input, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueBase64Binary");
		result_Task_Input->value.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueBoolean");
		result_Task_Input->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Task_Input->value_type = Task_Input::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueCanonical");
		result_Task_Input->value.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueCode");
		result_Task_Input->value.valueCode = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueDate");
		result_Task_Input->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueDateTime");
		result_Task_Input->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueDecimal");
		result_Task_Input->value.valueDecimal = cJSON_GetNumberValue(item);
		result_Task_Input->value_type = Task_Input::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueId");
		result_Task_Input->value.valueId = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueInstant");
		result_Task_Input->value.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueInteger");
		result_Task_Input->value.valueInteger = Deserialize_Integer(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueMarkdown");
		result_Task_Input->value.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueOid");
		result_Task_Input->value.valueOid = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valuePositiveInt");
		result_Task_Input->value.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_Task_Input->value_type = Task_Input::ValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueString");
		result_Task_Input->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueTime");
		result_Task_Input->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueUnsignedInt");
		result_Task_Input->value.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_Task_Input->value_type = Task_Input::ValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueUri");
		result_Task_Input->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueUrl");
		result_Task_Input->value.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueUuid");
		result_Task_Input->value.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_Task_Input->value_type = Task_Input::ValueType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueAddress");
		result_Task_Input->value.valueAddress = Deserialize_Address(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Address;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueAge");
		result_Task_Input->value.valueAge = Deserialize_Age(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Age;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueAnnotation");
		result_Task_Input->value.valueAnnotation = Deserialize_Annotation(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueAttachment");
		result_Task_Input->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueCodeableConcept");
		result_Task_Input->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueCoding");
		result_Task_Input->value.valueCoding = Deserialize_Coding(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueContactPoint");
		result_Task_Input->value.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueCount");
		result_Task_Input->value.valueCount = Deserialize_Count(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Count;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueDistance");
		result_Task_Input->value.valueDistance = Deserialize_Distance(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueDuration");
		result_Task_Input->value.valueDuration = Deserialize_Duration(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueHumanName");
		result_Task_Input->value.valueHumanName = Deserialize_HumanName(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueIdentifier");
		result_Task_Input->value.valueIdentifier = Deserialize_Identifier(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueMoney");
		result_Task_Input->value.valueMoney = Deserialize_Money(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Money;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valuePeriod");
		result_Task_Input->value.valuePeriod = Deserialize_Period(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueQuantity");
		result_Task_Input->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueRange");
		result_Task_Input->value.valueRange = Deserialize_Range(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueRatio");
		result_Task_Input->value.valueRatio = Deserialize_Ratio(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueReference");
		result_Task_Input->value.valueReference = Deserialize_Reference(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueSampledData");
		result_Task_Input->value.valueSampledData = Deserialize_SampledData(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueSignature");
		result_Task_Input->value.valueSignature = Deserialize_Signature(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueTiming");
		result_Task_Input->value.valueTiming = Deserialize_Timing(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueContactDetail");
		result_Task_Input->value.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueContributor");
		result_Task_Input->value.valueContributor = Deserialize_Contributor(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueDataRequirement");
		result_Task_Input->value.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueExpression");
		result_Task_Input->value.valueExpression = Deserialize_Expression(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueParameterDefinition");
		result_Task_Input->value.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueRelatedArtifact");
		result_Task_Input->value.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueTriggerDefinition");
		result_Task_Input->value.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueUsageContext");
		result_Task_Input->value.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueDosage");
		result_Task_Input->value.valueDosage = Deserialize_Dosage(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(task_Input, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Input, "valueMeta");
		result_Task_Input->value.valueMeta = Deserialize_Meta(arena, item);
		result_Task_Input->value_type = Task_Input::ValueType::Meta;
	}


	return result_Task_Input;
}

Task_Output*
Deserialize_Task_Output(Arena *arena, cJSON *task_Output)
{
	Task_Output *result_Task_Output = PushArray(arena, Task_Output, 1);
	result_Task_Output->resourceType = ResourceType::Task_Output;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(task_Output, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(task_Output, "id");
	if(cjson_id)
	{
		result_Task_Output->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(task_Output, "extension");
	if(cjson_extension)
	{
		result_Task_Output->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Task_Output->extension = PushArray(arena, Extension, result_Task_Output->extension_count);
		for(int i = 0; i < result_Task_Output->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Task_Output->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(task_Output, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Task_Output->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Task_Output->modifierExtension = PushArray(arena, Extension, result_Task_Output->modifierExtension_count);
		for(int i = 0; i < result_Task_Output->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Task_Output->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(task_Output, "type");
	if(cjson_type)
	{
		result_Task_Output->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(task_Output, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueBase64Binary");
		result_Task_Output->value.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueBoolean");
		result_Task_Output->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Task_Output->value_type = Task_Output::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueCanonical");
		result_Task_Output->value.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueCode");
		result_Task_Output->value.valueCode = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueDate");
		result_Task_Output->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueDateTime");
		result_Task_Output->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueDecimal");
		result_Task_Output->value.valueDecimal = cJSON_GetNumberValue(item);
		result_Task_Output->value_type = Task_Output::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueId");
		result_Task_Output->value.valueId = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueInstant");
		result_Task_Output->value.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueInteger");
		result_Task_Output->value.valueInteger = Deserialize_Integer(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueMarkdown");
		result_Task_Output->value.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueOid");
		result_Task_Output->value.valueOid = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valuePositiveInt");
		result_Task_Output->value.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_Task_Output->value_type = Task_Output::ValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueString");
		result_Task_Output->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueTime");
		result_Task_Output->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueUnsignedInt");
		result_Task_Output->value.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_Task_Output->value_type = Task_Output::ValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueUri");
		result_Task_Output->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueUrl");
		result_Task_Output->value.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueUuid");
		result_Task_Output->value.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_Task_Output->value_type = Task_Output::ValueType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueAddress");
		result_Task_Output->value.valueAddress = Deserialize_Address(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Address;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueAge");
		result_Task_Output->value.valueAge = Deserialize_Age(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Age;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueAnnotation");
		result_Task_Output->value.valueAnnotation = Deserialize_Annotation(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueAttachment");
		result_Task_Output->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueCodeableConcept");
		result_Task_Output->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueCoding");
		result_Task_Output->value.valueCoding = Deserialize_Coding(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueContactPoint");
		result_Task_Output->value.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueCount");
		result_Task_Output->value.valueCount = Deserialize_Count(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Count;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueDistance");
		result_Task_Output->value.valueDistance = Deserialize_Distance(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueDuration");
		result_Task_Output->value.valueDuration = Deserialize_Duration(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueHumanName");
		result_Task_Output->value.valueHumanName = Deserialize_HumanName(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueIdentifier");
		result_Task_Output->value.valueIdentifier = Deserialize_Identifier(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueMoney");
		result_Task_Output->value.valueMoney = Deserialize_Money(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Money;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valuePeriod");
		result_Task_Output->value.valuePeriod = Deserialize_Period(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueQuantity");
		result_Task_Output->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueRange");
		result_Task_Output->value.valueRange = Deserialize_Range(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueRatio");
		result_Task_Output->value.valueRatio = Deserialize_Ratio(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueReference");
		result_Task_Output->value.valueReference = Deserialize_Reference(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueSampledData");
		result_Task_Output->value.valueSampledData = Deserialize_SampledData(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueSignature");
		result_Task_Output->value.valueSignature = Deserialize_Signature(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueTiming");
		result_Task_Output->value.valueTiming = Deserialize_Timing(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueContactDetail");
		result_Task_Output->value.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueContributor");
		result_Task_Output->value.valueContributor = Deserialize_Contributor(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueDataRequirement");
		result_Task_Output->value.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueExpression");
		result_Task_Output->value.valueExpression = Deserialize_Expression(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueParameterDefinition");
		result_Task_Output->value.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueRelatedArtifact");
		result_Task_Output->value.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueTriggerDefinition");
		result_Task_Output->value.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueUsageContext");
		result_Task_Output->value.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueDosage");
		result_Task_Output->value.valueDosage = Deserialize_Dosage(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(task_Output, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(task_Output, "valueMeta");
		result_Task_Output->value.valueMeta = Deserialize_Meta(arena, item);
		result_Task_Output->value_type = Task_Output::ValueType::Meta;
	}


	return result_Task_Output;
}

TerminologyCapabilities*
Deserialize_TerminologyCapabilities(Arena *arena, cJSON *terminologyCapabilities)
{
	TerminologyCapabilities *result_TerminologyCapabilities = PushArray(arena, TerminologyCapabilities, 1);
	result_TerminologyCapabilities->resourceType = ResourceType::TerminologyCapabilities;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(terminologyCapabilities, "meta");
	if(cjson_meta)
	{
		result_TerminologyCapabilities->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(terminologyCapabilities, "implicitRules");
	if(cjson_implicitRules)
	{
		result_TerminologyCapabilities->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(terminologyCapabilities, "language");
	if(cjson_language)
	{
		result_TerminologyCapabilities->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(terminologyCapabilities, "text");
	if(cjson_text)
	{
		result_TerminologyCapabilities->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(terminologyCapabilities, "contained");
	if(cjson_contained)
	{
		result_TerminologyCapabilities->contained_count = cJSON_GetArraySize(cjson_contained);
		result_TerminologyCapabilities->contained = PushArray(arena, Resource, result_TerminologyCapabilities->contained_count);
		for(int i = 0; i < result_TerminologyCapabilities->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_TerminologyCapabilities->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities->extension = PushArray(arena, Extension, result_TerminologyCapabilities->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(terminologyCapabilities, "url");
	if(cjson_url)
	{
		result_TerminologyCapabilities->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(terminologyCapabilities, "version");
	if(cjson_version)
	{
		result_TerminologyCapabilities->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(terminologyCapabilities, "name");
	if(cjson_name)
	{
		result_TerminologyCapabilities->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(terminologyCapabilities, "title");
	if(cjson_title)
	{
		result_TerminologyCapabilities->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(terminologyCapabilities, "status");
	if(cjson_status)
	{
		result_TerminologyCapabilities->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(terminologyCapabilities, "experimental");
	if(cjson_experimental)
	{
		result_TerminologyCapabilities->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(terminologyCapabilities, "date");
	if(cjson_date)
	{
		result_TerminologyCapabilities->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(terminologyCapabilities, "publisher");
	if(cjson_publisher)
	{
		result_TerminologyCapabilities->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(terminologyCapabilities, "contact");
	if(cjson_contact)
	{
		result_TerminologyCapabilities->contact_count = cJSON_GetArraySize(cjson_contact);
		result_TerminologyCapabilities->contact = PushArray(arena, ContactDetail, result_TerminologyCapabilities->contact_count);
		for(int i = 0; i < result_TerminologyCapabilities->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_TerminologyCapabilities->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(terminologyCapabilities, "description");
	if(cjson_description)
	{
		result_TerminologyCapabilities->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(terminologyCapabilities, "useContext");
	if(cjson_useContext)
	{
		result_TerminologyCapabilities->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_TerminologyCapabilities->useContext = PushArray(arena, UsageContext, result_TerminologyCapabilities->useContext_count);
		for(int i = 0; i < result_TerminologyCapabilities->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_TerminologyCapabilities->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(terminologyCapabilities, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_TerminologyCapabilities->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_TerminologyCapabilities->jurisdiction = PushArray(arena, CodeableConcept, result_TerminologyCapabilities->jurisdiction_count);
		for(int i = 0; i < result_TerminologyCapabilities->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_TerminologyCapabilities->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(terminologyCapabilities, "purpose");
	if(cjson_purpose)
	{
		result_TerminologyCapabilities->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(terminologyCapabilities, "copyright");
	if(cjson_copyright)
	{
		result_TerminologyCapabilities->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_kind =  cJSON_GetObjectItem(terminologyCapabilities, "kind");
	if(cjson_kind)
	{
		result_TerminologyCapabilities->kind = Str8C(cJSON_GetStringValue(cjson_kind));
	}
	cJSON *cjson_software =  cJSON_GetObjectItem(terminologyCapabilities, "software");
	if(cjson_software)
	{
		result_TerminologyCapabilities->software = Deserialize_TerminologyCapabilities_Software(arena, cjson_software);
	}
	cJSON *cjson_implementation =  cJSON_GetObjectItem(terminologyCapabilities, "implementation");
	if(cjson_implementation)
	{
		result_TerminologyCapabilities->implementation = Deserialize_TerminologyCapabilities_Implementation(arena, cjson_implementation);
	}
	cJSON *cjson_lockedDate =  cJSON_GetObjectItem(terminologyCapabilities, "lockedDate");
	if(cjson_lockedDate)
	{
		result_TerminologyCapabilities->lockedDate = (boolean)cJSON_IsTrue(cjson_lockedDate);
	}
	cJSON *cjson_codeSystem =  cJSON_GetObjectItem(terminologyCapabilities, "codeSystem");
	if(cjson_codeSystem)
	{
		result_TerminologyCapabilities->codeSystem_count = cJSON_GetArraySize(cjson_codeSystem);
		result_TerminologyCapabilities->codeSystem = PushArray(arena, TerminologyCapabilities_CodeSystem, result_TerminologyCapabilities->codeSystem_count);
		for(int i = 0; i < result_TerminologyCapabilities->codeSystem_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_codeSystem, i);
			result_TerminologyCapabilities->codeSystem[i] = *Deserialize_TerminologyCapabilities_CodeSystem(arena, internal);
		}

	}
	cJSON *cjson_expansion =  cJSON_GetObjectItem(terminologyCapabilities, "expansion");
	if(cjson_expansion)
	{
		result_TerminologyCapabilities->expansion = Deserialize_TerminologyCapabilities_Expansion(arena, cjson_expansion);
	}
	cJSON *cjson_codeSearch =  cJSON_GetObjectItem(terminologyCapabilities, "codeSearch");
	if(cjson_codeSearch)
	{
		result_TerminologyCapabilities->codeSearch = Str8C(cJSON_GetStringValue(cjson_codeSearch));
	}
	cJSON *cjson_validateCode =  cJSON_GetObjectItem(terminologyCapabilities, "validateCode");
	if(cjson_validateCode)
	{
		result_TerminologyCapabilities->validateCode = Deserialize_TerminologyCapabilities_ValidateCode(arena, cjson_validateCode);
	}
	cJSON *cjson_translation =  cJSON_GetObjectItem(terminologyCapabilities, "translation");
	if(cjson_translation)
	{
		result_TerminologyCapabilities->translation = Deserialize_TerminologyCapabilities_Translation(arena, cjson_translation);
	}
	cJSON *cjson_closure =  cJSON_GetObjectItem(terminologyCapabilities, "closure");
	if(cjson_closure)
	{
		result_TerminologyCapabilities->closure = Deserialize_TerminologyCapabilities_Closure(arena, cjson_closure);
	}
	return result_TerminologyCapabilities;
}

TerminologyCapabilities_Software*
Deserialize_TerminologyCapabilities_Software(Arena *arena, cJSON *terminologyCapabilities_Software)
{
	TerminologyCapabilities_Software *result_TerminologyCapabilities_Software = PushArray(arena, TerminologyCapabilities_Software, 1);
	result_TerminologyCapabilities_Software->resourceType = ResourceType::TerminologyCapabilities_Software;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_Software, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_Software, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_Software->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_Software, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_Software->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_Software->extension = PushArray(arena, Extension, result_TerminologyCapabilities_Software->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Software->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_Software->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_Software, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_Software->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_Software->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_Software->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Software->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_Software->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(terminologyCapabilities_Software, "name");
	if(cjson_name)
	{
		result_TerminologyCapabilities_Software->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(terminologyCapabilities_Software, "version");
	if(cjson_version)
	{
		result_TerminologyCapabilities_Software->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	return result_TerminologyCapabilities_Software;
}

TerminologyCapabilities_Implementation*
Deserialize_TerminologyCapabilities_Implementation(Arena *arena, cJSON *terminologyCapabilities_Implementation)
{
	TerminologyCapabilities_Implementation *result_TerminologyCapabilities_Implementation = PushArray(arena, TerminologyCapabilities_Implementation, 1);
	result_TerminologyCapabilities_Implementation->resourceType = ResourceType::TerminologyCapabilities_Implementation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_Implementation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_Implementation, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_Implementation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_Implementation, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_Implementation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_Implementation->extension = PushArray(arena, Extension, result_TerminologyCapabilities_Implementation->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Implementation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_Implementation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_Implementation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_Implementation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_Implementation->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_Implementation->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Implementation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_Implementation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(terminologyCapabilities_Implementation, "description");
	if(cjson_description)
	{
		result_TerminologyCapabilities_Implementation->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(terminologyCapabilities_Implementation, "url");
	if(cjson_url)
	{
		result_TerminologyCapabilities_Implementation->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	return result_TerminologyCapabilities_Implementation;
}

TerminologyCapabilities_CodeSystem*
Deserialize_TerminologyCapabilities_CodeSystem(Arena *arena, cJSON *terminologyCapabilities_CodeSystem)
{
	TerminologyCapabilities_CodeSystem *result_TerminologyCapabilities_CodeSystem = PushArray(arena, TerminologyCapabilities_CodeSystem, 1);
	result_TerminologyCapabilities_CodeSystem->resourceType = ResourceType::TerminologyCapabilities_CodeSystem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_CodeSystem->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_CodeSystem->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_CodeSystem->extension = PushArray(arena, Extension, result_TerminologyCapabilities_CodeSystem->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_CodeSystem->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_CodeSystem->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_CodeSystem->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_CodeSystem->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_CodeSystem->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_uri =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem, "uri");
	if(cjson_uri)
	{
		result_TerminologyCapabilities_CodeSystem->uri = Str8C(cJSON_GetStringValue(cjson_uri));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem, "version");
	if(cjson_version)
	{
		result_TerminologyCapabilities_CodeSystem->version_count = cJSON_GetArraySize(cjson_version);
		result_TerminologyCapabilities_CodeSystem->version = PushArray(arena, TerminologyCapabilities_CodeSystem_Version, result_TerminologyCapabilities_CodeSystem->version_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem->version_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_version, i);
			result_TerminologyCapabilities_CodeSystem->version[i] = *Deserialize_TerminologyCapabilities_CodeSystem_Version(arena, internal);
		}

	}
	cJSON *cjson_subsumption =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem, "subsumption");
	if(cjson_subsumption)
	{
		result_TerminologyCapabilities_CodeSystem->subsumption = (boolean)cJSON_IsTrue(cjson_subsumption);
	}
	return result_TerminologyCapabilities_CodeSystem;
}

TerminologyCapabilities_CodeSystem_Version*
Deserialize_TerminologyCapabilities_CodeSystem_Version(Arena *arena, cJSON *terminologyCapabilities_CodeSystem_Version)
{
	TerminologyCapabilities_CodeSystem_Version *result_TerminologyCapabilities_CodeSystem_Version = PushArray(arena, TerminologyCapabilities_CodeSystem_Version, 1);
	result_TerminologyCapabilities_CodeSystem_Version->resourceType = ResourceType::TerminologyCapabilities_CodeSystem_Version;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_CodeSystem_Version->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_CodeSystem_Version->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_CodeSystem_Version->extension = PushArray(arena, Extension, result_TerminologyCapabilities_CodeSystem_Version->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_CodeSystem_Version->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_CodeSystem_Version->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_CodeSystem_Version->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_CodeSystem_Version->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_CodeSystem_Version->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "code");
	if(cjson_code)
	{
		result_TerminologyCapabilities_CodeSystem_Version->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_isDefault =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "isDefault");
	if(cjson_isDefault)
	{
		result_TerminologyCapabilities_CodeSystem_Version->isDefault = (boolean)cJSON_IsTrue(cjson_isDefault);
	}
	cJSON *cjson_compositional =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "compositional");
	if(cjson_compositional)
	{
		result_TerminologyCapabilities_CodeSystem_Version->compositional = (boolean)cJSON_IsTrue(cjson_compositional);
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "language");
	if(cjson_language)
	{
		result_TerminologyCapabilities_CodeSystem_Version->language_count = cJSON_GetArraySize(cjson_language);
		result_TerminologyCapabilities_CodeSystem_Version->language = PushArray(arena, fhir_code, result_TerminologyCapabilities_CodeSystem_Version->language_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version->language_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_language, i);
			result_TerminologyCapabilities_CodeSystem_Version->language[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_filter =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "filter");
	if(cjson_filter)
	{
		result_TerminologyCapabilities_CodeSystem_Version->filter_count = cJSON_GetArraySize(cjson_filter);
		result_TerminologyCapabilities_CodeSystem_Version->filter = PushArray(arena, TerminologyCapabilities_CodeSystem_Version_Filter, result_TerminologyCapabilities_CodeSystem_Version->filter_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version->filter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_filter, i);
			result_TerminologyCapabilities_CodeSystem_Version->filter[i] = *Deserialize_TerminologyCapabilities_CodeSystem_Version_Filter(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version, "property");
	if(cjson_property)
	{
		result_TerminologyCapabilities_CodeSystem_Version->property_count = cJSON_GetArraySize(cjson_property);
		result_TerminologyCapabilities_CodeSystem_Version->property = PushArray(arena, fhir_code, result_TerminologyCapabilities_CodeSystem_Version->property_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version->property_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_property, i);
			result_TerminologyCapabilities_CodeSystem_Version->property[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_TerminologyCapabilities_CodeSystem_Version;
}

TerminologyCapabilities_CodeSystem_Version_Filter*
Deserialize_TerminologyCapabilities_CodeSystem_Version_Filter(Arena *arena, cJSON *terminologyCapabilities_CodeSystem_Version_Filter)
{
	TerminologyCapabilities_CodeSystem_Version_Filter *result_TerminologyCapabilities_CodeSystem_Version_Filter = PushArray(arena, TerminologyCapabilities_CodeSystem_Version_Filter, 1);
	result_TerminologyCapabilities_CodeSystem_Version_Filter->resourceType = ResourceType::TerminologyCapabilities_CodeSystem_Version_Filter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version_Filter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version_Filter, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_CodeSystem_Version_Filter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version_Filter, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_CodeSystem_Version_Filter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_CodeSystem_Version_Filter->extension = PushArray(arena, Extension, result_TerminologyCapabilities_CodeSystem_Version_Filter->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version_Filter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_CodeSystem_Version_Filter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version_Filter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_CodeSystem_Version_Filter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_CodeSystem_Version_Filter->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_CodeSystem_Version_Filter->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version_Filter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_CodeSystem_Version_Filter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version_Filter, "code");
	if(cjson_code)
	{
		result_TerminologyCapabilities_CodeSystem_Version_Filter->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_op =  cJSON_GetObjectItem(terminologyCapabilities_CodeSystem_Version_Filter, "op");
	if(cjson_op)
	{
		result_TerminologyCapabilities_CodeSystem_Version_Filter->op_count = cJSON_GetArraySize(cjson_op);
		result_TerminologyCapabilities_CodeSystem_Version_Filter->op = PushArray(arena, fhir_code, result_TerminologyCapabilities_CodeSystem_Version_Filter->op_count);
		for(int i = 0; i < result_TerminologyCapabilities_CodeSystem_Version_Filter->op_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_op, i);
			result_TerminologyCapabilities_CodeSystem_Version_Filter->op[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_TerminologyCapabilities_CodeSystem_Version_Filter;
}

TerminologyCapabilities_Expansion*
Deserialize_TerminologyCapabilities_Expansion(Arena *arena, cJSON *terminologyCapabilities_Expansion)
{
	TerminologyCapabilities_Expansion *result_TerminologyCapabilities_Expansion = PushArray(arena, TerminologyCapabilities_Expansion, 1);
	result_TerminologyCapabilities_Expansion->resourceType = ResourceType::TerminologyCapabilities_Expansion;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_Expansion->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_Expansion->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_Expansion->extension = PushArray(arena, Extension, result_TerminologyCapabilities_Expansion->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Expansion->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_Expansion->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_Expansion->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_Expansion->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_Expansion->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Expansion->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_Expansion->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_hierarchical =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "hierarchical");
	if(cjson_hierarchical)
	{
		result_TerminologyCapabilities_Expansion->hierarchical = (boolean)cJSON_IsTrue(cjson_hierarchical);
	}
	cJSON *cjson_paging =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "paging");
	if(cjson_paging)
	{
		result_TerminologyCapabilities_Expansion->paging = (boolean)cJSON_IsTrue(cjson_paging);
	}
	cJSON *cjson_incomplete =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "incomplete");
	if(cjson_incomplete)
	{
		result_TerminologyCapabilities_Expansion->incomplete = (boolean)cJSON_IsTrue(cjson_incomplete);
	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "parameter");
	if(cjson_parameter)
	{
		result_TerminologyCapabilities_Expansion->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_TerminologyCapabilities_Expansion->parameter = PushArray(arena, TerminologyCapabilities_Expansion_Parameter, result_TerminologyCapabilities_Expansion->parameter_count);
		for(int i = 0; i < result_TerminologyCapabilities_Expansion->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_TerminologyCapabilities_Expansion->parameter[i] = *Deserialize_TerminologyCapabilities_Expansion_Parameter(arena, internal);
		}

	}
	cJSON *cjson_textFilter =  cJSON_GetObjectItem(terminologyCapabilities_Expansion, "textFilter");
	if(cjson_textFilter)
	{
		result_TerminologyCapabilities_Expansion->textFilter = Str8C(cJSON_GetStringValue(cjson_textFilter));
	}
	return result_TerminologyCapabilities_Expansion;
}

TerminologyCapabilities_Expansion_Parameter*
Deserialize_TerminologyCapabilities_Expansion_Parameter(Arena *arena, cJSON *terminologyCapabilities_Expansion_Parameter)
{
	TerminologyCapabilities_Expansion_Parameter *result_TerminologyCapabilities_Expansion_Parameter = PushArray(arena, TerminologyCapabilities_Expansion_Parameter, 1);
	result_TerminologyCapabilities_Expansion_Parameter->resourceType = ResourceType::TerminologyCapabilities_Expansion_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_Expansion_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_Expansion_Parameter, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_Expansion_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_Expansion_Parameter, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_Expansion_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_Expansion_Parameter->extension = PushArray(arena, Extension, result_TerminologyCapabilities_Expansion_Parameter->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Expansion_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_Expansion_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_Expansion_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_Expansion_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_Expansion_Parameter->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_Expansion_Parameter->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Expansion_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_Expansion_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(terminologyCapabilities_Expansion_Parameter, "name");
	if(cjson_name)
	{
		result_TerminologyCapabilities_Expansion_Parameter->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(terminologyCapabilities_Expansion_Parameter, "documentation");
	if(cjson_documentation)
	{
		result_TerminologyCapabilities_Expansion_Parameter->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	return result_TerminologyCapabilities_Expansion_Parameter;
}

TerminologyCapabilities_ValidateCode*
Deserialize_TerminologyCapabilities_ValidateCode(Arena *arena, cJSON *terminologyCapabilities_ValidateCode)
{
	TerminologyCapabilities_ValidateCode *result_TerminologyCapabilities_ValidateCode = PushArray(arena, TerminologyCapabilities_ValidateCode, 1);
	result_TerminologyCapabilities_ValidateCode->resourceType = ResourceType::TerminologyCapabilities_ValidateCode;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_ValidateCode, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_ValidateCode, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_ValidateCode->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_ValidateCode, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_ValidateCode->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_ValidateCode->extension = PushArray(arena, Extension, result_TerminologyCapabilities_ValidateCode->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_ValidateCode->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_ValidateCode->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_ValidateCode, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_ValidateCode->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_ValidateCode->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_ValidateCode->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_ValidateCode->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_ValidateCode->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_translations =  cJSON_GetObjectItem(terminologyCapabilities_ValidateCode, "translations");
	if(cjson_translations)
	{
		result_TerminologyCapabilities_ValidateCode->translations = (boolean)cJSON_IsTrue(cjson_translations);
	}
	return result_TerminologyCapabilities_ValidateCode;
}

TerminologyCapabilities_Translation*
Deserialize_TerminologyCapabilities_Translation(Arena *arena, cJSON *terminologyCapabilities_Translation)
{
	TerminologyCapabilities_Translation *result_TerminologyCapabilities_Translation = PushArray(arena, TerminologyCapabilities_Translation, 1);
	result_TerminologyCapabilities_Translation->resourceType = ResourceType::TerminologyCapabilities_Translation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_Translation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_Translation, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_Translation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_Translation, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_Translation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_Translation->extension = PushArray(arena, Extension, result_TerminologyCapabilities_Translation->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Translation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_Translation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_Translation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_Translation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_Translation->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_Translation->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Translation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_Translation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_needsMap =  cJSON_GetObjectItem(terminologyCapabilities_Translation, "needsMap");
	if(cjson_needsMap)
	{
		result_TerminologyCapabilities_Translation->needsMap = (boolean)cJSON_IsTrue(cjson_needsMap);
	}
	return result_TerminologyCapabilities_Translation;
}

TerminologyCapabilities_Closure*
Deserialize_TerminologyCapabilities_Closure(Arena *arena, cJSON *terminologyCapabilities_Closure)
{
	TerminologyCapabilities_Closure *result_TerminologyCapabilities_Closure = PushArray(arena, TerminologyCapabilities_Closure, 1);
	result_TerminologyCapabilities_Closure->resourceType = ResourceType::TerminologyCapabilities_Closure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(terminologyCapabilities_Closure, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(terminologyCapabilities_Closure, "id");
	if(cjson_id)
	{
		result_TerminologyCapabilities_Closure->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(terminologyCapabilities_Closure, "extension");
	if(cjson_extension)
	{
		result_TerminologyCapabilities_Closure->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TerminologyCapabilities_Closure->extension = PushArray(arena, Extension, result_TerminologyCapabilities_Closure->extension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Closure->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TerminologyCapabilities_Closure->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(terminologyCapabilities_Closure, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TerminologyCapabilities_Closure->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TerminologyCapabilities_Closure->modifierExtension = PushArray(arena, Extension, result_TerminologyCapabilities_Closure->modifierExtension_count);
		for(int i = 0; i < result_TerminologyCapabilities_Closure->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TerminologyCapabilities_Closure->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_translation =  cJSON_GetObjectItem(terminologyCapabilities_Closure, "translation");
	if(cjson_translation)
	{
		result_TerminologyCapabilities_Closure->translation = (boolean)cJSON_IsTrue(cjson_translation);
	}
	return result_TerminologyCapabilities_Closure;
}

TestReport*
Deserialize_TestReport(Arena *arena, cJSON *testReport)
{
	TestReport *result_TestReport = PushArray(arena, TestReport, 1);
	result_TestReport->resourceType = ResourceType::TestReport;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport, "id");
	if(cjson_id)
	{
		result_TestReport->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(testReport, "meta");
	if(cjson_meta)
	{
		result_TestReport->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(testReport, "implicitRules");
	if(cjson_implicitRules)
	{
		result_TestReport->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(testReport, "language");
	if(cjson_language)
	{
		result_TestReport->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(testReport, "text");
	if(cjson_text)
	{
		result_TestReport->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(testReport, "contained");
	if(cjson_contained)
	{
		result_TestReport->contained_count = cJSON_GetArraySize(cjson_contained);
		result_TestReport->contained = PushArray(arena, Resource, result_TestReport->contained_count);
		for(int i = 0; i < result_TestReport->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_TestReport->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport, "extension");
	if(cjson_extension)
	{
		result_TestReport->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport->extension = PushArray(arena, Extension, result_TestReport->extension_count);
		for(int i = 0; i < result_TestReport->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport->modifierExtension = PushArray(arena, Extension, result_TestReport->modifierExtension_count);
		for(int i = 0; i < result_TestReport->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(testReport, "identifier");
	if(cjson_identifier)
	{
		result_TestReport->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(testReport, "name");
	if(cjson_name)
	{
		result_TestReport->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(testReport, "status");
	if(cjson_status)
	{
		result_TestReport->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_testScript =  cJSON_GetObjectItem(testReport, "testScript");
	if(cjson_testScript)
	{
		result_TestReport->testScript = Deserialize_Reference(arena, cjson_testScript);
	}
	cJSON *cjson_result =  cJSON_GetObjectItem(testReport, "result");
	if(cjson_result)
	{
		result_TestReport->result = Str8C(cJSON_GetStringValue(cjson_result));
	}
	cJSON *cjson_score =  cJSON_GetObjectItem(testReport, "score");
	if(cjson_score)
	{
		result_TestReport->score = cJSON_GetNumberValue(cjson_score);
	}
	cJSON *cjson_tester =  cJSON_GetObjectItem(testReport, "tester");
	if(cjson_tester)
	{
		result_TestReport->tester = Str8C(cJSON_GetStringValue(cjson_tester));
	}
	cJSON *cjson_issued =  cJSON_GetObjectItem(testReport, "issued");
	if(cjson_issued)
	{
		result_TestReport->issued = Str8C(cJSON_GetStringValue(cjson_issued));
	}
	cJSON *cjson_participant =  cJSON_GetObjectItem(testReport, "participant");
	if(cjson_participant)
	{
		result_TestReport->participant_count = cJSON_GetArraySize(cjson_participant);
		result_TestReport->participant = PushArray(arena, TestReport_Participant, result_TestReport->participant_count);
		for(int i = 0; i < result_TestReport->participant_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_participant, i);
			result_TestReport->participant[i] = *Deserialize_TestReport_Participant(arena, internal);
		}

	}
	cJSON *cjson_setup =  cJSON_GetObjectItem(testReport, "setup");
	if(cjson_setup)
	{
		result_TestReport->setup = Deserialize_TestReport_Setup(arena, cjson_setup);
	}
	cJSON *cjson_test =  cJSON_GetObjectItem(testReport, "test");
	if(cjson_test)
	{
		result_TestReport->test_count = cJSON_GetArraySize(cjson_test);
		result_TestReport->test = PushArray(arena, TestReport_Test, result_TestReport->test_count);
		for(int i = 0; i < result_TestReport->test_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_test, i);
			result_TestReport->test[i] = *Deserialize_TestReport_Test(arena, internal);
		}

	}
	cJSON *cjson_teardown =  cJSON_GetObjectItem(testReport, "teardown");
	if(cjson_teardown)
	{
		result_TestReport->teardown = Deserialize_TestReport_Teardown(arena, cjson_teardown);
	}
	return result_TestReport;
}

TestReport_Participant*
Deserialize_TestReport_Participant(Arena *arena, cJSON *testReport_Participant)
{
	TestReport_Participant *result_TestReport_Participant = PushArray(arena, TestReport_Participant, 1);
	result_TestReport_Participant->resourceType = ResourceType::TestReport_Participant;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Participant, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Participant, "id");
	if(cjson_id)
	{
		result_TestReport_Participant->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Participant, "extension");
	if(cjson_extension)
	{
		result_TestReport_Participant->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Participant->extension = PushArray(arena, Extension, result_TestReport_Participant->extension_count);
		for(int i = 0; i < result_TestReport_Participant->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Participant->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Participant, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Participant->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Participant->modifierExtension = PushArray(arena, Extension, result_TestReport_Participant->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Participant->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Participant->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(testReport_Participant, "type");
	if(cjson_type)
	{
		result_TestReport_Participant->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_uri =  cJSON_GetObjectItem(testReport_Participant, "uri");
	if(cjson_uri)
	{
		result_TestReport_Participant->uri = Str8C(cJSON_GetStringValue(cjson_uri));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(testReport_Participant, "display");
	if(cjson_display)
	{
		result_TestReport_Participant->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	return result_TestReport_Participant;
}

TestReport_Setup*
Deserialize_TestReport_Setup(Arena *arena, cJSON *testReport_Setup)
{
	TestReport_Setup *result_TestReport_Setup = PushArray(arena, TestReport_Setup, 1);
	result_TestReport_Setup->resourceType = ResourceType::TestReport_Setup;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Setup, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Setup, "id");
	if(cjson_id)
	{
		result_TestReport_Setup->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Setup, "extension");
	if(cjson_extension)
	{
		result_TestReport_Setup->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Setup->extension = PushArray(arena, Extension, result_TestReport_Setup->extension_count);
		for(int i = 0; i < result_TestReport_Setup->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Setup->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Setup, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Setup->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Setup->modifierExtension = PushArray(arena, Extension, result_TestReport_Setup->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Setup->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Setup->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(testReport_Setup, "action");
	if(cjson_action)
	{
		result_TestReport_Setup->action_count = cJSON_GetArraySize(cjson_action);
		result_TestReport_Setup->action = PushArray(arena, TestReport_Setup_Action, result_TestReport_Setup->action_count);
		for(int i = 0; i < result_TestReport_Setup->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_TestReport_Setup->action[i] = *Deserialize_TestReport_Setup_Action(arena, internal);
		}

	}
	return result_TestReport_Setup;
}

TestReport_Setup_Action*
Deserialize_TestReport_Setup_Action(Arena *arena, cJSON *testReport_Setup_Action)
{
	TestReport_Setup_Action *result_TestReport_Setup_Action = PushArray(arena, TestReport_Setup_Action, 1);
	result_TestReport_Setup_Action->resourceType = ResourceType::TestReport_Setup_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Setup_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Setup_Action, "id");
	if(cjson_id)
	{
		result_TestReport_Setup_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Setup_Action, "extension");
	if(cjson_extension)
	{
		result_TestReport_Setup_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Setup_Action->extension = PushArray(arena, Extension, result_TestReport_Setup_Action->extension_count);
		for(int i = 0; i < result_TestReport_Setup_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Setup_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Setup_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Setup_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Setup_Action->modifierExtension = PushArray(arena, Extension, result_TestReport_Setup_Action->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Setup_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Setup_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(testReport_Setup_Action, "operation");
	if(cjson_operation)
	{
		result_TestReport_Setup_Action->operation = Deserialize_TestReport_Setup_Action_Operation(arena, cjson_operation);
	}
	cJSON *cjson_assert =  cJSON_GetObjectItem(testReport_Setup_Action, "assert");
	if(cjson_assert)
	{
		result_TestReport_Setup_Action->assert = Deserialize_TestReport_Setup_Action_Assert(arena, cjson_assert);
	}
	return result_TestReport_Setup_Action;
}

TestReport_Setup_Action_Operation*
Deserialize_TestReport_Setup_Action_Operation(Arena *arena, cJSON *testReport_Setup_Action_Operation)
{
	TestReport_Setup_Action_Operation *result_TestReport_Setup_Action_Operation = PushArray(arena, TestReport_Setup_Action_Operation, 1);
	result_TestReport_Setup_Action_Operation->resourceType = ResourceType::TestReport_Setup_Action_Operation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Setup_Action_Operation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Setup_Action_Operation, "id");
	if(cjson_id)
	{
		result_TestReport_Setup_Action_Operation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Setup_Action_Operation, "extension");
	if(cjson_extension)
	{
		result_TestReport_Setup_Action_Operation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Setup_Action_Operation->extension = PushArray(arena, Extension, result_TestReport_Setup_Action_Operation->extension_count);
		for(int i = 0; i < result_TestReport_Setup_Action_Operation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Setup_Action_Operation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Setup_Action_Operation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Setup_Action_Operation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Setup_Action_Operation->modifierExtension = PushArray(arena, Extension, result_TestReport_Setup_Action_Operation->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Setup_Action_Operation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Setup_Action_Operation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_result =  cJSON_GetObjectItem(testReport_Setup_Action_Operation, "result");
	if(cjson_result)
	{
		result_TestReport_Setup_Action_Operation->result = Str8C(cJSON_GetStringValue(cjson_result));
	}
	cJSON *cjson_message =  cJSON_GetObjectItem(testReport_Setup_Action_Operation, "message");
	if(cjson_message)
	{
		result_TestReport_Setup_Action_Operation->message = Str8C(cJSON_GetStringValue(cjson_message));
	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(testReport_Setup_Action_Operation, "detail");
	if(cjson_detail)
	{
		result_TestReport_Setup_Action_Operation->detail = Str8C(cJSON_GetStringValue(cjson_detail));
	}
	return result_TestReport_Setup_Action_Operation;
}

TestReport_Setup_Action_Assert*
Deserialize_TestReport_Setup_Action_Assert(Arena *arena, cJSON *testReport_Setup_Action_Assert)
{
	TestReport_Setup_Action_Assert *result_TestReport_Setup_Action_Assert = PushArray(arena, TestReport_Setup_Action_Assert, 1);
	result_TestReport_Setup_Action_Assert->resourceType = ResourceType::TestReport_Setup_Action_Assert;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Setup_Action_Assert, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Setup_Action_Assert, "id");
	if(cjson_id)
	{
		result_TestReport_Setup_Action_Assert->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Setup_Action_Assert, "extension");
	if(cjson_extension)
	{
		result_TestReport_Setup_Action_Assert->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Setup_Action_Assert->extension = PushArray(arena, Extension, result_TestReport_Setup_Action_Assert->extension_count);
		for(int i = 0; i < result_TestReport_Setup_Action_Assert->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Setup_Action_Assert->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Setup_Action_Assert, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Setup_Action_Assert->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Setup_Action_Assert->modifierExtension = PushArray(arena, Extension, result_TestReport_Setup_Action_Assert->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Setup_Action_Assert->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Setup_Action_Assert->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_result =  cJSON_GetObjectItem(testReport_Setup_Action_Assert, "result");
	if(cjson_result)
	{
		result_TestReport_Setup_Action_Assert->result = Str8C(cJSON_GetStringValue(cjson_result));
	}
	cJSON *cjson_message =  cJSON_GetObjectItem(testReport_Setup_Action_Assert, "message");
	if(cjson_message)
	{
		result_TestReport_Setup_Action_Assert->message = Str8C(cJSON_GetStringValue(cjson_message));
	}
	cJSON *cjson_detail =  cJSON_GetObjectItem(testReport_Setup_Action_Assert, "detail");
	if(cjson_detail)
	{
		result_TestReport_Setup_Action_Assert->detail = Str8C(cJSON_GetStringValue(cjson_detail));
	}
	return result_TestReport_Setup_Action_Assert;
}

TestReport_Test*
Deserialize_TestReport_Test(Arena *arena, cJSON *testReport_Test)
{
	TestReport_Test *result_TestReport_Test = PushArray(arena, TestReport_Test, 1);
	result_TestReport_Test->resourceType = ResourceType::TestReport_Test;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Test, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Test, "id");
	if(cjson_id)
	{
		result_TestReport_Test->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Test, "extension");
	if(cjson_extension)
	{
		result_TestReport_Test->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Test->extension = PushArray(arena, Extension, result_TestReport_Test->extension_count);
		for(int i = 0; i < result_TestReport_Test->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Test->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Test, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Test->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Test->modifierExtension = PushArray(arena, Extension, result_TestReport_Test->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Test->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Test->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(testReport_Test, "name");
	if(cjson_name)
	{
		result_TestReport_Test->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testReport_Test, "description");
	if(cjson_description)
	{
		result_TestReport_Test->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_action =  cJSON_GetObjectItem(testReport_Test, "action");
	if(cjson_action)
	{
		result_TestReport_Test->action_count = cJSON_GetArraySize(cjson_action);
		result_TestReport_Test->action = PushArray(arena, TestReport_Test_Action, result_TestReport_Test->action_count);
		for(int i = 0; i < result_TestReport_Test->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_TestReport_Test->action[i] = *Deserialize_TestReport_Test_Action(arena, internal);
		}

	}
	return result_TestReport_Test;
}

TestReport_Test_Action*
Deserialize_TestReport_Test_Action(Arena *arena, cJSON *testReport_Test_Action)
{
	TestReport_Test_Action *result_TestReport_Test_Action = PushArray(arena, TestReport_Test_Action, 1);
	result_TestReport_Test_Action->resourceType = ResourceType::TestReport_Test_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Test_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Test_Action, "id");
	if(cjson_id)
	{
		result_TestReport_Test_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Test_Action, "extension");
	if(cjson_extension)
	{
		result_TestReport_Test_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Test_Action->extension = PushArray(arena, Extension, result_TestReport_Test_Action->extension_count);
		for(int i = 0; i < result_TestReport_Test_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Test_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Test_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Test_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Test_Action->modifierExtension = PushArray(arena, Extension, result_TestReport_Test_Action->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Test_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Test_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(testReport_Test_Action, "operation");
	if(cjson_operation)
	{
		result_TestReport_Test_Action->operation = Deserialize_TestReport_Setup_Action_Operation(arena, cjson_operation);
	}
	cJSON *cjson_assert =  cJSON_GetObjectItem(testReport_Test_Action, "assert");
	if(cjson_assert)
	{
		result_TestReport_Test_Action->assert = Deserialize_TestReport_Setup_Action_Assert(arena, cjson_assert);
	}
	return result_TestReport_Test_Action;
}

TestReport_Teardown*
Deserialize_TestReport_Teardown(Arena *arena, cJSON *testReport_Teardown)
{
	TestReport_Teardown *result_TestReport_Teardown = PushArray(arena, TestReport_Teardown, 1);
	result_TestReport_Teardown->resourceType = ResourceType::TestReport_Teardown;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Teardown, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Teardown, "id");
	if(cjson_id)
	{
		result_TestReport_Teardown->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Teardown, "extension");
	if(cjson_extension)
	{
		result_TestReport_Teardown->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Teardown->extension = PushArray(arena, Extension, result_TestReport_Teardown->extension_count);
		for(int i = 0; i < result_TestReport_Teardown->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Teardown->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Teardown, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Teardown->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Teardown->modifierExtension = PushArray(arena, Extension, result_TestReport_Teardown->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Teardown->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Teardown->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(testReport_Teardown, "action");
	if(cjson_action)
	{
		result_TestReport_Teardown->action_count = cJSON_GetArraySize(cjson_action);
		result_TestReport_Teardown->action = PushArray(arena, TestReport_Teardown_Action, result_TestReport_Teardown->action_count);
		for(int i = 0; i < result_TestReport_Teardown->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_TestReport_Teardown->action[i] = *Deserialize_TestReport_Teardown_Action(arena, internal);
		}

	}
	return result_TestReport_Teardown;
}

TestReport_Teardown_Action*
Deserialize_TestReport_Teardown_Action(Arena *arena, cJSON *testReport_Teardown_Action)
{
	TestReport_Teardown_Action *result_TestReport_Teardown_Action = PushArray(arena, TestReport_Teardown_Action, 1);
	result_TestReport_Teardown_Action->resourceType = ResourceType::TestReport_Teardown_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testReport_Teardown_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testReport_Teardown_Action, "id");
	if(cjson_id)
	{
		result_TestReport_Teardown_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testReport_Teardown_Action, "extension");
	if(cjson_extension)
	{
		result_TestReport_Teardown_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestReport_Teardown_Action->extension = PushArray(arena, Extension, result_TestReport_Teardown_Action->extension_count);
		for(int i = 0; i < result_TestReport_Teardown_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestReport_Teardown_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testReport_Teardown_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestReport_Teardown_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestReport_Teardown_Action->modifierExtension = PushArray(arena, Extension, result_TestReport_Teardown_Action->modifierExtension_count);
		for(int i = 0; i < result_TestReport_Teardown_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestReport_Teardown_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(testReport_Teardown_Action, "operation");
	if(cjson_operation)
	{
		result_TestReport_Teardown_Action->operation = Deserialize_TestReport_Setup_Action_Operation(arena, cjson_operation);
	}
	return result_TestReport_Teardown_Action;
}

TestScript*
Deserialize_TestScript(Arena *arena, cJSON *testScript)
{
	TestScript *result_TestScript = PushArray(arena, TestScript, 1);
	result_TestScript->resourceType = ResourceType::TestScript;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript, "id");
	if(cjson_id)
	{
		result_TestScript->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(testScript, "meta");
	if(cjson_meta)
	{
		result_TestScript->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(testScript, "implicitRules");
	if(cjson_implicitRules)
	{
		result_TestScript->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(testScript, "language");
	if(cjson_language)
	{
		result_TestScript->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(testScript, "text");
	if(cjson_text)
	{
		result_TestScript->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(testScript, "contained");
	if(cjson_contained)
	{
		result_TestScript->contained_count = cJSON_GetArraySize(cjson_contained);
		result_TestScript->contained = PushArray(arena, Resource, result_TestScript->contained_count);
		for(int i = 0; i < result_TestScript->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_TestScript->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript, "extension");
	if(cjson_extension)
	{
		result_TestScript->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript->extension = PushArray(arena, Extension, result_TestScript->extension_count);
		for(int i = 0; i < result_TestScript->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript->modifierExtension = PushArray(arena, Extension, result_TestScript->modifierExtension_count);
		for(int i = 0; i < result_TestScript->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(testScript, "url");
	if(cjson_url)
	{
		result_TestScript->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(testScript, "identifier");
	if(cjson_identifier)
	{
		result_TestScript->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(testScript, "version");
	if(cjson_version)
	{
		result_TestScript->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(testScript, "name");
	if(cjson_name)
	{
		result_TestScript->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(testScript, "title");
	if(cjson_title)
	{
		result_TestScript->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(testScript, "status");
	if(cjson_status)
	{
		result_TestScript->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(testScript, "experimental");
	if(cjson_experimental)
	{
		result_TestScript->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(testScript, "date");
	if(cjson_date)
	{
		result_TestScript->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(testScript, "publisher");
	if(cjson_publisher)
	{
		result_TestScript->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(testScript, "contact");
	if(cjson_contact)
	{
		result_TestScript->contact_count = cJSON_GetArraySize(cjson_contact);
		result_TestScript->contact = PushArray(arena, ContactDetail, result_TestScript->contact_count);
		for(int i = 0; i < result_TestScript->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_TestScript->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testScript, "description");
	if(cjson_description)
	{
		result_TestScript->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(testScript, "useContext");
	if(cjson_useContext)
	{
		result_TestScript->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_TestScript->useContext = PushArray(arena, UsageContext, result_TestScript->useContext_count);
		for(int i = 0; i < result_TestScript->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_TestScript->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(testScript, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_TestScript->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_TestScript->jurisdiction = PushArray(arena, CodeableConcept, result_TestScript->jurisdiction_count);
		for(int i = 0; i < result_TestScript->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_TestScript->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(testScript, "purpose");
	if(cjson_purpose)
	{
		result_TestScript->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(testScript, "copyright");
	if(cjson_copyright)
	{
		result_TestScript->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_origin =  cJSON_GetObjectItem(testScript, "origin");
	if(cjson_origin)
	{
		result_TestScript->origin_count = cJSON_GetArraySize(cjson_origin);
		result_TestScript->origin = PushArray(arena, TestScript_Origin, result_TestScript->origin_count);
		for(int i = 0; i < result_TestScript->origin_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_origin, i);
			result_TestScript->origin[i] = *Deserialize_TestScript_Origin(arena, internal);
		}

	}
	cJSON *cjson_destination =  cJSON_GetObjectItem(testScript, "destination");
	if(cjson_destination)
	{
		result_TestScript->destination_count = cJSON_GetArraySize(cjson_destination);
		result_TestScript->destination = PushArray(arena, TestScript_Destination, result_TestScript->destination_count);
		for(int i = 0; i < result_TestScript->destination_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_destination, i);
			result_TestScript->destination[i] = *Deserialize_TestScript_Destination(arena, internal);
		}

	}
	cJSON *cjson_metadata =  cJSON_GetObjectItem(testScript, "metadata");
	if(cjson_metadata)
	{
		result_TestScript->metadata = Deserialize_TestScript_Metadata(arena, cjson_metadata);
	}
	cJSON *cjson_fixture =  cJSON_GetObjectItem(testScript, "fixture");
	if(cjson_fixture)
	{
		result_TestScript->fixture_count = cJSON_GetArraySize(cjson_fixture);
		result_TestScript->fixture = PushArray(arena, TestScript_Fixture, result_TestScript->fixture_count);
		for(int i = 0; i < result_TestScript->fixture_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_fixture, i);
			result_TestScript->fixture[i] = *Deserialize_TestScript_Fixture(arena, internal);
		}

	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(testScript, "profile");
	if(cjson_profile)
	{
		result_TestScript->profile_count = cJSON_GetArraySize(cjson_profile);
		result_TestScript->profile = PushArray(arena, Reference, result_TestScript->profile_count);
		for(int i = 0; i < result_TestScript->profile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_profile, i);
			result_TestScript->profile[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_variable =  cJSON_GetObjectItem(testScript, "variable");
	if(cjson_variable)
	{
		result_TestScript->variable_count = cJSON_GetArraySize(cjson_variable);
		result_TestScript->variable = PushArray(arena, TestScript_Variable, result_TestScript->variable_count);
		for(int i = 0; i < result_TestScript->variable_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_variable, i);
			result_TestScript->variable[i] = *Deserialize_TestScript_Variable(arena, internal);
		}

	}
	cJSON *cjson_setup =  cJSON_GetObjectItem(testScript, "setup");
	if(cjson_setup)
	{
		result_TestScript->setup = Deserialize_TestScript_Setup(arena, cjson_setup);
	}
	cJSON *cjson_test =  cJSON_GetObjectItem(testScript, "test");
	if(cjson_test)
	{
		result_TestScript->test_count = cJSON_GetArraySize(cjson_test);
		result_TestScript->test = PushArray(arena, TestScript_Test, result_TestScript->test_count);
		for(int i = 0; i < result_TestScript->test_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_test, i);
			result_TestScript->test[i] = *Deserialize_TestScript_Test(arena, internal);
		}

	}
	cJSON *cjson_teardown =  cJSON_GetObjectItem(testScript, "teardown");
	if(cjson_teardown)
	{
		result_TestScript->teardown = Deserialize_TestScript_Teardown(arena, cjson_teardown);
	}
	return result_TestScript;
}

TestScript_Origin*
Deserialize_TestScript_Origin(Arena *arena, cJSON *testScript_Origin)
{
	TestScript_Origin *result_TestScript_Origin = PushArray(arena, TestScript_Origin, 1);
	result_TestScript_Origin->resourceType = ResourceType::TestScript_Origin;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Origin, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Origin, "id");
	if(cjson_id)
	{
		result_TestScript_Origin->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Origin, "extension");
	if(cjson_extension)
	{
		result_TestScript_Origin->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Origin->extension = PushArray(arena, Extension, result_TestScript_Origin->extension_count);
		for(int i = 0; i < result_TestScript_Origin->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Origin->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Origin, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Origin->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Origin->modifierExtension = PushArray(arena, Extension, result_TestScript_Origin->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Origin->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Origin->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_index =  cJSON_GetObjectItem(testScript_Origin, "index");
	if(cjson_index)
	{
		result_TestScript_Origin->index = Deserialize_Integer(arena, cjson_index);
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(testScript_Origin, "profile");
	if(cjson_profile)
	{
		result_TestScript_Origin->profile = Deserialize_Coding(arena, cjson_profile);
	}
	return result_TestScript_Origin;
}

TestScript_Destination*
Deserialize_TestScript_Destination(Arena *arena, cJSON *testScript_Destination)
{
	TestScript_Destination *result_TestScript_Destination = PushArray(arena, TestScript_Destination, 1);
	result_TestScript_Destination->resourceType = ResourceType::TestScript_Destination;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Destination, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Destination, "id");
	if(cjson_id)
	{
		result_TestScript_Destination->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Destination, "extension");
	if(cjson_extension)
	{
		result_TestScript_Destination->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Destination->extension = PushArray(arena, Extension, result_TestScript_Destination->extension_count);
		for(int i = 0; i < result_TestScript_Destination->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Destination->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Destination, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Destination->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Destination->modifierExtension = PushArray(arena, Extension, result_TestScript_Destination->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Destination->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Destination->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_index =  cJSON_GetObjectItem(testScript_Destination, "index");
	if(cjson_index)
	{
		result_TestScript_Destination->index = Deserialize_Integer(arena, cjson_index);
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(testScript_Destination, "profile");
	if(cjson_profile)
	{
		result_TestScript_Destination->profile = Deserialize_Coding(arena, cjson_profile);
	}
	return result_TestScript_Destination;
}

TestScript_Metadata*
Deserialize_TestScript_Metadata(Arena *arena, cJSON *testScript_Metadata)
{
	TestScript_Metadata *result_TestScript_Metadata = PushArray(arena, TestScript_Metadata, 1);
	result_TestScript_Metadata->resourceType = ResourceType::TestScript_Metadata;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Metadata, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Metadata, "id");
	if(cjson_id)
	{
		result_TestScript_Metadata->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Metadata, "extension");
	if(cjson_extension)
	{
		result_TestScript_Metadata->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Metadata->extension = PushArray(arena, Extension, result_TestScript_Metadata->extension_count);
		for(int i = 0; i < result_TestScript_Metadata->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Metadata->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Metadata, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Metadata->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Metadata->modifierExtension = PushArray(arena, Extension, result_TestScript_Metadata->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Metadata->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Metadata->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_link =  cJSON_GetObjectItem(testScript_Metadata, "link");
	if(cjson_link)
	{
		result_TestScript_Metadata->link_count = cJSON_GetArraySize(cjson_link);
		result_TestScript_Metadata->link = PushArray(arena, TestScript_Metadata_Link, result_TestScript_Metadata->link_count);
		for(int i = 0; i < result_TestScript_Metadata->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_TestScript_Metadata->link[i] = *Deserialize_TestScript_Metadata_Link(arena, internal);
		}

	}
	cJSON *cjson_capability =  cJSON_GetObjectItem(testScript_Metadata, "capability");
	if(cjson_capability)
	{
		result_TestScript_Metadata->capability_count = cJSON_GetArraySize(cjson_capability);
		result_TestScript_Metadata->capability = PushArray(arena, TestScript_Metadata_Capability, result_TestScript_Metadata->capability_count);
		for(int i = 0; i < result_TestScript_Metadata->capability_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_capability, i);
			result_TestScript_Metadata->capability[i] = *Deserialize_TestScript_Metadata_Capability(arena, internal);
		}

	}
	return result_TestScript_Metadata;
}

TestScript_Metadata_Link*
Deserialize_TestScript_Metadata_Link(Arena *arena, cJSON *testScript_Metadata_Link)
{
	TestScript_Metadata_Link *result_TestScript_Metadata_Link = PushArray(arena, TestScript_Metadata_Link, 1);
	result_TestScript_Metadata_Link->resourceType = ResourceType::TestScript_Metadata_Link;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Metadata_Link, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Metadata_Link, "id");
	if(cjson_id)
	{
		result_TestScript_Metadata_Link->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Metadata_Link, "extension");
	if(cjson_extension)
	{
		result_TestScript_Metadata_Link->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Metadata_Link->extension = PushArray(arena, Extension, result_TestScript_Metadata_Link->extension_count);
		for(int i = 0; i < result_TestScript_Metadata_Link->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Metadata_Link->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Metadata_Link, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Metadata_Link->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Metadata_Link->modifierExtension = PushArray(arena, Extension, result_TestScript_Metadata_Link->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Metadata_Link->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Metadata_Link->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(testScript_Metadata_Link, "url");
	if(cjson_url)
	{
		result_TestScript_Metadata_Link->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testScript_Metadata_Link, "description");
	if(cjson_description)
	{
		result_TestScript_Metadata_Link->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	return result_TestScript_Metadata_Link;
}

TestScript_Metadata_Capability*
Deserialize_TestScript_Metadata_Capability(Arena *arena, cJSON *testScript_Metadata_Capability)
{
	TestScript_Metadata_Capability *result_TestScript_Metadata_Capability = PushArray(arena, TestScript_Metadata_Capability, 1);
	result_TestScript_Metadata_Capability->resourceType = ResourceType::TestScript_Metadata_Capability;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Metadata_Capability, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Metadata_Capability, "id");
	if(cjson_id)
	{
		result_TestScript_Metadata_Capability->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Metadata_Capability, "extension");
	if(cjson_extension)
	{
		result_TestScript_Metadata_Capability->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Metadata_Capability->extension = PushArray(arena, Extension, result_TestScript_Metadata_Capability->extension_count);
		for(int i = 0; i < result_TestScript_Metadata_Capability->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Metadata_Capability->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Metadata_Capability, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Metadata_Capability->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Metadata_Capability->modifierExtension = PushArray(arena, Extension, result_TestScript_Metadata_Capability->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Metadata_Capability->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Metadata_Capability->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_required =  cJSON_GetObjectItem(testScript_Metadata_Capability, "required");
	if(cjson_required)
	{
		result_TestScript_Metadata_Capability->required = (boolean)cJSON_IsTrue(cjson_required);
	}
	cJSON *cjson_validated =  cJSON_GetObjectItem(testScript_Metadata_Capability, "validated");
	if(cjson_validated)
	{
		result_TestScript_Metadata_Capability->validated = (boolean)cJSON_IsTrue(cjson_validated);
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testScript_Metadata_Capability, "description");
	if(cjson_description)
	{
		result_TestScript_Metadata_Capability->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_origin =  cJSON_GetObjectItem(testScript_Metadata_Capability, "origin");
	if(cjson_origin)
	{
		result_TestScript_Metadata_Capability->origin_count = cJSON_GetArraySize(cjson_origin);
		result_TestScript_Metadata_Capability->origin = PushArray(arena, Integer, result_TestScript_Metadata_Capability->origin_count);
		for(int i = 0; i < result_TestScript_Metadata_Capability->origin_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_origin, i);
			result_TestScript_Metadata_Capability->origin[i] = *Deserialize_Integer(arena, internal);
		}

	}
	cJSON *cjson_destination =  cJSON_GetObjectItem(testScript_Metadata_Capability, "destination");
	if(cjson_destination)
	{
		result_TestScript_Metadata_Capability->destination = Deserialize_Integer(arena, cjson_destination);
	}
	cJSON *cjson_link =  cJSON_GetObjectItem(testScript_Metadata_Capability, "link");
	if(cjson_link)
	{
		result_TestScript_Metadata_Capability->link_count = cJSON_GetArraySize(cjson_link);
		result_TestScript_Metadata_Capability->link = PushArray(arena, fhir_uri, result_TestScript_Metadata_Capability->link_count);
		for(int i = 0; i < result_TestScript_Metadata_Capability->link_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_link, i);
			result_TestScript_Metadata_Capability->link[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_capabilities =  cJSON_GetObjectItem(testScript_Metadata_Capability, "capabilities");
	if(cjson_capabilities)
	{
		result_TestScript_Metadata_Capability->capabilities = Str8C(cJSON_GetStringValue(cjson_capabilities));
	}
	return result_TestScript_Metadata_Capability;
}

TestScript_Fixture*
Deserialize_TestScript_Fixture(Arena *arena, cJSON *testScript_Fixture)
{
	TestScript_Fixture *result_TestScript_Fixture = PushArray(arena, TestScript_Fixture, 1);
	result_TestScript_Fixture->resourceType = ResourceType::TestScript_Fixture;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Fixture, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Fixture, "id");
	if(cjson_id)
	{
		result_TestScript_Fixture->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Fixture, "extension");
	if(cjson_extension)
	{
		result_TestScript_Fixture->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Fixture->extension = PushArray(arena, Extension, result_TestScript_Fixture->extension_count);
		for(int i = 0; i < result_TestScript_Fixture->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Fixture->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Fixture, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Fixture->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Fixture->modifierExtension = PushArray(arena, Extension, result_TestScript_Fixture->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Fixture->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Fixture->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_autocreate =  cJSON_GetObjectItem(testScript_Fixture, "autocreate");
	if(cjson_autocreate)
	{
		result_TestScript_Fixture->autocreate = (boolean)cJSON_IsTrue(cjson_autocreate);
	}
	cJSON *cjson_autodelete =  cJSON_GetObjectItem(testScript_Fixture, "autodelete");
	if(cjson_autodelete)
	{
		result_TestScript_Fixture->autodelete = (boolean)cJSON_IsTrue(cjson_autodelete);
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(testScript_Fixture, "resource");
	if(cjson_resource)
	{
		result_TestScript_Fixture->resource = Deserialize_Reference(arena, cjson_resource);
	}
	return result_TestScript_Fixture;
}

TestScript_Variable*
Deserialize_TestScript_Variable(Arena *arena, cJSON *testScript_Variable)
{
	TestScript_Variable *result_TestScript_Variable = PushArray(arena, TestScript_Variable, 1);
	result_TestScript_Variable->resourceType = ResourceType::TestScript_Variable;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Variable, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Variable, "id");
	if(cjson_id)
	{
		result_TestScript_Variable->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Variable, "extension");
	if(cjson_extension)
	{
		result_TestScript_Variable->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Variable->extension = PushArray(arena, Extension, result_TestScript_Variable->extension_count);
		for(int i = 0; i < result_TestScript_Variable->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Variable->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Variable, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Variable->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Variable->modifierExtension = PushArray(arena, Extension, result_TestScript_Variable->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Variable->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Variable->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(testScript_Variable, "name");
	if(cjson_name)
	{
		result_TestScript_Variable->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_defaultValue =  cJSON_GetObjectItem(testScript_Variable, "defaultValue");
	if(cjson_defaultValue)
	{
		result_TestScript_Variable->defaultValue = Str8C(cJSON_GetStringValue(cjson_defaultValue));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testScript_Variable, "description");
	if(cjson_description)
	{
		result_TestScript_Variable->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(testScript_Variable, "expression");
	if(cjson_expression)
	{
		result_TestScript_Variable->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	cJSON *cjson_headerField =  cJSON_GetObjectItem(testScript_Variable, "headerField");
	if(cjson_headerField)
	{
		result_TestScript_Variable->headerField = Str8C(cJSON_GetStringValue(cjson_headerField));
	}
	cJSON *cjson_hint =  cJSON_GetObjectItem(testScript_Variable, "hint");
	if(cjson_hint)
	{
		result_TestScript_Variable->hint = Str8C(cJSON_GetStringValue(cjson_hint));
	}
	cJSON *cjson_path =  cJSON_GetObjectItem(testScript_Variable, "path");
	if(cjson_path)
	{
		result_TestScript_Variable->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_sourceId =  cJSON_GetObjectItem(testScript_Variable, "sourceId");
	if(cjson_sourceId)
	{
		result_TestScript_Variable->sourceId = Str8C(cJSON_GetStringValue(cjson_sourceId));
	}
	return result_TestScript_Variable;
}

TestScript_Setup*
Deserialize_TestScript_Setup(Arena *arena, cJSON *testScript_Setup)
{
	TestScript_Setup *result_TestScript_Setup = PushArray(arena, TestScript_Setup, 1);
	result_TestScript_Setup->resourceType = ResourceType::TestScript_Setup;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Setup, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Setup, "id");
	if(cjson_id)
	{
		result_TestScript_Setup->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Setup, "extension");
	if(cjson_extension)
	{
		result_TestScript_Setup->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Setup->extension = PushArray(arena, Extension, result_TestScript_Setup->extension_count);
		for(int i = 0; i < result_TestScript_Setup->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Setup->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Setup, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Setup->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Setup->modifierExtension = PushArray(arena, Extension, result_TestScript_Setup->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Setup->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Setup->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(testScript_Setup, "action");
	if(cjson_action)
	{
		result_TestScript_Setup->action_count = cJSON_GetArraySize(cjson_action);
		result_TestScript_Setup->action = PushArray(arena, TestScript_Setup_Action, result_TestScript_Setup->action_count);
		for(int i = 0; i < result_TestScript_Setup->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_TestScript_Setup->action[i] = *Deserialize_TestScript_Setup_Action(arena, internal);
		}

	}
	return result_TestScript_Setup;
}

TestScript_Setup_Action*
Deserialize_TestScript_Setup_Action(Arena *arena, cJSON *testScript_Setup_Action)
{
	TestScript_Setup_Action *result_TestScript_Setup_Action = PushArray(arena, TestScript_Setup_Action, 1);
	result_TestScript_Setup_Action->resourceType = ResourceType::TestScript_Setup_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Setup_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Setup_Action, "id");
	if(cjson_id)
	{
		result_TestScript_Setup_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Setup_Action, "extension");
	if(cjson_extension)
	{
		result_TestScript_Setup_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Setup_Action->extension = PushArray(arena, Extension, result_TestScript_Setup_Action->extension_count);
		for(int i = 0; i < result_TestScript_Setup_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Setup_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Setup_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Setup_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Setup_Action->modifierExtension = PushArray(arena, Extension, result_TestScript_Setup_Action->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Setup_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Setup_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(testScript_Setup_Action, "operation");
	if(cjson_operation)
	{
		result_TestScript_Setup_Action->operation = Deserialize_TestScript_Setup_Action_Operation(arena, cjson_operation);
	}
	cJSON *cjson_assert =  cJSON_GetObjectItem(testScript_Setup_Action, "assert");
	if(cjson_assert)
	{
		result_TestScript_Setup_Action->assert = Deserialize_TestScript_Setup_Action_Assert(arena, cjson_assert);
	}
	return result_TestScript_Setup_Action;
}

TestScript_Setup_Action_Operation*
Deserialize_TestScript_Setup_Action_Operation(Arena *arena, cJSON *testScript_Setup_Action_Operation)
{
	TestScript_Setup_Action_Operation *result_TestScript_Setup_Action_Operation = PushArray(arena, TestScript_Setup_Action_Operation, 1);
	result_TestScript_Setup_Action_Operation->resourceType = ResourceType::TestScript_Setup_Action_Operation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "id");
	if(cjson_id)
	{
		result_TestScript_Setup_Action_Operation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "extension");
	if(cjson_extension)
	{
		result_TestScript_Setup_Action_Operation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Setup_Action_Operation->extension = PushArray(arena, Extension, result_TestScript_Setup_Action_Operation->extension_count);
		for(int i = 0; i < result_TestScript_Setup_Action_Operation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Setup_Action_Operation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Setup_Action_Operation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Setup_Action_Operation->modifierExtension = PushArray(arena, Extension, result_TestScript_Setup_Action_Operation->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Setup_Action_Operation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Setup_Action_Operation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "type");
	if(cjson_type)
	{
		result_TestScript_Setup_Action_Operation->type = Deserialize_Coding(arena, cjson_type);
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "resource");
	if(cjson_resource)
	{
		result_TestScript_Setup_Action_Operation->resource = Str8C(cJSON_GetStringValue(cjson_resource));
	}
	cJSON *cjson_label =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "label");
	if(cjson_label)
	{
		result_TestScript_Setup_Action_Operation->label = Str8C(cJSON_GetStringValue(cjson_label));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "description");
	if(cjson_description)
	{
		result_TestScript_Setup_Action_Operation->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_accept =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "accept");
	if(cjson_accept)
	{
		result_TestScript_Setup_Action_Operation->accept = Str8C(cJSON_GetStringValue(cjson_accept));
	}
	cJSON *cjson_contentType =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "contentType");
	if(cjson_contentType)
	{
		result_TestScript_Setup_Action_Operation->contentType = Str8C(cJSON_GetStringValue(cjson_contentType));
	}
	cJSON *cjson_destination =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "destination");
	if(cjson_destination)
	{
		result_TestScript_Setup_Action_Operation->destination = Deserialize_Integer(arena, cjson_destination);
	}
	cJSON *cjson_encodeRequestUrl =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "encodeRequestUrl");
	if(cjson_encodeRequestUrl)
	{
		result_TestScript_Setup_Action_Operation->encodeRequestUrl = (boolean)cJSON_IsTrue(cjson_encodeRequestUrl);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "method");
	if(cjson_method)
	{
		result_TestScript_Setup_Action_Operation->method = Str8C(cJSON_GetStringValue(cjson_method));
	}
	cJSON *cjson_origin =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "origin");
	if(cjson_origin)
	{
		result_TestScript_Setup_Action_Operation->origin = Deserialize_Integer(arena, cjson_origin);
	}
	cJSON *cjson_params =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "params");
	if(cjson_params)
	{
		result_TestScript_Setup_Action_Operation->params = Str8C(cJSON_GetStringValue(cjson_params));
	}
	cJSON *cjson_requestHeader =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "requestHeader");
	if(cjson_requestHeader)
	{
		result_TestScript_Setup_Action_Operation->requestHeader_count = cJSON_GetArraySize(cjson_requestHeader);
		result_TestScript_Setup_Action_Operation->requestHeader = PushArray(arena, TestScript_Setup_Action_Operation_RequestHeader, result_TestScript_Setup_Action_Operation->requestHeader_count);
		for(int i = 0; i < result_TestScript_Setup_Action_Operation->requestHeader_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_requestHeader, i);
			result_TestScript_Setup_Action_Operation->requestHeader[i] = *Deserialize_TestScript_Setup_Action_Operation_RequestHeader(arena, internal);
		}

	}
	cJSON *cjson_requestId =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "requestId");
	if(cjson_requestId)
	{
		result_TestScript_Setup_Action_Operation->requestId = Str8C(cJSON_GetStringValue(cjson_requestId));
	}
	cJSON *cjson_responseId =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "responseId");
	if(cjson_responseId)
	{
		result_TestScript_Setup_Action_Operation->responseId = Str8C(cJSON_GetStringValue(cjson_responseId));
	}
	cJSON *cjson_sourceId =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "sourceId");
	if(cjson_sourceId)
	{
		result_TestScript_Setup_Action_Operation->sourceId = Str8C(cJSON_GetStringValue(cjson_sourceId));
	}
	cJSON *cjson_targetId =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "targetId");
	if(cjson_targetId)
	{
		result_TestScript_Setup_Action_Operation->targetId = Str8C(cJSON_GetStringValue(cjson_targetId));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(testScript_Setup_Action_Operation, "url");
	if(cjson_url)
	{
		result_TestScript_Setup_Action_Operation->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	return result_TestScript_Setup_Action_Operation;
}

TestScript_Setup_Action_Operation_RequestHeader*
Deserialize_TestScript_Setup_Action_Operation_RequestHeader(Arena *arena, cJSON *testScript_Setup_Action_Operation_RequestHeader)
{
	TestScript_Setup_Action_Operation_RequestHeader *result_TestScript_Setup_Action_Operation_RequestHeader = PushArray(arena, TestScript_Setup_Action_Operation_RequestHeader, 1);
	result_TestScript_Setup_Action_Operation_RequestHeader->resourceType = ResourceType::TestScript_Setup_Action_Operation_RequestHeader;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Setup_Action_Operation_RequestHeader, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Setup_Action_Operation_RequestHeader, "id");
	if(cjson_id)
	{
		result_TestScript_Setup_Action_Operation_RequestHeader->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Setup_Action_Operation_RequestHeader, "extension");
	if(cjson_extension)
	{
		result_TestScript_Setup_Action_Operation_RequestHeader->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Setup_Action_Operation_RequestHeader->extension = PushArray(arena, Extension, result_TestScript_Setup_Action_Operation_RequestHeader->extension_count);
		for(int i = 0; i < result_TestScript_Setup_Action_Operation_RequestHeader->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Setup_Action_Operation_RequestHeader->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Setup_Action_Operation_RequestHeader, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Setup_Action_Operation_RequestHeader->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Setup_Action_Operation_RequestHeader->modifierExtension = PushArray(arena, Extension, result_TestScript_Setup_Action_Operation_RequestHeader->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Setup_Action_Operation_RequestHeader->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Setup_Action_Operation_RequestHeader->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_field =  cJSON_GetObjectItem(testScript_Setup_Action_Operation_RequestHeader, "field");
	if(cjson_field)
	{
		result_TestScript_Setup_Action_Operation_RequestHeader->field = Str8C(cJSON_GetStringValue(cjson_field));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(testScript_Setup_Action_Operation_RequestHeader, "value");
	if(cjson_value)
	{
		result_TestScript_Setup_Action_Operation_RequestHeader->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_TestScript_Setup_Action_Operation_RequestHeader;
}

TestScript_Setup_Action_Assert*
Deserialize_TestScript_Setup_Action_Assert(Arena *arena, cJSON *testScript_Setup_Action_Assert)
{
	TestScript_Setup_Action_Assert *result_TestScript_Setup_Action_Assert = PushArray(arena, TestScript_Setup_Action_Assert, 1);
	result_TestScript_Setup_Action_Assert->resourceType = ResourceType::TestScript_Setup_Action_Assert;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "id");
	if(cjson_id)
	{
		result_TestScript_Setup_Action_Assert->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "extension");
	if(cjson_extension)
	{
		result_TestScript_Setup_Action_Assert->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Setup_Action_Assert->extension = PushArray(arena, Extension, result_TestScript_Setup_Action_Assert->extension_count);
		for(int i = 0; i < result_TestScript_Setup_Action_Assert->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Setup_Action_Assert->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Setup_Action_Assert->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Setup_Action_Assert->modifierExtension = PushArray(arena, Extension, result_TestScript_Setup_Action_Assert->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Setup_Action_Assert->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Setup_Action_Assert->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_label =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "label");
	if(cjson_label)
	{
		result_TestScript_Setup_Action_Assert->label = Str8C(cJSON_GetStringValue(cjson_label));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "description");
	if(cjson_description)
	{
		result_TestScript_Setup_Action_Assert->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_direction =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "direction");
	if(cjson_direction)
	{
		result_TestScript_Setup_Action_Assert->direction = Str8C(cJSON_GetStringValue(cjson_direction));
	}
	cJSON *cjson_compareToSourceId =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "compareToSourceId");
	if(cjson_compareToSourceId)
	{
		result_TestScript_Setup_Action_Assert->compareToSourceId = Str8C(cJSON_GetStringValue(cjson_compareToSourceId));
	}
	cJSON *cjson_compareToSourceExpression =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "compareToSourceExpression");
	if(cjson_compareToSourceExpression)
	{
		result_TestScript_Setup_Action_Assert->compareToSourceExpression = Str8C(cJSON_GetStringValue(cjson_compareToSourceExpression));
	}
	cJSON *cjson_compareToSourcePath =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "compareToSourcePath");
	if(cjson_compareToSourcePath)
	{
		result_TestScript_Setup_Action_Assert->compareToSourcePath = Str8C(cJSON_GetStringValue(cjson_compareToSourcePath));
	}
	cJSON *cjson_contentType =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "contentType");
	if(cjson_contentType)
	{
		result_TestScript_Setup_Action_Assert->contentType = Str8C(cJSON_GetStringValue(cjson_contentType));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "expression");
	if(cjson_expression)
	{
		result_TestScript_Setup_Action_Assert->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	cJSON *cjson_headerField =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "headerField");
	if(cjson_headerField)
	{
		result_TestScript_Setup_Action_Assert->headerField = Str8C(cJSON_GetStringValue(cjson_headerField));
	}
	cJSON *cjson_minimumId =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "minimumId");
	if(cjson_minimumId)
	{
		result_TestScript_Setup_Action_Assert->minimumId = Str8C(cJSON_GetStringValue(cjson_minimumId));
	}
	cJSON *cjson_navigationLinks =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "navigationLinks");
	if(cjson_navigationLinks)
	{
		result_TestScript_Setup_Action_Assert->navigationLinks = (boolean)cJSON_IsTrue(cjson_navigationLinks);
	}
	cJSON *cjson_operator_ =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "operator_");
	if(cjson_operator_)
	{
		result_TestScript_Setup_Action_Assert->operator_ = Str8C(cJSON_GetStringValue(cjson_operator_));
	}
	cJSON *cjson_path =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "path");
	if(cjson_path)
	{
		result_TestScript_Setup_Action_Assert->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_requestMethod =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "requestMethod");
	if(cjson_requestMethod)
	{
		result_TestScript_Setup_Action_Assert->requestMethod = Str8C(cJSON_GetStringValue(cjson_requestMethod));
	}
	cJSON *cjson_requestURL =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "requestURL");
	if(cjson_requestURL)
	{
		result_TestScript_Setup_Action_Assert->requestURL = Str8C(cJSON_GetStringValue(cjson_requestURL));
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "resource");
	if(cjson_resource)
	{
		result_TestScript_Setup_Action_Assert->resource = Str8C(cJSON_GetStringValue(cjson_resource));
	}
	cJSON *cjson_response =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "response");
	if(cjson_response)
	{
		result_TestScript_Setup_Action_Assert->response = Str8C(cJSON_GetStringValue(cjson_response));
	}
	cJSON *cjson_responseCode =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "responseCode");
	if(cjson_responseCode)
	{
		result_TestScript_Setup_Action_Assert->responseCode = Str8C(cJSON_GetStringValue(cjson_responseCode));
	}
	cJSON *cjson_sourceId =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "sourceId");
	if(cjson_sourceId)
	{
		result_TestScript_Setup_Action_Assert->sourceId = Str8C(cJSON_GetStringValue(cjson_sourceId));
	}
	cJSON *cjson_validateProfileId =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "validateProfileId");
	if(cjson_validateProfileId)
	{
		result_TestScript_Setup_Action_Assert->validateProfileId = Str8C(cJSON_GetStringValue(cjson_validateProfileId));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "value");
	if(cjson_value)
	{
		result_TestScript_Setup_Action_Assert->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	cJSON *cjson_warningOnly =  cJSON_GetObjectItem(testScript_Setup_Action_Assert, "warningOnly");
	if(cjson_warningOnly)
	{
		result_TestScript_Setup_Action_Assert->warningOnly = (boolean)cJSON_IsTrue(cjson_warningOnly);
	}
	return result_TestScript_Setup_Action_Assert;
}

TestScript_Test*
Deserialize_TestScript_Test(Arena *arena, cJSON *testScript_Test)
{
	TestScript_Test *result_TestScript_Test = PushArray(arena, TestScript_Test, 1);
	result_TestScript_Test->resourceType = ResourceType::TestScript_Test;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Test, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Test, "id");
	if(cjson_id)
	{
		result_TestScript_Test->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Test, "extension");
	if(cjson_extension)
	{
		result_TestScript_Test->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Test->extension = PushArray(arena, Extension, result_TestScript_Test->extension_count);
		for(int i = 0; i < result_TestScript_Test->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Test->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Test, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Test->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Test->modifierExtension = PushArray(arena, Extension, result_TestScript_Test->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Test->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Test->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(testScript_Test, "name");
	if(cjson_name)
	{
		result_TestScript_Test->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(testScript_Test, "description");
	if(cjson_description)
	{
		result_TestScript_Test->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_action =  cJSON_GetObjectItem(testScript_Test, "action");
	if(cjson_action)
	{
		result_TestScript_Test->action_count = cJSON_GetArraySize(cjson_action);
		result_TestScript_Test->action = PushArray(arena, TestScript_Test_Action, result_TestScript_Test->action_count);
		for(int i = 0; i < result_TestScript_Test->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_TestScript_Test->action[i] = *Deserialize_TestScript_Test_Action(arena, internal);
		}

	}
	return result_TestScript_Test;
}

TestScript_Test_Action*
Deserialize_TestScript_Test_Action(Arena *arena, cJSON *testScript_Test_Action)
{
	TestScript_Test_Action *result_TestScript_Test_Action = PushArray(arena, TestScript_Test_Action, 1);
	result_TestScript_Test_Action->resourceType = ResourceType::TestScript_Test_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Test_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Test_Action, "id");
	if(cjson_id)
	{
		result_TestScript_Test_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Test_Action, "extension");
	if(cjson_extension)
	{
		result_TestScript_Test_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Test_Action->extension = PushArray(arena, Extension, result_TestScript_Test_Action->extension_count);
		for(int i = 0; i < result_TestScript_Test_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Test_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Test_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Test_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Test_Action->modifierExtension = PushArray(arena, Extension, result_TestScript_Test_Action->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Test_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Test_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(testScript_Test_Action, "operation");
	if(cjson_operation)
	{
		result_TestScript_Test_Action->operation = Deserialize_TestScript_Setup_Action_Operation(arena, cjson_operation);
	}
	cJSON *cjson_assert =  cJSON_GetObjectItem(testScript_Test_Action, "assert");
	if(cjson_assert)
	{
		result_TestScript_Test_Action->assert = Deserialize_TestScript_Setup_Action_Assert(arena, cjson_assert);
	}
	return result_TestScript_Test_Action;
}

TestScript_Teardown*
Deserialize_TestScript_Teardown(Arena *arena, cJSON *testScript_Teardown)
{
	TestScript_Teardown *result_TestScript_Teardown = PushArray(arena, TestScript_Teardown, 1);
	result_TestScript_Teardown->resourceType = ResourceType::TestScript_Teardown;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Teardown, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Teardown, "id");
	if(cjson_id)
	{
		result_TestScript_Teardown->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Teardown, "extension");
	if(cjson_extension)
	{
		result_TestScript_Teardown->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Teardown->extension = PushArray(arena, Extension, result_TestScript_Teardown->extension_count);
		for(int i = 0; i < result_TestScript_Teardown->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Teardown->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Teardown, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Teardown->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Teardown->modifierExtension = PushArray(arena, Extension, result_TestScript_Teardown->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Teardown->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Teardown->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_action =  cJSON_GetObjectItem(testScript_Teardown, "action");
	if(cjson_action)
	{
		result_TestScript_Teardown->action_count = cJSON_GetArraySize(cjson_action);
		result_TestScript_Teardown->action = PushArray(arena, TestScript_Teardown_Action, result_TestScript_Teardown->action_count);
		for(int i = 0; i < result_TestScript_Teardown->action_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_action, i);
			result_TestScript_Teardown->action[i] = *Deserialize_TestScript_Teardown_Action(arena, internal);
		}

	}
	return result_TestScript_Teardown;
}

TestScript_Teardown_Action*
Deserialize_TestScript_Teardown_Action(Arena *arena, cJSON *testScript_Teardown_Action)
{
	TestScript_Teardown_Action *result_TestScript_Teardown_Action = PushArray(arena, TestScript_Teardown_Action, 1);
	result_TestScript_Teardown_Action->resourceType = ResourceType::TestScript_Teardown_Action;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(testScript_Teardown_Action, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(testScript_Teardown_Action, "id");
	if(cjson_id)
	{
		result_TestScript_Teardown_Action->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(testScript_Teardown_Action, "extension");
	if(cjson_extension)
	{
		result_TestScript_Teardown_Action->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TestScript_Teardown_Action->extension = PushArray(arena, Extension, result_TestScript_Teardown_Action->extension_count);
		for(int i = 0; i < result_TestScript_Teardown_Action->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TestScript_Teardown_Action->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(testScript_Teardown_Action, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_TestScript_Teardown_Action->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_TestScript_Teardown_Action->modifierExtension = PushArray(arena, Extension, result_TestScript_Teardown_Action->modifierExtension_count);
		for(int i = 0; i < result_TestScript_Teardown_Action->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_TestScript_Teardown_Action->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_operation =  cJSON_GetObjectItem(testScript_Teardown_Action, "operation");
	if(cjson_operation)
	{
		result_TestScript_Teardown_Action->operation = Deserialize_TestScript_Setup_Action_Operation(arena, cjson_operation);
	}
	return result_TestScript_Teardown_Action;
}

ValueSet*
Deserialize_ValueSet(Arena *arena, cJSON *valueSet)
{
	ValueSet *result_ValueSet = PushArray(arena, ValueSet, 1);
	result_ValueSet->resourceType = ResourceType::ValueSet;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet, "id");
	if(cjson_id)
	{
		result_ValueSet->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(valueSet, "meta");
	if(cjson_meta)
	{
		result_ValueSet->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(valueSet, "implicitRules");
	if(cjson_implicitRules)
	{
		result_ValueSet->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(valueSet, "language");
	if(cjson_language)
	{
		result_ValueSet->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(valueSet, "text");
	if(cjson_text)
	{
		result_ValueSet->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(valueSet, "contained");
	if(cjson_contained)
	{
		result_ValueSet->contained_count = cJSON_GetArraySize(cjson_contained);
		result_ValueSet->contained = PushArray(arena, Resource, result_ValueSet->contained_count);
		for(int i = 0; i < result_ValueSet->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_ValueSet->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet, "extension");
	if(cjson_extension)
	{
		result_ValueSet->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet->extension = PushArray(arena, Extension, result_ValueSet->extension_count);
		for(int i = 0; i < result_ValueSet->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet->modifierExtension = PushArray(arena, Extension, result_ValueSet->modifierExtension_count);
		for(int i = 0; i < result_ValueSet->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(valueSet, "url");
	if(cjson_url)
	{
		result_ValueSet->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(valueSet, "identifier");
	if(cjson_identifier)
	{
		result_ValueSet->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_ValueSet->identifier = PushArray(arena, Identifier, result_ValueSet->identifier_count);
		for(int i = 0; i < result_ValueSet->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_ValueSet->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_version =  cJSON_GetObjectItem(valueSet, "version");
	if(cjson_version)
	{
		result_ValueSet->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(valueSet, "name");
	if(cjson_name)
	{
		result_ValueSet->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(valueSet, "title");
	if(cjson_title)
	{
		result_ValueSet->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(valueSet, "status");
	if(cjson_status)
	{
		result_ValueSet->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(valueSet, "experimental");
	if(cjson_experimental)
	{
		result_ValueSet->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(valueSet, "date");
	if(cjson_date)
	{
		result_ValueSet->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(valueSet, "publisher");
	if(cjson_publisher)
	{
		result_ValueSet->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(valueSet, "contact");
	if(cjson_contact)
	{
		result_ValueSet->contact_count = cJSON_GetArraySize(cjson_contact);
		result_ValueSet->contact = PushArray(arena, ContactDetail, result_ValueSet->contact_count);
		for(int i = 0; i < result_ValueSet->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_ValueSet->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(valueSet, "description");
	if(cjson_description)
	{
		result_ValueSet->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(valueSet, "useContext");
	if(cjson_useContext)
	{
		result_ValueSet->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_ValueSet->useContext = PushArray(arena, UsageContext, result_ValueSet->useContext_count);
		for(int i = 0; i < result_ValueSet->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_ValueSet->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(valueSet, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_ValueSet->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_ValueSet->jurisdiction = PushArray(arena, CodeableConcept, result_ValueSet->jurisdiction_count);
		for(int i = 0; i < result_ValueSet->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_ValueSet->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_immutable =  cJSON_GetObjectItem(valueSet, "immutable");
	if(cjson_immutable)
	{
		result_ValueSet->immutable = (boolean)cJSON_IsTrue(cjson_immutable);
	}
	cJSON *cjson_purpose =  cJSON_GetObjectItem(valueSet, "purpose");
	if(cjson_purpose)
	{
		result_ValueSet->purpose = Str8C(cJSON_GetStringValue(cjson_purpose));
	}
	cJSON *cjson_copyright =  cJSON_GetObjectItem(valueSet, "copyright");
	if(cjson_copyright)
	{
		result_ValueSet->copyright = Str8C(cJSON_GetStringValue(cjson_copyright));
	}
	cJSON *cjson_compose =  cJSON_GetObjectItem(valueSet, "compose");
	if(cjson_compose)
	{
		result_ValueSet->compose = Deserialize_ValueSet_Compose(arena, cjson_compose);
	}
	cJSON *cjson_expansion =  cJSON_GetObjectItem(valueSet, "expansion");
	if(cjson_expansion)
	{
		result_ValueSet->expansion = Deserialize_ValueSet_Expansion(arena, cjson_expansion);
	}
	return result_ValueSet;
}

ValueSet_Compose*
Deserialize_ValueSet_Compose(Arena *arena, cJSON *valueSet_Compose)
{
	ValueSet_Compose *result_ValueSet_Compose = PushArray(arena, ValueSet_Compose, 1);
	result_ValueSet_Compose->resourceType = ResourceType::ValueSet_Compose;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Compose, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Compose, "id");
	if(cjson_id)
	{
		result_ValueSet_Compose->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Compose, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Compose->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Compose->extension = PushArray(arena, Extension, result_ValueSet_Compose->extension_count);
		for(int i = 0; i < result_ValueSet_Compose->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Compose->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Compose, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Compose->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Compose->modifierExtension = PushArray(arena, Extension, result_ValueSet_Compose->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Compose->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Compose->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_lockedDate =  cJSON_GetObjectItem(valueSet_Compose, "lockedDate");
	if(cjson_lockedDate)
	{
		result_ValueSet_Compose->lockedDate = Str8C(cJSON_GetStringValue(cjson_lockedDate));
	}
	cJSON *cjson_inactive =  cJSON_GetObjectItem(valueSet_Compose, "inactive");
	if(cjson_inactive)
	{
		result_ValueSet_Compose->inactive = (boolean)cJSON_IsTrue(cjson_inactive);
	}
	cJSON *cjson_include =  cJSON_GetObjectItem(valueSet_Compose, "include");
	if(cjson_include)
	{
		result_ValueSet_Compose->include_count = cJSON_GetArraySize(cjson_include);
		result_ValueSet_Compose->include = PushArray(arena, ValueSet_Compose_Include, result_ValueSet_Compose->include_count);
		for(int i = 0; i < result_ValueSet_Compose->include_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_include, i);
			result_ValueSet_Compose->include[i] = *Deserialize_ValueSet_Compose_Include(arena, internal);
		}

	}
	cJSON *cjson_exclude =  cJSON_GetObjectItem(valueSet_Compose, "exclude");
	if(cjson_exclude)
	{
		result_ValueSet_Compose->exclude_count = cJSON_GetArraySize(cjson_exclude);
		result_ValueSet_Compose->exclude = PushArray(arena, ValueSet_Compose_Include, result_ValueSet_Compose->exclude_count);
		for(int i = 0; i < result_ValueSet_Compose->exclude_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_exclude, i);
			result_ValueSet_Compose->exclude[i] = *Deserialize_ValueSet_Compose_Include(arena, internal);
		}

	}
	return result_ValueSet_Compose;
}

ValueSet_Compose_Include*
Deserialize_ValueSet_Compose_Include(Arena *arena, cJSON *valueSet_Compose_Include)
{
	ValueSet_Compose_Include *result_ValueSet_Compose_Include = PushArray(arena, ValueSet_Compose_Include, 1);
	result_ValueSet_Compose_Include->resourceType = ResourceType::ValueSet_Compose_Include;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Compose_Include, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Compose_Include, "id");
	if(cjson_id)
	{
		result_ValueSet_Compose_Include->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Compose_Include, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Compose_Include->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Compose_Include->extension = PushArray(arena, Extension, result_ValueSet_Compose_Include->extension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Compose_Include->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Compose_Include, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Compose_Include->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Compose_Include->modifierExtension = PushArray(arena, Extension, result_ValueSet_Compose_Include->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Compose_Include->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_system =  cJSON_GetObjectItem(valueSet_Compose_Include, "system");
	if(cjson_system)
	{
		result_ValueSet_Compose_Include->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(valueSet_Compose_Include, "version");
	if(cjson_version)
	{
		result_ValueSet_Compose_Include->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_concept =  cJSON_GetObjectItem(valueSet_Compose_Include, "concept");
	if(cjson_concept)
	{
		result_ValueSet_Compose_Include->concept_count = cJSON_GetArraySize(cjson_concept);
		result_ValueSet_Compose_Include->concept = PushArray(arena, ValueSet_Compose_Include_Concept, result_ValueSet_Compose_Include->concept_count);
		for(int i = 0; i < result_ValueSet_Compose_Include->concept_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_concept, i);
			result_ValueSet_Compose_Include->concept[i] = *Deserialize_ValueSet_Compose_Include_Concept(arena, internal);
		}

	}
	cJSON *cjson_filter =  cJSON_GetObjectItem(valueSet_Compose_Include, "filter");
	if(cjson_filter)
	{
		result_ValueSet_Compose_Include->filter_count = cJSON_GetArraySize(cjson_filter);
		result_ValueSet_Compose_Include->filter = PushArray(arena, ValueSet_Compose_Include_Filter, result_ValueSet_Compose_Include->filter_count);
		for(int i = 0; i < result_ValueSet_Compose_Include->filter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_filter, i);
			result_ValueSet_Compose_Include->filter[i] = *Deserialize_ValueSet_Compose_Include_Filter(arena, internal);
		}

	}
	cJSON *cjson_valueSet =  cJSON_GetObjectItem(valueSet_Compose_Include, "valueSet");
	if(cjson_valueSet)
	{
		result_ValueSet_Compose_Include->valueSet_count = cJSON_GetArraySize(cjson_valueSet);
		result_ValueSet_Compose_Include->valueSet = PushArray(arena, fhir_canonical, result_ValueSet_Compose_Include->valueSet_count);
		for(int i = 0; i < result_ValueSet_Compose_Include->valueSet_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_valueSet, i);
			result_ValueSet_Compose_Include->valueSet[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	return result_ValueSet_Compose_Include;
}

ValueSet_Compose_Include_Concept*
Deserialize_ValueSet_Compose_Include_Concept(Arena *arena, cJSON *valueSet_Compose_Include_Concept)
{
	ValueSet_Compose_Include_Concept *result_ValueSet_Compose_Include_Concept = PushArray(arena, ValueSet_Compose_Include_Concept, 1);
	result_ValueSet_Compose_Include_Concept->resourceType = ResourceType::ValueSet_Compose_Include_Concept;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept, "id");
	if(cjson_id)
	{
		result_ValueSet_Compose_Include_Concept->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Compose_Include_Concept->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Compose_Include_Concept->extension = PushArray(arena, Extension, result_ValueSet_Compose_Include_Concept->extension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include_Concept->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Compose_Include_Concept->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Compose_Include_Concept->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Compose_Include_Concept->modifierExtension = PushArray(arena, Extension, result_ValueSet_Compose_Include_Concept->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include_Concept->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Compose_Include_Concept->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept, "code");
	if(cjson_code)
	{
		result_ValueSet_Compose_Include_Concept->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept, "display");
	if(cjson_display)
	{
		result_ValueSet_Compose_Include_Concept->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_designation =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept, "designation");
	if(cjson_designation)
	{
		result_ValueSet_Compose_Include_Concept->designation_count = cJSON_GetArraySize(cjson_designation);
		result_ValueSet_Compose_Include_Concept->designation = PushArray(arena, ValueSet_Compose_Include_Concept_Designation, result_ValueSet_Compose_Include_Concept->designation_count);
		for(int i = 0; i < result_ValueSet_Compose_Include_Concept->designation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_designation, i);
			result_ValueSet_Compose_Include_Concept->designation[i] = *Deserialize_ValueSet_Compose_Include_Concept_Designation(arena, internal);
		}

	}
	return result_ValueSet_Compose_Include_Concept;
}

ValueSet_Compose_Include_Concept_Designation*
Deserialize_ValueSet_Compose_Include_Concept_Designation(Arena *arena, cJSON *valueSet_Compose_Include_Concept_Designation)
{
	ValueSet_Compose_Include_Concept_Designation *result_ValueSet_Compose_Include_Concept_Designation = PushArray(arena, ValueSet_Compose_Include_Concept_Designation, 1);
	result_ValueSet_Compose_Include_Concept_Designation->resourceType = ResourceType::ValueSet_Compose_Include_Concept_Designation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept_Designation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept_Designation, "id");
	if(cjson_id)
	{
		result_ValueSet_Compose_Include_Concept_Designation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept_Designation, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Compose_Include_Concept_Designation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Compose_Include_Concept_Designation->extension = PushArray(arena, Extension, result_ValueSet_Compose_Include_Concept_Designation->extension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include_Concept_Designation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Compose_Include_Concept_Designation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept_Designation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Compose_Include_Concept_Designation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Compose_Include_Concept_Designation->modifierExtension = PushArray(arena, Extension, result_ValueSet_Compose_Include_Concept_Designation->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include_Concept_Designation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Compose_Include_Concept_Designation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_language =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept_Designation, "language");
	if(cjson_language)
	{
		result_ValueSet_Compose_Include_Concept_Designation->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept_Designation, "use");
	if(cjson_use)
	{
		result_ValueSet_Compose_Include_Concept_Designation->use = Deserialize_Coding(arena, cjson_use);
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(valueSet_Compose_Include_Concept_Designation, "value");
	if(cjson_value)
	{
		result_ValueSet_Compose_Include_Concept_Designation->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_ValueSet_Compose_Include_Concept_Designation;
}

ValueSet_Compose_Include_Filter*
Deserialize_ValueSet_Compose_Include_Filter(Arena *arena, cJSON *valueSet_Compose_Include_Filter)
{
	ValueSet_Compose_Include_Filter *result_ValueSet_Compose_Include_Filter = PushArray(arena, ValueSet_Compose_Include_Filter, 1);
	result_ValueSet_Compose_Include_Filter->resourceType = ResourceType::ValueSet_Compose_Include_Filter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Compose_Include_Filter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Compose_Include_Filter, "id");
	if(cjson_id)
	{
		result_ValueSet_Compose_Include_Filter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Compose_Include_Filter, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Compose_Include_Filter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Compose_Include_Filter->extension = PushArray(arena, Extension, result_ValueSet_Compose_Include_Filter->extension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include_Filter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Compose_Include_Filter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Compose_Include_Filter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Compose_Include_Filter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Compose_Include_Filter->modifierExtension = PushArray(arena, Extension, result_ValueSet_Compose_Include_Filter->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Compose_Include_Filter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Compose_Include_Filter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_property =  cJSON_GetObjectItem(valueSet_Compose_Include_Filter, "property");
	if(cjson_property)
	{
		result_ValueSet_Compose_Include_Filter->property = Str8C(cJSON_GetStringValue(cjson_property));
	}
	cJSON *cjson_op =  cJSON_GetObjectItem(valueSet_Compose_Include_Filter, "op");
	if(cjson_op)
	{
		result_ValueSet_Compose_Include_Filter->op = Str8C(cJSON_GetStringValue(cjson_op));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(valueSet_Compose_Include_Filter, "value");
	if(cjson_value)
	{
		result_ValueSet_Compose_Include_Filter->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_ValueSet_Compose_Include_Filter;
}

ValueSet_Expansion*
Deserialize_ValueSet_Expansion(Arena *arena, cJSON *valueSet_Expansion)
{
	ValueSet_Expansion *result_ValueSet_Expansion = PushArray(arena, ValueSet_Expansion, 1);
	result_ValueSet_Expansion->resourceType = ResourceType::ValueSet_Expansion;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Expansion, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Expansion, "id");
	if(cjson_id)
	{
		result_ValueSet_Expansion->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Expansion, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Expansion->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Expansion->extension = PushArray(arena, Extension, result_ValueSet_Expansion->extension_count);
		for(int i = 0; i < result_ValueSet_Expansion->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Expansion->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Expansion, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Expansion->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Expansion->modifierExtension = PushArray(arena, Extension, result_ValueSet_Expansion->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Expansion->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Expansion->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(valueSet_Expansion, "identifier");
	if(cjson_identifier)
	{
		result_ValueSet_Expansion->identifier = Str8C(cJSON_GetStringValue(cjson_identifier));
	}
	cJSON *cjson_timestamp =  cJSON_GetObjectItem(valueSet_Expansion, "timestamp");
	if(cjson_timestamp)
	{
		result_ValueSet_Expansion->timestamp = Str8C(cJSON_GetStringValue(cjson_timestamp));
	}
	cJSON *cjson_total =  cJSON_GetObjectItem(valueSet_Expansion, "total");
	if(cjson_total)
	{
		result_ValueSet_Expansion->total = Deserialize_Integer(arena, cjson_total);
	}
	cJSON *cjson_offset =  cJSON_GetObjectItem(valueSet_Expansion, "offset");
	if(cjson_offset)
	{
		result_ValueSet_Expansion->offset = Deserialize_Integer(arena, cjson_offset);
	}
	cJSON *cjson_parameter =  cJSON_GetObjectItem(valueSet_Expansion, "parameter");
	if(cjson_parameter)
	{
		result_ValueSet_Expansion->parameter_count = cJSON_GetArraySize(cjson_parameter);
		result_ValueSet_Expansion->parameter = PushArray(arena, ValueSet_Expansion_Parameter, result_ValueSet_Expansion->parameter_count);
		for(int i = 0; i < result_ValueSet_Expansion->parameter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_parameter, i);
			result_ValueSet_Expansion->parameter[i] = *Deserialize_ValueSet_Expansion_Parameter(arena, internal);
		}

	}
	cJSON *cjson_contains =  cJSON_GetObjectItem(valueSet_Expansion, "contains");
	if(cjson_contains)
	{
		result_ValueSet_Expansion->contains_count = cJSON_GetArraySize(cjson_contains);
		result_ValueSet_Expansion->contains = PushArray(arena, ValueSet_Expansion_Contains, result_ValueSet_Expansion->contains_count);
		for(int i = 0; i < result_ValueSet_Expansion->contains_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contains, i);
			result_ValueSet_Expansion->contains[i] = *Deserialize_ValueSet_Expansion_Contains(arena, internal);
		}

	}
	return result_ValueSet_Expansion;
}

ValueSet_Expansion_Parameter*
Deserialize_ValueSet_Expansion_Parameter(Arena *arena, cJSON *valueSet_Expansion_Parameter)
{
	ValueSet_Expansion_Parameter *result_ValueSet_Expansion_Parameter = PushArray(arena, ValueSet_Expansion_Parameter, 1);
	result_ValueSet_Expansion_Parameter->resourceType = ResourceType::ValueSet_Expansion_Parameter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Expansion_Parameter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Expansion_Parameter, "id");
	if(cjson_id)
	{
		result_ValueSet_Expansion_Parameter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Expansion_Parameter, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Expansion_Parameter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Expansion_Parameter->extension = PushArray(arena, Extension, result_ValueSet_Expansion_Parameter->extension_count);
		for(int i = 0; i < result_ValueSet_Expansion_Parameter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Expansion_Parameter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Expansion_Parameter, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Expansion_Parameter->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Expansion_Parameter->modifierExtension = PushArray(arena, Extension, result_ValueSet_Expansion_Parameter->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Expansion_Parameter->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Expansion_Parameter->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(valueSet_Expansion_Parameter, "name");
	if(cjson_name)
	{
		result_ValueSet_Expansion_Parameter->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	if((bool)cJSON_HasObjectItem(valueSet_Expansion_Parameter, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(valueSet_Expansion_Parameter, "valueString");
		result_ValueSet_Expansion_Parameter->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_ValueSet_Expansion_Parameter->value_type = ValueSet_Expansion_Parameter::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(valueSet_Expansion_Parameter, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(valueSet_Expansion_Parameter, "valueBoolean");
		result_ValueSet_Expansion_Parameter->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ValueSet_Expansion_Parameter->value_type = ValueSet_Expansion_Parameter::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(valueSet_Expansion_Parameter, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(valueSet_Expansion_Parameter, "valueInteger");
		result_ValueSet_Expansion_Parameter->value.valueInteger = Deserialize_Integer(arena, item);
		result_ValueSet_Expansion_Parameter->value_type = ValueSet_Expansion_Parameter::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(valueSet_Expansion_Parameter, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(valueSet_Expansion_Parameter, "valueDecimal");
		result_ValueSet_Expansion_Parameter->value.valueDecimal = cJSON_GetNumberValue(item);
		result_ValueSet_Expansion_Parameter->value_type = ValueSet_Expansion_Parameter::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(valueSet_Expansion_Parameter, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(valueSet_Expansion_Parameter, "valueUri");
		result_ValueSet_Expansion_Parameter->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_ValueSet_Expansion_Parameter->value_type = ValueSet_Expansion_Parameter::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(valueSet_Expansion_Parameter, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(valueSet_Expansion_Parameter, "valueCode");
		result_ValueSet_Expansion_Parameter->value.valueCode = Str8C(cJSON_GetStringValue(item));
		result_ValueSet_Expansion_Parameter->value_type = ValueSet_Expansion_Parameter::ValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(valueSet_Expansion_Parameter, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(valueSet_Expansion_Parameter, "valueDateTime");
		result_ValueSet_Expansion_Parameter->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ValueSet_Expansion_Parameter->value_type = ValueSet_Expansion_Parameter::ValueType::fhir_dateTime;
	}


	return result_ValueSet_Expansion_Parameter;
}

ValueSet_Expansion_Contains*
Deserialize_ValueSet_Expansion_Contains(Arena *arena, cJSON *valueSet_Expansion_Contains)
{
	ValueSet_Expansion_Contains *result_ValueSet_Expansion_Contains = PushArray(arena, ValueSet_Expansion_Contains, 1);
	result_ValueSet_Expansion_Contains->resourceType = ResourceType::ValueSet_Expansion_Contains;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "id");
	if(cjson_id)
	{
		result_ValueSet_Expansion_Contains->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "extension");
	if(cjson_extension)
	{
		result_ValueSet_Expansion_Contains->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ValueSet_Expansion_Contains->extension = PushArray(arena, Extension, result_ValueSet_Expansion_Contains->extension_count);
		for(int i = 0; i < result_ValueSet_Expansion_Contains->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ValueSet_Expansion_Contains->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ValueSet_Expansion_Contains->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ValueSet_Expansion_Contains->modifierExtension = PushArray(arena, Extension, result_ValueSet_Expansion_Contains->modifierExtension_count);
		for(int i = 0; i < result_ValueSet_Expansion_Contains->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ValueSet_Expansion_Contains->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_system =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "system");
	if(cjson_system)
	{
		result_ValueSet_Expansion_Contains->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_abstract =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "abstract");
	if(cjson_abstract)
	{
		result_ValueSet_Expansion_Contains->abstract = (boolean)cJSON_IsTrue(cjson_abstract);
	}
	cJSON *cjson_inactive =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "inactive");
	if(cjson_inactive)
	{
		result_ValueSet_Expansion_Contains->inactive = (boolean)cJSON_IsTrue(cjson_inactive);
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "version");
	if(cjson_version)
	{
		result_ValueSet_Expansion_Contains->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "code");
	if(cjson_code)
	{
		result_ValueSet_Expansion_Contains->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "display");
	if(cjson_display)
	{
		result_ValueSet_Expansion_Contains->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_designation =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "designation");
	if(cjson_designation)
	{
		result_ValueSet_Expansion_Contains->designation_count = cJSON_GetArraySize(cjson_designation);
		result_ValueSet_Expansion_Contains->designation = PushArray(arena, ValueSet_Compose_Include_Concept_Designation, result_ValueSet_Expansion_Contains->designation_count);
		for(int i = 0; i < result_ValueSet_Expansion_Contains->designation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_designation, i);
			result_ValueSet_Expansion_Contains->designation[i] = *Deserialize_ValueSet_Compose_Include_Concept_Designation(arena, internal);
		}

	}
	cJSON *cjson_contains =  cJSON_GetObjectItem(valueSet_Expansion_Contains, "contains");
	if(cjson_contains)
	{
		result_ValueSet_Expansion_Contains->contains_count = cJSON_GetArraySize(cjson_contains);
		result_ValueSet_Expansion_Contains->contains = PushArray(arena, ValueSet_Expansion_Contains, result_ValueSet_Expansion_Contains->contains_count);
		for(int i = 0; i < result_ValueSet_Expansion_Contains->contains_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contains, i);
			result_ValueSet_Expansion_Contains->contains[i] = *Deserialize_ValueSet_Expansion_Contains(arena, internal);
		}

	}
	return result_ValueSet_Expansion_Contains;
}

VerificationResult*
Deserialize_VerificationResult(Arena *arena, cJSON *verificationResult)
{
	VerificationResult *result_VerificationResult = PushArray(arena, VerificationResult, 1);
	result_VerificationResult->resourceType = ResourceType::VerificationResult;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(verificationResult, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(verificationResult, "id");
	if(cjson_id)
	{
		result_VerificationResult->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(verificationResult, "meta");
	if(cjson_meta)
	{
		result_VerificationResult->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(verificationResult, "implicitRules");
	if(cjson_implicitRules)
	{
		result_VerificationResult->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(verificationResult, "language");
	if(cjson_language)
	{
		result_VerificationResult->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(verificationResult, "text");
	if(cjson_text)
	{
		result_VerificationResult->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(verificationResult, "contained");
	if(cjson_contained)
	{
		result_VerificationResult->contained_count = cJSON_GetArraySize(cjson_contained);
		result_VerificationResult->contained = PushArray(arena, Resource, result_VerificationResult->contained_count);
		for(int i = 0; i < result_VerificationResult->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_VerificationResult->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(verificationResult, "extension");
	if(cjson_extension)
	{
		result_VerificationResult->extension_count = cJSON_GetArraySize(cjson_extension);
		result_VerificationResult->extension = PushArray(arena, Extension, result_VerificationResult->extension_count);
		for(int i = 0; i < result_VerificationResult->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_VerificationResult->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(verificationResult, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_VerificationResult->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_VerificationResult->modifierExtension = PushArray(arena, Extension, result_VerificationResult->modifierExtension_count);
		for(int i = 0; i < result_VerificationResult->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_VerificationResult->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_target =  cJSON_GetObjectItem(verificationResult, "target");
	if(cjson_target)
	{
		result_VerificationResult->target_count = cJSON_GetArraySize(cjson_target);
		result_VerificationResult->target = PushArray(arena, Reference, result_VerificationResult->target_count);
		for(int i = 0; i < result_VerificationResult->target_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_target, i);
			result_VerificationResult->target[i] = *Deserialize_Reference(arena, internal);
		}

	}
	cJSON *cjson_targetLocation =  cJSON_GetObjectItem(verificationResult, "targetLocation");
	if(cjson_targetLocation)
	{
		result_VerificationResult->targetLocation_count = cJSON_GetArraySize(cjson_targetLocation);
		result_VerificationResult->targetLocation = PushArray(arena, fhir_string, result_VerificationResult->targetLocation_count);
		for(int i = 0; i < result_VerificationResult->targetLocation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_targetLocation, i);
			result_VerificationResult->targetLocation[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_need =  cJSON_GetObjectItem(verificationResult, "need");
	if(cjson_need)
	{
		result_VerificationResult->need = Deserialize_CodeableConcept(arena, cjson_need);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(verificationResult, "status");
	if(cjson_status)
	{
		result_VerificationResult->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_statusDate =  cJSON_GetObjectItem(verificationResult, "statusDate");
	if(cjson_statusDate)
	{
		result_VerificationResult->statusDate = Str8C(cJSON_GetStringValue(cjson_statusDate));
	}
	cJSON *cjson_validationType =  cJSON_GetObjectItem(verificationResult, "validationType");
	if(cjson_validationType)
	{
		result_VerificationResult->validationType = Deserialize_CodeableConcept(arena, cjson_validationType);
	}
	cJSON *cjson_validationProcess =  cJSON_GetObjectItem(verificationResult, "validationProcess");
	if(cjson_validationProcess)
	{
		result_VerificationResult->validationProcess_count = cJSON_GetArraySize(cjson_validationProcess);
		result_VerificationResult->validationProcess = PushArray(arena, CodeableConcept, result_VerificationResult->validationProcess_count);
		for(int i = 0; i < result_VerificationResult->validationProcess_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_validationProcess, i);
			result_VerificationResult->validationProcess[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_frequency =  cJSON_GetObjectItem(verificationResult, "frequency");
	if(cjson_frequency)
	{
		result_VerificationResult->frequency = Deserialize_Timing(arena, cjson_frequency);
	}
	cJSON *cjson_lastPerformed =  cJSON_GetObjectItem(verificationResult, "lastPerformed");
	if(cjson_lastPerformed)
	{
		result_VerificationResult->lastPerformed = Str8C(cJSON_GetStringValue(cjson_lastPerformed));
	}
	cJSON *cjson_nextScheduled =  cJSON_GetObjectItem(verificationResult, "nextScheduled");
	if(cjson_nextScheduled)
	{
		result_VerificationResult->nextScheduled = Str8C(cJSON_GetStringValue(cjson_nextScheduled));
	}
	cJSON *cjson_failureAction =  cJSON_GetObjectItem(verificationResult, "failureAction");
	if(cjson_failureAction)
	{
		result_VerificationResult->failureAction = Deserialize_CodeableConcept(arena, cjson_failureAction);
	}
	cJSON *cjson_primarySource =  cJSON_GetObjectItem(verificationResult, "primarySource");
	if(cjson_primarySource)
	{
		result_VerificationResult->primarySource_count = cJSON_GetArraySize(cjson_primarySource);
		result_VerificationResult->primarySource = PushArray(arena, VerificationResult_PrimarySource, result_VerificationResult->primarySource_count);
		for(int i = 0; i < result_VerificationResult->primarySource_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_primarySource, i);
			result_VerificationResult->primarySource[i] = *Deserialize_VerificationResult_PrimarySource(arena, internal);
		}

	}
	cJSON *cjson_attestation =  cJSON_GetObjectItem(verificationResult, "attestation");
	if(cjson_attestation)
	{
		result_VerificationResult->attestation = Deserialize_VerificationResult_Attestation(arena, cjson_attestation);
	}
	cJSON *cjson_validator =  cJSON_GetObjectItem(verificationResult, "validator");
	if(cjson_validator)
	{
		result_VerificationResult->validator_count = cJSON_GetArraySize(cjson_validator);
		result_VerificationResult->validator = PushArray(arena, VerificationResult_Validator, result_VerificationResult->validator_count);
		for(int i = 0; i < result_VerificationResult->validator_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_validator, i);
			result_VerificationResult->validator[i] = *Deserialize_VerificationResult_Validator(arena, internal);
		}

	}
	return result_VerificationResult;
}

VerificationResult_PrimarySource*
Deserialize_VerificationResult_PrimarySource(Arena *arena, cJSON *verificationResult_PrimarySource)
{
	VerificationResult_PrimarySource *result_VerificationResult_PrimarySource = PushArray(arena, VerificationResult_PrimarySource, 1);
	result_VerificationResult_PrimarySource->resourceType = ResourceType::VerificationResult_PrimarySource;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(verificationResult_PrimarySource, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(verificationResult_PrimarySource, "id");
	if(cjson_id)
	{
		result_VerificationResult_PrimarySource->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(verificationResult_PrimarySource, "extension");
	if(cjson_extension)
	{
		result_VerificationResult_PrimarySource->extension_count = cJSON_GetArraySize(cjson_extension);
		result_VerificationResult_PrimarySource->extension = PushArray(arena, Extension, result_VerificationResult_PrimarySource->extension_count);
		for(int i = 0; i < result_VerificationResult_PrimarySource->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_VerificationResult_PrimarySource->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(verificationResult_PrimarySource, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_VerificationResult_PrimarySource->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_VerificationResult_PrimarySource->modifierExtension = PushArray(arena, Extension, result_VerificationResult_PrimarySource->modifierExtension_count);
		for(int i = 0; i < result_VerificationResult_PrimarySource->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_VerificationResult_PrimarySource->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_who =  cJSON_GetObjectItem(verificationResult_PrimarySource, "who");
	if(cjson_who)
	{
		result_VerificationResult_PrimarySource->who = Deserialize_Reference(arena, cjson_who);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(verificationResult_PrimarySource, "type");
	if(cjson_type)
	{
		result_VerificationResult_PrimarySource->type_count = cJSON_GetArraySize(cjson_type);
		result_VerificationResult_PrimarySource->type = PushArray(arena, CodeableConcept, result_VerificationResult_PrimarySource->type_count);
		for(int i = 0; i < result_VerificationResult_PrimarySource->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_VerificationResult_PrimarySource->type[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_communicationMethod =  cJSON_GetObjectItem(verificationResult_PrimarySource, "communicationMethod");
	if(cjson_communicationMethod)
	{
		result_VerificationResult_PrimarySource->communicationMethod_count = cJSON_GetArraySize(cjson_communicationMethod);
		result_VerificationResult_PrimarySource->communicationMethod = PushArray(arena, CodeableConcept, result_VerificationResult_PrimarySource->communicationMethod_count);
		for(int i = 0; i < result_VerificationResult_PrimarySource->communicationMethod_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_communicationMethod, i);
			result_VerificationResult_PrimarySource->communicationMethod[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_validationStatus =  cJSON_GetObjectItem(verificationResult_PrimarySource, "validationStatus");
	if(cjson_validationStatus)
	{
		result_VerificationResult_PrimarySource->validationStatus = Deserialize_CodeableConcept(arena, cjson_validationStatus);
	}
	cJSON *cjson_validationDate =  cJSON_GetObjectItem(verificationResult_PrimarySource, "validationDate");
	if(cjson_validationDate)
	{
		result_VerificationResult_PrimarySource->validationDate = Str8C(cJSON_GetStringValue(cjson_validationDate));
	}
	cJSON *cjson_canPushUpdates =  cJSON_GetObjectItem(verificationResult_PrimarySource, "canPushUpdates");
	if(cjson_canPushUpdates)
	{
		result_VerificationResult_PrimarySource->canPushUpdates = Deserialize_CodeableConcept(arena, cjson_canPushUpdates);
	}
	cJSON *cjson_pushTypeAvailable =  cJSON_GetObjectItem(verificationResult_PrimarySource, "pushTypeAvailable");
	if(cjson_pushTypeAvailable)
	{
		result_VerificationResult_PrimarySource->pushTypeAvailable_count = cJSON_GetArraySize(cjson_pushTypeAvailable);
		result_VerificationResult_PrimarySource->pushTypeAvailable = PushArray(arena, CodeableConcept, result_VerificationResult_PrimarySource->pushTypeAvailable_count);
		for(int i = 0; i < result_VerificationResult_PrimarySource->pushTypeAvailable_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_pushTypeAvailable, i);
			result_VerificationResult_PrimarySource->pushTypeAvailable[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_VerificationResult_PrimarySource;
}

VerificationResult_Attestation*
Deserialize_VerificationResult_Attestation(Arena *arena, cJSON *verificationResult_Attestation)
{
	VerificationResult_Attestation *result_VerificationResult_Attestation = PushArray(arena, VerificationResult_Attestation, 1);
	result_VerificationResult_Attestation->resourceType = ResourceType::VerificationResult_Attestation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(verificationResult_Attestation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(verificationResult_Attestation, "id");
	if(cjson_id)
	{
		result_VerificationResult_Attestation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(verificationResult_Attestation, "extension");
	if(cjson_extension)
	{
		result_VerificationResult_Attestation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_VerificationResult_Attestation->extension = PushArray(arena, Extension, result_VerificationResult_Attestation->extension_count);
		for(int i = 0; i < result_VerificationResult_Attestation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_VerificationResult_Attestation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(verificationResult_Attestation, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_VerificationResult_Attestation->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_VerificationResult_Attestation->modifierExtension = PushArray(arena, Extension, result_VerificationResult_Attestation->modifierExtension_count);
		for(int i = 0; i < result_VerificationResult_Attestation->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_VerificationResult_Attestation->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_who =  cJSON_GetObjectItem(verificationResult_Attestation, "who");
	if(cjson_who)
	{
		result_VerificationResult_Attestation->who = Deserialize_Reference(arena, cjson_who);
	}
	cJSON *cjson_onBehalfOf =  cJSON_GetObjectItem(verificationResult_Attestation, "onBehalfOf");
	if(cjson_onBehalfOf)
	{
		result_VerificationResult_Attestation->onBehalfOf = Deserialize_Reference(arena, cjson_onBehalfOf);
	}
	cJSON *cjson_communicationMethod =  cJSON_GetObjectItem(verificationResult_Attestation, "communicationMethod");
	if(cjson_communicationMethod)
	{
		result_VerificationResult_Attestation->communicationMethod = Deserialize_CodeableConcept(arena, cjson_communicationMethod);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(verificationResult_Attestation, "date");
	if(cjson_date)
	{
		result_VerificationResult_Attestation->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_sourceIdentityCertificate =  cJSON_GetObjectItem(verificationResult_Attestation, "sourceIdentityCertificate");
	if(cjson_sourceIdentityCertificate)
	{
		result_VerificationResult_Attestation->sourceIdentityCertificate = Str8C(cJSON_GetStringValue(cjson_sourceIdentityCertificate));
	}
	cJSON *cjson_proxyIdentityCertificate =  cJSON_GetObjectItem(verificationResult_Attestation, "proxyIdentityCertificate");
	if(cjson_proxyIdentityCertificate)
	{
		result_VerificationResult_Attestation->proxyIdentityCertificate = Str8C(cJSON_GetStringValue(cjson_proxyIdentityCertificate));
	}
	cJSON *cjson_proxySignature =  cJSON_GetObjectItem(verificationResult_Attestation, "proxySignature");
	if(cjson_proxySignature)
	{
		result_VerificationResult_Attestation->proxySignature = Deserialize_Signature(arena, cjson_proxySignature);
	}
	cJSON *cjson_sourceSignature =  cJSON_GetObjectItem(verificationResult_Attestation, "sourceSignature");
	if(cjson_sourceSignature)
	{
		result_VerificationResult_Attestation->sourceSignature = Deserialize_Signature(arena, cjson_sourceSignature);
	}
	return result_VerificationResult_Attestation;
}

VerificationResult_Validator*
Deserialize_VerificationResult_Validator(Arena *arena, cJSON *verificationResult_Validator)
{
	VerificationResult_Validator *result_VerificationResult_Validator = PushArray(arena, VerificationResult_Validator, 1);
	result_VerificationResult_Validator->resourceType = ResourceType::VerificationResult_Validator;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(verificationResult_Validator, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(verificationResult_Validator, "id");
	if(cjson_id)
	{
		result_VerificationResult_Validator->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(verificationResult_Validator, "extension");
	if(cjson_extension)
	{
		result_VerificationResult_Validator->extension_count = cJSON_GetArraySize(cjson_extension);
		result_VerificationResult_Validator->extension = PushArray(arena, Extension, result_VerificationResult_Validator->extension_count);
		for(int i = 0; i < result_VerificationResult_Validator->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_VerificationResult_Validator->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(verificationResult_Validator, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_VerificationResult_Validator->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_VerificationResult_Validator->modifierExtension = PushArray(arena, Extension, result_VerificationResult_Validator->modifierExtension_count);
		for(int i = 0; i < result_VerificationResult_Validator->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_VerificationResult_Validator->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_organization =  cJSON_GetObjectItem(verificationResult_Validator, "organization");
	if(cjson_organization)
	{
		result_VerificationResult_Validator->organization = Deserialize_Reference(arena, cjson_organization);
	}
	cJSON *cjson_identityCertificate =  cJSON_GetObjectItem(verificationResult_Validator, "identityCertificate");
	if(cjson_identityCertificate)
	{
		result_VerificationResult_Validator->identityCertificate = Str8C(cJSON_GetStringValue(cjson_identityCertificate));
	}
	cJSON *cjson_attestationSignature =  cJSON_GetObjectItem(verificationResult_Validator, "attestationSignature");
	if(cjson_attestationSignature)
	{
		result_VerificationResult_Validator->attestationSignature = Deserialize_Signature(arena, cjson_attestationSignature);
	}
	return result_VerificationResult_Validator;
}

VisionPrescription*
Deserialize_VisionPrescription(Arena *arena, cJSON *visionPrescription)
{
	VisionPrescription *result_VisionPrescription = PushArray(arena, VisionPrescription, 1);
	result_VisionPrescription->resourceType = ResourceType::VisionPrescription;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(visionPrescription, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(visionPrescription, "id");
	if(cjson_id)
	{
		result_VisionPrescription->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(visionPrescription, "meta");
	if(cjson_meta)
	{
		result_VisionPrescription->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(visionPrescription, "implicitRules");
	if(cjson_implicitRules)
	{
		result_VisionPrescription->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(visionPrescription, "language");
	if(cjson_language)
	{
		result_VisionPrescription->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(visionPrescription, "text");
	if(cjson_text)
	{
		result_VisionPrescription->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(visionPrescription, "contained");
	if(cjson_contained)
	{
		result_VisionPrescription->contained_count = cJSON_GetArraySize(cjson_contained);
		result_VisionPrescription->contained = PushArray(arena, Resource, result_VisionPrescription->contained_count);
		for(int i = 0; i < result_VisionPrescription->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_VisionPrescription->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(visionPrescription, "extension");
	if(cjson_extension)
	{
		result_VisionPrescription->extension_count = cJSON_GetArraySize(cjson_extension);
		result_VisionPrescription->extension = PushArray(arena, Extension, result_VisionPrescription->extension_count);
		for(int i = 0; i < result_VisionPrescription->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_VisionPrescription->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(visionPrescription, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_VisionPrescription->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_VisionPrescription->modifierExtension = PushArray(arena, Extension, result_VisionPrescription->modifierExtension_count);
		for(int i = 0; i < result_VisionPrescription->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_VisionPrescription->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(visionPrescription, "identifier");
	if(cjson_identifier)
	{
		result_VisionPrescription->identifier_count = cJSON_GetArraySize(cjson_identifier);
		result_VisionPrescription->identifier = PushArray(arena, Identifier, result_VisionPrescription->identifier_count);
		for(int i = 0; i < result_VisionPrescription->identifier_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_identifier, i);
			result_VisionPrescription->identifier[i] = *Deserialize_Identifier(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(visionPrescription, "status");
	if(cjson_status)
	{
		result_VisionPrescription->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_created =  cJSON_GetObjectItem(visionPrescription, "created");
	if(cjson_created)
	{
		result_VisionPrescription->created = Str8C(cJSON_GetStringValue(cjson_created));
	}
	cJSON *cjson_patient =  cJSON_GetObjectItem(visionPrescription, "patient");
	if(cjson_patient)
	{
		result_VisionPrescription->patient = Deserialize_Reference(arena, cjson_patient);
	}
	cJSON *cjson_encounter =  cJSON_GetObjectItem(visionPrescription, "encounter");
	if(cjson_encounter)
	{
		result_VisionPrescription->encounter = Deserialize_Reference(arena, cjson_encounter);
	}
	cJSON *cjson_dateWritten =  cJSON_GetObjectItem(visionPrescription, "dateWritten");
	if(cjson_dateWritten)
	{
		result_VisionPrescription->dateWritten = Str8C(cJSON_GetStringValue(cjson_dateWritten));
	}
	cJSON *cjson_prescriber =  cJSON_GetObjectItem(visionPrescription, "prescriber");
	if(cjson_prescriber)
	{
		result_VisionPrescription->prescriber = Deserialize_Reference(arena, cjson_prescriber);
	}
	cJSON *cjson_lensSpecification =  cJSON_GetObjectItem(visionPrescription, "lensSpecification");
	if(cjson_lensSpecification)
	{
		result_VisionPrescription->lensSpecification_count = cJSON_GetArraySize(cjson_lensSpecification);
		result_VisionPrescription->lensSpecification = PushArray(arena, VisionPrescription_LensSpecification, result_VisionPrescription->lensSpecification_count);
		for(int i = 0; i < result_VisionPrescription->lensSpecification_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_lensSpecification, i);
			result_VisionPrescription->lensSpecification[i] = *Deserialize_VisionPrescription_LensSpecification(arena, internal);
		}

	}
	return result_VisionPrescription;
}

VisionPrescription_LensSpecification*
Deserialize_VisionPrescription_LensSpecification(Arena *arena, cJSON *visionPrescription_LensSpecification)
{
	VisionPrescription_LensSpecification *result_VisionPrescription_LensSpecification = PushArray(arena, VisionPrescription_LensSpecification, 1);
	result_VisionPrescription_LensSpecification->resourceType = ResourceType::VisionPrescription_LensSpecification;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "id");
	if(cjson_id)
	{
		result_VisionPrescription_LensSpecification->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "extension");
	if(cjson_extension)
	{
		result_VisionPrescription_LensSpecification->extension_count = cJSON_GetArraySize(cjson_extension);
		result_VisionPrescription_LensSpecification->extension = PushArray(arena, Extension, result_VisionPrescription_LensSpecification->extension_count);
		for(int i = 0; i < result_VisionPrescription_LensSpecification->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_VisionPrescription_LensSpecification->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_VisionPrescription_LensSpecification->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_VisionPrescription_LensSpecification->modifierExtension = PushArray(arena, Extension, result_VisionPrescription_LensSpecification->modifierExtension_count);
		for(int i = 0; i < result_VisionPrescription_LensSpecification->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_VisionPrescription_LensSpecification->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_product =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "product");
	if(cjson_product)
	{
		result_VisionPrescription_LensSpecification->product = Deserialize_CodeableConcept(arena, cjson_product);
	}
	cJSON *cjson_eye =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "eye");
	if(cjson_eye)
	{
		result_VisionPrescription_LensSpecification->eye = Str8C(cJSON_GetStringValue(cjson_eye));
	}
	cJSON *cjson_sphere =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "sphere");
	if(cjson_sphere)
	{
		result_VisionPrescription_LensSpecification->sphere = cJSON_GetNumberValue(cjson_sphere);
	}
	cJSON *cjson_cylinder =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "cylinder");
	if(cjson_cylinder)
	{
		result_VisionPrescription_LensSpecification->cylinder = cJSON_GetNumberValue(cjson_cylinder);
	}
	cJSON *cjson_axis =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "axis");
	if(cjson_axis)
	{
		result_VisionPrescription_LensSpecification->axis = Deserialize_Integer(arena, cjson_axis);
	}
	cJSON *cjson_prism =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "prism");
	if(cjson_prism)
	{
		result_VisionPrescription_LensSpecification->prism_count = cJSON_GetArraySize(cjson_prism);
		result_VisionPrescription_LensSpecification->prism = PushArray(arena, VisionPrescription_LensSpecification_Prism, result_VisionPrescription_LensSpecification->prism_count);
		for(int i = 0; i < result_VisionPrescription_LensSpecification->prism_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_prism, i);
			result_VisionPrescription_LensSpecification->prism[i] = *Deserialize_VisionPrescription_LensSpecification_Prism(arena, internal);
		}

	}
	cJSON *cjson_add =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "add");
	if(cjson_add)
	{
		result_VisionPrescription_LensSpecification->add = cJSON_GetNumberValue(cjson_add);
	}
	cJSON *cjson_power =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "power");
	if(cjson_power)
	{
		result_VisionPrescription_LensSpecification->power = cJSON_GetNumberValue(cjson_power);
	}
	cJSON *cjson_backCurve =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "backCurve");
	if(cjson_backCurve)
	{
		result_VisionPrescription_LensSpecification->backCurve = cJSON_GetNumberValue(cjson_backCurve);
	}
	cJSON *cjson_diameter =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "diameter");
	if(cjson_diameter)
	{
		result_VisionPrescription_LensSpecification->diameter = cJSON_GetNumberValue(cjson_diameter);
	}
	cJSON *cjson_duration =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "duration");
	if(cjson_duration)
	{
		result_VisionPrescription_LensSpecification->duration = Deserialize_Quantity(arena, cjson_duration);
	}
	cJSON *cjson_color =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "color");
	if(cjson_color)
	{
		result_VisionPrescription_LensSpecification->color = Str8C(cJSON_GetStringValue(cjson_color));
	}
	cJSON *cjson_brand =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "brand");
	if(cjson_brand)
	{
		result_VisionPrescription_LensSpecification->brand = Str8C(cJSON_GetStringValue(cjson_brand));
	}
	cJSON *cjson_note =  cJSON_GetObjectItem(visionPrescription_LensSpecification, "note");
	if(cjson_note)
	{
		result_VisionPrescription_LensSpecification->note_count = cJSON_GetArraySize(cjson_note);
		result_VisionPrescription_LensSpecification->note = PushArray(arena, Annotation, result_VisionPrescription_LensSpecification->note_count);
		for(int i = 0; i < result_VisionPrescription_LensSpecification->note_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_note, i);
			result_VisionPrescription_LensSpecification->note[i] = *Deserialize_Annotation(arena, internal);
		}

	}
	return result_VisionPrescription_LensSpecification;
}

VisionPrescription_LensSpecification_Prism*
Deserialize_VisionPrescription_LensSpecification_Prism(Arena *arena, cJSON *visionPrescription_LensSpecification_Prism)
{
	VisionPrescription_LensSpecification_Prism *result_VisionPrescription_LensSpecification_Prism = PushArray(arena, VisionPrescription_LensSpecification_Prism, 1);
	result_VisionPrescription_LensSpecification_Prism->resourceType = ResourceType::VisionPrescription_LensSpecification_Prism;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(visionPrescription_LensSpecification_Prism, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(visionPrescription_LensSpecification_Prism, "id");
	if(cjson_id)
	{
		result_VisionPrescription_LensSpecification_Prism->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(visionPrescription_LensSpecification_Prism, "extension");
	if(cjson_extension)
	{
		result_VisionPrescription_LensSpecification_Prism->extension_count = cJSON_GetArraySize(cjson_extension);
		result_VisionPrescription_LensSpecification_Prism->extension = PushArray(arena, Extension, result_VisionPrescription_LensSpecification_Prism->extension_count);
		for(int i = 0; i < result_VisionPrescription_LensSpecification_Prism->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_VisionPrescription_LensSpecification_Prism->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(visionPrescription_LensSpecification_Prism, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_VisionPrescription_LensSpecification_Prism->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_VisionPrescription_LensSpecification_Prism->modifierExtension = PushArray(arena, Extension, result_VisionPrescription_LensSpecification_Prism->modifierExtension_count);
		for(int i = 0; i < result_VisionPrescription_LensSpecification_Prism->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_VisionPrescription_LensSpecification_Prism->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_amount =  cJSON_GetObjectItem(visionPrescription_LensSpecification_Prism, "amount");
	if(cjson_amount)
	{
		result_VisionPrescription_LensSpecification_Prism->amount = cJSON_GetNumberValue(cjson_amount);
	}
	cJSON *cjson_base =  cJSON_GetObjectItem(visionPrescription_LensSpecification_Prism, "base");
	if(cjson_base)
	{
		result_VisionPrescription_LensSpecification_Prism->base = Str8C(cJSON_GetStringValue(cjson_base));
	}
	return result_VisionPrescription_LensSpecification_Prism;
}

MetadataResource*
Deserialize_MetadataResource(Arena *arena, cJSON *metadataResource)
{
	MetadataResource *result_MetadataResource = PushArray(arena, MetadataResource, 1);
	result_MetadataResource->resourceType = ResourceType::MetadataResource;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(metadataResource, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(metadataResource, "id");
	if(cjson_id)
	{
		result_MetadataResource->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_meta =  cJSON_GetObjectItem(metadataResource, "meta");
	if(cjson_meta)
	{
		result_MetadataResource->meta = Deserialize_Meta(arena, cjson_meta);
	}
	cJSON *cjson_implicitRules =  cJSON_GetObjectItem(metadataResource, "implicitRules");
	if(cjson_implicitRules)
	{
		result_MetadataResource->implicitRules = Str8C(cJSON_GetStringValue(cjson_implicitRules));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(metadataResource, "language");
	if(cjson_language)
	{
		result_MetadataResource->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(metadataResource, "text");
	if(cjson_text)
	{
		result_MetadataResource->text = Deserialize_Narrative(arena, cjson_text);
	}
	cJSON *cjson_contained =  cJSON_GetObjectItem(metadataResource, "contained");
	if(cjson_contained)
	{
		result_MetadataResource->contained_count = cJSON_GetArraySize(cjson_contained);
		result_MetadataResource->contained = PushArray(arena, Resource, result_MetadataResource->contained_count);
		for(int i = 0; i < result_MetadataResource->contained_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contained, i);
			result_MetadataResource->contained[i] = *Deserialize_Resource(arena, internal);
		}

	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(metadataResource, "extension");
	if(cjson_extension)
	{
		result_MetadataResource->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MetadataResource->extension = PushArray(arena, Extension, result_MetadataResource->extension_count);
		for(int i = 0; i < result_MetadataResource->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MetadataResource->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(metadataResource, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MetadataResource->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MetadataResource->modifierExtension = PushArray(arena, Extension, result_MetadataResource->modifierExtension_count);
		for(int i = 0; i < result_MetadataResource->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MetadataResource->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(metadataResource, "url");
	if(cjson_url)
	{
		result_MetadataResource->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(metadataResource, "version");
	if(cjson_version)
	{
		result_MetadataResource->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(metadataResource, "name");
	if(cjson_name)
	{
		result_MetadataResource->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(metadataResource, "title");
	if(cjson_title)
	{
		result_MetadataResource->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(metadataResource, "status");
	if(cjson_status)
	{
		result_MetadataResource->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_experimental =  cJSON_GetObjectItem(metadataResource, "experimental");
	if(cjson_experimental)
	{
		result_MetadataResource->experimental = (boolean)cJSON_IsTrue(cjson_experimental);
	}
	cJSON *cjson_date =  cJSON_GetObjectItem(metadataResource, "date");
	if(cjson_date)
	{
		result_MetadataResource->date = Str8C(cJSON_GetStringValue(cjson_date));
	}
	cJSON *cjson_publisher =  cJSON_GetObjectItem(metadataResource, "publisher");
	if(cjson_publisher)
	{
		result_MetadataResource->publisher = Str8C(cJSON_GetStringValue(cjson_publisher));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(metadataResource, "contact");
	if(cjson_contact)
	{
		result_MetadataResource->contact_count = cJSON_GetArraySize(cjson_contact);
		result_MetadataResource->contact = PushArray(arena, ContactDetail, result_MetadataResource->contact_count);
		for(int i = 0; i < result_MetadataResource->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_MetadataResource->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(metadataResource, "description");
	if(cjson_description)
	{
		result_MetadataResource->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_useContext =  cJSON_GetObjectItem(metadataResource, "useContext");
	if(cjson_useContext)
	{
		result_MetadataResource->useContext_count = cJSON_GetArraySize(cjson_useContext);
		result_MetadataResource->useContext = PushArray(arena, UsageContext, result_MetadataResource->useContext_count);
		for(int i = 0; i < result_MetadataResource->useContext_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_useContext, i);
			result_MetadataResource->useContext[i] = *Deserialize_UsageContext(arena, internal);
		}

	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(metadataResource, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_MetadataResource->jurisdiction_count = cJSON_GetArraySize(cjson_jurisdiction);
		result_MetadataResource->jurisdiction = PushArray(arena, CodeableConcept, result_MetadataResource->jurisdiction_count);
		for(int i = 0; i < result_MetadataResource->jurisdiction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_jurisdiction, i);
			result_MetadataResource->jurisdiction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_MetadataResource;
}

Element*
Deserialize_Element(Arena *arena, cJSON *element)
{
	Element *result_Element = PushArray(arena, Element, 1);
	result_Element->resourceType = ResourceType::Element;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(element, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(element, "id");
	if(cjson_id)
	{
		result_Element->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(element, "extension");
	if(cjson_extension)
	{
		result_Element->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Element->extension = PushArray(arena, Extension, result_Element->extension_count);
		for(int i = 0; i < result_Element->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Element->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	return result_Element;
}

BackboneElement*
Deserialize_BackboneElement(Arena *arena, cJSON *backboneElement)
{
	BackboneElement *result_BackboneElement = PushArray(arena, BackboneElement, 1);
	result_BackboneElement->resourceType = ResourceType::BackboneElement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(backboneElement, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(backboneElement, "id");
	if(cjson_id)
	{
		result_BackboneElement->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(backboneElement, "extension");
	if(cjson_extension)
	{
		result_BackboneElement->extension_count = cJSON_GetArraySize(cjson_extension);
		result_BackboneElement->extension = PushArray(arena, Extension, result_BackboneElement->extension_count);
		for(int i = 0; i < result_BackboneElement->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_BackboneElement->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(backboneElement, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_BackboneElement->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_BackboneElement->modifierExtension = PushArray(arena, Extension, result_BackboneElement->modifierExtension_count);
		for(int i = 0; i < result_BackboneElement->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_BackboneElement->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	return result_BackboneElement;
}

Integer*
Deserialize_Integer(Arena *arena, cJSON *integer)
{
	Integer *result_Integer = PushArray(arena, Integer, 1);
	result_Integer->resourceType = ResourceType::Integer;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(integer, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(integer, "id");
	if(cjson_id)
	{
		result_Integer->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(integer, "extension");
	if(cjson_extension)
	{
		result_Integer->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Integer->extension = PushArray(arena, Extension, result_Integer->extension_count);
		for(int i = 0; i < result_Integer->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Integer->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(integer, "value");
	if(cjson_value)
	{
		result_Integer->value = (int)cJSON_GetNumberValue(cjson_value);
	}
	return result_Integer;
}

Xhtml*
Deserialize_Xhtml(Arena *arena, cJSON *xhtml)
{
	Xhtml *result_Xhtml = PushArray(arena, Xhtml, 1);
	result_Xhtml->resourceType = ResourceType::Xhtml;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(xhtml, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(xhtml, "id");
	if(cjson_id)
	{
		result_Xhtml->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(xhtml, "value");
	if(cjson_value)
	{
		result_Xhtml->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	return result_Xhtml;
}

Address*
Deserialize_Address(Arena *arena, cJSON *address)
{
	Address *result_Address = PushArray(arena, Address, 1);
	result_Address->resourceType = ResourceType::Address;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(address, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(address, "id");
	if(cjson_id)
	{
		result_Address->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(address, "extension");
	if(cjson_extension)
	{
		result_Address->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Address->extension = PushArray(arena, Extension, result_Address->extension_count);
		for(int i = 0; i < result_Address->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Address->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_use =  cJSON_GetObjectItem(address, "use");
	if(cjson_use)
	{
		result_Address->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(address, "type");
	if(cjson_type)
	{
		result_Address->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(address, "text");
	if(cjson_text)
	{
		result_Address->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_line =  cJSON_GetObjectItem(address, "line");
	if(cjson_line)
	{
		result_Address->line_count = cJSON_GetArraySize(cjson_line);
		result_Address->line = PushArray(arena, fhir_string, result_Address->line_count);
		for(int i = 0; i < result_Address->line_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_line, i);
			result_Address->line[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_city =  cJSON_GetObjectItem(address, "city");
	if(cjson_city)
	{
		result_Address->city = Str8C(cJSON_GetStringValue(cjson_city));
	}
	cJSON *cjson_district =  cJSON_GetObjectItem(address, "district");
	if(cjson_district)
	{
		result_Address->district = Str8C(cJSON_GetStringValue(cjson_district));
	}
	cJSON *cjson_state =  cJSON_GetObjectItem(address, "state");
	if(cjson_state)
	{
		result_Address->state = Str8C(cJSON_GetStringValue(cjson_state));
	}
	cJSON *cjson_postalCode =  cJSON_GetObjectItem(address, "postalCode");
	if(cjson_postalCode)
	{
		result_Address->postalCode = Str8C(cJSON_GetStringValue(cjson_postalCode));
	}
	cJSON *cjson_country =  cJSON_GetObjectItem(address, "country");
	if(cjson_country)
	{
		result_Address->country = Str8C(cJSON_GetStringValue(cjson_country));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(address, "period");
	if(cjson_period)
	{
		result_Address->period = Deserialize_Period(arena, cjson_period);
	}
	return result_Address;
}

Age*
Deserialize_Age(Arena *arena, cJSON *age)
{
	Age *result_Age = PushArray(arena, Age, 1);
	result_Age->resourceType = ResourceType::Age;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(age, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(age, "id");
	if(cjson_id)
	{
		result_Age->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(age, "extension");
	if(cjson_extension)
	{
		result_Age->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Age->extension = PushArray(arena, Extension, result_Age->extension_count);
		for(int i = 0; i < result_Age->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Age->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(age, "value");
	if(cjson_value)
	{
		result_Age->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_comparator =  cJSON_GetObjectItem(age, "comparator");
	if(cjson_comparator)
	{
		result_Age->comparator = Str8C(cJSON_GetStringValue(cjson_comparator));
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(age, "unit");
	if(cjson_unit)
	{
		result_Age->unit = Str8C(cJSON_GetStringValue(cjson_unit));
	}
	cJSON *cjson_system =  cJSON_GetObjectItem(age, "system");
	if(cjson_system)
	{
		result_Age->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(age, "code");
	if(cjson_code)
	{
		result_Age->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	return result_Age;
}

Annotation*
Deserialize_Annotation(Arena *arena, cJSON *annotation)
{
	Annotation *result_Annotation = PushArray(arena, Annotation, 1);
	result_Annotation->resourceType = ResourceType::Annotation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(annotation, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(annotation, "id");
	if(cjson_id)
	{
		result_Annotation->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(annotation, "extension");
	if(cjson_extension)
	{
		result_Annotation->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Annotation->extension = PushArray(arena, Extension, result_Annotation->extension_count);
		for(int i = 0; i < result_Annotation->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Annotation->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(annotation, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(annotation, "valueReference");
		result_Annotation->author.valueReference = Deserialize_Reference(arena, item);
		result_Annotation->author_type = Annotation::AuthorType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(annotation, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(annotation, "valueString");
		result_Annotation->author.valueString = Str8C(cJSON_GetStringValue(item));
		result_Annotation->author_type = Annotation::AuthorType::fhir_string;
	}


	cJSON *cjson_time =  cJSON_GetObjectItem(annotation, "time");
	if(cjson_time)
	{
		result_Annotation->time = Str8C(cJSON_GetStringValue(cjson_time));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(annotation, "text");
	if(cjson_text)
	{
		result_Annotation->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	return result_Annotation;
}

Attachment*
Deserialize_Attachment(Arena *arena, cJSON *attachment)
{
	Attachment *result_Attachment = PushArray(arena, Attachment, 1);
	result_Attachment->resourceType = ResourceType::Attachment;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(attachment, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(attachment, "id");
	if(cjson_id)
	{
		result_Attachment->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(attachment, "extension");
	if(cjson_extension)
	{
		result_Attachment->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Attachment->extension = PushArray(arena, Extension, result_Attachment->extension_count);
		for(int i = 0; i < result_Attachment->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Attachment->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_contentType =  cJSON_GetObjectItem(attachment, "contentType");
	if(cjson_contentType)
	{
		result_Attachment->contentType = Str8C(cJSON_GetStringValue(cjson_contentType));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(attachment, "language");
	if(cjson_language)
	{
		result_Attachment->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_data =  cJSON_GetObjectItem(attachment, "data");
	if(cjson_data)
	{
		result_Attachment->data = Str8C(cJSON_GetStringValue(cjson_data));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(attachment, "url");
	if(cjson_url)
	{
		result_Attachment->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_size =  cJSON_GetObjectItem(attachment, "size");
	if(cjson_size)
	{
		result_Attachment->size = (int)cJSON_GetNumberValue(cjson_size);
	}
	cJSON *cjson_hash =  cJSON_GetObjectItem(attachment, "hash");
	if(cjson_hash)
	{
		result_Attachment->hash = Str8C(cJSON_GetStringValue(cjson_hash));
	}
	cJSON *cjson_title =  cJSON_GetObjectItem(attachment, "title");
	if(cjson_title)
	{
		result_Attachment->title = Str8C(cJSON_GetStringValue(cjson_title));
	}
	cJSON *cjson_creation =  cJSON_GetObjectItem(attachment, "creation");
	if(cjson_creation)
	{
		result_Attachment->creation = Str8C(cJSON_GetStringValue(cjson_creation));
	}
	return result_Attachment;
}

CodeableConcept*
Deserialize_CodeableConcept(Arena *arena, cJSON *codeableConcept)
{
	CodeableConcept *result_CodeableConcept = PushArray(arena, CodeableConcept, 1);
	result_CodeableConcept->resourceType = ResourceType::CodeableConcept;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(codeableConcept, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(codeableConcept, "id");
	if(cjson_id)
	{
		result_CodeableConcept->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(codeableConcept, "extension");
	if(cjson_extension)
	{
		result_CodeableConcept->extension_count = cJSON_GetArraySize(cjson_extension);
		result_CodeableConcept->extension = PushArray(arena, Extension, result_CodeableConcept->extension_count);
		for(int i = 0; i < result_CodeableConcept->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_CodeableConcept->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_coding =  cJSON_GetObjectItem(codeableConcept, "coding");
	if(cjson_coding)
	{
		result_CodeableConcept->coding_count = cJSON_GetArraySize(cjson_coding);
		result_CodeableConcept->coding = PushArray(arena, Coding, result_CodeableConcept->coding_count);
		for(int i = 0; i < result_CodeableConcept->coding_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_coding, i);
			result_CodeableConcept->coding[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_text =  cJSON_GetObjectItem(codeableConcept, "text");
	if(cjson_text)
	{
		result_CodeableConcept->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	return result_CodeableConcept;
}

Coding*
Deserialize_Coding(Arena *arena, cJSON *coding)
{
	Coding *result_Coding = PushArray(arena, Coding, 1);
	result_Coding->resourceType = ResourceType::Coding;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(coding, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(coding, "id");
	if(cjson_id)
	{
		result_Coding->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(coding, "extension");
	if(cjson_extension)
	{
		result_Coding->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Coding->extension = PushArray(arena, Extension, result_Coding->extension_count);
		for(int i = 0; i < result_Coding->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Coding->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_system =  cJSON_GetObjectItem(coding, "system");
	if(cjson_system)
	{
		result_Coding->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_version =  cJSON_GetObjectItem(coding, "version");
	if(cjson_version)
	{
		result_Coding->version = Str8C(cJSON_GetStringValue(cjson_version));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(coding, "code");
	if(cjson_code)
	{
		result_Coding->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(coding, "display");
	if(cjson_display)
	{
		result_Coding->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_userSelected =  cJSON_GetObjectItem(coding, "userSelected");
	if(cjson_userSelected)
	{
		result_Coding->userSelected = (boolean)cJSON_IsTrue(cjson_userSelected);
	}
	return result_Coding;
}

ContactDetail*
Deserialize_ContactDetail(Arena *arena, cJSON *contactDetail)
{
	ContactDetail *result_ContactDetail = PushArray(arena, ContactDetail, 1);
	result_ContactDetail->resourceType = ResourceType::ContactDetail;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contactDetail, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contactDetail, "id");
	if(cjson_id)
	{
		result_ContactDetail->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contactDetail, "extension");
	if(cjson_extension)
	{
		result_ContactDetail->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ContactDetail->extension = PushArray(arena, Extension, result_ContactDetail->extension_count);
		for(int i = 0; i < result_ContactDetail->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ContactDetail->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(contactDetail, "name");
	if(cjson_name)
	{
		result_ContactDetail->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_telecom =  cJSON_GetObjectItem(contactDetail, "telecom");
	if(cjson_telecom)
	{
		result_ContactDetail->telecom_count = cJSON_GetArraySize(cjson_telecom);
		result_ContactDetail->telecom = PushArray(arena, ContactPoint, result_ContactDetail->telecom_count);
		for(int i = 0; i < result_ContactDetail->telecom_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_telecom, i);
			result_ContactDetail->telecom[i] = *Deserialize_ContactPoint(arena, internal);
		}

	}
	return result_ContactDetail;
}

ContactPoint*
Deserialize_ContactPoint(Arena *arena, cJSON *contactPoint)
{
	ContactPoint *result_ContactPoint = PushArray(arena, ContactPoint, 1);
	result_ContactPoint->resourceType = ResourceType::ContactPoint;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contactPoint, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contactPoint, "id");
	if(cjson_id)
	{
		result_ContactPoint->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contactPoint, "extension");
	if(cjson_extension)
	{
		result_ContactPoint->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ContactPoint->extension = PushArray(arena, Extension, result_ContactPoint->extension_count);
		for(int i = 0; i < result_ContactPoint->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ContactPoint->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_system =  cJSON_GetObjectItem(contactPoint, "system");
	if(cjson_system)
	{
		result_ContactPoint->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(contactPoint, "value");
	if(cjson_value)
	{
		result_ContactPoint->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(contactPoint, "use");
	if(cjson_use)
	{
		result_ContactPoint->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_rank =  cJSON_GetObjectItem(contactPoint, "rank");
	if(cjson_rank)
	{
		result_ContactPoint->rank = (int)cJSON_GetNumberValue(cjson_rank);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(contactPoint, "period");
	if(cjson_period)
	{
		result_ContactPoint->period = Deserialize_Period(arena, cjson_period);
	}
	return result_ContactPoint;
}

Contributor*
Deserialize_Contributor(Arena *arena, cJSON *contributor)
{
	Contributor *result_Contributor = PushArray(arena, Contributor, 1);
	result_Contributor->resourceType = ResourceType::Contributor;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(contributor, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(contributor, "id");
	if(cjson_id)
	{
		result_Contributor->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(contributor, "extension");
	if(cjson_extension)
	{
		result_Contributor->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Contributor->extension = PushArray(arena, Extension, result_Contributor->extension_count);
		for(int i = 0; i < result_Contributor->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Contributor->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(contributor, "type");
	if(cjson_type)
	{
		result_Contributor->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(contributor, "name");
	if(cjson_name)
	{
		result_Contributor->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_contact =  cJSON_GetObjectItem(contributor, "contact");
	if(cjson_contact)
	{
		result_Contributor->contact_count = cJSON_GetArraySize(cjson_contact);
		result_Contributor->contact = PushArray(arena, ContactDetail, result_Contributor->contact_count);
		for(int i = 0; i < result_Contributor->contact_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_contact, i);
			result_Contributor->contact[i] = *Deserialize_ContactDetail(arena, internal);
		}

	}
	return result_Contributor;
}

Count*
Deserialize_Count(Arena *arena, cJSON *count)
{
	Count *result_Count = PushArray(arena, Count, 1);
	result_Count->resourceType = ResourceType::Count;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(count, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(count, "id");
	if(cjson_id)
	{
		result_Count->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(count, "extension");
	if(cjson_extension)
	{
		result_Count->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Count->extension = PushArray(arena, Extension, result_Count->extension_count);
		for(int i = 0; i < result_Count->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Count->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(count, "value");
	if(cjson_value)
	{
		result_Count->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_comparator =  cJSON_GetObjectItem(count, "comparator");
	if(cjson_comparator)
	{
		result_Count->comparator = Str8C(cJSON_GetStringValue(cjson_comparator));
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(count, "unit");
	if(cjson_unit)
	{
		result_Count->unit = Str8C(cJSON_GetStringValue(cjson_unit));
	}
	cJSON *cjson_system =  cJSON_GetObjectItem(count, "system");
	if(cjson_system)
	{
		result_Count->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(count, "code");
	if(cjson_code)
	{
		result_Count->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	return result_Count;
}

DataRequirement*
Deserialize_DataRequirement(Arena *arena, cJSON *dataRequirement)
{
	DataRequirement *result_DataRequirement = PushArray(arena, DataRequirement, 1);
	result_DataRequirement->resourceType = ResourceType::DataRequirement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(dataRequirement, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(dataRequirement, "id");
	if(cjson_id)
	{
		result_DataRequirement->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(dataRequirement, "extension");
	if(cjson_extension)
	{
		result_DataRequirement->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DataRequirement->extension = PushArray(arena, Extension, result_DataRequirement->extension_count);
		for(int i = 0; i < result_DataRequirement->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DataRequirement->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(dataRequirement, "type");
	if(cjson_type)
	{
		result_DataRequirement->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(dataRequirement, "profile");
	if(cjson_profile)
	{
		result_DataRequirement->profile_count = cJSON_GetArraySize(cjson_profile);
		result_DataRequirement->profile = PushArray(arena, fhir_canonical, result_DataRequirement->profile_count);
		for(int i = 0; i < result_DataRequirement->profile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_profile, i);
			result_DataRequirement->profile[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	if((bool)cJSON_HasObjectItem(dataRequirement, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(dataRequirement, "valueCodeableConcept");
		result_DataRequirement->subject.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_DataRequirement->subject_type = DataRequirement::SubjectType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(dataRequirement, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(dataRequirement, "valueReference");
		result_DataRequirement->subject.valueReference = Deserialize_Reference(arena, item);
		result_DataRequirement->subject_type = DataRequirement::SubjectType::Reference;
	}


	cJSON *cjson_mustSupport =  cJSON_GetObjectItem(dataRequirement, "mustSupport");
	if(cjson_mustSupport)
	{
		result_DataRequirement->mustSupport_count = cJSON_GetArraySize(cjson_mustSupport);
		result_DataRequirement->mustSupport = PushArray(arena, fhir_string, result_DataRequirement->mustSupport_count);
		for(int i = 0; i < result_DataRequirement->mustSupport_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_mustSupport, i);
			result_DataRequirement->mustSupport[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_codeFilter =  cJSON_GetObjectItem(dataRequirement, "codeFilter");
	if(cjson_codeFilter)
	{
		result_DataRequirement->codeFilter_count = cJSON_GetArraySize(cjson_codeFilter);
		result_DataRequirement->codeFilter = PushArray(arena, DataRequirement_CodeFilter, result_DataRequirement->codeFilter_count);
		for(int i = 0; i < result_DataRequirement->codeFilter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_codeFilter, i);
			result_DataRequirement->codeFilter[i] = *Deserialize_DataRequirement_CodeFilter(arena, internal);
		}

	}
	cJSON *cjson_dateFilter =  cJSON_GetObjectItem(dataRequirement, "dateFilter");
	if(cjson_dateFilter)
	{
		result_DataRequirement->dateFilter_count = cJSON_GetArraySize(cjson_dateFilter);
		result_DataRequirement->dateFilter = PushArray(arena, DataRequirement_DateFilter, result_DataRequirement->dateFilter_count);
		for(int i = 0; i < result_DataRequirement->dateFilter_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dateFilter, i);
			result_DataRequirement->dateFilter[i] = *Deserialize_DataRequirement_DateFilter(arena, internal);
		}

	}
	cJSON *cjson_limit =  cJSON_GetObjectItem(dataRequirement, "limit");
	if(cjson_limit)
	{
		result_DataRequirement->limit = (int)cJSON_GetNumberValue(cjson_limit);
	}
	cJSON *cjson_sort =  cJSON_GetObjectItem(dataRequirement, "sort");
	if(cjson_sort)
	{
		result_DataRequirement->sort_count = cJSON_GetArraySize(cjson_sort);
		result_DataRequirement->sort = PushArray(arena, DataRequirement_Sort, result_DataRequirement->sort_count);
		for(int i = 0; i < result_DataRequirement->sort_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_sort, i);
			result_DataRequirement->sort[i] = *Deserialize_DataRequirement_Sort(arena, internal);
		}

	}
	return result_DataRequirement;
}

DataRequirement_CodeFilter*
Deserialize_DataRequirement_CodeFilter(Arena *arena, cJSON *dataRequirement_CodeFilter)
{
	DataRequirement_CodeFilter *result_DataRequirement_CodeFilter = PushArray(arena, DataRequirement_CodeFilter, 1);
	result_DataRequirement_CodeFilter->resourceType = ResourceType::DataRequirement_CodeFilter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(dataRequirement_CodeFilter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(dataRequirement_CodeFilter, "id");
	if(cjson_id)
	{
		result_DataRequirement_CodeFilter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(dataRequirement_CodeFilter, "extension");
	if(cjson_extension)
	{
		result_DataRequirement_CodeFilter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DataRequirement_CodeFilter->extension = PushArray(arena, Extension, result_DataRequirement_CodeFilter->extension_count);
		for(int i = 0; i < result_DataRequirement_CodeFilter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DataRequirement_CodeFilter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(dataRequirement_CodeFilter, "path");
	if(cjson_path)
	{
		result_DataRequirement_CodeFilter->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_searchParam =  cJSON_GetObjectItem(dataRequirement_CodeFilter, "searchParam");
	if(cjson_searchParam)
	{
		result_DataRequirement_CodeFilter->searchParam = Str8C(cJSON_GetStringValue(cjson_searchParam));
	}
	cJSON *cjson_valueSet =  cJSON_GetObjectItem(dataRequirement_CodeFilter, "valueSet");
	if(cjson_valueSet)
	{
		result_DataRequirement_CodeFilter->valueSet = Str8C(cJSON_GetStringValue(cjson_valueSet));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(dataRequirement_CodeFilter, "code");
	if(cjson_code)
	{
		result_DataRequirement_CodeFilter->code_count = cJSON_GetArraySize(cjson_code);
		result_DataRequirement_CodeFilter->code = PushArray(arena, Coding, result_DataRequirement_CodeFilter->code_count);
		for(int i = 0; i < result_DataRequirement_CodeFilter->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_DataRequirement_CodeFilter->code[i] = *Deserialize_Coding(arena, internal);
		}

	}
	return result_DataRequirement_CodeFilter;
}

DataRequirement_DateFilter*
Deserialize_DataRequirement_DateFilter(Arena *arena, cJSON *dataRequirement_DateFilter)
{
	DataRequirement_DateFilter *result_DataRequirement_DateFilter = PushArray(arena, DataRequirement_DateFilter, 1);
	result_DataRequirement_DateFilter->resourceType = ResourceType::DataRequirement_DateFilter;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(dataRequirement_DateFilter, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(dataRequirement_DateFilter, "id");
	if(cjson_id)
	{
		result_DataRequirement_DateFilter->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(dataRequirement_DateFilter, "extension");
	if(cjson_extension)
	{
		result_DataRequirement_DateFilter->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DataRequirement_DateFilter->extension = PushArray(arena, Extension, result_DataRequirement_DateFilter->extension_count);
		for(int i = 0; i < result_DataRequirement_DateFilter->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DataRequirement_DateFilter->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(dataRequirement_DateFilter, "path");
	if(cjson_path)
	{
		result_DataRequirement_DateFilter->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_searchParam =  cJSON_GetObjectItem(dataRequirement_DateFilter, "searchParam");
	if(cjson_searchParam)
	{
		result_DataRequirement_DateFilter->searchParam = Str8C(cJSON_GetStringValue(cjson_searchParam));
	}
	if((bool)cJSON_HasObjectItem(dataRequirement_DateFilter, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(dataRequirement_DateFilter, "valueDateTime");
		result_DataRequirement_DateFilter->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_DataRequirement_DateFilter->value_type = DataRequirement_DateFilter::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(dataRequirement_DateFilter, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(dataRequirement_DateFilter, "valuePeriod");
		result_DataRequirement_DateFilter->value.valuePeriod = Deserialize_Period(arena, item);
		result_DataRequirement_DateFilter->value_type = DataRequirement_DateFilter::ValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(dataRequirement_DateFilter, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(dataRequirement_DateFilter, "valueDuration");
		result_DataRequirement_DateFilter->value.valueDuration = Deserialize_Duration(arena, item);
		result_DataRequirement_DateFilter->value_type = DataRequirement_DateFilter::ValueType::Duration;
	}


	return result_DataRequirement_DateFilter;
}

DataRequirement_Sort*
Deserialize_DataRequirement_Sort(Arena *arena, cJSON *dataRequirement_Sort)
{
	DataRequirement_Sort *result_DataRequirement_Sort = PushArray(arena, DataRequirement_Sort, 1);
	result_DataRequirement_Sort->resourceType = ResourceType::DataRequirement_Sort;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(dataRequirement_Sort, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(dataRequirement_Sort, "id");
	if(cjson_id)
	{
		result_DataRequirement_Sort->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(dataRequirement_Sort, "extension");
	if(cjson_extension)
	{
		result_DataRequirement_Sort->extension_count = cJSON_GetArraySize(cjson_extension);
		result_DataRequirement_Sort->extension = PushArray(arena, Extension, result_DataRequirement_Sort->extension_count);
		for(int i = 0; i < result_DataRequirement_Sort->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_DataRequirement_Sort->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(dataRequirement_Sort, "path");
	if(cjson_path)
	{
		result_DataRequirement_Sort->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_direction =  cJSON_GetObjectItem(dataRequirement_Sort, "direction");
	if(cjson_direction)
	{
		result_DataRequirement_Sort->direction = Str8C(cJSON_GetStringValue(cjson_direction));
	}
	return result_DataRequirement_Sort;
}

Distance*
Deserialize_Distance(Arena *arena, cJSON *distance)
{
	Distance *result_Distance = PushArray(arena, Distance, 1);
	result_Distance->resourceType = ResourceType::Distance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(distance, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(distance, "id");
	if(cjson_id)
	{
		result_Distance->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(distance, "extension");
	if(cjson_extension)
	{
		result_Distance->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Distance->extension = PushArray(arena, Extension, result_Distance->extension_count);
		for(int i = 0; i < result_Distance->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Distance->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(distance, "value");
	if(cjson_value)
	{
		result_Distance->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_comparator =  cJSON_GetObjectItem(distance, "comparator");
	if(cjson_comparator)
	{
		result_Distance->comparator = Str8C(cJSON_GetStringValue(cjson_comparator));
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(distance, "unit");
	if(cjson_unit)
	{
		result_Distance->unit = Str8C(cJSON_GetStringValue(cjson_unit));
	}
	cJSON *cjson_system =  cJSON_GetObjectItem(distance, "system");
	if(cjson_system)
	{
		result_Distance->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(distance, "code");
	if(cjson_code)
	{
		result_Distance->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	return result_Distance;
}

Dosage*
Deserialize_Dosage(Arena *arena, cJSON *dosage)
{
	Dosage *result_Dosage = PushArray(arena, Dosage, 1);
	result_Dosage->resourceType = ResourceType::Dosage;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(dosage, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(dosage, "id");
	if(cjson_id)
	{
		result_Dosage->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(dosage, "extension");
	if(cjson_extension)
	{
		result_Dosage->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Dosage->extension = PushArray(arena, Extension, result_Dosage->extension_count);
		for(int i = 0; i < result_Dosage->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Dosage->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(dosage, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Dosage->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Dosage->modifierExtension = PushArray(arena, Extension, result_Dosage->modifierExtension_count);
		for(int i = 0; i < result_Dosage->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Dosage->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_sequence =  cJSON_GetObjectItem(dosage, "sequence");
	if(cjson_sequence)
	{
		result_Dosage->sequence = Deserialize_Integer(arena, cjson_sequence);
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(dosage, "text");
	if(cjson_text)
	{
		result_Dosage->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_additionalInstruction =  cJSON_GetObjectItem(dosage, "additionalInstruction");
	if(cjson_additionalInstruction)
	{
		result_Dosage->additionalInstruction_count = cJSON_GetArraySize(cjson_additionalInstruction);
		result_Dosage->additionalInstruction = PushArray(arena, CodeableConcept, result_Dosage->additionalInstruction_count);
		for(int i = 0; i < result_Dosage->additionalInstruction_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_additionalInstruction, i);
			result_Dosage->additionalInstruction[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	cJSON *cjson_patientInstruction =  cJSON_GetObjectItem(dosage, "patientInstruction");
	if(cjson_patientInstruction)
	{
		result_Dosage->patientInstruction = Str8C(cJSON_GetStringValue(cjson_patientInstruction));
	}
	cJSON *cjson_timing =  cJSON_GetObjectItem(dosage, "timing");
	if(cjson_timing)
	{
		result_Dosage->timing = Deserialize_Timing(arena, cjson_timing);
	}
	if((bool)cJSON_HasObjectItem(dosage, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(dosage, "valueBoolean");
		result_Dosage->asNeeded.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Dosage->asNeeded_type = Dosage::AsNeededType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(dosage, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(dosage, "valueCodeableConcept");
		result_Dosage->asNeeded.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Dosage->asNeeded_type = Dosage::AsNeededType::CodeableConcept;
	}


	cJSON *cjson_site =  cJSON_GetObjectItem(dosage, "site");
	if(cjson_site)
	{
		result_Dosage->site = Deserialize_CodeableConcept(arena, cjson_site);
	}
	cJSON *cjson_route =  cJSON_GetObjectItem(dosage, "route");
	if(cjson_route)
	{
		result_Dosage->route = Deserialize_CodeableConcept(arena, cjson_route);
	}
	cJSON *cjson_method =  cJSON_GetObjectItem(dosage, "method");
	if(cjson_method)
	{
		result_Dosage->method = Deserialize_CodeableConcept(arena, cjson_method);
	}
	cJSON *cjson_doseAndRate =  cJSON_GetObjectItem(dosage, "doseAndRate");
	if(cjson_doseAndRate)
	{
		result_Dosage->doseAndRate_count = cJSON_GetArraySize(cjson_doseAndRate);
		result_Dosage->doseAndRate = PushArray(arena, Dosage_DoseAndRate, result_Dosage->doseAndRate_count);
		for(int i = 0; i < result_Dosage->doseAndRate_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_doseAndRate, i);
			result_Dosage->doseAndRate[i] = *Deserialize_Dosage_DoseAndRate(arena, internal);
		}

	}
	cJSON *cjson_maxDosePerPeriod =  cJSON_GetObjectItem(dosage, "maxDosePerPeriod");
	if(cjson_maxDosePerPeriod)
	{
		result_Dosage->maxDosePerPeriod = Deserialize_Ratio(arena, cjson_maxDosePerPeriod);
	}
	cJSON *cjson_maxDosePerAdministration =  cJSON_GetObjectItem(dosage, "maxDosePerAdministration");
	if(cjson_maxDosePerAdministration)
	{
		result_Dosage->maxDosePerAdministration = Deserialize_Quantity(arena, cjson_maxDosePerAdministration);
	}
	cJSON *cjson_maxDosePerLifetime =  cJSON_GetObjectItem(dosage, "maxDosePerLifetime");
	if(cjson_maxDosePerLifetime)
	{
		result_Dosage->maxDosePerLifetime = Deserialize_Quantity(arena, cjson_maxDosePerLifetime);
	}
	return result_Dosage;
}

Dosage_DoseAndRate*
Deserialize_Dosage_DoseAndRate(Arena *arena, cJSON *dosage_DoseAndRate)
{
	Dosage_DoseAndRate *result_Dosage_DoseAndRate = PushArray(arena, Dosage_DoseAndRate, 1);
	result_Dosage_DoseAndRate->resourceType = ResourceType::Dosage_DoseAndRate;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(dosage_DoseAndRate, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(dosage_DoseAndRate, "id");
	if(cjson_id)
	{
		result_Dosage_DoseAndRate->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(dosage_DoseAndRate, "extension");
	if(cjson_extension)
	{
		result_Dosage_DoseAndRate->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Dosage_DoseAndRate->extension = PushArray(arena, Extension, result_Dosage_DoseAndRate->extension_count);
		for(int i = 0; i < result_Dosage_DoseAndRate->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Dosage_DoseAndRate->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(dosage_DoseAndRate, "type");
	if(cjson_type)
	{
		result_Dosage_DoseAndRate->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	if((bool)cJSON_HasObjectItem(dosage_DoseAndRate, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(dosage_DoseAndRate, "valueRange");
		result_Dosage_DoseAndRate->dose.valueRange = Deserialize_Range(arena, item);
		result_Dosage_DoseAndRate->dose_type = Dosage_DoseAndRate::DoseType::Range;
	}
	else if((bool)cJSON_HasObjectItem(dosage_DoseAndRate, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(dosage_DoseAndRate, "valueQuantity");
		result_Dosage_DoseAndRate->dose.valueQuantity = Deserialize_Quantity(arena, item);
		result_Dosage_DoseAndRate->dose_type = Dosage_DoseAndRate::DoseType::Quantity;
	}


	if((bool)cJSON_HasObjectItem(dosage_DoseAndRate, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(dosage_DoseAndRate, "valueRatio");
		result_Dosage_DoseAndRate->rate.valueRatio = Deserialize_Ratio(arena, item);
		result_Dosage_DoseAndRate->rate_type = Dosage_DoseAndRate::RateType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(dosage_DoseAndRate, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(dosage_DoseAndRate, "valueRange");
		result_Dosage_DoseAndRate->rate.valueRange = Deserialize_Range(arena, item);
		result_Dosage_DoseAndRate->rate_type = Dosage_DoseAndRate::RateType::Range;
	}
	else if((bool)cJSON_HasObjectItem(dosage_DoseAndRate, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(dosage_DoseAndRate, "valueQuantity");
		result_Dosage_DoseAndRate->rate.valueQuantity = Deserialize_Quantity(arena, item);
		result_Dosage_DoseAndRate->rate_type = Dosage_DoseAndRate::RateType::Quantity;
	}


	return result_Dosage_DoseAndRate;
}

Duration*
Deserialize_Duration(Arena *arena, cJSON *duration)
{
	Duration *result_Duration = PushArray(arena, Duration, 1);
	result_Duration->resourceType = ResourceType::Duration;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(duration, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(duration, "id");
	if(cjson_id)
	{
		result_Duration->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(duration, "extension");
	if(cjson_extension)
	{
		result_Duration->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Duration->extension = PushArray(arena, Extension, result_Duration->extension_count);
		for(int i = 0; i < result_Duration->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Duration->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(duration, "value");
	if(cjson_value)
	{
		result_Duration->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_comparator =  cJSON_GetObjectItem(duration, "comparator");
	if(cjson_comparator)
	{
		result_Duration->comparator = Str8C(cJSON_GetStringValue(cjson_comparator));
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(duration, "unit");
	if(cjson_unit)
	{
		result_Duration->unit = Str8C(cJSON_GetStringValue(cjson_unit));
	}
	cJSON *cjson_system =  cJSON_GetObjectItem(duration, "system");
	if(cjson_system)
	{
		result_Duration->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(duration, "code");
	if(cjson_code)
	{
		result_Duration->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	return result_Duration;
}

ElementDefinition*
Deserialize_ElementDefinition(Arena *arena, cJSON *elementDefinition)
{
	ElementDefinition *result_ElementDefinition = PushArray(arena, ElementDefinition, 1);
	result_ElementDefinition->resourceType = ResourceType::ElementDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition, "id");
	if(cjson_id)
	{
		result_ElementDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition->extension = PushArray(arena, Extension, result_ElementDefinition->extension_count);
		for(int i = 0; i < result_ElementDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(elementDefinition, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ElementDefinition->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ElementDefinition->modifierExtension = PushArray(arena, Extension, result_ElementDefinition->modifierExtension_count);
		for(int i = 0; i < result_ElementDefinition->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ElementDefinition->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(elementDefinition, "path");
	if(cjson_path)
	{
		result_ElementDefinition->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_representation =  cJSON_GetObjectItem(elementDefinition, "representation");
	if(cjson_representation)
	{
		result_ElementDefinition->representation_count = cJSON_GetArraySize(cjson_representation);
		result_ElementDefinition->representation = PushArray(arena, fhir_code, result_ElementDefinition->representation_count);
		for(int i = 0; i < result_ElementDefinition->representation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_representation, i);
			result_ElementDefinition->representation[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_sliceName =  cJSON_GetObjectItem(elementDefinition, "sliceName");
	if(cjson_sliceName)
	{
		result_ElementDefinition->sliceName = Str8C(cJSON_GetStringValue(cjson_sliceName));
	}
	cJSON *cjson_sliceIsConstraining =  cJSON_GetObjectItem(elementDefinition, "sliceIsConstraining");
	if(cjson_sliceIsConstraining)
	{
		result_ElementDefinition->sliceIsConstraining = (boolean)cJSON_IsTrue(cjson_sliceIsConstraining);
	}
	cJSON *cjson_label =  cJSON_GetObjectItem(elementDefinition, "label");
	if(cjson_label)
	{
		result_ElementDefinition->label = Str8C(cJSON_GetStringValue(cjson_label));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(elementDefinition, "code");
	if(cjson_code)
	{
		result_ElementDefinition->code_count = cJSON_GetArraySize(cjson_code);
		result_ElementDefinition->code = PushArray(arena, Coding, result_ElementDefinition->code_count);
		for(int i = 0; i < result_ElementDefinition->code_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_code, i);
			result_ElementDefinition->code[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_slicing =  cJSON_GetObjectItem(elementDefinition, "slicing");
	if(cjson_slicing)
	{
		result_ElementDefinition->slicing = Deserialize_ElementDefinition_Slicing(arena, cjson_slicing);
	}
	cJSON *cjson_short_ =  cJSON_GetObjectItem(elementDefinition, "short_");
	if(cjson_short_)
	{
		result_ElementDefinition->short_ = Str8C(cJSON_GetStringValue(cjson_short_));
	}
	cJSON *cjson_definition =  cJSON_GetObjectItem(elementDefinition, "definition");
	if(cjson_definition)
	{
		result_ElementDefinition->definition = Str8C(cJSON_GetStringValue(cjson_definition));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(elementDefinition, "comment");
	if(cjson_comment)
	{
		result_ElementDefinition->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	cJSON *cjson_requirements =  cJSON_GetObjectItem(elementDefinition, "requirements");
	if(cjson_requirements)
	{
		result_ElementDefinition->requirements = Str8C(cJSON_GetStringValue(cjson_requirements));
	}
	cJSON *cjson_alias =  cJSON_GetObjectItem(elementDefinition, "alias");
	if(cjson_alias)
	{
		result_ElementDefinition->alias_count = cJSON_GetArraySize(cjson_alias);
		result_ElementDefinition->alias = PushArray(arena, fhir_string, result_ElementDefinition->alias_count);
		for(int i = 0; i < result_ElementDefinition->alias_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_alias, i);
			result_ElementDefinition->alias[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_min =  cJSON_GetObjectItem(elementDefinition, "min");
	if(cjson_min)
	{
		result_ElementDefinition->min = (int)cJSON_GetNumberValue(cjson_min);
	}
	cJSON *cjson_max =  cJSON_GetObjectItem(elementDefinition, "max");
	if(cjson_max)
	{
		result_ElementDefinition->max = Str8C(cJSON_GetStringValue(cjson_max));
	}
	cJSON *cjson_base =  cJSON_GetObjectItem(elementDefinition, "base");
	if(cjson_base)
	{
		result_ElementDefinition->base = Deserialize_ElementDefinition_Base(arena, cjson_base);
	}
	cJSON *cjson_contentReference =  cJSON_GetObjectItem(elementDefinition, "contentReference");
	if(cjson_contentReference)
	{
		result_ElementDefinition->contentReference = Str8C(cJSON_GetStringValue(cjson_contentReference));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(elementDefinition, "type");
	if(cjson_type)
	{
		result_ElementDefinition->type_count = cJSON_GetArraySize(cjson_type);
		result_ElementDefinition->type = PushArray(arena, ElementDefinition_Type, result_ElementDefinition->type_count);
		for(int i = 0; i < result_ElementDefinition->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_ElementDefinition->type[i] = *Deserialize_ElementDefinition_Type(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(elementDefinition, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueBase64Binary");
		result_ElementDefinition->defaultValue.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueBoolean");
		result_ElementDefinition->defaultValue.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCanonical");
		result_ElementDefinition->defaultValue.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCode");
		result_ElementDefinition->defaultValue.valueCode = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDate");
		result_ElementDefinition->defaultValue.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDateTime");
		result_ElementDefinition->defaultValue.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDecimal");
		result_ElementDefinition->defaultValue.valueDecimal = cJSON_GetNumberValue(item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueId");
		result_ElementDefinition->defaultValue.valueId = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInstant");
		result_ElementDefinition->defaultValue.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInteger");
		result_ElementDefinition->defaultValue.valueInteger = Deserialize_Integer(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMarkdown");
		result_ElementDefinition->defaultValue.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueOid");
		result_ElementDefinition->defaultValue.valueOid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePositiveInt");
		result_ElementDefinition->defaultValue.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueString");
		result_ElementDefinition->defaultValue.valueString = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTime");
		result_ElementDefinition->defaultValue.valueTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUnsignedInt");
		result_ElementDefinition->defaultValue.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUri");
		result_ElementDefinition->defaultValue.valueUri = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUrl");
		result_ElementDefinition->defaultValue.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUuid");
		result_ElementDefinition->defaultValue.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAddress");
		result_ElementDefinition->defaultValue.valueAddress = Deserialize_Address(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Address;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAge");
		result_ElementDefinition->defaultValue.valueAge = Deserialize_Age(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Age;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAnnotation");
		result_ElementDefinition->defaultValue.valueAnnotation = Deserialize_Annotation(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAttachment");
		result_ElementDefinition->defaultValue.valueAttachment = Deserialize_Attachment(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCodeableConcept");
		result_ElementDefinition->defaultValue.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCoding");
		result_ElementDefinition->defaultValue.valueCoding = Deserialize_Coding(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContactPoint");
		result_ElementDefinition->defaultValue.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCount");
		result_ElementDefinition->defaultValue.valueCount = Deserialize_Count(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Count;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDistance");
		result_ElementDefinition->defaultValue.valueDistance = Deserialize_Distance(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDuration");
		result_ElementDefinition->defaultValue.valueDuration = Deserialize_Duration(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueHumanName");
		result_ElementDefinition->defaultValue.valueHumanName = Deserialize_HumanName(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueIdentifier");
		result_ElementDefinition->defaultValue.valueIdentifier = Deserialize_Identifier(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMoney");
		result_ElementDefinition->defaultValue.valueMoney = Deserialize_Money(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Money;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePeriod");
		result_ElementDefinition->defaultValue.valuePeriod = Deserialize_Period(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueQuantity");
		result_ElementDefinition->defaultValue.valueQuantity = Deserialize_Quantity(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRange");
		result_ElementDefinition->defaultValue.valueRange = Deserialize_Range(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRatio");
		result_ElementDefinition->defaultValue.valueRatio = Deserialize_Ratio(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueReference");
		result_ElementDefinition->defaultValue.valueReference = Deserialize_Reference(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueSampledData");
		result_ElementDefinition->defaultValue.valueSampledData = Deserialize_SampledData(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueSignature");
		result_ElementDefinition->defaultValue.valueSignature = Deserialize_Signature(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTiming");
		result_ElementDefinition->defaultValue.valueTiming = Deserialize_Timing(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContactDetail");
		result_ElementDefinition->defaultValue.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContributor");
		result_ElementDefinition->defaultValue.valueContributor = Deserialize_Contributor(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDataRequirement");
		result_ElementDefinition->defaultValue.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueExpression");
		result_ElementDefinition->defaultValue.valueExpression = Deserialize_Expression(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueParameterDefinition");
		result_ElementDefinition->defaultValue.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRelatedArtifact");
		result_ElementDefinition->defaultValue.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTriggerDefinition");
		result_ElementDefinition->defaultValue.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUsageContext");
		result_ElementDefinition->defaultValue.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDosage");
		result_ElementDefinition->defaultValue.valueDosage = Deserialize_Dosage(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMeta");
		result_ElementDefinition->defaultValue.valueMeta = Deserialize_Meta(arena, item);
		result_ElementDefinition->defaultValue_type = ElementDefinition::DefaultValueType::Meta;
	}


	cJSON *cjson_meaningWhenMissing =  cJSON_GetObjectItem(elementDefinition, "meaningWhenMissing");
	if(cjson_meaningWhenMissing)
	{
		result_ElementDefinition->meaningWhenMissing = Str8C(cJSON_GetStringValue(cjson_meaningWhenMissing));
	}
	cJSON *cjson_orderMeaning =  cJSON_GetObjectItem(elementDefinition, "orderMeaning");
	if(cjson_orderMeaning)
	{
		result_ElementDefinition->orderMeaning = Str8C(cJSON_GetStringValue(cjson_orderMeaning));
	}
	if((bool)cJSON_HasObjectItem(elementDefinition, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueBase64Binary");
		result_ElementDefinition->fixed.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueBoolean");
		result_ElementDefinition->fixed.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCanonical");
		result_ElementDefinition->fixed.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCode");
		result_ElementDefinition->fixed.valueCode = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDate");
		result_ElementDefinition->fixed.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDateTime");
		result_ElementDefinition->fixed.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDecimal");
		result_ElementDefinition->fixed.valueDecimal = cJSON_GetNumberValue(item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueId");
		result_ElementDefinition->fixed.valueId = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInstant");
		result_ElementDefinition->fixed.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInteger");
		result_ElementDefinition->fixed.valueInteger = Deserialize_Integer(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMarkdown");
		result_ElementDefinition->fixed.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueOid");
		result_ElementDefinition->fixed.valueOid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePositiveInt");
		result_ElementDefinition->fixed.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueString");
		result_ElementDefinition->fixed.valueString = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTime");
		result_ElementDefinition->fixed.valueTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUnsignedInt");
		result_ElementDefinition->fixed.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUri");
		result_ElementDefinition->fixed.valueUri = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUrl");
		result_ElementDefinition->fixed.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUuid");
		result_ElementDefinition->fixed.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAddress");
		result_ElementDefinition->fixed.valueAddress = Deserialize_Address(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Address;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAge");
		result_ElementDefinition->fixed.valueAge = Deserialize_Age(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Age;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAnnotation");
		result_ElementDefinition->fixed.valueAnnotation = Deserialize_Annotation(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAttachment");
		result_ElementDefinition->fixed.valueAttachment = Deserialize_Attachment(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCodeableConcept");
		result_ElementDefinition->fixed.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCoding");
		result_ElementDefinition->fixed.valueCoding = Deserialize_Coding(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContactPoint");
		result_ElementDefinition->fixed.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCount");
		result_ElementDefinition->fixed.valueCount = Deserialize_Count(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Count;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDistance");
		result_ElementDefinition->fixed.valueDistance = Deserialize_Distance(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDuration");
		result_ElementDefinition->fixed.valueDuration = Deserialize_Duration(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueHumanName");
		result_ElementDefinition->fixed.valueHumanName = Deserialize_HumanName(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueIdentifier");
		result_ElementDefinition->fixed.valueIdentifier = Deserialize_Identifier(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMoney");
		result_ElementDefinition->fixed.valueMoney = Deserialize_Money(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Money;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePeriod");
		result_ElementDefinition->fixed.valuePeriod = Deserialize_Period(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Period;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueQuantity");
		result_ElementDefinition->fixed.valueQuantity = Deserialize_Quantity(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRange");
		result_ElementDefinition->fixed.valueRange = Deserialize_Range(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Range;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRatio");
		result_ElementDefinition->fixed.valueRatio = Deserialize_Ratio(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueReference");
		result_ElementDefinition->fixed.valueReference = Deserialize_Reference(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueSampledData");
		result_ElementDefinition->fixed.valueSampledData = Deserialize_SampledData(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueSignature");
		result_ElementDefinition->fixed.valueSignature = Deserialize_Signature(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTiming");
		result_ElementDefinition->fixed.valueTiming = Deserialize_Timing(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContactDetail");
		result_ElementDefinition->fixed.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContributor");
		result_ElementDefinition->fixed.valueContributor = Deserialize_Contributor(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDataRequirement");
		result_ElementDefinition->fixed.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueExpression");
		result_ElementDefinition->fixed.valueExpression = Deserialize_Expression(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueParameterDefinition");
		result_ElementDefinition->fixed.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRelatedArtifact");
		result_ElementDefinition->fixed.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTriggerDefinition");
		result_ElementDefinition->fixed.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUsageContext");
		result_ElementDefinition->fixed.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDosage");
		result_ElementDefinition->fixed.valueDosage = Deserialize_Dosage(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMeta");
		result_ElementDefinition->fixed.valueMeta = Deserialize_Meta(arena, item);
		result_ElementDefinition->fixed_type = ElementDefinition::FixedType::Meta;
	}


	if((bool)cJSON_HasObjectItem(elementDefinition, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueBase64Binary");
		result_ElementDefinition->pattern.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueBoolean");
		result_ElementDefinition->pattern.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCanonical");
		result_ElementDefinition->pattern.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCode");
		result_ElementDefinition->pattern.valueCode = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDate");
		result_ElementDefinition->pattern.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDateTime");
		result_ElementDefinition->pattern.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDecimal");
		result_ElementDefinition->pattern.valueDecimal = cJSON_GetNumberValue(item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueId");
		result_ElementDefinition->pattern.valueId = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInstant");
		result_ElementDefinition->pattern.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInteger");
		result_ElementDefinition->pattern.valueInteger = Deserialize_Integer(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMarkdown");
		result_ElementDefinition->pattern.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueOid");
		result_ElementDefinition->pattern.valueOid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePositiveInt");
		result_ElementDefinition->pattern.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueString");
		result_ElementDefinition->pattern.valueString = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTime");
		result_ElementDefinition->pattern.valueTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUnsignedInt");
		result_ElementDefinition->pattern.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUri");
		result_ElementDefinition->pattern.valueUri = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUrl");
		result_ElementDefinition->pattern.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUuid");
		result_ElementDefinition->pattern.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAddress");
		result_ElementDefinition->pattern.valueAddress = Deserialize_Address(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Address;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAge");
		result_ElementDefinition->pattern.valueAge = Deserialize_Age(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Age;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAnnotation");
		result_ElementDefinition->pattern.valueAnnotation = Deserialize_Annotation(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueAttachment");
		result_ElementDefinition->pattern.valueAttachment = Deserialize_Attachment(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCodeableConcept");
		result_ElementDefinition->pattern.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCoding");
		result_ElementDefinition->pattern.valueCoding = Deserialize_Coding(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContactPoint");
		result_ElementDefinition->pattern.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueCount");
		result_ElementDefinition->pattern.valueCount = Deserialize_Count(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Count;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDistance");
		result_ElementDefinition->pattern.valueDistance = Deserialize_Distance(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDuration");
		result_ElementDefinition->pattern.valueDuration = Deserialize_Duration(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueHumanName");
		result_ElementDefinition->pattern.valueHumanName = Deserialize_HumanName(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueIdentifier");
		result_ElementDefinition->pattern.valueIdentifier = Deserialize_Identifier(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMoney");
		result_ElementDefinition->pattern.valueMoney = Deserialize_Money(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Money;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePeriod");
		result_ElementDefinition->pattern.valuePeriod = Deserialize_Period(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Period;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueQuantity");
		result_ElementDefinition->pattern.valueQuantity = Deserialize_Quantity(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRange");
		result_ElementDefinition->pattern.valueRange = Deserialize_Range(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Range;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRatio");
		result_ElementDefinition->pattern.valueRatio = Deserialize_Ratio(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueReference");
		result_ElementDefinition->pattern.valueReference = Deserialize_Reference(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueSampledData");
		result_ElementDefinition->pattern.valueSampledData = Deserialize_SampledData(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueSignature");
		result_ElementDefinition->pattern.valueSignature = Deserialize_Signature(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTiming");
		result_ElementDefinition->pattern.valueTiming = Deserialize_Timing(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContactDetail");
		result_ElementDefinition->pattern.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueContributor");
		result_ElementDefinition->pattern.valueContributor = Deserialize_Contributor(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDataRequirement");
		result_ElementDefinition->pattern.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueExpression");
		result_ElementDefinition->pattern.valueExpression = Deserialize_Expression(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueParameterDefinition");
		result_ElementDefinition->pattern.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueRelatedArtifact");
		result_ElementDefinition->pattern.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTriggerDefinition");
		result_ElementDefinition->pattern.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUsageContext");
		result_ElementDefinition->pattern.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDosage");
		result_ElementDefinition->pattern.valueDosage = Deserialize_Dosage(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueMeta");
		result_ElementDefinition->pattern.valueMeta = Deserialize_Meta(arena, item);
		result_ElementDefinition->pattern_type = ElementDefinition::PatternType::Meta;
	}


	cJSON *cjson_example =  cJSON_GetObjectItem(elementDefinition, "example");
	if(cjson_example)
	{
		result_ElementDefinition->example_count = cJSON_GetArraySize(cjson_example);
		result_ElementDefinition->example = PushArray(arena, ElementDefinition_Example, result_ElementDefinition->example_count);
		for(int i = 0; i < result_ElementDefinition->example_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_example, i);
			result_ElementDefinition->example[i] = *Deserialize_ElementDefinition_Example(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(elementDefinition, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDate");
		result_ElementDefinition->minValue.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDateTime");
		result_ElementDefinition->minValue.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInstant");
		result_ElementDefinition->minValue.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTime");
		result_ElementDefinition->minValue.valueTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDecimal");
		result_ElementDefinition->minValue.valueDecimal = cJSON_GetNumberValue(item);
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInteger");
		result_ElementDefinition->minValue.valueInteger = Deserialize_Integer(arena, item);
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePositiveInt");
		result_ElementDefinition->minValue.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUnsignedInt");
		result_ElementDefinition->minValue.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueQuantity");
		result_ElementDefinition->minValue.valueQuantity = Deserialize_Quantity(arena, item);
		result_ElementDefinition->minValue_type = ElementDefinition::MinValueType::Quantity;
	}


	if((bool)cJSON_HasObjectItem(elementDefinition, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDate");
		result_ElementDefinition->maxValue.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDateTime");
		result_ElementDefinition->maxValue.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInstant");
		result_ElementDefinition->maxValue.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueTime");
		result_ElementDefinition->maxValue.valueTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueDecimal");
		result_ElementDefinition->maxValue.valueDecimal = cJSON_GetNumberValue(item);
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueInteger");
		result_ElementDefinition->maxValue.valueInteger = Deserialize_Integer(arena, item);
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valuePositiveInt");
		result_ElementDefinition->maxValue.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueUnsignedInt");
		result_ElementDefinition->maxValue.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition, "valueQuantity");
		result_ElementDefinition->maxValue.valueQuantity = Deserialize_Quantity(arena, item);
		result_ElementDefinition->maxValue_type = ElementDefinition::MaxValueType::Quantity;
	}


	cJSON *cjson_maxLength =  cJSON_GetObjectItem(elementDefinition, "maxLength");
	if(cjson_maxLength)
	{
		result_ElementDefinition->maxLength = Deserialize_Integer(arena, cjson_maxLength);
	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(elementDefinition, "condition");
	if(cjson_condition)
	{
		result_ElementDefinition->condition_count = cJSON_GetArraySize(cjson_condition);
		result_ElementDefinition->condition = PushArray(arena, fhir_id, result_ElementDefinition->condition_count);
		for(int i = 0; i < result_ElementDefinition->condition_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_condition, i);
			result_ElementDefinition->condition[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_constraint =  cJSON_GetObjectItem(elementDefinition, "constraint");
	if(cjson_constraint)
	{
		result_ElementDefinition->constraint_count = cJSON_GetArraySize(cjson_constraint);
		result_ElementDefinition->constraint = PushArray(arena, ElementDefinition_Constraint, result_ElementDefinition->constraint_count);
		for(int i = 0; i < result_ElementDefinition->constraint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_constraint, i);
			result_ElementDefinition->constraint[i] = *Deserialize_ElementDefinition_Constraint(arena, internal);
		}

	}
	cJSON *cjson_mustSupport =  cJSON_GetObjectItem(elementDefinition, "mustSupport");
	if(cjson_mustSupport)
	{
		result_ElementDefinition->mustSupport = (boolean)cJSON_IsTrue(cjson_mustSupport);
	}
	cJSON *cjson_isModifier =  cJSON_GetObjectItem(elementDefinition, "isModifier");
	if(cjson_isModifier)
	{
		result_ElementDefinition->isModifier = (boolean)cJSON_IsTrue(cjson_isModifier);
	}
	cJSON *cjson_isModifierReason =  cJSON_GetObjectItem(elementDefinition, "isModifierReason");
	if(cjson_isModifierReason)
	{
		result_ElementDefinition->isModifierReason = Str8C(cJSON_GetStringValue(cjson_isModifierReason));
	}
	cJSON *cjson_isSummary =  cJSON_GetObjectItem(elementDefinition, "isSummary");
	if(cjson_isSummary)
	{
		result_ElementDefinition->isSummary = (boolean)cJSON_IsTrue(cjson_isSummary);
	}
	cJSON *cjson_binding =  cJSON_GetObjectItem(elementDefinition, "binding");
	if(cjson_binding)
	{
		result_ElementDefinition->binding = Deserialize_ElementDefinition_Binding(arena, cjson_binding);
	}
	cJSON *cjson_mapping =  cJSON_GetObjectItem(elementDefinition, "mapping");
	if(cjson_mapping)
	{
		result_ElementDefinition->mapping_count = cJSON_GetArraySize(cjson_mapping);
		result_ElementDefinition->mapping = PushArray(arena, ElementDefinition_Mapping, result_ElementDefinition->mapping_count);
		for(int i = 0; i < result_ElementDefinition->mapping_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_mapping, i);
			result_ElementDefinition->mapping[i] = *Deserialize_ElementDefinition_Mapping(arena, internal);
		}

	}
	return result_ElementDefinition;
}

ElementDefinition_Slicing*
Deserialize_ElementDefinition_Slicing(Arena *arena, cJSON *elementDefinition_Slicing)
{
	ElementDefinition_Slicing *result_ElementDefinition_Slicing = PushArray(arena, ElementDefinition_Slicing, 1);
	result_ElementDefinition_Slicing->resourceType = ResourceType::ElementDefinition_Slicing;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Slicing, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Slicing, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Slicing->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Slicing, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Slicing->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Slicing->extension = PushArray(arena, Extension, result_ElementDefinition_Slicing->extension_count);
		for(int i = 0; i < result_ElementDefinition_Slicing->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Slicing->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_discriminator =  cJSON_GetObjectItem(elementDefinition_Slicing, "discriminator");
	if(cjson_discriminator)
	{
		result_ElementDefinition_Slicing->discriminator_count = cJSON_GetArraySize(cjson_discriminator);
		result_ElementDefinition_Slicing->discriminator = PushArray(arena, ElementDefinition_Slicing_Discriminator, result_ElementDefinition_Slicing->discriminator_count);
		for(int i = 0; i < result_ElementDefinition_Slicing->discriminator_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_discriminator, i);
			result_ElementDefinition_Slicing->discriminator[i] = *Deserialize_ElementDefinition_Slicing_Discriminator(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(elementDefinition_Slicing, "description");
	if(cjson_description)
	{
		result_ElementDefinition_Slicing->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_ordered =  cJSON_GetObjectItem(elementDefinition_Slicing, "ordered");
	if(cjson_ordered)
	{
		result_ElementDefinition_Slicing->ordered = (boolean)cJSON_IsTrue(cjson_ordered);
	}
	cJSON *cjson_rules =  cJSON_GetObjectItem(elementDefinition_Slicing, "rules");
	if(cjson_rules)
	{
		result_ElementDefinition_Slicing->rules = Str8C(cJSON_GetStringValue(cjson_rules));
	}
	return result_ElementDefinition_Slicing;
}

ElementDefinition_Slicing_Discriminator*
Deserialize_ElementDefinition_Slicing_Discriminator(Arena *arena, cJSON *elementDefinition_Slicing_Discriminator)
{
	ElementDefinition_Slicing_Discriminator *result_ElementDefinition_Slicing_Discriminator = PushArray(arena, ElementDefinition_Slicing_Discriminator, 1);
	result_ElementDefinition_Slicing_Discriminator->resourceType = ResourceType::ElementDefinition_Slicing_Discriminator;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Slicing_Discriminator, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Slicing_Discriminator, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Slicing_Discriminator->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Slicing_Discriminator, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Slicing_Discriminator->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Slicing_Discriminator->extension = PushArray(arena, Extension, result_ElementDefinition_Slicing_Discriminator->extension_count);
		for(int i = 0; i < result_ElementDefinition_Slicing_Discriminator->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Slicing_Discriminator->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(elementDefinition_Slicing_Discriminator, "type");
	if(cjson_type)
	{
		result_ElementDefinition_Slicing_Discriminator->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_path =  cJSON_GetObjectItem(elementDefinition_Slicing_Discriminator, "path");
	if(cjson_path)
	{
		result_ElementDefinition_Slicing_Discriminator->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	return result_ElementDefinition_Slicing_Discriminator;
}

ElementDefinition_Base*
Deserialize_ElementDefinition_Base(Arena *arena, cJSON *elementDefinition_Base)
{
	ElementDefinition_Base *result_ElementDefinition_Base = PushArray(arena, ElementDefinition_Base, 1);
	result_ElementDefinition_Base->resourceType = ResourceType::ElementDefinition_Base;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Base, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Base, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Base->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Base, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Base->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Base->extension = PushArray(arena, Extension, result_ElementDefinition_Base->extension_count);
		for(int i = 0; i < result_ElementDefinition_Base->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Base->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_path =  cJSON_GetObjectItem(elementDefinition_Base, "path");
	if(cjson_path)
	{
		result_ElementDefinition_Base->path = Str8C(cJSON_GetStringValue(cjson_path));
	}
	cJSON *cjson_min =  cJSON_GetObjectItem(elementDefinition_Base, "min");
	if(cjson_min)
	{
		result_ElementDefinition_Base->min = (int)cJSON_GetNumberValue(cjson_min);
	}
	cJSON *cjson_max =  cJSON_GetObjectItem(elementDefinition_Base, "max");
	if(cjson_max)
	{
		result_ElementDefinition_Base->max = Str8C(cJSON_GetStringValue(cjson_max));
	}
	return result_ElementDefinition_Base;
}

ElementDefinition_Type*
Deserialize_ElementDefinition_Type(Arena *arena, cJSON *elementDefinition_Type)
{
	ElementDefinition_Type *result_ElementDefinition_Type = PushArray(arena, ElementDefinition_Type, 1);
	result_ElementDefinition_Type->resourceType = ResourceType::ElementDefinition_Type;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Type, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Type, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Type->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Type, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Type->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Type->extension = PushArray(arena, Extension, result_ElementDefinition_Type->extension_count);
		for(int i = 0; i < result_ElementDefinition_Type->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Type->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(elementDefinition_Type, "code");
	if(cjson_code)
	{
		result_ElementDefinition_Type->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(elementDefinition_Type, "profile");
	if(cjson_profile)
	{
		result_ElementDefinition_Type->profile_count = cJSON_GetArraySize(cjson_profile);
		result_ElementDefinition_Type->profile = PushArray(arena, fhir_canonical, result_ElementDefinition_Type->profile_count);
		for(int i = 0; i < result_ElementDefinition_Type->profile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_profile, i);
			result_ElementDefinition_Type->profile[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_targetProfile =  cJSON_GetObjectItem(elementDefinition_Type, "targetProfile");
	if(cjson_targetProfile)
	{
		result_ElementDefinition_Type->targetProfile_count = cJSON_GetArraySize(cjson_targetProfile);
		result_ElementDefinition_Type->targetProfile = PushArray(arena, fhir_canonical, result_ElementDefinition_Type->targetProfile_count);
		for(int i = 0; i < result_ElementDefinition_Type->targetProfile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_targetProfile, i);
			result_ElementDefinition_Type->targetProfile[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_aggregation =  cJSON_GetObjectItem(elementDefinition_Type, "aggregation");
	if(cjson_aggregation)
	{
		result_ElementDefinition_Type->aggregation_count = cJSON_GetArraySize(cjson_aggregation);
		result_ElementDefinition_Type->aggregation = PushArray(arena, fhir_code, result_ElementDefinition_Type->aggregation_count);
		for(int i = 0; i < result_ElementDefinition_Type->aggregation_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_aggregation, i);
			result_ElementDefinition_Type->aggregation[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_versioning =  cJSON_GetObjectItem(elementDefinition_Type, "versioning");
	if(cjson_versioning)
	{
		result_ElementDefinition_Type->versioning = Str8C(cJSON_GetStringValue(cjson_versioning));
	}
	return result_ElementDefinition_Type;
}

ElementDefinition_Example*
Deserialize_ElementDefinition_Example(Arena *arena, cJSON *elementDefinition_Example)
{
	ElementDefinition_Example *result_ElementDefinition_Example = PushArray(arena, ElementDefinition_Example, 1);
	result_ElementDefinition_Example->resourceType = ResourceType::ElementDefinition_Example;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Example, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Example, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Example->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Example, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Example->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Example->extension = PushArray(arena, Extension, result_ElementDefinition_Example->extension_count);
		for(int i = 0; i < result_ElementDefinition_Example->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Example->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_label =  cJSON_GetObjectItem(elementDefinition_Example, "label");
	if(cjson_label)
	{
		result_ElementDefinition_Example->label = Str8C(cJSON_GetStringValue(cjson_label));
	}
	if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueBase64Binary");
		result_ElementDefinition_Example->value.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueBoolean");
		result_ElementDefinition_Example->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueCanonical");
		result_ElementDefinition_Example->value.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueCode");
		result_ElementDefinition_Example->value.valueCode = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueDate");
		result_ElementDefinition_Example->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueDateTime");
		result_ElementDefinition_Example->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueDecimal");
		result_ElementDefinition_Example->value.valueDecimal = cJSON_GetNumberValue(item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueId");
		result_ElementDefinition_Example->value.valueId = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueInstant");
		result_ElementDefinition_Example->value.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueInteger");
		result_ElementDefinition_Example->value.valueInteger = Deserialize_Integer(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueMarkdown");
		result_ElementDefinition_Example->value.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueOid");
		result_ElementDefinition_Example->value.valueOid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valuePositiveInt");
		result_ElementDefinition_Example->value.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueString");
		result_ElementDefinition_Example->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueTime");
		result_ElementDefinition_Example->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueUnsignedInt");
		result_ElementDefinition_Example->value.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueUri");
		result_ElementDefinition_Example->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueUrl");
		result_ElementDefinition_Example->value.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueUuid");
		result_ElementDefinition_Example->value.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueAddress");
		result_ElementDefinition_Example->value.valueAddress = Deserialize_Address(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Address;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueAge");
		result_ElementDefinition_Example->value.valueAge = Deserialize_Age(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Age;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueAnnotation");
		result_ElementDefinition_Example->value.valueAnnotation = Deserialize_Annotation(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueAttachment");
		result_ElementDefinition_Example->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueCodeableConcept");
		result_ElementDefinition_Example->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueCoding");
		result_ElementDefinition_Example->value.valueCoding = Deserialize_Coding(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueContactPoint");
		result_ElementDefinition_Example->value.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueCount");
		result_ElementDefinition_Example->value.valueCount = Deserialize_Count(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Count;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueDistance");
		result_ElementDefinition_Example->value.valueDistance = Deserialize_Distance(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueDuration");
		result_ElementDefinition_Example->value.valueDuration = Deserialize_Duration(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueHumanName");
		result_ElementDefinition_Example->value.valueHumanName = Deserialize_HumanName(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueIdentifier");
		result_ElementDefinition_Example->value.valueIdentifier = Deserialize_Identifier(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueMoney");
		result_ElementDefinition_Example->value.valueMoney = Deserialize_Money(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Money;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valuePeriod");
		result_ElementDefinition_Example->value.valuePeriod = Deserialize_Period(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueQuantity");
		result_ElementDefinition_Example->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueRange");
		result_ElementDefinition_Example->value.valueRange = Deserialize_Range(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueRatio");
		result_ElementDefinition_Example->value.valueRatio = Deserialize_Ratio(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueReference");
		result_ElementDefinition_Example->value.valueReference = Deserialize_Reference(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueSampledData");
		result_ElementDefinition_Example->value.valueSampledData = Deserialize_SampledData(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueSignature");
		result_ElementDefinition_Example->value.valueSignature = Deserialize_Signature(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueTiming");
		result_ElementDefinition_Example->value.valueTiming = Deserialize_Timing(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueContactDetail");
		result_ElementDefinition_Example->value.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueContributor");
		result_ElementDefinition_Example->value.valueContributor = Deserialize_Contributor(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueDataRequirement");
		result_ElementDefinition_Example->value.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueExpression");
		result_ElementDefinition_Example->value.valueExpression = Deserialize_Expression(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueParameterDefinition");
		result_ElementDefinition_Example->value.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueRelatedArtifact");
		result_ElementDefinition_Example->value.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueTriggerDefinition");
		result_ElementDefinition_Example->value.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueUsageContext");
		result_ElementDefinition_Example->value.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueDosage");
		result_ElementDefinition_Example->value.valueDosage = Deserialize_Dosage(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(elementDefinition_Example, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(elementDefinition_Example, "valueMeta");
		result_ElementDefinition_Example->value.valueMeta = Deserialize_Meta(arena, item);
		result_ElementDefinition_Example->value_type = ElementDefinition_Example::ValueType::Meta;
	}


	return result_ElementDefinition_Example;
}

ElementDefinition_Constraint*
Deserialize_ElementDefinition_Constraint(Arena *arena, cJSON *elementDefinition_Constraint)
{
	ElementDefinition_Constraint *result_ElementDefinition_Constraint = PushArray(arena, ElementDefinition_Constraint, 1);
	result_ElementDefinition_Constraint->resourceType = ResourceType::ElementDefinition_Constraint;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Constraint, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Constraint, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Constraint->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Constraint, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Constraint->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Constraint->extension = PushArray(arena, Extension, result_ElementDefinition_Constraint->extension_count);
		for(int i = 0; i < result_ElementDefinition_Constraint->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Constraint->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_key =  cJSON_GetObjectItem(elementDefinition_Constraint, "key");
	if(cjson_key)
	{
		result_ElementDefinition_Constraint->key = Str8C(cJSON_GetStringValue(cjson_key));
	}
	cJSON *cjson_requirements =  cJSON_GetObjectItem(elementDefinition_Constraint, "requirements");
	if(cjson_requirements)
	{
		result_ElementDefinition_Constraint->requirements = Str8C(cJSON_GetStringValue(cjson_requirements));
	}
	cJSON *cjson_severity =  cJSON_GetObjectItem(elementDefinition_Constraint, "severity");
	if(cjson_severity)
	{
		result_ElementDefinition_Constraint->severity = Str8C(cJSON_GetStringValue(cjson_severity));
	}
	cJSON *cjson_human =  cJSON_GetObjectItem(elementDefinition_Constraint, "human");
	if(cjson_human)
	{
		result_ElementDefinition_Constraint->human = Str8C(cJSON_GetStringValue(cjson_human));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(elementDefinition_Constraint, "expression");
	if(cjson_expression)
	{
		result_ElementDefinition_Constraint->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	cJSON *cjson_xpath =  cJSON_GetObjectItem(elementDefinition_Constraint, "xpath");
	if(cjson_xpath)
	{
		result_ElementDefinition_Constraint->xpath = Str8C(cJSON_GetStringValue(cjson_xpath));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(elementDefinition_Constraint, "source");
	if(cjson_source)
	{
		result_ElementDefinition_Constraint->source = Str8C(cJSON_GetStringValue(cjson_source));
	}
	return result_ElementDefinition_Constraint;
}

ElementDefinition_Binding*
Deserialize_ElementDefinition_Binding(Arena *arena, cJSON *elementDefinition_Binding)
{
	ElementDefinition_Binding *result_ElementDefinition_Binding = PushArray(arena, ElementDefinition_Binding, 1);
	result_ElementDefinition_Binding->resourceType = ResourceType::ElementDefinition_Binding;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Binding, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Binding, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Binding->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Binding, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Binding->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Binding->extension = PushArray(arena, Extension, result_ElementDefinition_Binding->extension_count);
		for(int i = 0; i < result_ElementDefinition_Binding->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Binding->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_strength =  cJSON_GetObjectItem(elementDefinition_Binding, "strength");
	if(cjson_strength)
	{
		result_ElementDefinition_Binding->strength = Str8C(cJSON_GetStringValue(cjson_strength));
	}
	cJSON *cjson_description =  cJSON_GetObjectItem(elementDefinition_Binding, "description");
	if(cjson_description)
	{
		result_ElementDefinition_Binding->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_valueSet =  cJSON_GetObjectItem(elementDefinition_Binding, "valueSet");
	if(cjson_valueSet)
	{
		result_ElementDefinition_Binding->valueSet = Str8C(cJSON_GetStringValue(cjson_valueSet));
	}
	return result_ElementDefinition_Binding;
}

ElementDefinition_Mapping*
Deserialize_ElementDefinition_Mapping(Arena *arena, cJSON *elementDefinition_Mapping)
{
	ElementDefinition_Mapping *result_ElementDefinition_Mapping = PushArray(arena, ElementDefinition_Mapping, 1);
	result_ElementDefinition_Mapping->resourceType = ResourceType::ElementDefinition_Mapping;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementDefinition_Mapping, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(elementDefinition_Mapping, "id");
	if(cjson_id)
	{
		result_ElementDefinition_Mapping->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(elementDefinition_Mapping, "extension");
	if(cjson_extension)
	{
		result_ElementDefinition_Mapping->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ElementDefinition_Mapping->extension = PushArray(arena, Extension, result_ElementDefinition_Mapping->extension_count);
		for(int i = 0; i < result_ElementDefinition_Mapping->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ElementDefinition_Mapping->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identity =  cJSON_GetObjectItem(elementDefinition_Mapping, "identity");
	if(cjson_identity)
	{
		result_ElementDefinition_Mapping->identity = Str8C(cJSON_GetStringValue(cjson_identity));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(elementDefinition_Mapping, "language");
	if(cjson_language)
	{
		result_ElementDefinition_Mapping->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_map =  cJSON_GetObjectItem(elementDefinition_Mapping, "map");
	if(cjson_map)
	{
		result_ElementDefinition_Mapping->map = Str8C(cJSON_GetStringValue(cjson_map));
	}
	cJSON *cjson_comment =  cJSON_GetObjectItem(elementDefinition_Mapping, "comment");
	if(cjson_comment)
	{
		result_ElementDefinition_Mapping->comment = Str8C(cJSON_GetStringValue(cjson_comment));
	}
	return result_ElementDefinition_Mapping;
}

Expression*
Deserialize_Expression(Arena *arena, cJSON *expression)
{
	Expression *result_Expression = PushArray(arena, Expression, 1);
	result_Expression->resourceType = ResourceType::Expression;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(expression, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(expression, "id");
	if(cjson_id)
	{
		result_Expression->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(expression, "extension");
	if(cjson_extension)
	{
		result_Expression->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Expression->extension = PushArray(arena, Extension, result_Expression->extension_count);
		for(int i = 0; i < result_Expression->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Expression->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_description =  cJSON_GetObjectItem(expression, "description");
	if(cjson_description)
	{
		result_Expression->description = Str8C(cJSON_GetStringValue(cjson_description));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(expression, "name");
	if(cjson_name)
	{
		result_Expression->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_language =  cJSON_GetObjectItem(expression, "language");
	if(cjson_language)
	{
		result_Expression->language = Str8C(cJSON_GetStringValue(cjson_language));
	}
	cJSON *cjson_expression =  cJSON_GetObjectItem(expression, "expression");
	if(cjson_expression)
	{
		result_Expression->expression = Str8C(cJSON_GetStringValue(cjson_expression));
	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(expression, "reference");
	if(cjson_reference)
	{
		result_Expression->reference = Str8C(cJSON_GetStringValue(cjson_reference));
	}
	return result_Expression;
}

Extension*
Deserialize_Extension(Arena *arena, cJSON *extension)
{
	Extension *result_Extension = PushArray(arena, Extension, 1);
	result_Extension->resourceType = ResourceType::Extension;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(extension, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(extension, "id");
	if(cjson_id)
	{
		result_Extension->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(extension, "extension");
	if(cjson_extension)
	{
		result_Extension->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Extension->extension = PushArray(arena, Extension, result_Extension->extension_count);
		for(int i = 0; i < result_Extension->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Extension->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_url =  cJSON_GetObjectItem(extension, "url");
	if(cjson_url)
	{
		result_Extension->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	if((bool)cJSON_HasObjectItem(extension, "valueBase64Binary"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueBase64Binary");
		result_Extension->value.valueBase64Binary = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_base64Binary;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueBoolean"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueBoolean");
		result_Extension->value.valueBoolean = (boolean)cJSON_IsTrue(item);
		result_Extension->value_type = Extension::ValueType::fhir_boolean;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueCanonical"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueCanonical");
		result_Extension->value.valueCanonical = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_canonical;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueCode"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueCode");
		result_Extension->value.valueCode = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_code;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueDate");
		result_Extension->value.valueDate = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueDateTime");
		result_Extension->value.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_dateTime;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueDecimal"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueDecimal");
		result_Extension->value.valueDecimal = cJSON_GetNumberValue(item);
		result_Extension->value_type = Extension::ValueType::fhir_decimal;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueId"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueId");
		result_Extension->value.valueId = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_id;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueInstant"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueInstant");
		result_Extension->value.valueInstant = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_instant;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueInteger"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueInteger");
		result_Extension->value.valueInteger = Deserialize_Integer(arena, item);
		result_Extension->value_type = Extension::ValueType::Integer;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueMarkdown"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueMarkdown");
		result_Extension->value.valueMarkdown = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_markdown;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueOid"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueOid");
		result_Extension->value.valueOid = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_oid;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valuePositiveInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valuePositiveInt");
		result_Extension->value.valuePositiveInt = (int)cJSON_GetNumberValue(item);
		result_Extension->value_type = Extension::ValueType::fhir_positiveInt;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueString");
		result_Extension->value.valueString = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_string;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueTime");
		result_Extension->value.valueTime = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_time;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueUnsignedInt"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueUnsignedInt");
		result_Extension->value.valueUnsignedInt = (int)cJSON_GetNumberValue(item);
		result_Extension->value_type = Extension::ValueType::fhir_unsignedInt;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueUri"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueUri");
		result_Extension->value.valueUri = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_uri;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueUrl"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueUrl");
		result_Extension->value.valueUrl = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_url;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueUuid"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueUuid");
		result_Extension->value.valueUuid = Str8C(cJSON_GetStringValue(item));
		result_Extension->value_type = Extension::ValueType::fhir_uuid;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueAddress"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueAddress");
		result_Extension->value.valueAddress = Deserialize_Address(arena, item);
		result_Extension->value_type = Extension::ValueType::Address;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueAge"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueAge");
		result_Extension->value.valueAge = Deserialize_Age(arena, item);
		result_Extension->value_type = Extension::ValueType::Age;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueAnnotation"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueAnnotation");
		result_Extension->value.valueAnnotation = Deserialize_Annotation(arena, item);
		result_Extension->value_type = Extension::ValueType::Annotation;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueAttachment"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueAttachment");
		result_Extension->value.valueAttachment = Deserialize_Attachment(arena, item);
		result_Extension->value_type = Extension::ValueType::Attachment;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueCodeableConcept");
		result_Extension->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Extension->value_type = Extension::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueCoding"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueCoding");
		result_Extension->value.valueCoding = Deserialize_Coding(arena, item);
		result_Extension->value_type = Extension::ValueType::Coding;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueContactPoint"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueContactPoint");
		result_Extension->value.valueContactPoint = Deserialize_ContactPoint(arena, item);
		result_Extension->value_type = Extension::ValueType::ContactPoint;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueCount"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueCount");
		result_Extension->value.valueCount = Deserialize_Count(arena, item);
		result_Extension->value_type = Extension::ValueType::Count;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueDistance"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueDistance");
		result_Extension->value.valueDistance = Deserialize_Distance(arena, item);
		result_Extension->value_type = Extension::ValueType::Distance;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueDuration");
		result_Extension->value.valueDuration = Deserialize_Duration(arena, item);
		result_Extension->value_type = Extension::ValueType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueHumanName"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueHumanName");
		result_Extension->value.valueHumanName = Deserialize_HumanName(arena, item);
		result_Extension->value_type = Extension::ValueType::HumanName;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueIdentifier"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueIdentifier");
		result_Extension->value.valueIdentifier = Deserialize_Identifier(arena, item);
		result_Extension->value_type = Extension::ValueType::Identifier;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueMoney"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueMoney");
		result_Extension->value.valueMoney = Deserialize_Money(arena, item);
		result_Extension->value_type = Extension::ValueType::Money;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valuePeriod");
		result_Extension->value.valuePeriod = Deserialize_Period(arena, item);
		result_Extension->value_type = Extension::ValueType::Period;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueQuantity");
		result_Extension->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_Extension->value_type = Extension::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueRange");
		result_Extension->value.valueRange = Deserialize_Range(arena, item);
		result_Extension->value_type = Extension::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueRatio"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueRatio");
		result_Extension->value.valueRatio = Deserialize_Ratio(arena, item);
		result_Extension->value_type = Extension::ValueType::Ratio;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueReference");
		result_Extension->value.valueReference = Deserialize_Reference(arena, item);
		result_Extension->value_type = Extension::ValueType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueSampledData"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueSampledData");
		result_Extension->value.valueSampledData = Deserialize_SampledData(arena, item);
		result_Extension->value_type = Extension::ValueType::SampledData;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueSignature"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueSignature");
		result_Extension->value.valueSignature = Deserialize_Signature(arena, item);
		result_Extension->value_type = Extension::ValueType::Signature;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueTiming");
		result_Extension->value.valueTiming = Deserialize_Timing(arena, item);
		result_Extension->value_type = Extension::ValueType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueContactDetail"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueContactDetail");
		result_Extension->value.valueContactDetail = Deserialize_ContactDetail(arena, item);
		result_Extension->value_type = Extension::ValueType::ContactDetail;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueContributor"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueContributor");
		result_Extension->value.valueContributor = Deserialize_Contributor(arena, item);
		result_Extension->value_type = Extension::ValueType::Contributor;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueDataRequirement"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueDataRequirement");
		result_Extension->value.valueDataRequirement = Deserialize_DataRequirement(arena, item);
		result_Extension->value_type = Extension::ValueType::DataRequirement;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueExpression"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueExpression");
		result_Extension->value.valueExpression = Deserialize_Expression(arena, item);
		result_Extension->value_type = Extension::ValueType::Expression;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueParameterDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueParameterDefinition");
		result_Extension->value.valueParameterDefinition = Deserialize_ParameterDefinition(arena, item);
		result_Extension->value_type = Extension::ValueType::ParameterDefinition;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueRelatedArtifact"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueRelatedArtifact");
		result_Extension->value.valueRelatedArtifact = Deserialize_RelatedArtifact(arena, item);
		result_Extension->value_type = Extension::ValueType::RelatedArtifact;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueTriggerDefinition"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueTriggerDefinition");
		result_Extension->value.valueTriggerDefinition = Deserialize_TriggerDefinition(arena, item);
		result_Extension->value_type = Extension::ValueType::TriggerDefinition;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueUsageContext"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueUsageContext");
		result_Extension->value.valueUsageContext = Deserialize_UsageContext(arena, item);
		result_Extension->value_type = Extension::ValueType::UsageContext;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueDosage"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueDosage");
		result_Extension->value.valueDosage = Deserialize_Dosage(arena, item);
		result_Extension->value_type = Extension::ValueType::Dosage;
	}
	else if((bool)cJSON_HasObjectItem(extension, "valueMeta"))	
	{
		cJSON *item = cJSON_GetObjectItem(extension, "valueMeta");
		result_Extension->value.valueMeta = Deserialize_Meta(arena, item);
		result_Extension->value_type = Extension::ValueType::Meta;
	}


	return result_Extension;
}

HumanName*
Deserialize_HumanName(Arena *arena, cJSON *humanName)
{
	HumanName *result_HumanName = PushArray(arena, HumanName, 1);
	result_HumanName->resourceType = ResourceType::HumanName;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(humanName, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(humanName, "id");
	if(cjson_id)
	{
		result_HumanName->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(humanName, "extension");
	if(cjson_extension)
	{
		result_HumanName->extension_count = cJSON_GetArraySize(cjson_extension);
		result_HumanName->extension = PushArray(arena, Extension, result_HumanName->extension_count);
		for(int i = 0; i < result_HumanName->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_HumanName->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_use =  cJSON_GetObjectItem(humanName, "use");
	if(cjson_use)
	{
		result_HumanName->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_text =  cJSON_GetObjectItem(humanName, "text");
	if(cjson_text)
	{
		result_HumanName->text = Str8C(cJSON_GetStringValue(cjson_text));
	}
	cJSON *cjson_family =  cJSON_GetObjectItem(humanName, "family");
	if(cjson_family)
	{
		result_HumanName->family = Str8C(cJSON_GetStringValue(cjson_family));
	}
	cJSON *cjson_given =  cJSON_GetObjectItem(humanName, "given");
	if(cjson_given)
	{
		result_HumanName->given_count = cJSON_GetArraySize(cjson_given);
		result_HumanName->given = PushArray(arena, fhir_string, result_HumanName->given_count);
		for(int i = 0; i < result_HumanName->given_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_given, i);
			result_HumanName->given[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_prefix =  cJSON_GetObjectItem(humanName, "prefix");
	if(cjson_prefix)
	{
		result_HumanName->prefix_count = cJSON_GetArraySize(cjson_prefix);
		result_HumanName->prefix = PushArray(arena, fhir_string, result_HumanName->prefix_count);
		for(int i = 0; i < result_HumanName->prefix_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_prefix, i);
			result_HumanName->prefix[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_suffix =  cJSON_GetObjectItem(humanName, "suffix");
	if(cjson_suffix)
	{
		result_HumanName->suffix_count = cJSON_GetArraySize(cjson_suffix);
		result_HumanName->suffix = PushArray(arena, fhir_string, result_HumanName->suffix_count);
		for(int i = 0; i < result_HumanName->suffix_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_suffix, i);
			result_HumanName->suffix[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_period =  cJSON_GetObjectItem(humanName, "period");
	if(cjson_period)
	{
		result_HumanName->period = Deserialize_Period(arena, cjson_period);
	}
	return result_HumanName;
}

Identifier*
Deserialize_Identifier(Arena *arena, cJSON *identifier)
{
	Identifier *result_Identifier = PushArray(arena, Identifier, 1);
	result_Identifier->resourceType = ResourceType::Identifier;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(identifier, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(identifier, "id");
	if(cjson_id)
	{
		result_Identifier->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(identifier, "extension");
	if(cjson_extension)
	{
		result_Identifier->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Identifier->extension = PushArray(arena, Extension, result_Identifier->extension_count);
		for(int i = 0; i < result_Identifier->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Identifier->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_use =  cJSON_GetObjectItem(identifier, "use");
	if(cjson_use)
	{
		result_Identifier->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(identifier, "type");
	if(cjson_type)
	{
		result_Identifier->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_system =  cJSON_GetObjectItem(identifier, "system");
	if(cjson_system)
	{
		result_Identifier->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_value =  cJSON_GetObjectItem(identifier, "value");
	if(cjson_value)
	{
		result_Identifier->value = Str8C(cJSON_GetStringValue(cjson_value));
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(identifier, "period");
	if(cjson_period)
	{
		result_Identifier->period = Deserialize_Period(arena, cjson_period);
	}
	cJSON *cjson_assigner =  cJSON_GetObjectItem(identifier, "assigner");
	if(cjson_assigner)
	{
		result_Identifier->assigner = Deserialize_Reference(arena, cjson_assigner);
	}
	return result_Identifier;
}

MarketingStatus*
Deserialize_MarketingStatus(Arena *arena, cJSON *marketingStatus)
{
	MarketingStatus *result_MarketingStatus = PushArray(arena, MarketingStatus, 1);
	result_MarketingStatus->resourceType = ResourceType::MarketingStatus;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(marketingStatus, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(marketingStatus, "id");
	if(cjson_id)
	{
		result_MarketingStatus->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(marketingStatus, "extension");
	if(cjson_extension)
	{
		result_MarketingStatus->extension_count = cJSON_GetArraySize(cjson_extension);
		result_MarketingStatus->extension = PushArray(arena, Extension, result_MarketingStatus->extension_count);
		for(int i = 0; i < result_MarketingStatus->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_MarketingStatus->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(marketingStatus, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_MarketingStatus->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_MarketingStatus->modifierExtension = PushArray(arena, Extension, result_MarketingStatus->modifierExtension_count);
		for(int i = 0; i < result_MarketingStatus->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_MarketingStatus->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_country =  cJSON_GetObjectItem(marketingStatus, "country");
	if(cjson_country)
	{
		result_MarketingStatus->country = Deserialize_CodeableConcept(arena, cjson_country);
	}
	cJSON *cjson_jurisdiction =  cJSON_GetObjectItem(marketingStatus, "jurisdiction");
	if(cjson_jurisdiction)
	{
		result_MarketingStatus->jurisdiction = Deserialize_CodeableConcept(arena, cjson_jurisdiction);
	}
	cJSON *cjson_status =  cJSON_GetObjectItem(marketingStatus, "status");
	if(cjson_status)
	{
		result_MarketingStatus->status = Deserialize_CodeableConcept(arena, cjson_status);
	}
	cJSON *cjson_dateRange =  cJSON_GetObjectItem(marketingStatus, "dateRange");
	if(cjson_dateRange)
	{
		result_MarketingStatus->dateRange = Deserialize_Period(arena, cjson_dateRange);
	}
	cJSON *cjson_restoreDate =  cJSON_GetObjectItem(marketingStatus, "restoreDate");
	if(cjson_restoreDate)
	{
		result_MarketingStatus->restoreDate = Str8C(cJSON_GetStringValue(cjson_restoreDate));
	}
	return result_MarketingStatus;
}

Meta*
Deserialize_Meta(Arena *arena, cJSON *meta)
{
	Meta *result_Meta = PushArray(arena, Meta, 1);
	result_Meta->resourceType = ResourceType::Meta;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(meta, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(meta, "id");
	if(cjson_id)
	{
		result_Meta->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(meta, "extension");
	if(cjson_extension)
	{
		result_Meta->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Meta->extension = PushArray(arena, Extension, result_Meta->extension_count);
		for(int i = 0; i < result_Meta->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Meta->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_versionId =  cJSON_GetObjectItem(meta, "versionId");
	if(cjson_versionId)
	{
		result_Meta->versionId = Str8C(cJSON_GetStringValue(cjson_versionId));
	}
	cJSON *cjson_lastUpdated =  cJSON_GetObjectItem(meta, "lastUpdated");
	if(cjson_lastUpdated)
	{
		result_Meta->lastUpdated = Str8C(cJSON_GetStringValue(cjson_lastUpdated));
	}
	cJSON *cjson_source =  cJSON_GetObjectItem(meta, "source");
	if(cjson_source)
	{
		result_Meta->source = Str8C(cJSON_GetStringValue(cjson_source));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(meta, "profile");
	if(cjson_profile)
	{
		result_Meta->profile_count = cJSON_GetArraySize(cjson_profile);
		result_Meta->profile = PushArray(arena, fhir_canonical, result_Meta->profile_count);
		for(int i = 0; i < result_Meta->profile_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_profile, i);
			result_Meta->profile[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_security =  cJSON_GetObjectItem(meta, "security");
	if(cjson_security)
	{
		result_Meta->security_count = cJSON_GetArraySize(cjson_security);
		result_Meta->security = PushArray(arena, Coding, result_Meta->security_count);
		for(int i = 0; i < result_Meta->security_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_security, i);
			result_Meta->security[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_tag =  cJSON_GetObjectItem(meta, "tag");
	if(cjson_tag)
	{
		result_Meta->tag_count = cJSON_GetArraySize(cjson_tag);
		result_Meta->tag = PushArray(arena, Coding, result_Meta->tag_count);
		for(int i = 0; i < result_Meta->tag_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_tag, i);
			result_Meta->tag[i] = *Deserialize_Coding(arena, internal);
		}

	}
	return result_Meta;
}

Money*
Deserialize_Money(Arena *arena, cJSON *money)
{
	Money *result_Money = PushArray(arena, Money, 1);
	result_Money->resourceType = ResourceType::Money;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(money, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(money, "id");
	if(cjson_id)
	{
		result_Money->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(money, "extension");
	if(cjson_extension)
	{
		result_Money->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Money->extension = PushArray(arena, Extension, result_Money->extension_count);
		for(int i = 0; i < result_Money->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Money->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(money, "value");
	if(cjson_value)
	{
		result_Money->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_currency =  cJSON_GetObjectItem(money, "currency");
	if(cjson_currency)
	{
		result_Money->currency = Str8C(cJSON_GetStringValue(cjson_currency));
	}
	return result_Money;
}

Narrative*
Deserialize_Narrative(Arena *arena, cJSON *narrative)
{
	Narrative *result_Narrative = PushArray(arena, Narrative, 1);
	result_Narrative->resourceType = ResourceType::Narrative;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(narrative, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(narrative, "id");
	if(cjson_id)
	{
		result_Narrative->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(narrative, "extension");
	if(cjson_extension)
	{
		result_Narrative->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Narrative->extension = PushArray(arena, Extension, result_Narrative->extension_count);
		for(int i = 0; i < result_Narrative->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Narrative->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_status =  cJSON_GetObjectItem(narrative, "status");
	if(cjson_status)
	{
		result_Narrative->status = Str8C(cJSON_GetStringValue(cjson_status));
	}
	cJSON *cjson_div =  cJSON_GetObjectItem(narrative, "div");
	if(cjson_div)
	{
		result_Narrative->div = Deserialize_Xhtml(arena, cjson_div);
	}
	return result_Narrative;
}

ParameterDefinition*
Deserialize_ParameterDefinition(Arena *arena, cJSON *parameterDefinition)
{
	ParameterDefinition *result_ParameterDefinition = PushArray(arena, ParameterDefinition, 1);
	result_ParameterDefinition->resourceType = ResourceType::ParameterDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(parameterDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(parameterDefinition, "id");
	if(cjson_id)
	{
		result_ParameterDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(parameterDefinition, "extension");
	if(cjson_extension)
	{
		result_ParameterDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ParameterDefinition->extension = PushArray(arena, Extension, result_ParameterDefinition->extension_count);
		for(int i = 0; i < result_ParameterDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ParameterDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_name =  cJSON_GetObjectItem(parameterDefinition, "name");
	if(cjson_name)
	{
		result_ParameterDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	cJSON *cjson_use =  cJSON_GetObjectItem(parameterDefinition, "use");
	if(cjson_use)
	{
		result_ParameterDefinition->use = Str8C(cJSON_GetStringValue(cjson_use));
	}
	cJSON *cjson_min =  cJSON_GetObjectItem(parameterDefinition, "min");
	if(cjson_min)
	{
		result_ParameterDefinition->min = Deserialize_Integer(arena, cjson_min);
	}
	cJSON *cjson_max =  cJSON_GetObjectItem(parameterDefinition, "max");
	if(cjson_max)
	{
		result_ParameterDefinition->max = Str8C(cJSON_GetStringValue(cjson_max));
	}
	cJSON *cjson_documentation =  cJSON_GetObjectItem(parameterDefinition, "documentation");
	if(cjson_documentation)
	{
		result_ParameterDefinition->documentation = Str8C(cJSON_GetStringValue(cjson_documentation));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(parameterDefinition, "type");
	if(cjson_type)
	{
		result_ParameterDefinition->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_profile =  cJSON_GetObjectItem(parameterDefinition, "profile");
	if(cjson_profile)
	{
		result_ParameterDefinition->profile = Str8C(cJSON_GetStringValue(cjson_profile));
	}
	return result_ParameterDefinition;
}

Period*
Deserialize_Period(Arena *arena, cJSON *period)
{
	Period *result_Period = PushArray(arena, Period, 1);
	result_Period->resourceType = ResourceType::Period;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(period, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(period, "id");
	if(cjson_id)
	{
		result_Period->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(period, "extension");
	if(cjson_extension)
	{
		result_Period->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Period->extension = PushArray(arena, Extension, result_Period->extension_count);
		for(int i = 0; i < result_Period->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Period->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_start =  cJSON_GetObjectItem(period, "start");
	if(cjson_start)
	{
		result_Period->start = Str8C(cJSON_GetStringValue(cjson_start));
	}
	cJSON *cjson_end =  cJSON_GetObjectItem(period, "end");
	if(cjson_end)
	{
		result_Period->end = Str8C(cJSON_GetStringValue(cjson_end));
	}
	return result_Period;
}

Population*
Deserialize_Population(Arena *arena, cJSON *population)
{
	Population *result_Population = PushArray(arena, Population, 1);
	result_Population->resourceType = ResourceType::Population;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(population, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(population, "id");
	if(cjson_id)
	{
		result_Population->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(population, "extension");
	if(cjson_extension)
	{
		result_Population->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Population->extension = PushArray(arena, Extension, result_Population->extension_count);
		for(int i = 0; i < result_Population->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Population->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(population, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Population->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Population->modifierExtension = PushArray(arena, Extension, result_Population->modifierExtension_count);
		for(int i = 0; i < result_Population->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Population->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(population, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(population, "valueRange");
		result_Population->age.valueRange = Deserialize_Range(arena, item);
		result_Population->age_type = Population::AgeType::Range;
	}
	else if((bool)cJSON_HasObjectItem(population, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(population, "valueCodeableConcept");
		result_Population->age.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_Population->age_type = Population::AgeType::CodeableConcept;
	}


	cJSON *cjson_gender =  cJSON_GetObjectItem(population, "gender");
	if(cjson_gender)
	{
		result_Population->gender = Deserialize_CodeableConcept(arena, cjson_gender);
	}
	cJSON *cjson_race =  cJSON_GetObjectItem(population, "race");
	if(cjson_race)
	{
		result_Population->race = Deserialize_CodeableConcept(arena, cjson_race);
	}
	cJSON *cjson_physiologicalCondition =  cJSON_GetObjectItem(population, "physiologicalCondition");
	if(cjson_physiologicalCondition)
	{
		result_Population->physiologicalCondition = Deserialize_CodeableConcept(arena, cjson_physiologicalCondition);
	}
	return result_Population;
}

ProdCharacteristic*
Deserialize_ProdCharacteristic(Arena *arena, cJSON *prodCharacteristic)
{
	ProdCharacteristic *result_ProdCharacteristic = PushArray(arena, ProdCharacteristic, 1);
	result_ProdCharacteristic->resourceType = ResourceType::ProdCharacteristic;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(prodCharacteristic, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(prodCharacteristic, "id");
	if(cjson_id)
	{
		result_ProdCharacteristic->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(prodCharacteristic, "extension");
	if(cjson_extension)
	{
		result_ProdCharacteristic->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ProdCharacteristic->extension = PushArray(arena, Extension, result_ProdCharacteristic->extension_count);
		for(int i = 0; i < result_ProdCharacteristic->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ProdCharacteristic->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(prodCharacteristic, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ProdCharacteristic->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ProdCharacteristic->modifierExtension = PushArray(arena, Extension, result_ProdCharacteristic->modifierExtension_count);
		for(int i = 0; i < result_ProdCharacteristic->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ProdCharacteristic->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_height =  cJSON_GetObjectItem(prodCharacteristic, "height");
	if(cjson_height)
	{
		result_ProdCharacteristic->height = Deserialize_Quantity(arena, cjson_height);
	}
	cJSON *cjson_width =  cJSON_GetObjectItem(prodCharacteristic, "width");
	if(cjson_width)
	{
		result_ProdCharacteristic->width = Deserialize_Quantity(arena, cjson_width);
	}
	cJSON *cjson_depth =  cJSON_GetObjectItem(prodCharacteristic, "depth");
	if(cjson_depth)
	{
		result_ProdCharacteristic->depth = Deserialize_Quantity(arena, cjson_depth);
	}
	cJSON *cjson_weight =  cJSON_GetObjectItem(prodCharacteristic, "weight");
	if(cjson_weight)
	{
		result_ProdCharacteristic->weight = Deserialize_Quantity(arena, cjson_weight);
	}
	cJSON *cjson_nominalVolume =  cJSON_GetObjectItem(prodCharacteristic, "nominalVolume");
	if(cjson_nominalVolume)
	{
		result_ProdCharacteristic->nominalVolume = Deserialize_Quantity(arena, cjson_nominalVolume);
	}
	cJSON *cjson_externalDiameter =  cJSON_GetObjectItem(prodCharacteristic, "externalDiameter");
	if(cjson_externalDiameter)
	{
		result_ProdCharacteristic->externalDiameter = Deserialize_Quantity(arena, cjson_externalDiameter);
	}
	cJSON *cjson_shape =  cJSON_GetObjectItem(prodCharacteristic, "shape");
	if(cjson_shape)
	{
		result_ProdCharacteristic->shape = Str8C(cJSON_GetStringValue(cjson_shape));
	}
	cJSON *cjson_color =  cJSON_GetObjectItem(prodCharacteristic, "color");
	if(cjson_color)
	{
		result_ProdCharacteristic->color_count = cJSON_GetArraySize(cjson_color);
		result_ProdCharacteristic->color = PushArray(arena, fhir_string, result_ProdCharacteristic->color_count);
		for(int i = 0; i < result_ProdCharacteristic->color_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_color, i);
			result_ProdCharacteristic->color[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_imprint =  cJSON_GetObjectItem(prodCharacteristic, "imprint");
	if(cjson_imprint)
	{
		result_ProdCharacteristic->imprint_count = cJSON_GetArraySize(cjson_imprint);
		result_ProdCharacteristic->imprint = PushArray(arena, fhir_string, result_ProdCharacteristic->imprint_count);
		for(int i = 0; i < result_ProdCharacteristic->imprint_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_imprint, i);
			result_ProdCharacteristic->imprint[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_image =  cJSON_GetObjectItem(prodCharacteristic, "image");
	if(cjson_image)
	{
		result_ProdCharacteristic->image_count = cJSON_GetArraySize(cjson_image);
		result_ProdCharacteristic->image = PushArray(arena, Attachment, result_ProdCharacteristic->image_count);
		for(int i = 0; i < result_ProdCharacteristic->image_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_image, i);
			result_ProdCharacteristic->image[i] = *Deserialize_Attachment(arena, internal);
		}

	}
	cJSON *cjson_scoring =  cJSON_GetObjectItem(prodCharacteristic, "scoring");
	if(cjson_scoring)
	{
		result_ProdCharacteristic->scoring = Deserialize_CodeableConcept(arena, cjson_scoring);
	}
	return result_ProdCharacteristic;
}

ProductShelfLife*
Deserialize_ProductShelfLife(Arena *arena, cJSON *productShelfLife)
{
	ProductShelfLife *result_ProductShelfLife = PushArray(arena, ProductShelfLife, 1);
	result_ProductShelfLife->resourceType = ResourceType::ProductShelfLife;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(productShelfLife, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(productShelfLife, "id");
	if(cjson_id)
	{
		result_ProductShelfLife->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(productShelfLife, "extension");
	if(cjson_extension)
	{
		result_ProductShelfLife->extension_count = cJSON_GetArraySize(cjson_extension);
		result_ProductShelfLife->extension = PushArray(arena, Extension, result_ProductShelfLife->extension_count);
		for(int i = 0; i < result_ProductShelfLife->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_ProductShelfLife->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(productShelfLife, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_ProductShelfLife->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_ProductShelfLife->modifierExtension = PushArray(arena, Extension, result_ProductShelfLife->modifierExtension_count);
		for(int i = 0; i < result_ProductShelfLife->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_ProductShelfLife->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(productShelfLife, "identifier");
	if(cjson_identifier)
	{
		result_ProductShelfLife->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(productShelfLife, "type");
	if(cjson_type)
	{
		result_ProductShelfLife->type = Deserialize_CodeableConcept(arena, cjson_type);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(productShelfLife, "period");
	if(cjson_period)
	{
		result_ProductShelfLife->period = Deserialize_Quantity(arena, cjson_period);
	}
	cJSON *cjson_specialPrecautionsForStorage =  cJSON_GetObjectItem(productShelfLife, "specialPrecautionsForStorage");
	if(cjson_specialPrecautionsForStorage)
	{
		result_ProductShelfLife->specialPrecautionsForStorage_count = cJSON_GetArraySize(cjson_specialPrecautionsForStorage);
		result_ProductShelfLife->specialPrecautionsForStorage = PushArray(arena, CodeableConcept, result_ProductShelfLife->specialPrecautionsForStorage_count);
		for(int i = 0; i < result_ProductShelfLife->specialPrecautionsForStorage_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_specialPrecautionsForStorage, i);
			result_ProductShelfLife->specialPrecautionsForStorage[i] = *Deserialize_CodeableConcept(arena, internal);
		}

	}
	return result_ProductShelfLife;
}

Quantity*
Deserialize_Quantity(Arena *arena, cJSON *quantity)
{
	Quantity *result_Quantity = PushArray(arena, Quantity, 1);
	result_Quantity->resourceType = ResourceType::Quantity;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(quantity, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(quantity, "id");
	if(cjson_id)
	{
		result_Quantity->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(quantity, "extension");
	if(cjson_extension)
	{
		result_Quantity->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Quantity->extension = PushArray(arena, Extension, result_Quantity->extension_count);
		for(int i = 0; i < result_Quantity->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Quantity->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_value =  cJSON_GetObjectItem(quantity, "value");
	if(cjson_value)
	{
		result_Quantity->value = cJSON_GetNumberValue(cjson_value);
	}
	cJSON *cjson_comparator =  cJSON_GetObjectItem(quantity, "comparator");
	if(cjson_comparator)
	{
		result_Quantity->comparator = Str8C(cJSON_GetStringValue(cjson_comparator));
	}
	cJSON *cjson_unit =  cJSON_GetObjectItem(quantity, "unit");
	if(cjson_unit)
	{
		result_Quantity->unit = Str8C(cJSON_GetStringValue(cjson_unit));
	}
	cJSON *cjson_system =  cJSON_GetObjectItem(quantity, "system");
	if(cjson_system)
	{
		result_Quantity->system = Str8C(cJSON_GetStringValue(cjson_system));
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(quantity, "code");
	if(cjson_code)
	{
		result_Quantity->code = Str8C(cJSON_GetStringValue(cjson_code));
	}
	return result_Quantity;
}

Range*
Deserialize_Range(Arena *arena, cJSON *range)
{
	Range *result_Range = PushArray(arena, Range, 1);
	result_Range->resourceType = ResourceType::Range;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(range, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(range, "id");
	if(cjson_id)
	{
		result_Range->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(range, "extension");
	if(cjson_extension)
	{
		result_Range->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Range->extension = PushArray(arena, Extension, result_Range->extension_count);
		for(int i = 0; i < result_Range->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Range->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_low =  cJSON_GetObjectItem(range, "low");
	if(cjson_low)
	{
		result_Range->low = Deserialize_Quantity(arena, cjson_low);
	}
	cJSON *cjson_high =  cJSON_GetObjectItem(range, "high");
	if(cjson_high)
	{
		result_Range->high = Deserialize_Quantity(arena, cjson_high);
	}
	return result_Range;
}

Ratio*
Deserialize_Ratio(Arena *arena, cJSON *ratio)
{
	Ratio *result_Ratio = PushArray(arena, Ratio, 1);
	result_Ratio->resourceType = ResourceType::Ratio;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(ratio, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(ratio, "id");
	if(cjson_id)
	{
		result_Ratio->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(ratio, "extension");
	if(cjson_extension)
	{
		result_Ratio->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Ratio->extension = PushArray(arena, Extension, result_Ratio->extension_count);
		for(int i = 0; i < result_Ratio->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Ratio->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_numerator =  cJSON_GetObjectItem(ratio, "numerator");
	if(cjson_numerator)
	{
		result_Ratio->numerator = Deserialize_Quantity(arena, cjson_numerator);
	}
	cJSON *cjson_denominator =  cJSON_GetObjectItem(ratio, "denominator");
	if(cjson_denominator)
	{
		result_Ratio->denominator = Deserialize_Quantity(arena, cjson_denominator);
	}
	return result_Ratio;
}

Reference*
Deserialize_Reference(Arena *arena, cJSON *reference)
{
	Reference *result_Reference = PushArray(arena, Reference, 1);
	result_Reference->resourceType = ResourceType::Reference;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(reference, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(reference, "id");
	if(cjson_id)
	{
		result_Reference->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(reference, "extension");
	if(cjson_extension)
	{
		result_Reference->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Reference->extension = PushArray(arena, Extension, result_Reference->extension_count);
		for(int i = 0; i < result_Reference->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Reference->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_reference =  cJSON_GetObjectItem(reference, "reference");
	if(cjson_reference)
	{
		result_Reference->reference = Str8C(cJSON_GetStringValue(cjson_reference));
	}
	cJSON *cjson_type =  cJSON_GetObjectItem(reference, "type");
	if(cjson_type)
	{
		result_Reference->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_identifier =  cJSON_GetObjectItem(reference, "identifier");
	if(cjson_identifier)
	{
		result_Reference->identifier = Deserialize_Identifier(arena, cjson_identifier);
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(reference, "display");
	if(cjson_display)
	{
		result_Reference->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	return result_Reference;
}

RelatedArtifact*
Deserialize_RelatedArtifact(Arena *arena, cJSON *relatedArtifact)
{
	RelatedArtifact *result_RelatedArtifact = PushArray(arena, RelatedArtifact, 1);
	result_RelatedArtifact->resourceType = ResourceType::RelatedArtifact;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(relatedArtifact, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(relatedArtifact, "id");
	if(cjson_id)
	{
		result_RelatedArtifact->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(relatedArtifact, "extension");
	if(cjson_extension)
	{
		result_RelatedArtifact->extension_count = cJSON_GetArraySize(cjson_extension);
		result_RelatedArtifact->extension = PushArray(arena, Extension, result_RelatedArtifact->extension_count);
		for(int i = 0; i < result_RelatedArtifact->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_RelatedArtifact->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(relatedArtifact, "type");
	if(cjson_type)
	{
		result_RelatedArtifact->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_label =  cJSON_GetObjectItem(relatedArtifact, "label");
	if(cjson_label)
	{
		result_RelatedArtifact->label = Str8C(cJSON_GetStringValue(cjson_label));
	}
	cJSON *cjson_display =  cJSON_GetObjectItem(relatedArtifact, "display");
	if(cjson_display)
	{
		result_RelatedArtifact->display = Str8C(cJSON_GetStringValue(cjson_display));
	}
	cJSON *cjson_citation =  cJSON_GetObjectItem(relatedArtifact, "citation");
	if(cjson_citation)
	{
		result_RelatedArtifact->citation = Str8C(cJSON_GetStringValue(cjson_citation));
	}
	cJSON *cjson_url =  cJSON_GetObjectItem(relatedArtifact, "url");
	if(cjson_url)
	{
		result_RelatedArtifact->url = Str8C(cJSON_GetStringValue(cjson_url));
	}
	cJSON *cjson_document =  cJSON_GetObjectItem(relatedArtifact, "document");
	if(cjson_document)
	{
		result_RelatedArtifact->document = Deserialize_Attachment(arena, cjson_document);
	}
	cJSON *cjson_resource =  cJSON_GetObjectItem(relatedArtifact, "resource");
	if(cjson_resource)
	{
		result_RelatedArtifact->resource = Str8C(cJSON_GetStringValue(cjson_resource));
	}
	return result_RelatedArtifact;
}

SampledData*
Deserialize_SampledData(Arena *arena, cJSON *sampledData)
{
	SampledData *result_SampledData = PushArray(arena, SampledData, 1);
	result_SampledData->resourceType = ResourceType::SampledData;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(sampledData, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(sampledData, "id");
	if(cjson_id)
	{
		result_SampledData->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(sampledData, "extension");
	if(cjson_extension)
	{
		result_SampledData->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SampledData->extension = PushArray(arena, Extension, result_SampledData->extension_count);
		for(int i = 0; i < result_SampledData->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SampledData->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_origin =  cJSON_GetObjectItem(sampledData, "origin");
	if(cjson_origin)
	{
		result_SampledData->origin = Deserialize_Quantity(arena, cjson_origin);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(sampledData, "period");
	if(cjson_period)
	{
		result_SampledData->period = cJSON_GetNumberValue(cjson_period);
	}
	cJSON *cjson_factor =  cJSON_GetObjectItem(sampledData, "factor");
	if(cjson_factor)
	{
		result_SampledData->factor = cJSON_GetNumberValue(cjson_factor);
	}
	cJSON *cjson_lowerLimit =  cJSON_GetObjectItem(sampledData, "lowerLimit");
	if(cjson_lowerLimit)
	{
		result_SampledData->lowerLimit = cJSON_GetNumberValue(cjson_lowerLimit);
	}
	cJSON *cjson_upperLimit =  cJSON_GetObjectItem(sampledData, "upperLimit");
	if(cjson_upperLimit)
	{
		result_SampledData->upperLimit = cJSON_GetNumberValue(cjson_upperLimit);
	}
	cJSON *cjson_dimensions =  cJSON_GetObjectItem(sampledData, "dimensions");
	if(cjson_dimensions)
	{
		result_SampledData->dimensions = (int)cJSON_GetNumberValue(cjson_dimensions);
	}
	cJSON *cjson_data =  cJSON_GetObjectItem(sampledData, "data");
	if(cjson_data)
	{
		result_SampledData->data = Str8C(cJSON_GetStringValue(cjson_data));
	}
	return result_SampledData;
}

Signature*
Deserialize_Signature(Arena *arena, cJSON *signature)
{
	Signature *result_Signature = PushArray(arena, Signature, 1);
	result_Signature->resourceType = ResourceType::Signature;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(signature, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(signature, "id");
	if(cjson_id)
	{
		result_Signature->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(signature, "extension");
	if(cjson_extension)
	{
		result_Signature->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Signature->extension = PushArray(arena, Extension, result_Signature->extension_count);
		for(int i = 0; i < result_Signature->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Signature->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(signature, "type");
	if(cjson_type)
	{
		result_Signature->type_count = cJSON_GetArraySize(cjson_type);
		result_Signature->type = PushArray(arena, Coding, result_Signature->type_count);
		for(int i = 0; i < result_Signature->type_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_type, i);
			result_Signature->type[i] = *Deserialize_Coding(arena, internal);
		}

	}
	cJSON *cjson_when =  cJSON_GetObjectItem(signature, "when");
	if(cjson_when)
	{
		result_Signature->when = Str8C(cJSON_GetStringValue(cjson_when));
	}
	cJSON *cjson_who =  cJSON_GetObjectItem(signature, "who");
	if(cjson_who)
	{
		result_Signature->who = Deserialize_Reference(arena, cjson_who);
	}
	cJSON *cjson_onBehalfOf =  cJSON_GetObjectItem(signature, "onBehalfOf");
	if(cjson_onBehalfOf)
	{
		result_Signature->onBehalfOf = Deserialize_Reference(arena, cjson_onBehalfOf);
	}
	cJSON *cjson_targetFormat =  cJSON_GetObjectItem(signature, "targetFormat");
	if(cjson_targetFormat)
	{
		result_Signature->targetFormat = Str8C(cJSON_GetStringValue(cjson_targetFormat));
	}
	cJSON *cjson_sigFormat =  cJSON_GetObjectItem(signature, "sigFormat");
	if(cjson_sigFormat)
	{
		result_Signature->sigFormat = Str8C(cJSON_GetStringValue(cjson_sigFormat));
	}
	cJSON *cjson_data =  cJSON_GetObjectItem(signature, "data");
	if(cjson_data)
	{
		result_Signature->data = Str8C(cJSON_GetStringValue(cjson_data));
	}
	return result_Signature;
}

SubstanceAmount*
Deserialize_SubstanceAmount(Arena *arena, cJSON *substanceAmount)
{
	SubstanceAmount *result_SubstanceAmount = PushArray(arena, SubstanceAmount, 1);
	result_SubstanceAmount->resourceType = ResourceType::SubstanceAmount;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceAmount, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceAmount, "id");
	if(cjson_id)
	{
		result_SubstanceAmount->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceAmount, "extension");
	if(cjson_extension)
	{
		result_SubstanceAmount->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceAmount->extension = PushArray(arena, Extension, result_SubstanceAmount->extension_count);
		for(int i = 0; i < result_SubstanceAmount->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceAmount->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(substanceAmount, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_SubstanceAmount->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_SubstanceAmount->modifierExtension = PushArray(arena, Extension, result_SubstanceAmount->modifierExtension_count);
		for(int i = 0; i < result_SubstanceAmount->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_SubstanceAmount->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(substanceAmount, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceAmount, "valueQuantity");
		result_SubstanceAmount->amount.valueQuantity = Deserialize_Quantity(arena, item);
		result_SubstanceAmount->amount_type = SubstanceAmount::AmountType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(substanceAmount, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceAmount, "valueRange");
		result_SubstanceAmount->amount.valueRange = Deserialize_Range(arena, item);
		result_SubstanceAmount->amount_type = SubstanceAmount::AmountType::Range;
	}
	else if((bool)cJSON_HasObjectItem(substanceAmount, "valueString"))	
	{
		cJSON *item = cJSON_GetObjectItem(substanceAmount, "valueString");
		result_SubstanceAmount->amount.valueString = Str8C(cJSON_GetStringValue(item));
		result_SubstanceAmount->amount_type = SubstanceAmount::AmountType::fhir_string;
	}


	cJSON *cjson_amountType =  cJSON_GetObjectItem(substanceAmount, "amountType");
	if(cjson_amountType)
	{
		result_SubstanceAmount->amountType = Deserialize_CodeableConcept(arena, cjson_amountType);
	}
	cJSON *cjson_amountText =  cJSON_GetObjectItem(substanceAmount, "amountText");
	if(cjson_amountText)
	{
		result_SubstanceAmount->amountText = Str8C(cJSON_GetStringValue(cjson_amountText));
	}
	cJSON *cjson_referenceRange =  cJSON_GetObjectItem(substanceAmount, "referenceRange");
	if(cjson_referenceRange)
	{
		result_SubstanceAmount->referenceRange = Deserialize_SubstanceAmount_ReferenceRange(arena, cjson_referenceRange);
	}
	return result_SubstanceAmount;
}

SubstanceAmount_ReferenceRange*
Deserialize_SubstanceAmount_ReferenceRange(Arena *arena, cJSON *substanceAmount_ReferenceRange)
{
	SubstanceAmount_ReferenceRange *result_SubstanceAmount_ReferenceRange = PushArray(arena, SubstanceAmount_ReferenceRange, 1);
	result_SubstanceAmount_ReferenceRange->resourceType = ResourceType::SubstanceAmount_ReferenceRange;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(substanceAmount_ReferenceRange, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(substanceAmount_ReferenceRange, "id");
	if(cjson_id)
	{
		result_SubstanceAmount_ReferenceRange->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(substanceAmount_ReferenceRange, "extension");
	if(cjson_extension)
	{
		result_SubstanceAmount_ReferenceRange->extension_count = cJSON_GetArraySize(cjson_extension);
		result_SubstanceAmount_ReferenceRange->extension = PushArray(arena, Extension, result_SubstanceAmount_ReferenceRange->extension_count);
		for(int i = 0; i < result_SubstanceAmount_ReferenceRange->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_SubstanceAmount_ReferenceRange->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_lowLimit =  cJSON_GetObjectItem(substanceAmount_ReferenceRange, "lowLimit");
	if(cjson_lowLimit)
	{
		result_SubstanceAmount_ReferenceRange->lowLimit = Deserialize_Quantity(arena, cjson_lowLimit);
	}
	cJSON *cjson_highLimit =  cJSON_GetObjectItem(substanceAmount_ReferenceRange, "highLimit");
	if(cjson_highLimit)
	{
		result_SubstanceAmount_ReferenceRange->highLimit = Deserialize_Quantity(arena, cjson_highLimit);
	}
	return result_SubstanceAmount_ReferenceRange;
}

Timing*
Deserialize_Timing(Arena *arena, cJSON *timing)
{
	Timing *result_Timing = PushArray(arena, Timing, 1);
	result_Timing->resourceType = ResourceType::Timing;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(timing, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(timing, "id");
	if(cjson_id)
	{
		result_Timing->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(timing, "extension");
	if(cjson_extension)
	{
		result_Timing->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Timing->extension = PushArray(arena, Extension, result_Timing->extension_count);
		for(int i = 0; i < result_Timing->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Timing->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_modifierExtension =  cJSON_GetObjectItem(timing, "modifierExtension");
	if(cjson_modifierExtension)
	{
		result_Timing->modifierExtension_count = cJSON_GetArraySize(cjson_modifierExtension);
		result_Timing->modifierExtension = PushArray(arena, Extension, result_Timing->modifierExtension_count);
		for(int i = 0; i < result_Timing->modifierExtension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_modifierExtension, i);
			result_Timing->modifierExtension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_event =  cJSON_GetObjectItem(timing, "event");
	if(cjson_event)
	{
		result_Timing->event_count = cJSON_GetArraySize(cjson_event);
		result_Timing->event = PushArray(arena, fhir_dateTime, result_Timing->event_count);
		for(int i = 0; i < result_Timing->event_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_event, i);
			result_Timing->event[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_repeat =  cJSON_GetObjectItem(timing, "repeat");
	if(cjson_repeat)
	{
		result_Timing->repeat = Deserialize_Timing_Repeat(arena, cjson_repeat);
	}
	cJSON *cjson_code =  cJSON_GetObjectItem(timing, "code");
	if(cjson_code)
	{
		result_Timing->code = Deserialize_CodeableConcept(arena, cjson_code);
	}
	return result_Timing;
}

Timing_Repeat*
Deserialize_Timing_Repeat(Arena *arena, cJSON *timing_Repeat)
{
	Timing_Repeat *result_Timing_Repeat = PushArray(arena, Timing_Repeat, 1);
	result_Timing_Repeat->resourceType = ResourceType::Timing_Repeat;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(timing_Repeat, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(timing_Repeat, "id");
	if(cjson_id)
	{
		result_Timing_Repeat->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(timing_Repeat, "extension");
	if(cjson_extension)
	{
		result_Timing_Repeat->extension_count = cJSON_GetArraySize(cjson_extension);
		result_Timing_Repeat->extension = PushArray(arena, Extension, result_Timing_Repeat->extension_count);
		for(int i = 0; i < result_Timing_Repeat->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_Timing_Repeat->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	if((bool)cJSON_HasObjectItem(timing_Repeat, "valueDuration"))	
	{
		cJSON *item = cJSON_GetObjectItem(timing_Repeat, "valueDuration");
		result_Timing_Repeat->bounds.valueDuration = Deserialize_Duration(arena, item);
		result_Timing_Repeat->bounds_type = Timing_Repeat::BoundsType::Duration;
	}
	else if((bool)cJSON_HasObjectItem(timing_Repeat, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(timing_Repeat, "valueRange");
		result_Timing_Repeat->bounds.valueRange = Deserialize_Range(arena, item);
		result_Timing_Repeat->bounds_type = Timing_Repeat::BoundsType::Range;
	}
	else if((bool)cJSON_HasObjectItem(timing_Repeat, "valuePeriod"))	
	{
		cJSON *item = cJSON_GetObjectItem(timing_Repeat, "valuePeriod");
		result_Timing_Repeat->bounds.valuePeriod = Deserialize_Period(arena, item);
		result_Timing_Repeat->bounds_type = Timing_Repeat::BoundsType::Period;
	}


	cJSON *cjson_count =  cJSON_GetObjectItem(timing_Repeat, "count");
	if(cjson_count)
	{
		result_Timing_Repeat->count = (int)cJSON_GetNumberValue(cjson_count);
	}
	cJSON *cjson_countMax =  cJSON_GetObjectItem(timing_Repeat, "countMax");
	if(cjson_countMax)
	{
		result_Timing_Repeat->countMax = (int)cJSON_GetNumberValue(cjson_countMax);
	}
	cJSON *cjson_duration =  cJSON_GetObjectItem(timing_Repeat, "duration");
	if(cjson_duration)
	{
		result_Timing_Repeat->duration = cJSON_GetNumberValue(cjson_duration);
	}
	cJSON *cjson_durationMax =  cJSON_GetObjectItem(timing_Repeat, "durationMax");
	if(cjson_durationMax)
	{
		result_Timing_Repeat->durationMax = cJSON_GetNumberValue(cjson_durationMax);
	}
	cJSON *cjson_durationUnit =  cJSON_GetObjectItem(timing_Repeat, "durationUnit");
	if(cjson_durationUnit)
	{
		result_Timing_Repeat->durationUnit = Str8C(cJSON_GetStringValue(cjson_durationUnit));
	}
	cJSON *cjson_frequency =  cJSON_GetObjectItem(timing_Repeat, "frequency");
	if(cjson_frequency)
	{
		result_Timing_Repeat->frequency = (int)cJSON_GetNumberValue(cjson_frequency);
	}
	cJSON *cjson_frequencyMax =  cJSON_GetObjectItem(timing_Repeat, "frequencyMax");
	if(cjson_frequencyMax)
	{
		result_Timing_Repeat->frequencyMax = (int)cJSON_GetNumberValue(cjson_frequencyMax);
	}
	cJSON *cjson_period =  cJSON_GetObjectItem(timing_Repeat, "period");
	if(cjson_period)
	{
		result_Timing_Repeat->period = cJSON_GetNumberValue(cjson_period);
	}
	cJSON *cjson_periodMax =  cJSON_GetObjectItem(timing_Repeat, "periodMax");
	if(cjson_periodMax)
	{
		result_Timing_Repeat->periodMax = cJSON_GetNumberValue(cjson_periodMax);
	}
	cJSON *cjson_periodUnit =  cJSON_GetObjectItem(timing_Repeat, "periodUnit");
	if(cjson_periodUnit)
	{
		result_Timing_Repeat->periodUnit = Str8C(cJSON_GetStringValue(cjson_periodUnit));
	}
	cJSON *cjson_dayOfWeek =  cJSON_GetObjectItem(timing_Repeat, "dayOfWeek");
	if(cjson_dayOfWeek)
	{
		result_Timing_Repeat->dayOfWeek_count = cJSON_GetArraySize(cjson_dayOfWeek);
		result_Timing_Repeat->dayOfWeek = PushArray(arena, fhir_code, result_Timing_Repeat->dayOfWeek_count);
		for(int i = 0; i < result_Timing_Repeat->dayOfWeek_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_dayOfWeek, i);
			result_Timing_Repeat->dayOfWeek[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_timeOfDay =  cJSON_GetObjectItem(timing_Repeat, "timeOfDay");
	if(cjson_timeOfDay)
	{
		result_Timing_Repeat->timeOfDay_count = cJSON_GetArraySize(cjson_timeOfDay);
		result_Timing_Repeat->timeOfDay = PushArray(arena, fhir_time, result_Timing_Repeat->timeOfDay_count);
		for(int i = 0; i < result_Timing_Repeat->timeOfDay_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_timeOfDay, i);
			result_Timing_Repeat->timeOfDay[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_when =  cJSON_GetObjectItem(timing_Repeat, "when");
	if(cjson_when)
	{
		result_Timing_Repeat->when_count = cJSON_GetArraySize(cjson_when);
		result_Timing_Repeat->when = PushArray(arena, fhir_code, result_Timing_Repeat->when_count);
		for(int i = 0; i < result_Timing_Repeat->when_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_when, i);
			result_Timing_Repeat->when[i] = Str8C(cJSON_GetStringValue(internal));
		}

	}
	cJSON *cjson_offset =  cJSON_GetObjectItem(timing_Repeat, "offset");
	if(cjson_offset)
	{
		result_Timing_Repeat->offset = (int)cJSON_GetNumberValue(cjson_offset);
	}
	return result_Timing_Repeat;
}

TriggerDefinition*
Deserialize_TriggerDefinition(Arena *arena, cJSON *triggerDefinition)
{
	TriggerDefinition *result_TriggerDefinition = PushArray(arena, TriggerDefinition, 1);
	result_TriggerDefinition->resourceType = ResourceType::TriggerDefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(triggerDefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(triggerDefinition, "id");
	if(cjson_id)
	{
		result_TriggerDefinition->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(triggerDefinition, "extension");
	if(cjson_extension)
	{
		result_TriggerDefinition->extension_count = cJSON_GetArraySize(cjson_extension);
		result_TriggerDefinition->extension = PushArray(arena, Extension, result_TriggerDefinition->extension_count);
		for(int i = 0; i < result_TriggerDefinition->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_TriggerDefinition->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_type =  cJSON_GetObjectItem(triggerDefinition, "type");
	if(cjson_type)
	{
		result_TriggerDefinition->type = Str8C(cJSON_GetStringValue(cjson_type));
	}
	cJSON *cjson_name =  cJSON_GetObjectItem(triggerDefinition, "name");
	if(cjson_name)
	{
		result_TriggerDefinition->name = Str8C(cJSON_GetStringValue(cjson_name));
	}
	if((bool)cJSON_HasObjectItem(triggerDefinition, "valueTiming"))	
	{
		cJSON *item = cJSON_GetObjectItem(triggerDefinition, "valueTiming");
		result_TriggerDefinition->timing.valueTiming = Deserialize_Timing(arena, item);
		result_TriggerDefinition->timing_type = TriggerDefinition::TimingType::Timing;
	}
	else if((bool)cJSON_HasObjectItem(triggerDefinition, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(triggerDefinition, "valueReference");
		result_TriggerDefinition->timing.valueReference = Deserialize_Reference(arena, item);
		result_TriggerDefinition->timing_type = TriggerDefinition::TimingType::Reference;
	}
	else if((bool)cJSON_HasObjectItem(triggerDefinition, "valueDate"))	
	{
		cJSON *item = cJSON_GetObjectItem(triggerDefinition, "valueDate");
		result_TriggerDefinition->timing.valueDate = Str8C(cJSON_GetStringValue(item));
		result_TriggerDefinition->timing_type = TriggerDefinition::TimingType::fhir_date;
	}
	else if((bool)cJSON_HasObjectItem(triggerDefinition, "valueDateTime"))	
	{
		cJSON *item = cJSON_GetObjectItem(triggerDefinition, "valueDateTime");
		result_TriggerDefinition->timing.valueDateTime = Str8C(cJSON_GetStringValue(item));
		result_TriggerDefinition->timing_type = TriggerDefinition::TimingType::fhir_dateTime;
	}


	cJSON *cjson_data =  cJSON_GetObjectItem(triggerDefinition, "data");
	if(cjson_data)
	{
		result_TriggerDefinition->data_count = cJSON_GetArraySize(cjson_data);
		result_TriggerDefinition->data = PushArray(arena, DataRequirement, result_TriggerDefinition->data_count);
		for(int i = 0; i < result_TriggerDefinition->data_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_data, i);
			result_TriggerDefinition->data[i] = *Deserialize_DataRequirement(arena, internal);
		}

	}
	cJSON *cjson_condition =  cJSON_GetObjectItem(triggerDefinition, "condition");
	if(cjson_condition)
	{
		result_TriggerDefinition->condition = Deserialize_Expression(arena, cjson_condition);
	}
	return result_TriggerDefinition;
}

UsageContext*
Deserialize_UsageContext(Arena *arena, cJSON *usageContext)
{
	UsageContext *result_UsageContext = PushArray(arena, UsageContext, 1);
	result_UsageContext->resourceType = ResourceType::UsageContext;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(usageContext, "resourceType");
	if(cjson_resourceType)
	{

	}
	cJSON *cjson_id =  cJSON_GetObjectItem(usageContext, "id");
	if(cjson_id)
	{
		result_UsageContext->id = Str8C(cJSON_GetStringValue(cjson_id));
	}
	cJSON *cjson_extension =  cJSON_GetObjectItem(usageContext, "extension");
	if(cjson_extension)
	{
		result_UsageContext->extension_count = cJSON_GetArraySize(cjson_extension);
		result_UsageContext->extension = PushArray(arena, Extension, result_UsageContext->extension_count);
		for(int i = 0; i < result_UsageContext->extension_count; i++)
		{
			cJSON *internal = cJSON_GetArrayItem(cjson_extension, i);
			result_UsageContext->extension[i] = *Deserialize_Extension(arena, internal);
		}

	}
	cJSON *cjson_code =  cJSON_GetObjectItem(usageContext, "code");
	if(cjson_code)
	{
		result_UsageContext->code = Deserialize_Coding(arena, cjson_code);
	}
	if((bool)cJSON_HasObjectItem(usageContext, "valueCodeableConcept"))	
	{
		cJSON *item = cJSON_GetObjectItem(usageContext, "valueCodeableConcept");
		result_UsageContext->value.valueCodeableConcept = Deserialize_CodeableConcept(arena, item);
		result_UsageContext->value_type = UsageContext::ValueType::CodeableConcept;
	}
	else if((bool)cJSON_HasObjectItem(usageContext, "valueQuantity"))	
	{
		cJSON *item = cJSON_GetObjectItem(usageContext, "valueQuantity");
		result_UsageContext->value.valueQuantity = Deserialize_Quantity(arena, item);
		result_UsageContext->value_type = UsageContext::ValueType::Quantity;
	}
	else if((bool)cJSON_HasObjectItem(usageContext, "valueRange"))	
	{
		cJSON *item = cJSON_GetObjectItem(usageContext, "valueRange");
		result_UsageContext->value.valueRange = Deserialize_Range(arena, item);
		result_UsageContext->value_type = UsageContext::ValueType::Range;
	}
	else if((bool)cJSON_HasObjectItem(usageContext, "valueReference"))	
	{
		cJSON *item = cJSON_GetObjectItem(usageContext, "valueReference");
		result_UsageContext->value.valueReference = Deserialize_Reference(arena, item);
		result_UsageContext->value_type = UsageContext::ValueType::Reference;
	}


	return result_UsageContext;
}

MoneyQuantity*
Deserialize_MoneyQuantity(Arena *arena, cJSON *moneyQuantity)
{
	MoneyQuantity *result_MoneyQuantity = PushArray(arena, MoneyQuantity, 1);
	result_MoneyQuantity->resourceType = ResourceType::MoneyQuantity;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(moneyQuantity, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_MoneyQuantity;
}

SimpleQuantity*
Deserialize_SimpleQuantity(Arena *arena, cJSON *simpleQuantity)
{
	SimpleQuantity *result_SimpleQuantity = PushArray(arena, SimpleQuantity, 1);
	result_SimpleQuantity->resourceType = ResourceType::SimpleQuantity;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(simpleQuantity, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_SimpleQuantity;
}

Shareablemeasure*
Deserialize_Shareablemeasure(Arena *arena, cJSON *shareablemeasure)
{
	Shareablemeasure *result_Shareablemeasure = PushArray(arena, Shareablemeasure, 1);
	result_Shareablemeasure->resourceType = ResourceType::Shareablemeasure;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(shareablemeasure, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Shareablemeasure;
}

Servicerequest_genetics*
Deserialize_Servicerequest_genetics(Arena *arena, cJSON *servicerequest_genetics)
{
	Servicerequest_genetics *result_Servicerequest_genetics = PushArray(arena, Servicerequest_genetics, 1);
	result_Servicerequest_genetics->resourceType = ResourceType::Servicerequest_genetics;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(servicerequest_genetics, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Servicerequest_genetics;
}

Groupdefinition*
Deserialize_Groupdefinition(Arena *arena, cJSON *groupdefinition)
{
	Groupdefinition *result_Groupdefinition = PushArray(arena, Groupdefinition, 1);
	result_Groupdefinition->resourceType = ResourceType::Groupdefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(groupdefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Groupdefinition;
}

Actualgroup*
Deserialize_Actualgroup(Arena *arena, cJSON *actualgroup)
{
	Actualgroup *result_Actualgroup = PushArray(arena, Actualgroup, 1);
	result_Actualgroup->resourceType = ResourceType::Actualgroup;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(actualgroup, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Actualgroup;
}

Familymemberhistory_genetic*
Deserialize_Familymemberhistory_genetic(Arena *arena, cJSON *familymemberhistory_genetic)
{
	Familymemberhistory_genetic *result_Familymemberhistory_genetic = PushArray(arena, Familymemberhistory_genetic, 1);
	result_Familymemberhistory_genetic->resourceType = ResourceType::Familymemberhistory_genetic;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(familymemberhistory_genetic, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Familymemberhistory_genetic;
}

Shareableactivitydefinition*
Deserialize_Shareableactivitydefinition(Arena *arena, cJSON *shareableactivitydefinition)
{
	Shareableactivitydefinition *result_Shareableactivitydefinition = PushArray(arena, Shareableactivitydefinition, 1);
	result_Shareableactivitydefinition->resourceType = ResourceType::Shareableactivitydefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(shareableactivitydefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Shareableactivitydefinition;
}

Cdshooksrequestgroup*
Deserialize_Cdshooksrequestgroup(Arena *arena, cJSON *cdshooksrequestgroup)
{
	Cdshooksrequestgroup *result_Cdshooksrequestgroup = PushArray(arena, Cdshooksrequestgroup, 1);
	result_Cdshooksrequestgroup->resourceType = ResourceType::Cdshooksrequestgroup;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(cdshooksrequestgroup, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Cdshooksrequestgroup;
}

Provenance_relevant_history*
Deserialize_Provenance_relevant_history(Arena *arena, cJSON *provenance_relevant_history)
{
	Provenance_relevant_history *result_Provenance_relevant_history = PushArray(arena, Provenance_relevant_history, 1);
	result_Provenance_relevant_history->resourceType = ResourceType::Provenance_relevant_history;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(provenance_relevant_history, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Provenance_relevant_history;
}

Cqf_questionnaire*
Deserialize_Cqf_questionnaire(Arena *arena, cJSON *cqf_questionnaire)
{
	Cqf_questionnaire *result_Cqf_questionnaire = PushArray(arena, Cqf_questionnaire, 1);
	result_Cqf_questionnaire->resourceType = ResourceType::Cqf_questionnaire;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(cqf_questionnaire, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Cqf_questionnaire;
}

Shareablevalueset*
Deserialize_Shareablevalueset(Arena *arena, cJSON *shareablevalueset)
{
	Shareablevalueset *result_Shareablevalueset = PushArray(arena, Shareablevalueset, 1);
	result_Shareablevalueset->resourceType = ResourceType::Shareablevalueset;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(shareablevalueset, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Shareablevalueset;
}

Picoelement*
Deserialize_Picoelement(Arena *arena, cJSON *picoelement)
{
	Picoelement *result_Picoelement = PushArray(arena, Picoelement, 1);
	result_Picoelement->resourceType = ResourceType::Picoelement;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(picoelement, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Picoelement;
}

Shareablecodesystem*
Deserialize_Shareablecodesystem(Arena *arena, cJSON *shareablecodesystem)
{
	Shareablecodesystem *result_Shareablecodesystem = PushArray(arena, Shareablecodesystem, 1);
	result_Shareablecodesystem->resourceType = ResourceType::Shareablecodesystem;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(shareablecodesystem, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Shareablecodesystem;
}

Cdshooksguidanceresponse*
Deserialize_Cdshooksguidanceresponse(Arena *arena, cJSON *cdshooksguidanceresponse)
{
	Cdshooksguidanceresponse *result_Cdshooksguidanceresponse = PushArray(arena, Cdshooksguidanceresponse, 1);
	result_Cdshooksguidanceresponse->resourceType = ResourceType::Cdshooksguidanceresponse;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(cdshooksguidanceresponse, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Cdshooksguidanceresponse;
}

Devicemetricobservation*
Deserialize_Devicemetricobservation(Arena *arena, cJSON *devicemetricobservation)
{
	Devicemetricobservation *result_Devicemetricobservation = PushArray(arena, Devicemetricobservation, 1);
	result_Devicemetricobservation->resourceType = ResourceType::Devicemetricobservation;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(devicemetricobservation, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Devicemetricobservation;
}

Observation_genetics*
Deserialize_Observation_genetics(Arena *arena, cJSON *observation_genetics)
{
	Observation_genetics *result_Observation_genetics = PushArray(arena, Observation_genetics, 1);
	result_Observation_genetics->resourceType = ResourceType::Observation_genetics;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(observation_genetics, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Observation_genetics;
}

Vitalsigns*
Deserialize_Vitalsigns(Arena *arena, cJSON *vitalsigns)
{
	Vitalsigns *result_Vitalsigns = PushArray(arena, Vitalsigns, 1);
	result_Vitalsigns->resourceType = ResourceType::Vitalsigns;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(vitalsigns, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Vitalsigns;
}

Bodyweight*
Deserialize_Bodyweight(Arena *arena, cJSON *bodyweight)
{
	Bodyweight *result_Bodyweight = PushArray(arena, Bodyweight, 1);
	result_Bodyweight->resourceType = ResourceType::Bodyweight;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bodyweight, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Bodyweight;
}

Vitalspanel*
Deserialize_Vitalspanel(Arena *arena, cJSON *vitalspanel)
{
	Vitalspanel *result_Vitalspanel = PushArray(arena, Vitalspanel, 1);
	result_Vitalspanel->resourceType = ResourceType::Vitalspanel;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(vitalspanel, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Vitalspanel;
}

Bodyheight*
Deserialize_Bodyheight(Arena *arena, cJSON *bodyheight)
{
	Bodyheight *result_Bodyheight = PushArray(arena, Bodyheight, 1);
	result_Bodyheight->resourceType = ResourceType::Bodyheight;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bodyheight, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Bodyheight;
}

Resprate*
Deserialize_Resprate(Arena *arena, cJSON *resprate)
{
	Resprate *result_Resprate = PushArray(arena, Resprate, 1);
	result_Resprate->resourceType = ResourceType::Resprate;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(resprate, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Resprate;
}

Heartrate*
Deserialize_Heartrate(Arena *arena, cJSON *heartrate)
{
	Heartrate *result_Heartrate = PushArray(arena, Heartrate, 1);
	result_Heartrate->resourceType = ResourceType::Heartrate;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(heartrate, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Heartrate;
}

Bodytemp*
Deserialize_Bodytemp(Arena *arena, cJSON *bodytemp)
{
	Bodytemp *result_Bodytemp = PushArray(arena, Bodytemp, 1);
	result_Bodytemp->resourceType = ResourceType::Bodytemp;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bodytemp, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Bodytemp;
}

Headcircum*
Deserialize_Headcircum(Arena *arena, cJSON *headcircum)
{
	Headcircum *result_Headcircum = PushArray(arena, Headcircum, 1);
	result_Headcircum->resourceType = ResourceType::Headcircum;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(headcircum, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Headcircum;
}

Oxygensat*
Deserialize_Oxygensat(Arena *arena, cJSON *oxygensat)
{
	Oxygensat *result_Oxygensat = PushArray(arena, Oxygensat, 1);
	result_Oxygensat->resourceType = ResourceType::Oxygensat;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(oxygensat, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Oxygensat;
}

Bmi*
Deserialize_Bmi(Arena *arena, cJSON *bmi)
{
	Bmi *result_Bmi = PushArray(arena, Bmi, 1);
	result_Bmi->resourceType = ResourceType::Bmi;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bmi, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Bmi;
}

Bp*
Deserialize_Bp(Arena *arena, cJSON *bp)
{
	Bp *result_Bp = PushArray(arena, Bp, 1);
	result_Bp->resourceType = ResourceType::Bp;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(bp, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Bp;
}

Shareablelibrary*
Deserialize_Shareablelibrary(Arena *arena, cJSON *shareablelibrary)
{
	Shareablelibrary *result_Shareablelibrary = PushArray(arena, Shareablelibrary, 1);
	result_Shareablelibrary->resourceType = ResourceType::Shareablelibrary;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(shareablelibrary, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Shareablelibrary;
}

Cqllibrary*
Deserialize_Cqllibrary(Arena *arena, cJSON *cqllibrary)
{
	Cqllibrary *result_Cqllibrary = PushArray(arena, Cqllibrary, 1);
	result_Cqllibrary->resourceType = ResourceType::Cqllibrary;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(cqllibrary, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Cqllibrary;
}

Lipidprofile*
Deserialize_Lipidprofile(Arena *arena, cJSON *lipidprofile)
{
	Lipidprofile *result_Lipidprofile = PushArray(arena, Lipidprofile, 1);
	result_Lipidprofile->resourceType = ResourceType::Lipidprofile;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(lipidprofile, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Lipidprofile;
}

Cholesterol*
Deserialize_Cholesterol(Arena *arena, cJSON *cholesterol)
{
	Cholesterol *result_Cholesterol = PushArray(arena, Cholesterol, 1);
	result_Cholesterol->resourceType = ResourceType::Cholesterol;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(cholesterol, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Cholesterol;
}

Triglyceride*
Deserialize_Triglyceride(Arena *arena, cJSON *triglyceride)
{
	Triglyceride *result_Triglyceride = PushArray(arena, Triglyceride, 1);
	result_Triglyceride->resourceType = ResourceType::Triglyceride;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(triglyceride, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Triglyceride;
}

Hdlcholesterol*
Deserialize_Hdlcholesterol(Arena *arena, cJSON *hdlcholesterol)
{
	Hdlcholesterol *result_Hdlcholesterol = PushArray(arena, Hdlcholesterol, 1);
	result_Hdlcholesterol->resourceType = ResourceType::Hdlcholesterol;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(hdlcholesterol, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Hdlcholesterol;
}

Ldlcholesterol*
Deserialize_Ldlcholesterol(Arena *arena, cJSON *ldlcholesterol)
{
	Ldlcholesterol *result_Ldlcholesterol = PushArray(arena, Ldlcholesterol, 1);
	result_Ldlcholesterol->resourceType = ResourceType::Ldlcholesterol;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(ldlcholesterol, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Ldlcholesterol;
}

Diagnosticreport_genetics*
Deserialize_Diagnosticreport_genetics(Arena *arena, cJSON *diagnosticreport_genetics)
{
	Diagnosticreport_genetics *result_Diagnosticreport_genetics = PushArray(arena, Diagnosticreport_genetics, 1);
	result_Diagnosticreport_genetics->resourceType = ResourceType::Diagnosticreport_genetics;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(diagnosticreport_genetics, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Diagnosticreport_genetics;
}

Hlaresult*
Deserialize_Hlaresult(Arena *arena, cJSON *hlaresult)
{
	Hlaresult *result_Hlaresult = PushArray(arena, Hlaresult, 1);
	result_Hlaresult->resourceType = ResourceType::Hlaresult;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(hlaresult, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Hlaresult;
}

Synthesis*
Deserialize_Synthesis(Arena *arena, cJSON *synthesis)
{
	Synthesis *result_Synthesis = PushArray(arena, Synthesis, 1);
	result_Synthesis->resourceType = ResourceType::Synthesis;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(synthesis, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Synthesis;
}

Clinicaldocument*
Deserialize_Clinicaldocument(Arena *arena, cJSON *clinicaldocument)
{
	Clinicaldocument *result_Clinicaldocument = PushArray(arena, Clinicaldocument, 1);
	result_Clinicaldocument->resourceType = ResourceType::Clinicaldocument;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(clinicaldocument, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Clinicaldocument;
}

Catalog*
Deserialize_Catalog(Arena *arena, cJSON *catalog)
{
	Catalog *result_Catalog = PushArray(arena, Catalog, 1);
	result_Catalog->resourceType = ResourceType::Catalog;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(catalog, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Catalog;
}

Shareableplandefinition*
Deserialize_Shareableplandefinition(Arena *arena, cJSON *shareableplandefinition)
{
	Shareableplandefinition *result_Shareableplandefinition = PushArray(arena, Shareableplandefinition, 1);
	result_Shareableplandefinition->resourceType = ResourceType::Shareableplandefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(shareableplandefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Shareableplandefinition;
}

Computableplandefinition*
Deserialize_Computableplandefinition(Arena *arena, cJSON *computableplandefinition)
{
	Computableplandefinition *result_Computableplandefinition = PushArray(arena, Computableplandefinition, 1);
	result_Computableplandefinition->resourceType = ResourceType::Computableplandefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(computableplandefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Computableplandefinition;
}

Cdshooksserviceplandefinition*
Deserialize_Cdshooksserviceplandefinition(Arena *arena, cJSON *cdshooksserviceplandefinition)
{
	Cdshooksserviceplandefinition *result_Cdshooksserviceplandefinition = PushArray(arena, Cdshooksserviceplandefinition, 1);
	result_Cdshooksserviceplandefinition->resourceType = ResourceType::Cdshooksserviceplandefinition;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(cdshooksserviceplandefinition, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Cdshooksserviceplandefinition;
}

Elementdefinition_de*
Deserialize_Elementdefinition_de(Arena *arena, cJSON *elementdefinition_de)
{
	Elementdefinition_de *result_Elementdefinition_de = PushArray(arena, Elementdefinition_de, 1);
	result_Elementdefinition_de->resourceType = ResourceType::Elementdefinition_de;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(elementdefinition_de, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Elementdefinition_de;
}

Ehrsrle_auditevent*
Deserialize_Ehrsrle_auditevent(Arena *arena, cJSON *ehrsrle_auditevent)
{
	Ehrsrle_auditevent *result_Ehrsrle_auditevent = PushArray(arena, Ehrsrle_auditevent, 1);
	result_Ehrsrle_auditevent->resourceType = ResourceType::Ehrsrle_auditevent;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(ehrsrle_auditevent, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Ehrsrle_auditevent;
}

Ehrsrle_provenance*
Deserialize_Ehrsrle_provenance(Arena *arena, cJSON *ehrsrle_provenance)
{
	Ehrsrle_provenance *result_Ehrsrle_provenance = PushArray(arena, Ehrsrle_provenance, 1);
	result_Ehrsrle_provenance->resourceType = ResourceType::Ehrsrle_provenance;
	cJSON *cjson_resourceType =  cJSON_GetObjectItem(ehrsrle_provenance, "resourceType");
	if(cjson_resourceType)
	{

	}
	return result_Ehrsrle_provenance;
}

