#include <stdbool.h>
typedef double number;
typedef char* xhtml;
typedef int ResourceList;
struct Base;
struct Element;
struct DataType;
struct PrimitiveType;
struct BackboneType;
struct Extension;
struct Narrative;
struct Annotation;
struct Attachment;
struct Identifier;
struct CodeableConcept;
struct CodeableReference;
struct Coding;
struct Quantity;
struct Duration;
struct Distance;
struct Count;
struct Money;
struct Age;
struct Range;
struct Period;
struct Ratio;
struct RatioRange;
struct Reference;
struct SampledData;
struct Signature;
struct HumanName;
struct Address;
struct ContactPoint;
struct Timing;
struct Timing_Repeat;
struct RelativeTime;
struct Meta;
struct ContactDetail;
struct ExtendedContactDetail;
struct VirtualServiceDetail;
struct Availability;
struct Availability_AvailableTime;
struct Availability_NotAvailableTime;
struct MonetaryComponent;
struct Contributor;
struct DataRequirement;
struct DataRequirement_CodeFilter;
struct DataRequirement_DateFilter;
struct DataRequirement_ValueFilter;
struct DataRequirement_Sort;
struct ParameterDefinition;
struct RelatedArtifact;
struct TriggerDefinition;
struct UsageContext;
struct Dosage;
struct Dosage_DoseAndRate;
struct ProductShelfLife;
struct MarketingStatus;
struct Expression;
struct ElementDefinition;
struct ElementDefinition_Slicing;
struct ElementDefinition_Discriminator;
struct ElementDefinition_Base;
struct ElementDefinition_Type;
struct ElementDefinition_Example;
struct ElementDefinition_Constraint;
struct ElementDefinition_Binding;
struct ElementDefinition_Additional;
struct ElementDefinition_Mapping;
struct Account;
struct Account_Coverage;
struct Account_Guarantor;
struct Account_Diagnosis;
struct Account_Procedure;
struct Account_RelatedAccount;
struct Account_Balance;
struct ActivityDefinition;
struct ActivityDefinition_Participant;
struct ActivityDefinition_DynamicValue;
struct ActorDefinition;
struct AdministrableProductDefinition;
struct AdministrableProductDefinition_Property;
struct AdministrableProductDefinition_RouteOfAdministration;
struct AdministrableProductDefinition_TargetSpecies;
struct AdministrableProductDefinition_WithdrawalPeriod;
struct AdverseEvent;
struct AdverseEvent_Participant;
struct AdverseEvent_SuspectEntity;
struct AdverseEvent_Causality;
struct AdverseEvent_ContributingFactor;
struct AdverseEvent_PreventiveAction;
struct AdverseEvent_MitigatingAction;
struct AdverseEvent_SupportingInfo;
struct AllergyIntolerance;
struct AllergyIntolerance_Participant;
struct AllergyIntolerance_Reaction;
struct Appointment;
struct Appointment_Participant;
struct Appointment_RecurrenceTemplate;
struct Appointment_WeeklyTemplate;
struct Appointment_MonthlyTemplate;
struct Appointment_YearlyTemplate;
struct AppointmentResponse;
struct ArtifactAssessment;
struct ArtifactAssessment_Content;
struct AuditEvent;
struct AuditEvent_Outcome;
struct AuditEvent_Agent;
struct AuditEvent_Source;
struct AuditEvent_Entity;
struct AuditEvent_Detail;
struct Basic;
struct Binary;
struct BiologicallyDerivedProduct;
struct BiologicallyDerivedProduct_Collection;
struct BiologicallyDerivedProduct_Property;
struct BiologicallyDerivedProductDispense;
struct BiologicallyDerivedProductDispense_Performer;
struct BodyStructure;
struct BodyStructure_IncludedStructure;
struct BodyStructure_BodyLandmarkOrientation;
struct BodyStructure_DistanceFromLandmark;
struct Bundle;
struct Bundle_Link;
struct Bundle_Entry;
struct Bundle_Search;
struct Bundle_Request;
struct Bundle_Response;
struct CapabilityStatement;
struct CapabilityStatement_Software;
struct CapabilityStatement_Implementation;
struct CapabilityStatement_Rest;
struct CapabilityStatement_Security;
struct CapabilityStatement_Resource;
struct CapabilityStatement_Interaction;
struct CapabilityStatement_SearchParam;
struct CapabilityStatement_Operation;
struct CapabilityStatement_Interaction1;
struct CapabilityStatement_Messaging;
struct CapabilityStatement_Endpoint;
struct CapabilityStatement_SupportedMessage;
struct CapabilityStatement_Document;
struct CarePlan;
struct CarePlan_Activity;
struct CareTeam;
struct CareTeam_Participant;
struct ChargeItem;
struct ChargeItem_Performer;
struct ChargeItemDefinition;
struct ChargeItemDefinition_Applicability;
struct ChargeItemDefinition_PropertyGroup;
struct Citation;
struct Citation_Summary;
struct Citation_Classification;
struct Citation_StatusDate;
struct Citation_CitedArtifact;
struct Citation_Version;
struct Citation_StatusDate1;
struct Citation_Title;
struct Citation_Abstract;
struct Citation_Part;
struct Citation_RelatesTo;
struct Citation_PublicationForm;
struct Citation_PublishedIn;
struct Citation_WebLocation;
struct Citation_Classification1;
struct Citation_Contributorship;
struct Citation_Entry;
struct Citation_ContributionInstance;
struct Citation_Summary1;
struct Claim;
struct Claim_Related;
struct Claim_Payee;
struct Claim_Event;
struct Claim_CareTeam;
struct Claim_SupportingInfo;
struct Claim_Diagnosis;
struct Claim_Procedure;
struct Claim_Insurance;
struct Claim_Accident;
struct Claim_Item;
struct Claim_BodySite;
struct Claim_Detail;
struct Claim_SubDetail;
struct ClaimResponse;
struct ClaimResponse_Event;
struct ClaimResponse_Item;
struct ClaimResponse_ReviewOutcome;
struct ClaimResponse_Adjudication;
struct ClaimResponse_Detail;
struct ClaimResponse_SubDetail;
struct ClaimResponse_AddItem;
struct ClaimResponse_BodySite;
struct ClaimResponse_Detail1;
struct ClaimResponse_SubDetail1;
struct ClaimResponse_Total;
struct ClaimResponse_Payment;
struct ClaimResponse_ProcessNote;
struct ClaimResponse_Insurance;
struct ClaimResponse_Error;
struct ClinicalImpression;
struct ClinicalImpression_Finding;
struct ClinicalUseDefinition;
struct ClinicalUseDefinition_Contraindication;
struct ClinicalUseDefinition_OtherTherapy;
struct ClinicalUseDefinition_Indication;
struct ClinicalUseDefinition_Interaction;
struct ClinicalUseDefinition_Interactant;
struct ClinicalUseDefinition_UndesirableEffect;
struct ClinicalUseDefinition_Warning;
struct CodeSystem;
struct CodeSystem_Filter;
struct CodeSystem_Property;
struct CodeSystem_Concept;
struct CodeSystem_Designation;
struct CodeSystem_Property1;
struct Communication;
struct Communication_Payload;
struct CommunicationRequest;
struct CommunicationRequest_Payload;
struct CompartmentDefinition;
struct CompartmentDefinition_Resource;
struct Composition;
struct Composition_Attester;
struct Composition_Event;
struct Composition_Section;
struct ConceptMap;
struct ConceptMap_Property;
struct ConceptMap_AdditionalAttribute;
struct ConceptMap_Group;
struct ConceptMap_Element;
struct ConceptMap_Target;
struct ConceptMap_Property1;
struct ConceptMap_DependsOn;
struct ConceptMap_Unmapped;
struct Condition;
struct Condition_Participant;
struct Condition_Stage;
struct ConditionDefinition;
struct ConditionDefinition_Medication;
struct ConditionDefinition_Precondition;
struct ConditionDefinition_Questionnaire;
struct ConditionDefinition_Plan;
struct Consent;
struct Consent_PolicyBasis;
struct Consent_Verification;
struct Consent_Provision;
struct Consent_Actor;
struct Consent_Data;
struct Contract;
struct Contract_ContentDefinition;
struct Contract_Term;
struct Contract_SecurityLabel;
struct Contract_Offer;
struct Contract_Party;
struct Contract_Answer;
struct Contract_Asset;
struct Contract_Context;
struct Contract_ValuedItem;
struct Contract_Action;
struct Contract_Subject;
struct Contract_Signer;
struct Contract_Friendly;
struct Contract_Legal;
struct Contract_Rule;
struct Coverage;
struct Coverage_PaymentBy;
struct Coverage_Class;
struct Coverage_CostToBeneficiary;
struct Coverage_Exception;
struct CoverageEligibilityRequest;
struct CoverageEligibilityRequest_Event;
struct CoverageEligibilityRequest_SupportingInfo;
struct CoverageEligibilityRequest_Insurance;
struct CoverageEligibilityRequest_Item;
struct CoverageEligibilityRequest_Diagnosis;
struct CoverageEligibilityResponse;
struct CoverageEligibilityResponse_Event;
struct CoverageEligibilityResponse_Insurance;
struct CoverageEligibilityResponse_Item;
struct CoverageEligibilityResponse_Benefit;
struct CoverageEligibilityResponse_Error;
struct DetectedIssue;
struct DetectedIssue_Evidence;
struct DetectedIssue_Mitigation;
struct Device;
struct Device_UdiCarrier;
struct Device_Name;
struct Device_Version;
struct Device_ConformsTo;
struct Device_Property;
struct DeviceAssociation;
struct DeviceAssociation_Operation;
struct DeviceDefinition;
struct DeviceDefinition_UdiDeviceIdentifier;
struct DeviceDefinition_MarketDistribution;
struct DeviceDefinition_RegulatoryIdentifier;
struct DeviceDefinition_DeviceName;
struct DeviceDefinition_Classification;
struct DeviceDefinition_ConformsTo;
struct DeviceDefinition_HasPart;
struct DeviceDefinition_Packaging;
struct DeviceDefinition_Distributor;
struct DeviceDefinition_Version;
struct DeviceDefinition_Property;
struct DeviceDefinition_Link;
struct DeviceDefinition_Material;
struct DeviceDefinition_Guideline;
struct DeviceDefinition_CorrectiveAction;
struct DeviceDefinition_ChargeItem;
struct DeviceDispense;
struct DeviceDispense_Performer;
struct DeviceMetric;
struct DeviceMetric_Calibration;
struct DeviceRequest;
struct DeviceRequest_Parameter;
struct DeviceUsage;
struct DeviceUsage_Adherence;
struct DiagnosticReport;
struct DiagnosticReport_SupportingInfo;
struct DiagnosticReport_Media;
struct DocumentReference;
struct DocumentReference_Attester;
struct DocumentReference_RelatesTo;
struct DocumentReference_Content;
struct DocumentReference_Profile;
struct Encounter;
struct Encounter_Participant;
struct Encounter_Reason;
struct Encounter_Diagnosis;
struct Encounter_Admission;
struct Encounter_Location;
struct EncounterHistory;
struct EncounterHistory_Location;
struct Endpoint;
struct Endpoint_Payload;
struct EnrollmentRequest;
struct EnrollmentResponse;
struct EpisodeOfCare;
struct EpisodeOfCare_StatusHistory;
struct EpisodeOfCare_Reason;
struct EpisodeOfCare_Diagnosis;
struct EventDefinition;
struct Evidence;
struct Evidence_VariableDefinition;
struct Evidence_Statistic;
struct Evidence_SampleSize;
struct Evidence_AttributeEstimate;
struct Evidence_ModelCharacteristic;
struct Evidence_Variable;
struct Evidence_Certainty;
struct EvidenceReport;
struct EvidenceReport_Subject;
struct EvidenceReport_Characteristic;
struct EvidenceReport_RelatesTo;
struct EvidenceReport_Target;
struct EvidenceReport_Section;
struct EvidenceVariable;
struct EvidenceVariable_Category;
struct ExampleScenario;
struct ExampleScenario_Actor;
struct ExampleScenario_Instance;
struct ExampleScenario_Version;
struct ExampleScenario_ContainedInstance;
struct ExampleScenario_Process;
struct ExampleScenario_Step;
struct ExampleScenario_Operation;
struct ExampleScenario_Alternative;
struct ExplanationOfBenefit;
struct ExplanationOfBenefit_Related;
struct ExplanationOfBenefit_Event;
struct ExplanationOfBenefit_Payee;
struct ExplanationOfBenefit_CareTeam;
struct ExplanationOfBenefit_SupportingInfo;
struct ExplanationOfBenefit_Diagnosis;
struct ExplanationOfBenefit_Procedure;
struct ExplanationOfBenefit_Insurance;
struct ExplanationOfBenefit_Accident;
struct ExplanationOfBenefit_Item;
struct ExplanationOfBenefit_BodySite;
struct ExplanationOfBenefit_ReviewOutcome;
struct ExplanationOfBenefit_Adjudication;
struct ExplanationOfBenefit_Detail;
struct ExplanationOfBenefit_SubDetail;
struct ExplanationOfBenefit_AddItem;
struct ExplanationOfBenefit_BodySite1;
struct ExplanationOfBenefit_Detail1;
struct ExplanationOfBenefit_SubDetail1;
struct ExplanationOfBenefit_Total;
struct ExplanationOfBenefit_Payment;
struct ExplanationOfBenefit_ProcessNote;
struct ExplanationOfBenefit_BenefitBalance;
struct ExplanationOfBenefit_Financial;
struct FamilyMemberHistory;
struct FamilyMemberHistory_Participant;
struct FamilyMemberHistory_Condition;
struct FamilyMemberHistory_Procedure;
struct Flag;
struct FormularyItem;
struct GenomicStudy;
struct GenomicStudy_Analysis;
struct GenomicStudy_Input;
struct GenomicStudy_Output;
struct GenomicStudy_Performer;
struct GenomicStudy_Device;
struct Goal;
struct Goal_Target;
struct GraphDefinition;
struct GraphDefinition_Node;
struct GraphDefinition_Link;
struct GraphDefinition_Compartment;
struct Group;
struct Group_Characteristic;
struct Group_Member;
struct GuidanceResponse;
struct HealthcareService;
struct HealthcareService_Eligibility;
struct ImagingSelection;
struct ImagingSelection_Performer;
struct ImagingSelection_Instance;
struct ImagingSelection_ImageRegion2D;
struct ImagingSelection_ImageRegion3D;
struct ImagingStudy;
struct ImagingStudy_Series;
struct ImagingStudy_Performer;
struct ImagingStudy_Instance;
struct Immunization;
struct Immunization_Performer;
struct Immunization_ProgramEligibility;
struct Immunization_Reaction;
struct Immunization_ProtocolApplied;
struct ImmunizationEvaluation;
struct ImmunizationRecommendation;
struct ImmunizationRecommendation_Recommendation;
struct ImmunizationRecommendation_DateCriterion;
struct ImplementationGuide;
struct ImplementationGuide_DependsOn;
struct ImplementationGuide_Global;
struct ImplementationGuide_Definition;
struct ImplementationGuide_Grouping;
struct ImplementationGuide_Resource;
struct ImplementationGuide_Page;
struct ImplementationGuide_Parameter;
struct ImplementationGuide_Template;
struct ImplementationGuide_Manifest;
struct ImplementationGuide_Resource1;
struct ImplementationGuide_Page1;
struct Ingredient;
struct Ingredient_Manufacturer;
struct Ingredient_Substance;
struct Ingredient_Strength;
struct Ingredient_ReferenceStrength;
struct InsurancePlan;
struct InsurancePlan_GeneralCost;
struct InsurancePlan_SpecificCost;
struct InsurancePlan_Benefit;
struct InsurancePlan_Cost;
struct InsuranceProduct;
struct InsuranceProduct_Coverage;
struct InsuranceProduct_Benefit;
struct InsuranceProduct_Limit;
struct InsuranceProduct_Related;
struct InventoryItem;
struct InventoryItem_Name;
struct InventoryItem_ResponsibleOrganization;
struct InventoryItem_Description;
struct InventoryItem_Association;
struct InventoryItem_Characteristic;
struct InventoryItem_Instance;
struct InventoryReport;
struct InventoryReport_InventoryListing;
struct InventoryReport_Item;
struct Invoice;
struct Invoice_Participant;
struct Invoice_LineItem;
struct Library;
struct Linkage;
struct Linkage_Item;
struct List;
struct List_Entry;
struct Location;
struct Location_Position;
struct ManufacturedItemDefinition;
struct ManufacturedItemDefinition_Property;
struct ManufacturedItemDefinition_Component;
struct ManufacturedItemDefinition_Constituent;
struct Measure;
struct Measure_Term;
struct Measure_Group;
struct Measure_Population;
struct Measure_Stratifier;
struct Measure_Component;
struct Measure_SupplementalData;
struct MeasureReport;
struct MeasureReport_Group;
struct MeasureReport_Population;
struct MeasureReport_Stratifier;
struct MeasureReport_Stratum;
struct MeasureReport_Component;
struct MeasureReport_Population1;
struct Medication;
struct Medication_Ingredient;
struct Medication_Batch;
struct MedicationAdministration;
struct MedicationAdministration_Performer;
struct MedicationAdministration_Dosage;
struct MedicationDispense;
struct MedicationDispense_Performer;
struct MedicationDispense_Substitution;
struct MedicationKnowledge;
struct MedicationKnowledge_RelatedMedicationKnowledge;
struct MedicationKnowledge_Monograph;
struct MedicationKnowledge_Cost;
struct MedicationKnowledge_MonitoringProgram;
struct MedicationKnowledge_IndicationGuideline;
struct MedicationKnowledge_DosingGuideline;
struct MedicationKnowledge_Dosage;
struct MedicationKnowledge_PatientCharacteristic;
struct MedicationKnowledge_MedicineClassification;
struct MedicationKnowledge_Packaging;
struct MedicationKnowledge_StorageGuideline;
struct MedicationKnowledge_EnvironmentalSetting;
struct MedicationKnowledge_Regulatory;
struct MedicationKnowledge_Substitution;
struct MedicationKnowledge_MaxDispense;
struct MedicationKnowledge_Definitional;
struct MedicationKnowledge_Ingredient;
struct MedicationKnowledge_DrugCharacteristic;
struct MedicationRequest;
struct MedicationRequest_DispenseRequest;
struct MedicationRequest_InitialFill;
struct MedicationRequest_Substitution;
struct MedicationStatement;
struct MedicationStatement_Adherence;
struct MedicinalProductDefinition;
struct MedicinalProductDefinition_Contact;
struct MedicinalProductDefinition_Name;
struct MedicinalProductDefinition_Part;
struct MedicinalProductDefinition_Usage;
struct MedicinalProductDefinition_CrossReference;
struct MedicinalProductDefinition_Operation;
struct MedicinalProductDefinition_Characteristic;
struct MessageDefinition;
struct MessageDefinition_Focus;
struct MessageDefinition_AllowedResponse;
struct MessageHeader;
struct MessageHeader_Destination;
struct MessageHeader_Source;
struct MessageHeader_Response;
struct MolecularSequence;
struct MolecularSequence_Relative;
struct MolecularSequence_StartingSequence;
struct MolecularSequence_Edit;
struct NamingSystem;
struct NamingSystem_UniqueId;
struct NutritionIntake;
struct NutritionIntake_ConsumedItem;
struct NutritionIntake_IngredientLabel;
struct NutritionIntake_Performer;
struct NutritionOrder;
struct NutritionOrder_OralDiet;
struct NutritionOrder_Schedule;
struct NutritionOrder_Nutrient;
struct NutritionOrder_Texture;
struct NutritionOrder_Supplement;
struct NutritionOrder_Schedule1;
struct NutritionOrder_EnteralFormula;
struct NutritionOrder_Additive;
struct NutritionOrder_Administration;
struct NutritionOrder_Schedule2;
struct NutritionProduct;
struct NutritionProduct_Nutrient;
struct NutritionProduct_Ingredient;
struct NutritionProduct_Characteristic;
struct NutritionProduct_Instance;
struct Observation;
struct Observation_TriggeredBy;
struct Observation_ReferenceRange;
struct Observation_Component;
struct ObservationDefinition;
struct ObservationDefinition_QualifiedValue;
struct ObservationDefinition_Component;
struct OperationDefinition;
struct OperationDefinition_Parameter;
struct OperationDefinition_Binding;
struct OperationDefinition_ReferencedFrom;
struct OperationDefinition_Overload;
struct OperationOutcome;
struct OperationOutcome_Issue;
struct Organization;
struct Organization_Qualification;
struct OrganizationAffiliation;
struct PackagedProductDefinition;
struct PackagedProductDefinition_LegalStatusOfSupply;
struct PackagedProductDefinition_Packaging;
struct PackagedProductDefinition_Property;
struct PackagedProductDefinition_ContainedItem;
struct Parameters;
struct Parameters_Parameter;
struct Patient;
struct Patient_Contact;
struct Patient_Communication;
struct Patient_Link;
struct PaymentNotice;
struct PaymentReconciliation;
struct PaymentReconciliation_Allocation;
struct PaymentReconciliation_ProcessNote;
struct Permission;
struct Permission_Justification;
struct Permission_Rule;
struct Permission_Data;
struct Permission_Resource;
struct Permission_Activity;
struct Person;
struct Person_Communication;
struct Person_Link;
struct PlanDefinition;
struct PlanDefinition_Goal;
struct PlanDefinition_Target;
struct PlanDefinition_Actor;
struct PlanDefinition_Option;
struct PlanDefinition_Action;
struct PlanDefinition_Condition;
struct PlanDefinition_Input;
struct PlanDefinition_Output;
struct PlanDefinition_RelatedAction;
struct PlanDefinition_Participant;
struct PlanDefinition_DynamicValue;
struct Practitioner;
struct Practitioner_Qualification;
struct Practitioner_Communication;
struct PractitionerRole;
struct Procedure;
struct Procedure_Performer;
struct Procedure_FocalDevice;
struct Provenance;
struct Provenance_Agent;
struct Provenance_Entity;
struct Questionnaire;
struct Questionnaire_Item;
struct Questionnaire_EnableWhen;
struct Questionnaire_AnswerOption;
struct Questionnaire_Initial;
struct QuestionnaireResponse;
struct QuestionnaireResponse_Item;
struct QuestionnaireResponse_Answer;
struct RegulatedAuthorization;
struct RegulatedAuthorization_Case;
struct RelatedPerson;
struct RelatedPerson_Communication;
struct RequestOrchestration;
struct RequestOrchestration_Action;
struct RequestOrchestration_Condition;
struct RequestOrchestration_Input;
struct RequestOrchestration_Output;
struct RequestOrchestration_RelatedAction;
struct RequestOrchestration_Participant;
struct RequestOrchestration_DynamicValue;
struct Requirements;
struct Requirements_Statement;
struct ResearchStudy;
struct ResearchStudy_Label;
struct ResearchStudy_AssociatedParty;
struct ResearchStudy_ProgressStatus;
struct ResearchStudy_Recruitment;
struct ResearchStudy_ComparisonGroup;
struct ResearchStudy_Objective;
struct ResearchStudy_OutcomeMeasure;
struct ResearchSubject;
struct ResearchSubject_Progress;
struct RiskAssessment;
struct RiskAssessment_Prediction;
struct Schedule;
struct SearchParameter;
struct SearchParameter_Component;
struct ServiceRequest;
struct ServiceRequest_OrderDetail;
struct ServiceRequest_Parameter;
struct ServiceRequest_PatientInstruction;
struct Slot;
struct Specimen;
struct Specimen_Feature;
struct Specimen_Collection;
struct Specimen_Processing;
struct Specimen_Container;
struct SpecimenDefinition;
struct SpecimenDefinition_TypeTested;
struct SpecimenDefinition_Container;
struct SpecimenDefinition_Additive;
struct SpecimenDefinition_Handling;
struct StructureDefinition;
struct StructureDefinition_Mapping;
struct StructureDefinition_Context;
struct StructureDefinition_Snapshot;
struct StructureDefinition_Differential;
struct StructureMap;
struct StructureMap_Structure;
struct StructureMap_Const;
struct StructureMap_Group;
struct StructureMap_Input;
struct StructureMap_Rule;
struct StructureMap_Source;
struct StructureMap_Target;
struct StructureMap_Parameter;
struct StructureMap_Dependent;
struct Subscription;
struct Subscription_FilterBy;
struct Subscription_Parameter;
struct SubscriptionStatus;
struct SubscriptionStatus_NotificationEvent;
struct SubscriptionTopic;
struct SubscriptionTopic_ResourceTrigger;
struct SubscriptionTopic_QueryCriteria;
struct SubscriptionTopic_EventTrigger;
struct SubscriptionTopic_CanFilterBy;
struct SubscriptionTopic_NotificationShape;
struct Substance;
struct Substance_Ingredient;
struct SubstanceDefinition;
struct SubstanceDefinition_Moiety;
struct SubstanceDefinition_Characterization;
struct SubstanceDefinition_Property;
struct SubstanceDefinition_MolecularWeight;
struct SubstanceDefinition_Structure;
struct SubstanceDefinition_Representation;
struct SubstanceDefinition_Code;
struct SubstanceDefinition_Name;
struct SubstanceDefinition_Official;
struct SubstanceDefinition_Relationship;
struct SubstanceDefinition_SourceMaterial;
struct SubstanceNucleicAcid;
struct SubstanceNucleicAcid_Subunit;
struct SubstanceNucleicAcid_Linkage;
struct SubstanceNucleicAcid_Sugar;
struct SubstancePolymer;
struct SubstancePolymer_MonomerSet;
struct SubstancePolymer_StartingMaterial;
struct SubstancePolymer_Repeat;
struct SubstancePolymer_RepeatUnit;
struct SubstancePolymer_DegreeOfPolymerisation;
struct SubstancePolymer_StructuralRepresentation;
struct SubstanceProtein;
struct SubstanceProtein_Subunit;
struct SubstanceReferenceInformation;
struct SubstanceReferenceInformation_Gene;
struct SubstanceReferenceInformation_GeneElement;
struct SubstanceReferenceInformation_Target;
struct SubstanceSourceMaterial;
struct SubstanceSourceMaterial_FractionDescription;
struct SubstanceSourceMaterial_Organism;
struct SubstanceSourceMaterial_Author;
struct SubstanceSourceMaterial_Hybrid;
struct SubstanceSourceMaterial_OrganismGeneral;
struct SubstanceSourceMaterial_PartDescription;
struct SupplyDelivery;
struct SupplyDelivery_SuppliedItem;
struct SupplyRequest;
struct SupplyRequest_Parameter;
struct Task;
struct Task_Performer;
struct Task_Restriction;
struct Task_Input;
struct Task_Output;
struct TerminologyCapabilities;
struct TerminologyCapabilities_Software;
struct TerminologyCapabilities_Implementation;
struct TerminologyCapabilities_CodeSystem;
struct TerminologyCapabilities_Version;
struct TerminologyCapabilities_Filter;
struct TerminologyCapabilities_Expansion;
struct TerminologyCapabilities_Parameter;
struct TerminologyCapabilities_ValidateCode;
struct TerminologyCapabilities_Translation;
struct TerminologyCapabilities_Closure;
struct TestPlan;
struct TestPlan_Dependency;
struct TestPlan_TestCase;
struct TestPlan_Dependency1;
struct TestPlan_TestRun;
struct TestPlan_Script;
struct TestPlan_TestData;
struct TestPlan_Assertion;
struct TestReport;
struct TestReport_Participant;
struct TestReport_Setup;
struct TestReport_Action;
struct TestReport_Operation;
struct TestReport_Assert;
struct TestReport_Requirement;
struct TestReport_Test;
struct TestReport_Action1;
struct TestReport_Teardown;
struct TestReport_Action2;
struct TestScript;
struct TestScript_Origin;
struct TestScript_Destination;
struct TestScript_Metadata;
struct TestScript_Link;
struct TestScript_Capability;
struct TestScript_Scope;
struct TestScript_Fixture;
struct TestScript_Variable;
struct TestScript_Setup;
struct TestScript_Action;
struct TestScript_Operation;
struct TestScript_RequestHeader;
struct TestScript_Assert;
struct TestScript_Requirement;
struct TestScript_Test;
struct TestScript_Action1;
struct TestScript_Teardown;
struct TestScript_Action2;
struct Transport;
struct Transport_Restriction;
struct Transport_Input;
struct Transport_Output;
struct ValueSet;
struct ValueSet_Compose;
struct ValueSet_Include;
struct ValueSet_Concept;
struct ValueSet_Designation;
struct ValueSet_Filter;
struct ValueSet_Expansion;
struct ValueSet_Parameter;
struct ValueSet_Property;
struct ValueSet_Contains;
struct ValueSet_Property1;
struct ValueSet_SubProperty;
struct ValueSet_Scope;
struct VerificationResult;
struct VerificationResult_PrimarySource;
struct VerificationResult_Attestation;
struct VerificationResult_Validator;
struct VisionPrescription;
struct VisionPrescription_LensSpecification;
struct VisionPrescription_Prism;

/* description: A stream of bytes */
typedef char* base64Binary; 

/* description: Value of "true" or "false" */
/* pattern: ^true|false$ */
typedef bool boolean; 

/* description: A URI that is a reference to a canonical URL on a FHIR resource */
/* pattern: ^\S*$ */
typedef char* canonical; 

/* description: A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents */
/* pattern: ^[^\s]+( [^\s]+)*$ */
typedef char* code; 

/* description: A date or partial date (e.g. just year or year + month). There is no UTC offset. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
typedef char* date; 

/* description: A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a UTC offset SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
typedef char* dateTime; 

/* description: A rational number with implicit precision */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
typedef double decimal; 

/* description: Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
typedef char* id; 

/* description: An instant in time - known at least to the second */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
typedef char* instant; 

/* description: A whole number */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
typedef double integer; 

/* description: A very large whole number */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
typedef char* integer64; 

/* description: A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine */
/* pattern: ^^[\s\S]+$$ */
typedef char* markdown; 

/* description: An OID represented as a URI */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
typedef char* oid; 

/* description: An integer with a value that is positive (e.g. >0) */
/* pattern: ^[1-9][0-9]*$ */
typedef double positiveInt; 

/* description: A sequence of Unicode characters */
/* pattern: ^^[\s\S]+$$ */
typedef char* string; 

/* description: A time during the day, with no date specified */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
typedef char* time; 

/* description: An integer with a value that is not negative (e.g. >= 0) */
/* pattern: ^[0]|([1-9][0-9]*)$ */
typedef double unsignedInt; 

/* description: String of characters used to identify a name or a resource */
/* pattern: ^\S*$ */
typedef char* uri; 

/* description: A URI that is a literal reference */
/* pattern: ^\S*$ */
typedef char* url; 

/* description: A UUID, represented as a URI */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
typedef char* uuid; 

/* description: xhtml - escaped html (see specfication) */


/* description: Base definition for all elements in a resource. */
struct Element {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
};
typedef struct Element Element;

/* description: The base class for all re-useable types defined as part of the FHIR Specification. */
struct DataType {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
};
typedef struct DataType DataType;

/* description: The base type for all re-useable types defined that have a simple property. */
struct PrimitiveType {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
};
typedef struct PrimitiveType PrimitiveType;

/* description: Base definition for the few data types that are allowed to carry modifier extensions. */
struct BackboneType {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
};
typedef struct BackboneType BackboneType;

/* description: Optional Extension Element - found in all resources. */
struct Extension {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: Source of the definition for the extension code - a logical name or a URL. */
	uri url_;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^\S*$ */
	string valueCanonical;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string valueInstant;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string valueInteger64;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string valueOid;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^[1-9][0-9]*$ */
	number valuePositiveInt;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number valueUnsignedInt;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^\S*$ */
	string valueUri;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string valueUuid;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Address *valueAddress;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Age *valueAge;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Annotation *valueAnnotation;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Attachment *valueAttachment;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct CodeableConcept *valueCodeableConcept;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct CodeableReference *valueCodeableReference;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Coding *valueCoding;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct ContactPoint *valueContactPoint;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Count *valueCount;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Distance *valueDistance;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Duration *valueDuration;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct HumanName *valueHumanName;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Identifier *valueIdentifier;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Money *valueMoney;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Period *valuePeriod;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Quantity *valueQuantity;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Range *valueRange;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Ratio *valueRatio;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct RatioRange *valueRatioRange;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Reference *valueReference;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct SampledData *valueSampledData;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Signature *valueSignature;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Timing *valueTiming;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct ContactDetail *valueContactDetail;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct DataRequirement *valueDataRequirement;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Expression *valueExpression;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct ParameterDefinition *valueParameterDefinition;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct RelatedArtifact *valueRelatedArtifact;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct TriggerDefinition *valueTriggerDefinition;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct UsageContext *valueUsageContext;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Availability *valueAvailability;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct ExtendedContactDetail *valueExtendedContactDetail;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Dosage *valueDosage;
/* description: Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). */
	struct Meta *valueMeta;
};
typedef struct Extension Extension;

/* description: A human-readable summary of the resource conveying the essential clinical and business information for the resource. */
struct Narrative {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data. */
	string status;
/* description: The actual narrative content, a stripped down version of XHTML. */
	xhtml div;
};
typedef struct Narrative Narrative;

/* description: A  text note which also  contains information about who made the statement and when. */
struct Annotation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The individual responsible for making the annotation. */
	struct Reference *authorReference;
/* description: The individual responsible for making the annotation. */
/* pattern: ^^[\s\S]+$$ */
	string authorString;
/* description: Indicates when this particular annotation was made. */
	dateTime time_;
/* description: The text of the annotation in markdown format. */
	markdown text;
};
typedef struct Annotation Annotation;

/* description: For referring to data content defined in other formats. */
struct Attachment {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate. */
	code contentType;
/* description: The human language of the content. The value can be any valid value according to BCP 47. */
	code language;
/* description: The actual data of the attachment - a sequence of bytes, base64 encoded. */
	base64Binary data;
/* description: A location where the data can be accessed. */
	url url_;
/* description: The number of bytes of data that make up this attachment (before base64 encoding, if that is done). */
	integer64 size;
/* description: The calculated hash of the data using SHA-1. Represented using base64. */
	base64Binary hash;
/* description: A label or set of text to display in place of the data. */
	string title;
/* description: The date that the attachment was first created. */
	dateTime creation;
/* description: Height of the image in pixels (photo/video). */
	positiveInt height;
/* description: Width of the image in pixels (photo/video). */
	positiveInt width;
/* description: The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required. */
	positiveInt frames;
/* description: The duration of the recording in seconds - for audio and video. */
	decimal duration;
/* description: The number of pages when printed. */
	positiveInt pages;
};
typedef struct Attachment Attachment;

/* description: An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers. */
struct Identifier {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The purpose of this identifier. */
	string use;
/* description: A coded type for the identifier that can be used to determine which identifier to use for a specific purpose. */
	struct CodeableConcept *type;
/* description: Establishes the namespace for the value - that is, an absolute URL that describes a set values that are unique. */
	uri system;
/* description: The portion of the identifier typically relevant to the user and which is unique within the context of the system. */
	string value;
/* description: Time period during which identifier is/was valid for use. */
	struct Period *period;
/* description: Organization that issued/manages the identifier. */
	struct Reference *assigner;
};
typedef struct Identifier Identifier;

/* description: A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text. */
struct CodeableConcept {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: A reference to a code defined by a terminology system. */
	int coding_count;
	struct Coding *coding;
/* description: A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user. */
	string text;
};
typedef struct CodeableConcept CodeableConcept;

/* description: A reference to a resource (by instance), or instead, a reference to a concept defined in a terminology or ontology (by class). */
struct CodeableReference {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology. */
	struct CodeableConcept *concept;
/* description: A reference to a resource the provides exact details about the information being referenced. */
	struct Reference *reference;
};
typedef struct CodeableReference CodeableReference;

/* description: A reference to a code defined by a terminology system. */
struct Coding {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The identification of the code system that defines the meaning of the symbol in the code. */
	uri system;
/* description: The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged. */
	string version;
/* description: A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination). */
	code code_;
/* description: A representation of the meaning of the code in the system, following the rules of the system. */
	string display;
/* description: Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays). */
	boolean userSelected;
};
typedef struct Coding Coding;

/* description: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies. */
struct Quantity {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
	decimal value;
/* description: How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
	string comparator;
/* description: A human-readable form of the unit. */
	string unit;
/* description: The identification of the system that provides the coded form of the unit. */
	uri system;
/* description: A computer processable form of the unit in some unit representation system. */
	code code_;
};
typedef struct Quantity Quantity;

/* description: A length of time. */
struct Duration {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
	decimal value;
/* description: How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
	string comparator;
/* description: A human-readable form of the unit. */
	string unit;
/* description: The identification of the system that provides the coded form of the unit. */
	uri system;
/* description: A computer processable form of the unit in some unit representation system. */
	code code_;
};
typedef struct Duration Duration;

/* description: A length - a value with a unit that is a physical distance. */
struct Distance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
	decimal value;
/* description: How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
	string comparator;
/* description: A human-readable form of the unit. */
	string unit;
/* description: The identification of the system that provides the coded form of the unit. */
	uri system;
/* description: A computer processable form of the unit in some unit representation system. */
	code code_;
};
typedef struct Distance Distance;

/* description: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies. */
struct Count {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
	decimal value;
/* description: How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
	string comparator;
/* description: A human-readable form of the unit. */
	string unit;
/* description: The identification of the system that provides the coded form of the unit. */
	uri system;
/* description: A computer processable form of the unit in some unit representation system. */
	code code_;
};
typedef struct Count Count;

/* description: An amount of economic utility in some recognized currency. */
struct Money {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: Numerical value (with implicit precision). */
	decimal value;
/* description: ISO 4217 Currency Code. */
	code currency;
};
typedef struct Money Money;

/* description: A duration of time during which an organism (or a process) has existed. */
struct Age {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The value of the measured amount. The value includes an implicit precision in the presentation of the value. */
	decimal value;
/* description: How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value. */
	string comparator;
/* description: A human-readable form of the unit. */
	string unit;
/* description: The identification of the system that provides the coded form of the unit. */
	uri system;
/* description: A computer processable form of the unit in some unit representation system. */
	code code_;
};
typedef struct Age Age;

/* description: A set of ordered Quantities defined by a low and high limit. */
struct Range {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The low limit. The boundary is inclusive. */
	struct Quantity *low;
/* description: The high limit. The boundary is inclusive. */
	struct Quantity *high;
};
typedef struct Range Range;

/* description: A time period defined by a start and end date and optionally time. */
struct Period {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The start of the period. The boundary is inclusive. */
	dateTime start;
/* description: The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time. */
	dateTime end;
};
typedef struct Period Period;

/* description: A relationship of two Quantity values - expressed as a numerator and a denominator. */
struct Ratio {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The value of the numerator. */
	struct Quantity *numerator;
/* description: The value of the denominator. */
	struct Quantity *denominator;
};
typedef struct Ratio Ratio;

/* description: A range of ratios expressed as a low and high numerator and a denominator. */
struct RatioRange {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The value of the low limit numerator. */
	struct Quantity *lowNumerator;
/* description: The value of the high limit numerator. */
	struct Quantity *highNumerator;
/* description: The value of the denominator. */
	struct Quantity *denominator;
};
typedef struct RatioRange RatioRange;

/* description: A reference from one resource to another. */
struct Reference {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources. */
	string reference;
/* description: The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources). */
	uri type;
/* description: An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference. */
	struct Identifier *identifier;
/* description: Plain text narrative that identifies the resource in addition to the resource reference. */
	string display;
};
typedef struct Reference Reference;

/* description: A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data. */
struct SampledData {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series. */
	struct Quantity *origin;
/* description: Amount of intervalUnits between samples, e.g. milliseconds for time-based sampling. */
	decimal interval;
/* description: The measurement unit in which the sample interval is expressed. */
	code intervalUnit;
/* description: A correction factor that is applied to the sampled data points before they are added to the origin. */
	decimal factor;
/* description: The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit). */
	decimal lowerLimit;
/* description: The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit). */
	decimal upperLimit;
/* description: The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once. */
	positiveInt dimensions;
/* description: Reference to ConceptMap that defines the codes used in the data. */
	canonical codeMap;
/* description: A series of data points which are decimal values separated by a single space (character u20).  The units in which the offsets are expressed are found in intervalUnit.  The absolute point at which the measurements begin SHALL be conveyed outside the scope of this datatype, e.g. Observation.effectiveDateTime for a timing offset. */
	string offsets;
/* description: A series of data points which are decimal values or codes separated by a single space (character u20). The special codes "E" (error), "L" (below detection limit) and "U" (above detection limit) are also defined for used in place of decimal values. */
	string data;
};
typedef struct SampledData SampledData;

/* description: A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities. */
struct Signature {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document. */
	int type_count;
	struct Coding *type;
/* description: When the digital signature was signed. */
	instant when;
/* description: A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key). */
	struct Reference *who;
/* description: A reference to an application-usable description of the identity that is represented by the signature. */
	struct Reference *onBehalfOf;
/* description: A mime type that indicates the technical format of the target resources signed by the signature. */
	code targetFormat;
/* description: A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc. */
	code sigFormat;
/* description: The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty. */
	base64Binary data;
};
typedef struct Signature Signature;

/* description: A name, normally of a human, that can be used for other living entities (e.g. animals but not organizations) that have been assigned names by a human and may need the use of name parts or the need for usage information. */
struct HumanName {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: Identifies the purpose for this name. */
	string use;
/* description: Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts. */
	string text;
/* description: The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father. */
	string family;
/* description: Given name. */
	int given_count;
	string given;
/* description: Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name. */
	int prefix_count;
	string prefix;
/* description: Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name. */
	int suffix_count;
	string suffix;
/* description: Indicates the period of time when this name was valid for the named person. */
	struct Period *period;
};
typedef struct HumanName HumanName;

/* description: An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
The ISO21090-codedString may be used to provide a coded representation of the contents of strings in an Address. */
struct Address {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The purpose of this address. */
	string use;
/* description: Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both. */
	string type;
/* description: Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts. */
	string text;
/* description: This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information. */
	int line_count;
	string line;
/* description: The name of the city, town, suburb, village or other community or delivery center. */
	string city;
/* description: The name of the administrative area (county). */
	string district;
/* description: Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes). */
	string state;
/* description: A postal code designating a region defined by the postal service. */
	string postalCode;
/* description: Country - a nation as commonly understood or generally accepted. */
	string country;
/* description: Time period when address was/is in use. */
	struct Period *period;
};
typedef struct Address Address;

/* description: Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc. */
struct ContactPoint {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: Telecommunications form for contact point - what communications system is required to make use of the contact. */
	string system;
/* description: The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address). */
	string value;
/* description: Identifies the purpose for the contact point. */
	string use;
/* description: Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values. */
	positiveInt rank;
/* description: Time period when the contact point was/is in use. */
	struct Period *period;
};
typedef struct ContactPoint ContactPoint;

/* description: Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out. */
struct Timing {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies specific times when the event occurs. */
	int event_count;
	dateTime event;
/* description: A set of rules that describe when the event is scheduled. */
	struct Timing_Repeat *repeat;
/* description: A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code). */
	struct CodeableConcept *code_;
};
typedef struct Timing Timing;

/* description: Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out. */
struct Timing_Repeat {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule. */
	struct Duration *boundsDuration;
/* description: Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule. */
	struct Range *boundsRange;
/* description: Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule. */
	struct Period *boundsPeriod;
/* description: A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values. */
	positiveInt count;
/* description: If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times. */
	positiveInt countMax;
/* description: How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration. */
	decimal duration;
/* description: If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length. */
	decimal durationMax;
/* description: The units of time for the duration, in UCUM units
Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence. */
	string durationUnit;
/* description: The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency. */
	positiveInt frequency;
/* description: If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range. */
	positiveInt frequencyMax;
/* description: Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length. */
	decimal period;
/* description: If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days. */
	decimal periodMax;
/* description: The units of time for the period in UCUM units
Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence. */
	string periodUnit;
/* description: If one or more days of week is provided, then the action happens only on the specified day(s). */
	int dayOfWeek_count;
	code dayOfWeek;
/* description: Specified time of day for action to take place. */
	int timeOfDay_count;
	time timeOfDay;
/* description: An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur. */
	int when_count;
	string when;
/* description: The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event. */
	unsignedInt offset;
};
typedef struct Timing_Repeat Timing_Repeat;

/* description: RelativeTime is used to express a point in time or an interval of time relative to an event defined in data types other than dateTime. */
struct RelativeTime {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The specific event occurrence or resource context used as a base point (reference point) in time.  This establishes the context in which the 'path' is evaluated. */
	struct Reference *contextReference;
/* description: The type of event used as a base point.  Instances of this definition will establish the context for evaluating the path to determine the base time for the offset. */
	canonical contextDefinition;
/* description: Path to the element defining the point in time. Any valid FHIRPath expression. */
	string contextPath;
/* description: Coded representation of the event used as a base point (reference point) in time. */
	struct CodeableConcept *contextCode;
/* description: An offset or offset range before (negative values) or after (positive values) the event. Range is limited to time-valued quantities (Durations). */
	struct Duration *offsetDuration;
/* description: An offset or offset range before (negative values) or after (positive values) the event. Range is limited to time-valued quantities (Durations). */
	struct Range *offsetRange;
/* description: Free-text (human-readable) description. */
	string text;
};
typedef struct RelativeTime RelativeTime;

/* description: The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
struct Meta {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted. */
	id versionId;
/* description: When the resource last changed - e.g. when the version changed. */
	instant lastUpdated;
/* description: A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc. */
	uri source;
/* description: A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]]. */
	int profile_count;
	canonical profile;
/* description: Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure. */
	int security_count;
	struct Coding *security;
/* description: Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource. */
	int tag_count;
	struct Coding *tag;
};
typedef struct Meta Meta;

/* description: Specifies contact information for a person or organization. */
struct ContactDetail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The name of an individual to contact. */
	string name;
/* description: The contact details for the individual (if a name was provided) or the organization. */
	int telecom_count;
	struct ContactPoint *telecom;
};
typedef struct ContactDetail ContactDetail;

/* description: Specifies contact information for a specific purpose over a period of time, might be handled/monitored by a specific named person or organization. */
struct ExtendedContactDetail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The purpose/type of contact. */
	struct CodeableConcept *purpose;
/* description: The name of an individual to contact, some types of contact detail are usually blank. */
	int name_count;
	struct HumanName *name;
/* description: The contact details application for the purpose defined. */
	int telecom_count;
	struct ContactPoint *telecom;
/* description: Address for the contact. */
	struct Address *address;
/* description: This contact detail is handled/monitored by a specific organization. If the name is provided in the contact, then it is referring to the named individual within this organization. */
	struct Reference *organization;
/* description: Period that this contact was valid for usage. */
	struct Period *period;
};
typedef struct ExtendedContactDetail ExtendedContactDetail;

/* description: The set of values required to describe a virtual service's connection details, including some limitations of the service. */
struct VirtualServiceDetail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The type of virtual service to connect to (i.e. Teams, Zoom, Specific VMR technology, WhatsApp). */
	struct Coding *channelType;
/* description: What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type). */
/* pattern: ^\S*$ */
	string addressUrl;
/* description: What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type). */
/* pattern: ^^[\s\S]+$$ */
	string addressString;
/* description: What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type). */
	struct ContactPoint *addressContactPoint;
/* description: What address or number needs to be used for a user to connect to the virtual service to join. The channelType informs as to which datatype is appropriate to use (requires knowledge of the specific type). */
	struct ExtendedContactDetail *addressExtendedContactDetail;
/* description: A web address that provides additional details on the call, such as alternative/regional call in numbers, or other associated services. */
	int additionalInfo_count;
	url additionalInfo;
/* description: Maximum number of participants supported by the virtual service where there are limitations imposed. */
	positiveInt maxParticipants;
/* description: Some systems require an additional factor/value be provided to access the service. */
	string sessionKey;
};
typedef struct VirtualServiceDetail VirtualServiceDetail;

/* description: Availability data for an {item}, declaring what days/times are available, and any exceptions. The exceptions could be textual only, e.g. Public holidays, or could be time period specific and indicate a specific years dates. */
struct Availability {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: A collection of times that the {item} is available. */
	int availableTime_count;
	struct Availability_AvailableTime *availableTime;
/* description: The {item} is not available during this period of time due to the provided reason. */
	int notAvailableTime_count;
	struct Availability_NotAvailableTime *notAvailableTime;
};
typedef struct Availability Availability;

/* description: Availability data for an {item}, declaring what days/times are available, and any exceptions. The exceptions could be textual only, e.g. Public holidays, or could be time period specific and indicate a specific years dates. */
struct Availability_AvailableTime {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates which days of the week are available between the start and end Times. */
	int daysOfWeek_count;
	code daysOfWeek;
/* description: Is this always available? (hence times are irrelevant) i.e. 24 hour service. */
	boolean allDay;
/* description: The opening time of day. Note: If the AllDay flag is set, then this time is ignored. */
	time availableStartTime;
/* description: The closing time of day. Note: If the AllDay flag is set, then this time is ignored. */
	time availableEndTime;
};
typedef struct Availability_AvailableTime Availability_AvailableTime;

/* description: Availability data for an {item}, declaring what days/times are available, and any exceptions. The exceptions could be textual only, e.g. Public holidays, or could be time period specific and indicate a specific years dates. */
struct Availability_NotAvailableTime {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The reason that can be presented to the user as to why this time is not available. */
	string description;
/* description: The {item} is not available (seasonally or for a public holiday) during this period. */
	struct Period *during;
};
typedef struct Availability_NotAvailableTime Availability_NotAvailableTime;

/* description: Financial line items use this datatype to commonly categorize the value, and other factors that may effect how the value should be interpreted. */
struct MonetaryComponent {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The type of monetary component, what the value is to be used for and how that should be applied in its context. e.g. A surchange would increase the cost, a deduction would reduce the cost. */
	code type;
/* description: A codable breakdown of the type of monetary component. e.g. State Tax, Federal Tax, VIP-Discount. */
	struct CodeableConcept *code_;
/* description: The factor that has been applied to the base price (in another monetary component value) when performing calculations. */
	decimal factor;
/* description: The explicit value amount of the component (based on type/code). */
	struct Money *amount;
};
typedef struct MonetaryComponent MonetaryComponent;

/* description: A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers. */
struct Contributor {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The type of contributor. */
	string type;
/* description: The name of the individual or organization responsible for the contribution. */
	string name;
/* description: Contact details to assist a user in finding and communicating with the contributor. */
	int contact_count;
	struct ContactDetail *contact;
};
typedef struct Contributor Contributor;

/* description: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data. */
struct DataRequirement {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile. */
	code type;
/* description: The profile of the required data, specified as the uri of the profile definition. */
	int profile_count;
	canonical profile;
/* description: The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed. */
	struct Reference *subjectReference;
/* description: Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. 

The value of mustSupport SHALL be a FHIRPath resolvable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). */
	int mustSupport_count;
	string mustSupport;
/* description: Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed. */
	int codeFilter_count;
	struct DataRequirement_CodeFilter *codeFilter;
/* description: Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed. */
	int dateFilter_count;
	struct DataRequirement_DateFilter *dateFilter;
/* description: Value filters specify additional constraints on the data for elements other than code-valued or date-valued. Each value filter specifies an additional constraint on the data (i.e. valueFilters are AND'ed, not OR'ed). */
	int valueFilter_count;
	struct DataRequirement_ValueFilter *valueFilter;
/* description: Specifies a maximum number of results that are required (uses the _count search parameter). */
	positiveInt limit;
/* description: Specifies the order of the results to be returned. */
	int sort_count;
	struct DataRequirement_Sort *sort;
};
typedef struct DataRequirement DataRequirement;

/* description: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data. */
struct DataRequirement_CodeFilter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept. */
	string path;
/* description: A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept. */
	string searchParam;
/* description: The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset. */
	canonical valueSet;
/* description: The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes. */
	int code_count;
	struct Coding *code_;
};
typedef struct DataRequirement_CodeFilter DataRequirement_CodeFilter;

/* description: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data. */
struct DataRequirement_DateFilter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing. */
	string path;
/* description: A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing. */
	string searchParam;
/* description: The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now. */
	struct Period *valuePeriod;
/* description: The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now. */
	struct Duration *valueDuration;
};
typedef struct DataRequirement_DateFilter DataRequirement_DateFilter;

/* description: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data. */
struct DataRequirement_ValueFilter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of a type that is comparable to the valueFilter.value[x] element for the filter. */
	string path;
/* description: A search parameter defined on the specified type of the DataRequirement, and which searches on elements of a type compatible with the type of the valueFilter.value[x] for the filter. */
	string searchParam;
/* description: The comparator to be used to determine whether the value is matching. */
	code comparator;
/* description: The value of the filter. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of the filter. */
	struct Period *valuePeriod;
/* description: The value of the filter. */
	struct Duration *valueDuration;
};
typedef struct DataRequirement_ValueFilter DataRequirement_ValueFilter;

/* description: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data. */
struct DataRequirement_Sort {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. */
	string path;
/* description: The direction of the sort, ascending or descending. */
	string direction;
};
typedef struct DataRequirement_Sort DataRequirement_Sort;

/* description: The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse. */
struct ParameterDefinition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The name of the parameter used to allow access to the value of the parameter in evaluation contexts. */
	code name;
/* description: Whether the parameter is input or output for the module. */
	code use;
/* description: The minimum number of times this parameter SHALL appear in the request or response. */
	integer min;
/* description: The maximum number of times this element is permitted to appear in the request or response. */
	string max;
/* description: A brief discussion of what the parameter is for and how it is used by the module. */
	string documentation;
/* description: The type of the parameter. */
	code type;
/* description: If specified, this indicates a profile that the input data must conform to, or that the output data will conform to. */
	canonical profile;
};
typedef struct ParameterDefinition ParameterDefinition;

/* description: Related artifacts such as additional documentation, justification, or bibliographic references. */
struct RelatedArtifact {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The type of relationship to the related artifact. */
	string type;
/* description: Provides additional classifiers of the related artifact. */
	int classifier_count;
	struct CodeableConcept *classifier;
/* description: A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index. */
	string label;
/* description: A brief description of the document or knowledge resource being referenced, suitable for display to a consumer. */
	string display;
/* description: A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format. */
	markdown citation;
/* description: The document being referenced, represented as an attachment. This is exclusive with the resource element. */
	struct Attachment *document;
/* description: The related artifact, such as a library, value set, profile, or other knowledge resource. */
	canonical resource;
/* description: The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource. */
	struct Reference *resourceReference;
/* description: The publication status of the artifact being referred to. */
	code publicationStatus;
/* description: The date of publication of the artifact being referred to. */
	date publicationDate;
};
typedef struct RelatedArtifact RelatedArtifact;

/* description: A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element. */
struct TriggerDefinition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: The type of triggering event. */
	string type;
/* description: A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context. */
	string name;
/* description: A code that identifies the event. */
	struct CodeableConcept *code_;
/* description: A reference to a SubscriptionTopic resource that defines the event. If this element is provided, no other information about the trigger definition may be supplied. */
	canonical subscriptionTopic;
/* description: The timing of the event (if this is a periodic trigger). */
	struct Timing *timingTiming;
/* description: The timing of the event (if this is a periodic trigger). */
	struct Reference *timingReference;
/* description: The timing of the event (if this is a periodic trigger). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string timingDate;
/* description: The timing of the event (if this is a periodic trigger). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string timingDateTime;
/* description: The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true. */
	int data_count;
	struct DataRequirement *data;
/* description: A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires. */
	struct Expression *condition;
};
typedef struct TriggerDefinition TriggerDefinition;

/* description: Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care). */
struct UsageContext {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: A code that identifies the type of context being specified by this usage context. */
	struct Coding *code_;
/* description: A value that defines the context specified in this context of use. The interpretation of the value is defined by the code. */
	struct CodeableConcept *valueCodeableConcept;
/* description: A value that defines the context specified in this context of use. The interpretation of the value is defined by the code. */
	struct Quantity *valueQuantity;
/* description: A value that defines the context specified in this context of use. The interpretation of the value is defined by the code. */
	struct Range *valueRange;
/* description: A value that defines the context specified in this context of use. The interpretation of the value is defined by the code. */
	struct Reference *valueReference;
};
typedef struct UsageContext UsageContext;

/* description: Indicates how the medication is/was taken or should be taken by the patient. */
struct Dosage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the order in which the dosage instructions should be applied or interpreted. */
	integer sequence;
/* description: Free text dosage instructions e.g. SIG. */
	string text;
/* description: Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps"). */
	int additionalInstruction_count;
	struct CodeableConcept *additionalInstruction;
/* description: Instructions in terms that are understood by the patient or consumer. */
	string patientInstruction;
/* description: When medication should be administered. */
	struct Timing *timing;
/* description: Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option). */
	boolean asNeeded;
/* description: Indicates whether the Medication is only taken based on a precondition for taking the Medication (CodeableConcept). */
	int asNeededFor_count;
	struct CodeableConcept *asNeededFor;
/* description: Body site to administer to. */
	struct CodeableConcept *site;
/* description: How drug should enter body. */
	struct CodeableConcept *route;
/* description: Technique for administering medication. */
	struct CodeableConcept *method;
/* description: Depending on the resource,this is the amount of medication administered, to  be administered or typical amount to be administered. */
	int doseAndRate_count;
	struct Dosage_DoseAndRate *doseAndRate;
/* description: Upper limit on medication per unit of time. */
	int maxDosePerPeriod_count;
	struct Ratio *maxDosePerPeriod;
/* description: Upper limit on medication per administration. */
	struct Quantity *maxDosePerAdministration;
/* description: Upper limit on medication per lifetime of the patient. */
	struct Quantity *maxDosePerLifetime;
};
typedef struct Dosage Dosage;

/* description: Indicates how the medication is/was taken or should be taken by the patient. */
struct Dosage_DoseAndRate {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of dose or rate specified, for example, ordered or calculated. */
	struct CodeableConcept *type;
/* description: Amount of medication per dose. */
	struct Range *doseRange;
/* description: Amount of medication per dose. */
	struct Quantity *doseQuantity;
/* description: Amount of medication per unit of time. */
	struct Ratio *rateRatio;
/* description: Amount of medication per unit of time. */
	struct Range *rateRange;
/* description: Amount of medication per unit of time. */
	struct Quantity *rateQuantity;
};
typedef struct Dosage_DoseAndRate Dosage_DoseAndRate;

/* description: The shelf-life and storage information for a medicinal product item or container can be described using this class. */
struct ProductShelfLife {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified. */
	struct CodeableConcept *type;
/* description: The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. */
	struct Duration *periodDuration;
/* description: The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. */
/* pattern: ^^[\s\S]+$$ */
	string periodString;
/* description: Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified. */
	int specialPrecautionsForStorage_count;
	struct CodeableConcept *specialPrecautionsForStorage;
};
typedef struct ProductShelfLife ProductShelfLife;

/* description: The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available. */
struct MarketingStatus {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The country in which the marketing authorization has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements. */
	struct CodeableConcept *country;
/* description: Where a Medicines Regulatory Agency has granted a marketing authorization for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified. */
	struct CodeableConcept *jurisdiction;
/* description: This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples. */
	struct CodeableConcept *status;
/* description: The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain. */
	struct Period *dateRange;
/* description: The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain. */
	dateTime restoreDate;
};
typedef struct MarketingStatus MarketingStatus;

/* description: A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used. */
struct Expression {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: A brief, natural language description of the condition that effectively communicates the intended semantics. */
	string description;
/* description: A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined. */
	code name;
/* description: The media type of the language for the expression. */
	code language;
/* description: An expression in the specified language that returns a value. */
	string expression;
/* description: A URI that defines where the expression is found. */
	uri reference;
};
typedef struct Expression Expression;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension. */
	string path;
/* description: Codes that define how this element is represented in instances, when the deviation varies from the normal case. No extensions are allowed on elements with a representation of 'xmlAttr', no matter what FHIR serialization format is used. */
	int representation_count;
	string representation;
/* description: The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element. */
	string sliceName;
/* description: If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName. */
	boolean sliceIsConstraining;
/* description: A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form. */
	string label;
/* description: A code that has the same meaning as the element in a particular terminology. */
	int code_count;
	struct Coding *code_;
/* description: Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set). */
	struct ElementDefinition_Slicing *slicing;
/* description: A concise description of what this element means (e.g. for use in autogenerated summaries). */
	string short_;
/* description: Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition). */
	markdown definition;
/* description: Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment). */
	markdown comment;
/* description: This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element. */
	markdown requirements;
/* description: Identifies additional names by which this element might also be known. */
	int alias_count;
	string alias;
/* description: The minimum number of times this element SHALL appear in the instance. */
	unsignedInt min;
/* description: The maximum number of times this element is permitted to appear in the instance. */
	string max;
/* description: Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - e.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same. */
	struct ElementDefinition_Base *base;
/* description: Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc. */
	uri contentReference;
/* description: The data type or resource that the value of this element is permitted to be. */
	int type_count;
	struct ElementDefinition_Type *type;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string defaultValueBase64Binary;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^true|false$ */
	boolean defaultValueBoolean;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^\S*$ */
	string defaultValueCanonical;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string defaultValueCode;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string defaultValueDate;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string defaultValueDateTime;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number defaultValueDecimal;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string defaultValueId;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string defaultValueInstant;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number defaultValueInteger;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string defaultValueInteger64;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^^[\s\S]+$$ */
	string defaultValueMarkdown;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string defaultValueOid;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^[1-9][0-9]*$ */
	number defaultValuePositiveInt;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^^[\s\S]+$$ */
	string defaultValueString;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string defaultValueTime;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number defaultValueUnsignedInt;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^\S*$ */
	string defaultValueUri;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^\S*$ */
	string defaultValueUrl;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string defaultValueUuid;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Address *defaultValueAddress;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Age *defaultValueAge;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Annotation *defaultValueAnnotation;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Attachment *defaultValueAttachment;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct CodeableConcept *defaultValueCodeableConcept;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct CodeableReference *defaultValueCodeableReference;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Coding *defaultValueCoding;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct ContactPoint *defaultValueContactPoint;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Count *defaultValueCount;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Distance *defaultValueDistance;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Duration *defaultValueDuration;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct HumanName *defaultValueHumanName;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Identifier *defaultValueIdentifier;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Money *defaultValueMoney;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Period *defaultValuePeriod;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Quantity *defaultValueQuantity;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Range *defaultValueRange;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Ratio *defaultValueRatio;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct RatioRange *defaultValueRatioRange;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Reference *defaultValueReference;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct SampledData *defaultValueSampledData;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Signature *defaultValueSignature;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Timing *defaultValueTiming;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct ContactDetail *defaultValueContactDetail;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct DataRequirement *defaultValueDataRequirement;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Expression *defaultValueExpression;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct ParameterDefinition *defaultValueParameterDefinition;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct RelatedArtifact *defaultValueRelatedArtifact;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct TriggerDefinition *defaultValueTriggerDefinition;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct UsageContext *defaultValueUsageContext;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Availability *defaultValueAvailability;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct ExtendedContactDetail *defaultValueExtendedContactDetail;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Dosage *defaultValueDosage;
/* description: The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). */
	struct Meta *defaultValueMeta;
/* description: The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'). */
	markdown meaningWhenMissing;
/* description: If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning. */
	string orderMeaning;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string fixedBase64Binary;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^true|false$ */
	boolean fixedBoolean;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^\S*$ */
	string fixedCanonical;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string fixedCode;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string fixedDate;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string fixedDateTime;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number fixedDecimal;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string fixedId;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string fixedInstant;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number fixedInteger;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string fixedInteger64;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^^[\s\S]+$$ */
	string fixedMarkdown;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string fixedOid;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^[1-9][0-9]*$ */
	number fixedPositiveInt;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^^[\s\S]+$$ */
	string fixedString;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string fixedTime;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number fixedUnsignedInt;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^\S*$ */
	string fixedUri;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^\S*$ */
	string fixedUrl;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string fixedUuid;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Address *fixedAddress;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Age *fixedAge;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Annotation *fixedAnnotation;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Attachment *fixedAttachment;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct CodeableConcept *fixedCodeableConcept;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct CodeableReference *fixedCodeableReference;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Coding *fixedCoding;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct ContactPoint *fixedContactPoint;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Count *fixedCount;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Distance *fixedDistance;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Duration *fixedDuration;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct HumanName *fixedHumanName;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Identifier *fixedIdentifier;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Money *fixedMoney;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Period *fixedPeriod;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Quantity *fixedQuantity;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Range *fixedRange;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Ratio *fixedRatio;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct RatioRange *fixedRatioRange;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Reference *fixedReference;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct SampledData *fixedSampledData;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Signature *fixedSignature;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Timing *fixedTiming;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct ContactDetail *fixedContactDetail;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct DataRequirement *fixedDataRequirement;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Expression *fixedExpression;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct ParameterDefinition *fixedParameterDefinition;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct RelatedArtifact *fixedRelatedArtifact;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct TriggerDefinition *fixedTriggerDefinition;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct UsageContext *fixedUsageContext;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Availability *fixedAvailability;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct ExtendedContactDetail *fixedExtendedContactDetail;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Dosage *fixedDosage;
/* description: Specifies a value that SHALL be exactly the value  for this element in the instance, if present. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. */
	struct Meta *fixedMeta;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string patternBase64Binary;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^true|false$ */
	boolean patternBoolean;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^\S*$ */
	string patternCanonical;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string patternCode;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string patternDate;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string patternDateTime;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number patternDecimal;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string patternId;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string patternInstant;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number patternInteger;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string patternInteger64;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^^[\s\S]+$$ */
	string patternMarkdown;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string patternOid;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^[1-9][0-9]*$ */
	number patternPositiveInt;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^^[\s\S]+$$ */
	string patternString;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string patternTime;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number patternUnsignedInt;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^\S*$ */
	string patternUri;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^\S*$ */
	string patternUrl;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string patternUuid;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Address *patternAddress;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Age *patternAge;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Annotation *patternAnnotation;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Attachment *patternAttachment;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct CodeableConcept *patternCodeableConcept;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct CodeableReference *patternCodeableReference;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Coding *patternCoding;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct ContactPoint *patternContactPoint;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Count *patternCount;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Distance *patternDistance;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Duration *patternDuration;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct HumanName *patternHumanName;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Identifier *patternIdentifier;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Money *patternMoney;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Period *patternPeriod;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Quantity *patternQuantity;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Range *patternRange;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Ratio *patternRatio;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct RatioRange *patternRatioRange;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Reference *patternReference;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct SampledData *patternSampledData;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Signature *patternSignature;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Timing *patternTiming;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct ContactDetail *patternContactDetail;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct DataRequirement *patternDataRequirement;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Expression *patternExpression;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct ParameterDefinition *patternParameterDefinition;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct RelatedArtifact *patternRelatedArtifact;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct TriggerDefinition *patternTriggerDefinition;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct UsageContext *patternUsageContext;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Availability *patternAvailability;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct ExtendedContactDetail *patternExtendedContactDetail;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Dosage *patternDosage;
/* description: Specifies a value that each occurrence of the element in the instance SHALL follow - that is, any value in the pattern must be found in the instance, if the element has a value. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When an element within a pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value

If a pattern[x] is declared on a repeating element, the pattern applies to all repetitions.  If the desire is for a pattern to apply to only one element or a subset of elements, slicing must be used. See [Examples of Patterns](elementdefinition-examples.html#pattern-examples) for examples of pattern usage and the effect it will have. */
	struct Meta *patternMeta;
/* description: A sample value for this element demonstrating the type of information that would typically be found in the element. */
	int example_count;
	struct ElementDefinition_Example *example;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string minValueDate;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string minValueDateTime;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string minValueInstant;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string minValueTime;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number minValueDecimal;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number minValueInteger;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string minValueInteger64;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[1-9][0-9]*$ */
	number minValuePositiveInt;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number minValueUnsignedInt;
/* description: The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
	struct Quantity *minValueQuantity;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string maxValueDate;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string maxValueDateTime;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string maxValueInstant;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string maxValueTime;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number maxValueDecimal;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number maxValueInteger;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string maxValueInteger64;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[1-9][0-9]*$ */
	number maxValuePositiveInt;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number maxValueUnsignedInt;
/* description: The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. */
	struct Quantity *maxValueQuantity;
/* description: Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element. ```maxLength``` SHOULD only be used on primitive data types that have a string representation (see [[[http://hl7.org/fhir/StructureDefinition/structuredefinition-type-characteristics]]]). */
	integer maxLength;
/* description: A reference to an invariant that may make additional statements about the cardinality or value in the instance. */
	int condition_count;
	id condition;
/* description: Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance. */
	int constraint_count;
	struct ElementDefinition_Constraint *constraint;
/* description: Specifies for a primitive data type that the value of the data type cannot be replaced by an extension. */
	boolean mustHaveValue;
/* description: Specifies a list of extensions that can appear in place of a primitive value. */
	int valueAlternatives_count;
	canonical valueAlternatives;
/* description: If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way. Note that this is being phased out and replaced by obligations (see below).  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation. */
	boolean mustSupport;
/* description: If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system. When used on the root element in an extension definition, this indicates whether or not the extension is a modifier extension. */
	boolean isModifier;
/* description: Explains how that element affects the interpretation of the resource or element that contains it. */
	string isModifierReason;
/* description: Whether the element should be included if a client requests a search with the parameter _summary=true. */
	boolean isSummary;
/* description: Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri). */
	struct ElementDefinition_Binding *binding;
/* description: Identifies a concept from an external specification that roughly corresponds to this element. */
	int mapping_count;
	struct ElementDefinition_Mapping *mapping;
};
typedef struct ElementDefinition ElementDefinition;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Slicing {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices. */
	int discriminator_count;
	struct ElementDefinition_Discriminator *discriminator;
/* description: A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated. */
	string description;
/* description: If the matching elements have to occur in the same order as defined in the profile. */
	boolean ordered;
/* description: Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end. */
	string rules;
};
typedef struct ElementDefinition_Slicing ElementDefinition_Slicing;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Discriminator {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: How the element value is interpreted when discrimination is evaluated. */
	string type;
/* description: A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based. */
	string path;
};
typedef struct ElementDefinition_Discriminator ElementDefinition_Discriminator;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Base {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base. */
	string path;
/* description: Minimum cardinality of the base element identified by the path. */
	unsignedInt min;
/* description: Maximum cardinality of the base element identified by the path. */
	string max;
};
typedef struct ElementDefinition_Base ElementDefinition_Base;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Type {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models. */
	uri code_;
/* description: Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide. */
	int profile_count;
	canonical profile;
/* description: Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide. */
	int targetProfile_count;
	canonical targetProfile;
/* description: If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle. */
	int aggregation_count;
	string aggregation;
/* description: Whether this reference needs to be version specific or version independent, or whether either can be used. */
	string versioning;
};
typedef struct ElementDefinition_Type ElementDefinition_Type;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Example {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the purpose of this example among the set of examples. */
	string label;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^\S*$ */
	string valueCanonical;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string valueInstant;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string valueInteger64;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string valueOid;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^[1-9][0-9]*$ */
	number valuePositiveInt;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number valueUnsignedInt;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string valueUuid;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Address *valueAddress;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Age *valueAge;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Annotation *valueAnnotation;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Attachment *valueAttachment;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct CodeableReference *valueCodeableReference;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Coding *valueCoding;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct ContactPoint *valueContactPoint;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Count *valueCount;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Distance *valueDistance;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Duration *valueDuration;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct HumanName *valueHumanName;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Identifier *valueIdentifier;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Money *valueMoney;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Period *valuePeriod;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Quantity *valueQuantity;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Range *valueRange;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Ratio *valueRatio;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct RatioRange *valueRatioRange;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Reference *valueReference;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct SampledData *valueSampledData;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Signature *valueSignature;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Timing *valueTiming;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct ContactDetail *valueContactDetail;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct DataRequirement *valueDataRequirement;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Expression *valueExpression;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct ParameterDefinition *valueParameterDefinition;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct RelatedArtifact *valueRelatedArtifact;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct TriggerDefinition *valueTriggerDefinition;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct UsageContext *valueUsageContext;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Availability *valueAvailability;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct ExtendedContactDetail *valueExtendedContactDetail;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Dosage *valueDosage;
/* description: The actual value for the element, which must be one of the types allowed for this element. */
	struct Meta *valueMeta;
};
typedef struct ElementDefinition_Example ElementDefinition_Example;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Constraint {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality. */
	id key;
/* description: Description of why this constraint is necessary or appropriate. */
	markdown requirements;
/* description: Identifies the impact constraint violation has on the conformance of the instance. */
	string severity;
/* description: If true, indicates that the warning or best practice guideline should be suppressed. */
	boolean suppress;
/* description: Text that can be used to describe the constraint in messages identifying that the constraint has been violated. */
	string human;
/* description: A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met. */
	string expression;
/* description: A reference to the original source of the constraint, for traceability purposes. */
	canonical source;
};
typedef struct ElementDefinition_Constraint ElementDefinition_Constraint;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Binding {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances. */
	string strength;
/* description: Describes the intended use of this particular set of codes. */
	markdown description;
/* description: Refers to the value set that identifies the set of codes the binding refers to. */
	canonical valueSet;
/* description: Additional bindings that help applications implementing this element. Additional bindings do not replace the main binding but provide more information and/or context. */
	int additional_count;
	struct ElementDefinition_Additional *additional;
};
typedef struct ElementDefinition_Binding ElementDefinition_Binding;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Additional {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The use of this additional binding. */
	code purpose;
/* description: The valueSet that is being bound for the purpose. */
	canonical valueSet;
/* description: Documentation of the purpose of use of the bindingproviding additional information about how it is intended to be used. */
	markdown documentation;
/* description: Concise documentation - for summary tables. */
	string shortDoco;
/* description: Qualifies the usage of the binding. Typically bindings are qualified by jurisdiction, but they may also be qualified by gender, workflow status, clinical domain etc. The information to decide whether a usege context applies is usually outside the resource, determined by context, and this might present challenges for validation tooling. */
	int usage_count;
	struct UsageContext *usage;
/* description: Whether the binding applies to all repeats, or just to any one of them. This is only relevant for elements that can repeat. */
	boolean any;
};
typedef struct ElementDefinition_Additional ElementDefinition_Additional;

/* description: Captures constraints on each element within the resource, profile, or extension. */
struct ElementDefinition_Mapping {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An internal reference to the definition of a mapping. */
	id identity;
/* description: Identifies the computable language in which mapping.map is expressed. */
	code language;
/* description: Expresses what part of the target specification corresponds to this element. */
	string map;
/* description: Comments that provide information about the mapping or its use. */
	markdown comment;
};
typedef struct ElementDefinition_Mapping ElementDefinition_Mapping;

/* description: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
struct Account {
/* description: This is a Account resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number). */
	int identifier_count;
	struct Identifier *identifier;
/* description: Indicates whether the account is presently used/usable or not. */
	code status;
/* description: The BillingStatus tracks the lifecycle of the account through the billing process. It indicates how transactions are treated when they are allocated to the account. */
	struct CodeableConcept *billingStatus;
/* description: Categorizes the account for reporting and searching purposes. */
	struct CodeableConcept *type;
/* description: Name used for the account when displaying it to humans in reports, etc. */
	string name;
/* description: Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account. */
	int subject_count;
	struct Reference *subject;
/* description: The date range of services associated with this account. */
	struct Period *servicePeriod;
/* description: An account that collects the charges for a specific set of services offered over a limited time period.  For example, a hospital account might contain all charges related to a given admission, including any inpatient appointments, and possibly re-admissions, of the billing for those re-admissions should be grouped with the initial admission for the purpose of claim submission. */
	int covers_count;
	struct Reference *covers;
/* description: The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account. */
	int coverage_count;
	struct Account_Coverage *coverage;
/* description: Indicates the service area, hospital, department, etc. with responsibility for managing the Account. */
	struct Reference *owner;
/* description: Provides additional information about what the account tracks and how it is used. */
	markdown description;
/* description: The parties responsible for balancing the account if other payment options fall short. */
	int guarantor_count;
	struct Account_Guarantor *guarantor;
/* description: When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s). */
	int diagnosis_count;
	struct Account_Diagnosis *diagnosis;
/* description: When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s). */
	int procedure_count;
	struct Account_Procedure *procedure;
/* description: Other associated accounts related to this account. */
	int relatedAccount_count;
	struct Account_RelatedAccount *relatedAccount;
/* description: The default currency for the account. */
	struct CodeableConcept *currency;
/* description: The calculated account balances - these are calculated and processed by the finance system.The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process. */
	int balance_count;
	struct Account_Balance *balance;
/* description: Time the balance amount was calculated. */
	instant calculatedAt;
};
typedef struct Account Account;

/* description: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
struct Account_Coverage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).

A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing. */
	struct Reference *coverage;
/* description: The priority of the coverage in the context of this account. */
	positiveInt priority;
};
typedef struct Account_Coverage Account_Coverage;

/* description: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
struct Account_Guarantor {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The entity who is responsible. */
	struct Reference *party;
/* description: A guarantor may be placed on credit hold or otherwise have their role temporarily suspended. */
	boolean onHold;
/* description: The timeframe during which the guarantor accepts responsibility for the account. */
	struct Period *period;
};
typedef struct Account_Guarantor Account_Guarantor;

/* description: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
struct Account_Diagnosis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Ranking of the diagnosis (for each type). */
	positiveInt sequence;
/* description: The diagnosis relevant to the account. */
	struct CodeableReference *condition;
/* description: Ranking of the diagnosis (for each type). */
	dateTime dateOfDiagnosis;
/* description: Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …). */
	int type_count;
	struct CodeableConcept *type;
/* description: Was the Diagnosis present on Admission in the related Encounter. */
	boolean onAdmission;
/* description: The package code can be used to group diagnoses that may be priced or delivered as a single product. Such as DRGs. */
	int packageCode_count;
	struct CodeableConcept *packageCode;
};
typedef struct Account_Diagnosis Account_Diagnosis;

/* description: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
struct Account_Procedure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Ranking of the procedure (for each type). */
	positiveInt sequence;
/* description: The procedure relevant to the account. */
	struct CodeableReference *code_;
/* description: Date of the procedure when using a coded procedure. If using a reference to a procedure, then the date on the procedure should be used. */
	dateTime dateOfService;
/* description: How this procedure value should be used in charging the account. */
	int type_count;
	struct CodeableConcept *type;
/* description: The package code can be used to group procedures that may be priced or delivered as a single product. Such as DRGs. */
	int packageCode_count;
	struct CodeableConcept *packageCode;
/* description: Any devices that were associated with the procedure relevant to the account. */
	int device_count;
	struct Reference *device;
};
typedef struct Account_Procedure Account_Procedure;

/* description: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
struct Account_RelatedAccount {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Relationship of the associated Account. */
	struct CodeableConcept *relationship;
/* description: Reference to an associated Account. */
	struct Reference *account;
};
typedef struct Account_RelatedAccount Account_RelatedAccount;

/* description: A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc. */
struct Account_Balance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Who is expected to pay this part of the balance. */
	struct CodeableConcept *aggregate;
/* description: The term of the account balances - The balance value is the amount that was outstanding for this age. */
	struct CodeableConcept *term;
/* description: The amount is only an estimated value - this is likely common for `current` term balances, but not with known terms (that were generated by a backend process). */
	boolean estimate;
/* description: The actual balance value calculated for the age defined in the term property. */
	struct Money *amount;
};
typedef struct Account_Balance Account_Balance;

/* description: This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. */
struct ActivityDefinition {
/* description: This is a ActivityDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the activity definition. */
	string title;
/* description: The status of this activity definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the activity definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the activity definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the activity definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the activity definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this activity definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the activity definition content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, or bibliographic references. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: An explanatory or alternate title for the activity definition giving additional information about its content. */
	string subtitle;
/* description: A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
	struct Reference *subjectReference;
/* description: A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
/* pattern: ^\S*$ */
	string subjectCanonical;
/* description: A detailed description of how the activity definition is used from a clinical perspective. */
	markdown usage;
/* description: A reference to a Library resource containing any formal logic used by the activity definition. */
	int library_count;
	canonical library;
/* description: A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest. */
	code kind;
/* description: A profile to which the target of the activity definition is expected to conform. */
	canonical profile;
/* description: Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter. */
	struct CodeableConcept *code_;
/* description: Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain. */
	code intent;
/* description: Indicates how quickly the activity  should be addressed with respect to other requests. */
	code priority;
/* description: Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action. */
	boolean doNotPerform;
/* description: The timing or frequency upon which the described activity is to occur. */
	struct Timing *timingTiming;
/* description: The timing or frequency upon which the described activity is to occur. */
	struct Age *timingAge;
/* description: The timing or frequency upon which the described activity is to occur. */
	struct Range *timingRange;
/* description: The timing or frequency upon which the described activity is to occur. */
	struct Duration *timingDuration;
/* description: If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc. */
/* pattern: ^true|false$ */
	boolean asNeededBoolean;
/* description: If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc. */
	struct CodeableConcept *asNeededCodeableConcept;
/* description: Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc. */
	struct CodeableReference *location;
/* description: Indicates who should participate in performing the action described. */
	int participant_count;
	struct ActivityDefinition_Participant *participant;
/* description: Identifies the food, drug or other product being consumed or supplied in the activity. */
	struct Reference *productReference;
/* description: Identifies the food, drug or other product being consumed or supplied in the activity. */
	struct CodeableConcept *productCodeableConcept;
/* description: Identifies the quantity expected to be consumed at once (per dose, per meal, etc.). */
	struct Quantity *quantity;
/* description: Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources. */
	int dosage_count;
	struct Dosage *dosage;
/* description: Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites). */
	int bodySite_count;
	struct CodeableConcept *bodySite;
/* description: Defines specimen requirements for the action to be performed, such as required specimens for a lab test. */
	int specimenRequirement_count;
	canonical specimenRequirement;
/* description: Defines observation requirements for the action to be performed, such as body weight or surface area. */
	int observationRequirement_count;
	canonical observationRequirement;
/* description: Defines the observations that are expected to be produced by the action. */
	int observationResultRequirement_count;
	canonical observationResultRequirement;
/* description: A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input. */
	canonical transform;
/* description: Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result. */
	int dynamicValue_count;
	struct ActivityDefinition_DynamicValue *dynamicValue;
};
typedef struct ActivityDefinition ActivityDefinition;

/* description: This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. */
struct ActivityDefinition_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of participant in the action. */
	code type;
/* description: The type of participant in the action. */
	canonical typeCanonical;
/* description: The type of participant in the action. */
	struct Reference *typeReference;
/* description: The role the participant should play in performing the described action. */
	struct CodeableConcept *role;
/* description: Indicates how the actor will be involved in the action - author, reviewer, witness, etc. */
	struct CodeableConcept *function;
};
typedef struct ActivityDefinition_Participant ActivityDefinition_Participant;

/* description: This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context. */
struct ActivityDefinition_DynamicValue {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). */
	string path;
/* description: An expression specifying the value of the customized element. */
	struct Expression *expression;
};
typedef struct ActivityDefinition_DynamicValue ActivityDefinition_DynamicValue;

/* description: Describes an actor - a human or an application that plays a role in data exchange, and that may have obligations associated with the role the actor plays. */
struct ActorDefinition {
/* description: This is a ActorDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this actor definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this actor definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the actor definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this actor definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the actor definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the actor definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the actor definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the actor definition. */
	string title;
/* description: The status of this actor definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this actor definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the actor definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the actor definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the actor definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the actor. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate actor definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the actor definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this actor definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the actor definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the actor definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: Whether the actor represents a human or an appliction. */
	code type;
/* description: Documentation about the functionality of the actor. */
	markdown documentation;
/* description: A reference to additional documentation about the actor, but description and documentation. */
	int reference_count;
	url reference;
/* description: The capability statement for the actor (if the concept is applicable). */
	canonical capabilities;
/* description: A url that identifies the definition of this actor in another IG (which IG must be listed in the dependencies). This actor inherits all the obligations etc. as defined in the other IG. */
	int derivedFrom_count;
	canonical derivedFrom;
};
typedef struct ActorDefinition ActorDefinition;

/* description: A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed). */
struct AdministrableProductDefinition {
/* description: This is a AdministrableProductDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier for the administrable product. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of this administrable product. Enables tracking the life-cycle of the content. */
	code status;
/* description: References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product.  If this administrable product describes the administration of a crushed tablet, the 'formOf' would be the product representing a distribution containing tablets and possibly also a cream.  This is distinct from the 'producedFrom' which refers to the specific components of the product that are used in this preparation, rather than the product as a whole. */
	int formOf_count;
	struct Reference *formOf;
/* description: The dose form of the final product after necessary reconstitution or processing. Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form was 'powder for solution for injection', the administrable dose form could be 'solution for injection' (once mixed with another item having manufactured form 'solvent for solution for injection'). */
	struct CodeableConcept *administrableDoseForm;
/* description: The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in 'contains 5 ml per vial'). */
	struct CodeableConcept *unitOfPresentation;
/* description: Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form.  In some cases, an administrable form might use all of the items from the overall product (or there might only be one item), while in other cases, an administrable form might use only a subset of the items available in the overall product.  For example, an administrable form might involve combining a liquid and a powder available as part of an overall product, but not involve applying the also supplied cream. */
	int producedFrom_count;
	struct Reference *producedFrom;
/* description: The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton (via AdministrableProductDefinition.producedFrom) to state which component items are used to make this, or using by incoming references from the Ingredient resource, to state in detail which substances exist within this. This element allows a basic coded ingredient to be used. */
	int ingredient_count;
	struct CodeableConcept *ingredient;
/* description: A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product. This is not intended for devices that are just co-packaged. */
	struct Reference *device;
/* description: A general description of the product, when in its final form, suitable for administration e.g. effervescent blue liquid, to be swallowed. Intended to be used when the other structured properties of this resource are insufficient or cannot be supported. It is not intended to duplicate information already carried elswehere. */
	markdown description;
/* description: Characteristics e.g. a product's onset of action. */
	int property_count;
	struct AdministrableProductDefinition_Property *property;
/* description: The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. RouteOfAdministration cannot be used when the 'formOf' product already uses MedicinalProductDefinition.route (and vice versa). */
	int routeOfAdministration_count;
	struct AdministrableProductDefinition_RouteOfAdministration *routeOfAdministration;
};
typedef struct AdministrableProductDefinition AdministrableProductDefinition;

/* description: A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed). */
struct AdministrableProductDefinition_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code expressing the type of characteristic. */
	struct CodeableConcept *type;
/* description: A value for the characteristic. */
	struct CodeableConcept *valueCodeableConcept;
/* description: A value for the characteristic. */
	struct Quantity *valueQuantity;
/* description: A value for the characteristic. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: A value for the characteristic. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: A value for the characteristic. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: A value for the characteristic. */
	struct Attachment *valueAttachment;
/* description: A value for the characteristic. */
	struct Reference *valueReference;
/* description: The status of characteristic e.g. assigned or pending. */
	struct CodeableConcept *status;
};
typedef struct AdministrableProductDefinition_Property AdministrableProductDefinition_Property;

/* description: A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed). */
struct AdministrableProductDefinition_RouteOfAdministration {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Coded expression for the route. */
	struct CodeableConcept *code_;
/* description: The first dose (dose quantity) administered can be specified for the product, using a numerical value and its unit of measurement. */
	struct Quantity *firstDose;
/* description: The maximum single dose that can be administered, specified using a numerical value and its unit of measurement. */
	struct Quantity *maxSingleDose;
/* description: The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered. */
	struct Quantity *maxDosePerDay;
/* description: The maximum dose per treatment period that can be administered. */
	struct Ratio *maxDosePerTreatmentPeriod;
/* description: The maximum treatment period during which the product can be administered. */
	struct Duration *maxTreatmentPeriod;
/* description: A species for which this route applies. */
	int targetSpecies_count;
	struct AdministrableProductDefinition_TargetSpecies *targetSpecies;
};
typedef struct AdministrableProductDefinition_RouteOfAdministration AdministrableProductDefinition_RouteOfAdministration;

/* description: A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed). */
struct AdministrableProductDefinition_TargetSpecies {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Coded expression for the species. */
	struct CodeableConcept *code_;
/* description: A species specific time during which consumption of animal product is not appropriate. */
	int withdrawalPeriod_count;
	struct AdministrableProductDefinition_WithdrawalPeriod *withdrawalPeriod;
};
typedef struct AdministrableProductDefinition_TargetSpecies AdministrableProductDefinition_TargetSpecies;

/* description: A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed). */
struct AdministrableProductDefinition_WithdrawalPeriod {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Coded expression for the type of tissue for which the withdrawal period applies, e.g. meat, milk. */
	struct CodeableConcept *tissue;
/* description: A value for the time. */
	struct Quantity *value;
/* description: Extra information about the withdrawal period. */
	string supportingInformation;
};
typedef struct AdministrableProductDefinition_WithdrawalPeriod AdministrableProductDefinition_WithdrawalPeriod;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent {
/* description: This is a AdverseEvent resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The current state of the adverse event or potential adverse event. */
	code status;
/* description: Whether the event actually happened or was a near miss. Note that this is independent of whether anyone was affected or harmed or how severely. */
	code actuality;
/* description: The overall type of event, intended for search and filtering purposes. */
	int category_count;
	struct CodeableConcept *category;
/* description: Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused. */
	struct CodeableConcept *code_;
/* description: This subject or group impacted by the event. */
	struct Reference *subject;
/* description: The Encounter associated with the start of the AdverseEvent. */
	struct Reference *encounter;
/* description: The date (and perhaps time) when the cause of the AdverseEvent occurred. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string causeDateTime;
/* description: The date (and perhaps time) when the cause of the AdverseEvent occurred. */
	struct Period *causePeriod;
/* description: The date (and perhaps time) when the effect of the AdverseEvent occurred. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string effectDateTime;
/* description: The date (and perhaps time) when the effect of the AdverseEvent occurred. */
	struct Period *effectPeriod;
/* description: Estimated or actual date the AdverseEvent began, in the opinion of the reporter. */
	dateTime detected;
/* description: The date on which the existence of the AdverseEvent was first recorded. */
	dateTime recordedDate;
/* description: Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall. */
	int resultingEffect_count;
	struct Reference *resultingEffect;
/* description: The information about where the adverse event occurred. */
	struct Reference *location;
/* description: Assessment whether this event, or averted event, was of clinical importance. */
	struct CodeableConcept *seriousness;
/* description: Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal. */
	int outcome_count;
	struct CodeableConcept *outcome;
/* description: Information on who recorded the adverse event.  May be the patient or a practitioner. */
	struct Reference *recorder;
/* description: Indicates who or what participated in the adverse event and how they were involved. */
	int participant_count;
	struct AdverseEvent_Participant *participant;
/* description: The research study that the subject is enrolled in. */
	int study_count;
	struct Reference *study;
/* description: Considered likely or probable or anticipated in the research study.  Whether the reported event matches any of the outcomes for the patient that are considered by the study as known or likely. */
	boolean expectedInResearchStudy;
/* description: Describes the entity that is suspected to have caused the adverse event. */
	int suspectEntity_count;
	struct AdverseEvent_SuspectEntity *suspectEntity;
/* description: The contributing factors suspected to have increased the probability or severity of the adverse event. */
	int contributingFactor_count;
	struct AdverseEvent_ContributingFactor *contributingFactor;
/* description: Preventive actions that contributed to avoiding the adverse event. */
	int preventiveAction_count;
	struct AdverseEvent_PreventiveAction *preventiveAction;
/* description: The ameliorating action taken after the adverse event occured in order to reduce the extent of harm. */
	int mitigatingAction_count;
	struct AdverseEvent_MitigatingAction *mitigatingAction;
/* description: Supporting information relevant to the event. */
	int supportingInfo_count;
	struct AdverseEvent_SupportingInfo *supportingInfo;
/* description: Comments made about the adverse event by the performer, subject or other participants. */
	int note_count;
	struct Annotation *note;
};
typedef struct AdverseEvent AdverseEvent;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant. */
	struct CodeableConcept *function;
/* description: Indicates who or what participated in the event. */
	struct Reference *actor;
};
typedef struct AdverseEvent_Participant AdverseEvent_Participant;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent_SuspectEntity {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device. */
	struct CodeableConcept *instanceCodeableConcept;
/* description: Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device. */
	struct Reference *instanceReference;
/* description: Information on the possible cause of the event. */
	struct AdverseEvent_Causality *causality;
};
typedef struct AdverseEvent_SuspectEntity AdverseEvent_SuspectEntity;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent_Causality {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The method of evaluating the relatedness of the suspected entity to the event. */
	struct CodeableConcept *assessmentMethod;
/* description: The result of the assessment regarding the relatedness of the suspected entity to the event. */
	struct CodeableConcept *entityRelatedness;
/* description: The author of the information on the possible cause of the event. */
	struct Reference *author;
};
typedef struct AdverseEvent_Causality AdverseEvent_Causality;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent_ContributingFactor {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The item that is suspected to have increased the probability or severity of the adverse event. */
	struct Reference *itemReference;
/* description: The item that is suspected to have increased the probability or severity of the adverse event. */
	struct CodeableConcept *itemCodeableConcept;
};
typedef struct AdverseEvent_ContributingFactor AdverseEvent_ContributingFactor;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent_PreventiveAction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The action that contributed to avoiding the adverse event. */
	struct Reference *itemReference;
/* description: The action that contributed to avoiding the adverse event. */
	struct CodeableConcept *itemCodeableConcept;
};
typedef struct AdverseEvent_PreventiveAction AdverseEvent_PreventiveAction;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent_MitigatingAction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The ameliorating action taken after the adverse event occured in order to reduce the extent of harm. */
	struct Reference *itemReference;
/* description: The ameliorating action taken after the adverse event occured in order to reduce the extent of harm. */
	struct CodeableConcept *itemCodeableConcept;
};
typedef struct AdverseEvent_MitigatingAction AdverseEvent_MitigatingAction;

/* description: An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints. */
struct AdverseEvent_SupportingInfo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action. */
	struct Reference *itemReference;
/* description: Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action. */
	struct CodeableConcept *itemCodeableConcept;
};
typedef struct AdverseEvent_SupportingInfo AdverseEvent_SupportingInfo;

/* description: Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance. */
struct AllergyIntolerance {
/* description: This is a AllergyIntolerance resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The clinical status of the allergy or intolerance. */
	struct CodeableConcept *clinicalStatus;
/* description: Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).  The verification status pertains to the allergy or intolerance, itself, not to any specific AllergyIntolerance attribute. */
	struct CodeableConcept *verificationStatus;
/* description: Identification of the underlying physiological mechanism for the reaction risk. */
	struct CodeableConcept *type;
/* description: Category of the identified substance. */
	int category_count;
	code category;
/* description: Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance. */
	code criticality;
/* description: Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance. */
	struct CodeableConcept *code_;
/* description: The patient who has the allergy or intolerance. */
	struct Reference *patient;
/* description: The encounter when the allergy or intolerance was asserted. */
	struct Reference *encounter;
/* description: Estimated or actual date,  date-time, or age when allergy or intolerance was identified. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string onsetDateTime;
/* description: Estimated or actual date,  date-time, or age when allergy or intolerance was identified. */
	struct Age *onsetAge;
/* description: Estimated or actual date,  date-time, or age when allergy or intolerance was identified. */
	struct Period *onsetPeriod;
/* description: Estimated or actual date,  date-time, or age when allergy or intolerance was identified. */
	struct Range *onsetRange;
/* description: Estimated or actual date,  date-time, or age when allergy or intolerance was identified. */
/* pattern: ^^[\s\S]+$$ */
	string onsetString;
/* description: The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date. */
	dateTime recordedDate;
/* description: Indicates who or what participated in the activities related to the allergy or intolerance and how they were involved. */
	int participant_count;
	struct AllergyIntolerance_Participant *participant;
/* description: Represents the date and/or time of the last known occurrence of a reaction event. */
	dateTime lastOccurrence;
/* description: Additional narrative about the propensity for the Adverse Reaction, not captured in other fields. */
	int note_count;
	struct Annotation *note;
/* description: Details about each adverse reaction event linked to exposure to the identified substance. */
	int reaction_count;
	struct AllergyIntolerance_Reaction *reaction;
};
typedef struct AllergyIntolerance AllergyIntolerance;

/* description: Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance. */
struct AllergyIntolerance_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the actor in the activities related to the allergy or intolerance. */
	struct CodeableConcept *function;
/* description: Indicates who or what participated in the activities related to the allergy or intolerance. */
	struct Reference *actor;
};
typedef struct AllergyIntolerance_Participant AllergyIntolerance_Participant;

/* description: Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance. */
struct AllergyIntolerance_Reaction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance. */
	struct CodeableConcept *substance;
/* description: Clinical symptoms and/or signs that are observed or associated with the adverse reaction event. */
	int manifestation_count;
	struct CodeableReference *manifestation;
/* description: Text description about the reaction as a whole, including details of the manifestation if required. */
	string description;
/* description: Record of the date and/or time of the onset of the Reaction. */
	dateTime onset;
/* description: Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations. */
	code severity;
/* description: Identification of the route by which the subject was exposed to the substance. */
	struct CodeableConcept *exposureRoute;
/* description: Additional text about the adverse reaction event not captured in other fields. */
	int note_count;
	struct Annotation *note;
};
typedef struct AllergyIntolerance_Reaction AllergyIntolerance_Reaction;

/* description: A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
struct Appointment {
/* description: This is a Appointment resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation). */
	int identifier_count;
	struct Identifier *identifier;
/* description: The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status. */
	code status;
/* description: The coded reason for the appointment being cancelled. This is often used in reporting/billing/further processing to determine if further actions are required, or specific fees apply. */
	struct CodeableConcept *cancellationReason;
/* description: Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations. */
	int class_count;
	struct CodeableConcept *class;
/* description: A broad categorization of the service that is to be performed during this appointment. */
	int serviceCategory_count;
	struct CodeableConcept *serviceCategory;
/* description: The specific service that is to be performed during this appointment. */
	int serviceType_count;
	struct CodeableReference *serviceType;
/* description: The specialty of a practitioner that would be required to perform the service requested in this appointment. */
	int specialty_count;
	struct CodeableConcept *specialty;
/* description: The style of appointment or patient that has been booked in the slot (not service type). */
	struct CodeableConcept *appointmentType;
/* description: The reason that this appointment is being scheduled. This is more clinical than administrative. This can be coded, or as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure. */
	int reason_count;
	struct CodeableReference *reason;
/* description: The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority). */
	struct CodeableConcept *priority;
/* description: The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the note field. */
	string description;
/* description: Appointment replaced by this Appointment in cases where there is a cancellation, the details of the cancellation can be found in the cancellationReason property (on the referenced resource). */
	int replaces_count;
	struct Reference *replaces;
/* description: Connection details of a virtual service (e.g. conference call). */
	int virtualService_count;
	struct VirtualServiceDetail *virtualService;
/* description: Additional information to support the appointment provided when making the appointment. */
	int supportingInformation_count;
	struct Reference *supportingInformation;
/* description: The previous appointment in a series of related appointments. */
	struct Reference *previousAppointment;
/* description: The originating appointment in a recurring set of related appointments. */
	struct Reference *originatingAppointment;
/* description: Date/Time that the appointment is to take place. */
	instant start;
/* description: Date/Time that the appointment is to conclude. */
	instant end;
/* description: Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end. */
	positiveInt minutesDuration;
/* description: A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.

The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system. */
	int requestedPeriod_count;
	struct Period *requestedPeriod;
/* description: The slots from the participants' schedules that will be filled by the appointment. */
	int slot_count;
	struct Reference *slot;
/* description: The set of accounts that is expected to be used for billing the activities that result from this Appointment. */
	int account_count;
	struct Reference *account;
/* description: The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment. */
	dateTime created;
/* description: The date/time describing when the appointment was cancelled. */
	dateTime cancellationDate;
/* description: Additional notes/comments about the appointment. */
	int note_count;
	struct Annotation *note;
/* description: While Appointment.note contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before). */
	int patientInstruction_count;
	struct CodeableReference *patientInstruction;
/* description: The request this appointment is allocated to assess (e.g. incoming referral or procedure request). */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The patient or group associated with the appointment, if they are to be present (usually) then they should also be included in the participant backbone element. */
	struct Reference *subject;
/* description: List of participants involved in the appointment. */
	int participant_count;
	struct Appointment_Participant *participant;
/* description: The sequence number that identifies a specific appointment in a recurring pattern. */
	positiveInt recurrenceId;
/* description: This appointment varies from the recurring pattern. */
	boolean occurrenceChanged;
/* description: The details of the recurrence pattern or template that is used to generate recurring appointments. */
	int recurrenceTemplate_count;
	struct Appointment_RecurrenceTemplate *recurrenceTemplate;
};
typedef struct Appointment Appointment;

/* description: A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
struct Appointment_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Role of participant in the appointment. */
	int type_count;
	struct CodeableConcept *type;
/* description: Participation period of the actor. */
	struct Period *period;
/* description: The individual, device, location, or service participating in the appointment. */
	struct Reference *actor;
/* description: Whether this participant is required to be present at the meeting. If false, the participant is optional. */
	boolean required;
/* description: Participation status of the actor. */
	code status;
};
typedef struct Appointment_Participant Appointment_Participant;

/* description: A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
struct Appointment_RecurrenceTemplate {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The timezone of the recurring appointment occurrences. */
	struct CodeableConcept *timezone;
/* description: How often the appointment series should recur. */
	struct CodeableConcept *recurrenceType;
/* description: Recurring appointments will not occur after this date. */
	date lastOccurrenceDate;
/* description: How many appointments are planned in the recurrence. */
	positiveInt occurrenceCount;
/* description: The list of specific dates that will have appointments generated. */
	int occurrenceDate_count;
	date occurrenceDate;
/* description: Information about weekly recurring appointments. */
	struct Appointment_WeeklyTemplate *weeklyTemplate;
/* description: Information about monthly recurring appointments. */
	struct Appointment_MonthlyTemplate *monthlyTemplate;
/* description: Information about yearly recurring appointments. */
	struct Appointment_YearlyTemplate *yearlyTemplate;
/* description: Any dates, such as holidays, that should be excluded from the recurrence. */
	int excludingDate_count;
	date excludingDate;
/* description: Any dates, such as holidays, that should be excluded from the recurrence. */
	int excludingRecurrenceId_count;
	positiveInt excludingRecurrenceId;
};
typedef struct Appointment_RecurrenceTemplate Appointment_RecurrenceTemplate;

/* description: A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
struct Appointment_WeeklyTemplate {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates that recurring appointments should occur on Mondays. */
	boolean monday;
/* description: Indicates that recurring appointments should occur on Tuesdays. */
	boolean tuesday;
/* description: Indicates that recurring appointments should occur on Wednesdays. */
	boolean wednesday;
/* description: Indicates that recurring appointments should occur on Thursdays. */
	boolean thursday;
/* description: Indicates that recurring appointments should occur on Fridays. */
	boolean friday;
/* description: Indicates that recurring appointments should occur on Saturdays. */
	boolean saturday;
/* description: Indicates that recurring appointments should occur on Sundays. */
	boolean sunday;
/* description: The interval defines if the recurrence is every nth week. The default is every week, so it is expected that this value will be 2 or more.e.g. For recurring every second week this interval would be 2, or every third week the interval would be 3. */
	positiveInt weekInterval;
};
typedef struct Appointment_WeeklyTemplate Appointment_WeeklyTemplate;

/* description: A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
struct Appointment_MonthlyTemplate {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates that appointments in the series of recurring appointments should occur on a specific day of the month. */
	positiveInt dayOfMonth;
/* description: Indicates which week within a month the appointments in the series of recurring appointments should occur on. */
	struct Coding *nthWeekOfMonth;
/* description: Indicates which day of the week the recurring appointments should occur each nth week. */
	struct Coding *dayOfWeek;
/* description: Indicates that recurring appointments should occur every nth month. */
	positiveInt monthInterval;
};
typedef struct Appointment_MonthlyTemplate Appointment_MonthlyTemplate;

/* description: A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s). */
struct Appointment_YearlyTemplate {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Appointment recurs every nth year. */
	positiveInt yearInterval;
};
typedef struct Appointment_YearlyTemplate Appointment_YearlyTemplate;

/* description: A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection. */
struct AppointmentResponse {
/* description: This is a AppointmentResponse resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Appointment that this response is replying to. */
	struct Reference *appointment;
/* description: Indicates that the response is proposing a different time that was initially requested.  The new proposed time will be indicated in the start and end properties. */
	boolean proposedNewTime;
/* description: Date/Time that the appointment is to take place, or requested new start time. */
	instant start;
/* description: This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time. */
	instant end;
/* description: Role of participant in the appointment. */
	int participantType_count;
	struct CodeableConcept *participantType;
/* description: A Person, Location, HealthcareService, or Device that is participating in the appointment. */
	struct Reference *actor;
/* description: Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty. */
	code participantStatus;
/* description: Additional comments about the appointment. */
	markdown comment;
/* description: Indicates that this AppointmentResponse applies to all occurrences in a recurring request. */
	boolean recurring;
/* description: The original date within a recurring request. This could be used in place of the recurrenceId to be more direct (or where the template is provided through the simple list of dates in `Appointment.occurrenceDate`). */
	date occurrenceDate;
/* description: The recurrence ID (sequence number) of the specific appointment when responding to a recurring request. */
	positiveInt recurrenceId;
};
typedef struct AppointmentResponse AppointmentResponse;

/* description: This Resource provides one or more comments, classifiers or ratings about a Resource and supports attribution and rights management metadata for the added content. */
struct ArtifactAssessment {
/* description: This is a ArtifactAssessment resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A formal identifier that is used to identify this artifact assessment when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A short title for the assessment for use in displaying and selecting. */
	string title;
/* description: Display of or reference to the bibliographic citation of the comment, classifier, or rating. */
	struct Reference *citeAsReference;
/* description: Display of or reference to the bibliographic citation of the comment, classifier, or rating. */
/* pattern: ^^[\s\S]+$$ */
	string citeAsMarkdown;
/* description: The date  (and optionally time) when the artifact assessment was published. The date must change when the disposition changes and it must change if the workflow status code changes. In addition, it should change when the substantive content of the artifact assessment changes. */
	dateTime date_;
/* description: A copyright statement relating to the artifact assessment and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the artifact assessment. */
	markdown copyright;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about. */
	struct Reference *artifactReference;
/* description: A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about. */
/* pattern: ^\S*$ */
	string artifactCanonical;
/* description: A reference to a resource, canonical resource, or non-FHIR resource which the comment or assessment is about. */
/* pattern: ^\S*$ */
	string artifactUri;
/* description: A component comment, classifier, or rating of the artifact. */
	int content_count;
	struct ArtifactAssessment_Content *content;
/* description: Indicates the workflow status of the comment or change request. */
	code workflowStatus;
/* description: Indicates the disposition of the responsible party to the comment or change request. */
	code disposition;
};
typedef struct ArtifactAssessment ArtifactAssessment;

/* description: This Resource provides one or more comments, classifiers or ratings about a Resource and supports attribution and rights management metadata for the added content. */
struct ArtifactAssessment_Content {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of information this component of the content represents. */
	code informationType;
/* description: A brief summary of the content of this component. */
	markdown summary;
/* description: Indicates what type of content this component represents. */
	struct CodeableConcept *type;
/* description: Represents a rating, classifier, or assessment of the artifact. */
	int classifier_count;
	struct CodeableConcept *classifier;
/* description: A quantitative rating of the artifact. */
	struct Quantity *quantity;
/* description: Indicates who or what authored the content. */
	struct Reference *author;
/* description: A URI that points to what the comment is about, such as a line of text in the CQL, or a specific element in a resource. */
	int path_count;
	uri path;
/* description: Additional related artifacts that provide supporting documentation, additional evidence, or further information related to the content. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: Acceptable to publicly share the comment, classifier or rating. */
	boolean freeToShare;
/* description: If the informationType is container, the components of the content. */
	int component_count;
	struct ArtifactAssessment_Content *component;
};
typedef struct ArtifactAssessment_Content ArtifactAssessment_Content;

/* description: A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis. */
struct AuditEvent {
/* description: This is a AuditEvent resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Classification of the type of event. */
	int category_count;
	struct CodeableConcept *category;
/* description: Describes what happened. The most specific code for the event. */
	struct CodeableConcept *code_;
/* description: Indicator for type of action performed during the event that generated the audit. */
	code action;
/* description: Indicates and enables segmentation of various severity including debugging from critical. */
	code severity;
/* description: The time or period during which the activity occurred. */
	struct Period *occurredPeriod;
/* description: The time or period during which the activity occurred. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurredDateTime;
/* description: The time when the event was recorded. */
	instant recorded;
/* description: Indicates whether the event succeeded or failed. A free text descripiton can be given in outcome.text. */
	struct AuditEvent_Outcome *outcome;
/* description: The authorization (e.g., PurposeOfUse) that was used during the event being recorded. */
	int authorization_count;
	struct CodeableConcept *authorization;
/* description: Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity. */
	struct Reference *patient;
/* description: This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests). */
	struct Reference *encounter;
/* description: An actor taking an active role in the event or activity that is logged. */
	int agent_count;
	struct AuditEvent_Agent *agent;
/* description: The actor that is reporting the event. */
	struct AuditEvent_Source *source;
/* description: Specific instances of data or objects that have been accessed. */
	int entity_count;
	struct AuditEvent_Entity *entity;
};
typedef struct AuditEvent AuditEvent;

/* description: A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis. */
struct AuditEvent_Outcome {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates whether the event succeeded or failed. */
	struct Coding *code_;
/* description: Additional details about the error. This may be a text description of the error or a system code that identifies the error. */
	int detail_count;
	struct CodeableConcept *detail;
};
typedef struct AuditEvent_Outcome AuditEvent_Outcome;

/* description: A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis. */
struct AuditEvent_Agent {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Functional Role of the user when performing the event. */
	struct CodeableConcept *type;
/* description: The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity. */
	int role_count;
	struct CodeableConcept *role;
/* description: Reference to who this agent is that was involved in the event. */
	struct Reference *who;
/* description: Indicator that the user is or is not the requestor, or initiator, for the event being audited. */
	boolean requestor;
/* description: Where the agent location is known, the agent location when the event occurred. */
	struct Reference *location;
/* description: Where the policy(ies) are known that authorized the agent participation in the event. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used. */
	int policy_count;
	uri policy;
/* description: When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details. */
	struct Reference *networkReference;
/* description: When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details. */
/* pattern: ^\S*$ */
	string networkUri;
/* description: When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details. */
/* pattern: ^^[\s\S]+$$ */
	string networkString;
/* description: The authorization (e.g., PurposeOfUse) that was used during the event being recorded. */
	int authorization_count;
	struct CodeableConcept *authorization;
};
typedef struct AuditEvent_Agent AuditEvent_Agent;

/* description: A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis. */
struct AuditEvent_Source {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group. */
	struct Reference *site;
/* description: Identifier of the source where the event was detected. */
	struct Reference *observer;
/* description: Code specifying the type of source where event originated. */
	int type_count;
	struct CodeableConcept *type;
};
typedef struct AuditEvent_Source AuditEvent_Source;

/* description: A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis. */
struct AuditEvent_Entity {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies a specific instance of the entity. The reference should be version specific. This is allowed to be a Parameters resource. */
	struct Reference *what;
/* description: Code representing the role the entity played in the event being audited. */
	struct CodeableConcept *role;
/* description: Security labels for the identified entity. */
	int securityLabel_count;
	struct CodeableConcept *securityLabel;
/* description: The query parameters for a query-type entities. */
	base64Binary query;
/* description: Tagged value pairs for conveying additional information about the entity. */
	int detail_count;
	struct AuditEvent_Detail *detail;
/* description: The entity is attributed to an agent to express the agent's responsibility for that entity in the activity. This is most used to indicate when persistence media (the entity) are used by an agent. For example when importing data from a device, the device would be described in an entity, and the user importing data from that media would be indicated as the entity.agent. */
	int agent_count;
	struct AuditEvent_Agent *agent;
};
typedef struct AuditEvent_Entity AuditEvent_Entity;

/* description: A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis. */
struct AuditEvent_Detail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of extra detail provided in the value. */
	struct CodeableConcept *type;
/* description: The  value of the extra detail. */
	struct Quantity *valueQuantity;
/* description: The  value of the extra detail. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The  value of the extra detail. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The  value of the extra detail. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The  value of the extra detail. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The  value of the extra detail. */
	struct Range *valueRange;
/* description: The  value of the extra detail. */
	struct Ratio *valueRatio;
/* description: The  value of the extra detail. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The  value of the extra detail. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The  value of the extra detail. */
	struct Period *valuePeriod;
/* description: The  value of the extra detail. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
};
typedef struct AuditEvent_Detail AuditEvent_Detail;

/* description: Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification. */
struct Basic {
/* description: This is a Basic resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier assigned to the resource for business purposes, outside the context of FHIR. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Identifies the 'type' of resource - equivalent to the resource name for other resources. */
	struct CodeableConcept *code_;
/* description: Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource. */
	struct Reference *subject;
/* description: Identifies when the resource was first created. */
	dateTime created;
/* description: Indicates who was responsible for creating the resource instance. */
	struct Reference *author;
};
typedef struct Basic Basic;

/* description: A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc. */
struct Binary {
/* description: This is a Binary resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: MimeType of the binary content represented as a standard MimeType (BCP 13). */
	code contentType;
/* description: This element identifies another resource that can be used as a proxy of the security sensitivity to use when deciding and enforcing access control rules for the Binary resource. Given that the Binary resource contains very few elements that can be used to determine the sensitivity of the data and relationships to individuals, the referenced resource stands in as a proxy equivalent for this purpose. This referenced resource may be related to the Binary (e.g. DocumentReference), or may be some non-related Resource purely as a security proxy. E.g. to identify that the binary resource relates to a patient, and access should only be granted to applications that have access to the patient. */
	struct Reference *securityContext;
/* description: The actual content, base64 encoded. */
	base64Binary data;
};
typedef struct Binary Binary;

/* description: This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity. */
struct BiologicallyDerivedProduct {
/* description: This is a BiologicallyDerivedProduct resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Broad category of this product. */
	struct Coding *productCategory;
/* description: A codified value that systematically supports characterization and classification of medical products of human origin inclusive of processing conditions such as additives, volumes and handling conditions. */
	struct CodeableConcept *productCode;
/* description: Parent product (if any) for this biologically-derived product. */
	int parent_count;
	struct Reference *parent;
/* description: Request to obtain and/or infuse this biologically derived product. */
	int request_count;
	struct Reference *request;
/* description: Unique instance identifiers assigned to a biologically derived product. Note: This is a business identifier, not a resource identifier. */
	int identifier_count;
	struct Identifier *identifier;
/* description: An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled. */
	struct Identifier *biologicalSourceEvent;
/* description: Processing facilities responsible for the labeling and distribution of this biologically derived product. */
	int processingFacility_count;
	struct Reference *processingFacility;
/* description: A unique identifier for an aliquot of a product.  Used to distinguish individual aliquots of a product carrying the same biologicalSource and productCode identifiers. */
	string division;
/* description: The current status of the product. */
	struct Coding *productStatus;
/* description: Date, and where relevant time, of expiration. */
	dateTime expirationDate;
/* description: How this product was collected. */
	struct BiologicallyDerivedProduct_Collection *collection;
/* description: The temperature requirements for storage of the biologically-derived product. */
	struct Range *storageTempRequirements;
/* description: A property that is specific to this BiologicallyDerviedProduct instance. */
	int property_count;
	struct BiologicallyDerivedProduct_Property *property;
};
typedef struct BiologicallyDerivedProduct BiologicallyDerivedProduct;

/* description: This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity. */
struct BiologicallyDerivedProduct_Collection {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Healthcare professional who is performing the collection. */
	struct Reference *collector;
/* description: The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product. */
	struct Reference *source;
/* description: Time of product collection. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string collectedDateTime;
/* description: Time of product collection. */
	struct Period *collectedPeriod;
};
typedef struct BiologicallyDerivedProduct_Collection BiologicallyDerivedProduct_Collection;

/* description: This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity. */
struct BiologicallyDerivedProduct_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code that specifies the property. It should reference an established coding system. */
	struct CodeableConcept *type;
/* description: Property values. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Property values. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: Property values. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Property values. */
	struct Period *valuePeriod;
/* description: Property values. */
	struct Quantity *valueQuantity;
/* description: Property values. */
	struct Range *valueRange;
/* description: Property values. */
	struct Ratio *valueRatio;
/* description: Property values. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Property values. */
	struct Attachment *valueAttachment;
};
typedef struct BiologicallyDerivedProduct_Property BiologicallyDerivedProduct_Property;

/* description: This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application. */
struct BiologicallyDerivedProductDispense {
/* description: This is a BiologicallyDerivedProductDispense resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique instance identifiers assigned to a biologically derived product dispense. Note: This is a business identifier, not a resource identifier. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The order or request that the dispense is fulfilling. This is a reference to a ServiceRequest resource. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A larger event of which this particular event is a component. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code specifying the state of the dispense event. */
	code status;
/* description: Indicates the relationship between the donor of the biologically derived product and the intended recipient. */
	struct CodeableConcept *originRelationshipType;
/* description: A link to a resource identifying the biologically derived product that is being dispensed. */
	struct Reference *product;
/* description: A link to a resource representing the patient that the product is dispensed for. */
	struct Reference *patient;
/* description: Indicates the type of matching associated with the dispense. */
	struct CodeableConcept *matchStatus;
/* description: Indicates who or what performed an action. */
	int performer_count;
	struct BiologicallyDerivedProductDispense_Performer *performer;
/* description: The physical location where the dispense was performed. */
	struct Reference *location;
/* description: The amount of product in the dispense. Quantity will depend on the product being dispensed. Examples are: volume; cell count; concentration. */
	struct Quantity *quantity;
/* description: When the product was selected/ matched. */
	dateTime preparedDate;
/* description: When the product was dispatched for clinical use. */
	dateTime whenHandedOver;
/* description: Link to a resource identifying the physical location that the product was dispatched to. */
	struct Reference *destination;
/* description: Additional notes. */
	int note_count;
	struct Annotation *note;
/* description: Specific instructions for use. */
	string usageInstruction;
};
typedef struct BiologicallyDerivedProductDispense BiologicallyDerivedProductDispense;

/* description: This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application. */
struct BiologicallyDerivedProductDispense_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the function of the performer during the dispense. */
	struct CodeableConcept *function;
/* description: Identifies the person responsible for the action. */
	struct Reference *actor;
};
typedef struct BiologicallyDerivedProductDispense_Performer BiologicallyDerivedProductDispense_Performer;

/* description: Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. */
struct BodyStructure {
/* description: This is a BodyStructure resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for this instance of the anatomical structure. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether this body site is in active use. */
	boolean active;
/* description: The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies. */
	struct CodeableConcept *morphology;
/* description: The anatomical location(s) or region(s) of the specimen, lesion, or body structure. */
	int includedStructure_count;
	struct BodyStructure_IncludedStructure *includedStructure;
/* description: The anatomical location(s) or region(s) not occupied or represented by the specimen, lesion, or body structure. */
	int excludedStructure_count;
	struct BodyStructure_IncludedStructure *excludedStructure;
/* description: A summary, characterization or explanation of the body structure. */
	markdown description;
/* description: Image or images used to identify a location. */
	int image_count;
	struct Attachment *image;
/* description: The person to which the body site belongs. */
	struct Reference *patient;
};
typedef struct BodyStructure BodyStructure;

/* description: Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. */
struct BodyStructure_IncludedStructure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code that represents the included structure. */
	struct CodeableConcept *structure;
/* description: Code that represents the included structure laterality. */
	struct CodeableConcept *laterality;
/* description: Body locations in relation to a specific body landmark (tatoo, scar, other body structure). */
	int bodyLandmarkOrientation_count;
	struct BodyStructure_BodyLandmarkOrientation *bodyLandmarkOrientation;
/* description: XY or XYZ-coordinate orientation for structure. */
	int spatialReference_count;
	struct Reference *spatialReference;
/* description: Code that represents the included structure qualifier. */
	int qualifier_count;
	struct CodeableConcept *qualifier;
};
typedef struct BodyStructure_IncludedStructure BodyStructure_IncludedStructure;

/* description: Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. */
struct BodyStructure_BodyLandmarkOrientation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A description of a landmark on the body used as a reference to locate something else. */
	int landmarkDescription_count;
	struct CodeableConcept *landmarkDescription;
/* description: An description of the direction away from a landmark something is located based on a radial clock dial. */
	int clockFacePosition_count;
	struct CodeableConcept *clockFacePosition;
/* description: The distance in centimeters a certain observation is made from a body landmark. */
	int distanceFromLandmark_count;
	struct BodyStructure_DistanceFromLandmark *distanceFromLandmark;
/* description: The surface area a body location is in relation to a landmark. */
	int surfaceOrientation_count;
	struct CodeableConcept *surfaceOrientation;
};
typedef struct BodyStructure_BodyLandmarkOrientation BodyStructure_BodyLandmarkOrientation;

/* description: Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case. */
struct BodyStructure_DistanceFromLandmark {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An instrument, tool, analyzer, etc. used in the measurement. */
	int device_count;
	struct CodeableReference *device;
/* description: The measured distance (e.g., in cm) from a body landmark. */
	int value_count;
	struct Quantity *value;
};
typedef struct BodyStructure_DistanceFromLandmark BodyStructure_DistanceFromLandmark;

/* description: A container for a collection of resources. */
struct Bundle {
/* description: This is a Bundle resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A persistent identifier for the bundle that won't change as a bundle is copied from server to server. */
	struct Identifier *identifier;
/* description: Indicates the purpose of this bundle - how it is intended to be used. */
	code type;
/* description: The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle. */
	instant timestamp;
/* description: If a set of search matches, this is the (potentially estimated) total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle. */
	unsignedInt total;
/* description: A series of links that provide context to this bundle. */
	int link_count;
	struct Bundle_Link *link;
/* description: An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only). */
	int entry_count;
	struct Bundle_Entry *entry;
/* description: Digital Signature - base64 encoded. XML-DSig or a JWS. */
	struct Signature *signature;
/* description: Captures issues and warnings that relate to the construction of the Bundle and the content within it. */
	ResourceList issues;
};
typedef struct Bundle Bundle;

/* description: A container for a collection of resources. */
struct Bundle_Link {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1). */
	code relation;
/* description: The reference details for the link. */
	uri url_;
};
typedef struct Bundle_Link Bundle_Link;

/* description: A container for a collection of resources. */
struct Bundle_Entry {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A series of links that provide context to this entry. */
	int link_count;
	struct Bundle_Link *link;
/* description: The Absolute URL for the resource. Except for transactions and batches, each entry in a Bundle must have a fullUrl. The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. Even when not required, fullUrl MAY be set to a urn:uuid to allow referencing entries in a transaction. The fullUrl can be an arbitrary URI and is not limited to urn:uuid, urn:oid, http, and https. The fullUrl element SHALL have a value except when: 
* invoking a create
* invoking or responding to an operation where the body is not a single identified resource
* invoking or returning the results of a search or history operation. */
	uri fullUrl;
/* description: The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type. This is allowed to be a Parameters resource if and only if it is referenced by something else within the Bundle that provides context/meaning. */
	ResourceList resource;
/* description: Information about the search process that lead to the creation of this entry. */
	struct Bundle_Search *search;
/* description: Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry. */
	struct Bundle_Request *request;
/* description: Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history. */
	struct Bundle_Response *response;
};
typedef struct Bundle_Entry Bundle_Entry;

/* description: A container for a collection of resources. */
struct Bundle_Search {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process. */
	code mode;
/* description: When searching, the server's search ranking score for the entry. */
	decimal score;
};
typedef struct Bundle_Search Bundle_Search;

/* description: A container for a collection of resources. */
struct Bundle_Request {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred. */
	code method;
/* description: The URL for this entry, relative to the root (the address to which the request is posted). */
	uri url_;
/* description: If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread). */
	string ifNoneMatch;
/* description: Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread). */
	instant ifModifiedSince;
/* description: Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency). */
	string ifMatch;
/* description: Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?"). */
	string ifNoneExist;
};
typedef struct Bundle_Request Bundle_Request;

/* description: A container for a collection of resources. */
struct Bundle_Response {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code. */
	string status;
/* description: The location header created by processing this operation, populated if the operation returns a location. */
	uri location;
/* description: The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)). */
	string etag;
/* description: The date/time that the resource was modified on the server. */
	instant lastModified;
/* description: An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction. */
	ResourceList outcome;
};
typedef struct Bundle_Response Bundle_Response;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement {
/* description: This is a CapabilityStatement resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this CapabilityStatement when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the capability statement. */
	string title;
/* description: The status of this capability statement. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the capability statement was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the capability statement. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the capability statement is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this capability statement is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase). */
	code kind;
/* description: Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details. */
	int instantiates_count;
	canonical instantiates;
/* description: Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them. */
	int imports_count;
	canonical imports;
/* description: Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation. */
	struct CapabilityStatement_Software *software;
/* description: Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program. */
	struct CapabilityStatement_Implementation *implementation;
/* description: The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value. */
	code fhirVersion;
/* description: A list of the formats supported by this implementation using their content types. */
	int format_count;
	code format;
/* description: A list of the patch formats supported by this implementation using their content types. */
	int patchFormat_count;
	code patchFormat;
/* description: A list of the languages supported by this implementation that are usefully supported in the ```Accept-Language``` header. */
	int acceptLanguage_count;
	code acceptLanguage;
/* description: A list of implementation guides that the server does (or should) support in their entirety. */
	int implementationGuide_count;
	canonical implementationGuide;
/* description: A definition of the restful capabilities of the solution, if any. */
	int rest_count;
	struct CapabilityStatement_Rest *rest;
/* description: A description of the messaging capabilities of the solution. */
	int messaging_count;
	struct CapabilityStatement_Messaging *messaging;
/* description: A document definition. */
	int document_count;
	struct CapabilityStatement_Document *document;
};
typedef struct CapabilityStatement CapabilityStatement;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Software {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name the software is known by. */
	string name;
/* description: The version identifier for the software covered by this statement. */
	string version;
/* description: Date this version of the software was released. */
	dateTime releaseDate;
};
typedef struct CapabilityStatement_Software CapabilityStatement_Software;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Implementation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Information about the specific installation that this capability statement relates to. */
	markdown description;
/* description: An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces. */
	url url_;
/* description: The organization responsible for the management of the instance and oversight of the data on the server at the specified URL. */
	struct Reference *custodian;
};
typedef struct CapabilityStatement_Implementation CapabilityStatement_Implementation;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Rest {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations. */
	code mode;
/* description: Information about the system's restful capabilities that apply across all applications, such as security. */
	markdown documentation;
/* description: Information about security implementation from an interface perspective - what a client needs to know. */
	struct CapabilityStatement_Security *security;
/* description: A specification of the restful capabilities of the solution for a specific resource type. */
	int resource_count;
	struct CapabilityStatement_Resource *resource;
/* description: A specification of restful operations supported by the system. */
	int interaction_count;
	struct CapabilityStatement_Interaction1 *interaction;
/* description: Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. This is only for searches executed against the system-level endpoint. */
	int searchParam_count;
	struct CapabilityStatement_SearchParam *searchParam;
/* description: Definition of an operation or a named query together with its parameters and their meaning and type. */
	int operation_count;
	struct CapabilityStatement_Operation *operation;
/* description: An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL . */
	int compartment_count;
	canonical compartment;
};
typedef struct CapabilityStatement_Rest CapabilityStatement_Rest;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Security {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Server adds CORS headers when responding to requests - this enables Javascript applications to use the server. */
	boolean cors;
/* description: Types of security services that are supported/required by the system. */
	int service_count;
	struct CodeableConcept *service;
/* description: General description of how security works. */
	markdown description;
};
typedef struct CapabilityStatement_Security CapabilityStatement_Security;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Resource {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A type of resource exposed via the restful interface. */
	code type;
/* description: A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the "superset" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses). */
	canonical profile;
/* description: A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses). */
	int supportedProfile_count;
	canonical supportedProfile;
/* description: Additional information about the resource type used by the system. */
	markdown documentation;
/* description: Identifies a restful operation supported by the solution. */
	int interaction_count;
	struct CapabilityStatement_Interaction *interaction;
/* description: This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API. */
	code versioning;
/* description: A flag for whether the server is able to return past versions as part of the vRead operation. */
	boolean readHistory;
/* description: A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server. */
	boolean updateCreate;
/* description: A flag that indicates that the server supports conditional create. */
	boolean conditionalCreate;
/* description: A code that indicates how the server supports conditional read. */
	code conditionalRead;
/* description: A flag that indicates that the server supports conditional update. */
	boolean conditionalUpdate;
/* description: A flag that indicates that the server supports conditional patch. */
	boolean conditionalPatch;
/* description: A code that indicates how the server supports conditional delete. */
	code conditionalDelete;
/* description: A set of flags that defines how references are supported. */
	int referencePolicy_count;
	code referencePolicy;
/* description: A list of _include values supported by the server. */
	int searchInclude_count;
	string searchInclude;
/* description: A list of _revinclude (reverse include) values supported by the server. */
	int searchRevInclude_count;
	string searchRevInclude;
/* description: Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. */
	int searchParam_count;
	struct CapabilityStatement_SearchParam *searchParam;
/* description: Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters. */
	int operation_count;
	struct CapabilityStatement_Operation *operation;
};
typedef struct CapabilityStatement_Resource CapabilityStatement_Resource;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Interaction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Coded identifier of the operation, supported by the system resource. */
	code code_;
/* description: Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'. */
	markdown documentation;
};
typedef struct CapabilityStatement_Interaction CapabilityStatement_Interaction;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_SearchParam {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code. */
	string name;
/* description: An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs. */
	canonical definition;
/* description: The type of value a search parameter refers to, and how the content is interpreted. */
	code type;
/* description: This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms. */
	markdown documentation;
};
typedef struct CapabilityStatement_SearchParam CapabilityStatement_SearchParam;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Operation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code. */
	string name;
/* description: Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported. */
	canonical definition;
/* description: Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation. */
	markdown documentation;
};
typedef struct CapabilityStatement_Operation CapabilityStatement_Operation;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Interaction1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A coded identifier of the operation, supported by the system. */
	code code_;
/* description: Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented. */
	markdown documentation;
};
typedef struct CapabilityStatement_Interaction1 CapabilityStatement_Interaction1;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Messaging {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An endpoint (network accessible address) to which messages and/or replies are to be sent. */
	int endpoint_count;
	struct CapabilityStatement_Endpoint *endpoint;
/* description: Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender). */
	unsignedInt reliableCache;
/* description: Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner. */
	markdown documentation;
/* description: References to message definitions for messages this system can send or receive. */
	int supportedMessage_count;
	struct CapabilityStatement_SupportedMessage *supportedMessage;
};
typedef struct CapabilityStatement_Messaging CapabilityStatement_Messaging;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Endpoint {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A list of the messaging transport protocol(s) identifiers, supported by this endpoint. */
	struct Coding *protocol;
/* description: The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier. */
	url address;
};
typedef struct CapabilityStatement_Endpoint CapabilityStatement_Endpoint;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_SupportedMessage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The mode of this event declaration - whether application is sender or receiver. */
	code mode;
/* description: Points to a message definition that identifies the messaging event, message structure, allowed responses, etc. */
	canonical definition;
};
typedef struct CapabilityStatement_SupportedMessage CapabilityStatement_SupportedMessage;

/* description: A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct CapabilityStatement_Document {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Mode of this document declaration - whether an application is a producer or consumer. */
	code mode;
/* description: A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc. */
	markdown documentation;
/* description: A profile on the document Bundle that constrains which resources are present, and their contents. */
	canonical profile;
};
typedef struct CapabilityStatement_Document CapabilityStatement_Document;

/* description: Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. */
struct CarePlan {
/* description: This is a CarePlan resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: A higher-level request resource (i.e. a plan, proposal or order) that is fulfilled in whole or in part by this care plan. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Completed or terminated care plan whose function is taken by this new care plan. */
	int replaces_count;
	struct Reference *replaces;
/* description: A larger care plan of which this particular care plan is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record. */
	code status;
/* description: Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain. */
	code intent;
/* description: Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc. */
	int category_count;
	struct CodeableConcept *category;
/* description: Human-friendly name for the care plan. */
	string title;
/* description: A description of the scope and nature of the plan. */
	string description;
/* description: Identifies the patient or group whose intended care is described by the plan. */
	struct Reference *subject;
/* description: The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: Indicates when the plan did (or is intended to) come into effect and end. */
	struct Period *period;
/* description: Represents when this particular CarePlan record was created in the system, which is often a system-generated date. */
	dateTime created;
/* description: When populated, the custodian is responsible for the care plan. The care plan is attributed to the custodian. */
	struct Reference *custodian;
/* description: Identifies the individual(s), organization or device who provided the contents of the care plan. */
	int contributor_count;
	struct Reference *contributor;
/* description: Identifies all people and organizations who are expected to be involved in the care envisioned by this plan. */
	int careTeam_count;
	struct Reference *careTeam;
/* description: Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan. */
	int addresses_count;
	struct CodeableReference *addresses;
/* description: Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc. */
	int supportingInfo_count;
	struct Reference *supportingInfo;
/* description: Describes the intended objective(s) of carrying out the care plan. */
	int goal_count;
	struct Reference *goal;
/* description: Identifies an action that has occurred or is a planned action to occur as part of the plan. For example, a medication to be used, lab tests to perform, self-monitoring that has occurred, education etc. */
	int activity_count;
	struct CarePlan_Activity *activity;
/* description: General notes about the care plan not covered elsewhere. */
	int note_count;
	struct Annotation *note;
};
typedef struct CarePlan CarePlan;

/* description: Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions. */
struct CarePlan_Activity {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the activity that was performed. For example, an activity could be patient education, exercise, or a medication administration. The reference to an "event" resource, such as Procedure or Encounter or Observation, represents the activity that was performed. The requested activity can be conveyed using the CarePlan.activity.plannedActivityReference (a reference to a “request” resource). */
	int performedActivity_count;
	struct CodeableReference *performedActivity;
/* description: Notes about the adherence/status/progress of the activity. */
	int progress_count;
	struct Annotation *progress;
/* description: The details of the proposed activity represented in a specific resource. */
	struct Reference *plannedActivityReference;
};
typedef struct CarePlan_Activity CarePlan_Activity;

/* description: The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care. */
struct CareTeam {
/* description: This is a CareTeam resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Indicates the current state of the care team. */
	code status;
/* description: Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team. */
	int category_count;
	struct CodeableConcept *category;
/* description: A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams. */
	string name;
/* description: Identifies the patient or group whose intended care is handled by the team. */
	struct Reference *subject;
/* description: Indicates when the team did (or is intended to) come into effect and end. */
	struct Period *period;
/* description: Identifies all people and organizations who are expected to be involved in the care team. */
	int participant_count;
	struct CareTeam_Participant *participant;
/* description: Describes why the care team exists. */
	int reason_count;
	struct CodeableReference *reason;
/* description: The organization responsible for the care team. */
	int managingOrganization_count;
	struct Reference *managingOrganization;
/* description: A central contact detail for the care team (that applies to all members). */
	int telecom_count;
	struct ContactPoint *telecom;
/* description: Comments made about the CareTeam. */
	int note_count;
	struct Annotation *note;
};
typedef struct CareTeam CareTeam;

/* description: The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care. */
struct CareTeam_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates specific responsibility of an individual within the care team, such as "Primary care physician", "Trained social worker counselor", "Caregiver", etc. */
	struct CodeableConcept *role;
/* description: The specific person or organization who is participating/expected to participate in the care team. */
	struct Reference *member;
/* description: The organization of the practitioner. */
	struct Reference *onBehalfOf;
/* description: When the member is generally available within this care team. */
	struct Period *coveragePeriod;
/* description: When the member is generally available within this care team. */
	struct Timing *coverageTiming;
};
typedef struct CareTeam_Participant CareTeam_Participant;

/* description: The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation. */
struct ChargeItem {
/* description: This is a ChargeItem resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers assigned to this event performer or other systems. */
	int identifier_count;
	struct Identifier *identifier;
/* description: References the (external) source of pricing information, rules of application for the code this ChargeItem uses. */
	int definitionUri_count;
	uri definitionUri;
/* description: References the source of pricing information, rules of application for the code this ChargeItem uses. */
	int definitionCanonical_count;
	canonical definitionCanonical;
/* description: The current state of the ChargeItem. */
	code status;
/* description: ChargeItems can be grouped to larger ChargeItems covering the whole set. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code that identifies the charge, like a billing code. */
	struct CodeableConcept *code_;
/* description: The individual or set of individuals the action is being or was performed on. */
	struct Reference *subject;
/* description: This ChargeItem has the details of how the associated Encounter should be billed or otherwise be handled by finance systems. */
	struct Reference *encounter;
/* description: Date/time(s) or duration when the charged service was applied. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: Date/time(s) or duration when the charged service was applied. */
	struct Period *occurrencePeriod;
/* description: Date/time(s) or duration when the charged service was applied. */
	struct Timing *occurrenceTiming;
/* description: Indicates who or what performed or participated in the charged service. */
	int performer_count;
	struct ChargeItem_Performer *performer;
/* description: The organization performing the service. */
	struct Reference *performingOrganization;
/* description: The organization requesting the service. */
	struct Reference *requestingOrganization;
/* description: The financial cost center permits the tracking of charge attribution. */
	struct Reference *costCenter;
/* description: Quantity of which the charge item has been serviced. */
	struct Quantity *quantity;
/* description: The anatomical location where the related service has been applied. */
	int bodysite_count;
	struct CodeableConcept *bodysite;
/* description: The unit price of the chargable item. */
	struct MonetaryComponent *unitPriceComponent;
/* description: The total price for the chargable item, accounting for the quantity. */
	struct MonetaryComponent *totalPriceComponent;
/* description: If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action. */
	struct CodeableConcept *overrideReason;
/* description: The device, practitioner, etc. who entered the charge item. */
	struct Reference *enterer;
/* description: Date the charge item was entered. */
	dateTime enteredDate;
/* description: Describes why the event occurred in coded or textual form. */
	int reason_count;
	struct CodeableConcept *reason;
/* description: Indicated the rendered service that caused this charge. */
	int service_count;
	struct CodeableReference *service;
/* description: Identifies the device, food, drug or other product being charged either by type code or reference to an instance. */
	int product_count;
	struct CodeableReference *product;
/* description: Account into which this ChargeItems belongs. */
	int account_count;
	struct Reference *account;
/* description: Comments made about the event by the performer, subject or other participants. */
	int note_count;
	struct Annotation *note;
/* description: Further information supporting this charge. */
	int supportingInformation_count;
	struct Reference *supportingInformation;
};
typedef struct ChargeItem ChargeItem;

/* description: The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation. */
struct ChargeItem_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.). */
	struct CodeableConcept *function;
/* description: The device, practitioner, etc. who performed or participated in the service. */
	struct Reference *actor;
};
typedef struct ChargeItem_Performer ChargeItem_Performer;

/* description: The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system. */
struct ChargeItemDefinition {
/* description: This is a ChargeItemDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this charge item definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this charge item definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the charge item definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the ChargeItemDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the charge item definition. */
	string title;
/* description: The current state of the ChargeItemDefinition. */
	code status;
/* description: A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the charge item definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the charge item definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the charge item definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the charge item definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this charge item definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the {{title}} content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the {{title}}. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the {{title}}. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition. */
	int derivedFromUri_count;
	uri derivedFromUri;
/* description: A larger definition of which this particular definition is a component or step. */
	int partOf_count;
	canonical partOf;
/* description: As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance. */
	int replaces_count;
	canonical replaces;
/* description: The defined billing details in this resource pertain to the given billing code. */
	struct CodeableConcept *code_;
/* description: The defined billing details in this resource pertain to the given product instance(s). */
	int instance_count;
	struct Reference *instance;
/* description: Expressions that describe applicability criteria for the billing code. */
	int applicability_count;
	struct ChargeItemDefinition_Applicability *applicability;
/* description: Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply. */
	int propertyGroup_count;
	struct ChargeItemDefinition_PropertyGroup *propertyGroup;
};
typedef struct ChargeItemDefinition ChargeItemDefinition;

/* description: The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system. */
struct ChargeItemDefinition_Applicability {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied. */
	struct Expression *condition;
/* description: The period during which the charge item definition content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Reference to / quotation of the external source of the group of properties. */
	struct RelatedArtifact *relatedArtifact;
};
typedef struct ChargeItemDefinition_Applicability ChargeItemDefinition_Applicability;

/* description: The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system. */
struct ChargeItemDefinition_PropertyGroup {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Expressions that describe applicability criteria for the priceComponent. */
	int applicability_count;
	struct ChargeItemDefinition_Applicability *applicability;
/* description: The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated. */
	int priceComponent_count;
	struct MonetaryComponent *priceComponent;
};
typedef struct ChargeItemDefinition_PropertyGroup ChargeItemDefinition_PropertyGroup;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation {
/* description: This is a Citation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this citation record when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this citation record when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the citation record when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the citation record author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the citation record. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the citation record. */
	string title;
/* description: The status of this summary. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this citation record is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the citation record was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the citation record changes. */
	dateTime date_;
/* description: The name of the organization or individual that published the citation record. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the citation from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate citation record instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the citation record is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this citation is needed and why it has been designed as it has. */
	markdown purpose;
/* description: Use and/or publishing restrictions for the citation record, not for the cited artifact. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the citation record content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: Who authored or created the citation record. */
	int author_count;
	struct ContactDetail *author;
/* description: Who edited or revised the citation record. */
	int editor_count;
	struct ContactDetail *editor;
/* description: Who reviewed the citation record. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: Who endorsed the citation record. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Artifact related to the citation record. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: A human-readable display of key concepts to represent the citation. */
	int summary_count;
	struct Citation_Summary *summary;
/* description: The assignment to an organizing scheme. */
	int classification_count;
	struct Citation_Classification *classification;
/* description: Used for general notes and annotations not coded elsewhere. */
	int note_count;
	struct Annotation *note;
/* description: The status of the citation record. */
	int currentState_count;
	struct CodeableConcept *currentState;
/* description: The state or status of the citation record paired with an effective date or period for that state. */
	int statusDate_count;
	struct Citation_StatusDate *statusDate;
/* description: The article or artifact being described. */
	struct Citation_CitedArtifact *citedArtifact;
};
typedef struct Citation Citation;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Summary {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Format for display of the citation summary. */
	struct CodeableConcept *style;
/* description: The human-readable display of the citation summary. */
	markdown text;
};
typedef struct Citation_Summary Citation_Summary;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Classification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of classifier (e.g. publication type, keyword). */
	struct CodeableConcept *type;
/* description: The specific classification value. */
	int classifier_count;
	struct CodeableConcept *classifier;
};
typedef struct Citation_Classification Citation_Classification;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_StatusDate {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The state or status of the citation record (that will be paired with the period). */
	struct CodeableConcept *activity;
/* description: Whether the status date is actual (has occurred) or expected (estimated or anticipated). */
	boolean actual;
/* description: When the status started and/or ended. */
	struct Period *period;
};
typedef struct Citation_StatusDate Citation_StatusDate;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_CitedArtifact {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A formal identifier that is used to identify the cited artifact when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A formal identifier that is used to identify things closely related to the cited artifact. */
	int relatedIdentifier_count;
	struct Identifier *relatedIdentifier;
/* description: When the cited artifact was accessed. */
	dateTime dateAccessed;
/* description: The defined version of the cited artifact. */
	struct Citation_Version *version;
/* description: The status of the cited artifact. */
	int currentState_count;
	struct CodeableConcept *currentState;
/* description: An effective date or period, historical or future, actual or expected, for a status of the cited artifact. */
	int statusDate_count;
	struct Citation_StatusDate1 *statusDate;
/* description: The title details of the article or artifact. */
	int title_count;
	struct Citation_Title *title;
/* description: The abstract may be used to convey article-contained abstracts, externally-created abstracts, or other descriptive summaries. */
	int abstract_count;
	struct Citation_Abstract *abstract;
/* description: The component of the article or artifact. */
	struct Citation_Part *part;
/* description: The artifact related to the cited artifact. */
	int relatesTo_count;
	struct Citation_RelatesTo *relatesTo;
/* description: If multiple, used to represent alternative forms of the article that are not separate citations. */
	int publicationForm_count;
	struct Citation_PublicationForm *publicationForm;
/* description: Used for any URL for the article or artifact cited. */
	int webLocation_count;
	struct Citation_WebLocation *webLocation;
/* description: The assignment to an organizing scheme. */
	int classification_count;
	struct Citation_Classification1 *classification;
/* description: This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements. */
	struct Citation_Contributorship *contributorship;
/* description: Any additional information or content for the article or artifact. */
	int note_count;
	struct Annotation *note;
};
typedef struct Citation_CitedArtifact Citation_CitedArtifact;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Version {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The version number or other version identifier. */
	string value;
/* description: Citation for the main version of the cited artifact. */
	struct Reference *baseCitation;
};
typedef struct Citation_Version Citation_Version;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_StatusDate1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A definition of the status associated with a date or period. */
	struct CodeableConcept *activity;
/* description: Either occurred or expected. */
	boolean actual;
/* description: When the status started and/or ended. */
	struct Period *period;
};
typedef struct Citation_StatusDate1 Citation_StatusDate1;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Title {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Used to express the reason for or classification of the title. */
	int type_count;
	struct CodeableConcept *type;
/* description: Used to express the specific language of the title. */
	struct CodeableConcept *language;
/* description: The title of the article or artifact. */
	markdown text;
};
typedef struct Citation_Title Citation_Title;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Abstract {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Used to express the reason for or classification of the abstract. */
	struct CodeableConcept *type;
/* description: Used to express the specific language of the abstract. */
	struct CodeableConcept *language;
/* description: Abstract content. */
	markdown text;
/* description: Copyright notice for the abstract. */
	markdown copyright;
};
typedef struct Citation_Abstract Citation_Abstract;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Part {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of component. */
	struct CodeableConcept *type;
/* description: The specification of the component. */
	string value;
/* description: The citation for the full article or artifact. */
	struct Reference *baseCitation;
};
typedef struct Citation_Part Citation_Part;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_RelatesTo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of relationship to the related artifact. */
	code type;
/* description: Provides additional classifiers of the related artifact. */
	int classifier_count;
	struct CodeableConcept *classifier;
/* description: A short label that can be used to reference the related artifact from elsewhere in the containing artifact, such as a footnote index. */
	string label;
/* description: A brief description of the document or knowledge resource being referenced, suitable for display to a consumer. */
	string display;
/* description: A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format. */
	markdown citation;
/* description: The document being referenced, represented as an attachment. Do not use this element if using the resource element to provide the canonical to the related artifact. */
	struct Attachment *document;
/* description: The related artifact, such as a library, value set, profile, or other knowledge resource. */
	canonical resource;
/* description: The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource. */
	struct Reference *resourceReference;
};
typedef struct Citation_RelatesTo Citation_RelatesTo;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_PublicationForm {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The collection the cited article or artifact is published in. */
	struct Citation_PublishedIn *publishedIn;
/* description: Describes the form of the medium cited. Common codes are "Internet" or "Print". The CitedMedium value set has 6 codes. The codes internet, print, and offline-digital-storage are the common codes for a typical publication form, though internet and print are more common for study citations. Three additional codes (each appending one of the primary codes with "-without-issue" are used for situations when a study is published both within an issue (of a periodical release as commonly done for journals) AND is published separately from the issue (as commonly done with early online publication), to represent specific identification of the publication form not associated with the issue. */
	struct CodeableConcept *citedMedium;
/* description: Volume number of journal or other collection in which the article is published. */
	string volume;
/* description: Issue, part or supplement of journal or other collection in which the article is published. */
	string issue;
/* description: The date the article was added to the database, or the date the article was released. */
	dateTime articleDate;
/* description: Text representation of the date on which the issue of the cited artifact was published. */
	string publicationDateText;
/* description: Spring, Summer, Fall/Autumn, Winter. */
	string publicationDateSeason;
/* description: The date the article was last revised or updated in the database. */
	dateTime lastRevisionDate;
/* description: The language or languages in which this form of the article is published. */
	int language_count;
	struct CodeableConcept *language;
/* description: Entry number or identifier for inclusion in a database. */
	string accessionNumber;
/* description: Used for full display of pagination. */
	string pageString;
/* description: Used for isolated representation of first page. */
	string firstPage;
/* description: Used for isolated representation of last page. */
	string lastPage;
/* description: Actual or approximate number of pages or screens. Distinct from reporting the page numbers. */
	string pageCount;
/* description: Copyright notice for the full article or artifact. */
	markdown copyright;
};
typedef struct Citation_PublicationForm Citation_PublicationForm;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_PublishedIn {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Kind of container (e.g. Periodical, database, or book). */
	struct CodeableConcept *type;
/* description: Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Name of the database or title of the book or journal. */
	string title;
/* description: Name of or resource describing the publisher. */
	struct Reference *publisher;
/* description: Geographic location of the publisher. */
	string publisherLocation;
};
typedef struct Citation_PublishedIn Citation_PublishedIn;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_WebLocation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A characterization of the object expected at the web location. */
	int classifier_count;
	struct CodeableConcept *classifier;
/* description: The specific URL. */
	uri url_;
};
typedef struct Citation_WebLocation Citation_WebLocation;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Classification1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of classifier (e.g. publication type, keyword). */
	struct CodeableConcept *type;
/* description: The specific classification value. */
	int classifier_count;
	struct CodeableConcept *classifier;
/* description: Complex or externally created classification. */
	int artifactAssessment_count;
	struct Reference *artifactAssessment;
};
typedef struct Citation_Classification1 Citation_Classification1;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Contributorship {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates if the list includes all authors and/or contributors. */
	boolean complete;
/* description: An individual entity named as a contributor, for example in the author list or contributor list. */
	int entry_count;
	struct Citation_Entry *entry;
/* description: Used to record a display of the author/contributor list without separate data element for each list member. */
	int summary_count;
	struct Citation_Summary1 *summary;
};
typedef struct Citation_Contributorship Citation_Contributorship;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Entry {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The identity of the individual contributor. */
	struct Reference *contributor;
/* description: For citation styles that use initials. */
	string forenameInitials;
/* description: Organization affiliated with the contributor. */
	int affiliation_count;
	struct Reference *affiliation;
/* description: This element identifies the specific nature of an individual’s contribution with respect to the cited work. */
	int contributionType_count;
	struct CodeableConcept *contributionType;
/* description: The role of the contributor (e.g. author, editor, reviewer, funder). */
	struct CodeableConcept *role;
/* description: Contributions with accounting for time or number. */
	int contributionInstance_count;
	struct Citation_ContributionInstance *contributionInstance;
/* description: Whether the contributor is the corresponding contributor for the role. */
	boolean correspondingContact;
/* description: Provides a numerical ranking to represent the degree of contributorship relative to other contributors, such as 1 for first author and 2 for second author. */
	positiveInt rankingOrder;
};
typedef struct Citation_Entry Citation_Entry;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_ContributionInstance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The specific contribution. */
	struct CodeableConcept *type;
/* description: The time that the contribution was made. */
	dateTime time_;
};
typedef struct Citation_ContributionInstance Citation_ContributionInstance;

/* description: The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources. */
struct Citation_Summary1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Used most commonly to express an author list or a contributorship statement. */
	struct CodeableConcept *type;
/* description: The format for the display string, such as author last name with first letter capitalized followed by forename initials. */
	struct CodeableConcept *style;
/* description: Used to code the producer or rule for creating the display string. */
	struct CodeableConcept *source;
/* description: The display string for the author list, contributor list, or contributorship statement. */
	markdown value;
};
typedef struct Citation_Summary1 Citation_Summary1;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim {
/* description: This is a Claim resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this claim. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The status of the resource instance. */
	code status;
/* description: The category of claim, e.g. oral, pharmacy, vision, institutional, professional. */
	struct CodeableConcept *type;
/* description: A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service. */
	struct CodeableConcept *subType;
/* description: A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided. */
	code use;
/* description: The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought. */
	struct Reference *patient;
/* description: The period for which charges are being submitted. */
	struct Period *billablePeriod;
/* description: The date this resource was created. */
	dateTime created;
/* description: Individual who created the claim, predetermination or preauthorization. */
	struct Reference *enterer;
/* description: The Insurer who is target of the request. */
	struct Reference *insurer;
/* description: The provider which is responsible for the claim, predetermination or preauthorization. */
	struct Reference *provider;
/* description: The provider-required urgency of processing the request. Typical values include: stat, normal, deferred. */
	struct CodeableConcept *priority;
/* description: A code to indicate whether and for whom funds are to be reserved for future claims. */
	struct CodeableConcept *fundsReserve;
/* description: Other claims which are related to this claim such as prior submissions or claims for related services or for the same event. */
	int related_count;
	struct Claim_Related *related;
/* description: Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments. */
	struct Reference *prescription;
/* description: Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products. */
	struct Reference *originalPrescription;
/* description: The party to be reimbursed for cost of the products and services according to the terms of the policy. */
	struct Claim_Payee *payee;
/* description: The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services. */
	struct Reference *referral;
/* description: Healthcare encounters related to this claim. */
	int encounter_count;
	struct Reference *encounter;
/* description: Facility where the services were provided. */
	struct Reference *facility;
/* description: A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system. */
	struct CodeableConcept *diagnosisRelatedGroup;
/* description: Information code for an event with a corresponding date or period. */
	int event_count;
	struct Claim_Event *event;
/* description: The members of the team who provided the products and services. */
	int careTeam_count;
	struct Claim_CareTeam *careTeam;
/* description: Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. */
	int supportingInfo_count;
	struct Claim_SupportingInfo *supportingInfo;
/* description: Information about diagnoses relevant to the claim items. */
	int diagnosis_count;
	struct Claim_Diagnosis *diagnosis;
/* description: Procedures performed on the patient relevant to the billing items with the claim. */
	int procedure_count;
	struct Claim_Procedure *procedure;
/* description: Financial instruments for reimbursement for the health care products and services specified on the claim. */
	int insurance_count;
	struct Claim_Insurance *insurance;
/* description: Details of an accident which resulted in injuries which required the products and services listed in the claim. */
	struct Claim_Accident *accident;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details. */
	int item_count;
	struct Claim_Item *item;
/* description: The total value of the all the items in the claim. */
	struct Money *total;
};
typedef struct Claim Claim;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Related {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to a related claim. */
	struct Reference *claim;
/* description: A code to convey how the claims are related. */
	struct CodeableConcept *relationship;
/* description: An alternate organizational reference to the case or file to which this particular claim pertains. */
	struct Identifier *reference;
};
typedef struct Claim_Related Claim_Related;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Payee {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of Party to be reimbursed: subscriber, provider, other. */
	struct CodeableConcept *type;
/* description: Reference to the individual or organization to whom any payment will be made. */
	struct Reference *party;
};
typedef struct Claim_Payee Claim_Payee;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Event {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A coded event such as when a service is expected or a card printed. */
	struct CodeableConcept *type;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string whenDateTime;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
	struct Period *whenPeriod;
};
typedef struct Claim_Event Claim_Event;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_CareTeam {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify care team entries. */
	positiveInt sequence;
/* description: Member of the team who provided the product or service. */
	struct Reference *provider;
/* description: The party who is billing and/or responsible for the claimed products or services. */
	boolean responsible;
/* description: The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team. */
	struct CodeableConcept *role;
/* description: The specialization of the practitioner or provider which is applicable for this service. */
	struct CodeableConcept *specialty;
};
typedef struct Claim_CareTeam Claim_CareTeam;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_SupportingInfo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify supporting information entries. */
	positiveInt sequence;
/* description: The general class of the information supplied: information; exception; accident, employment; onset, etc. */
	struct CodeableConcept *category;
/* description: System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought. */
	struct CodeableConcept *code_;
/* description: The date when or period to which this information refers. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string timingDate;
/* description: The date when or period to which this information refers. */
	struct Period *timingPeriod;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Quantity *valueQuantity;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Attachment *valueAttachment;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Reference *valueReference;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Identifier *valueIdentifier;
/* description: Provides the reason in the situation where a reason code is required in addition to the content. */
	struct CodeableConcept *reason;
};
typedef struct Claim_SupportingInfo Claim_SupportingInfo;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Diagnosis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify diagnosis entries. */
	positiveInt sequence;
/* description: The nature of illness or problem in a coded form or as a reference to an external defined Condition. */
	struct CodeableConcept *diagnosisCodeableConcept;
/* description: The nature of illness or problem in a coded form or as a reference to an external defined Condition. */
	struct Reference *diagnosisReference;
/* description: When the condition was observed or the relative ranking. */
	int type_count;
	struct CodeableConcept *type;
/* description: Indication of whether the diagnosis was present on admission to a facility. */
	struct CodeableConcept *onAdmission;
};
typedef struct Claim_Diagnosis Claim_Diagnosis;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Procedure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify procedure entries. */
	positiveInt sequence;
/* description: When the condition was observed or the relative ranking. */
	int type_count;
	struct CodeableConcept *type;
/* description: Date and optionally time the procedure was performed. */
	dateTime date_;
/* description: The code or reference to a Procedure resource which identifies the clinical intervention performed. */
	struct CodeableConcept *procedureCodeableConcept;
/* description: The code or reference to a Procedure resource which identifies the clinical intervention performed. */
	struct Reference *procedureReference;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
};
typedef struct Claim_Procedure Claim_Procedure;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Insurance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order. */
	positiveInt sequence;
/* description: A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true. */
	boolean focal;
/* description: The business identifier to be used when the claim is sent for adjudication against this insurance policy. */
	struct Identifier *identifier;
/* description: Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system. */
	struct Reference *coverage;
/* description: A business agreement number established between the provider and the insurer for special business processing purposes. */
	string businessArrangement;
/* description: Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization. */
	int preAuthRef_count;
	string preAuthRef;
/* description: The result of the adjudication of the line items for the Coverage specified in this insurance. */
	struct Reference *claimResponse;
};
typedef struct Claim_Insurance Claim_Insurance;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Accident {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Date of an accident event  related to the products and services contained in the claim. */
	date date_;
/* description: The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers. */
	struct CodeableConcept *type;
/* description: The physical location of the accident event. */
	struct Address *locationAddress;
/* description: The physical location of the accident event. */
	struct Reference *locationReference;
};
typedef struct Claim_Accident Claim_Accident;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify item entries. */
	positiveInt sequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: CareTeam members related to this service or product. */
	int careTeamSequence_count;
	positiveInt careTeamSequence;
/* description: Diagnosis applicable for this service or product. */
	int diagnosisSequence_count;
	positiveInt diagnosisSequence;
/* description: Procedures applicable for this service or product. */
	int procedureSequence_count;
	positiveInt procedureSequence;
/* description: Exceptions, special conditions and supporting information applicable for this service or product. */
	int informationSequence_count;
	positiveInt informationSequence;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Request or Referral for Goods or Service to be rendered. */
	int request_count;
	struct Reference *request;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The date or dates when the service or product was supplied, performed or completed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string servicedDate;
/* description: The date or dates when the service or product was supplied, performed or completed. */
	struct Period *servicedPeriod;
/* description: Where the product or service was provided. */
	struct CodeableConcept *locationCodeableConcept;
/* description: Where the product or service was provided. */
	struct Address *locationAddress;
/* description: Where the product or service was provided. */
	struct Reference *locationReference;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
/* description: Physical location where the service is performed or applies. */
	int bodySite_count;
	struct Claim_BodySite *bodySite;
/* description: Healthcare encounters related to this claim. */
	int encounter_count;
	struct Reference *encounter;
/* description: A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items. */
	int detail_count;
	struct Claim_Detail *detail;
};
typedef struct Claim_Item Claim_Item;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_BodySite {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Physical service site on the patient (limb, tooth, etc.). */
	int site_count;
	struct CodeableReference *site;
/* description: A region or surface of the bodySite, e.g. limb region or tooth surface(s). */
	int subSite_count;
	struct CodeableConcept *subSite;
};
typedef struct Claim_BodySite Claim_BodySite;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_Detail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify item entries. */
	positiveInt sequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
/* description: A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items. */
	int subDetail_count;
	struct Claim_SubDetail *subDetail;
};
typedef struct Claim_Detail Claim_Detail;

/* description: A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement. */
struct Claim_SubDetail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify item entries. */
	positiveInt sequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for line item.detail.subDetail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
};
typedef struct Claim_SubDetail Claim_SubDetail;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse {
/* description: This is a ClaimResponse resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this claim response. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The status of the resource instance. */
	code status;
/* description: A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service. */
	struct CodeableConcept *type;
/* description: A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service. */
	struct CodeableConcept *subType;
/* description: A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided. */
	code use;
/* description: The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought. */
	struct Reference *patient;
/* description: The date this resource was created. */
	dateTime created;
/* description: The party responsible for authorization, adjudication and reimbursement. */
	struct Reference *insurer;
/* description: The provider which is responsible for the claim, predetermination or preauthorization. */
	struct Reference *requestor;
/* description: Original request resource reference. */
	struct Reference *request;
/* description: The outcome of the claim, predetermination, or preauthorization processing. */
	code outcome;
/* description: The result of the claim, predetermination, or preauthorization adjudication. */
	struct CodeableConcept *decision;
/* description: A human readable description of the status of the adjudication. */
	string disposition;
/* description: Reference from the Insurer which is used in later communications which refers to this adjudication. */
	string preAuthRef;
/* description: The time frame during which this authorization is effective. */
	struct Period *preAuthPeriod;
/* description: Information code for an event with a corresponding date or period. */
	int event_count;
	struct ClaimResponse_Event *event;
/* description: Type of Party to be reimbursed: subscriber, provider, other. */
	struct CodeableConcept *payeeType;
/* description: Healthcare encounters related to this claim. */
	int encounter_count;
	struct Reference *encounter;
/* description: A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system. */
	struct CodeableConcept *diagnosisRelatedGroup;
/* description: A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details. */
	int item_count;
	struct ClaimResponse_Item *item;
/* description: The first-tier service adjudications for payor added product or service lines. */
	int addItem_count;
	struct ClaimResponse_AddItem *addItem;
/* description: The adjudication results which are presented at the header level rather than at the line-item or add-item levels. */
	int adjudication_count;
	struct ClaimResponse_Adjudication *adjudication;
/* description: Categorized monetary totals for the adjudication. */
	int total_count;
	struct ClaimResponse_Total *total;
/* description: Payment details for the adjudication of the claim. */
	struct ClaimResponse_Payment *payment;
/* description: A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom. */
	struct CodeableConcept *fundsReserve;
/* description: A code for the form to be used for printing the content. */
	struct CodeableConcept *formCode;
/* description: The actual form, by reference or inclusion, for printing the content or an EOB. */
	struct Attachment *form;
/* description: A note that describes or explains adjudication results in a human readable form. */
	int processNote_count;
	struct ClaimResponse_ProcessNote *processNote;
/* description: Request for additional supporting or authorizing information. */
	int communicationRequest_count;
	struct Reference *communicationRequest;
/* description: Financial instruments for reimbursement for the health care products and services specified on the claim. */
	int insurance_count;
	struct ClaimResponse_Insurance *insurance;
/* description: Errors encountered during the processing of the adjudication. */
	int error_count;
	struct ClaimResponse_Error *error;
};
typedef struct ClaimResponse ClaimResponse;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Event {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A coded event such as when a service is expected or a card printed. */
	struct CodeableConcept *type;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string whenDateTime;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
	struct Period *whenPeriod;
};
typedef struct ClaimResponse_Event ClaimResponse_Event;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely reference the claim item entries. */
	positiveInt itemSequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ClaimResponse_ReviewOutcome *reviewOutcome;
/* description: If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item. */
	int adjudication_count;
	struct ClaimResponse_Adjudication *adjudication;
/* description: A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items. */
	int detail_count;
	struct ClaimResponse_Detail *detail;
};
typedef struct ClaimResponse_Item ClaimResponse_Item;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_ReviewOutcome {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The result of the claim, predetermination, or preauthorization adjudication. */
	struct CodeableConcept *decision;
/* description: The reasons for the result of the claim, predetermination, or preauthorization adjudication. */
	int reason_count;
	struct CodeableConcept *reason;
/* description: Reference from the Insurer which is used in later communications which refers to this adjudication. */
	string preAuthRef;
/* description: The time frame during which this authorization is effective. */
	struct Period *preAuthPeriod;
};
typedef struct ClaimResponse_ReviewOutcome ClaimResponse_ReviewOutcome;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Adjudication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item. */
	struct CodeableConcept *category;
/* description: A code supporting the understanding of the adjudication result and explaining variance from expected amount. */
	struct CodeableConcept *reason;
/* description: Monetary amount associated with the category. */
	struct Money *amount;
/* description: A non-monetary value associated with the category. Mutually exclusive to the amount element above. */
	struct Quantity *quantity;
};
typedef struct ClaimResponse_Adjudication ClaimResponse_Adjudication;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Detail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely reference the claim detail entry. */
	positiveInt detailSequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ClaimResponse_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ClaimResponse_Adjudication *adjudication;
/* description: A sub-detail adjudication of a simple product or service. */
	int subDetail_count;
	struct ClaimResponse_SubDetail *subDetail;
};
typedef struct ClaimResponse_Detail ClaimResponse_Detail;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_SubDetail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely reference the claim sub-detail entry. */
	positiveInt subDetailSequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ClaimResponse_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ClaimResponse_Adjudication *adjudication;
};
typedef struct ClaimResponse_SubDetail ClaimResponse_SubDetail;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_AddItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Claim items which this service line is intended to replace. */
	int itemSequence_count;
	positiveInt itemSequence;
/* description: The sequence number of the details within the claim item which this line is intended to replace. */
	int detailSequence_count;
	positiveInt detailSequence;
/* description: The sequence number of the sub-details within the details within the claim item which this line is intended to replace. */
	int subdetailSequence_count;
	positiveInt subdetailSequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The providers who are authorized for the services rendered to the patient. */
	int provider_count;
	struct Reference *provider;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Request or Referral for Goods or Service to be rendered. */
	int request_count;
	struct Reference *request;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The date or dates when the service or product was supplied, performed or completed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string servicedDate;
/* description: The date or dates when the service or product was supplied, performed or completed. */
	struct Period *servicedPeriod;
/* description: Where the product or service was provided. */
	struct CodeableConcept *locationCodeableConcept;
/* description: Where the product or service was provided. */
	struct Address *locationAddress;
/* description: Where the product or service was provided. */
	struct Reference *locationReference;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Physical location where the service is performed or applies. */
	int bodySite_count;
	struct ClaimResponse_BodySite *bodySite;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ClaimResponse_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ClaimResponse_Adjudication *adjudication;
/* description: The second-tier service adjudications for payor added services. */
	int detail_count;
	struct ClaimResponse_Detail1 *detail;
};
typedef struct ClaimResponse_AddItem ClaimResponse_AddItem;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_BodySite {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Physical service site on the patient (limb, tooth, etc.). */
	int site_count;
	struct CodeableReference *site;
/* description: A region or surface of the bodySite, e.g. limb region or tooth surface(s). */
	int subSite_count;
	struct CodeableConcept *subSite;
};
typedef struct ClaimResponse_BodySite ClaimResponse_BodySite;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Detail1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ClaimResponse_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ClaimResponse_Adjudication *adjudication;
/* description: The third-tier service adjudications for payor added services. */
	int subDetail_count;
	struct ClaimResponse_SubDetail1 *subDetail;
};
typedef struct ClaimResponse_Detail1 ClaimResponse_Detail1;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_SubDetail1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ClaimResponse_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ClaimResponse_Adjudication *adjudication;
};
typedef struct ClaimResponse_SubDetail1 ClaimResponse_SubDetail1;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Total {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item. */
	struct CodeableConcept *category;
/* description: Monetary total amount associated with the category. */
	struct Money *amount;
};
typedef struct ClaimResponse_Total ClaimResponse_Total;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Payment {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether this represents partial or complete payment of the benefits payable. */
	struct CodeableConcept *type;
/* description: Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication. */
	struct Money *adjustment;
/* description: Reason for the payment adjustment. */
	struct CodeableConcept *adjustmentReason;
/* description: Estimated date the payment will be issued or the actual issue date of payment. */
	date date_;
/* description: Benefits payable less any payment adjustment. */
	struct Money *amount;
/* description: Issuer's unique identifier for the payment instrument. */
	struct Identifier *identifier;
};
typedef struct ClaimResponse_Payment ClaimResponse_Payment;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_ProcessNote {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify a note entry. */
	positiveInt number;
/* description: The business purpose of the note text. */
	struct CodeableConcept *type;
/* description: The explanation or description associated with the processing. */
	string text;
/* description: A code to define the language used in the text of the note. */
	struct CodeableConcept *language;
};
typedef struct ClaimResponse_ProcessNote ClaimResponse_ProcessNote;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Insurance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order. */
	positiveInt sequence;
/* description: A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true. */
	boolean focal;
/* description: Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system. */
	struct Reference *coverage;
/* description: A business agreement number established between the provider and the insurer for special business processing purposes. */
	string businessArrangement;
/* description: The result of the adjudication of the line items for the Coverage specified in this insurance. */
	struct Reference *claimResponse;
};
typedef struct ClaimResponse_Insurance ClaimResponse_Insurance;

/* description: This resource provides the adjudication details from the processing of a Claim resource. */
struct ClaimResponse_Error {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure. */
	positiveInt itemSequence;
/* description: The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure. */
	positiveInt detailSequence;
/* description: The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure. */
	positiveInt subDetailSequence;
/* description: An error code, from a specified code system, which details why the claim could not be adjudicated. */
	struct CodeableConcept *code_;
/* description: A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised. */
	int expression_count;
	string expression;
};
typedef struct ClaimResponse_Error ClaimResponse_Error;

/* description: A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. */
struct ClinicalImpression {
/* description: This is a ClinicalImpression resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Identifies the workflow status of the assessment. */
	code status;
/* description: Captures the reason for the current state of the ClinicalImpression. */
	struct CodeableConcept *statusReason;
/* description: A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it. */
	string description;
/* description: The patient or group of individuals assessed as part of this record. */
	struct Reference *subject;
/* description: The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: The point in time or period over which the subject was assessed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string effectiveDateTime;
/* description: The point in time or period over which the subject was assessed. */
	struct Period *effectivePeriod;
/* description: Indicates when the documentation of the assessment was complete. */
	dateTime date_;
/* description: The clinician performing the assessment. */
	struct Reference *performer;
/* description: A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes. */
	struct Reference *previous;
/* description: A list of the relevant problems/conditions for a patient. */
	int problem_count;
	struct Reference *problem;
/* description: Change in the status/pattern of a subject's condition since previously assessed, such as worsening, improving, or no change.  It is a subjective assessment of the direction of the change. */
	struct CodeableConcept *changePattern;
/* description: Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis. */
	int protocol_count;
	uri protocol;
/* description: A text summary of the investigations and the diagnosis. */
	markdown summary;
/* description: Specific findings or diagnoses that were considered likely or relevant to ongoing treatment. */
	int finding_count;
	struct ClinicalImpression_Finding *finding;
/* description: Estimate of likely outcome. */
	int prognosisCodeableConcept_count;
	struct CodeableConcept *prognosisCodeableConcept;
/* description: RiskAssessment expressing likely outcome. */
	int prognosisReference_count;
	struct Reference *prognosisReference;
/* description: Information supporting the clinical impression, which can contain investigation results. */
	int supportingInfo_count;
	struct Reference *supportingInfo;
/* description: Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear. */
	int note_count;
	struct Annotation *note;
};
typedef struct ClinicalImpression ClinicalImpression;

/* description: A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called "ClinicalImpression" rather than "ClinicalAssessment" to avoid confusion with the recording of assessment tools such as Apgar score. */
struct ClinicalImpression_Finding {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions. */
	struct CodeableReference *item;
/* description: Which investigations support finding or diagnosis. */
	string basis;
};
typedef struct ClinicalImpression_Finding ClinicalImpression_Finding;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition {
/* description: This is a ClinicalUseDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for this issue. */
	int identifier_count;
	struct Identifier *identifier;
/* description: indication | contraindication | interaction | undesirable-effect | warning. */
	code type;
/* description: A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy and Lactation", "Overdose", "Effects on Ability to Drive and Use Machines". */
	int category_count;
	struct CodeableConcept *category;
/* description: The medication, product, substance, device, procedure etc. for which this is an indication, contraindication, interaction, undesirable effect, or warning. */
	int subject_count;
	struct Reference *subject;
/* description: Whether this is a current issue or one that has been retired etc. */
	struct CodeableConcept *status;
/* description: Specifics for when this is a contraindication. */
	struct ClinicalUseDefinition_Contraindication *contraindication;
/* description: Specifics for when this is an indication. */
	struct ClinicalUseDefinition_Indication *indication;
/* description: Specifics for when this is an interaction. */
	struct ClinicalUseDefinition_Interaction *interaction;
/* description: The population group to which this applies. */
	int population_count;
	struct Reference *population;
/* description: Logic used by the clinical use definition. */
	int library_count;
	canonical library;
/* description: Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment. */
	struct ClinicalUseDefinition_UndesirableEffect *undesirableEffect;
/* description: A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'. */
	struct ClinicalUseDefinition_Warning *warning;
};
typedef struct ClinicalUseDefinition ClinicalUseDefinition;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition_Contraindication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The situation that is being documented as contraindicating against this item. */
	struct CodeableReference *diseaseSymptomProcedure;
/* description: The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic". */
	struct CodeableReference *diseaseStatus;
/* description: A comorbidity (concurrent condition) or coinfection. */
	int comorbidity_count;
	struct CodeableReference *comorbidity;
/* description: The indication which this is a contraidication for. */
	int indication_count;
	struct Reference *indication;
/* description: An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements. */
	struct Expression *applicability;
/* description: Information about the use of the medicinal product in relation to other therapies described as part of the contraindication. */
	int otherTherapy_count;
	struct ClinicalUseDefinition_OtherTherapy *otherTherapy;
};
typedef struct ClinicalUseDefinition_Contraindication ClinicalUseDefinition_Contraindication;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition_OtherTherapy {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of relationship between the medicinal product indication or contraindication and another therapy. */
	struct CodeableConcept *relationshipType;
/* description: Reference to a specific medication (active substance, medicinal product or class of products, biological, food etc.) as part of an indication or contraindication. */
	struct CodeableReference *treatment;
};
typedef struct ClinicalUseDefinition_OtherTherapy ClinicalUseDefinition_OtherTherapy;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition_Indication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The situation that is being documented as an indicaton for this item. */
	struct CodeableReference *diseaseSymptomProcedure;
/* description: The status of the disease or symptom for the indication, for example "chronic" or "metastatic". */
	struct CodeableReference *diseaseStatus;
/* description: A comorbidity (concurrent condition) or coinfection as part of the indication. */
	int comorbidity_count;
	struct CodeableReference *comorbidity;
/* description: The intended effect, aim or strategy to be achieved. */
	struct CodeableReference *intendedEffect;
/* description: Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months). */
	struct Range *durationRange;
/* description: Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months). */
/* pattern: ^^[\s\S]+$$ */
	string durationString;
/* description: An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication. */
	int undesirableEffect_count;
	struct Reference *undesirableEffect;
/* description: An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements. */
	struct Expression *applicability;
/* description: Information about the use of the medicinal product in relation to other therapies described as part of the indication. */
	int otherTherapy_count;
	struct ClinicalUseDefinition_OtherTherapy *otherTherapy;
};
typedef struct ClinicalUseDefinition_Indication ClinicalUseDefinition_Indication;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition_Interaction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The specific medication, product, food, substance etc. or laboratory test that interacts. */
	int interactant_count;
	struct ClinicalUseDefinition_Interactant *interactant;
/* description: The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction. */
	struct CodeableConcept *type;
/* description: The effect of the interaction, for example "reduced gastric absorption of primary medication". */
	struct CodeableReference *effect;
/* description: The incidence of the interaction, e.g. theoretical, observed. */
	struct CodeableConcept *incidence;
/* description: Actions for managing the interaction. */
	int management_count;
	struct CodeableConcept *management;
};
typedef struct ClinicalUseDefinition_Interaction ClinicalUseDefinition_Interaction;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition_Interactant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The specific medication, product, food, substance etc. or laboratory test that interacts. */
	struct Reference *itemReference;
/* description: The specific medication, product, food, substance etc. or laboratory test that interacts. */
	struct CodeableConcept *itemCodeableConcept;
};
typedef struct ClinicalUseDefinition_Interactant ClinicalUseDefinition_Interactant;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition_UndesirableEffect {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The situation in which the undesirable effect may manifest. */
	struct CodeableReference *symptomConditionEffect;
/* description: High level classification of the effect. */
	struct CodeableConcept *classification;
/* description: How often the effect is seen. */
	struct CodeableConcept *frequencyOfOccurrence;
};
typedef struct ClinicalUseDefinition_UndesirableEffect ClinicalUseDefinition_UndesirableEffect;

/* description: A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure. */
struct ClinicalUseDefinition_Warning {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A textual definition of this warning, with formatting. */
	markdown description;
/* description: A coded or unformatted textual definition of this warning. */
	struct CodeableConcept *code_;
};
typedef struct ClinicalUseDefinition_Warning ClinicalUseDefinition_Warning;

/* description: The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. */
struct CodeSystem {
/* description: This is a CodeSystem resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system. */
	uri url_;
/* description: A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which CodeSystem is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which CodeSystem is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the code system. */
	string title;
/* description: The status of this code system. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the code system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the code system. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the code system from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the code system is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this code system is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the CodeSystem content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptions related to the content of the CodeSystem. Topics provide a high-level categorization as well as keywords for the CodeSystem that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the CodeSystem. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the CodeSystem. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the CodeSystem. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the CodeSystem for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: If code comparison is case sensitive when codes within this system are compared to each other. */
	boolean caseSensitive;
/* description: Canonical reference to the value set that contains all codes in the code system independent of code status. */
	canonical valueSet;
/* description: The meaning of the hierarchy of concepts as represented in this resource. */
	code hierarchyMeaning;
/* description: The code system defines a compositional (post-coordination) grammar. */
	boolean compositional;
/* description: This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system. */
	boolean versionNeeded;
/* description: The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance. */
	code content;
/* description: The canonical URL of the code system that this code system supplement is adding designations and properties to. */
	canonical supplements;
/* description: The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward. */
	unsignedInt count;
/* description: A filter that can be used in a value set compose statement when selecting concepts using a filter. */
	int filter_count;
	struct CodeSystem_Filter *filter;
/* description: A property defines an additional slot through which additional information can be provided about a concept. */
	int property_count;
	struct CodeSystem_Property *property;
/* description: Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are. */
	int concept_count;
	struct CodeSystem_Concept *concept;
};
typedef struct CodeSystem CodeSystem;

/* description: The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. */
struct CodeSystem_Filter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter. */
	code code_;
/* description: A description of how or why the filter is used. */
	string description;
/* description: A list of operators that can be used with the filter. */
	int operator_count;
	code operator;
/* description: A description of what the value for the filter should be. */
	string value;
};
typedef struct CodeSystem_Filter CodeSystem_Filter;

/* description: The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. */
struct CodeSystem_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters. */
	code code_;
/* description: Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system. */
	uri uri_;
/* description: A description of the property- why it is defined, and how its value might be used. */
	string description;
/* description: The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept). */
	code type;
};
typedef struct CodeSystem_Property CodeSystem_Property;

/* description: The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. */
struct CodeSystem_Concept {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code - a text symbol - that uniquely identifies the concept within the code system. */
	code code_;
/* description: A human readable string that is the recommended default way to present this concept to a user. */
	string display;
/* description: The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept. */
	string definition;
/* description: Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc. */
	int designation_count;
	struct CodeSystem_Designation *designation;
/* description: A property value for this concept. */
	int property_count;
	struct CodeSystem_Property1 *property;
/* description: Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning. */
	int concept_count;
	struct CodeSystem_Concept *concept;
};
typedef struct CodeSystem_Concept CodeSystem_Concept;

/* description: The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. */
struct CodeSystem_Designation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language this designation is defined for. */
	code language;
/* description: A code that details how this designation would be used. */
	struct Coding *use;
/* description: Additional codes that detail how this designation would be used, if there is more than one use. */
	int additionalUse_count;
	struct Coding *additionalUse;
/* description: The text value for this designation. */
	string value;
};
typedef struct CodeSystem_Designation CodeSystem_Designation;

/* description: The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content. */
struct CodeSystem_Property1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that is a reference to CodeSystem.property.code. */
	code code_;
/* description: The value of this property. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of this property. */
	struct Coding *valueCoding;
/* description: The value of this property. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of this property. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of this property. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of this property. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of this property. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
};
typedef struct CodeSystem_Property1 CodeSystem_Property1;

/* description: A clinical or business level record of information being transmitted or shared; e.g. an alert that was sent to a responsible provider, a public health agency communication to a provider/reporter in response to a case report for a reportable condition. */
struct Communication {
/* description: This is a Communication resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: An order, proposal or plan fulfilled in whole or in part by this Communication. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A larger event (e.g. Communication, Procedure) of which this particular communication is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: Prior communication that this communication is in response to. */
	int inResponseTo_count;
	struct Reference *inResponseTo;
/* description: The status of the transmission. */
	code status;
/* description: Captures the reason for the current state of the Communication. */
	struct CodeableConcept *statusReason;
/* description: The type of message conveyed such as alert, notification, reminder, instruction, etc. */
	int category_count;
	struct CodeableConcept *category;
/* description: Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine. */
	code priority;
/* description: A channel that was used for this communication (e.g. email, fax). */
	int medium_count;
	struct CodeableConcept *medium;
/* description: The patient or group that was the focus of this communication. */
	struct Reference *subject;
/* description: Description of the purpose/content, similar to a subject line in an email. */
	struct CodeableConcept *topic;
/* description: Other resources that pertain to this communication and to which this communication should be associated. */
	int about_count;
	struct Reference *about;
/* description: The Encounter during which this Communication was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: The time when this communication was sent. */
	dateTime sent;
/* description: The time when this communication arrived at the destination. */
	dateTime received;
/* description: The entity (e.g. person, organization, clinical information system, care team or device) which is the target of the communication. */
	int recipient_count;
	struct Reference *recipient;
/* description: The entity (e.g. person, organization, clinical information system, or device) which is the source of the communication. */
	struct Reference *sender;
/* description: The reason or justification for the communication. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Text, attachment(s), or resource(s) that was communicated to the recipient. */
	int payload_count;
	struct Communication_Payload *payload;
/* description: Additional notes or commentary about the communication by the sender, receiver or other interested parties. */
	int note_count;
	struct Annotation *note;
};
typedef struct Communication Communication;

/* description: A clinical or business level record of information being transmitted or shared; e.g. an alert that was sent to a responsible provider, a public health agency communication to a provider/reporter in response to a case report for a reportable condition. */
struct Communication_Payload {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A communicated content (or for multi-part communications, one portion of the communication). */
	struct Attachment *contentAttachment;
/* description: A communicated content (or for multi-part communications, one portion of the communication). */
	struct Reference *contentReference;
/* description: A communicated content (or for multi-part communications, one portion of the communication). */
	struct CodeableConcept *contentCodeableConcept;
};
typedef struct Communication_Payload Communication_Payload;

/* description: A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. */
struct CommunicationRequest {
/* description: This is a CommunicationRequest resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan or proposal that is fulfilled in whole or in part by this request. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Completed or terminated request(s) whose function is taken by this new request. */
	int replaces_count;
	struct Reference *replaces;
/* description: A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time. */
	struct Identifier *groupIdentifier;
/* description: The status of the proposal or order. */
	code status;
/* description: Captures the reason for the current state of the CommunicationRequest. */
	struct CodeableConcept *statusReason;
/* description: Indicates the level of authority/intentionality associated with the CommunicationRequest and where the request fits into the workflow chain. */
	code intent;
/* description: The type of message to be sent such as alert, notification, reminder, instruction, etc. */
	int category_count;
	struct CodeableConcept *category;
/* description: Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine. */
	code priority;
/* description: If true indicates that the CommunicationRequest is asking for the specified action to *not* occur. */
	boolean doNotPerform;
/* description: A channel that was used for this communication (e.g. email, fax). */
	int medium_count;
	struct CodeableConcept *medium;
/* description: The patient or group that is the focus of this communication request. */
	struct Reference *subject;
/* description: Other resources that pertain to this communication request and to which this communication request should be associated. */
	int about_count;
	struct Reference *about;
/* description: The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: Text, attachment(s), or resource(s) to be communicated to the recipient. */
	int payload_count;
	struct CommunicationRequest_Payload *payload;
/* description: The time when this communication is to occur. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: The time when this communication is to occur. */
	struct Period *occurrencePeriod;
/* description: For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation. */
	dateTime authoredOn;
/* description: The device, individual, or organization who asks for the information to be shared. */
	struct Reference *requester;
/* description: The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication. */
	int recipient_count;
	struct Reference *recipient;
/* description: The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication. */
	int informationProvider_count;
	struct Reference *informationProvider;
/* description: Describes why the request is being made in coded or textual form. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Comments made about the request by the requester, sender, recipient, subject or other participants. */
	int note_count;
	struct Annotation *note;
};
typedef struct CommunicationRequest CommunicationRequest;

/* description: A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition. */
struct CommunicationRequest_Payload {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The communicated content (or for multi-part communications, one portion of the communication). */
	struct Attachment *contentAttachment;
/* description: The communicated content (or for multi-part communications, one portion of the communication). */
	struct Reference *contentReference;
/* description: The communicated content (or for multi-part communications, one portion of the communication). */
	struct CodeableConcept *contentCodeableConcept;
};
typedef struct CommunicationRequest_Payload CommunicationRequest_Payload;

/* description: A compartment definition that defines how resources are accessed on a server. */
struct CompartmentDefinition {
/* description: This is a CompartmentDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this {{title}} when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the capability statement. */
	string title;
/* description: The status of this compartment definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the compartment definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the compartment definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the compartment definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the {{title}} is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this compartment definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: Which compartment this definition describes. */
	code code_;
/* description: Whether the search syntax is supported,. */
	boolean search;
/* description: Information about how a resource is related to the compartment. */
	int resource_count;
	struct CompartmentDefinition_Resource *resource;
};
typedef struct CompartmentDefinition CompartmentDefinition;

/* description: A compartment definition that defines how resources are accessed on a server. */
struct CompartmentDefinition_Resource {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of a resource supported by the server. */
	code code_;
/* description: The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,. */
	int param_count;
	string param;
/* description: Additional documentation about the resource and compartment. */
	string documentation;
/* description: Search Parameter for mapping requests made with $everything.start (e.g. on [Patient.$everything](patient-operation-everything.html)). */
	uri startParam;
/* description: Search Parameter for mapping requests made with $everything.end (e.g. on [Patient.$everything](patient-operation-everything.html)). */
	uri endParam;
};
typedef struct CompartmentDefinition_Resource CompartmentDefinition_Resource;

/* description: A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.). */
struct Composition {
/* description: This is a Composition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this Composition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Composition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Composition is stored on different servers. */
	uri url_;
/* description: A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time. */
	int identifier_count;
	struct Identifier *identifier;
/* description: An explicitly assigned identifier of a variation of the content in the Composition. */
	string version;
/* description: The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document. */
	code status;
/* description: Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition. */
	struct CodeableConcept *type;
/* description: A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type. */
	int category_count;
	struct CodeableConcept *category;
/* description: Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure). */
	int subject_count;
	struct Reference *subject;
/* description: Describes the clinical encounter or type of care this documentation is associated with. */
	struct Reference *encounter;
/* description: The composition editing time, when the composition was last logically changed by the author. */
	dateTime date_;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Composition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: Identifies who is responsible for the information in the composition, not necessarily who typed it in. */
	int author_count;
	struct Reference *author;
/* description: A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: Official human-readable label for the composition. */
	string title;
/* description: For any additional notes. */
	int note_count;
	struct Annotation *note;
/* description: A participant who has attested to the accuracy of the composition/document. */
	int attester_count;
	struct Composition_Attester *attester;
/* description: Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information. */
	struct Reference *custodian;
/* description: Relationships that this composition has with other compositions or documents that already exist. */
	int relatesTo_count;
	struct RelatedArtifact *relatesTo;
/* description: The clinical service, such as a colonoscopy or an appendectomy, being documented. */
	int event_count;
	struct Composition_Event *event;
/* description: The root of the sections that make up the composition. */
	int section_count;
	struct Composition_Section *section;
};
typedef struct Composition Composition;

/* description: A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.). */
struct Composition_Attester {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of attestation the authenticator offers. */
	struct CodeableConcept *mode;
/* description: When the composition was attested by the party. */
	dateTime time_;
/* description: Who attested the composition in the specified way. */
	struct Reference *party;
};
typedef struct Composition_Attester Composition_Attester;

/* description: A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.). */
struct Composition_Event {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time. */
	struct Period *period;
/* description: Represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which case the procedure being documented is necessarily a "History and Physical" act. The events may be included as a code or as a reference to an other resource. */
	int detail_count;
	struct CodeableReference *detail;
};
typedef struct Composition_Event Composition_Event;

/* description: A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.). */
struct Composition_Section {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents. */
	string title;
/* description: A code identifying the kind of content contained within the section. This must be consistent with the section title. */
	struct CodeableConcept *code_;
/* description: Identifies who is responsible for the information in this section, not necessarily who typed it in. */
	int author_count;
	struct Reference *author;
/* description: The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources). */
	struct Reference *focus;
/* description: A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. */
	struct Narrative *text;
/* description: Specifies the order applied to the items in the section entries. */
	struct CodeableConcept *orderedBy;
/* description: A reference to the actual resource from which the narrative in the section is derived. */
	int entry_count;
	struct Reference *entry;
/* description: If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason. */
	struct CodeableConcept *emptyReason;
/* description: A nested sub-section within this section. */
	int section_count;
	struct Composition_Section *section;
};
typedef struct Composition_Section Composition_Section;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap {
/* description: This is a ConceptMap resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which ConceptMap is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which ConceptMap is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the concept map. */
	string title;
/* description: The status of this concept map. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the concept map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the concept map. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the concept map from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the concept map is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this concept map is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the ConceptMap content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptions related to the content of the ConceptMap. Topics provide a high-level categorization as well as keywords for the ConceptMap that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the ConceptMap. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the ConceptMap. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ConceptMap. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the ConceptMap for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: A property defines a slot through which additional information can be provided about a map from source -> target. */
	int property_count;
	struct ConceptMap_Property *property;
/* description: An additionalAttribute defines an additional data element found in the source or target data model where the data will come from or be mapped to. Some mappings are based on data in addition to the source data element, where codes in multiple fields are combined to a single field (or vice versa). */
	int additionalAttribute_count;
	struct ConceptMap_AdditionalAttribute *additionalAttribute;
/* description: Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.  Limits the scope of the map to source codes (ConceptMap.group.element code or valueSet) that are members of this value set. */
/* pattern: ^\S*$ */
	string sourceScopeUri;
/* description: Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.  Limits the scope of the map to source codes (ConceptMap.group.element code or valueSet) that are members of this value set. */
/* pattern: ^\S*$ */
	string sourceScopeCanonical;
/* description: Identifier for the target value set that provides important context about how the mapping choices are made.  Limits the scope of the map to target codes (ConceptMap.group.element.target code or valueSet) that are members of this value set. */
/* pattern: ^\S*$ */
	string targetScopeUri;
/* description: Identifier for the target value set that provides important context about how the mapping choices are made.  Limits the scope of the map to target codes (ConceptMap.group.element.target code or valueSet) that are members of this value set. */
/* pattern: ^\S*$ */
	string targetScopeCanonical;
/* description: A group of mappings that all have the same source and target system. */
	int group_count;
	struct ConceptMap_Group *group;
};
typedef struct ConceptMap ConceptMap;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that is used to identify the property. The code is used internally (in ConceptMap.group.element.target.property.code) and also in the $translate operation. */
	code code_;
/* description: Reference to the formal meaning of the property. */
	uri uri_;
/* description: A description of the property - why it is defined, and how its value might be used. */
	string description;
/* description: The type of the property value. */
	code type;
/* description: The CodeSystem that defines the codes from which values of type ```code``` in property values. */
	canonical system;
};
typedef struct ConceptMap_Property ConceptMap_Property;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_AdditionalAttribute {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that is used to identify this additional data attribute. The code is used internally in ConceptMap.group.element.target.dependsOn.attribute and ConceptMap.group.element.target.product.attribute. */
	code code_;
/* description: Reference to the formal definition of the source/target data element. For elements defined by the FHIR specification, or using a FHIR logical model, the correct format is {canonical-url}#{element-id}. */
	uri uri_;
/* description: A description of the additional attribute and/or the data element it refers to - why it is defined, and how the value might be used in mappings, and a discussion of issues associated with the use of the data element. */
	string description;
/* description: The type of the source data contained in this concept map for this data element. */
	code type;
};
typedef struct ConceptMap_AdditionalAttribute ConceptMap_AdditionalAttribute;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_Group {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that identifies the source system where the concepts to be mapped are defined. */
	canonical source;
/* description: An absolute URI that identifies the target system that the concepts will be mapped to. */
	canonical target;
/* description: Mappings for an individual concept in the source to one or more concepts in the target. */
	int element_count;
	struct ConceptMap_Element *element;
/* description: What to do when there is no mapping to a target concept from the source concept and ConceptMap.group.element.noMap is not true. This provides the "default" to be applied when there is no target concept mapping specified or the expansion of ConceptMap.group.element.target.valueSet is empty. */
	struct ConceptMap_Unmapped *unmapped;
};
typedef struct ConceptMap_Group ConceptMap_Group;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_Element {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identity (code or path) or the element/item being mapped. */
	code code_;
/* description: The display for the code. The display is only provided to help editors when editing the concept map. */
	string display;
/* description: The set of concepts from the ConceptMap.group.source code system which are all being mapped to the target as part of this mapping rule. */
	canonical valueSet;
/* description: If noMap = true this indicates that no mapping to a target concept exists for this source concept. */
	boolean noMap;
/* description: A concept from the target value set that this concept maps to. */
	int target_count;
	struct ConceptMap_Target *target;
};
typedef struct ConceptMap_Element ConceptMap_Element;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_Target {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identity (code or path) or the element/item that the map refers to. */
	code code_;
/* description: The display for the code. The display is only provided to help editors when editing the concept map. */
	string display;
/* description: The set of concepts from the ConceptMap.group.target code system which are all being mapped to as part of this mapping rule. The effect of using this data element is the same as having multiple ConceptMap.group.element.target elements with one for each concept in the ConceptMap.group.element.target.valueSet value set. */
	canonical valueSet;
/* description: The relationship between the source and target concepts. The relationship is read from source to target (e.g. source-is-narrower-than-target). */
	code relationship;
/* description: A description of status/issues in mapping that conveys additional information not represented in  the structured data. */
	string comment;
/* description: A property value for this source -> target mapping. */
	int property_count;
	struct ConceptMap_Property1 *property;
/* description: A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified data attribute can be resolved, and it has the specified value. */
	int dependsOn_count;
	struct ConceptMap_DependsOn *dependsOn;
/* description: Product is the output of a ConceptMap that provides additional values that go in other attributes / data elemnts of the target data. */
	int product_count;
	struct ConceptMap_DependsOn *product;
};
typedef struct ConceptMap_Target ConceptMap_Target;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_Property1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A reference to a mapping property defined in ConceptMap.property. */
	code code_;
/* description: The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element and that ConceptMap.property element SHALL have a system element. */
	struct Coding *valueCoding;
/* description: The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element and that ConceptMap.property element SHALL have a system element. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element and that ConceptMap.property element SHALL have a system element. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element and that ConceptMap.property element SHALL have a system element. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element and that ConceptMap.property element SHALL have a system element. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element and that ConceptMap.property element SHALL have a system element. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The value of this property. If the type chosen for this element is 'code', then the property SHALL be defined in a ConceptMap.property element and that ConceptMap.property element SHALL have a system element. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
};
typedef struct ConceptMap_Property1 ConceptMap_Property1;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_DependsOn {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A reference to the additional attribute that holds a value the map depends on. */
	code attribute;
/* description: Data element value that the map depends on / produces. If the data type is a code, that code SHALL come from the .group.source code system for .dependsOn.valueCode or from the .group.target code system for .product.valueCode. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: Data element value that the map depends on / produces. If the data type is a code, that code SHALL come from the .group.source code system for .dependsOn.valueCode or from the .group.target code system for .product.valueCode. */
	struct Coding *valueCoding;
/* description: Data element value that the map depends on / produces. If the data type is a code, that code SHALL come from the .group.source code system for .dependsOn.valueCode or from the .group.target code system for .product.valueCode. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Data element value that the map depends on / produces. If the data type is a code, that code SHALL come from the .group.source code system for .dependsOn.valueCode or from the .group.target code system for .product.valueCode. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Data element value that the map depends on / produces. If the data type is a code, that code SHALL come from the .group.source code system for .dependsOn.valueCode or from the .group.target code system for .product.valueCode. */
	struct Quantity *valueQuantity;
/* description: This mapping applies if the data element value is a code from this value set. */
	canonical valueSet;
};
typedef struct ConceptMap_DependsOn ConceptMap_DependsOn;

/* description: A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models. */
struct ConceptMap_Unmapped {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped source code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL). */
	code mode;
/* description: The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code. */
	code code_;
/* description: The display for the code. The display is only provided to help editors when editing the concept map. */
	string display;
/* description: The set of fixed codes to use when the mode = 'fixed'  - all unmapped codes are mapped to each of the fixed codes. */
	canonical valueSet;
/* description: The default relationship value to apply between the source and target concepts when the source code is unmapped and the mode is 'fixed' or 'use-source-code'. */
	code relationship;
/* description: The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept. */
	canonical otherMap;
};
typedef struct ConceptMap_Unmapped ConceptMap_Unmapped;

/* description: A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. */
struct Condition {
/* description: This is a Condition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The clinical status of the condition. */
	struct CodeableConcept *clinicalStatus;
/* description: The verification status to support the clinical status of the condition.  The verification status pertains to the condition, itself, not to any specific condition attribute. */
	struct CodeableConcept *verificationStatus;
/* description: A category assigned to the condition. */
	int category_count;
	struct CodeableConcept *category;
/* description: A subjective assessment of the severity of the condition as evaluated by the clinician. */
	struct CodeableConcept *severity;
/* description: Identification of the condition, problem or diagnosis. */
	struct CodeableConcept *code_;
/* description: The anatomical location where this condition manifests itself. */
	int bodySite_count;
	struct CodeableConcept *bodySite;
/* description: Indicates the body structure on the subject's body where this condition manifests itself. */
	struct Reference *bodyStructure;
/* description: Indicates the patient or group who the condition record is associated with. */
	struct Reference *subject;
/* description: The Encounter during which this Condition was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: Estimated or actual date or date-time the condition, situation, or concern began, in the opinion of the clinician. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string onsetDateTime;
/* description: Estimated or actual date or date-time the condition, situation, or concern began, in the opinion of the clinician. */
	struct Age *onsetAge;
/* description: Estimated or actual date or date-time the condition, situation, or concern began, in the opinion of the clinician. */
	struct Period *onsetPeriod;
/* description: Estimated or actual date or date-time the condition, situation, or concern began, in the opinion of the clinician. */
	struct Range *onsetRange;
/* description: Estimated or actual date or date-time the condition, situation, or concern began, in the opinion of the clinician. */
/* pattern: ^^[\s\S]+$$ */
	string onsetString;
/* description: The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string abatementDateTime;
/* description: The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate. */
	struct Age *abatementAge;
/* description: The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate. */
	struct Period *abatementPeriod;
/* description: The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate. */
	struct Range *abatementRange;
/* description: The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Some conditions, such as chronic conditions, are never really resolved, but they can abate. */
/* pattern: ^^[\s\S]+$$ */
	string abatementString;
/* description: The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date. */
	dateTime recordedDate;
/* description: Indicates who or what participated in the activities related to the condition and how they were involved. */
	int participant_count;
	struct Condition_Participant *participant;
/* description: A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease. */
	int stage_count;
	struct Condition_Stage *stage;
/* description: Supporting evidence / manifestations that are the basis for determining the Condition. */
	int evidence_count;
	struct CodeableReference *evidence;
/* description: Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis. */
	int note_count;
	struct Annotation *note;
};
typedef struct Condition Condition;

/* description: A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. */
struct Condition_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the actor in the activities related to the condition. */
	struct CodeableConcept *function;
/* description: Indicates who or what participated in the activities related to the condition. */
	struct Reference *actor;
};
typedef struct Condition_Participant Condition_Participant;

/* description: A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern. */
struct Condition_Stage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A simple summary of the stage such as "Stage 3" or "Early Onset". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease. */
	struct CodeableConcept *summary;
/* description: Reference to a formal record of the evidence on which the staging assessment is based. */
	int assessment_count;
	struct Reference *assessment;
/* description: The kind of staging, such as pathological or clinical staging. */
	struct CodeableConcept *type;
};
typedef struct Condition_Stage Condition_Stage;

/* description: A definition of a condition and information relevant to managing it. */
struct ConditionDefinition {
/* description: This is a ConditionDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this condition definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this condition definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the condition definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this condition definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the condition definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the condition definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the condition definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the condition definition. */
	string title;
/* description: The status of this condition definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this condition definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the condition definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the condition definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the condition definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the condition definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate condition definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the condition definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this {{title}} is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the {{title}} content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the {{title}}. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the {{title}}. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: An explanatory or alternate title for the event definition giving additional information about its content. */
	string subtitle;
/* description: Identification of the condition, problem or diagnosis. */
	struct CodeableConcept *code_;
/* description: A subjective assessment of the severity of the condition as evaluated by the clinician. */
	struct CodeableConcept *severity;
/* description: The anatomical location where this condition manifests itself. */
	struct CodeableConcept *bodySite;
/* description: Clinical stage or grade of a condition. May include formal severity assessments. */
	struct CodeableConcept *stage;
/* description: Whether Severity is appropriate to collect for this condition. */
	boolean hasSeverity;
/* description: Whether bodySite is appropriate to collect for this condition. */
	boolean hasBodySite;
/* description: Whether stage is appropriate to collect for this condition. */
	boolean hasStage;
/* description: Formal definitions of the condition. These may be references to ontologies, published clinical protocols or research papers. */
	int definition_count;
	uri definition;
/* description: Observations particularly relevant to this condition. */
	int observation_count;
	canonical observation;
/* description: Medications particularly relevant for this condition. */
	int medication_count;
	struct ConditionDefinition_Medication *medication;
/* description: An observation that suggests that this condition applies. */
	int precondition_count;
	struct ConditionDefinition_Precondition *precondition;
/* description: Appropriate team for this condition. */
	int team_count;
	struct Reference *team;
/* description: Questionnaire for this condition. */
	int questionnaire_count;
	struct ConditionDefinition_Questionnaire *questionnaire;
/* description: Plan that is appropriate. */
	int plan_count;
	struct ConditionDefinition_Plan *plan;
};
typedef struct ConditionDefinition ConditionDefinition;

/* description: A definition of a condition and information relevant to managing it. */
struct ConditionDefinition_Medication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Category that is relevant. */
	struct CodeableConcept *category;
/* description: Code for relevant Medication. */
	struct CodeableConcept *code_;
};
typedef struct ConditionDefinition_Medication ConditionDefinition_Medication;

/* description: A definition of a condition and information relevant to managing it. */
struct ConditionDefinition_Precondition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Kind of pre-condition. */
	code type;
/* description: Code for relevant Observation. */
	struct CodeableConcept *code_;
/* description: Value of Observation. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Value of Observation. */
	struct Quantity *valueQuantity;
};
typedef struct ConditionDefinition_Precondition ConditionDefinition_Precondition;

/* description: A definition of a condition and information relevant to managing it. */
struct ConditionDefinition_Questionnaire {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Use of the questionnaire. */
	code purpose;
/* description: Specific Questionnaire. */
	struct Reference *reference;
};
typedef struct ConditionDefinition_Questionnaire ConditionDefinition_Questionnaire;

/* description: A definition of a condition and information relevant to managing it. */
struct ConditionDefinition_Plan {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Use for the plan. */
	struct CodeableConcept *role;
/* description: The actual plan. */
	struct Reference *reference;
};
typedef struct ConditionDefinition_Plan ConditionDefinition_Plan;

/* description: A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
struct Consent {
/* description: This is a Consent resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier for this copy of the Consent Statement. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Indicates the current state of this Consent resource. */
	code status;
/* description: A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements. */
	int category_count;
	struct CodeableConcept *category;
/* description: The patient/healthcare practitioner or group of persons to whom this consent applies. */
	struct Reference *subject;
/* description: Date the consent instance was agreed to. */
	date date_;
/* description: Effective period for this Consent Resource and all provisions unless specified in that provision. */
	struct Period *period;
/* description: The entity responsible for granting the rights listed in a Consent Directive. */
	int grantor_count;
	struct Reference *grantor;
/* description: The entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions. */
	int grantee_count;
	struct Reference *grantee;
/* description: The actor that manages the consent through its lifecycle. */
	int manager_count;
	struct Reference *manager;
/* description: The actor that controls/enforces the access according to the consent. */
	int controller_count;
	struct Reference *controller;
/* description: The source on which this consent statement is based. The source might be a scanned original paper form. */
	int sourceAttachment_count;
	struct Attachment *sourceAttachment;
/* description: A reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document. */
	int sourceReference_count;
	struct Reference *sourceReference;
/* description: A set of codes that indicate the regulatory basis (if any) that this consent supports. */
	int regulatoryBasis_count;
	struct CodeableConcept *regulatoryBasis;
/* description: A Reference or URL used to uniquely identify the policy the organization will enforce for this Consent. This Reference or URL should be specific to the version of the policy and should be dereferencable to a computable policy of some form. */
	struct Consent_PolicyBasis *policyBasis;
/* description: A Reference to the human readable policy explaining the basis for the Consent. */
	int policyText_count;
	struct Reference *policyText;
/* description: Whether a treatment instruction (e.g. artificial respiration: yes or no) was verified with the patient, his/her family or another authorized person. */
	int verification_count;
	struct Consent_Verification *verification;
/* description: Action to take - permit or deny - as default. */
	code decision;
/* description: An exception to the base policy of this consent. An exception can be an addition or removal of access permissions. */
	int provision_count;
	struct Consent_Provision *provision;
};
typedef struct Consent Consent;

/* description: A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
struct Consent_PolicyBasis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A Reference that identifies the policy the organization will enforce for this Consent. */
	struct Reference *reference;
/* description: A URL that links to a computable version of the policy the organization will enforce for this Consent. */
	url url_;
};
typedef struct Consent_PolicyBasis Consent_PolicyBasis;

/* description: A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
struct Consent_Verification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Has the instruction been verified. */
	boolean verified;
/* description: Extensible list of verification type starting with verification and re-validation. */
	struct CodeableConcept *verificationType;
/* description: The person who conducted the verification/validation of the Grantor decision. */
	struct Reference *verifiedBy;
/* description: Who verified the instruction (Patient, Relative or other Authorized Person). */
	struct Reference *verifiedWith;
/* description: Date(s) verification was collected. */
	int verificationDate_count;
	dateTime verificationDate;
};
typedef struct Consent_Verification Consent_Verification;

/* description: A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
struct Consent_Provision {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Timeframe for this provision. */
	struct Period *period;
/* description: Who or what is controlled by this provision. Use group to identify a set of actors by some property they share (e.g. 'admitting officers'). */
	int actor_count;
	struct Consent_Actor *actor;
/* description: Actions controlled by this provision. */
	int action_count;
	struct CodeableConcept *action;
/* description: A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception. */
	int securityLabel_count;
	struct Coding *securityLabel;
/* description: The context of the activities a user is taking - why the user is accessing the data - that are controlled by this provision. */
	int purpose_count;
	struct Coding *purpose;
/* description: The documentType(s) covered by this provision. The type can be a CDA document, or some other type that indicates what sort of information the consent relates to. */
	int documentType_count;
	struct Coding *documentType;
/* description: The resourceType(s) covered by this provision. The type can be a FHIR resource type or a profile on a type that indicates what information the consent relates to. */
	int resourceType_count;
	struct Coding *resourceType;
/* description: If this code is found in an instance, then the provision applies. */
	int code_count;
	struct CodeableConcept *code_;
/* description: Clinical or Operational Relevant period of time that bounds the data controlled by this provision. */
	struct Period *dataPeriod;
/* description: The resources controlled by this provision if specific resources are referenced. */
	int data_count;
	struct Consent_Data *data;
/* description: A computable (FHIRPath or other) definition of what is controlled by this consent. */
	struct Expression *expression;
/* description: Provisions which provide exceptions to the base provision or subprovisions. */
	int provision_count;
	struct Consent_Provision *provision;
};
typedef struct Consent_Provision Consent_Provision;

/* description: A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
struct Consent_Actor {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: How the individual is involved in the resources content that is described in the exception. */
	struct CodeableConcept *role;
/* description: The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers'). */
	struct Reference *reference;
};
typedef struct Consent_Actor Consent_Actor;

/* description: A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time. */
struct Consent_Data {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: How the resource reference is interpreted when testing consent restrictions. */
	code meaning;
/* description: A reference to a specific resource that defines which resources are covered by this consent. */
	struct Reference *reference;
};
typedef struct Consent_Data Consent_Data;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract {
/* description: This is a Contract resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier for this Contract or a derivative that references a Source Contract. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Canonical identifier for this contract, represented as a URI (globally unique). */
	uri url_;
/* description: An edition identifier used for business purposes to label business significant variants. */
	string version;
/* description: The status of the resource instance. */
	code status;
/* description: Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement. */
	struct CodeableConcept *legalState;
/* description: The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract. */
	struct Reference *instantiatesCanonical;
/* description: The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract. */
	uri instantiatesUri;
/* description: The minimal content derived from the basal information source at a specific stage in its lifecycle. */
	struct CodeableConcept *contentDerivative;
/* description: When this  Contract was issued. */
	dateTime issued;
/* description: Relevant time or time-period when this Contract is applicable. */
	struct Period *applies;
/* description: Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract. */
	struct CodeableConcept *expirationType;
/* description: The target entity impacted by or of interest to parties to the agreement. */
	int subject_count;
	struct Reference *subject;
/* description: A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies. */
	int authority_count;
	struct Reference *authority;
/* description: Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources. */
	int domain_count;
	struct Reference *domain;
/* description: Sites in which the contract is complied with,  exercised, or in force. */
	int site_count;
	struct Reference *site;
/* description: A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state. */
	string title;
/* description: A more detailed or qualifying explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state. */
	string subtitle;
/* description: Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation. */
	int alias_count;
	string alias;
/* description: The individual or organization that authored the Contract definition, derivative, or instance in any legal state. */
	struct Reference *author;
/* description: A selector of legal concerns for this Contract definition, derivative, or instance in any legal state. */
	struct CodeableConcept *scope;
/* description: Narrows the range of legal concerns to focus on the achievement of specific contractual objectives. */
	struct CodeableConcept *topicCodeableConcept;
/* description: Narrows the range of legal concerns to focus on the achievement of specific contractual objectives. */
	struct Reference *topicReference;
/* description: A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract. */
	struct CodeableConcept *type;
/* description: Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope. */
	int subType_count;
	struct CodeableConcept *subType;
/* description: Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract. */
	struct Contract_ContentDefinition *contentDefinition;
/* description: One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups. */
	int term_count;
	struct Contract_Term *term;
/* description: Information that may be needed by/relevant to the performer in their execution of this term action. */
	int supportingInfo_count;
	struct Reference *supportingInfo;
/* description: Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provenance.entity indicates the target that was changed in the update (see [Provenance.entity](provenance-definitions.html#Provenance.entity)). */
	int relevantHistory_count;
	struct Reference *relevantHistory;
/* description: Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness. */
	int signer_count;
	struct Contract_Signer *signer;
/* description: The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement. */
	int friendly_count;
	struct Contract_Friendly *friendly;
/* description: List of Legal expressions or representations of this Contract. */
	int legal_count;
	struct Contract_Legal *legal;
/* description: List of Computable Policy Rule Language Representations of this Contract. */
	int rule_count;
	struct Contract_Rule *rule;
/* description: Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract. */
	struct Attachment *legallyBindingAttachment;
/* description: Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract. */
	struct Reference *legallyBindingReference;
};
typedef struct Contract Contract;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_ContentDefinition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation. */
	struct CodeableConcept *type;
/* description: Detailed Precusory content type. */
	struct CodeableConcept *subType;
/* description: The  individual or organization that published the Contract precursor content. */
	struct Reference *publisher;
/* description: The date (and optionally time) when the contract was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes. */
	dateTime publicationDate;
/* description: amended | appended | cancelled | disputed | entered-in-error | executable +. */
	code publicationStatus;
/* description: A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content. */
	markdown copyright;
};
typedef struct Contract_ContentDefinition Contract_ContentDefinition;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Term {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier for this particular Contract Provision. */
	struct Identifier *identifier;
/* description: When this Contract Provision was issued. */
	dateTime issued;
/* description: Relevant time or time-period when this Contract Provision is applicable. */
	struct Period *applies;
/* description: The entity that the term applies to. */
	struct CodeableConcept *topicCodeableConcept;
/* description: The entity that the term applies to. */
	struct Reference *topicReference;
/* description: A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time. */
	struct CodeableConcept *type;
/* description: A specialized legal clause or condition based on overarching contract type. */
	struct CodeableConcept *subType;
/* description: Statement of a provision in a policy or a contract. */
	string text;
/* description: Security labels that protect the handling of information about the term and its elements, which may be specifically identified. */
	int securityLabel_count;
	struct Contract_SecurityLabel *securityLabel;
/* description: The matter of concern in the context of this provision of the agrement. */
	struct Contract_Offer *offer;
/* description: Contract Term Asset List. */
	int asset_count;
	struct Contract_Asset *asset;
/* description: An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place. */
	int action_count;
	struct Contract_Action *action;
/* description: Nested group of Contract Provisions. */
	int group_count;
	struct Contract_Term *group;
};
typedef struct Contract_Term Contract_Term;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_SecurityLabel {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Number used to link this term or term element to the applicable Security Label. */
	int number_count;
	unsignedInt number;
/* description: Security label privacy tag that specifies the level of confidentiality protection required for this term and/or term elements. */
	struct Coding *classification;
/* description: Security label privacy tag that specifies the applicable privacy and security policies governing this term and/or term elements. */
	int category_count;
	struct Coding *category;
/* description: Security label privacy tag that specifies the manner in which term and/or term elements are to be protected. */
	int control_count;
	struct Coding *control;
};
typedef struct Contract_SecurityLabel Contract_SecurityLabel;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Offer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier for this particular Contract Provision. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Offer Recipient. */
	int party_count;
	struct Contract_Party *party;
/* description: The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30). */
	struct Reference *topic;
/* description: Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit. */
	struct CodeableConcept *type;
/* description: Type of choice made by accepting party with respect to an offer made by an offeror/ grantee. */
	struct CodeableConcept *decision;
/* description: How the decision about a Contract was conveyed. */
	int decisionMode_count;
	struct CodeableConcept *decisionMode;
/* description: Response to offer text. */
	int answer_count;
	struct Contract_Answer *answer;
/* description: Human readable form of this Contract Offer. */
	string text;
/* description: The id of the clause or question text of the offer in the referenced questionnaire/response. */
	int linkId_count;
	string linkId;
/* description: Security labels that protects the offer. */
	int securityLabelNumber_count;
	unsignedInt securityLabelNumber;
};
typedef struct Contract_Offer Contract_Offer;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Party {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Participant in the offer. */
	int reference_count;
	struct Reference *reference;
/* description: How the party participates in the offer. */
	struct CodeableConcept *role;
};
typedef struct Contract_Party Contract_Party;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Answer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
	struct Attachment *valueAttachment;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
	struct Coding *valueCoding;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
	struct Quantity *valueQuantity;
/* description: Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warranty duration, or whether biospecimen may be used for further research. */
	struct Reference *valueReference;
};
typedef struct Contract_Answer Contract_Answer;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Asset {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Differentiates the kind of the asset . */
	struct CodeableConcept *scope;
/* description: Target entity type about which the term may be concerned. */
	int type_count;
	struct CodeableConcept *type;
/* description: Associated entities. */
	int typeReference_count;
	struct Reference *typeReference;
/* description: May be a subtype or part of an offered asset. */
	int subtype_count;
	struct CodeableConcept *subtype;
/* description: Specifies the applicability of the term to an asset resource instance, and instances it refers to or instances that refer to it, and/or are owned by the offeree. */
	struct Coding *relationship;
/* description: Circumstance of the asset. */
	int context_count;
	struct Contract_Context *context;
/* description: Description of the quality and completeness of the asset that may be a factor in its valuation. */
	string condition;
/* description: Type of Asset availability for use or ownership. */
	int periodType_count;
	struct CodeableConcept *periodType;
/* description: Asset relevant contractual time period. */
	int period_count;
	struct Period *period;
/* description: Time period of asset use. */
	int usePeriod_count;
	struct Period *usePeriod;
/* description: Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract. */
	string text;
/* description: Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse. */
	int linkId_count;
	string linkId;
/* description: Response to assets. */
	int answer_count;
	struct Contract_Answer *answer;
/* description: Security labels that protects the asset. */
	int securityLabelNumber_count;
	unsignedInt securityLabelNumber;
/* description: Contract Valued Item List. */
	int valuedItem_count;
	struct Contract_ValuedItem *valuedItem;
};
typedef struct Contract_Asset Contract_Asset;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Context {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction. */
	struct Reference *reference;
/* description: Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location. */
	int code_count;
	struct CodeableConcept *code_;
/* description: Context description. */
	string text;
};
typedef struct Contract_Context Contract_Context;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_ValuedItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Specific type of Contract Valued Item that may be priced. */
	struct CodeableConcept *entityCodeableConcept;
/* description: Specific type of Contract Valued Item that may be priced. */
	struct Reference *entityReference;
/* description: Identifies a Contract Valued Item instance. */
	struct Identifier *identifier;
/* description: Indicates the time during which this Contract ValuedItem information is effective. */
	dateTime effectiveTime;
/* description: Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances. */
	struct Quantity *quantity;
/* description: A Contract Valued Item unit valuation measure. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point. */
	decimal points;
/* description: Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied. */
	struct Money *net;
/* description: Terms of valuation. */
	string payment;
/* description: When payment is due. */
	dateTime paymentDate;
/* description: Who will make payment. */
	struct Reference *responsible;
/* description: Who will receive payment. */
	struct Reference *recipient;
/* description: Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse. */
	int linkId_count;
	string linkId;
/* description: A set of security labels that define which terms are controlled by this condition. */
	int securityLabelNumber_count;
	unsignedInt securityLabelNumber;
};
typedef struct Contract_ValuedItem Contract_ValuedItem;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Action {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: True if the term prohibits the  action. */
	boolean doNotPerform;
/* description: Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term. */
	struct CodeableConcept *type;
/* description: Entity of the action. */
	int subject_count;
	struct Contract_Subject *subject;
/* description: Reason or purpose for the action stipulated by this Contract Provision. */
	struct CodeableConcept *intent;
/* description: Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse. */
	int linkId_count;
	string linkId;
/* description: Current state of the term action. */
	struct CodeableConcept *status;
/* description: Encounter or Episode with primary association to the specified term activity. */
	struct Reference *context;
/* description: Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse. */
	int contextLinkId_count;
	string contextLinkId;
/* description: When action happens. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: When action happens. */
	struct Period *occurrencePeriod;
/* description: When action happens. */
	struct Timing *occurrenceTiming;
/* description: Who or what initiated the action and has responsibility for its activation. */
	int requester_count;
	struct Reference *requester;
/* description: Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse. */
	int requesterLinkId_count;
	string requesterLinkId;
/* description: The type of individual that is desired or required to perform or not perform the action. */
	int performerType_count;
	struct CodeableConcept *performerType;
/* description: The type of role or competency of an individual desired or required to perform or not perform the action. */
	struct CodeableConcept *performerRole;
/* description: Indicates who or what is being asked to perform (or not perform) the ction. */
	struct Reference *performer;
/* description: Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse. */
	int performerLinkId_count;
	string performerLinkId;
/* description: Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited. Either a coded concept, or another resource whose existence justifies permitting or not permitting this action. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse. */
	int reasonLinkId_count;
	string reasonLinkId;
/* description: Comments made about the term action made by the requester, performer, subject or other participants. */
	int note_count;
	struct Annotation *note;
/* description: Security labels that protects the action. */
	int securityLabelNumber_count;
	unsignedInt securityLabelNumber;
};
typedef struct Contract_Action Contract_Action;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Subject {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The entity the action is performed or not performed on or for. */
	int reference_count;
	struct Reference *reference;
/* description: Role type of agent assigned roles in this Contract. */
	struct CodeableConcept *role;
};
typedef struct Contract_Subject Contract_Subject;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Signer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Role of this Contract signer, e.g. notary, grantee. */
	struct Coding *type;
/* description: Party which is a signator to this Contract. */
	struct Reference *party;
/* description: Legally binding Contract DSIG signature contents in Base64. */
	int signature_count;
	struct Signature *signature;
};
typedef struct Contract_Signer Contract_Signer;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Friendly {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability. */
	struct Attachment *contentAttachment;
/* description: Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability. */
	struct Reference *contentReference;
};
typedef struct Contract_Friendly Contract_Friendly;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Legal {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Contract legal text in human renderable form. */
	struct Attachment *contentAttachment;
/* description: Contract legal text in human renderable form. */
	struct Reference *contentReference;
};
typedef struct Contract_Legal Contract_Legal;

/* description: Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement. */
struct Contract_Rule {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal). */
	struct Attachment *contentAttachment;
/* description: Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal). */
	struct Reference *contentReference;
};
typedef struct Contract_Rule Contract_Rule;

/* description: Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment. */
struct Coverage {
/* description: This is a Coverage resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The identifier of the coverage as issued by the insurer. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the resource instance. */
	code status;
/* description: The nature of the coverage be it insurance, or cash payment such as self-pay. */
	code kind;
/* description: Link to the paying party and optionally what specifically they will be responsible to pay. */
	int paymentBy_count;
	struct Coverage_PaymentBy *paymentBy;
/* description: The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization. */
	struct CodeableConcept *type;
/* description: The party who 'owns' the insurance policy. */
	struct Reference *policyHolder;
/* description: The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due. */
	struct Reference *subscriber;
/* description: The insurer assigned ID for the Subscriber. */
	int subscriberId_count;
	struct Identifier *subscriberId;
/* description: The party who benefits from the insurance coverage; the patient when products and/or services are provided. */
	struct Reference *beneficiary;
/* description: A designator for a dependent under the coverage. */
	string dependent;
/* description: The relationship of beneficiary (patient) to the subscriber. */
	struct CodeableConcept *relationship;
/* description: Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force. */
	struct Period *period;
/* description: The program or plan underwriter, payor, insurance company. */
	struct Reference *insurer;
/* description: A suite of underwriter specific classifiers. */
	int class_count;
	struct Coverage_Class *class;
/* description: The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care. For example; a patient might have (0) auto insurance (1) their own health insurance and (2) spouse's health insurance. When claiming for treatments which were not the result of an auto accident then only coverages (1) and (2) above would be applicatble and would apply in the order specified in parenthesis. */
	positiveInt order;
/* description: The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply. */
	string network;
/* description: A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card. */
	int costToBeneficiary_count;
	struct Coverage_CostToBeneficiary *costToBeneficiary;
/* description: When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs. */
	boolean subrogation;
/* description: The policy(s) which constitute this insurance coverage. */
	int contract_count;
	struct Reference *contract;
/* description: The insurance plan details, benefits and costs, which constitute this insurance coverage. */
	struct Reference *insurancePlan;
};
typedef struct Coverage Coverage;

/* description: Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment. */
struct Coverage_PaymentBy {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The list of parties providing non-insurance payment for the treatment costs. */
	struct Reference *party;
/* description:  Description of the financial responsibility. */
	string responsibility;
};
typedef struct Coverage_PaymentBy Coverage_PaymentBy;

/* description: Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment. */
struct Coverage_Class {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of classification for which an insurer-specific class label or number and optional name is provided.  For example, type may be used to identify a class of coverage or employer group, policy, or plan. */
	struct CodeableConcept *type;
/* description: The alphanumeric identifier associated with the insurer issued label. */
	struct Identifier *value;
/* description: A short description for the class. */
	string name;
};
typedef struct Coverage_Class Coverage_Class;

/* description: Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment. */
struct Coverage_CostToBeneficiary {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The category of patient centric costs associated with treatment. */
	struct CodeableConcept *type;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers. */
	struct CodeableConcept *network;
/* description: Indicates if the benefits apply to an individual or to the family. */
	struct CodeableConcept *unit;
/* description: The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'. */
	struct CodeableConcept *term;
/* description: The amount due from the patient for the cost category. */
	struct Quantity *valueQuantity;
/* description: The amount due from the patient for the cost category. */
	struct Money *valueMoney;
/* description: A suite of codes indicating exceptions or reductions to patient costs and their effective periods. */
	int exception_count;
	struct Coverage_Exception *exception;
};
typedef struct Coverage_CostToBeneficiary Coverage_CostToBeneficiary;

/* description: Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment. */
struct Coverage_Exception {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The code for the specific exception. */
	struct CodeableConcept *type;
/* description: The timeframe the exception is in force. */
	struct Period *period;
};
typedef struct Coverage_Exception Coverage_Exception;

/* description: The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
struct CoverageEligibilityRequest {
/* description: This is a CoverageEligibilityRequest resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this coverage eligiblity request. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the resource instance. */
	code status;
/* description: When the requestor expects the processor to complete processing. */
	struct CodeableConcept *priority;
/* description: Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified. */
	int purpose_count;
	code purpose;
/* description: The party who is the beneficiary of the supplied coverage and for whom eligibility is sought. */
	struct Reference *patient;
/* description: Information code for an event with a corresponding date or period. */
	int event_count;
	struct CoverageEligibilityRequest_Event *event;
/* description: The date or dates when the enclosed suite of services were performed or completed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string servicedDate;
/* description: The date or dates when the enclosed suite of services were performed or completed. */
	struct Period *servicedPeriod;
/* description: The date when this resource was created. */
	dateTime created;
/* description: Person who created the request. */
	struct Reference *enterer;
/* description: The provider which is responsible for the request. */
	struct Reference *provider;
/* description: The Insurer who issued the coverage in question and is the recipient of the request. */
	struct Reference *insurer;
/* description: Facility where the services are intended to be provided. */
	struct Reference *facility;
/* description: Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. */
	int supportingInfo_count;
	struct CoverageEligibilityRequest_SupportingInfo *supportingInfo;
/* description: Financial instruments for reimbursement for the health care products and services. */
	int insurance_count;
	struct CoverageEligibilityRequest_Insurance *insurance;
/* description: Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor. */
	int item_count;
	struct CoverageEligibilityRequest_Item *item;
};
typedef struct CoverageEligibilityRequest CoverageEligibilityRequest;

/* description: The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
struct CoverageEligibilityRequest_Event {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A coded event such as when a service is expected or a card printed. */
	struct CodeableConcept *type;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string whenDateTime;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
	struct Period *whenPeriod;
};
typedef struct CoverageEligibilityRequest_Event CoverageEligibilityRequest_Event;

/* description: The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
struct CoverageEligibilityRequest_SupportingInfo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify supporting information entries. */
	positiveInt sequence;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Reference *information;
/* description: The supporting materials are applicable for all detail items, product/servce categories and specific billing codes. */
	boolean appliesToAll;
};
typedef struct CoverageEligibilityRequest_SupportingInfo CoverageEligibilityRequest_SupportingInfo;

/* description: The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
struct CoverageEligibilityRequest_Insurance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A flag to indicate that this Coverage is to be used for evaluation of this request when set to true. */
	boolean focal;
/* description: Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system. */
	struct Reference *coverage;
/* description: A business agreement number established between the provider and the insurer for special business processing purposes. */
	string businessArrangement;
};
typedef struct CoverageEligibilityRequest_Insurance CoverageEligibilityRequest_Insurance;

/* description: The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
struct CoverageEligibilityRequest_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Exceptions, special conditions and supporting information applicable for this service or product line. */
	int supportingInfoSequence_count;
	positiveInt supportingInfoSequence;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: This contains the product, service, drug or other billing code for the item. */
	struct CodeableConcept *productOrService;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: The practitioner who is responsible for the product or service to be rendered to the patient. */
	struct Reference *provider;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: The amount charged to the patient by the provider for a single unit. */
	struct Money *unitPrice;
/* description: Facility where the services will be provided. */
	struct Reference *facility;
/* description: Patient diagnosis for which care is sought. */
	int diagnosis_count;
	struct CoverageEligibilityRequest_Diagnosis *diagnosis;
/* description: The plan/proposal/order describing the proposed service in detail. */
	int detail_count;
	struct Reference *detail;
};
typedef struct CoverageEligibilityRequest_Item CoverageEligibilityRequest_Item;

/* description: The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy. */
struct CoverageEligibilityRequest_Diagnosis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The nature of illness or problem in a coded form or as a reference to an external defined Condition. */
	struct CodeableConcept *diagnosisCodeableConcept;
/* description: The nature of illness or problem in a coded form or as a reference to an external defined Condition. */
	struct Reference *diagnosisReference;
};
typedef struct CoverageEligibilityRequest_Diagnosis CoverageEligibilityRequest_Diagnosis;

/* description: This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource. */
struct CoverageEligibilityResponse {
/* description: This is a CoverageEligibilityResponse resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this coverage eligiblity request. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the resource instance. */
	code status;
/* description: Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified. */
	int purpose_count;
	code purpose;
/* description: The party who is the beneficiary of the supplied coverage and for whom eligibility is sought. */
	struct Reference *patient;
/* description: Information code for an event with a corresponding date or period. */
	int event_count;
	struct CoverageEligibilityResponse_Event *event;
/* description: The date or dates when the enclosed suite of services were performed or completed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string servicedDate;
/* description: The date or dates when the enclosed suite of services were performed or completed. */
	struct Period *servicedPeriod;
/* description: The date this resource was created. */
	dateTime created;
/* description: The provider which is responsible for the request. */
	struct Reference *requestor;
/* description: Reference to the original request resource. */
	struct Reference *request;
/* description: The outcome of the request processing. */
	code outcome;
/* description: A human readable description of the status of the adjudication. */
	string disposition;
/* description: The Insurer who issued the coverage in question and is the author of the response. */
	struct Reference *insurer;
/* description: Financial instruments for reimbursement for the health care products and services. */
	int insurance_count;
	struct CoverageEligibilityResponse_Insurance *insurance;
/* description: A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred. */
	string preAuthRef;
/* description: A code for the form to be used for printing the content. */
	struct CodeableConcept *form;
/* description: Errors encountered during the processing of the request. */
	int error_count;
	struct CoverageEligibilityResponse_Error *error;
};
typedef struct CoverageEligibilityResponse CoverageEligibilityResponse;

/* description: This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource. */
struct CoverageEligibilityResponse_Event {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A coded event such as when a service is expected or a card printed. */
	struct CodeableConcept *type;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string whenDateTime;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
	struct Period *whenPeriod;
};
typedef struct CoverageEligibilityResponse_Event CoverageEligibilityResponse_Event;

/* description: This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource. */
struct CoverageEligibilityResponse_Insurance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system. */
	struct Reference *coverage;
/* description: Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates. */
	boolean inforce;
/* description: The term of the benefits documented in this response. */
	struct Period *benefitPeriod;
/* description: Benefits and optionally current balances, and authorization details by category or service. */
	int item_count;
	struct CoverageEligibilityResponse_Item *item;
};
typedef struct CoverageEligibilityResponse_Insurance CoverageEligibilityResponse_Insurance;

/* description: This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource. */
struct CoverageEligibilityResponse_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: This contains the product, service, drug or other billing code for the item. */
	struct CodeableConcept *productOrService;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: The practitioner who is eligible for the provision of the product or service. */
	struct Reference *provider;
/* description: True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage. */
	boolean excluded;
/* description: A short name or tag for the benefit. */
	string name;
/* description: A richer description of the benefit or services covered. */
	string description;
/* description: Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers. */
	struct CodeableConcept *network;
/* description: Indicates if the benefits apply to an individual or to the family. */
	struct CodeableConcept *unit;
/* description: The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'. */
	struct CodeableConcept *term;
/* description: Benefits used to date. */
	int benefit_count;
	struct CoverageEligibilityResponse_Benefit *benefit;
/* description: A boolean flag indicating whether a preauthorization is required prior to actual service delivery. */
	boolean authorizationRequired;
/* description: Codes or comments regarding information or actions associated with the preauthorization. */
	int authorizationSupporting_count;
	struct CodeableConcept *authorizationSupporting;
/* description: A web location for obtaining requirements or descriptive information regarding the preauthorization. */
	uri authorizationUrl;
};
typedef struct CoverageEligibilityResponse_Item CoverageEligibilityResponse_Item;

/* description: This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource. */
struct CoverageEligibilityResponse_Benefit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Classification of benefit being provided. */
	struct CodeableConcept *type;
/* description: The quantity of the benefit which is permitted under the coverage. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number allowedUnsignedInt;
/* description: The quantity of the benefit which is permitted under the coverage. */
/* pattern: ^^[\s\S]+$$ */
	string allowedString;
/* description: The quantity of the benefit which is permitted under the coverage. */
	struct Money *allowedMoney;
/* description: The quantity of the benefit which have been consumed to date. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number usedUnsignedInt;
/* description: The quantity of the benefit which have been consumed to date. */
/* pattern: ^^[\s\S]+$$ */
	string usedString;
/* description: The quantity of the benefit which have been consumed to date. */
	struct Money *usedMoney;
};
typedef struct CoverageEligibilityResponse_Benefit CoverageEligibilityResponse_Benefit;

/* description: This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource. */
struct CoverageEligibilityResponse_Error {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An error code,from a specified code system, which details why the eligibility check could not be performed. */
	struct CodeableConcept *code_;
/* description: A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised. */
	int expression_count;
	string expression;
};
typedef struct CoverageEligibilityResponse_Error CoverageEligibilityResponse_Error;

/* description: Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc. */
struct DetectedIssue {
/* description: This is a DetectedIssue resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier associated with the detected issue record. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Indicates the status of the detected issue. */
	code status;
/* description: A code that classifies the general type of detected issue. */
	int category_count;
	struct CodeableConcept *category;
/* description: Identifies the specific type of issue identified. */
	struct CodeableConcept *code_;
/* description: Indicates the degree of importance associated with the identified issue based on the potential impact on the patient. */
	code severity;
/* description: Indicates the subject whose record the detected issue is associated with. */
	struct Reference *subject;
/* description: The encounter during which this issue was detected. */
	struct Reference *encounter;
/* description: The date or period when the detected issue was initially identified. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string identifiedDateTime;
/* description: The date or period when the detected issue was initially identified. */
	struct Period *identifiedPeriod;
/* description: Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review. */
	struct Reference *author;
/* description: Indicates the resource representing the current activity or proposed activity that is potentially problematic. */
	int implicated_count;
	struct Reference *implicated;
/* description: Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport. */
	int evidence_count;
	struct DetectedIssue_Evidence *evidence;
/* description: A textual explanation of the detected issue. */
	markdown detail;
/* description: The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified. */
	uri reference;
/* description: Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action. */
	int mitigation_count;
	struct DetectedIssue_Mitigation *mitigation;
};
typedef struct DetectedIssue DetectedIssue;

/* description: Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc. */
struct DetectedIssue_Evidence {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A manifestation that led to the recording of this detected issue. */
	int code_count;
	struct CodeableConcept *code_;
/* description: Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport. */
	int detail_count;
	struct Reference *detail;
};
typedef struct DetectedIssue_Evidence DetectedIssue_Evidence;

/* description: Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc. */
struct DetectedIssue_Mitigation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue. */
	struct CodeableConcept *action;
/* description: Indicates when the mitigating action was documented. */
	dateTime date_;
/* description: Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring. */
	struct Reference *author;
/* description: Clinicians may add additional notes or justifications about the mitigation action. For example, patient can have this drug because they have had it before without any issues. Multiple justifications may be provided. */
	int note_count;
	struct Annotation *note;
};
typedef struct DetectedIssue_Mitigation DetectedIssue_Mitigation;

/* description: A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. */
struct Device {
/* description: This is a Device resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique instance identifiers assigned to a device by manufacturers other organizations or owners. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The name used to display by default when the device is referenced. Based on intent of use by the resource creator, this may reflect one of the names in Device.name, or may be another simple name. */
	string displayName;
/* description: The reference to the definition for the device. */
	struct CodeableReference *definition;
/* description: Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold. */
	int udiCarrier_count;
	struct Device_UdiCarrier *udiCarrier;
/* description: The Device record status. This is not the status of the device like availability. */
	code status;
/* description: The availability of the device. */
	struct CodeableConcept *availabilityStatus;
/* description: An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled. */
	struct Identifier *biologicalSourceEvent;
/* description: A name of the manufacturer or entity legally responsible for the device. */
	string manufacturer;
/* description: The date and time when the device was manufactured. */
	dateTime manufactureDate;
/* description: The date and time beyond which this device is no longer valid or should not be used (if applicable). */
	dateTime expirationDate;
/* description: Lot number assigned by the manufacturer. */
	string lotNumber;
/* description: The serial number assigned by the organization when the device was manufactured. */
	string serialNumber;
/* description: This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition. */
	int name_count;
	struct Device_Name *name;
/* description: The manufacturer's model number for the device. */
	string modelNumber;
/* description: The part number or catalog number of the device. */
	string partNumber;
/* description: Devices may be associated with one or more categories. */
	int category_count;
	struct CodeableConcept *category;
/* description: The kind or type of device. A device instance may have more than one type - in which case those are the types that apply to the specific instance of the device. */
	int type_count;
	struct CodeableConcept *type;
/* description: The actual design of the device or software version running on the device. */
	int version_count;
	struct Device_Version *version;
/* description: Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards. */
	int conformsTo_count;
	struct Device_ConformsTo *conformsTo;
/* description: Static or essentially fixed characteristics or features of the device (e.g., time or timing attributes, resolution, accuracy, intended use or instructions for use, and physical attributes) that are not otherwise captured in more specific attributes. */
	int property_count;
	struct Device_Property *property;
/* description: The designated condition for performing a task with the device. */
	struct CodeableConcept *mode;
/* description: The series of occurrences that repeats during the operation of the device. */
	struct Count *cycle;
/* description: A measurement of time during the device's operation (e.g., days, hours, mins, etc.). */
	struct Duration *duration;
/* description: An organization that is responsible for the provision and ongoing maintenance of the device. */
	struct Reference *owner;
/* description: Contact details for an organization or a particular human that is responsible for the device. */
	int contact_count;
	struct ContactPoint *contact;
/* description: The place where the device can be found. */
	struct Reference *location;
/* description: A network address on which the device may be contacted directly. */
	uri url_;
/* description: Technical endpoints providing access to services provided by the device defined at this resource. */
	int endpoint_count;
	struct Reference *endpoint;
/* description: The linked device acting as a communication controller, data collector, translator, or concentrator for the current device (e.g., mobile phone application that relays a blood pressure device's data). */
	int gateway_count;
	struct CodeableReference *gateway;
/* description: Descriptive information, usage information or implantation information that is not captured in an existing element. */
	int note_count;
	struct Annotation *note;
/* description: Provides additional safety characteristics about a medical device.  For example devices containing latex. */
	int safety_count;
	struct CodeableConcept *safety;
/* description: The higher level or encompassing device that this device is a logical part of. */
	struct Reference *parent;
};
typedef struct Device Device;

/* description: A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. */
struct Device_UdiCarrier {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device. */
	string deviceIdentifier;
/* description: Organization that is charged with issuing UDIs for devices. For example, the US FDA issuers include: 
1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di, 
2) HIBCC: http://hl7.org/fhir/NamingSystem/hibcc-diI, 
3) ICCBBA for blood containers: http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
4) ICCBA for other devices: http://hl7.org/fhir/NamingSystem/iccbba-other-di # Informationsstelle für Arzneispezialitäten (IFA GmbH) (EU only): http://hl7.org/fhir/NamingSystem/ifa-gmbh-di. */
	uri issuer;
/* description: The identity of the authoritative source for UDI generation within a jurisdiction. All UDIs are globally unique within a single namespace with the appropriate repository uri as the system. For example, UDIs of devices managed in the U.S. by the FDA, the value is http://hl7.org/fhir/NamingSystem/us-fda-udi or in the European Union by the European Commission http://hl7.org/fhir/NamingSystem/eu-ec-udi. */
	uri jurisdiction;
/* description: The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded. */
	base64Binary carrierAIDC;
/* description: The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device. */
	string carrierHRF;
/* description: A coded entry to indicate how the data was entered. */
	code entryType;
};
typedef struct Device_UdiCarrier Device_UdiCarrier;

/* description: A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. */
struct Device_Name {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actual name that identifies the device. */
	string value;
/* description: Indicates the kind of name. RegisteredName | UserFriendlyName | PatientReportedName. */
	code type;
/* description: Indicates the default or preferred name to be displayed. */
	boolean display;
};
typedef struct Device_Name Device_Name;

/* description: A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. */
struct Device_Version {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of the device version, e.g. manufacturer, approved, internal. */
	struct CodeableConcept *type;
/* description: The hardware or software module of the device to which the version applies. */
	struct Identifier *component;
/* description: The date the version was installed on the device. */
	dateTime installDate;
/* description: The version text. */
	string value;
};
typedef struct Device_Version Device_Version;

/* description: A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. */
struct Device_ConformsTo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the type of the standard, specification, or formal guidance. */
	struct CodeableConcept *category;
/* description: Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres. */
	struct CodeableConcept *specification;
/* description: Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label. */
	string version;
};
typedef struct Device_ConformsTo Device_ConformsTo;

/* description: A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device. */
struct Device_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code that specifies the property, such as resolution, color, size, being represented. */
	struct CodeableConcept *type;
/* description: The value of the property specified by the associated property.type code. */
	struct Quantity *valueQuantity;
/* description: The value of the property specified by the associated property.type code. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the property specified by the associated property.type code. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the property specified by the associated property.type code. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the property specified by the associated property.type code. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the property specified by the associated property.type code. */
	struct Range *valueRange;
/* description: The value of the property specified by the associated property.type code. */
	struct Attachment *valueAttachment;
};
typedef struct Device_Property Device_Property;

/* description: A record of association or dissociation of a device with a patient. */
struct DeviceAssociation {
/* description: This is a DeviceAssociation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Instance identifier. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Reference to the devices associated with the patient or group. */
	struct Reference *device;
/* description: Describes the relationship between the device and subject. */
	int category_count;
	struct CodeableConcept *category;
/* description: Indicates the state of the Device association. */
	struct CodeableConcept *status;
/* description: The reasons given for the current association status. */
	int statusReason_count;
	struct CodeableConcept *statusReason;
/* description: The individual, group of individuals or device that the device is on or associated with. */
	struct Reference *subject;
/* description: Current anatomical location of the device in/on subject. */
	struct Reference *bodyStructure;
/* description: Begin and end dates and times for the device association. */
	struct Period *period;
/* description: The details about the device when it is in use to describe its operation. */
	int operation_count;
	struct DeviceAssociation_Operation *operation;
};
typedef struct DeviceAssociation DeviceAssociation;

/* description: A record of association or dissociation of a device with a patient. */
struct DeviceAssociation_Operation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Device operational condition corresponding to the association. */
	struct CodeableConcept *status;
/* description: The individual performing the action enabled by the device. */
	int operator_count;
	struct Reference *operator;
/* description: Begin and end dates and times for the device's operation. */
	struct Period *period;
};
typedef struct DeviceAssociation_Operation DeviceAssociation_Operation;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition {
/* description: This is a DeviceDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Additional information to describe the device. */
	markdown description;
/* description: Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold. */
	int udiDeviceIdentifier_count;
	struct DeviceDefinition_UdiDeviceIdentifier *udiDeviceIdentifier;
/* description: Identifier associated with the regulatory documentation (certificates, technical documentation, post-market surveillance documentation and reports) of a set of device models sharing the same intended purpose, risk class and essential design and manufacturing characteristics. One example is the Basic UDI-DI in Europe. */
	int regulatoryIdentifier_count;
	struct DeviceDefinition_RegulatoryIdentifier *regulatoryIdentifier;
/* description: The part number or catalog number of the device. */
	string partNumber;
/* description: A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction. */
	struct Reference *manufacturer;
/* description: The name or names of the device as given by the manufacturer. */
	int deviceName_count;
	struct DeviceDefinition_DeviceName *deviceName;
/* description: The model number for the device for example as defined by the manufacturer or labeler, or other agency. */
	string modelNumber;
/* description: What kind of device or device system this is. */
	int classification_count;
	struct DeviceDefinition_Classification *classification;
/* description: Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards. */
	int conformsTo_count;
	struct DeviceDefinition_ConformsTo *conformsTo;
/* description: A device that is part (for example a component) of the present device. */
	int hasPart_count;
	struct DeviceDefinition_HasPart *hasPart;
/* description: Information about the packaging of the device, i.e. how the device is packaged. */
	int packaging_count;
	struct DeviceDefinition_Packaging *packaging;
/* description: The version of the device or software. */
	int version_count;
	struct DeviceDefinition_Version *version;
/* description: Safety characteristics of the device. */
	int safety_count;
	struct CodeableConcept *safety;
/* description: Shelf Life and storage information. */
	int shelfLifeStorage_count;
	struct ProductShelfLife *shelfLifeStorage;
/* description: Language code for the human-readable text strings produced by the device (all supported). */
	int languageCode_count;
	struct CodeableConcept *languageCode;
/* description: Static or essentially fixed characteristics or features of this kind of device that are otherwise not captured in more specific attributes, e.g., time or timing attributes, resolution, accuracy, and physical attributes. */
	int property_count;
	struct DeviceDefinition_Property *property;
/* description: An organization that is responsible for the provision and ongoing maintenance of the device. */
	struct Reference *owner;
/* description: Contact details for an organization or a particular human that is responsible for the device. */
	int contact_count;
	struct ContactPoint *contact;
/* description: An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device. */
	int link_count;
	struct DeviceDefinition_Link *link;
/* description: Descriptive information, usage information or implantation information that is not captured in an existing element. */
	int note_count;
	struct Annotation *note;
/* description: A substance used to create the material(s) of which the device is made. */
	int material_count;
	struct DeviceDefinition_Material *material;
/* description: Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label. */
	int productionIdentifierInUDI_count;
	code productionIdentifierInUDI;
/* description: Information aimed at providing directions for the usage of this model of device. */
	struct DeviceDefinition_Guideline *guideline;
/* description: Tracking of latest field safety corrective action. */
	struct DeviceDefinition_CorrectiveAction *correctiveAction;
/* description: Billing code or reference associated with the device. */
	int chargeItem_count;
	struct DeviceDefinition_ChargeItem *chargeItem;
};
typedef struct DeviceDefinition DeviceDefinition;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_UdiDeviceIdentifier {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier. */
	string deviceIdentifier;
/* description: The organization that assigns the identifier algorithm. */
	uri issuer;
/* description: The jurisdiction to which the deviceIdentifier applies. */
	uri jurisdiction;
/* description: Indicates where and when the device is available on the market. */
	int marketDistribution_count;
	struct DeviceDefinition_MarketDistribution *marketDistribution;
};
typedef struct DeviceDefinition_UdiDeviceIdentifier DeviceDefinition_UdiDeviceIdentifier;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_MarketDistribution {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Begin and end dates for the commercial distribution of the device. */
	struct Period *marketPeriod;
/* description: National state or territory to which the marketDistribution recers, typically where the device is commercialized. */
	uri subJurisdiction;
};
typedef struct DeviceDefinition_MarketDistribution DeviceDefinition_MarketDistribution;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_RegulatoryIdentifier {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of identifier itself. */
	code type;
/* description: The identifier itself. */
	string deviceIdentifier;
/* description: The organization that issued this identifier. */
	uri issuer;
/* description: The jurisdiction to which the deviceIdentifier applies. */
	uri jurisdiction;
};
typedef struct DeviceDefinition_RegulatoryIdentifier DeviceDefinition_RegulatoryIdentifier;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_DeviceName {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other. */
	string name;
/* description: The type of deviceName.
RegisteredName | UserFriendlyName | PatientReportedName. */
	code type;
};
typedef struct DeviceDefinition_DeviceName DeviceDefinition_DeviceName;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Classification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A classification or risk class of the device model. */
	struct CodeableConcept *type;
/* description: Further information qualifying this classification of the device model. */
	int justification_count;
	struct RelatedArtifact *justification;
};
typedef struct DeviceDefinition_Classification DeviceDefinition_Classification;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_ConformsTo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the type of the standard, specification, or formal guidance. */
	struct CodeableConcept *category;
/* description: Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres. */
	struct CodeableConcept *specification;
/* description: Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label. */
	int version_count;
	string version;
/* description: Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance. */
	int source_count;
	struct RelatedArtifact *source;
};
typedef struct DeviceDefinition_ConformsTo DeviceDefinition_ConformsTo;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_HasPart {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to the device that is part of the current device. */
	struct Reference *reference;
/* description: Number of instances of the component device in the current device. */
	integer count;
};
typedef struct DeviceDefinition_HasPart DeviceDefinition_HasPart;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Packaging {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The business identifier of the packaged medication. */
	struct Identifier *identifier;
/* description: A code that defines the specific type of packaging. */
	struct CodeableConcept *type;
/* description: The number of items contained in the package (devices or sub-packages). */
	integer count;
/* description: An organization that distributes the packaged device. */
	int distributor_count;
	struct DeviceDefinition_Distributor *distributor;
/* description: Unique Device Identifier (UDI) Barcode string on the packaging. */
	int udiDeviceIdentifier_count;
	struct DeviceDefinition_UdiDeviceIdentifier *udiDeviceIdentifier;
/* description: Allows packages within packages. */
	int packaging_count;
	struct DeviceDefinition_Packaging *packaging;
};
typedef struct DeviceDefinition_Packaging DeviceDefinition_Packaging;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Distributor {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distributor's human-readable name. */
	string name;
/* description: Distributor as an Organization resource. */
	int organizationReference_count;
	struct Reference *organizationReference;
};
typedef struct DeviceDefinition_Distributor DeviceDefinition_Distributor;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Version {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of the device version, e.g. manufacturer, approved, internal. */
	struct CodeableConcept *type;
/* description: The hardware or software module of the device to which the version applies. */
	struct Identifier *component;
/* description: The version text. */
	string value;
};
typedef struct DeviceDefinition_Version DeviceDefinition_Version;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code that specifies the property such as a resolution or color being represented. */
	struct CodeableConcept *type;
/* description: The value of the property specified by the associated property.type code. */
	struct Quantity *valueQuantity;
/* description: The value of the property specified by the associated property.type code. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the property specified by the associated property.type code. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the property specified by the associated property.type code. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the property specified by the associated property.type code. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the property specified by the associated property.type code. */
	struct Range *valueRange;
/* description: The value of the property specified by the associated property.type code. */
	struct Attachment *valueAttachment;
};
typedef struct DeviceDefinition_Property DeviceDefinition_Property;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Link {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type indicates the relationship of the related device to the device instance. */
	struct Coding *relation;
/* description: A reference to the linked device. */
	struct CodeableReference *relatedDevice;
};
typedef struct DeviceDefinition_Link DeviceDefinition_Link;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Material {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials. */
	struct CodeableConcept *substance;
/* description: Indicates an alternative material of the device. */
	boolean alternate;
/* description: Whether the substance is a known or suspected allergen. */
	boolean allergenicIndicator;
};
typedef struct DeviceDefinition_Material DeviceDefinition_Material;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_Guideline {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The circumstances that form the setting for using the device. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: Detailed written and visual directions for the user on how to use the device. */
	markdown usageInstruction;
/* description: A source of information or reference for this guideline. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: A clinical condition for which the device was designed to be used. */
	int indication_count;
	struct CodeableConcept *indication;
/* description: A specific situation when a device should not be used because it may cause harm. */
	int contraindication_count;
	struct CodeableConcept *contraindication;
/* description: Specific hazard alert information that a user needs to know before using the device. */
	int warning_count;
	struct CodeableConcept *warning;
/* description: A description of the general purpose or medical use of the device or its function. */
	string intendedUse;
};
typedef struct DeviceDefinition_Guideline DeviceDefinition_Guideline;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_CorrectiveAction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether the last corrective action known for this device was a recall. */
	boolean recall;
/* description: The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name. */
	code scope;
/* description: Start and end dates of the  corrective action. */
	struct Period *period;
};
typedef struct DeviceDefinition_CorrectiveAction DeviceDefinition_CorrectiveAction;

/* description: The characteristics, operational status and capabilities of a medical-related component of a medical device. */
struct DeviceDefinition_ChargeItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The code or reference for the charge item. */
	struct CodeableReference *chargeItemCode;
/* description: Coefficient applicable to the billing code. */
	struct Quantity *count;
/* description: A specific time period in which this charge item applies. */
	struct Period *effectivePeriod;
/* description: The context to which this charge item applies. */
	int useContext_count;
	struct UsageContext *useContext;
};
typedef struct DeviceDefinition_ChargeItem DeviceDefinition_ChargeItem;

/* description: A record of dispensation of a device - i.e., assigning a device to a patient, or to a professional for their use. */
struct DeviceDispense {
/* description: This is a DeviceDispense resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for this dispensation. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The order or request that this dispense is fulfilling. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The bigger event that this dispense is a part of. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code specifying the state of the set of dispense events. */
	code status;
/* description: Indicates the reason why a dispense was or was not performed. */
	struct CodeableReference *statusReason;
/* description: Indicates the type of device dispense. */
	int category_count;
	struct CodeableConcept *category;
/* description: Identifies the device being dispensed. This is either a link to a resource representing the details of the device or a simple attribute carrying a code that identifies the device from a known list of devices. */
	struct CodeableReference *device;
/* description: A link to a resource representing the person to whom the device is intended. */
	struct Reference *subject;
/* description: Identifies the person who picked up the device or the person or location where the device was delivered.  This may be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location. */
	struct Reference *receiver;
/* description: The encounter that establishes the context for this event. */
	struct Reference *encounter;
/* description: Additional information that supports the device being dispensed. */
	int supportingInformation_count;
	struct Reference *supportingInformation;
/* description: Indicates who or what performed the event. */
	int performer_count;
	struct DeviceDispense_Performer *performer;
/* description: The principal physical location where the dispense was performed. */
	struct Reference *location;
/* description: Indicates the type of dispensing event that is performed. */
	struct CodeableConcept *type;
/* description: The number of devices that have been dispensed. */
	struct Quantity *quantity;
/* description: The time when the dispensed product was packaged and reviewed. */
	dateTime preparedDate;
/* description: The time the dispensed product was made available to the patient or their representative. */
	dateTime whenHandedOver;
/* description: Identification of the facility/location where the device was /should be shipped to, as part of the dispense process. */
	struct Reference *destination;
/* description: Extra information about the dispense that could not be conveyed in the other attributes. */
	int note_count;
	struct Annotation *note;
/* description: The full representation of the instructions. */
	markdown usageInstruction;
/* description: A summary of the events of interest that have occurred, such as when the dispense was verified. */
	int eventHistory_count;
	struct Reference *eventHistory;
};
typedef struct DeviceDispense DeviceDispense;

/* description: A record of dispensation of a device - i.e., assigning a device to a patient, or to a professional for their use. */
struct DeviceDispense_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker. */
	struct CodeableConcept *function;
/* description: The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the device. */
	struct Reference *actor;
};
typedef struct DeviceDispense_Performer DeviceDispense_Performer;

/* description: Describes a measurement, calculation or setting capability of a device. */
struct DeviceMetric {
/* description: This is a DeviceMetric resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Instance identifiers assigned to a device, by the device or gateway software, manufacturers, other organizations or owners. For example, handle ID. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc. */
	struct CodeableConcept *type;
/* description: Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc. */
	struct CodeableConcept *unit;
/* description: Describes the link to the Device.  This is also known as a channel device. */
	struct Reference *device;
/* description: Indicates current operational state of the device. For example: On, Off, Standby, etc. */
	code operationalStatus;
/* description: The preferred color associated with the metric (e.g., display color). This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth; the metrics are displayed in different characteristic colors, such as HR in blue, BP in green, and PR and SpO2 in magenta. */
	code color;
/* description: Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation. */
	code category;
/* description: The frequency at which the metric is taken or recorded. Devices measure metrics at a wide range of frequencies; for example, an ECG might sample measurements in the millisecond range, while an NIBP might trigger only once an hour. Less often, the measurementFrequency may be based on a unit other than time, such as distance (e.g. for a measuring wheel). The update period may be different than the measurement frequency, if the device does not update the published observed value with the same frequency as it was measured. */
	struct Quantity *measurementFrequency;
/* description: Describes the calibrations that have been performed or that are required to be performed. */
	int calibration_count;
	struct DeviceMetric_Calibration *calibration;
};
typedef struct DeviceMetric DeviceMetric;

/* description: Describes a measurement, calculation or setting capability of a device. */
struct DeviceMetric_Calibration {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the type of the calibration method. */
	code type;
/* description: Describes the state of the calibration. */
	code state;
/* description: Describes the time last calibration has been performed. */
	instant time_;
};
typedef struct DeviceMetric_Calibration DeviceMetric_Calibration;

/* description: Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. */
struct DeviceRequest {
/* description: This is a DeviceRequest resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers assigned to this order by the orderer or by the receiver. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: Plan/proposal/order fulfilled by this request. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The request takes the place of the referenced completed or terminated request(s). */
	int replaces_count;
	struct Reference *replaces;
/* description: A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time. */
	struct Identifier *groupIdentifier;
/* description: The status of the request. */
	code status;
/* description: Whether the request is a proposal, plan, an original order or a reflex order. */
	code intent;
/* description: Indicates how quickly the request should be addressed with respect to other requests. */
	code priority;
/* description: If true, indicates that the provider is asking for the patient to either stop using or to not start using the specified device or category of devices. For example, the patient has undergone surgery and the provider is indicating that the patient should not wear contact lenses. */
	boolean doNotPerform;
/* description: The details of the device to be used. */
	struct CodeableReference *code_;
/* description: The number of devices to be provided. */
	integer quantity;
/* description: Specific parameters for the ordered item.  For example, the prism value for lenses. */
	int parameter_count;
	struct DeviceRequest_Parameter *parameter;
/* description: The patient who will use the device. */
	struct Reference *subject;
/* description: An encounter that provides additional context in which this request is made. */
	struct Reference *encounter;
/* description: The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013". */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013". */
	struct Period *occurrencePeriod;
/* description: The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013". */
	struct Timing *occurrenceTiming;
/* description: When the request transitioned to being actionable. */
	dateTime authoredOn;
/* description: The individual or entity who initiated the request and has responsibility for its activation. */
	struct Reference *requester;
/* description: The desired individual or entity to provide the device to the subject of the request (e.g., patient, location). */
	struct CodeableReference *performer;
/* description: Reason or justification for the use of this device. */
	int reason_count;
	struct CodeableReference *reason;
/* description: This status is to indicate whether the request is a PRN or may be given as needed. */
	boolean asNeeded;
/* description: The reason for using the device. */
	struct CodeableConcept *asNeededFor;
/* description: Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service. */
	int insurance_count;
	struct Reference *insurance;
/* description: Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site). */
	int supportingInfo_count;
	struct Reference *supportingInfo;
/* description: Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement. */
	int note_count;
	struct Annotation *note;
/* description: Key events in the history of the request. */
	int relevantHistory_count;
	struct Reference *relevantHistory;
};
typedef struct DeviceRequest DeviceRequest;

/* description: Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker. */
struct DeviceRequest_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code or string that identifies the device detail being asserted. */
	struct CodeableConcept *code_;
/* description: The value of the device detail. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the device detail. */
	struct Quantity *valueQuantity;
/* description: The value of the device detail. */
	struct Range *valueRange;
/* description: The value of the device detail. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
};
typedef struct DeviceRequest_Parameter DeviceRequest_Parameter;

/* description: A record of a device being used by a patient where the record is the result of a report from the patient or a clinician. */
struct DeviceUsage {
/* description: This is a DeviceUsage resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An external identifier for this statement such as an IRI. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan, proposal or order that is fulfilled in whole or in part by this DeviceUsage. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed. */
	code status;
/* description: This attribute indicates a category for the statement - The device statement may be made in an inpatient or outpatient settting (inpatient | outpatient | community | patientspecified). */
	int category_count;
	struct CodeableConcept *category;
/* description: The patient who used the device. */
	struct Reference *patient;
/* description: Allows linking the DeviceUsage to the underlying Request, or to other information that supports or is used to derive the DeviceUsage. */
	int derivedFrom_count;
	struct Reference *derivedFrom;
/* description: The encounter or episode of care that establishes the context for this device use statement. */
	struct Reference *context;
/* description: How often the device was used. */
	struct Timing *timingTiming;
/* description: How often the device was used. */
	struct Period *timingPeriod;
/* description: How often the device was used. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string timingDateTime;
/* description: The time at which the statement was recorded by informationSource. */
	dateTime dateAsserted;
/* description: The status of the device usage, for example always, sometimes, never. This is not the same as the status of the statement. */
	struct CodeableConcept *usageStatus;
/* description: The reason for asserting the usage status - for example forgot, lost, stolen, broken. */
	int usageReason_count;
	struct CodeableConcept *usageReason;
/* description: This indicates how or if the device is being used. */
	struct DeviceUsage_Adherence *adherence;
/* description: Who reported the device was being used by the patient. */
	struct Reference *informationSource;
/* description: Code or Reference to device used. */
	struct CodeableReference *device;
/* description: Reason or justification for the use of the device. A coded concept, or another resource whose existence justifies this DeviceUsage. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Indicates the anotomic location on the subject's body where the device was used ( i.e. the target). */
	struct CodeableReference *bodySite;
/* description: Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement. */
	int note_count;
	struct Annotation *note;
};
typedef struct DeviceUsage DeviceUsage;

/* description: A record of a device being used by a patient where the record is the result of a report from the patient or a clinician. */
struct DeviceUsage_Adherence {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of adherence. */
	struct CodeableConcept *code_;
/* description: Reason for adherence type. */
	int reason_count;
	struct CodeableConcept *reason;
};
typedef struct DeviceUsage_Adherence DeviceUsage_Adherence;

/* description: The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances. */
struct DiagnosticReport {
/* description: This is a DiagnosticReport resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers assigned to this report by the performer or other systems. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Details concerning a service requested. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The status of the diagnostic report. */
	code status;
/* description: A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes. */
	int category_count;
	struct CodeableConcept *category;
/* description: A code or name that describes this diagnostic report. */
	struct CodeableConcept *code_;
/* description: The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources. */
	struct Reference *subject;
/* description: The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about. */
	struct Reference *encounter;
/* description: The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string effectiveDateTime;
/* description: The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself. */
	struct Period *effectivePeriod;
/* description: The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified. */
	instant issued;
/* description: The diagnostic service that is responsible for issuing the report. */
	int performer_count;
	struct Reference *performer;
/* description: The practitioner or organization that is responsible for the report's conclusions and interpretations. */
	int resultsInterpreter_count;
	struct Reference *resultsInterpreter;
/* description: Details about the specimens on which this diagnostic report is based. */
	int specimen_count;
	struct Reference *specimen;
/* description: [Observations](observation.html)  that are part of this diagnostic report. */
	int result_count;
	struct Reference *result;
/* description: Comments about the diagnostic report. */
	int note_count;
	struct Annotation *note;
/* description: One or more links to full details of any study performed during the diagnostic investigation. An ImagingStudy might comprise a set of radiologic images obtained via a procedure that are analyzed as a group. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images. A GenomicStudy might comprise one or more analyses, each serving a specific purpose. These analyses may vary in method (e.g., karyotyping, CNV, or SNV detection), performer, software, devices used, or regions targeted. */
	int study_count;
	struct Reference *study;
/* description: This backbone element contains supporting information that was used in the creation of the report not included in the results already included in the report. */
	int supportingInfo_count;
	struct DiagnosticReport_SupportingInfo *supportingInfo;
/* description: A list of key images or data associated with this report. The images or data are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest). */
	int media_count;
	struct DiagnosticReport_Media *media;
/* description: Reference to a Composition resource instance that provides structure for organizing the contents of the DiagnosticReport. */
	struct Reference *composition;
/* description: Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report. */
	markdown conclusion;
/* description: One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report. */
	int conclusionCode_count;
	struct CodeableConcept *conclusionCode;
/* description: Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent. */
	int presentedForm_count;
	struct Attachment *presentedForm;
};
typedef struct DiagnosticReport DiagnosticReport;

/* description: The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances. */
struct DiagnosticReport_SupportingInfo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The code value for the role of the supporting information in the diagnostic report. */
	struct CodeableConcept *type;
/* description: The reference for the supporting information in the diagnostic report. */
	struct Reference *reference;
};
typedef struct DiagnosticReport_SupportingInfo DiagnosticReport_SupportingInfo;

/* description: The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances. */
struct DiagnosticReport_Media {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A comment about the image or data. Typically, this is used to provide an explanation for why the image or data is included, or to draw the viewer's attention to important features. */
	string comment;
/* description: Reference to the image or data source. */
	struct Reference *link;
};
typedef struct DiagnosticReport_Media DiagnosticReport_Media;

/* description: A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this "document" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference. */
struct DocumentReference {
/* description: This is a DocumentReference resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Other business identifiers associated with the document, including version independent identifiers. */
	int identifier_count;
	struct Identifier *identifier;
/* description: An explicitly assigned identifier of a variation of the content in the DocumentReference. */
	string version;
/* description: A procedure that is fulfilled in whole or in part by the creation of this media. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The status of this document reference. */
	code status;
/* description: The status of the underlying document. */
	code docStatus;
/* description: Imaging modality used. This may include both acquisition and non-acquisition modalities. */
	int modality_count;
	struct CodeableConcept *modality;
/* description: Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced. */
	struct CodeableConcept *type;
/* description: A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type. */
	int category_count;
	struct CodeableConcept *category;
/* description: Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). */
	struct Reference *subject;
/* description: Describes the clinical encounter or type of care that the document content is associated with. */
	int context_count;
	struct Reference *context;
/* description: This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act. */
	int event_count;
	struct CodeableReference *event;
/* description: The anatomic structures included in the document. */
	int bodySite_count;
	struct CodeableReference *bodySite;
/* description: The kind of facility where the patient was seen. */
	struct CodeableConcept *facilityType;
/* description: This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty. */
	struct CodeableConcept *practiceSetting;
/* description: The time period over which the service that is described by the document was provided. */
	struct Period *period;
/* description: When the document reference was created. */
	instant date_;
/* description: Identifies who is responsible for adding the information to the document. */
	int author_count;
	struct Reference *author;
/* description: A participant who has authenticated the accuracy of the document. */
	int attester_count;
	struct DocumentReference_Attester *attester;
/* description: Identifies the organization or group who is responsible for ongoing maintenance of and access to the document. */
	struct Reference *custodian;
/* description: Relationships that this document has with other document references that already exist. */
	int relatesTo_count;
	struct DocumentReference_RelatesTo *relatesTo;
/* description: Human-readable description of the source document. */
	markdown description;
/* description: A set of Security-Tag codes specifying the level of privacy/security of the Document found at DocumentReference.content.attachment.url. Note that DocumentReference.meta.security contains the security labels of the data elements in DocumentReference, while DocumentReference.securityLabel contains the security labels for the document the reference refers to. The distinction recognizes that the document may contain sensitive information, while the DocumentReference is metadata about the document and thus might not be as sensitive as the document. For example: a psychotherapy episode may contain highly sensitive information, while the metadata may simply indicate that some episode happened. */
	int securityLabel_count;
	struct CodeableConcept *securityLabel;
/* description: The document and format referenced.  If there are multiple content element repetitions, these must all represent the same document in different format, or attachment metadata. */
	int content_count;
	struct DocumentReference_Content *content;
};
typedef struct DocumentReference DocumentReference;

/* description: A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this "document" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference. */
struct DocumentReference_Attester {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of attestation the authenticator offers. */
	struct CodeableConcept *mode;
/* description: When the document was attested by the party. */
	dateTime time_;
/* description: Who attested the document in the specified way. */
	struct Reference *party;
};
typedef struct DocumentReference_Attester DocumentReference_Attester;

/* description: A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this "document" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference. */
struct DocumentReference_RelatesTo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of relationship that this document has with anther document. */
	struct CodeableConcept *code_;
/* description: The target document of this relationship. */
	struct Reference *target;
};
typedef struct DocumentReference_RelatesTo DocumentReference_RelatesTo;

/* description: A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this "document" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference. */
struct DocumentReference_Content {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The document or URL of the document along with critical metadata to prove content has integrity. */
	struct Attachment *attachment;
/* description: An identifier of the document constraints, encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType. */
	int profile_count;
	struct DocumentReference_Profile *profile;
};
typedef struct DocumentReference_Content DocumentReference_Content;

/* description: A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this "document" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference. */
struct DocumentReference_Profile {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code|uri|canonical. */
	struct Coding *valueCoding;
/* description: Code|uri|canonical. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: Code|uri|canonical. */
/* pattern: ^\S*$ */
	string valueCanonical;
};
typedef struct DocumentReference_Profile DocumentReference_Profile;

/* description: An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities. */
struct Encounter {
/* description: This is a Encounter resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier(s) by which this encounter is known. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The current state of the encounter (not the state of the patient within the encounter - that is subjectState). */
	code status;
/* description: Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations. */
	int class_count;
	struct CodeableConcept *class;
/* description: Indicates the urgency of the encounter. */
	struct CodeableConcept *priority;
/* description: Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation). */
	int type_count;
	struct CodeableConcept *type;
/* description: Broad categorization of the service that is to be provided (e.g. cardiology). */
	int serviceType_count;
	struct CodeableReference *serviceType;
/* description: The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam. */
	struct Reference *subject;
/* description: The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status. */
	struct CodeableConcept *subjectStatus;
/* description: Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years). */
	int episodeOfCare_count;
	struct Reference *episodeOfCare;
/* description: The request this encounter satisfies (e.g. incoming referral or procedure request). */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The group(s) of individuals, organizations that are allocated to participate in this encounter. The participants backbone will record the actuals of when these individuals participated during the encounter. */
	int careTeam_count;
	struct Reference *careTeam;
/* description: Another Encounter of which this encounter is a part of (administratively or in time). */
	struct Reference *partOf;
/* description: The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the colonoscopy example on the Encounter examples tab. */
	struct Reference *serviceProvider;
/* description: The list of people responsible for providing the service. */
	int participant_count;
	struct Encounter_Participant *participant;
/* description: The appointment that scheduled this encounter. */
	int appointment_count;
	struct Reference *appointment;
/* description: Connection details of a virtual service (e.g. conference call). */
	int virtualService_count;
	struct VirtualServiceDetail *virtualService;
/* description: The actual start and end time of the encounter. */
	struct Period *actualPeriod;
/* description: The planned start date/time (or admission date) of the encounter. */
	dateTime plannedStartDate;
/* description: The planned end date/time (or discharge date) of the encounter. */
	dateTime plannedEndDate;
/* description: Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.When missing it is the time in between the start and end values. */
	struct Duration *length;
/* description: The list of medical reasons that are expected to be addressed during the episode of care. */
	int reason_count;
	struct Encounter_Reason *reason;
/* description: The list of diagnosis relevant to this encounter. */
	int diagnosis_count;
	struct Encounter_Diagnosis *diagnosis;
/* description: The set of accounts that may be used for billing for this Encounter. */
	int account_count;
	struct Reference *account;
/* description: Diet preferences reported by the patient. */
	int dietPreference_count;
	struct CodeableConcept *dietPreference;
/* description: Any special requests that have been made for this encounter, such as the provision of specific equipment or other things. */
	int specialArrangement_count;
	struct CodeableConcept *specialArrangement;
/* description: Special courtesies that may be provided to the patient during the encounter (VIP, board member, professional courtesy). */
	int specialCourtesy_count;
	struct CodeableConcept *specialCourtesy;
/* description: Details about the stay during which a healthcare service is provided.This does not describe the event of admitting the patient, but rather any information that is relevant from the time of admittance until the time of discharge. */
	struct Encounter_Admission *admission;
/* description: List of locations where  the patient has been during this encounter. */
	int location_count;
	struct Encounter_Location *location;
};
typedef struct Encounter Encounter;

/* description: An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities. */
struct Encounter_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Role of participant in encounter. */
	int type_count;
	struct CodeableConcept *type;
/* description: The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period. */
	struct Period *period;
/* description: Person involved in the encounter, the patient/group is also included here to indicate that the patient was actually participating in the encounter. Not including the patient here covers use cases such as a case meeting between practitioners about a patient - non contact times. */
	struct Reference *actor;
};
typedef struct Encounter_Participant Encounter_Participant;

/* description: An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities. */
struct Encounter_Reason {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening). */
	int use_count;
	struct CodeableConcept *use;
/* description: Reason the encounter takes place, expressed as a code or a reference to another resource. For admissions, this can be used for a coded admission diagnosis. */
	int value_count;
	struct CodeableReference *value;
};
typedef struct Encounter_Reason Encounter_Reason;

/* description: An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities. */
struct Encounter_Diagnosis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The coded diagnosis or a reference to a Condition (with other resources referenced in the evidence.detail), the use property will indicate the purpose of this specific diagnosis. */
	int condition_count;
	struct CodeableReference *condition;
/* description: Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …). */
	int use_count;
	struct CodeableConcept *use;
};
typedef struct Encounter_Diagnosis Encounter_Diagnosis;

/* description: An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities. */
struct Encounter_Admission {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Pre-admission identifier. */
	struct Identifier *preAdmissionIdentifier;
/* description: The location/organization from which the patient came before admission. */
	struct Reference *origin;
/* description: From where patient was admitted (physician referral, transfer). */
	struct CodeableConcept *admitSource;
/* description: Indicates that this encounter is directly related to a prior admission, often because the conditions addressed in the prior admission were not fully addressed. */
	struct CodeableConcept *reAdmission;
/* description: Location/organization to which the patient is discharged. */
	struct Reference *destination;
/* description: Category or kind of location after discharge. */
	struct CodeableConcept *dischargeDisposition;
};
typedef struct Encounter_Admission Encounter_Admission;

/* description: An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities. */
struct Encounter_Location {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The location where the encounter takes place. */
	struct Reference *location;
/* description: The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time. */
	code status;
/* description: This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query. */
	struct CodeableConcept *form;
/* description: Time period during which the patient was present at the location. */
	struct Period *period;
};
typedef struct Encounter_Location Encounter_Location;

/* description: A record of significant events/milestones key data throughout the history of an Encounter, often tracked for specific purposes such as billing. */
struct EncounterHistory {
/* description: This is a EncounterHistory resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Encounter associated with this set of historic values. */
	struct Reference *encounter;
/* description: Identifier(s) by which this encounter is known. */
	int identifier_count;
	struct Identifier *identifier;
/* description: planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown. */
	code status;
/* description: Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations. */
	struct CodeableConcept *class;
/* description: Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation). */
	int type_count;
	struct CodeableConcept *type;
/* description: Broad categorization of the service that is to be provided (e.g. cardiology). */
	int serviceType_count;
	struct CodeableReference *serviceType;
/* description: The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam. */
	struct Reference *subject;
/* description: The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status. */
	struct CodeableConcept *subjectStatus;
/* description: The start and end time associated with this set of values associated with the encounter, may be different to the planned times for various reasons. */
	struct Period *actualPeriod;
/* description: The planned start date/time (or admission date) of the encounter. */
	dateTime plannedStartDate;
/* description: The planned end date/time (or discharge date) of the encounter. */
	dateTime plannedEndDate;
/* description: Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.When missing it is the time in between the start and end values. */
	struct Duration *length;
/* description: The location of the patient at this point in the encounter, the multiple cardinality permits de-normalizing the levels of the location hierarchy, such as site/ward/room/bed. */
	int location_count;
	struct EncounterHistory_Location *location;
};
typedef struct EncounterHistory EncounterHistory;

/* description: A record of significant events/milestones key data throughout the history of an Encounter, often tracked for specific purposes such as billing. */
struct EncounterHistory_Location {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The location where the encounter takes place. */
	struct Reference *location;
/* description: This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query. */
	struct CodeableConcept *form;
};
typedef struct EncounterHistory_Location EncounterHistory_Location;

/* description: The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b, a REST endpoint for another FHIR server, or a s/Mime email address. This may include any security context information. */
struct Endpoint {
/* description: This is a Endpoint resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for the organization that is used to identify the endpoint across multiple disparate systems. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The endpoint status represents whether the endpoint can currently be used for connections or why it can't be used. */
	code status;
/* description: A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook). */
	int connectionType_count;
	struct CodeableConcept *connectionType;
/* description: A friendly name that this endpoint can be referred to with. */
	string name;
/* description: The description of the endpoint and what it is for (typically used as supplemental information in an endpoint directory describing its usage/purpose). */
	string description;
/* description: The type of environment(s) exposed at this endpoint (dev, prod, test, etc.). */
	int environmentType_count;
	struct CodeableConcept *environmentType;
/* description: The organization that provides technical management services for this endpoint.  This would be the organization that acts as the public help desk for when the endpoint is not functioning.  It does NOT necessarily represent the organization who is the steward of data being provided/accepted by the endpoint. */
	struct Reference *managingOrganization;
/* description: Contact details for a human to contact about the endpoint. The primary use of this for system administrator troubleshooting. */
	int contact_count;
	struct ContactPoint *contact;
/* description: The interval during which the endpoint is expected to be operational. */
	struct Period *period;
/* description: The times the endpoint is expected to be available, including transient downtimes and any exceptions. */
	struct Availability *availability;
/* description: The set of payloads that are provided/available at this endpoint. */
	int payload_count;
	struct Endpoint_Payload *payload;
/* description: The uri that describes the actual end-point to connect to. */
	url address;
/* description: Additional headers / information to send as part of the notification. */
	int header_count;
	string header;
};
typedef struct Endpoint Endpoint;

/* description: The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b, a REST endpoint for another FHIR server, or a s/Mime email address. This may include any security context information. */
struct Endpoint_Payload {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The payload type describes the acceptable content that can be communicated on the endpoint. */
	int type_count;
	struct CodeableConcept *type;
/* description: The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType). */
	int mimeType_count;
	code mimeType;
/* description: The FHIR profile that is expected at this endpoint. It describes the resources that are handled, or even simply which resource types -e.g. Vital Sign Observations or QuestionnaireResponse.The `profileUri` may be used when a FHIR Structure Definition is not available/appropriate. */
	int profileCanonical_count;
	canonical profileCanonical;
/* description: The profile (as a uri) that is expected at this endpoint when not represented using a FHIR profile.e.g. CDA Template ID expressed as an OID (in the Uri). */
	int profileUri_count;
	uri profileUri;
};
typedef struct Endpoint_Payload Endpoint_Payload;

/* description: This resource provides the insurance enrollment details to the insurer regarding a specified coverage. */
struct EnrollmentRequest {
/* description: This is a EnrollmentRequest resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Response business identifier. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the resource instance. */
	code status;
/* description: The date when this resource was created. */
	dateTime created;
/* description: The Insurer who is target  of the request. */
	struct Reference *insurer;
/* description: The practitioner who is responsible for the services rendered to the patient. */
	struct Reference *provider;
/* description: Patient Resource. */
	struct Reference *candidate;
/* description: Reference to the program or plan identification, underwriter or payor. */
	struct Reference *coverage;
};
typedef struct EnrollmentRequest EnrollmentRequest;

/* description: This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource. */
struct EnrollmentResponse {
/* description: This is a EnrollmentResponse resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Response business identifier. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the resource instance. */
	code status;
/* description: Original request resource reference. */
	struct Reference *request;
/* description: Processing status: error, complete. */
	code outcome;
/* description: A description of the status of the adjudication. */
	string disposition;
/* description: The date when the enclosed suite of services were performed or completed. */
	dateTime created;
/* description: The Insurer who produced this adjudicated response. */
	struct Reference *organization;
/* description: The practitioner who is responsible for the services rendered to the patient. */
	struct Reference *requestProvider;
};
typedef struct EnrollmentResponse EnrollmentResponse;

/* description: An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
struct EpisodeOfCare {
/* description: This is a EpisodeOfCare resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes. */
	int identifier_count;
	struct Identifier *identifier;
/* description: planned | waitlist | active | onhold | finished | cancelled. */
	code status;
/* description: The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource). */
	int statusHistory_count;
	struct EpisodeOfCare_StatusHistory *statusHistory;
/* description: A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care. */
	int type_count;
	struct CodeableConcept *type;
/* description: The list of medical reasons that are expected to be addressed during the episode of care. */
	int reason_count;
	struct EpisodeOfCare_Reason *reason;
/* description: The list of medical conditions that were addressed during the episode of care. */
	int diagnosis_count;
	struct EpisodeOfCare_Diagnosis *diagnosis;
/* description: The patient/group who is the focus of this episode of care. */
	struct Reference *subject;
/* description: The organization that has assumed the specific responsibilities for care coordination, care delivery, or other services for the specified duration. */
	struct Reference *managingOrganization;
/* description: The interval during which the managing organization assumes the defined responsibility. */
	struct Period *period;
/* description: Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals. */
	int referralRequest_count;
	struct Reference *referralRequest;
/* description: The practitioner that is the care manager/care coordinator for this patient. */
	struct Reference *careManager;
/* description: The list of practitioners that may be facilitating this episode of care for specific purposes. */
	int careTeam_count;
	struct Reference *careTeam;
/* description: The set of accounts that may be used for billing for this EpisodeOfCare. */
	int account_count;
	struct Reference *account;
};
typedef struct EpisodeOfCare EpisodeOfCare;

/* description: An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
struct EpisodeOfCare_StatusHistory {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: planned | waitlist | active | onhold | finished | cancelled. */
	code status;
/* description: The period during this EpisodeOfCare that the specific status applied. */
	struct Period *period;
};
typedef struct EpisodeOfCare_StatusHistory EpisodeOfCare_StatusHistory;

/* description: An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
struct EpisodeOfCare_Reason {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening). */
	struct CodeableConcept *use;
/* description: The medical reason that is expected to be addressed during the episode of care, expressed as a text, code or a reference to another resource. */
	int value_count;
	struct CodeableReference *value;
};
typedef struct EpisodeOfCare_Reason EpisodeOfCare_Reason;

/* description: An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time. */
struct EpisodeOfCare_Diagnosis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The medical condition that was addressed during the episode of care, expressed as a text, code or a reference to another resource. */
	int condition_count;
	struct CodeableReference *condition;
/* description: Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …). */
	struct CodeableConcept *use;
};
typedef struct EpisodeOfCare_Diagnosis EpisodeOfCare_Diagnosis;

/* description: The EventDefinition resource provides a reusable description of when a particular event can occur. */
struct EventDefinition {
/* description: This is a EventDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the event definition. */
	string title;
/* description: The status of this event definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the event definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the event definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the event definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the event definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this event definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the event definition content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related resources such as additional documentation, justification, or bibliographic references. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: An explanatory or alternate title for the event definition giving additional information about its content. */
	string subtitle;
/* description: A code or group definition that describes the intended subject of the event definition. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: A code or group definition that describes the intended subject of the event definition. */
	struct Reference *subjectReference;
/* description: A detailed description of how the event definition is used from a clinical perspective. */
	markdown usage;
/* description: The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met. */
	int trigger_count;
	struct TriggerDefinition *trigger;
};
typedef struct EventDefinition EventDefinition;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence {
/* description: This is a Evidence resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this summary when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the summary when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the summary author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the evidence. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the summary. */
	string title;
/* description: The status of this summary. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the summary was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the summary changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the evidence. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the evidence from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the {{title}} is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this Evidence is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the Evidence and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Evidence. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the {{title}} content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual, organization, or device primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individiual, organization, or device primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individiual, organization, or device primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individiual, organization, or device responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Link or citation to artifact associated with the summary. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: Citation Resource or display of suggested citation for this evidence. */
	struct Reference *citeAsReference;
/* description: Citation Resource or display of suggested citation for this evidence. */
/* pattern: ^^[\s\S]+$$ */
	string citeAsMarkdown;
/* description: Declarative description of the Evidence. */
	markdown assertion;
/* description: Footnotes and/or explanatory notes. */
	int note_count;
	struct Annotation *note;
/* description: Evidence variable such as population, exposure, or outcome. */
	int variableDefinition_count;
	struct Evidence_VariableDefinition *variableDefinition;
/* description: The method to combine studies. */
	struct CodeableConcept *synthesisType;
/* description: The design of the study that produced this evidence. The design is described with any number of study design characteristics. */
	int studyDesign_count;
	struct CodeableConcept *studyDesign;
/* description: Values and parameters for a single statistic. */
	int statistic_count;
	struct Evidence_Statistic *statistic;
/* description: Assessment of certainty, confidence in the estimates, or quality of the evidence. */
	int certainty_count;
	struct Evidence_Certainty *certainty;
};
typedef struct Evidence Evidence;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence_VariableDefinition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A text description or summary of the variable. */
	markdown description;
/* description: Footnotes and/or explanatory notes. */
	int note_count;
	struct Annotation *note;
/* description: Classification of the role of the variable. */
	code variableRole;
/* description: Sub-classification of the role of the variable. */
	struct CodeableConcept *roleSubtype;
/* description: The reference value used for comparison. */
	string comparatorCategory;
/* description: Definition of the actual variable related to the statistic(s). */
	struct Reference *observed;
/* description: Definition of the intended variable related to the Evidence. */
	struct Reference *intended;
/* description: Indication of quality of match between intended variable to actual variable. */
	struct CodeableConcept *directnessMatch;
};
typedef struct Evidence_VariableDefinition Evidence_VariableDefinition;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence_Statistic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A description of the content value of the statistic. */
	markdown description;
/* description: Footnotes and/or explanatory notes. */
	int note_count;
	struct Annotation *note;
/* description: Type of statistic, e.g., relative risk. */
	struct CodeableConcept *statisticType;
/* description: When the measured variable is handled categorically, the category element is used to define which category the statistic is reporting. */
	struct CodeableConcept *category;
/* description: Statistic value. */
	struct Quantity *quantity;
/* description: The number of events associated with the statistic, where the unit of analysis is different from numberAffected, sampleSize.knownDataCount and sampleSize.numberOfParticipants. */
	unsignedInt numberOfEvents;
/* description: The number of participants affected where the unit of analysis is the same as sampleSize.knownDataCount and sampleSize.numberOfParticipants. */
	unsignedInt numberAffected;
/* description: Number of samples in the statistic. */
	struct Evidence_SampleSize *sampleSize;
/* description: A statistical attribute of the statistic such as a measure of heterogeneity. */
	int attributeEstimate_count;
	struct Evidence_AttributeEstimate *attributeEstimate;
/* description: A component of the method to generate the statistic. */
	int modelCharacteristic_count;
	struct Evidence_ModelCharacteristic *modelCharacteristic;
};
typedef struct Evidence_Statistic Evidence_Statistic;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence_SampleSize {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Human-readable summary of population sample size. */
	markdown description;
/* description: Footnote or explanatory note about the sample size. */
	int note_count;
	struct Annotation *note;
/* description: Number of participants in the population. */
	unsignedInt numberOfStudies;
/* description: A human-readable string to clarify or explain concepts about the sample size. */
	unsignedInt numberOfParticipants;
/* description: Number of participants with known results for measured variables. */
	unsignedInt knownDataCount;
};
typedef struct Evidence_SampleSize Evidence_SampleSize;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence_AttributeEstimate {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Human-readable summary of the estimate. */
	markdown description;
/* description: Footnote or explanatory note about the estimate. */
	int note_count;
	struct Annotation *note;
/* description: The type of attribute estimate, e.g., confidence interval or p value. */
	struct CodeableConcept *type;
/* description: The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure. */
	struct Quantity *quantity;
/* description: Use 95 for a 95% confidence interval. */
	decimal level;
/* description: Lower bound of confidence interval. */
	struct Range *range;
/* description: A nested attribute estimate; which is the attribute estimate of an attribute estimate. */
	int attributeEstimate_count;
	struct Evidence_AttributeEstimate *attributeEstimate;
};
typedef struct Evidence_AttributeEstimate Evidence_AttributeEstimate;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence_ModelCharacteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: When this characteristic is used. */
	struct CodeableConcept *conditionCodeableConcept;
/* description: When this characteristic is used. */
	struct Expression *conditionExpression;
/* description: Description of a component of the method to generate the statistic. */
	struct CodeableConcept *code_;
/* description: Further specification of the value of the component of the method to generate the statistic. */
	struct Quantity *valueQuantity;
/* description: Further specification of the value of the component of the method to generate the statistic. */
	struct Range *valueRange;
/* description: Further specification of the value of the component of the method to generate the statistic. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The plan for analysis. */
	boolean intended;
/* description: The analysis that was applied. */
	boolean applied;
/* description: A variable adjusted for in the adjusted analysis. */
	int variable_count;
	struct Evidence_Variable *variable;
/* description: An attribute of the statistic used as a model characteristic. */
	int attributeEstimate_count;
	struct Evidence_AttributeEstimate *attributeEstimate;
/* description: Model component. */
	int modelCharacteristic_count;
	struct Evidence_ModelCharacteristic *modelCharacteristic;
};
typedef struct Evidence_ModelCharacteristic Evidence_ModelCharacteristic;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence_Variable {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Description of the variable. */
	struct Reference *variableDefinition;
/* description: How the variable is classified for use in adjusted analysis. */
	code handling;
/* description: Description for grouping of ordinal or polychotomous variables. */
	int valueCategory_count;
	struct CodeableConcept *valueCategory;
/* description: Discrete value for grouping of ordinal or polychotomous variables. */
	int valueQuantity_count;
	struct Quantity *valueQuantity;
/* description: Range of values for grouping of ordinal or polychotomous variables. */
	int valueRange_count;
	struct Range *valueRange;
};
typedef struct Evidence_Variable Evidence_Variable;

/* description: The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence. */
struct Evidence_Certainty {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Textual description of certainty. */
	markdown description;
/* description: Footnotes and/or explanatory notes. */
	int note_count;
	struct Annotation *note;
/* description: Aspect of certainty being rated. */
	struct CodeableConcept *type;
/* description: Assessment or judgement of the aspect. */
	struct CodeableConcept *rating;
/* description: Individual or group who did the rating. */
	string rater;
/* description: A domain or subdomain of certainty. */
	int subcomponent_count;
	struct Evidence_Certainty *subcomponent;
};
typedef struct Evidence_Certainty Evidence_Certainty;

/* description: The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts. */
struct EvidenceReport {
/* description: This is a EvidenceReport resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this EvidenceReport when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this EvidenceReport when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the {{title}} when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the {{title}} author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence without additional knowledge.  (See the versionAlgorithm element.) */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the {{title}}. This name should be usable as an identifier for the resource by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the {{title}}. */
	string title;
/* description: The status of this summary. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this {{title}} is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the {{title}} was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the {{title}} changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the evidence report. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the {{title}} from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence report instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the {{title}} is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this {{title}} is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the {{title}} content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual, organization, or device primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individiual, organization, or device primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individiual, organization, or device primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individiual, organization, or device responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Link, description or reference to artifact associated with the report. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: A formal identifier that is used to identify things closely related to this EvidenceReport. */
	int relatedIdentifier_count;
	struct Identifier *relatedIdentifier;
/* description: Citation Resource or display of suggested citation for this report. */
	struct Reference *citeAsReference;
/* description: Citation Resource or display of suggested citation for this report. */
/* pattern: ^^[\s\S]+$$ */
	string citeAsMarkdown;
/* description: Specifies the kind of report, such as grouping of classifiers, search results, or human-compiled expression. */
	struct CodeableConcept *type;
/* description: Used for footnotes and annotations. */
	int note_count;
	struct Annotation *note;
/* description: Specifies the subject or focus of the report. Answers "What is this report about?". */
	struct EvidenceReport_Subject *subject;
/* description: Relationships that this composition has with other compositions or documents that already exist. */
	int relatesTo_count;
	struct EvidenceReport_RelatesTo *relatesTo;
/* description: The root of the sections that make up the composition. */
	int section_count;
	struct EvidenceReport_Section *section;
};
typedef struct EvidenceReport EvidenceReport;

/* description: The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts. */
struct EvidenceReport_Subject {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Characteristic. */
	int characteristic_count;
	struct EvidenceReport_Characteristic *characteristic;
/* description: Used for general notes and annotations not coded elsewhere. */
	int note_count;
	struct Annotation *note;
};
typedef struct EvidenceReport_Subject EvidenceReport_Subject;

/* description: The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts. */
struct EvidenceReport_Characteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Characteristic code. */
	struct CodeableConcept *code_;
/* description: Characteristic value. */
	struct Reference *valueReference;
/* description: Characteristic value. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Characteristic value. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Characteristic value. */
	struct Quantity *valueQuantity;
/* description: Characteristic value. */
	struct Range *valueRange;
/* description: Is used to express not the characteristic. */
	boolean exclude;
/* description: Timeframe for the characteristic. */
	struct Period *period;
};
typedef struct EvidenceReport_Characteristic EvidenceReport_Characteristic;

/* description: The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts. */
struct EvidenceReport_RelatesTo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of relationship that this composition has with anther composition or document. */
	code code_;
/* description: The target composition/document of this relationship. */
	struct EvidenceReport_Target *target;
};
typedef struct EvidenceReport_RelatesTo EvidenceReport_RelatesTo;

/* description: The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts. */
struct EvidenceReport_Target {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Target of the relationship URL. */
	uri url_;
/* description: Target of the relationship Identifier. */
	struct Identifier *identifier;
/* description: Target of the relationship Display. */
	markdown display;
/* description: Target of the relationship Resource reference. */
	struct Reference *resource;
};
typedef struct EvidenceReport_Target EvidenceReport_Target;

/* description: The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts. */
struct EvidenceReport_Section {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents. */
	string title;
/* description: A code identifying the kind of content contained within the section. This should be consistent with the section title. */
	struct CodeableConcept *focus;
/* description: A definitional Resource identifying the kind of content contained within the section. This should be consistent with the section title. */
	struct Reference *focusReference;
/* description: Identifies who is responsible for the information in this section, not necessarily who typed it in. */
	int author_count;
	struct Reference *author;
/* description: A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is peferred to contain sufficient detail to make it acceptable for a human to just read the narrative. */
	struct Narrative *text;
/* description: How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted. */
	code mode;
/* description: Specifies the order applied to the items in the section entries. */
	struct CodeableConcept *orderedBy;
/* description: Specifies any type of classification of the evidence report. */
	int entryClassifier_count;
	struct CodeableConcept *entryClassifier;
/* description: A reference to the actual resource from which the narrative in the section is derived. */
	int entryReference_count;
	struct Reference *entryReference;
/* description: Quantity as content. */
	int entryQuantity_count;
	struct Quantity *entryQuantity;
/* description: If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason. */
	struct CodeableConcept *emptyReason;
/* description: A nested sub-section within this section. */
	int section_count;
	struct EvidenceReport_Section *section;
};
typedef struct EvidenceReport_Section EvidenceReport_Section;

/* description: The EvidenceVariable resource describes an element that knowledge (Evidence) is about. */
struct EvidenceVariable {
/* description: This is a EvidenceVariable resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the evidence variable. */
	string title;
/* description: The status of this evidence variable. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the evidence variable was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the evidence variable. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the evidence variable from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the {{title}} is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this EvidenceVariable is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the resource and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the resource. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization). */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the resource content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, or bibliographic references. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary. */
	string shortTitle;
/* description: A human-readable string to clarify or explain concepts about the resource. */
	int note_count;
	struct Annotation *note;
/* description: True if the actual variable measured, false if a conceptual representation of the intended variable. */
	boolean actual;
/* description: Defines the variable with a concept and/or Reference. */
	struct CodeableReference *definition;
/* description: The method of handling in statistical analysis. */
	code handling;
/* description: A grouping for ordinal or polychotomous variables. */
	int category_count;
	struct EvidenceVariable_Category *category;
};
typedef struct EvidenceVariable EvidenceVariable;

/* description: The EvidenceVariable resource describes an element that knowledge (Evidence) is about. */
struct EvidenceVariable_Category {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Description of the grouping. */
	string name;
/* description: Definition of the grouping. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Definition of the grouping. */
	struct Quantity *valueQuantity;
/* description: Definition of the grouping. */
	struct Range *valueRange;
/* description: Definition of the grouping. */
	struct Reference *valueReference;
};
typedef struct EvidenceVariable_Category EvidenceVariable_Category;

/* description: Example of workflow instance. */
struct ExampleScenario {
/* description: This is a ExampleScenario resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: Temporarily retained for tooling purposes. */
	string name;
/* description: A short, descriptive, user-friendly title for the ExampleScenario. */
	string title;
/* description: The status of this example scenario. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the example scenario was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition'). */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the example scenario. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the ExampleScenario from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the example scenario is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario. */
	markdown purpose;
/* description: A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: A system or person who shares or receives an instance within the scenario. */
	int actor_count;
	struct ExampleScenario_Actor *actor;
/* description: A single data collection that is shared as part of the scenario. */
	int instance_count;
	struct ExampleScenario_Instance *instance;
/* description: A group of operations that represents a significant step within a scenario. */
	int process_count;
	struct ExampleScenario_Process *process;
};
typedef struct ExampleScenario ExampleScenario;

/* description: Example of workflow instance. */
struct ExampleScenario_Actor {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique string within the scenario that is used to reference the actor. */
	string key;
/* description: The category of actor - person or system. */
	code type;
/* description: The human-readable name for the actor used when rendering the scenario. */
	string title;
/* description: An explanation of who/what the actor is and its role in the scenario. */
	markdown description;
};
typedef struct ExampleScenario_Actor ExampleScenario_Actor;

/* description: Example of workflow instance. */
struct ExampleScenario_Instance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique string within the scenario that is used to reference the instance. */
	string key;
/* description: A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of. */
	struct Coding *structureType;
/* description: Conveys the version of the data structure instantiated.  I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with. */
	string structureVersion;
/* description: Refers to a profile, template or other ruleset the instance adheres to. */
/* pattern: ^\S*$ */
	string structureProfileCanonical;
/* description: Refers to a profile, template or other ruleset the instance adheres to. */
/* pattern: ^\S*$ */
	string structureProfileUri;
/* description: A short descriptive label the instance to be used in tables or diagrams. */
	string title;
/* description: An explanation of what the instance contains and what it's for. */
	markdown description;
/* description: Points to an instance (typically an example) that shows the data that would corespond to this instance. */
	struct Reference *content;
/* description: Represents the instance as it was at a specific time-point. */
	int version_count;
	struct ExampleScenario_Version *version;
/* description: References to other instances that can be found within this instance (e.g. the observations contained in a bundle). */
	int containedInstance_count;
	struct ExampleScenario_ContainedInstance *containedInstance;
};
typedef struct ExampleScenario_Instance ExampleScenario_Instance;

/* description: Example of workflow instance. */
struct ExampleScenario_Version {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique string within the instance that is used to reference the version of the instance. */
	string key;
/* description: A short descriptive label the version to be used in tables or diagrams. */
	string title;
/* description: An explanation of what this specific version of the instance contains and represents. */
	markdown description;
/* description: Points to an instance (typically an example) that shows the data that would flow at this point in the scenario. */
	struct Reference *content;
};
typedef struct ExampleScenario_Version ExampleScenario_Version;

/* description: Example of workflow instance. */
struct ExampleScenario_ContainedInstance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A reference to the key of an instance found within this one. */
	string instanceReference;
/* description: A reference to the key of a specific version of an instance in this instance. */
	string versionReference;
};
typedef struct ExampleScenario_ContainedInstance ExampleScenario_ContainedInstance;

/* description: Example of workflow instance. */
struct ExampleScenario_Process {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A short descriptive label the process to be used in tables or diagrams. */
	string title;
/* description: An explanation of what the process represents and what it does. */
	markdown description;
/* description: Description of the initial state of the actors, environment and data before the process starts. */
	markdown preConditions;
/* description: Description of the final state of the actors, environment and data after the process has been successfully completed. */
	markdown postConditions;
/* description: A significant action that occurs as part of the process. */
	int step_count;
	struct ExampleScenario_Step *step;
};
typedef struct ExampleScenario_Process ExampleScenario_Process;

/* description: Example of workflow instance. */
struct ExampleScenario_Step {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The sequential number of the step, e.g. 1.2.5. */
	string number;
/* description: Indicates that the step is a complex sub-process with its own steps. */
	struct ExampleScenario_Process *process;
/* description: Indicates that the step is defined by a seaparate scenario instance. */
	canonical workflow;
/* description: The step represents a single operation invoked on receiver by sender. */
	struct ExampleScenario_Operation *operation;
/* description: Indicates an alternative step that can be taken instead of the sub-process, scenario or operation.  E.g. to represent non-happy-path/exceptional/atypical circumstances. */
	int alternative_count;
	struct ExampleScenario_Alternative *alternative;
/* description: If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event). */
	boolean pause;
};
typedef struct ExampleScenario_Step ExampleScenario_Step;

/* description: Example of workflow instance. */
struct ExampleScenario_Operation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The standardized type of action (FHIR or otherwise). */
	struct Coding *type;
/* description: A short descriptive label the step to be used in tables or diagrams. */
	string title;
/* description: The system that invokes the action/transmits the data. */
	string initiator;
/* description: The system on which the action is invoked/receives the data. */
	string receiver;
/* description: An explanation of what the operation represents and what it does. */
	markdown description;
/* description: If false, the initiator is deactivated right after the operation. */
	boolean initiatorActive;
/* description: If false, the receiver is deactivated right after the operation. */
	boolean receiverActive;
/* description: A reference to the instance that is transmitted from requester to receiver as part of the invocation of the operation. */
	struct ExampleScenario_ContainedInstance *request;
/* description: A reference to the instance that is transmitted from receiver to requester as part of the operation's synchronous response (if any). */
	struct ExampleScenario_ContainedInstance *response;
};
typedef struct ExampleScenario_Operation ExampleScenario_Operation;

/* description: Example of workflow instance. */
struct ExampleScenario_Alternative {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked. */
	string title;
/* description: A human-readable description of the alternative explaining when the alternative should occur rather than the base step. */
	markdown description;
/* description: Indicates the operation, sub-process or scenario that happens if the alternative option is selected. */
	int step_count;
	struct ExampleScenario_Step *step;
};
typedef struct ExampleScenario_Alternative ExampleScenario_Alternative;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit {
/* description: This is a ExplanationOfBenefit resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this explanation of benefit. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The status of the resource instance. */
	code status;
/* description: The category of claim, e.g. oral, pharmacy, vision, institutional, professional. */
	struct CodeableConcept *type;
/* description: A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service. */
	struct CodeableConcept *subType;
/* description: A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided. */
	code use;
/* description: The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought. */
	struct Reference *patient;
/* description: The period for which charges are being submitted. */
	struct Period *billablePeriod;
/* description: The date this resource was created. */
	dateTime created;
/* description: Individual who created the claim, predetermination or preauthorization. */
	struct Reference *enterer;
/* description: The party responsible for authorization, adjudication and reimbursement. */
	struct Reference *insurer;
/* description: The provider which is responsible for the claim, predetermination or preauthorization. */
	struct Reference *provider;
/* description: The provider-required urgency of processing the request. Typical values include: stat, normal deferred. */
	struct CodeableConcept *priority;
/* description: A code to indicate whether and for whom funds are to be reserved for future claims. */
	struct CodeableConcept *fundsReserveRequested;
/* description: A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom. */
	struct CodeableConcept *fundsReserve;
/* description: Other claims which are related to this claim such as prior submissions or claims for related services or for the same event. */
	int related_count;
	struct ExplanationOfBenefit_Related *related;
/* description: Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments. */
	struct Reference *prescription;
/* description: Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products. */
	struct Reference *originalPrescription;
/* description: Information code for an event with a corresponding date or period. */
	int event_count;
	struct ExplanationOfBenefit_Event *event;
/* description: The party to be reimbursed for cost of the products and services according to the terms of the policy. */
	struct ExplanationOfBenefit_Payee *payee;
/* description: The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services. */
	struct Reference *referral;
/* description: Healthcare encounters related to this claim. */
	int encounter_count;
	struct Reference *encounter;
/* description: Facility where the services were provided. */
	struct Reference *facility;
/* description: The business identifier for the instance of the adjudication request: claim predetermination or preauthorization. */
	struct Reference *claim;
/* description: The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response. */
	struct Reference *claimResponse;
/* description: The outcome of the claim, predetermination, or preauthorization processing. */
	code outcome;
/* description: The result of the claim, predetermination, or preauthorization adjudication. */
	struct CodeableConcept *decision;
/* description: A human readable description of the status of the adjudication. */
	string disposition;
/* description: Reference from the Insurer which is used in later communications which refers to this adjudication. */
	int preAuthRef_count;
	string preAuthRef;
/* description: The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided. */
	int preAuthRefPeriod_count;
	struct Period *preAuthRefPeriod;
/* description: A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system. */
	struct CodeableConcept *diagnosisRelatedGroup;
/* description: The members of the team who provided the products and services. */
	int careTeam_count;
	struct ExplanationOfBenefit_CareTeam *careTeam;
/* description: Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. */
	int supportingInfo_count;
	struct ExplanationOfBenefit_SupportingInfo *supportingInfo;
/* description: Information about diagnoses relevant to the claim items. */
	int diagnosis_count;
	struct ExplanationOfBenefit_Diagnosis *diagnosis;
/* description: Procedures performed on the patient relevant to the billing items with the claim. */
	int procedure_count;
	struct ExplanationOfBenefit_Procedure *procedure;
/* description: This indicates the relative order of a series of EOBs related to different coverages for the same suite of services. */
	positiveInt precedence;
/* description: Financial instruments for reimbursement for the health care products and services specified on the claim. */
	int insurance_count;
	struct ExplanationOfBenefit_Insurance *insurance;
/* description: Details of a accident which resulted in injuries which required the products and services listed in the claim. */
	struct ExplanationOfBenefit_Accident *accident;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details. */
	int item_count;
	struct ExplanationOfBenefit_Item *item;
/* description: The first-tier service adjudications for payor added product or service lines. */
	int addItem_count;
	struct ExplanationOfBenefit_AddItem *addItem;
/* description: The adjudication results which are presented at the header level rather than at the line-item or add-item levels. */
	int adjudication_count;
	struct ExplanationOfBenefit_Adjudication *adjudication;
/* description: Categorized monetary totals for the adjudication. */
	int total_count;
	struct ExplanationOfBenefit_Total *total;
/* description: Payment details for the adjudication of the claim. */
	struct ExplanationOfBenefit_Payment *payment;
/* description: A code for the form to be used for printing the content. */
	struct CodeableConcept *formCode;
/* description: The actual form, by reference or inclusion, for printing the content or an EOB. */
	struct Attachment *form;
/* description: A note that describes or explains adjudication results in a human readable form. */
	int processNote_count;
	struct ExplanationOfBenefit_ProcessNote *processNote;
/* description: The term of the benefits documented in this response. */
	struct Period *benefitPeriod;
/* description: Balance by Benefit Category. */
	int benefitBalance_count;
	struct ExplanationOfBenefit_BenefitBalance *benefitBalance;
};
typedef struct ExplanationOfBenefit ExplanationOfBenefit;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Related {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to a related claim. */
	struct Reference *claim;
/* description: A code to convey how the claims are related. */
	struct CodeableConcept *relationship;
/* description: An alternate organizational reference to the case or file to which this particular claim pertains. */
	struct Identifier *reference;
};
typedef struct ExplanationOfBenefit_Related ExplanationOfBenefit_Related;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Event {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A coded event such as when a service is expected or a card printed. */
	struct CodeableConcept *type;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string whenDateTime;
/* description: A date or period in the past or future indicating when the event occurred or is expectd to occur. */
	struct Period *whenPeriod;
};
typedef struct ExplanationOfBenefit_Event ExplanationOfBenefit_Event;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Payee {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of Party to be reimbursed: Subscriber, provider, other. */
	struct CodeableConcept *type;
/* description: Reference to the individual or organization to whom any payment will be made. */
	struct Reference *party;
};
typedef struct ExplanationOfBenefit_Payee ExplanationOfBenefit_Payee;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_CareTeam {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify care team entries. */
	positiveInt sequence;
/* description: Member of the team who provided the product or service. */
	struct Reference *provider;
/* description: The party who is billing and/or responsible for the claimed products or services. */
	boolean responsible;
/* description: The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team. */
	struct CodeableConcept *role;
/* description: The specialization of the practitioner or provider which is applicable for this service. */
	struct CodeableConcept *specialty;
};
typedef struct ExplanationOfBenefit_CareTeam ExplanationOfBenefit_CareTeam;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_SupportingInfo {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify supporting information entries. */
	positiveInt sequence;
/* description: The general class of the information supplied: information; exception; accident, employment; onset, etc. */
	struct CodeableConcept *category;
/* description: System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought. */
	struct CodeableConcept *code_;
/* description: The date when or period to which this information refers. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string timingDate;
/* description: The date when or period to which this information refers. */
	struct Period *timingPeriod;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Quantity *valueQuantity;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Attachment *valueAttachment;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Reference *valueReference;
/* description: Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data. */
	struct Identifier *valueIdentifier;
/* description: Provides the reason in the situation where a reason code is required in addition to the content. */
	struct Coding *reason;
};
typedef struct ExplanationOfBenefit_SupportingInfo ExplanationOfBenefit_SupportingInfo;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Diagnosis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify diagnosis entries. */
	positiveInt sequence;
/* description: The nature of illness or problem in a coded form or as a reference to an external defined Condition. */
	struct CodeableConcept *diagnosisCodeableConcept;
/* description: The nature of illness or problem in a coded form or as a reference to an external defined Condition. */
	struct Reference *diagnosisReference;
/* description: When the condition was observed or the relative ranking. */
	int type_count;
	struct CodeableConcept *type;
/* description: Indication of whether the diagnosis was present on admission to a facility. */
	struct CodeableConcept *onAdmission;
};
typedef struct ExplanationOfBenefit_Diagnosis ExplanationOfBenefit_Diagnosis;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Procedure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify procedure entries. */
	positiveInt sequence;
/* description: When the condition was observed or the relative ranking. */
	int type_count;
	struct CodeableConcept *type;
/* description: Date and optionally time the procedure was performed. */
	dateTime date_;
/* description: The code or reference to a Procedure resource which identifies the clinical intervention performed. */
	struct CodeableConcept *procedureCodeableConcept;
/* description: The code or reference to a Procedure resource which identifies the clinical intervention performed. */
	struct Reference *procedureReference;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
};
typedef struct ExplanationOfBenefit_Procedure ExplanationOfBenefit_Procedure;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Insurance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true. */
	boolean focal;
/* description: Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system. */
	struct Reference *coverage;
/* description: Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization. */
	int preAuthRef_count;
	string preAuthRef;
};
typedef struct ExplanationOfBenefit_Insurance ExplanationOfBenefit_Insurance;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Accident {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Date of an accident event  related to the products and services contained in the claim. */
	date date_;
/* description: The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers. */
	struct CodeableConcept *type;
/* description: The physical location of the accident event. */
	struct Address *locationAddress;
/* description: The physical location of the accident event. */
	struct Reference *locationReference;
};
typedef struct ExplanationOfBenefit_Accident ExplanationOfBenefit_Accident;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify item entries. */
	positiveInt sequence;
/* description: Care team members related to this service or product. */
	int careTeamSequence_count;
	positiveInt careTeamSequence;
/* description: Diagnoses applicable for this service or product. */
	int diagnosisSequence_count;
	positiveInt diagnosisSequence;
/* description: Procedures applicable for this service or product. */
	int procedureSequence_count;
	positiveInt procedureSequence;
/* description: Exceptions, special conditions and supporting information applicable for this service or product. */
	int informationSequence_count;
	positiveInt informationSequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Request or Referral for Goods or Service to be rendered. */
	int request_count;
	struct Reference *request;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The date or dates when the service or product was supplied, performed or completed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string servicedDate;
/* description: The date or dates when the service or product was supplied, performed or completed. */
	struct Period *servicedPeriod;
/* description: Where the product or service was provided. */
	struct CodeableConcept *locationCodeableConcept;
/* description: Where the product or service was provided. */
	struct Address *locationAddress;
/* description: Where the product or service was provided. */
	struct Reference *locationReference;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
/* description: Physical location where the service is performed or applies. */
	int bodySite_count;
	struct ExplanationOfBenefit_BodySite *bodySite;
/* description: Healthcare encounters related to this claim. */
	int encounter_count;
	struct Reference *encounter;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ExplanationOfBenefit_ReviewOutcome *reviewOutcome;
/* description: If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item. */
	int adjudication_count;
	struct ExplanationOfBenefit_Adjudication *adjudication;
/* description: Second-tier of goods and services. */
	int detail_count;
	struct ExplanationOfBenefit_Detail *detail;
};
typedef struct ExplanationOfBenefit_Item ExplanationOfBenefit_Item;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_BodySite {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Physical service site on the patient (limb, tooth, etc.). */
	int site_count;
	struct CodeableReference *site;
/* description: A region or surface of the bodySite, e.g. limb region or tooth surface(s). */
	int subSite_count;
	struct CodeableConcept *subSite;
};
typedef struct ExplanationOfBenefit_BodySite ExplanationOfBenefit_BodySite;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_ReviewOutcome {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The result of the claim, predetermination, or preauthorization adjudication. */
	struct CodeableConcept *decision;
/* description: The reasons for the result of the claim, predetermination, or preauthorization adjudication. */
	int reason_count;
	struct CodeableConcept *reason;
/* description: Reference from the Insurer which is used in later communications which refers to this adjudication. */
	string preAuthRef;
/* description: The time frame during which this authorization is effective. */
	struct Period *preAuthPeriod;
};
typedef struct ExplanationOfBenefit_ReviewOutcome ExplanationOfBenefit_ReviewOutcome;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Adjudication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in-aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item. */
	struct CodeableConcept *category;
/* description: A code supporting the understanding of the adjudication result and explaining variance from expected amount. */
	struct CodeableConcept *reason;
/* description: Monetary amount associated with the category. */
	struct Money *amount;
/* description: A non-monetary value associated with the category. Mutually exclusive to the amount element above. */
	struct Quantity *quantity;
};
typedef struct ExplanationOfBenefit_Adjudication ExplanationOfBenefit_Adjudication;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Detail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items. */
	positiveInt sequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ExplanationOfBenefit_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ExplanationOfBenefit_Adjudication *adjudication;
/* description: Third-tier of goods and services. */
	int subDetail_count;
	struct ExplanationOfBenefit_SubDetail *subDetail;
};
typedef struct ExplanationOfBenefit_Detail ExplanationOfBenefit_Detail;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_SubDetail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items. */
	positiveInt sequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the line item.detail.subDetail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Unique Device Identifiers associated with this line item. */
	int udi_count;
	struct Reference *udi;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ExplanationOfBenefit_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ExplanationOfBenefit_Adjudication *adjudication;
};
typedef struct ExplanationOfBenefit_SubDetail ExplanationOfBenefit_SubDetail;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_AddItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Claim items which this service line is intended to replace. */
	int itemSequence_count;
	positiveInt itemSequence;
/* description: The sequence number of the details within the claim item which this line is intended to replace. */
	int detailSequence_count;
	positiveInt detailSequence;
/* description: The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace. */
	int subDetailSequence_count;
	positiveInt subDetailSequence;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The providers who are authorized for the services rendered to the patient. */
	int provider_count;
	struct Reference *provider;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Request or Referral for Goods or Service to be rendered. */
	int request_count;
	struct Reference *request;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: Identifies the program under which this may be recovered. */
	int programCode_count;
	struct CodeableConcept *programCode;
/* description: The date or dates when the service or product was supplied, performed or completed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string servicedDate;
/* description: The date or dates when the service or product was supplied, performed or completed. */
	struct Period *servicedPeriod;
/* description: Where the product or service was provided. */
	struct CodeableConcept *locationCodeableConcept;
/* description: Where the product or service was provided. */
	struct Address *locationAddress;
/* description: Where the product or service was provided. */
	struct Reference *locationReference;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: Physical location where the service is performed or applies. */
	int bodySite_count;
	struct ExplanationOfBenefit_BodySite1 *bodySite;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ExplanationOfBenefit_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ExplanationOfBenefit_Adjudication *adjudication;
/* description: The second-tier service adjudications for payor added services. */
	int detail_count;
	struct ExplanationOfBenefit_Detail1 *detail;
};
typedef struct ExplanationOfBenefit_AddItem ExplanationOfBenefit_AddItem;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_BodySite1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Physical service site on the patient (limb, tooth, etc.). */
	int site_count;
	struct CodeableReference *site;
/* description: A region or surface of the bodySite, e.g. limb region or tooth surface(s). */
	int subSite_count;
	struct CodeableConcept *subSite;
};
typedef struct ExplanationOfBenefit_BodySite1 ExplanationOfBenefit_BodySite1;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Detail1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ExplanationOfBenefit_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ExplanationOfBenefit_Adjudication *adjudication;
/* description: The third-tier service adjudications for payor added services. */
	int subDetail_count;
	struct ExplanationOfBenefit_SubDetail1 *subDetail;
};
typedef struct ExplanationOfBenefit_Detail1 ExplanationOfBenefit_Detail1;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_SubDetail1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners. */
	int traceNumber_count;
	struct Identifier *traceNumber;
/* description: The type of revenue or cost center providing the product and/or service. */
	struct CodeableConcept *revenue;
/* description: When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used. */
	struct CodeableConcept *productOrService;
/* description: This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims. */
	struct CodeableConcept *productOrServiceEnd;
/* description: Item typification or modifiers codes to convey additional context for the product or service. */
	int modifier_count;
	struct CodeableConcept *modifier;
/* description: The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services. */
	struct Money *patientPaid;
/* description: The number of repetitions of a service or product. */
	struct Quantity *quantity;
/* description: If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group. */
	struct Money *unitPrice;
/* description: A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount. */
	decimal factor;
/* description: The total of taxes applicable for this product or service. */
	struct Money *tax;
/* description: The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor. */
	struct Money *net;
/* description: The numbers associated with notes below which apply to the adjudication of this item. */
	int noteNumber_count;
	positiveInt noteNumber;
/* description: The high-level results of the adjudication if adjudication has been performed. */
	struct ExplanationOfBenefit_ReviewOutcome *reviewOutcome;
/* description: The adjudication results. */
	int adjudication_count;
	struct ExplanationOfBenefit_Adjudication *adjudication;
};
typedef struct ExplanationOfBenefit_SubDetail1 ExplanationOfBenefit_SubDetail1;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Total {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item. */
	struct CodeableConcept *category;
/* description: Monetary total amount associated with the category. */
	struct Money *amount;
};
typedef struct ExplanationOfBenefit_Total ExplanationOfBenefit_Total;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Payment {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether this represents partial or complete payment of the benefits payable. */
	struct CodeableConcept *type;
/* description: Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication. */
	struct Money *adjustment;
/* description: Reason for the payment adjustment. */
	struct CodeableConcept *adjustmentReason;
/* description: Estimated date the payment will be issued or the actual issue date of payment. */
	date date_;
/* description: Benefits payable less any payment adjustment. */
	struct Money *amount;
/* description: Issuer's unique identifier for the payment instrument. */
	struct Identifier *identifier;
};
typedef struct ExplanationOfBenefit_Payment ExplanationOfBenefit_Payment;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_ProcessNote {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A number to uniquely identify a note entry. */
	positiveInt number;
/* description: The business purpose of the note text. */
	struct CodeableConcept *type;
/* description: The explanation or description associated with the processing. */
	string text;
/* description: A code to define the language used in the text of the note. */
	struct CodeableConcept *language;
};
typedef struct ExplanationOfBenefit_ProcessNote ExplanationOfBenefit_ProcessNote;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_BenefitBalance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code to identify the general type of benefits under which products and services are provided. */
	struct CodeableConcept *category;
/* description: True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage. */
	boolean excluded;
/* description: A short name or tag for the benefit. */
	string name;
/* description: A richer description of the benefit or services covered. */
	string description;
/* description: Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers. */
	struct CodeableConcept *network;
/* description: Indicates if the benefits apply to an individual or to the family. */
	struct CodeableConcept *unit;
/* description: The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'. */
	struct CodeableConcept *term;
/* description: Benefits Used to date. */
	int financial_count;
	struct ExplanationOfBenefit_Financial *financial;
};
typedef struct ExplanationOfBenefit_BenefitBalance ExplanationOfBenefit_BenefitBalance;

/* description: This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided. */
struct ExplanationOfBenefit_Financial {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Classification of benefit being provided. */
	struct CodeableConcept *type;
/* description: The quantity of the benefit which is permitted under the coverage. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number allowedUnsignedInt;
/* description: The quantity of the benefit which is permitted under the coverage. */
/* pattern: ^^[\s\S]+$$ */
	string allowedString;
/* description: The quantity of the benefit which is permitted under the coverage. */
	struct Money *allowedMoney;
/* description: The quantity of the benefit which have been consumed to date. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number usedUnsignedInt;
/* description: The quantity of the benefit which have been consumed to date. */
	struct Money *usedMoney;
};
typedef struct ExplanationOfBenefit_Financial ExplanationOfBenefit_Financial;

/* description: Significant health conditions for a person related to the patient relevant in the context of care for the patient. */
struct FamilyMemberHistory {
/* description: This is a FamilyMemberHistory resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: A code specifying the status of the record of the family history of a specific family member. */
	code status;
/* description: Describes why the family member's history is not available. */
	struct CodeableConcept *dataAbsentReason;
/* description: The person who this history concerns. */
	struct Reference *patient;
/* description: The date (and possibly time) when the family member history was recorded or last updated. */
	dateTime date_;
/* description: Indicates who or what participated in the activities related to the family member history and how they were involved. */
	int participant_count;
	struct FamilyMemberHistory_Participant *participant;
/* description: This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair". */
	string name;
/* description: The type of relationship this person has to the patient (father, mother, brother etc.). */
	struct CodeableConcept *relationship;
/* description: The birth sex of the family member. */
	struct CodeableConcept *sex;
/* description: The actual or approximate date of birth of the relative. */
	struct Period *bornPeriod;
/* description: The actual or approximate date of birth of the relative. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string bornDate;
/* description: The actual or approximate date of birth of the relative. */
/* pattern: ^^[\s\S]+$$ */
	string bornString;
/* description: The age of the relative at the time the family member history is recorded. */
	struct Age *ageAge;
/* description: The age of the relative at the time the family member history is recorded. */
	struct Range *ageRange;
/* description: The age of the relative at the time the family member history is recorded. */
/* pattern: ^^[\s\S]+$$ */
	string ageString;
/* description: If true, indicates that the age value specified is an estimated value. */
	boolean estimatedAge;
/* description: Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record. */
/* pattern: ^true|false$ */
	boolean deceasedBoolean;
/* description: Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record. */
	struct Age *deceasedAge;
/* description: Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record. */
	struct Range *deceasedRange;
/* description: Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string deceasedDate;
/* description: Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record. */
/* pattern: ^^[\s\S]+$$ */
	string deceasedString;
/* description: Describes why the family member history occurred in coded or textual form, or Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event. */
	int reason_count;
	struct CodeableReference *reason;
/* description: This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible. */
	int note_count;
	struct Annotation *note;
/* description: The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition. */
	int condition_count;
	struct FamilyMemberHistory_Condition *condition;
/* description: The significant Procedures (or procedure) that the family member had. This is a repeating section to allow a system to represent more than one procedure per resource, though there is nothing stopping multiple resources - one per procedure. */
	int procedure_count;
	struct FamilyMemberHistory_Procedure *procedure;
};
typedef struct FamilyMemberHistory FamilyMemberHistory;

/* description: Significant health conditions for a person related to the patient relevant in the context of care for the patient. */
struct FamilyMemberHistory_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the actor in the activities related to the family member history. */
	struct CodeableConcept *function;
/* description: Indicates who or what participated in the activities related to the family member history. */
	struct Reference *actor;
};
typedef struct FamilyMemberHistory_Participant FamilyMemberHistory_Participant;

/* description: Significant health conditions for a person related to the patient relevant in the context of care for the patient. */
struct FamilyMemberHistory_Condition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actual condition, allergy, or intolerance specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system. */
	struct CodeableConcept *code_;
/* description: Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation. */
	struct CodeableConcept *outcome;
/* description: This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown. */
	boolean contributedToDeath;
/* description: Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence. */
	struct Age *onsetAge;
/* description: Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence. */
	struct Range *onsetRange;
/* description: Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence. */
	struct Period *onsetPeriod;
/* description: Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence. */
/* pattern: ^^[\s\S]+$$ */
	string onsetString;
/* description: An area where general notes can be placed about this specific condition. */
	int note_count;
	struct Annotation *note;
};
typedef struct FamilyMemberHistory_Condition FamilyMemberHistory_Condition;

/* description: Significant health conditions for a person related to the patient relevant in the context of care for the patient. */
struct FamilyMemberHistory_Procedure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actual procedure specified. Could be a coded procedure or a less specific string depending on how much is known about the procedure and the capabilities of the creating system. */
	struct CodeableConcept *code_;
/* description: Indicates what happened following the procedure. If the procedure resulted in death, deceased date is captured on the relation. */
	struct CodeableConcept *outcome;
/* description: This procedure contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown. */
	boolean contributedToDeath;
/* description: Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
	struct Age *performedAge;
/* description: Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
	struct Range *performedRange;
/* description: Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
	struct Period *performedPeriod;
/* description: Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
/* pattern: ^^[\s\S]+$$ */
	string performedString;
/* description: Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string performedDateTime;
/* description: An area where general notes can be placed about this specific procedure. */
	int note_count;
	struct Annotation *note;
};
typedef struct FamilyMemberHistory_Procedure FamilyMemberHistory_Procedure;

/* description: Prospective warnings of potential issues when providing care to the patient. */
struct Flag {
/* description: This is a Flag resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Supports basic workflow. */
	code status;
/* description: Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context. */
	int category_count;
	struct CodeableConcept *category;
/* description: The coded value or textual component of the flag to display to the user. */
	struct CodeableConcept *code_;
/* description: The patient, related person, location, group, organization, or practitioner etc. this is about record this flag is associated with. */
	struct Reference *subject;
/* description: The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified. */
	struct Period *period;
/* description: This alert is only relevant during the encounter. */
	struct Reference *encounter;
/* description: The person, organization or device that created the flag. */
	struct Reference *author;
/* description: Additional information that may be relevant to the flag, such as why the flag was created or how to guide management of the flag. */
	int supportingInfo_count;
	struct Reference *supportingInfo;
};
typedef struct Flag Flag;

/* description: This resource describes a product or service that is available through a program and includes the conditions and constraints of availability.  All of the information in this resource is specific to the inclusion of the item in the formulary and is not inherent to the item itself. */
struct FormularyItem {
/* description: This is a FormularyItem resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for this formulary item. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A code (or set of codes) that specify the product or service that is identified by this formulary item. */
	struct CodeableConcept *code_;
/* description: The validity about the information of the formulary item and not of the underlying product or service itself. */
	code status;
};
typedef struct FormularyItem FormularyItem;

/* description: A GenomicStudy is a set of analyses performed to analyze and generate genomic data. */
struct GenomicStudy {
/* description: This is a GenomicStudy resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers for this genomic study. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the genomic study. */
	code status;
/* description: The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling. */
	int type_count;
	struct CodeableConcept *type;
/* description: The primary subject of the genomic study. */
	struct Reference *subject;
/* description: The healthcare event with which this genomics study is associated. */
	struct Reference *encounter;
/* description: When the genomic study was started. */
	dateTime startDate;
/* description: Event resources that the genomic study is based on. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Healthcare professional who requested or referred the genomic study. */
	struct Reference *referrer;
/* description: Healthcare professionals who interpreted the genomic study. */
	int interpreter_count;
	struct Reference *interpreter;
/* description: Why the genomic study was performed. */
	int reason_count;
	struct CodeableReference *reason;
/* description: The defined protocol that describes the study. */
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol that describes the study. */
	uri instantiatesUri;
/* description: Comments related to the genomic study. */
	int note_count;
	struct Annotation *note;
/* description: Description of the genomic study. */
	markdown description;
/* description: The details about a specific analysis that was performed in this GenomicStudy. */
	int analysis_count;
	struct GenomicStudy_Analysis *analysis;
};
typedef struct GenomicStudy GenomicStudy;

/* description: A GenomicStudy is a set of analyses performed to analyze and generate genomic data. */
struct GenomicStudy_Analysis {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers for the analysis event. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI). */
	int methodType_count;
	struct CodeableConcept *methodType;
/* description: Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change. */
	int changeType_count;
	struct CodeableConcept *changeType;
/* description: The reference genome build that is used in this analysis. */
	struct CodeableConcept *genomeBuild;
/* description: The defined protocol that describes the analysis. */
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol that describes the analysis. */
	uri instantiatesUri;
/* description: Name of the analysis event (human friendly). */
	string title;
/* description: The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent. */
	int focus_count;
	struct Reference *focus;
/* description: The specimen used in the analysis event. */
	int specimen_count;
	struct Reference *specimen;
/* description: The date of the analysis event. */
	dateTime date_;
/* description: Any notes capture with the analysis event. */
	int note_count;
	struct Annotation *note;
/* description: The protocol that was performed for the analysis event. */
	struct Reference *protocolPerformed;
/* description: The genomic regions to be studied in the analysis (BED file). */
	int regionsStudied_count;
	struct Reference *regionsStudied;
/* description: Genomic regions actually called in the analysis event (BED file). */
	int regionsCalled_count;
	struct Reference *regionsCalled;
/* description: Inputs for the analysis event. */
	int input_count;
	struct GenomicStudy_Input *input;
/* description: Outputs for the analysis event. */
	int output_count;
	struct GenomicStudy_Output *output;
/* description: Performer for the analysis event. */
	int performer_count;
	struct GenomicStudy_Performer *performer;
/* description: Devices used for the analysis (e.g., instruments, software), with settings and parameters. */
	int device_count;
	struct GenomicStudy_Device *device;
};
typedef struct GenomicStudy_Analysis GenomicStudy_Analysis;

/* description: A GenomicStudy is a set of analyses performed to analyze and generate genomic data. */
struct GenomicStudy_Input {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: File containing input data. */
	struct Reference *file;
/* description: Type of input data, e.g., BAM, CRAM, or FASTA. */
	struct CodeableConcept *type;
/* description: The analysis event or other GenomicStudy that generated this input file. */
	struct Identifier *generatedByIdentifier;
/* description: The analysis event or other GenomicStudy that generated this input file. */
	struct Reference *generatedByReference;
};
typedef struct GenomicStudy_Input GenomicStudy_Input;

/* description: A GenomicStudy is a set of analyses performed to analyze and generate genomic data. */
struct GenomicStudy_Output {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: File containing output data. */
	struct Reference *file;
/* description: Type of output data, e.g., VCF, MAF, or BAM. */
	struct CodeableConcept *type;
};
typedef struct GenomicStudy_Output GenomicStudy_Output;

/* description: A GenomicStudy is a set of analyses performed to analyze and generate genomic data. */
struct GenomicStudy_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The organization, healthcare professional, or others who participated in performing this analysis. */
	struct Reference *actor;
/* description: Role of the actor for this analysis. */
	struct CodeableConcept *role;
};
typedef struct GenomicStudy_Performer GenomicStudy_Performer;

/* description: A GenomicStudy is a set of analyses performed to analyze and generate genomic data. */
struct GenomicStudy_Device {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Device used for the analysis. */
	struct Reference *device;
/* description: Specific function for the device used for the analysis. */
	struct CodeableConcept *function;
};
typedef struct GenomicStudy_Device GenomicStudy_Device;

/* description: Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. */
struct Goal {
/* description: This is a Goal resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The state of the goal throughout its lifecycle. */
	code lifecycleStatus;
/* description: Describes the progression, or lack thereof, towards the goal against the target. */
	struct CodeableConcept *achievementStatus;
/* description: Indicates a category the goal falls within. */
	int category_count;
	struct CodeableConcept *category;
/* description: After meeting the goal, ongoing activity is needed to sustain the goal objective. */
	boolean continuous;
/* description: Identifies the mutually agreed level of importance associated with reaching/sustaining the goal. */
	struct CodeableConcept *priority;
/* description: Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding". */
	struct CodeableConcept *description;
/* description: Identifies the patient, group or organization for whom the goal is being established. */
	struct Reference *subject;
/* description: The date or event after which the goal should begin being pursued. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string startDate;
/* description: The date or event after which the goal should begin being pursued. */
	struct CodeableConcept *startCodeableConcept;
/* description: Indicates what should be done by when. */
	int target_count;
	struct Goal_Target *target;
/* description: Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc. */
	date statusDate;
/* description: Captures the reason for the current status. */
	string statusReason;
/* description: Indicates whose goal this is - patient goal, practitioner goal, etc. */
	struct Reference *source;
/* description: The identified conditions and other resources that provide the context for why the goal exists. */
	int addresses_count;
	struct Reference *addresses;
/* description: Any comments related to the goal. */
	int note_count;
	struct Annotation *note;
/* description: Identifies the change (or lack of change) at the point when the status of the goal is assessed. */
	int outcome_count;
	struct CodeableReference *outcome;
};
typedef struct Goal Goal;

/* description: Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc. */
struct Goal_Target {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level. */
	struct CodeableConcept *measure;
/* description: The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value. */
	struct Quantity *detailQuantity;
/* description: The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value. */
	struct Range *detailRange;
/* description: The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value. */
	struct CodeableConcept *detailCodeableConcept;
/* description: The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value. */
/* pattern: ^^[\s\S]+$$ */
	string detailString;
/* description: The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value. */
/* pattern: ^true|false$ */
	boolean detailBoolean;
/* description: The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number detailInteger;
/* description: The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value. */
	struct Ratio *detailRatio;
/* description: Indicates either the date or the duration after start by which the goal should be met. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string dueDate;
/* description: Indicates either the date or the duration after start by which the goal should be met. */
	struct Duration *dueDuration;
};
typedef struct Goal_Target Goal_Target;

/* description: A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
struct GraphDefinition {
/* description: This is a GraphDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this GraphDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the capability statement. */
	string title;
/* description: The status of this graph definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the graph definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the graph definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the graph definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the graph definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this graph definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the graph definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the graph definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The Node at which instances of this graph start. If there is no nominated start, the graph can start at any of the nodes. */
	id start;
/* description: Potential target for the link. */
	int node_count;
	struct GraphDefinition_Node *node;
/* description: Links this graph makes rules about. */
	int link_count;
	struct GraphDefinition_Link *link;
};
typedef struct GraphDefinition GraphDefinition;

/* description: A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
struct GraphDefinition_Node {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Internal ID of node - target for link references. */
	id nodeId;
/* description: Information about why this node is of interest in this graph definition. */
	string description;
/* description: Type of resource this link refers to. */
	code type;
/* description: Profile for the target resource. */
	canonical profile;
};
typedef struct GraphDefinition_Node GraphDefinition_Node;

/* description: A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
struct GraphDefinition_Link {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Information about why this link is of interest in this graph definition. */
	string description;
/* description: Minimum occurrences for this link. */
	integer min;
/* description: Maximum occurrences for this link. */
	string max;
/* description: The source node for this link. */
	id sourceId;
/* description: A FHIRPath expression that identifies one of FHIR References to other resources. */
	string path;
/* description: Which slice (if profiled). */
	string sliceName;
/* description: The target node for this link. */
	id targetId;
/* description: A set of parameters to look up. */
	string params;
/* description: Compartment Consistency Rules. */
	int compartment_count;
	struct GraphDefinition_Compartment *compartment;
};
typedef struct GraphDefinition_Link GraphDefinition_Link;

/* description: A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set. */
struct GraphDefinition_Compartment {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed. */
	code use;
/* description: identical | matching | different | no-rule | custom. */
	code rule;
/* description: Identifies the compartment. */
	code code_;
/* description: Custom rule, as a FHIRPath expression. */
	string expression;
/* description: Documentation for FHIRPath expression. */
	string description;
};
typedef struct GraphDefinition_Compartment GraphDefinition_Compartment;

/* description: Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. */
struct Group {
/* description: This is a Group resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this Group when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Group is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Group is stored on different servers. */
	uri url_;
/* description: Business identifiers assigned to this participant by one of the applications involved.  These identifiers remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the Group when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Group author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence without additional knowledge. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A label assigned to the group for human identification and communication. */
	string name;
/* description: A short, descriptive, user-friendly title for the Group. */
	string title;
/* description: The current state of this Group. */
	code status;
/* description: A Boolean value to indicate that this Group is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the Group was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the Group changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the Group. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: Explanation of what the group represents and how it is intended to be used. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Groups. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the {{title}} is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this Group is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the Group and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Group. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: Identifies the broad classification of the kind of resources the group includes. */
	code type;
/* description: Basis for membership in the Group:

* 'definitional': The Group.characteristics specified are both necessary and sufficient to determine membership. All entities that meet the criteria are considered to be members of the group, whether referenced by the group or not. If members are present, they are individuals that happen to be known as meeting the Group.characteristics. The list cannot be presumed to be complete.
* 'conceptual': The Group.characteristics specified are both necessary and sufficient to determine membership. The 'conceptual' Group is a 'definitional' Group in which the Group.type is not bound to FHIR types.
* 'enumerated': The Group.characteristics are necessary but not sufficient to determine membership. Membership is determined by being listed as one of the Group.member. */
	code membership;
/* description: Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc. */
	struct CodeableConcept *code_;
/* description: A count of the number of resource instances that are part of the group. */
	unsignedInt quantity;
/* description: Entity responsible for defining and maintaining Group characteristics and/or registered members. */
	struct Reference *managingEntity;
/* description: Used to specify how two or more characteristics are combined. */
	code combinationMethod;
/* description: Provides the value of "n" when "at-least" or "at-most" codes are used for combinationMethod. */
	positiveInt combinationThreshold;
/* description: Identifies traits whose presence r absence is shared by members of the group. */
	int characteristic_count;
	struct Group_Characteristic *characteristic;
/* description: Identifies the resource instances that are members of the group. */
	int member_count;
	struct Group_Member *member;
};
typedef struct Group Group;

/* description: Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. */
struct Group_Characteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that identifies the kind of trait being asserted. */
	struct CodeableConcept *code_;
/* description: The value of the trait that holds (or does not hold - see 'exclude') for members of the group. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the trait that holds (or does not hold - see 'exclude') for members of the group. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the trait that holds (or does not hold - see 'exclude') for members of the group. */
	struct Quantity *valueQuantity;
/* description: The value of the trait that holds (or does not hold - see 'exclude') for members of the group. */
	struct Range *valueRange;
/* description: The value of the trait that holds (or does not hold - see 'exclude') for members of the group. */
	struct Reference *valueReference;
/* description: The value of the trait that holds (or does not hold - see 'exclude') for members of the group. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The value of the trait that holds (or does not hold - see 'exclude') for members of the group. */
	struct Expression *valueExpression;
/* description: If true, indicates the characteristic is one that is NOT held by members of the group. */
	boolean exclude;
/* description: A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user. */
	markdown description;
/* description: Method for how the characteristic value was determined. */
	int method_count;
	struct CodeableConcept *method;
/* description: Defines the characteristic (without using type and value) by either a Reference or an Expression. */
	struct Reference *determinedByReference;
/* description: Defines the characteristic (without using type and value) by either a Reference or an Expression. */
	struct Expression *determinedByExpression;
/* description: Defines the reference point for comparison when other than 0. */
	struct CodeableConcept *offset;
/* description: Number of occurrences meeting the characteristic. */
	struct Quantity *instancesQuantity;
/* description: Number of occurrences meeting the characteristic. */
	struct Range *instancesRange;
/* description: Length of time in which the characteristic is met. */
	struct Duration *durationDuration;
/* description: Length of time in which the characteristic is met. */
	struct Range *durationRange;
/* description: The period over which the characteristic is tested; e.g. the patient had an operation during the month of June. */
	struct Period *period;
/* description: Timing in which the characteristic is determined. */
	int timing_count;
	struct RelativeTime *timing;
};
typedef struct Group_Characteristic Group_Characteristic;

/* description: Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization. */
struct Group_Member {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same. */
	struct Reference *entity;
/* description: The period that the member was in the group, if known. */
	struct Period *period;
/* description: A flag to indicate that the member is no longer in the group, but previously may have been a member. */
	boolean inactive;
};
typedef struct Group_Member Group_Member;

/* description: A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken. */
struct GuidanceResponse {
/* description: This is a GuidanceResponse resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario. */
	struct Identifier *requestIdentifier;
/* description: Allows a service to provide  unique, business identifiers for the response. */
	int identifier_count;
	struct Identifier *identifier;
/* description: An identifier, CodeableConcept or canonical reference to the guidance that was requested. */
/* pattern: ^\S*$ */
	string moduleUri;
/* description: An identifier, CodeableConcept or canonical reference to the guidance that was requested. */
/* pattern: ^\S*$ */
	string moduleCanonical;
/* description: An identifier, CodeableConcept or canonical reference to the guidance that was requested. */
	struct CodeableConcept *moduleCodeableConcept;
/* description: The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information. */
	code status;
/* description: The patient for which the request was processed. */
	struct Reference *subject;
/* description: The encounter during which this response was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: Indicates when the guidance response was processed. */
	dateTime occurrenceDateTime;
/* description: Provides a reference to the device that performed the guidance. */
	struct Reference *performer;
/* description: Describes the reason for the guidance response in coded or textual form, or Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Provides a mechanism to communicate additional information about the response. */
	int note_count;
	struct Annotation *note;
/* description: Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element. */
	struct Reference *evaluationMessage;
/* description: The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element. */
	struct Reference *outputParameters;
/* description: The actions, if any, produced by the evaluation of the artifact. */
	int result_count;
	struct Reference *result;
/* description: If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data. */
	int dataRequirement_count;
	struct DataRequirement *dataRequirement;
};
typedef struct GuidanceResponse GuidanceResponse;

/* description: The details of a healthcare service available at a location. */
struct HealthcareService {
/* description: This is a HealthcareService resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: External identifiers for this item. */
	int identifier_count;
	struct Identifier *identifier;
/* description: This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this. */
	boolean active;
/* description: The organization that provides this healthcare service. */
	struct Reference *providedBy;
/* description: When the HealthcareService is representing a specific, schedulable service, the availableIn property can refer to a generic service. */
	int offeredIn_count;
	struct Reference *offeredIn;
/* description: Identifies the broad category of service being performed or delivered. */
	int category_count;
	struct CodeableConcept *category;
/* description: The specific type of service that may be delivered or performed. */
	int type_count;
	struct CodeableConcept *type;
/* description: Collection of specialties handled by the Healthcare service. This is more of a medical term. */
	int specialty_count;
	struct CodeableConcept *specialty;
/* description: The location(s) where this healthcare service may be provided. */
	int location_count;
	struct Reference *location;
/* description: Further description of the service as it would be presented to a consumer while searching. */
	string name;
/* description: Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName. */
	markdown comment;
/* description: Extra details about the service that can't be placed in the other fields. */
	markdown extraDetails;
/* description: If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list. */
	struct Attachment *photo;
/* description: The contact details of communication devices available relevant to the specific HealthcareService. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites. */
	int contact_count;
	struct ExtendedContactDetail *contact;
/* description: The location(s) that this service is available to (not where the service is provided). */
	int coverageArea_count;
	struct Reference *coverageArea;
/* description: The code(s) that detail the conditions under which the healthcare service is available/offered. */
	int serviceProvisionCode_count;
	struct CodeableConcept *serviceProvisionCode;
/* description: Does this service have specific eligibility requirements that need to be met in order to use the service? */
	int eligibility_count;
	struct HealthcareService_Eligibility *eligibility;
/* description: Programs that this service is applicable to. */
	int program_count;
	struct CodeableConcept *program;
/* description: Collection of characteristics (attributes). */
	int characteristic_count;
	struct CodeableConcept *characteristic;
/* description: Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used. */
	int communication_count;
	struct CodeableConcept *communication;
/* description: Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required. */
	int referralMethod_count;
	struct CodeableConcept *referralMethod;
/* description: Indicates whether or not a prospective consumer will require a referral for a particular service at a site to be provided by the Organization. */
	boolean referralRequired;
/* description: Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. */
	boolean appointmentRequired;
/* description: A collection of times that the healthcare service is available. */
	struct Availability *availability;
/* description: Technical endpoints providing access to services operated for the specific healthcare services defined at this resource. */
	int endpoint_count;
	struct Reference *endpoint;
};
typedef struct HealthcareService HealthcareService;

/* description: The details of a healthcare service available at a location. */
struct HealthcareService_Eligibility {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Coded value for the eligibility. */
	struct CodeableConcept *code_;
/* description: Sometimes an eligibility code requires additional data to calculate the eligibility rules. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Sometimes an eligibility code requires additional data to calculate the eligibility rules. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Sometimes an eligibility code requires additional data to calculate the eligibility rules. */
	struct Quantity *valueQuantity;
/* description: Sometimes an eligibility code requires additional data to calculate the eligibility rules. */
	struct Range *valueRange;
/* description: Sometimes an eligibility code requires additional data to calculate the eligibility rules. */
	struct Reference *valueReference;
/* description: Describes the eligibility conditions for the service. */
	markdown comment;
/* description: The period that this eligibility rule is a requirement for this service. */
	markdown period;
};
typedef struct HealthcareService_Eligibility HealthcareService_Eligibility;

/* description: A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource. */
struct ImagingSelection {
/* description: This is a ImagingSelection resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this imaging selection. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The current state of the ImagingSelection resource. This is not the status of any ImagingStudy, ServiceRequest, or Task resources associated with the ImagingSelection. */
	code status;
/* description: The patient, or group of patients, location, device, organization, procedure or practitioner this imaging selection is about and into whose or what record the imaging selection is placed. */
	struct Reference *subject;
/* description: The date and time this imaging selection was created. */
	instant issued;
/* description: Selector of the instances – human or machine. */
	int performer_count;
	struct ImagingSelection_Performer *performer;
/* description: A list of the diagnostic requests that resulted in this imaging selection being performed. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Classifies the imaging selection. */
	int category_count;
	struct CodeableConcept *category;
/* description: Reason for referencing the selected content. */
	struct CodeableConcept *code_;
/* description: The Study Instance UID for the DICOM Study from which the images were selected. */
	id studyUid;
/* description: The imaging study from which the imaging selection is made. */
	int derivedFrom_count;
	struct Reference *derivedFrom;
/* description: The network service providing retrieval access to the selected images, frames, etc. See implementation notes for information about using DICOM endpoints. */
	int endpoint_count;
	struct Reference *endpoint;
/* description: The Series Instance UID for the DICOM Series from which the images were selected. */
	id seriesUid;
/* description: The Series Number for the DICOM Series from which the images were selected. */
	unsignedInt seriesNumber;
/* description: The Frame of Reference UID identifying the coordinate system that conveys spatial and/or temporal information for the selected images or frames. */
	id frameOfReferenceUid;
/* description: The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. */
	struct CodeableReference *bodySite;
/* description: The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus. */
	int focus_count;
	struct Reference *focus;
/* description: Each imaging selection includes one or more selected DICOM SOP instances. */
	int instance_count;
	struct ImagingSelection_Instance *instance;
/* description: Each imaging selection might includes a 3D image region, specified by a region type and a set of 3D coordinates. */
	int imageRegion3D_count;
	struct ImagingSelection_ImageRegion3D *imageRegion3D;
};
typedef struct ImagingSelection ImagingSelection;

/* description: A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource. */
struct ImagingSelection_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the performer. */
	struct CodeableConcept *function;
/* description: Author – human or machine. */
	struct Reference *actor;
};
typedef struct ImagingSelection_Performer ImagingSelection_Performer;

/* description: A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource. */
struct ImagingSelection_Instance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The SOP Instance UID for the selected DICOM instance. */
	id uid;
/* description: The Instance Number for the selected DICOM instance. */
	unsignedInt number;
/* description: The SOP Class UID for the selected DICOM instance. */
	struct Coding *sopClass;
/* description: Selected subset of the SOP Instance. The content and format of the subset item is determined by the SOP Class of the selected instance.
       May be one of:
       - A list of frame numbers selected from a multiframe SOP Instance.
       - A list of Content Item Observation UID values selected from a DICOM SR or other structured document SOP Instance.
       - A list of segment numbers selected from a segmentation SOP Instance.
       - A list of Region of Interest (ROI) numbers selected from a radiotherapy structure set SOP Instance. */
	int subset_count;
	string subset;
/* description: Each imaging selection instance or frame list might includes an image region, specified by a region type and a set of 2D coordinates.
       If the parent imagingSelection.instance contains a subset element of type frame, the image region applies to all frames in the subset list. */
	int imageRegion2D_count;
	struct ImagingSelection_ImageRegion2D *imageRegion2D;
};
typedef struct ImagingSelection_Instance ImagingSelection_Instance;

/* description: A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource. */
struct ImagingSelection_ImageRegion2D {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Specifies the type of image region. */
	code regionType;
/* description: The coordinates describing the image region. Encoded as a set of (column, row) pairs that denote positions in the selected image / frames specified with sub-pixel resolution.
       The origin at the TLHC of the TLHC pixel is 0.0\0.0, the BRHC of the TLHC pixel is 1.0\1.0, and the BRHC of the BRHC pixel is the number of columns\rows in the image / frames. The values must be within the range 0\0 to the number of columns\rows in the image / frames. */
	int coordinate_count;
	decimal coordinate;
};
typedef struct ImagingSelection_ImageRegion2D ImagingSelection_ImageRegion2D;

/* description: A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource. */
struct ImagingSelection_ImageRegion3D {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Specifies the type of image region. */
	code regionType;
/* description: The coordinates describing the image region. Encoded as an ordered set of (x,y,z) triplets (in mm and may be negative) that define a region of interest in the patient-relative Reference Coordinate System defined by ImagingSelection.frameOfReferenceUid element. */
	int coordinate_count;
	decimal coordinate;
};
typedef struct ImagingSelection_ImageRegion3D ImagingSelection_ImageRegion3D;

/* description: Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
struct ImagingStudy {
/* description: This is a ImagingStudy resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers for the ImagingStudy such as DICOM Study Instance UID. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The current state of the ImagingStudy resource. This is not the status of any ServiceRequest or Task resources associated with the ImagingStudy. */
	code status;
/* description: A list of all the distinct values of series.modality. This may include both acquisition and non-acquisition modalities. */
	int modality_count;
	struct CodeableConcept *modality;
/* description: The subject, typically a patient, of the imaging study. */
	struct Reference *subject;
/* description: The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made. */
	struct Reference *encounter;
/* description: Date and time the study started. */
	dateTime started;
/* description: A list of the diagnostic requests that resulted in this imaging study being performed. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A larger event of which this particular ImagingStudy is a component or step.  For example,  an ImagingStudy as part of a procedure. */
	int partOf_count;
	struct Reference *partOf;
/* description: The requesting/referring physician. */
	struct Reference *referrer;
/* description: The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType. */
	int endpoint_count;
	struct Reference *endpoint;
/* description: Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present. */
	unsignedInt numberOfSeries;
/* description: Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present. */
	unsignedInt numberOfInstances;
/* description: This field corresponds to the DICOM Procedure Code Sequence (0008,1032). This is different from the FHIR Procedure resource that may include the ImagingStudy. */
	int procedure_count;
	struct CodeableReference *procedure;
/* description: The principal physical location where the ImagingStudy was performed. */
	struct Reference *location;
/* description: Description of clinical condition indicating why the ImagingStudy was requested, and/or Indicates another resource whose existence justifies this Study. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element. */
	int note_count;
	struct Annotation *note;
/* description: The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed. */
	string description;
/* description: Each study has one or more series of images or other content. */
	int series_count;
	struct ImagingStudy_Series *series;
};
typedef struct ImagingStudy ImagingStudy;

/* description: Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
struct ImagingStudy_Series {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The DICOM Series Instance UID for the series. */
	id uid;
/* description: The numeric identifier of this series in the study. */
	unsignedInt number;
/* description: The distinct modality for this series. This may include both acquisition and non-acquisition modalities. */
	struct CodeableConcept *modality;
/* description: A description of the series. */
	string description;
/* description: Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present. */
	unsignedInt numberOfInstances;
/* description: The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType. */
	int endpoint_count;
	struct Reference *endpoint;
/* description: The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality. */
	struct CodeableReference *bodySite;
/* description: The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite. */
	struct CodeableConcept *laterality;
/* description: The specimen imaged, e.g., for whole slide imaging of a biopsy. */
	int specimen_count;
	struct Reference *specimen;
/* description: The date and time the series was started. */
	dateTime started;
/* description: Indicates who or what performed the series and how they were involved. */
	int performer_count;
	struct ImagingStudy_Performer *performer;
/* description: A single SOP instance within the series, e.g. an image, or presentation state. */
	int instance_count;
	struct ImagingStudy_Instance *instance;
};
typedef struct ImagingStudy_Series ImagingStudy_Series;

/* description: Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
struct ImagingStudy_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the performer in the series. */
	struct CodeableConcept *function;
/* description: Indicates who or what performed the series. */
	struct Reference *actor;
};
typedef struct ImagingStudy_Performer ImagingStudy_Performer;

/* description: Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities. */
struct ImagingStudy_Instance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The DICOM SOP Instance UID for this image or other DICOM content. */
	id uid;
/* description: DICOM instance  type. */
	struct Coding *sopClass;
/* description: The number of instance in the series. */
	unsignedInt number;
/* description: The description of the instance. */
	string title;
};
typedef struct ImagingStudy_Instance ImagingStudy_Instance;

/* description: Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party. */
struct Immunization {
/* description: This is a Immunization resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this immunization record. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan, order or recommendation fulfilled in whole or in part by this immunization. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Indicates the current status of the immunization event. */
	code status;
/* description: Indicates the reason the immunization event was not performed. */
	struct CodeableConcept *statusReason;
/* description: Vaccine that was administered or was to be administered. */
	struct CodeableConcept *vaccineCode;
/* description: An indication of which product was administered to the patient. This is typically a more detailed representation of the concept conveyed by the vaccineCode data element. If a Medication resource is referenced, it may be to a stand-alone resource or a contained resource within the Immunization resource. */
	struct CodeableReference *administeredProduct;
/* description: Name of vaccine manufacturer. */
	struct CodeableReference *manufacturer;
/* description: Lot number of the  vaccine product. */
	string lotNumber;
/* description: Date vaccine batch expires. */
	date expirationDate;
/* description: The patient who either received or did not receive the immunization. */
	struct Reference *patient;
/* description: The visit or admission or other contact between patient and health care provider the immunization was performed as part of. */
	struct Reference *encounter;
/* description: Additional information that is relevant to the immunization (e.g. for a vaccine recipient who is pregnant, the gestational age of the fetus). The reason why a vaccine was given (e.g. occupation, underlying medical condition) should be conveyed in Immunization.reason, not as supporting information. The reason why a vaccine was not given (e.g. contraindication) should be conveyed in Immunization.statusReason, not as supporting information. */
	int supportingInformation_count;
	struct Reference *supportingInformation;
/* description: Date vaccine administered or was to be administered. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: Date vaccine administered or was to be administered. */
/* pattern: ^^[\s\S]+$$ */
	string occurrenceString;
/* description: Indicates whether the data contained in the resource was captured by the individual/organization which was responsible for the administration of the vaccine rather than as 'secondary reported' data documented by a third party. A value of 'true' means this data originated with the individual/organization which was responsible for the administration of the vaccine. */
	boolean primarySource;
/* description: Typically the source of the data when the report of the immunization event is not based on information from the person who administered the vaccine. */
	struct CodeableReference *informationSource;
/* description: The service delivery location where the vaccine administration occurred. */
	struct Reference *location;
/* description: Body site where vaccine was administered. */
	struct CodeableConcept *site;
/* description: The path by which the vaccine product is taken into the body. */
	struct CodeableConcept *route;
/* description: The quantity of vaccine product that was administered. */
	struct Quantity *doseQuantity;
/* description: Indicates who performed the immunization event. */
	int performer_count;
	struct Immunization_Performer *performer;
/* description: Extra information about the immunization that is not conveyed by the other attributes. */
	int note_count;
	struct Annotation *note;
/* description: Describes why the immunization occurred in coded or textual form, or Indicates another resource (Condition, Observation or DiagnosticReport) whose existence justifies this immunization. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent. */
	boolean isSubpotent;
/* description: Reason why a dose is considered to be subpotent. */
	int subpotentReason_count;
	struct CodeableConcept *subpotentReason;
/* description: Indicates a patient's eligibility for a funding program. */
	int programEligibility_count;
	struct Immunization_ProgramEligibility *programEligibility;
/* description: Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered). */
	struct CodeableConcept *fundingSource;
/* description: Categorical data indicating that an adverse event is associated in time to an immunization. */
	int reaction_count;
	struct Immunization_Reaction *reaction;
/* description: The protocol (set of recommendations) being followed by the provider who administered the dose. */
	int protocolApplied_count;
	struct Immunization_ProtocolApplied *protocolApplied;
};
typedef struct Immunization Immunization;

/* description: Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party. */
struct Immunization_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the type of performance (e.g. ordering provider, administering provider, etc.). */
	struct CodeableConcept *function;
/* description: The practitioner or organization who performed the action. */
	struct Reference *actor;
};
typedef struct Immunization_Performer Immunization_Performer;

/* description: Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party. */
struct Immunization_ProgramEligibility {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates which program the patient had their eligility evaluated for. */
	struct CodeableConcept *program;
/* description: Indicates the patient's eligility status for for a specific payment program. */
	struct CodeableConcept *programStatus;
};
typedef struct Immunization_ProgramEligibility Immunization_ProgramEligibility;

/* description: Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party. */
struct Immunization_Reaction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Date of reaction to the immunization. */
	dateTime date_;
/* description: Details of the reaction. */
	struct CodeableReference *manifestation;
/* description: Self-reported indicator. */
	boolean reported;
};
typedef struct Immunization_Reaction Immunization_Reaction;

/* description: Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party. */
struct Immunization_ProtocolApplied {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: One possible path to achieve presumed immunity against a disease - within the context of an authority. */
	string series;
/* description: Indicates the authority who published the protocol (e.g. ACIP) that is being followed. */
	struct Reference *authority;
/* description: The vaccine preventable disease the dose is being administered against. */
	int targetDisease_count;
	struct CodeableConcept *targetDisease;
/* description: Nominal position in a series as intended by the practitioner administering the dose. */
	string doseNumber;
/* description: The recommended number of doses to achieve immunity as intended by the practitioner administering the dose. */
	string seriesDoses;
};
typedef struct Immunization_ProtocolApplied Immunization_ProtocolApplied;

/* description: Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations. */
struct ImmunizationEvaluation {
/* description: This is a ImmunizationEvaluation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this immunization evaluation record. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Indicates the current status of the evaluation of the vaccination administration event. */
	code status;
/* description: The individual for whom the evaluation is being done. */
	struct Reference *patient;
/* description: The date the evaluation of the vaccine administration event was performed. */
	dateTime date_;
/* description: Indicates the authority who published the protocol (e.g. ACIP). */
	struct Reference *authority;
/* description: The vaccine preventable disease the dose is being evaluated against. */
	struct CodeableConcept *targetDisease;
/* description: The vaccine administration event being evaluated. */
	struct Reference *immunizationEvent;
/* description: Indicates if the dose is valid or not valid with respect to the published recommendations. */
	struct CodeableConcept *doseStatus;
/* description: Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations. */
	int doseStatusReason_count;
	struct CodeableConcept *doseStatusReason;
/* description: Additional information about the evaluation. */
	markdown description;
/* description: One possible path to achieve presumed immunity against a disease - within the context of an authority. */
	string series;
/* description: Nominal position in a series as determined by the outcome of the evaluation process. */
	string doseNumber;
/* description: The recommended number of doses to achieve immunity as determined by the outcome of the evaluation process. */
	string seriesDoses;
};
typedef struct ImmunizationEvaluation ImmunizationEvaluation;

/* description: A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification. */
struct ImmunizationRecommendation {
/* description: This is a ImmunizationRecommendation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this particular recommendation record. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The patient the recommendation(s) are for. */
	struct Reference *patient;
/* description: The date the immunization recommendation(s) were created. */
	dateTime date_;
/* description: Indicates the authority who published the protocol (e.g. ACIP). */
	struct Reference *authority;
/* description: Vaccine administration recommendations. */
	int recommendation_count;
	struct ImmunizationRecommendation_Recommendation *recommendation;
};
typedef struct ImmunizationRecommendation ImmunizationRecommendation;

/* description: A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification. */
struct ImmunizationRecommendation_Recommendation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Vaccine(s) or vaccine group that pertain to the recommendation. */
	int vaccineCode_count;
	struct CodeableConcept *vaccineCode;
/* description: The targeted disease for the recommendation. */
	int targetDisease_count;
	struct CodeableConcept *targetDisease;
/* description: Vaccine(s) which should not be used to fulfill the recommendation. */
	int contraindicatedVaccineCode_count;
	struct CodeableConcept *contraindicatedVaccineCode;
/* description: Indicates the patient status with respect to the path to immunity for the target disease. */
	struct CodeableConcept *forecastStatus;
/* description: The reason for the assigned forecast status. */
	int forecastReason_count;
	struct CodeableConcept *forecastReason;
/* description: Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc. */
	int dateCriterion_count;
	struct ImmunizationRecommendation_DateCriterion *dateCriterion;
/* description: Contains the description about the protocol under which the vaccine was administered. */
	markdown description;
/* description: One possible path to achieve presumed immunity against a disease - within the context of an authority. */
	string series;
/* description: Nominal position of the recommended dose in a series as determined by the evaluation and forecasting process (e.g. dose 2 is the next recommended dose). */
	string doseNumber;
/* description: The recommended number of doses to achieve immunity as determined by the evaluation and forecasting process. */
	string seriesDoses;
/* description: Immunization event history and/or evaluation that supports the status and recommendation. */
	int supportingImmunization_count;
	struct Reference *supportingImmunization;
/* description: Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information. */
	int supportingPatientInformation_count;
	struct Reference *supportingPatientInformation;
};
typedef struct ImmunizationRecommendation_Recommendation ImmunizationRecommendation_Recommendation;

/* description: A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification. */
struct ImmunizationRecommendation_DateCriterion {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Date classification of recommendation.  For example, earliest date to give, latest date to give, etc. */
	struct CodeableConcept *code_;
/* description: The date whose meaning is specified by dateCriterion.code. */
	dateTime value;
};
typedef struct ImmunizationRecommendation_DateCriterion ImmunizationRecommendation_DateCriterion;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide {
/* description: This is a ImplementationGuide resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the implementation guide. */
	string title;
/* description: The status of this implementation guide. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the implementation guide was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the implementation guide. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the implementation guide from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the implementation guide is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this implementation guide is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care. */
	id packageId;
/* description: The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'. */
	code license;
/* description: The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version. */
	int fhirVersion_count;
	code fhirVersion;
/* description: Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides. */
	int dependsOn_count;
	struct ImplementationGuide_DependsOn *dependsOn;
/* description: A set of profiles that all resources covered by this implementation guide must conform to. */
	int global_count;
	struct ImplementationGuide_Global *global;
/* description: The information needed by an IG publisher tool to publish the whole implementation guide. */
	struct ImplementationGuide_Definition *definition;
/* description: Information about an assembled implementation guide, created by the publication tooling. */
	struct ImplementationGuide_Manifest *manifest;
};
typedef struct ImplementationGuide ImplementationGuide;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_DependsOn {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A canonical reference to the Implementation guide for the dependency. */
	canonical uri_;
/* description: The NPM package name for the Implementation Guide that this IG depends on. */
	id packageId;
/* description: The version of the IG that is depended on, when the correct version is required to understand the IG correctly. */
	string version;
/* description: A description explaining the nature of the dependency on the listed IG. */
	markdown reason;
};
typedef struct ImplementationGuide_DependsOn ImplementationGuide_DependsOn;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Global {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of resource that all instances must conform to. */
	code type;
/* description: A reference to the profile that all instances must conform to. */
	canonical profile;
};
typedef struct ImplementationGuide_Global ImplementationGuide_Global;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Definition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A logical group of resources. Logical groups can be used when building pages. */
	int grouping_count;
	struct ImplementationGuide_Grouping *grouping;
/* description: A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource. */
	int resource_count;
	struct ImplementationGuide_Resource *resource;
/* description: A page / section in the implementation guide. The root page is the implementation guide home page. */
	struct ImplementationGuide_Page *page;
/* description: A set of parameters that defines how the implementation guide is built. The parameters are defined by the relevant tools that build the implementation guides. */
	int parameter_count;
	struct ImplementationGuide_Parameter *parameter;
/* description: A template for building resources. */
	int template_count;
	struct ImplementationGuide_Template *template;
};
typedef struct ImplementationGuide_Definition ImplementationGuide_Definition;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Grouping {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The human-readable title to display for the package of resources when rendering the implementation guide. */
	string name;
/* description: Human readable text describing the package. */
	markdown description;
};
typedef struct ImplementationGuide_Grouping ImplementationGuide_Grouping;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Resource {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Where this resource is found. */
	struct Reference *reference;
/* description: Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion. */
	int fhirVersion_count;
	code fhirVersion;
/* description: A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name). */
	string name;
/* description: A description of the reason that a resource has been included in the implementation guide. */
	markdown description;
/* description: If true, indicates the resource is an example instance. */
	boolean isExample;
/* description: If present, indicates profile(s) the instance is valid against. */
	int profile_count;
	canonical profile;
/* description: Reference to the id of the grouping this resource appears in. */
	id groupingId;
};
typedef struct ImplementationGuide_Resource ImplementationGuide_Resource;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Page {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the URL or the actual content to provide for the page. */
/* pattern: ^\S*$ */
	string sourceUrl;
/* description: Indicates the URL or the actual content to provide for the page. */
/* pattern: ^^[\s\S]+$$ */
	string sourceString;
/* description: Indicates the URL or the actual content to provide for the page. */
/* pattern: ^^[\s\S]+$$ */
	string sourceMarkdown;
/* description: The url by which the page should be known when published. */
	url name;
/* description: A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc. */
	string title;
/* description: A code that indicates how the page is generated. */
	code generation;
/* description: Nested Pages/Sections under this page. */
	int page_count;
	struct ImplementationGuide_Page *page;
};
typedef struct ImplementationGuide_Page ImplementationGuide_Page;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A tool-specific code that defines the parameter. */
	struct Coding *code_;
/* description: Value for named type. */
	string value;
};
typedef struct ImplementationGuide_Parameter ImplementationGuide_Parameter;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Template {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of template specified. */
	code code_;
/* description: The source location for the template. */
	string source;
/* description: The scope in which the template applies. */
	string scope;
};
typedef struct ImplementationGuide_Template ImplementationGuide_Template;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Manifest {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A pointer to official web page, PDF or other rendering of the implementation guide. */
	url rendering;
/* description: A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource. */
	int resource_count;
	struct ImplementationGuide_Resource1 *resource;
/* description: Information about a page within the IG. */
	int page_count;
	struct ImplementationGuide_Page1 *page;
/* description: Indicates a relative path to an image that exists within the IG. */
	int image_count;
	string image;
/* description: Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG. */
	int other_count;
	string other;
};
typedef struct ImplementationGuide_Manifest ImplementationGuide_Manifest;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Resource1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Where this resource is found. */
	struct Reference *reference;
/* description: If true, indicates the resource is an example instance. */
	boolean isExample;
/* description: If present, indicates profile(s) the instance is valid against. */
	int profile_count;
	canonical profile;
/* description: The relative path for primary page for this resource within the IG. */
	url relativePath;
};
typedef struct ImplementationGuide_Resource1 ImplementationGuide_Resource1;

/* description: A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts. */
struct ImplementationGuide_Page1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Relative path to the page. */
	string name;
/* description: Label for the page intended for human display. */
	string title;
/* description: The name of an anchor available on the page. */
	int anchor_count;
	string anchor;
};
typedef struct ImplementationGuide_Page1 ImplementationGuide_Page1;

/* description: An ingredient of a manufactured item or pharmaceutical product. */
struct Ingredient {
/* description: This is a Ingredient resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. */
	struct Identifier *identifier;
/* description: The status of this ingredient. Enables tracking the life-cycle of the content. */
	code status;
/* description: The product which this ingredient is a constituent part of. */
	int for_count;
	struct Reference *for_;
/* description: A classification of the ingredient identifying its purpose within the product, e.g. active, inactive. */
	struct CodeableConcept *role;
/* description: A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent. */
	int function_count;
	struct CodeableConcept *function;
/* description: A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink. */
	struct CodeableConcept *group;
/* description: If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here. */
	boolean allergenicIndicator;
/* description: A place for providing any notes that are relevant to the component, e.g. removed during process, adjusted for loss on drying. */
	markdown comment;
/* description: The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case. */
	int manufacturer_count;
	struct Ingredient_Manufacturer *manufacturer;
/* description: The substance that comprises this ingredient. */
	struct Ingredient_Substance *substance;
};
typedef struct Ingredient Ingredient;

/* description: An ingredient of a manufactured item or pharmaceutical product. */
struct Ingredient_Manufacturer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role. */
	code role;
/* description: An organization that manufactures this ingredient. */
	struct Reference *manufacturer;
};
typedef struct Ingredient_Manufacturer Ingredient_Manufacturer;

/* description: An ingredient of a manufactured item or pharmaceutical product. */
struct Ingredient_Substance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code or full resource that represents the ingredient's substance. */
	struct CodeableReference *code_;
/* description: The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength. */
	int strength_count;
	struct Ingredient_Strength *strength;
};
typedef struct Ingredient_Substance Ingredient_Substance;

/* description: An ingredient of a manufactured item or pharmaceutical product. */
struct Ingredient_Strength {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg'). */
	struct Ratio *presentationRatio;
/* description: The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg'). */
	struct RatioRange *presentationRatioRange;
/* description: The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg'). */
	struct CodeableConcept *presentationCodeableConcept;
/* description: The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg'). */
	struct Quantity *presentationQuantity;
/* description: A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio. */
	string textPresentation;
/* description: The strength per unitary volume (or mass). */
	struct Ratio *concentrationRatio;
/* description: The strength per unitary volume (or mass). */
	struct RatioRange *concentrationRatioRange;
/* description: The strength per unitary volume (or mass). */
	struct CodeableConcept *concentrationCodeableConcept;
/* description: The strength per unitary volume (or mass). */
	struct Quantity *concentrationQuantity;
/* description: A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio. */
	string textConcentration;
/* description: A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt). */
	struct CodeableConcept *basis;
/* description: For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization. */
	string measurementPoint;
/* description: The country or countries for which the strength range applies. */
	int country_count;
	struct CodeableConcept *country;
/* description: Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed. */
	int referenceStrength_count;
	struct Ingredient_ReferenceStrength *referenceStrength;
};
typedef struct Ingredient_Strength Ingredient_Strength;

/* description: An ingredient of a manufactured item or pharmaceutical product. */
struct Ingredient_ReferenceStrength {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Relevant reference substance. */
	struct CodeableReference *substance;
/* description: Strength expressed in terms of a reference substance. */
	struct Ratio *strengthRatio;
/* description: Strength expressed in terms of a reference substance. */
	struct RatioRange *strengthRatioRange;
/* description: Strength expressed in terms of a reference substance. */
	struct Quantity *strengthQuantity;
/* description: For when strength is measured at a particular point or distance. */
	string measurementPoint;
/* description: The country or countries for which the strength range applies. */
	int country_count;
	struct CodeableConcept *country;
};
typedef struct Ingredient_ReferenceStrength Ingredient_ReferenceStrength;

/* description: Details about an insurance plan. */
struct InsurancePlan {
/* description: This is a InsurancePlan resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers, such as the plan ID and/or group ID associated with the insurance plan. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Type of plan. For example, "Platinum" or "High Deductable". */
	struct CodeableConcept *type;
/* description: The product that this plan is available under. */
	struct Reference *product;
/* description: The geographic region in which a health insurance plan's benefits apply. */
	int coverageArea_count;
	struct Reference *coverageArea;
/* description: Reference to the network that providing the type of coverage. */
	int network_count;
	struct Reference *network;
/* description: Overall costs associated with the plan. */
	int generalCost_count;
	struct InsurancePlan_GeneralCost *generalCost;
/* description: Costs associated with the coverage provided by the product-plan. */
	int specificCost_count;
	struct InsurancePlan_SpecificCost *specificCost;
};
typedef struct InsurancePlan InsurancePlan;

/* description: Details about an insurance plan. */
struct InsurancePlan_GeneralCost {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of cost. */
	struct CodeableConcept *type;
/* description: Number of participants enrolled in the plan. */
	positiveInt groupSize;
/* description: Value of the cost. */
	struct Money *cost;
/* description: Additional information about the general costs associated with this plan. */
	string comment;
};
typedef struct InsurancePlan_GeneralCost InsurancePlan_GeneralCost;

/* description: Details about an insurance plan. */
struct InsurancePlan_SpecificCost {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health). */
	struct CodeableConcept *category;
/* description: List of the specific benefits under this category of benefit. */
	int benefit_count;
	struct InsurancePlan_Benefit *benefit;
};
typedef struct InsurancePlan_SpecificCost InsurancePlan_SpecificCost;

/* description: Details about an insurance plan. */
struct InsurancePlan_Benefit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care). */
	struct CodeableConcept *type;
/* description: List of the costs associated with a specific benefit. */
	int cost_count;
	struct InsurancePlan_Cost *cost;
};
typedef struct InsurancePlan_Benefit InsurancePlan_Benefit;

/* description: Details about an insurance plan. */
struct InsurancePlan_Cost {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of cost (copay; individual cap; family cap; coinsurance; deductible). */
	struct CodeableConcept *type;
/* description: Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other). */
	struct CodeableConcept *applicability;
/* description: Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA). */
	int qualifier_count;
	struct CodeableConcept *qualifier;
/* description: The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance). */
	struct Quantity *value;
};
typedef struct InsurancePlan_Cost InsurancePlan_Cost;

/* description: Details of a Health Insurance product provided by an organization. */
struct InsuranceProduct {
/* description: This is a InsuranceProduct resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The current state of the health insurance product. */
	code status;
/* description: The kind of health insurance product. */
	int type_count;
	struct CodeableConcept *type;
/* description: Official name of the health insurance product as designated by the owner. */
	string name;
/* description: A list of alternate names that the product is known as, or was known as in the past. */
	int alias_count;
	string alias;
/* description: The period of time that the health insurance product is available. */
	struct Period *period;
/* description: The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'. */
	struct Reference *ownedBy;
/* description: An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner. */
	struct Reference *administeredBy;
/* description: The geographic region in which a health insurance product's benefits apply. */
	int coverageArea_count;
	struct Reference *coverageArea;
/* description: The contact details of communication devices available relevant to the specific Insurance Product. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites. */
	int contact_count;
	struct ExtendedContactDetail *contact;
/* description: The technical endpoints providing access to services operated for the health insurance product. */
	int endpoint_count;
	struct Reference *endpoint;
/* description: Reference to the network included in the health insurance product. */
	int network_count;
	struct Reference *network;
/* description: Details about the coverage offered by the insurance product. */
	int coverage_count;
	struct InsuranceProduct_Coverage *coverage;
/* description: Another product that is related to this product. Often used to create relationships to parents or families of products. */
	int related_count;
	struct InsuranceProduct_Related *related;
};
typedef struct InsuranceProduct InsuranceProduct;

/* description: Details of a Health Insurance product provided by an organization. */
struct InsuranceProduct_Coverage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health). */
	struct CodeableConcept *type;
/* description: Reference to the network that providing the type of coverage. */
	int network_count;
	struct Reference *network;
/* description: Specific benefits under this type of coverage. */
	int benefit_count;
	struct InsuranceProduct_Benefit *benefit;
};
typedef struct InsuranceProduct_Coverage InsuranceProduct_Coverage;

/* description: Details of a Health Insurance product provided by an organization. */
struct InsuranceProduct_Benefit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of benefit (primary care; specialty care; inpatient; outpatient). */
	struct CodeableConcept *type;
/* description: The referral requirements to have access/coverage for this benefit. */
	string requirement;
/* description: The specific limits on the benefit. */
	int limit_count;
	struct InsuranceProduct_Limit *limit;
};
typedef struct InsuranceProduct_Benefit InsuranceProduct_Benefit;

/* description: Details of a Health Insurance product provided by an organization. */
struct InsuranceProduct_Limit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses. */
	struct Quantity *value;
/* description: The specific limit on the benefit. */
	struct CodeableConcept *code_;
};
typedef struct InsuranceProduct_Limit InsuranceProduct_Limit;

/* description: Details of a Health Insurance product provided by an organization. */
struct InsuranceProduct_Related {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Related Product reference. */
	struct Reference *product;
/* description: The relationship of this product to the related product. an example would be 'sub-plan' where this product is a sub-plan of the related.product. */
	struct CodeableConcept *relationship;
/* description: Period of time that the product relationship is valid. The start and/or end dates can be empty if this is an open ended relationship. */
	struct Period *period;
};
typedef struct InsuranceProduct_Related InsuranceProduct_Related;

/* description: A functional description of an inventory item used in inventory and supply-related workflows. */
struct InventoryItem {
/* description: This is a InventoryItem resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for the inventory item. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Status of the item entry. */
	code status;
/* description: Category or class of the item. */
	int category_count;
	struct CodeableConcept *category;
/* description: Code designating the specific type of item. */
	int code_count;
	struct CodeableConcept *code_;
/* description: The item name(s) - the brand name, or common name, functional name, generic name. */
	int name_count;
	struct InventoryItem_Name *name;
/* description: Organization(s) responsible for the product. */
	int responsibleOrganization_count;
	struct InventoryItem_ResponsibleOrganization *responsibleOrganization;
/* description: The descriptive characteristics of the inventory item. */
	struct InventoryItem_Description *description;
/* description: The usage status e.g. recalled, in use, discarded... This can be used to indicate that the items have been taken out of inventory, or are in use, etc. */
	int inventoryStatus_count;
	struct CodeableConcept *inventoryStatus;
/* description: The base unit of measure - the unit in which the product is used or counted. */
	struct CodeableConcept *baseUnit;
/* description: Net content or amount present in the item. */
	struct Quantity *netContent;
/* description: Association with other items or products. */
	int association_count;
	struct InventoryItem_Association *association;
/* description: The descriptive or identifying characteristics of the item. */
	int characteristic_count;
	struct InventoryItem_Characteristic *characteristic;
/* description: Instances or occurrences of the product. */
	struct InventoryItem_Instance *instance;
/* description: Link to a product resource used in clinical workflows. */
	struct Reference *productReference;
};
typedef struct InventoryItem InventoryItem;

/* description: A functional description of an inventory item used in inventory and supply-related workflows. */
struct InventoryItem_Name {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of name e.g. 'brand-name', 'functional-name', 'common-name'. */
	struct Coding *nameType;
/* description: The language that the item name is expressed in. */
	code language;
/* description: The name or designation that the item is given. */
	string name;
};
typedef struct InventoryItem_Name InventoryItem_Name;

/* description: A functional description of an inventory item used in inventory and supply-related workflows. */
struct InventoryItem_ResponsibleOrganization {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The role of the organization e.g. manufacturer, distributor, etc. */
	struct CodeableConcept *role;
/* description: An organization that has an association with the item, e.g. manufacturer, distributor, responsible, etc. */
	struct Reference *organization;
};
typedef struct InventoryItem_ResponsibleOrganization InventoryItem_ResponsibleOrganization;

/* description: A functional description of an inventory item used in inventory and supply-related workflows. */
struct InventoryItem_Description {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language for the item description, when an item must be described in different languages and those languages may be authoritative and not translations of a 'main' language. */
	code language;
/* description: Textual description of the item. */
	string description;
};
typedef struct InventoryItem_Description InventoryItem_Description;

/* description: A functional description of an inventory item used in inventory and supply-related workflows. */
struct InventoryItem_Association {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: This attribute defined the type of association when establishing associations or relations between items, e.g. 'packaged within' or 'used with' or 'to be mixed with. */
	struct CodeableConcept *associationType;
/* description: The related item or product. */
	struct Reference *relatedItem;
/* description: The quantity of the related product in this product - Numerator is the quantity of the related product. Denominator is the quantity of the present product. For example a value of 20 means that this product contains 20 units of the related product; a value of 1:20 means the inverse - that the contained product contains 20 units of the present product. */
	struct Ratio *quantity;
};
typedef struct InventoryItem_Association InventoryItem_Association;

/* description: A functional description of an inventory item used in inventory and supply-related workflows. */
struct InventoryItem_Characteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of characteristic that is being defined. */
	struct CodeableConcept *characteristicType;
/* description: The value of the attribute. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the attribute. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the attribute. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The value of the attribute. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the attribute. */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: The value of the attribute. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of the attribute. */
	struct Quantity *valueQuantity;
/* description: The value of the attribute. */
	struct Range *valueRange;
/* description: The value of the attribute. */
	struct Ratio *valueRatio;
/* description: The value of the attribute. */
	struct Annotation *valueAnnotation;
/* description: The value of the attribute. */
	struct Address *valueAddress;
/* description: The value of the attribute. */
	struct Duration *valueDuration;
/* description: The value of the attribute. */
	struct CodeableConcept *valueCodeableConcept;
};
typedef struct InventoryItem_Characteristic InventoryItem_Characteristic;

/* description: A functional description of an inventory item used in inventory and supply-related workflows. */
struct InventoryItem_Instance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The identifier for the physical instance, typically a serial number. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The lot or batch number of the item. */
	string lotNumber;
/* description: The expiry date or date and time for the product. */
	dateTime expiry;
/* description: The subject that the item is associated with. */
	struct Reference *subject;
/* description: The location that the item is associated with. */
	struct Reference *location;
};
typedef struct InventoryItem_Instance InventoryItem_Instance;

/* description: A report of inventory or stock items. */
struct InventoryReport {
/* description: This is a InventoryReport resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for the InventoryReport. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the inventory check or notification - whether this is draft (e.g. the report is still pending some updates) or active. */
	code status;
/* description: Whether the report is about the current inventory count (snapshot) or a differential change in inventory (change). */
	code countType;
/* description: What type of operation is being performed - addition or subtraction. */
	struct CodeableConcept *operationType;
/* description: The reason for this count - regular count, ad-hoc count, new arrivals, etc. */
	struct CodeableConcept *operationTypeReason;
/* description: When the report has been submitted. */
	dateTime reportedDateTime;
/* description: Who submits the report. */
	struct Reference *reporter;
/* description: The period the report refers to. */
	struct Period *reportingPeriod;
/* description: An inventory listing section (grouped by any of the attributes). */
	int inventoryListing_count;
	struct InventoryReport_InventoryListing *inventoryListing;
/* description: A note associated with the InventoryReport. */
	int note_count;
	struct Annotation *note;
};
typedef struct InventoryReport InventoryReport;

/* description: A report of inventory or stock items. */
struct InventoryReport_InventoryListing {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Location of the inventory items. */
	struct Reference *location;
/* description: The status of the items. */
	struct CodeableConcept *itemStatus;
/* description: The date and time when the items were counted. */
	dateTime countingDateTime;
/* description: The item or items in this listing. */
	int item_count;
	struct InventoryReport_Item *item;
};
typedef struct InventoryReport_InventoryListing InventoryReport_InventoryListing;

/* description: A report of inventory or stock items. */
struct InventoryReport_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The inventory category or classification of the items being reported. This is meant not for defining the product, but for inventory categories e.g. 'pending recount' or 'damaged'. */
	struct CodeableConcept *category;
/* description: The quantity of the item or items being reported. */
	struct Quantity *quantity;
/* description: The code or reference to the item type. */
	struct CodeableReference *item;
};
typedef struct InventoryReport_Item InventoryReport_Item;

/* description: Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose. */
struct Invoice {
/* description: This is a Invoice resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The current state of the Invoice. */
	code status;
/* description: In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.). */
	string cancelledReason;
/* description: Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary). */
	struct CodeableConcept *type;
/* description: The individual or set of individuals receiving the goods and services billed in this invoice. */
	struct Reference *subject;
/* description: The individual or Organization responsible for balancing of this invoice. */
	struct Reference *recipient;
/* description: Depricared by the element below. */
	dateTime date_;
/* description: Date/time(s) of when this Invoice was posted. */
	dateTime creation;
/* description: Date/time(s) range of services included in this invoice. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string periodDate;
/* description: Date/time(s) range of services included in this invoice. */
	struct Period *periodPeriod;
/* description: Indicates who or what performed or participated in the charged service. */
	int participant_count;
	struct Invoice_Participant *participant;
/* description: The organizationissuing the Invoice. */
	struct Reference *issuer;
/* description: Account which is supposed to be balanced with this Invoice. */
	struct Reference *account;
/* description: Each line item represents one charge for goods and services rendered. Details such.ofType(date), code and amount are found in the referenced ChargeItem resource. */
	int lineItem_count;
	struct Invoice_LineItem *lineItem;
/* description: The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated. */
	int totalPriceComponent_count;
	struct MonetaryComponent *totalPriceComponent;
/* description: Invoice total , taxes excluded. */
	struct Money *totalNet;
/* description: Invoice total, tax included. */
	struct Money *totalGross;
/* description: Payment details such as banking details, period of payment, deductibles, methods of payment. */
	markdown paymentTerms;
/* description: Comments made about the invoice by the issuer, subject, or other participants. */
	int note_count;
	struct Annotation *note;
};
typedef struct Invoice Invoice;

/* description: Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose. */
struct Invoice_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device. */
	struct CodeableConcept *role;
/* description: The device, practitioner, etc. who performed or participated in the service. */
	struct Reference *actor;
};
typedef struct Invoice_Participant Invoice_Participant;

/* description: Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose. */
struct Invoice_LineItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Sequence in which the items appear on the invoice. */
	positiveInt sequence;
/* description: Date/time(s) range when this service was delivered or completed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string servicedDate;
/* description: Date/time(s) range when this service was delivered or completed. */
	struct Period *servicedPeriod;
/* description: The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference. */
	struct Reference *chargeItemReference;
/* description: The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference. */
	struct CodeableConcept *chargeItemCodeableConcept;
/* description: The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated. */
	int priceComponent_count;
	struct MonetaryComponent *priceComponent;
};
typedef struct Invoice_LineItem Invoice_LineItem;

/* description: The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets. */
struct Library {
/* description: This is a Library resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the library. */
	string title;
/* description: The status of this library. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the library was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the library. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the library from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the library is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this library is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the library content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, or bibliographic references. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: An explanatory or alternate title for the library giving additional information about its content. */
	string subtitle;
/* description: Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition. */
	struct CodeableConcept *type;
/* description: A code or group definition that describes the intended subject of the contents of the library. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: A code or group definition that describes the intended subject of the contents of the library. */
	struct Reference *subjectReference;
/* description: A detailed description of how the library is used from a clinical perspective. */
	markdown usage;
/* description: The parameter element defines parameters used by the library. */
	int parameter_count;
	struct ParameterDefinition *parameter;
/* description: Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library. */
	int dataRequirement_count;
	struct DataRequirement *dataRequirement;
/* description: The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content. */
	int content_count;
	struct Attachment *content;
};
typedef struct Library Library;

/* description: Identifies two or more records (resource instances) that refer to the same real-world "occurrence". */
struct Linkage {
/* description: This is a Linkage resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates whether the asserted set of linkages are considered to be "in effect". */
	boolean active;
/* description: Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated. */
	struct Reference *author;
/* description: Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items. */
	int item_count;
	struct Linkage_Item *item;
};
typedef struct Linkage Linkage;

/* description: Identifies two or more records (resource instances) that refer to the same real-world "occurrence". */
struct Linkage_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations. */
	code type;
/* description: The resource instance being linked as part of the group. */
	struct Reference *resource;
};
typedef struct Linkage_Item Linkage_Item;

/* description: A List is a curated collection of resources, for things such as problem lists, allergy lists, facility list, organization list, etc. */
struct List {
/* description: This is a List resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for the List assigned for business purposes outside the context of FHIR. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Indicates the current state of this list. */
	code status;
/* description: How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted. */
	code mode;
/* description: A label for the list assigned by the author. */
	string title;
/* description: This code defines the purpose of the list - why it was created. */
	struct CodeableConcept *code_;
/* description: The common subject(s) (or patient(s)) of the resources that are in the list if there is one (or a set of subjects). */
	int subject_count;
	struct Reference *subject;
/* description: The encounter that is the context in which this list was created. */
	struct Reference *encounter;
/* description: Date list was last reviewed/revised and determined to be 'current'. */
	dateTime date_;
/* description: The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list. */
	struct Reference *source;
/* description: What order applies to the items in the list. */
	struct CodeableConcept *orderedBy;
/* description: Comments that apply to the overall list. */
	int note_count;
	struct Annotation *note;
/* description: Entries in this list. */
	int entry_count;
	struct List_Entry *entry;
/* description: If the list is empty, why the list is empty. */
	struct CodeableConcept *emptyReason;
};
typedef struct List List;

/* description: A List is a curated collection of resources, for things such as problem lists, allergy lists, facility list, organization list, etc. */
struct List_Entry {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The flag allows the system constructing the list to indicate the role and significance of the item in the list. */
	struct CodeableConcept *flag;
/* description: True if this item is marked as deleted in the list. */
	boolean deleted;
/* description: When this item was added to the list. */
	dateTime date_;
/* description: A reference to the actual resource from which data was derived. */
	struct Reference *item;
};
typedef struct List_Entry List_Entry;

/* description: Details and position information for a place where services are provided and resources and participants may be stored, found, contained, or accommodated. */
struct Location {
/* description: This is a Location resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique code or number identifying the location to its users. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status property covers the general availability of the resource, not the current value which may be covered by the operationalStatus, or by a schedule/slots if they are configured for the location. */
	code status;
/* description: The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance. */
	struct Coding *operationalStatus;
/* description: Name of the location as used by humans. Does not need to be unique. */
	string name;
/* description: A list of alternate names that the location is known as, or was known as, in the past. */
	int alias_count;
	string alias;
/* description: Description of the Location, which helps in finding or referencing the place. */
	markdown description;
/* description: Indicates whether a resource instance represents a specific location or a class of locations. */
	code mode;
/* description: Indicates the type of function performed at the location. */
	int type_count;
	struct CodeableConcept *type;
/* description: The contact details of communication devices available at the location. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites. */
	int contact_count;
	struct ExtendedContactDetail *contact;
/* description: Physical location. */
	struct Address *address;
/* description: Physical form of the location, e.g. building, room, vehicle, road, virtual. */
	struct CodeableConcept *form;
/* description: The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML). */
	struct Location_Position *position;
/* description: The organization responsible for the provisioning and upkeep of the location. */
	struct Reference *managingOrganization;
/* description: Another Location of which this Location is physically a part of. */
	struct Reference *partOf;
/* description: Collection of characteristics (attributes). */
	int characteristic_count;
	struct CodeableConcept *characteristic;
/* description: What days/times during a week is this location usually open, and any exceptions where the location is not available. */
	struct Availability *hoursOfOperation;
/* description: Connection details of a virtual service (e.g. shared conference call facility with dedicated number/details). */
	int virtualService_count;
	struct VirtualServiceDetail *virtualService;
/* description: Technical endpoints providing access to services operated for the location. */
	int endpoint_count;
	struct Reference *endpoint;
};
typedef struct Location Location;

/* description: Details and position information for a place where services are provided and resources and participants may be stored, found, contained, or accommodated. */
struct Location_Position {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes on Location main page). */
	decimal longitude;
/* description: Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes on Location main page). */
	decimal latitude;
/* description: Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes on Location main page). */
	decimal altitude;
};
typedef struct Location_Position Location_Position;

/* description: The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product. */
struct ManufacturedItemDefinition {
/* description: This is a ManufacturedItemDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of this item. Enables tracking the life-cycle of the content. */
	code status;
/* description: A descriptive name applied to this item. */
	string name;
/* description: Dose form as manufactured and before any transformation into the pharmaceutical product. */
	struct CodeableConcept *manufacturedDoseForm;
/* description: The “real-world” units in which the quantity of the manufactured item is described. */
	struct CodeableConcept *unitOfPresentation;
/* description: Manufacturer of the item, one of several possible. */
	int manufacturer_count;
	struct Reference *manufacturer;
/* description: Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated. */
	int marketingStatus_count;
	struct MarketingStatus *marketingStatus;
/* description: The ingredients of this manufactured item. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource. */
	int ingredient_count;
	struct CodeableConcept *ingredient;
/* description: General characteristics of this item. */
	int property_count;
	struct ManufacturedItemDefinition_Property *property;
/* description: Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup. */
	int component_count;
	struct ManufacturedItemDefinition_Component *component;
};
typedef struct ManufacturedItemDefinition ManufacturedItemDefinition;

/* description: The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product. */
struct ManufacturedItemDefinition_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code expressing the type of characteristic. */
	struct CodeableConcept *type;
/* description: A value for the characteristic. */
	struct CodeableConcept *valueCodeableConcept;
/* description: A value for the characteristic. */
	struct Quantity *valueQuantity;
/* description: A value for the characteristic. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: A value for the characteristic. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: A value for the characteristic. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: A value for the characteristic. */
	struct Attachment *valueAttachment;
/* description: A value for the characteristic. */
	struct Reference *valueReference;
};
typedef struct ManufacturedItemDefinition_Property ManufacturedItemDefinition_Property;

/* description: The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product. */
struct ManufacturedItemDefinition_Component {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Defining type of the component e.g. shell, layer, ink. */
	struct CodeableConcept *type;
/* description: The function of this component within the item e.g. delivers active ingredient, masks taste. */
	int function_count;
	struct CodeableConcept *function;
/* description: The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume). */
	int amount_count;
	struct Quantity *amount;
/* description: A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient). */
	int constituent_count;
	struct ManufacturedItemDefinition_Constituent *constituent;
/* description: General characteristics of this component. */
	int property_count;
	struct ManufacturedItemDefinition_Property *property;
/* description: A component that this component contains or is made from. */
	int component_count;
	struct ManufacturedItemDefinition_Component *component;
};
typedef struct ManufacturedItemDefinition_Component ManufacturedItemDefinition_Component;

/* description: The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product. */
struct ManufacturedItemDefinition_Constituent {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The measurable amount of the substance, expressable in different ways (e.g. by mass or volume). */
	int amount_count;
	struct Quantity *amount;
/* description: The physical location of the constituent/ingredient within the component. Example – if the component is the bead in the capsule, then the location would be where the ingredient resides within the product part – intragranular, extra-granular, etc. */
	int location_count;
	struct CodeableConcept *location;
/* description: The function of this constituent within the component e.g. binder. */
	int function_count;
	struct CodeableConcept *function;
/* description: The ingredient that is the constituent of the given component. */
	int hasIngredient_count;
	struct CodeableReference *hasIngredient;
};
typedef struct ManufacturedItemDefinition_Constituent ManufacturedItemDefinition_Constituent;

/* description: The Measure resource provides the definition of a quality measure. */
struct Measure {
/* description: This is a Measure resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the measure. */
	string title;
/* description: The status of this measure. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the measure was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the measure. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the measure from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the measure is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this measure is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the measure content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, or bibliographic references. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: An explanatory or alternate title for the measure giving additional information about its content. */
	string subtitle;
/* description: The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything. */
	struct Reference *subjectReference;
/* description: The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters. */
	code basis;
/* description: A detailed description, from a clinical perspective, of how the measure is used. */
	markdown usage;
/* description: A reference to a Library resource containing the formal logic used by the measure. */
	int library_count;
	canonical library;
/* description: Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure. */
	markdown disclaimer;
/* description: Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. */
	struct CodeableConcept *scoring;
/* description: Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit. */
	struct CodeableConcept *scoringUnit;
/* description: If this is a composite measure, the scoring method used to combine the component measures to determine the composite score. */
	struct CodeableConcept *compositeScoring;
/* description: Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization. */
	int type_count;
	struct CodeableConcept *type;
/* description: A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results. */
	markdown riskAdjustment;
/* description: Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result. */
	markdown rateAggregation;
/* description: Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence. */
	markdown rationale;
/* description: Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure. */
	markdown clinicalRecommendationStatement;
/* description: Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range). */
	struct CodeableConcept *improvementNotation;
/* description: Provides a description of an individual term used within the measure. */
	int term_count;
	struct Measure_Term *term;
/* description: Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure. */
	markdown guidance;
/* description: A group of population criteria for the measure. */
	int group_count;
	struct Measure_Group *group;
/* description: The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path. */
	int supplementalData_count;
	struct Measure_SupplementalData *supplementalData;
};
typedef struct Measure Measure;

/* description: The Measure resource provides the definition of a quality measure. */
struct Measure_Term {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A codeable representation of the defined term. */
	struct CodeableConcept *code_;
/* description: Provides a definition for the term as used within the measure. */
	markdown definition;
};
typedef struct Measure_Term Measure_Term;

/* description: The Measure resource provides the definition of a quality measure. */
struct Measure_Group {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource. */
	string linkId;
/* description: Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures. */
	struct CodeableConcept *code_;
/* description: The human readable description of this population group. */
	markdown description;
/* description: Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization. */
	int type_count;
	struct CodeableConcept *type;
/* description: The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything. */
	struct Reference *subjectReference;
/* description: The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters. */
	code basis;
/* description: Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. */
	struct CodeableConcept *scoring;
/* description: Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit. */
	struct CodeableConcept *scoringUnit;
/* description: Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result. */
	markdown rateAggregation;
/* description: Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range). */
	struct CodeableConcept *improvementNotation;
/* description: A reference to a Library resource containing the formal logic used by the measure group. */
	int library_count;
	canonical library;
/* description: A population criteria for the measure. */
	int population_count;
	struct Measure_Population *population;
/* description: The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path. */
	int stratifier_count;
	struct Measure_Stratifier *stratifier;
};
typedef struct Measure_Group Measure_Group;

/* description: The Measure resource provides the definition of a quality measure. */
struct Measure_Population {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that is unique within the Measure allowing linkage to the equivalent population in a MeasureReport resource. */
	string linkId;
/* description: The type of population criteria. */
	struct CodeableConcept *code_;
/* description: The human readable description of this population criteria. */
	markdown description;
/* description: An expression that specifies the criteria for the population, typically the name of an expression in a library. */
	struct Expression *criteria;
/* description: A Group resource that defines this population as a set of characteristics. */
	struct Reference *groupDefinition;
/* description: The id of a population element in this measure that provides the input for this population criteria. In most cases, the scoring structure of the measure implies specific relationships (e.g. the Numerator uses the Denominator as the source in a proportion scoring). In some cases, however, multiple possible choices exist and must be resolved explicitly. For example in a ratio measure with multiple initial populations, the denominator must specify which population should be used as the starting point. */
	string inputPopulationId;
/* description: Specifies which method should be used to aggregate measure observation values. For most scoring types, this is implied by scoring (e.g. a proportion measure counts members of the populations). For continuous variables, however, this information must be specified to ensure correct calculation. */
	struct CodeableConcept *aggregateMethod;
};
typedef struct Measure_Population Measure_Population;

/* description: The Measure resource provides the definition of a quality measure. */
struct Measure_Stratifier {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource. */
	string linkId;
/* description: Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures. */
	struct CodeableConcept *code_;
/* description: The human readable description of this stratifier criteria. */
	markdown description;
/* description: An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element. */
	struct Expression *criteria;
/* description: A Group resource that defines this population as a set of characteristics. */
	struct Reference *groupDefinition;
/* description: A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path. */
	int component_count;
	struct Measure_Component *component;
};
typedef struct Measure_Stratifier Measure_Stratifier;

/* description: The Measure resource provides the definition of a quality measure. */
struct Measure_Component {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource. */
	string linkId;
/* description: Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures. */
	struct CodeableConcept *code_;
/* description: The human readable description of this stratifier criteria component. */
	markdown description;
/* description: An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element. */
	struct Expression *criteria;
/* description: A Group resource that defines this population as a set of characteristics. */
	struct Reference *groupDefinition;
};
typedef struct Measure_Component Measure_Component;

/* description: The Measure resource provides the definition of a quality measure. */
struct Measure_SupplementalData {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource. */
	string linkId;
/* description: Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures. */
	struct CodeableConcept *code_;
/* description: An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation. */
	int usage_count;
	struct CodeableConcept *usage;
/* description: The human readable description of this supplemental data. */
	markdown description;
/* description: The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element. */
	struct Expression *criteria;
};
typedef struct Measure_SupplementalData Measure_SupplementalData;

/* description: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
struct MeasureReport {
/* description: This is a MeasureReport resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The MeasureReport status. No data will be available until the MeasureReport status is complete. */
	code status;
/* description: The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure. */
	code type;
/* description: Indicates whether the data submitted in a data-exchange report represents a snapshot or incremental update. A snapshot update replaces all previously submitted data for the receiver, whereas an incremental update represents only updated and/or changed data and should be applied as a differential update to the existing submitted data for the receiver. */
	code dataUpdateType;
/* description: A reference to the Measure that was calculated to produce this report. */
	canonical measure;
/* description: Optional subject identifying the individual or individuals the report is for. */
	struct Reference *subject;
/* description: The date this measure was calculated. */
	dateTime date_;
/* description: The individual or organization that is reporting the data. */
	struct Reference *reporter;
/* description: A reference to the vendor who queried the data, calculated results and/or generated the report. The ‘reporting vendor’ is intended to represent the submitting entity when it is not the same as the reporting entity. This extension is used when the Receiver is interested in getting vendor information in the report. */
	struct Reference *reportingVendor;
/* description: A reference to the location for which the data is being reported. */
	struct Reference *location;
/* description: The reporting period for which the report was calculated. */
	struct Period *period;
/* description: A reference to a Parameters resource (typically represented using a contained resource) that represents any input parameters that were provided to the operation that generated the report. */
	struct Reference *inputParameters;
/* description: Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. It is expected to be the same as the scoring element on the referenced Measure. */
	struct CodeableConcept *scoring;
/* description: Whether improvement in the measure is noted by an increase or decrease in the measure score. */
	struct CodeableConcept *improvementNotation;
/* description: The results of the calculation, one for each population group in the measure. */
	int group_count;
	struct MeasureReport_Group *group;
/* description: A reference to a Resource that represents additional information collected for the report. If the value of the supplemental data is not a Resource (i.e. evaluating the supplementalData expression for this case in the measure results in a value that is not a FHIR Resource), it is reported as a reference to a contained Observation resource. */
	int supplementalData_count;
	struct Reference *supplementalData;
/* description: Evaluated resources are used to capture what data was involved in the calculation of a measure. This usage is only allowed for individual reports to ensure that the size of the MeasureReport resource is bounded. */
	int evaluatedResource_count;
	struct Reference *evaluatedResource;
};
typedef struct MeasureReport MeasureReport;

/* description: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
struct MeasureReport_Group {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The group from the Measure that corresponds to this group in the MeasureReport resource. */
	string linkId;
/* description: The meaning of the population group as defined in the measure definition. */
	struct CodeableConcept *code_;
/* description: Optional subject identifying the individual or individuals the report is for. */
	struct Reference *subject;
/* description: The populations that make up the population group, one for each type of population appropriate for the measure. */
	int population_count;
	struct MeasureReport_Population *population;
/* description: The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group. */
	struct Quantity *measureScoreQuantity;
/* description: The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string measureScoreDateTime;
/* description: The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group. */
	struct CodeableConcept *measureScoreCodeableConcept;
/* description: The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group. */
	struct Period *measureScorePeriod;
/* description: The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group. */
	struct Range *measureScoreRange;
/* description: The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group. */
	struct Duration *measureScoreDuration;
/* description: When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure. */
	int stratifier_count;
	struct MeasureReport_Stratifier *stratifier;
};
typedef struct MeasureReport_Group MeasureReport_Group;

/* description: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
struct MeasureReport_Population {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The population from the Measure that corresponds to this population in the MeasureReport resource. */
	string linkId;
/* description: The type of the population. */
	struct CodeableConcept *code_;
/* description: The number of members of the population. */
	integer count;
/* description: This element refers to a List of individual level MeasureReport resources, one for each subject in this population. */
	struct Reference *subjectResults;
/* description: A reference to an individual level MeasureReport resource for a member of the population. */
	int subjectReport_count;
	struct Reference *subjectReport;
/* description: Optional Group identifying the individuals that make up the population. */
	struct Reference *subjects;
};
typedef struct MeasureReport_Population MeasureReport_Population;

/* description: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
struct MeasureReport_Stratifier {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The stratifier from the Measure that corresponds to this stratifier in the MeasureReport resource. */
	string linkId;
/* description: The meaning of this stratifier, as defined in the measure definition. */
	struct CodeableConcept *code_;
/* description: This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value. */
	int stratum_count;
	struct MeasureReport_Stratum *stratum;
};
typedef struct MeasureReport_Stratifier MeasureReport_Stratifier;

/* description: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
struct MeasureReport_Stratum {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique. */
	struct Quantity *valueQuantity;
/* description: The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique. */
	struct Range *valueRange;
/* description: The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique. */
	struct Reference *valueReference;
/* description: A stratifier component value. */
	int component_count;
	struct MeasureReport_Component *component;
/* description: The populations that make up the stratum, one for each type of population appropriate to the measure. */
	int population_count;
	struct MeasureReport_Population1 *population;
/* description: The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum. */
	struct Quantity *measureScoreQuantity;
/* description: The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string measureScoreDateTime;
/* description: The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum. */
	struct CodeableConcept *measureScoreCodeableConcept;
/* description: The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum. */
	struct Period *measureScorePeriod;
/* description: The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum. */
	struct Range *measureScoreRange;
/* description: The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum. */
	struct Duration *measureScoreDuration;
};
typedef struct MeasureReport_Stratum MeasureReport_Stratum;

/* description: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
struct MeasureReport_Component {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The stratifier component from the Measure that corresponds to this stratifier component in the MeasureReport resource. */
	string linkId;
/* description: The code for the stratum component value. */
	struct CodeableConcept *code_;
/* description: The stratum component value. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The stratum component value. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The stratum component value. */
	struct Quantity *valueQuantity;
/* description: The stratum component value. */
	struct Range *valueRange;
/* description: The stratum component value. */
	struct Reference *valueReference;
};
typedef struct MeasureReport_Component MeasureReport_Component;

/* description: The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation. */
struct MeasureReport_Population1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The population from the Measure that corresponds to this population in the MeasureReport resource. */
	string linkId;
/* description: The type of the population. */
	struct CodeableConcept *code_;
/* description: The number of members of the population in this stratum. */
	integer count;
/* description: This element refers to a List of individual level MeasureReport resources, one for each subject in this population in this stratum. */
	struct Reference *subjectResults;
/* description: A reference to an individual level MeasureReport resource for a member of the population. */
	int subjectReport_count;
	struct Reference *subjectReport;
/* description: Optional Group identifying the individuals that make up the population. */
	struct Reference *subjects;
};
typedef struct MeasureReport_Population1 MeasureReport_Population1;

/* description: This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use. */
struct Medication {
/* description: This is a Medication resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for this medication. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems. */
	struct CodeableConcept *code_;
/* description: A code to indicate if the medication is in active use. */
	code status;
/* description: The company or other legal entity that has authorization, from the appropriate drug regulatory authority,  to market a medicine in one or more jurisdictions.  Typically abbreviated MAH.Note:  The MAH may manufacture the product and may also contract the manufacturing of the product to one or more companies (organizations). */
	struct Reference *marketingAuthorizationHolder;
/* description: Describes the form of the item.  Powder; tablets; capsule. */
	struct CodeableConcept *doseForm;
/* description: When the specified product code does not infer a package size, this is the specific amount of drug in the product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.). */
	struct Quantity *totalVolume;
/* description: Identifies a particular constituent of interest in the product. */
	int ingredient_count;
	struct Medication_Ingredient *ingredient;
/* description: Information that only applies to packages (not products). */
	struct Medication_Batch *batch;
/* description: A reference to a knowledge resource that provides more information about this medication. */
	struct Reference *definition;
};
typedef struct Medication Medication;

/* description: This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use. */
struct Medication_Ingredient {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The ingredient (substance or medication) that the ingredient.strength relates to.  This is represented as a concept from a code system or described in another resource (Substance or Medication). */
	struct CodeableReference *item;
/* description: Indication of whether this ingredient affects the therapeutic action of the drug. */
	boolean isActive;
/* description: Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet. */
	struct Ratio *strengthRatio;
/* description: Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet. */
	struct CodeableConcept *strengthCodeableConcept;
/* description: Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet. */
	struct Quantity *strengthQuantity;
};
typedef struct Medication_Ingredient Medication_Ingredient;

/* description: This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use. */
struct Medication_Batch {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The assigned lot number of a batch of the specified product. */
	string lotNumber;
/* description: When this specific batch of product will expire. */
	dateTime expirationDate;
};
typedef struct Medication_Batch Medication_Batch;

/* description: Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. */
struct MedicationAdministration {
/* description: This is a MedicationAdministration resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan that is fulfilled in whole or in part by this MedicationAdministration. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A larger event of which this particular event is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way. */
	code status;
/* description: A code indicating why the administration was not performed. */
	int statusReason_count;
	struct CodeableConcept *statusReason;
/* description: The type of medication administration (for example, drug classification like ATC, where meds would be administered, legal category of the medication). */
	int category_count;
	struct CodeableConcept *category;
/* description: Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications. */
	struct CodeableReference *medication;
/* description: The person or animal or group receiving the medication. */
	struct Reference *subject;
/* description: The visit, admission, or other contact between patient and health care provider during which the medication administration was performed. */
	struct Reference *encounter;
/* description: Additional information (for example, patient height and weight) that supports the administration of the medication.  This attribute can be used to provide documentation of specific characteristics of the patient present at the time of administration.  For example, if the dose says "give "x" if the heartrate exceeds "y"", then the heart rate can be included using this attribute. */
	int supportingInformation_count;
	struct Reference *supportingInformation;
/* description: A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurenceDateTime;
/* description: A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate. */
	struct Period *occurencePeriod;
/* description: A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate. */
	struct Timing *occurenceTiming;
/* description: The date the occurrence of the  MedicationAdministration was first captured in the record - potentially significantly after the occurrence of the event. */
	dateTime recorded;
/* description: An indication that the full dose was not administered. */
	boolean isSubPotent;
/* description: The reason or reasons why the full dose was not administered. */
	int subPotentReason_count;
	struct CodeableConcept *subPotentReason;
/* description: The performer of the medication treatment.  For devices this is the device that performed the administration of the medication.  An IV Pump would be an example of a device that is performing the administration. Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers. */
	int performer_count;
	struct MedicationAdministration_Performer *performer;
/* description: A code, Condition or observation that supports why the medication was administered. */
	int reason_count;
	struct CodeableReference *reason;
/* description: The original request, instruction or authority to perform the administration. */
	struct Reference *request;
/* description: The device that is to be used for the administration of the medication (for example, PCA Pump). */
	int device_count;
	struct CodeableReference *device;
/* description: Extra information about the medication administration that is not conveyed by the other attributes. */
	int note_count;
	struct Annotation *note;
/* description: Describes the medication dosage information details e.g. dose, rate, site, route, etc. */
	struct MedicationAdministration_Dosage *dosage;
/* description: A summary of the events of interest that have occurred, such as when the administration was verified. */
	int eventHistory_count;
	struct Reference *eventHistory;
};
typedef struct MedicationAdministration MedicationAdministration;

/* description: Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. */
struct MedicationAdministration_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the performer in the medication administration. */
	struct CodeableConcept *function;
/* description: Indicates who or what performed the medication administration. */
	struct CodeableReference *actor;
};
typedef struct MedicationAdministration_Performer MedicationAdministration_Performer;

/* description: Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner. */
struct MedicationAdministration_Dosage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.The dosage instructions should reflect the dosage of the medication that was administered. */
	string text;
/* description: A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm". */
	struct CodeableConcept *site;
/* description: A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc. */
	struct CodeableConcept *route;
/* description: A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV. */
	struct CodeableConcept *method;
/* description: The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection. */
	struct Quantity *dose;
/* description: Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours. */
	struct Ratio *rateRatio;
/* description: Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours. */
	struct Quantity *rateQuantity;
};
typedef struct MedicationAdministration_Dosage MedicationAdministration_Dosage;

/* description: Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. */
struct MedicationDispense {
/* description: This is a MedicationDispense resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan that is fulfilled in whole or in part by this MedicationDispense. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The procedure or medication administration that triggered the dispense. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code specifying the state of the set of dispense events. */
	code status;
/* description: Indicates the reason why a dispense was not performed. */
	struct CodeableReference *notPerformedReason;
/* description: The date (and maybe time) when the status of the dispense record changed. */
	dateTime statusChanged;
/* description: Indicates the type of medication dispense (for example, drug classification like ATC, where meds would be administered, legal category of the medication.). */
	int category_count;
	struct CodeableConcept *category;
/* description: Identifies the medication supplied. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications. */
	struct CodeableReference *medication;
/* description: A link to a resource representing the person or the group to whom the medication will be given. */
	struct Reference *subject;
/* description: The encounter that establishes the context for this event. */
	struct Reference *encounter;
/* description: Additional information that supports the medication being dispensed.  For example, there may be requirements that a specific lab test has been completed prior to dispensing or the patient's weight at the time of dispensing is documented. */
	int supportingInformation_count;
	struct Reference *supportingInformation;
/* description: Indicates who or what performed the event. */
	int performer_count;
	struct MedicationDispense_Performer *performer;
/* description: The principal physical location where the dispense was performed. */
	struct Reference *location;
/* description: Indicates the medication order that is being dispensed against. */
	int authorizingPrescription_count;
	struct Reference *authorizingPrescription;
/* description: Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc. */
	struct CodeableConcept *type;
/* description: The amount of medication that has been dispensed. Includes unit of measure. */
	struct Quantity *quantity;
/* description: The amount of medication expressed as a timing amount. */
	struct Quantity *daysSupply;
/* description: The date (and maybe time) when the dispense activity started if whenPrepared or whenHandedOver is not populated. */
	dateTime recorded;
/* description: The time when the dispensed product was packaged and reviewed. */
	dateTime whenPrepared;
/* description: The time the dispensed product was provided to the patient or their representative. */
	dateTime whenHandedOver;
/* description: Identification of the facility/location where the medication was/will be shipped to, as part of the dispense event. */
	struct Reference *destination;
/* description: Identifies the person who picked up the medication or the location of where the medication was delivered.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location. */
	int receiver_count;
	struct Reference *receiver;
/* description: Extra information about the dispense that could not be conveyed in the other attributes. */
	int note_count;
	struct Annotation *note;
/* description: The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses. */
	markdown renderedDosageInstruction;
/* description: Indicates how the medication is to be used by the patient. */
	int dosageInstruction_count;
	struct Dosage *dosageInstruction;
/* description: Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done. */
	struct MedicationDispense_Substitution *substitution;
/* description: A summary of the events of interest that have occurred, such as when the dispense was verified. */
	int eventHistory_count;
	struct Reference *eventHistory;
};
typedef struct MedicationDispense MedicationDispense;

/* description: Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. */
struct MedicationDispense_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker. */
	struct CodeableConcept *function;
/* description: The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication. */
	struct Reference *actor;
};
typedef struct MedicationDispense_Performer MedicationDispense_Performer;

/* description: Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order. */
struct MedicationDispense_Substitution {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: True if the dispenser dispensed a different drug or product from what was prescribed. */
	boolean wasSubstituted;
/* description: A code signifying whether a different drug was dispensed from what was prescribed. */
	struct CodeableConcept *type;
/* description: Indicates the reason for the substitution (or lack of substitution) from what was prescribed. */
	int reason_count;
	struct CodeableConcept *reason;
/* description: The person or organization that has primary responsibility for the substitution. */
	struct Reference *responsibleParty;
};
typedef struct MedicationDispense_Substitution MedicationDispense_Substitution;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge {
/* description: This is a MedicationKnowledge resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this {{title}} when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this {{title}} is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the {{title}} is stored on different servers. */
	uri url_;
/* description: Business identifier for this medication. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the {{title}} when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the {{title}} author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence without additional knowledge.  (See the versionAlgorithm element.) */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: All of the names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol. */
	int name_count;
	string name;
/* description: A short, descriptive, user-friendly title for the {{title}}. */
	string title;
/* description: A code to indicate if the medication referred to by this MedicationKnowledge is in active use within the drug database or inventory system. The status refers to the validity about the information of the medication and not to its medicinal properties. */
	code status;
/* description: A Boolean value to indicate that this {{title}} is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the {{title}} was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the {{title}} changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the {{title}}. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the {{title}} from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate {{title}}s. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the {{title}} is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this {{title}} is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the {{title}} content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: The creator or owner of the knowledge or information about the medication. */
	struct Reference *author;
/* description: An individual or organization primarily responsible for internal coherence of the {{title}}. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems. */
	struct CodeableConcept *code_;
/* description: Lists the jurisdictions that this medication knowledge was written for. */
	int intendedJurisdiction_count;
	struct CodeableConcept *intendedJurisdiction;
/* description: Associated or related medications. For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor. */
	int relatedMedicationKnowledge_count;
	struct MedicationKnowledge_RelatedMedicationKnowledge *relatedMedicationKnowledge;
/* description: Links to associated medications that could be prescribed, dispensed or administered. */
	int associatedMedication_count;
	struct Reference *associatedMedication;
/* description: Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.). */
	int productType_count;
	struct CodeableConcept *productType;
/* description: Associated documentation about the medication. */
	int monograph_count;
	struct MedicationKnowledge_Monograph *monograph;
/* description: The instructions for preparing the medication. */
	markdown preparationInstruction;
/* description: The price of the medication. */
	int cost_count;
	struct MedicationKnowledge_Cost *cost;
/* description: The program under which the medication is reviewed. */
	int monitoringProgram_count;
	struct MedicationKnowledge_MonitoringProgram *monitoringProgram;
/* description: Guidelines or protocols that are applicable for the administration of the medication based on indication. */
	int indicationGuideline_count;
	struct MedicationKnowledge_IndicationGuideline *indicationGuideline;
/* description: Categorization of the medication within a formulary or classification system. */
	int medicineClassification_count;
	struct MedicationKnowledge_MedicineClassification *medicineClassification;
/* description: Information that only applies to packages (not products). */
	int packaging_count;
	struct MedicationKnowledge_Packaging *packaging;
/* description: Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.). */
	int clinicalUseIssue_count;
	struct Reference *clinicalUseIssue;
/* description: Information on how the medication should be stored, for example, refrigeration temperatures and length of stability at a given temperature. */
	int storageGuideline_count;
	struct MedicationKnowledge_StorageGuideline *storageGuideline;
/* description: Regulatory information about a medication. */
	int regulatory_count;
	struct MedicationKnowledge_Regulatory *regulatory;
/* description: Along with the link to a Medicinal Product Definition resource, this information provides common definitional elements that are needed to understand the specific medication that is being described. */
	struct MedicationKnowledge_Definitional *definitional;
};
typedef struct MedicationKnowledge MedicationKnowledge;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_RelatedMedicationKnowledge {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The category of the associated medication knowledge reference. */
	struct CodeableConcept *type;
/* description: Associated documentation about the associated medication knowledge. */
	int reference_count;
	struct Reference *reference;
};
typedef struct MedicationKnowledge_RelatedMedicationKnowledge MedicationKnowledge_RelatedMedicationKnowledge;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Monograph {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The category of documentation about the medication. (e.g. professional monograph, patient education monograph). */
	struct CodeableConcept *type;
/* description: Associated documentation about the medication. */
	struct Reference *source;
};
typedef struct MedicationKnowledge_Monograph MedicationKnowledge_Monograph;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Cost {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The date range for which the cost information of the medication is effective. */
	int effectiveDate_count;
	struct Period *effectiveDate;
/* description: The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost. */
	struct CodeableConcept *type;
/* description: The source or owner that assigns the price to the medication. */
	string source;
/* description: The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication. */
	struct Money *costMoney;
/* description: The price or representation of the cost (for example, Band A, Band B or $, $$) of the medication. */
	struct CodeableConcept *costCodeableConcept;
};
typedef struct MedicationKnowledge_Cost MedicationKnowledge_Cost;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_MonitoringProgram {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of program under which the medication is monitored. */
	struct CodeableConcept *type;
/* description: Name of the reviewing program. */
	string name;
};
typedef struct MedicationKnowledge_MonitoringProgram MedicationKnowledge_MonitoringProgram;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_IndicationGuideline {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indication or reason for use of the medication that applies to the specific administration guideline. */
	int indication_count;
	struct CodeableReference *indication;
/* description: The guidelines for the dosage of the medication for the indication. */
	int dosingGuideline_count;
	struct MedicationKnowledge_DosingGuideline *dosingGuideline;
};
typedef struct MedicationKnowledge_IndicationGuideline MedicationKnowledge_IndicationGuideline;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_DosingGuideline {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The overall intention of the treatment, for example, prophylactic, supporative, curative, etc. */
	struct CodeableConcept *treatmentIntent;
/* description: Dosage for the medication for the specific guidelines. */
	int dosage_count;
	struct MedicationKnowledge_Dosage *dosage;
/* description: The type of the treatment that the guideline applies to, for example, long term therapy, first line treatment, etc. */
	struct CodeableConcept *administrationTreatment;
/* description: Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.). */
	int patientCharacteristic_count;
	struct MedicationKnowledge_PatientCharacteristic *patientCharacteristic;
};
typedef struct MedicationKnowledge_DosingGuideline MedicationKnowledge_DosingGuideline;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Dosage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type or category of dosage for a given medication (for example, prophylaxis, maintenance, therapeutic, etc.). */
	struct CodeableConcept *type;
/* description: Dosage for the medication for the specific guidelines. */
	int dosage_count;
	struct Dosage *dosage;
};
typedef struct MedicationKnowledge_Dosage MedicationKnowledge_Dosage;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_PatientCharacteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The categorization of the specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender). */
	struct CodeableConcept *type;
/* description: The specific characteristic (e.g. height, weight, gender, etc.). */
	struct CodeableConcept *valueCodeableConcept;
/* description: The specific characteristic (e.g. height, weight, gender, etc.). */
	struct Quantity *valueQuantity;
/* description: The specific characteristic (e.g. height, weight, gender, etc.). */
	struct Range *valueRange;
};
typedef struct MedicationKnowledge_PatientCharacteristic MedicationKnowledge_PatientCharacteristic;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_MedicineClassification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification). */
	struct CodeableConcept *type;
/* description: Either a textual source of the classification or a reference to an online source. */
/* pattern: ^^[\s\S]+$$ */
	string sourceString;
/* description: Either a textual source of the classification or a reference to an online source. */
/* pattern: ^\S*$ */
	string sourceUri;
/* description: Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.). */
	int classification_count;
	struct CodeableConcept *classification;
};
typedef struct MedicationKnowledge_MedicineClassification MedicationKnowledge_MedicineClassification;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Packaging {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The cost of the packaged medication. */
	int cost_count;
	struct MedicationKnowledge_Cost *cost;
/* description: A reference to a PackagedProductDefinition that provides the details of the product that is in the packaging and is being priced. */
	struct Reference *packagedProduct;
};
typedef struct MedicationKnowledge_Packaging MedicationKnowledge_Packaging;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_StorageGuideline {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to additional information about the storage guidelines. */
	uri reference;
/* description: Additional notes about the storage. */
	int note_count;
	struct Annotation *note;
/* description: Duration that the medication remains stable if the environmentalSetting is respected. */
	struct Duration *stabilityDuration;
/* description: Describes a setting/value on the environment for the adequate storage of the medication and other substances.  Environment settings may involve temperature, humidity, or exposure to light. */
	int environmentalSetting_count;
	struct MedicationKnowledge_EnvironmentalSetting *environmentalSetting;
};
typedef struct MedicationKnowledge_StorageGuideline MedicationKnowledge_StorageGuideline;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_EnvironmentalSetting {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the category or type of setting (e.g., type of location, temperature, humidity). */
	struct CodeableConcept *type;
/* description: Value associated to the setting. E.g., 40° – 50°F for temperature. */
	struct Quantity *valueQuantity;
/* description: Value associated to the setting. E.g., 40° – 50°F for temperature. */
	struct Range *valueRange;
/* description: Value associated to the setting. E.g., 40° – 50°F for temperature. */
	struct CodeableConcept *valueCodeableConcept;
};
typedef struct MedicationKnowledge_EnvironmentalSetting MedicationKnowledge_EnvironmentalSetting;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Regulatory {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The authority that is specifying the regulations. */
	struct Reference *regulatoryAuthority;
/* description: Specifies if changes are allowed when dispensing a medication from a regulatory perspective. */
	int substitution_count;
	struct MedicationKnowledge_Substitution *substitution;
/* description: Specifies the schedule of a medication in jurisdiction. */
	int schedule_count;
	struct CodeableConcept *schedule;
/* description: The maximum number of units of the medication that can be dispensed in a period. */
	struct MedicationKnowledge_MaxDispense *maxDispense;
};
typedef struct MedicationKnowledge_Regulatory MedicationKnowledge_Regulatory;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Substitution {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Specifies the type of substitution allowed. */
	struct CodeableConcept *type;
/* description: Specifies if regulation allows for changes in the medication when dispensing. */
	boolean allowed;
};
typedef struct MedicationKnowledge_Substitution MedicationKnowledge_Substitution;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_MaxDispense {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The maximum number of units of the medication that can be dispensed. */
	struct Quantity *quantity;
/* description: The period that applies to the maximum number of units. */
	struct Duration *period;
};
typedef struct MedicationKnowledge_MaxDispense MedicationKnowledge_MaxDispense;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Definitional {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Associated definitions for this medication. */
	int definition_count;
	struct Reference *definition;
/* description: Describes the form of the item.  Powder; tablets; capsule. */
	struct CodeableConcept *doseForm;
/* description: The intended or approved route of administration. */
	int intendedRoute_count;
	struct CodeableConcept *intendedRoute;
/* description: Identifies a particular constituent of interest in the product. */
	int ingredient_count;
	struct MedicationKnowledge_Ingredient *ingredient;
/* description: Specifies descriptive properties of the medicine, such as color, shape, imprints, etc. */
	int drugCharacteristic_count;
	struct MedicationKnowledge_DrugCharacteristic *drugCharacteristic;
};
typedef struct MedicationKnowledge_Definitional MedicationKnowledge_Definitional;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_Ingredient {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A reference to the resource that provides information about the ingredient. */
	struct CodeableReference *item;
/* description: Indication of whether this ingredient affects the therapeutic action of the drug. */
	struct CodeableConcept *type;
/* description: Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet. */
	struct Ratio *strengthRatio;
/* description: Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet. */
	struct CodeableConcept *strengthCodeableConcept;
/* description: Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet. */
	struct Quantity *strengthQuantity;
};
typedef struct MedicationKnowledge_Ingredient MedicationKnowledge_Ingredient;

/* description: Information about a medication that is used to support knowledge. */
struct MedicationKnowledge_DrugCharacteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint). */
	struct CodeableConcept *type;
/* description: Description of the characteristic. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Description of the characteristic. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Description of the characteristic. */
	struct Quantity *valueQuantity;
/* description: Description of the characteristic. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: Description of the characteristic. */
	struct Attachment *valueAttachment;
};
typedef struct MedicationKnowledge_DrugCharacteristic MedicationKnowledge_DrugCharacteristic;

/* description: An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
struct MedicationRequest {
/* description: This is a MedicationRequest resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan or request that is fulfilled in whole or in part by this medication request. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Reference to an order/prescription that is being replaced by this MedicationRequest. */
	struct Reference *priorPrescription;
/* description: A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time. */
	struct Identifier *groupIdentifier;
/* description: A code specifying the current state of the order.  Generally, this will be active or completed state. */
	code status;
/* description: Captures the reason for the current state of the MedicationRequest. */
	struct CodeableConcept *statusReason;
/* description: The date (and perhaps time) when the status was changed. */
	dateTime statusChanged;
/* description: Whether the request is a proposal, plan, or an original order. */
	code intent;
/* description: An arbitrary categorization or grouping of the medication request.  It could be used for indicating where meds are intended to be administered, eg. in an inpatient setting or in a patient's home, or a legal category of the medication. */
	int category_count;
	struct CodeableConcept *category;
/* description: Indicates how quickly the Medication Request should be addressed with respect to other requests. */
	code priority;
/* description: If true, indicates that the provider is asking for the patient to either stop taking or to not start taking the specified medication. For example, the patient is taking an existing medication and the provider is changing their medication. They want to create two seperate requests: one to stop using the current medication and another to start the new medication. */
	boolean doNotPerform;
/* description: Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications. */
	struct CodeableReference *medication;
/* description: The individual or group for whom the medication has been requested. */
	struct Reference *subject;
/* description: The person or organization who provided the information about this request, if the source is someone other than the requestor.  This is often used when the MedicationRequest is reported by another person. */
	int informationSource_count;
	struct Reference *informationSource;
/* description: The Encounter during which this [x] was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: Information to support fulfilling (i.e. dispensing or administering) of the medication, for example, patient height and weight, a MedicationStatement for the patient). */
	int supportingInformation_count;
	struct Reference *supportingInformation;
/* description: The date (and perhaps time) when the prescription was initially written or authored on. */
	dateTime authoredOn;
/* description: The individual, organization, or device that initiated the request and has responsibility for its activation. */
	struct Reference *requester;
/* description: Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report. */
	boolean reported;
/* description: Indicates the type of performer of the administration of the medication. */
	struct CodeableConcept *performerType;
/* description: The specified desired performer of the medication treatment (e.g. the performer of the medication administration).  For devices, this is the device that is intended to perform the administration of the medication.  An IV Pump would be an example of a device that is performing the administration.  Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers. */
	int performer_count;
	struct Reference *performer;
/* description: The intended type of device that is to be used for the administration of the medication (for example, PCA Pump). */
	int device_count;
	struct CodeableReference *device;
/* description: The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order. */
	struct Reference *recorder;
/* description: The reason or the indication for ordering or not ordering the medication. */
	int reason_count;
	struct CodeableReference *reason;
/* description: The description of the overall pattern of the administration of the medication to the patient. */
	struct CodeableConcept *courseOfTherapyType;
/* description: Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service. */
	int insurance_count;
	struct Reference *insurance;
/* description: Extra information about the prescription that could not be conveyed by the other attributes. */
	int note_count;
	struct Annotation *note;
/* description: The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses. */
	markdown renderedDosageInstruction;
/* description: The period over which the medication is to be taken.  Where there are multiple dosageInstruction lines (for example, tapering doses), this is the earliest date and the latest end date of the dosageInstructions. */
	struct Period *effectiveDosePeriod;
/* description: Specific instructions for how the medication is to be used by the patient. */
	int dosageInstruction_count;
	struct Dosage *dosageInstruction;
/* description: Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department. */
	struct MedicationRequest_DispenseRequest *dispenseRequest;
/* description: Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done. */
	struct MedicationRequest_Substitution *substitution;
/* description: Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource. */
	int eventHistory_count;
	struct Reference *eventHistory;
};
typedef struct MedicationRequest MedicationRequest;

/* description: An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
struct MedicationRequest_DispenseRequest {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the quantity or duration for the first dispense of the medication. */
	struct MedicationRequest_InitialFill *initialFill;
/* description: The minimum period of time that must occur between dispenses of the medication. */
	struct Duration *dispenseInterval;
/* description: This indicates the validity period of a prescription (stale dating the Prescription). */
	struct Period *validityPeriod;
/* description: An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense. */
	unsignedInt numberOfRepeatsAllowed;
/* description: The amount that is to be dispensed for one fill. */
	struct Quantity *quantity;
/* description: Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last. */
	struct Duration *expectedSupplyDuration;
/* description: Indicates the intended performing Organization that will dispense the medication as specified by the prescriber. */
	struct Reference *dispenser;
/* description: Provides additional information to the dispenser, for example, counselling to be provided to the patient. */
	int dispenserInstruction_count;
	struct Annotation *dispenserInstruction;
/* description: Provides information about the type of adherence packaging to be supplied for the medication dispense. */
	struct CodeableConcept *doseAdministrationAid;
};
typedef struct MedicationRequest_DispenseRequest MedicationRequest_DispenseRequest;

/* description: An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
struct MedicationRequest_InitialFill {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The amount or quantity to provide as part of the first dispense. */
	struct Quantity *quantity;
/* description: The length of time that the first dispense is expected to last. */
	struct Duration *duration;
};
typedef struct MedicationRequest_InitialFill MedicationRequest_InitialFill;

/* description: An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns. */
struct MedicationRequest_Substitution {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: True if the prescriber allows a different drug to be dispensed from what was prescribed. */
/* pattern: ^true|false$ */
	boolean allowedBoolean;
/* description: True if the prescriber allows a different drug to be dispensed from what was prescribed. */
	struct CodeableConcept *allowedCodeableConcept;
/* description: Indicates the reason for the substitution, or why substitution must or must not be performed. */
	struct CodeableConcept *reason;
};
typedef struct MedicationRequest_Substitution MedicationRequest_Substitution;

/* description: A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. 

The primary difference between a medicationstatement and a medicationadministration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medicationstatement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the Medication Statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.

The MedicationStatement resource was previously called MedicationStatement. */
struct MedicationStatement {
/* description: This is a MedicationStatement resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A larger event of which this particular MedicationStatement is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code representing the status of recording the medication statement. */
	code status;
/* description: Type of medication statement (for example, drug classification like ATC, where meds would be administered, legal category of the medication.). */
	int category_count;
	struct CodeableConcept *category;
/* description: Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications. */
	struct CodeableReference *medication;
/* description: The person, animal or group who is/was taking the medication. */
	struct Reference *subject;
/* description: The encounter that establishes the context for this MedicationStatement. */
	struct Reference *encounter;
/* description: The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking). */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string effectiveDateTime;
/* description: The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking). */
	struct Period *effectivePeriod;
/* description: The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.adherence element is Not Taking). */
	struct Timing *effectiveTiming;
/* description: The date when the Medication Statement was asserted by the information source. */
	dateTime dateAsserted;
/* description: The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest. */
	int informationSource_count;
	struct Reference *informationSource;
/* description: Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement. */
	int derivedFrom_count;
	struct Reference *derivedFrom;
/* description: A concept, Condition or observation that supports why the medication is being/was taken. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Provides extra information about the Medication Statement that is not conveyed by the other attributes. */
	int note_count;
	struct Annotation *note;
/* description: Link to information that is relevant to a medication statement, for example, illicit drug use, gestational age, etc. */
	int relatedClinicalInformation_count;
	struct Reference *relatedClinicalInformation;
/* description: The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses. */
	markdown renderedDosageInstruction;
/* description: Indicates how the medication is/was or should be taken by the patient. */
	int dosage_count;
	struct Dosage *dosage;
/* description: Indicates whether the medication is or is not being consumed or administered. */
	struct MedicationStatement_Adherence *adherence;
};
typedef struct MedicationStatement MedicationStatement;

/* description: A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. 

The primary difference between a medicationstatement and a medicationadministration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medicationstatement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the Medication Statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.

The MedicationStatement resource was previously called MedicationStatement. */
struct MedicationStatement_Adherence {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of the adherence for the medication. */
	struct CodeableConcept *code_;
/* description: Captures the reason for the current use or adherence of a medication. */
	struct CodeableConcept *reason;
};
typedef struct MedicationStatement_Adherence MedicationStatement_Adherence;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition {
/* description: This is a MedicinalProductDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for this product. Could be an MPID. When in development or being regulated, products are typically referenced by official identifiers, assigned by a manufacturer or regulator, and unique to a product (which, when compared to a product instance being prescribed, is actually a product type). See also MedicinalProductDefinition.code. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Regulatory type, e.g. Investigational or Authorized. */
	struct CodeableConcept *type;
/* description: If this medicine applies to human or veterinary uses. */
	struct CodeableConcept *domain;
/* description: A business identifier relating to a specific version of the product, this is commonly used to support revisions to an existing product. */
	string version;
/* description: The status within the lifecycle of this product record. A high-level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status. */
	struct CodeableConcept *status;
/* description: The date at which the given status became applicable. */
	dateTime statusDate;
/* description: General description of this product. */
	markdown description;
/* description: The dose form for a single part product, or combined form of a multiple part product. This is one concept that describes all the components. It does not represent the form with components physically mixed, if that might be necessary, for which see (AdministrableProductDefinition.administrableDoseForm). */
	struct CodeableConcept *combinedPharmaceuticalDoseForm;
/* description: The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. See also AdministrableProductDefinition resource. MedicinalProductDefinition.route is the same concept as AdministrableProductDefinition.routeOfAdministration.code, and they cannot be used together. */
	int route_count;
	struct CodeableConcept *route;
/* description: Description of indication(s) for this product, used when structured indications are not required. In cases where structured indications are required, they are captured using the ClinicalUseDefinition resource. An indication is a medical situation for which using the product is appropriate. */
	markdown indication;
/* description: The legal status of supply of the medicinal product as classified by the regulator. */
	struct CodeableConcept *legalStatusOfSupply;
/* description: Whether the Medicinal Product is subject to additional monitoring for regulatory reasons, such as heightened reporting requirements. */
	struct CodeableConcept *additionalMonitoringIndicator;
/* description: Whether the Medicinal Product is subject to special measures for regulatory reasons, such as a requirement to conduct post-authorization studies. */
	int specialMeasures_count;
	struct CodeableConcept *specialMeasures;
/* description: If authorised for use in children, or infants, neonates etc. */
	struct CodeableConcept *pediatricUseIndicator;
/* description: Allows the product to be classified by various systems, commonly WHO ATC. */
	int classification_count;
	struct CodeableConcept *classification;
/* description: Marketing status of the medicinal product, in contrast to marketing authorization. This refers to the product being actually 'on the market' as opposed to being allowed to be on the market (which is an authorization). */
	int marketingStatus_count;
	struct MarketingStatus *marketingStatus;
/* description: Package type for the product. See also the PackagedProductDefinition resource. */
	int packagedMedicinalProduct_count;
	struct CodeableConcept *packagedMedicinalProduct;
/* description: Types of medicinal manufactured items and/or devices that this product consists of, such as tablets, capsule, or syringes. Used as a direct link when the item's packaging is not being recorded (see also PackagedProductDefinition.package.containedItem.item). */
	int comprisedOf_count;
	struct Reference *comprisedOf;
/* description: The ingredients of this medicinal product - when not detailed in other resources. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource, or indirectly via incoming AdministrableProductDefinition, PackagedProductDefinition or ManufacturedItemDefinition references. In cases where those levels of detail are not used, the ingredients may be specified directly here as codes. */
	int ingredient_count;
	struct CodeableConcept *ingredient;
/* description: Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product. This includes process-related impurities and contaminants, product-related impurities including degradation products. */
	int impurity_count;
	struct CodeableReference *impurity;
/* description: Additional information or supporting documentation about the medicinal product. */
	int attachedDocument_count;
	struct Reference *attachedDocument;
/* description: A master file for the medicinal product (e.g. Pharmacovigilance System Master File). Drug master files (DMFs) are documents submitted to regulatory agencies to provide confidential detailed information about facilities, processes or articles used in the manufacturing, processing, packaging and storing of drug products. */
	int masterFile_count;
	struct Reference *masterFile;
/* description: A product specific contact, person (in a role), or an organization. */
	int contact_count;
	struct MedicinalProductDefinition_Contact *contact;
/* description: Clinical trials or studies that this product is involved in. */
	int clinicalTrial_count;
	struct Reference *clinicalTrial;
/* description: A code that this product is known by, usually within some formal terminology, perhaps assigned by a third party (i.e. not the manufacturer or regulator). Products (types of medications) tend to be known by identifiers during development and within regulatory process. However when they are prescribed they tend to be identified by codes. The same product may be have multiple codes, applied to it by multiple organizations. */
	int code_count;
	struct Coding *code_;
/* description: The product's name, including full name and possibly coded parts. */
	int name_count;
	struct MedicinalProductDefinition_Name *name;
/* description: Reference to another product, e.g. for linking authorised to investigational product, or a virtual product. */
	int crossReference_count;
	struct MedicinalProductDefinition_CrossReference *crossReference;
/* description: A manufacturing or administrative process or step associated with (or performed on) the medicinal product. */
	int operation_count;
	struct MedicinalProductDefinition_Operation *operation;
/* description: Allows the key product features to be recorded, such as "sugar free", "modified release", "parallel import". */
	int characteristic_count;
	struct MedicinalProductDefinition_Characteristic *characteristic;
};
typedef struct MedicinalProductDefinition MedicinalProductDefinition;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition_Contact {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information. */
	struct CodeableConcept *type;
/* description: A product specific contact, person (in a role), or an organization. */
	struct Reference *contact;
};
typedef struct MedicinalProductDefinition_Contact MedicinalProductDefinition_Contact;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition_Name {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The full product name. */
	string productName;
/* description: Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary. */
	struct CodeableConcept *type;
/* description: Coding words or phrases of the name. */
	int part_count;
	struct MedicinalProductDefinition_Part *part;
/* description: Country and jurisdiction where the name applies, and associated language. */
	int usage_count;
	struct MedicinalProductDefinition_Usage *usage;
};
typedef struct MedicinalProductDefinition_Name MedicinalProductDefinition_Name;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition_Part {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A fragment of a product name. */
	string part;
/* description: Identifying type for this part of the name (e.g. strength part). */
	struct CodeableConcept *type;
};
typedef struct MedicinalProductDefinition_Part MedicinalProductDefinition_Part;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition_Usage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Country code for where this name applies. */
	struct CodeableConcept *country;
/* description: Jurisdiction code for where this name applies. A jurisdiction may be a sub- or supra-national entity (e.g. a state or a geographic region). */
	struct CodeableConcept *jurisdiction;
/* description: Language code for this name. */
	struct CodeableConcept *language;
};
typedef struct MedicinalProductDefinition_Usage MedicinalProductDefinition_Usage;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition_CrossReference {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to another product, e.g. for linking authorised to investigational product. */
	struct CodeableReference *product;
/* description: The type of relationship, for instance branded to generic, virtual to actual product, product to development product (investigational), parallel import version. */
	struct CodeableConcept *type;
};
typedef struct MedicinalProductDefinition_CrossReference MedicinalProductDefinition_CrossReference;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition_Operation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of manufacturing operation e.g. manufacturing itself, re-packaging. For the authorization of this, a RegulatedAuthorization would point to the same plan or activity referenced here. */
	struct CodeableReference *type;
/* description: Date range of applicability. */
	struct Period *effectiveDate;
/* description: The organization or establishment responsible for (or associated with) the particular process or step, examples include the manufacturer, importer, agent. */
	int organization_count;
	struct Reference *organization;
/* description: Specifies whether this particular business or manufacturing process is considered proprietary or confidential. */
	struct CodeableConcept *confidentialityIndicator;
};
typedef struct MedicinalProductDefinition_Operation MedicinalProductDefinition_Operation;

/* description: A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs). */
struct MedicinalProductDefinition_Characteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code expressing the type of characteristic. */
	struct CodeableConcept *type;
/* description: A value for the characteristic.text. */
	struct CodeableConcept *valueCodeableConcept;
/* description: A value for the characteristic.text. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: A value for the characteristic.text. */
	struct Quantity *valueQuantity;
/* description: A value for the characteristic.text. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: A value for the characteristic.text. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: A value for the characteristic.text. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: A value for the characteristic.text. */
	struct Attachment *valueAttachment;
};
typedef struct MedicinalProductDefinition_Characteristic MedicinalProductDefinition_Characteristic;

/* description: Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
struct MessageDefinition {
/* description: This is a MessageDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server. */
	uri url_;
/* description: A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the message definition. */
	string title;
/* description: The status of this message definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the message definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the message definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the message definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the message definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this message definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: A MessageDefinition that is superseded by this definition. */
	int replaces_count;
	canonical replaces;
/* description: The MessageDefinition that is the basis for the contents of this resource. */
	canonical base;
/* description: Identifies a protocol or workflow that this MessageDefinition represents a step in. */
	int parent_count;
	canonical parent;
/* description: Event code or link to the EventDefinition. */
	struct Coding *eventCoding;
/* description: Event code or link to the EventDefinition. */
/* pattern: ^\S*$ */
	string eventUri;
/* description: The impact of the content of the message. */
	code category;
/* description: Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge. */
	int focus_count;
	struct MessageDefinition_Focus *focus;
/* description: Declare at a message definition level whether a response is required or only upon error or success, or never. */
	code responseRequired;
/* description: Indicates what types of messages may be sent as an application-level response to this message. */
	int allowedResponse_count;
	struct MessageDefinition_AllowedResponse *allowedResponse;
/* description: Graph is Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a GraphDefinition that it controls what additional resources are to be added to the Bundle when building the message. The GraphDefinition can also specify profiles that apply to the various resources. */
	canonical graph;
};
typedef struct MessageDefinition MessageDefinition;

/* description: Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
struct MessageDefinition_Focus {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of resource that must be the focus for this message. */
	code code_;
/* description: A profile that reflects constraints for the focal resource (and potentially for related resources). */
	canonical profile;
/* description: Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition. */
	unsignedInt min;
/* description: Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition. */
	string max;
};
typedef struct MessageDefinition_Focus MessageDefinition_Focus;

/* description: Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted. */
struct MessageDefinition_AllowedResponse {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A reference to the message definition that must be adhered to by this supported response. */
	canonical message;
/* description: Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses). */
	markdown situation;
};
typedef struct MessageDefinition_AllowedResponse MessageDefinition_AllowedResponse;

/* description: The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
struct MessageHeader {
/* description: This is a MessageHeader resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification are defined by the implementation.  Alternatively a uri , canonical uri to the EventDefinition or SubscriptionTopic. */
	struct Coding *eventCoding;
/* description: Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification are defined by the implementation.  Alternatively a uri , canonical uri to the EventDefinition or SubscriptionTopic. */
/* pattern: ^\S*$ */
	string eventUri;
/* description: Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification are defined by the implementation.  Alternatively a uri , canonical uri to the EventDefinition or SubscriptionTopic. */
/* pattern: ^\S*$ */
	string eventCanonical;
/* description: The destination application which the message is intended for. */
	int destination_count;
	struct MessageHeader_Destination *destination;
/* description: The source application from which this message originated. */
	struct MessageHeader_Source *source;
/* description: Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message. */
	struct CodeableConcept *reason;
/* description: Information about the message that this message is a response to.  Only present if this message is a response. */
	struct MessageHeader_Response *response;
/* description: The actual data of the message - a reference to the root/focus class of the event. This is allowed to be a Parameters resource. */
	int focus_count;
	struct Reference *focus;
/* description: Permanent link to the MessageDefinition for this message. */
	canonical definition;
};
typedef struct MessageHeader MessageHeader;

/* description: The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
struct MessageHeader_Destination {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates where the message should be routed. */
/* pattern: ^\S*$ */
	string endpointUrl;
/* description: Indicates where the message should be routed. */
	struct Reference *endpointReference;
/* description: Human-readable name for the target system. */
	string name;
/* description: Identifies the target end system in situations where the initial message transmission is to an intermediary system. */
	struct Reference *target;
/* description: Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient. */
	struct Reference *receiver;
};
typedef struct MessageHeader_Destination MessageHeader_Destination;

/* description: The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
struct MessageHeader_Source {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the routing target to send acknowledgements to. */
/* pattern: ^\S*$ */
	string endpointUrl;
/* description: Identifies the routing target to send acknowledgements to. */
	struct Reference *endpointReference;
/* description: Human-readable name for the source system. */
	string name;
/* description: May include configuration or other information useful in debugging. */
	string software;
/* description: Can convey versions of multiple systems in situations where a message passes through multiple hands. */
	string version;
/* description: An e-mail, phone, website or other contact point to use to resolve issues with message communications. */
	struct ContactPoint *contact;
/* description: Identifies the sending entity to allow the use of a trust relationship. */
	struct Reference *sender;
};
typedef struct MessageHeader_Source MessageHeader_Source;

/* description: The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle. */
struct MessageHeader_Response {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Bundle.identifier of the message to which this message is a response. */
	struct Identifier *identifier;
/* description: Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not. */
	code code_;
/* description: Full details of any issues found in the message. */
	struct Reference *details;
};
typedef struct MessageHeader_Response MessageHeader_Response;

/* description: Representation of a molecular sequence. */
struct MolecularSequence {
/* description: This is a MolecularSequence resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier for this particular sequence instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Amino Acid Sequence/ DNA Sequence / RNA Sequence. */
	code type;
/* description: Indicates the subject this sequence is associated too. */
	struct Reference *subject;
/* description: The actual focus of a molecular sequence when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the subject would be the child (proband) and the focus would be the parent. */
	int focus_count;
	struct Reference *focus;
/* description: Specimen used for sequencing. */
	struct Reference *specimen;
/* description: The method for sequencing, for example, chip information. */
	struct Reference *device;
/* description: The organization or lab that should be responsible for this result. */
	struct Reference *performer;
/* description: Sequence that was observed. */
	string literal;
/* description: Sequence that was observed as file content. Can be an actual file contents, or referenced by a URL to an external system. */
	int formatted_count;
	struct Attachment *formatted;
/* description: A sequence defined relative to another sequence. */
	int relative_count;
	struct MolecularSequence_Relative *relative;
};
typedef struct MolecularSequence MolecularSequence;

/* description: Representation of a molecular sequence. */
struct MolecularSequence_Relative {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: These are different ways of identifying nucleotides or amino acids within a sequence. Different databases and file types may use different systems. For detail definitions, see https://loinc.org/92822-6/ for more detail. */
	struct CodeableConcept *coordinateSystem;
/* description: Indicates the order in which the sequence should be considered when putting multiple 'relative' elements together. */
	integer ordinalPosition;
/* description: Indicates the nucleotide range in the composed sequence when multiple 'relative' elements are used together. */
	struct Range *sequenceRange;
/* description: A sequence that is used as a starting sequence to describe variants that are present in a sequence analyzed. */
	struct MolecularSequence_StartingSequence *startingSequence;
/* description: Changes in sequence from the starting sequence. */
	int edit_count;
	struct MolecularSequence_Edit *edit;
};
typedef struct MolecularSequence_Relative MolecularSequence_Relative;

/* description: Representation of a molecular sequence. */
struct MolecularSequence_StartingSequence {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The genome assembly used for starting sequence, e.g. GRCh38. */
	struct CodeableConcept *genomeAssembly;
/* description: Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)). */
	struct CodeableConcept *chromosome;
/* description: The reference sequence that represents the starting sequence. */
	struct CodeableConcept *sequenceCodeableConcept;
/* description: The reference sequence that represents the starting sequence. */
/* pattern: ^^[\s\S]+$$ */
	string sequenceString;
/* description: The reference sequence that represents the starting sequence. */
	struct Reference *sequenceReference;
/* description: Start position of the window on the starting sequence. This value should honor the rules of the coordinateSystem. */
	integer windowStart;
/* description: End position of the window on the starting sequence. This value should honor the rules of the  coordinateSystem. */
	integer windowEnd;
/* description: A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand. */
	code orientation;
/* description: An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm. */
	code strand;
};
typedef struct MolecularSequence_StartingSequence MolecularSequence_StartingSequence;

/* description: Representation of a molecular sequence. */
struct MolecularSequence_Edit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Start position of the edit on the starting sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive. */
	integer start;
/* description: End position of the edit on the starting sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position. */
	integer end;
/* description: Allele that was observed. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed sequence. When the sequence type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end. */
	string replacementSequence;
/* description: Allele in the starting sequence. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the starting sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end. */
	string replacedSequence;
};
typedef struct MolecularSequence_Edit MolecularSequence_Edit;

/* description: A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types. */
struct NamingSystem {
/* description: This is a NamingSystem resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this naming system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this naming system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the naming system is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this naming system when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the naming system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the naming system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which NamingSystem is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which NamingSystem is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the naming system. */
	string title;
/* description: The status of this naming system. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this naming system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the naming system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the naming system. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the naming system is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this naming system is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the naming system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the naming system. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the NamingSystem content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptions related to the content of the NamingSystem. Topics provide a high-level categorization as well as keywords for the NamingSystem that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the NamingSystem. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the NamingSystem. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the NamingSystem. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the NamingSystem for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: Indicates the purpose for the naming system - what kinds of things does it make unique? */
	code kind;
/* description: The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision. */
	string responsible;
/* description: Categorizes a naming system for easier search by grouping related naming systems. */
	struct CodeableConcept *type;
/* description: Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc. */
	string usage;
/* description: Indicates how the system may be identified when referenced in electronic exchange. */
	int uniqueId_count;
	struct NamingSystem_UniqueId *uniqueId;
};
typedef struct NamingSystem NamingSystem;

/* description: A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types. */
struct NamingSystem_UniqueId {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the unique identifier scheme used for this particular identifier. */
	code type;
/* description: The string that should be sent over the wire to identify the code system or identifier system. */
	string value;
/* description: Indicates whether this identifier is the "preferred" identifier of this type. */
	boolean preferred;
/* description: Notes about the past or intended usage of this identifier. */
	string comment;
/* description: Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic. */
	struct Period *period;
/* description: Indicates whether this identifier ie endorsed by the official owner of the associated naming system. */
	boolean authoritative;
};
typedef struct NamingSystem_UniqueId NamingSystem_UniqueId;

/* description: A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake. */
struct NutritionIntake {
/* description: This is a NutritionIntake resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers associated with this Nutrition Intake that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Instantiates FHIR protocol or definition. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: Instantiates external protocol or definition. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: A plan, proposal or order that is fulfilled in whole or in part by this event. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A larger event of which this particular event is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code representing the patient or other source's judgment about the state of the intake that this assertion is about.  Generally, this will be active or completed. */
	code status;
/* description: Captures the reason for the current state of the NutritionIntake. */
	int statusReason_count;
	struct CodeableConcept *statusReason;
/* description: Overall type of nutrition intake. */
	struct CodeableConcept *code_;
/* description: The person, animal or group who is/was consuming the food or fluid. */
	struct Reference *subject;
/* description: The encounter that establishes the context for this NutritionIntake. */
	struct Reference *encounter;
/* description: The interval of time during which it is being asserted that the patient is/was consuming the food or fluid. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: The interval of time during which it is being asserted that the patient is/was consuming the food or fluid. */
	struct Period *occurrencePeriod;
/* description: The date when the Nutrition Intake was asserted by the information source. */
	dateTime recorded;
/* description: The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources. */
/* pattern: ^true|false$ */
	boolean reportedBoolean;
/* description: The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources. */
	struct Reference *reportedReference;
/* description: What food or fluid product or item was consumed. */
	int consumedItem_count;
	struct NutritionIntake_ConsumedItem *consumedItem;
/* description: Total nutrient amounts for the whole meal, product, serving, etc. */
	int ingredientLabel_count;
	struct NutritionIntake_IngredientLabel *ingredientLabel;
/* description: Who performed the intake and how they were involved. */
	int performer_count;
	struct NutritionIntake_Performer *performer;
/* description: Where the intake occurred. */
	struct Reference *location;
/* description: Allows linking the NutritionIntake to the underlying NutritionOrder, or to other information, such as AllergyIntolerance, that supports or is used to derive the NutritionIntake. */
	int derivedFrom_count;
	struct Reference *derivedFrom;
/* description: A reason, Condition or observation for why the food or fluid is /was consumed. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Provides extra information about the Nutrition Intake that is not conveyed by the other attributes. */
	int note_count;
	struct Annotation *note;
};
typedef struct NutritionIntake NutritionIntake;

/* description: A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake. */
struct NutritionIntake_ConsumedItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates what a category of item that was consumed: e.g., food, fluid, enteral, etc. */
	struct CodeableConcept *type;
/* description: Identifies the food or fluid product that was consumed. This is potentially a link to a resource representing the details of the food product (TBD) or a simple attribute carrying a code that identifies the food from a known list of foods. */
	struct CodeableReference *nutritionProduct;
/* description: Scheduled frequency of consumption. */
	struct Timing *schedule;
/* description: Quantity of the specified food. */
	struct Quantity *amount;
/* description: Rate at which enteral feeding was administered. */
	struct Quantity *rate;
/* description: Indicator when a patient is in a setting where it is helpful to know if food was not consumed, such as it was refused, held (as in tube feedings), or otherwise not provided. If a consumption is being recorded from an app, such as MyFitnessPal, this indicator will likely not be used. */
	boolean notConsumed;
/* description: Document the reason the food or fluid was not consumed, such as refused, held, etc. */
	struct CodeableConcept *notConsumedReason;
};
typedef struct NutritionIntake_ConsumedItem NutritionIntake_ConsumedItem;

/* description: A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake. */
struct NutritionIntake_IngredientLabel {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Total nutrient consumed. This could be a macronutrient (protein, fat, carbohydrate), or a vitamin and mineral. */
	struct CodeableReference *nutrient;
/* description: Total amount of nutrient consumed. */
	struct Quantity *amount;
};
typedef struct NutritionIntake_IngredientLabel NutritionIntake_IngredientLabel;

/* description: A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake. */
struct NutritionIntake_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type of performer. */
	struct CodeableConcept *function;
/* description: Who performed the intake. */
	struct Reference *actor;
};
typedef struct NutritionIntake_Performer NutritionIntake_Performer;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder {
/* description: This is a NutritionOrder resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers assigned to this order by the order sender or by the order receiver. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder. */
	int instantiates_count;
	uri instantiates;
/* description: A plan or request that is fulfilled in whole or in part by this nutrition order. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A shared identifier common to all nutrition orders that were authorized more or less simultaneously by a single author, representing the composite or group identifier. */
	struct Identifier *groupIdentifier;
/* description: The workflow status of the nutrition order/request. */
	code status;
/* description: Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain. */
	code intent;
/* description: Indicates how quickly the Nutrition Order should be addressed with respect to other        requests. */
	code priority;
/* description: The person or set of individuals who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding. */
	struct Reference *subject;
/* description: An encounter that provides additional information about the healthcare context in which this request is made. */
	struct Reference *encounter;
/* description: Information to support fulfilling (i.e. dispensing or administering) of the nutrition,        for example, patient height and weight). */
	int supportingInformation_count;
	struct Reference *supportingInformation;
/* description: The date and time that this nutrition order was requested. */
	dateTime dateTime_;
/* description: The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings. */
	struct Reference *orderer;
/* description: The specified desired performer of the nutrition order. */
	int performer_count;
	struct CodeableReference *performer;
/* description: A link to a record of allergies or intolerances  which should be included in the nutrition order. */
	int allergyIntolerance_count;
	struct Reference *allergyIntolerance;
/* description: This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings. */
	int foodPreferenceModifier_count;
	struct CodeableConcept *foodPreferenceModifier;
/* description: This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings. */
	int excludeFoodModifier_count;
	struct CodeableConcept *excludeFoodModifier;
/* description: This modifier is used to convey whether a food item is allowed to be brought in by the patient and/or family.  If set to true, indicates that the receiving system does not need to supply the food item. */
	boolean outsideFoodAllowed;
/* description: Diet given orally in contrast to enteral (tube) feeding. */
	struct NutritionOrder_OralDiet *oralDiet;
/* description: Oral nutritional products given in order to add further nutritional value to the patient's diet. */
	int supplement_count;
	struct NutritionOrder_Supplement *supplement;
/* description: Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity. */
	struct NutritionOrder_EnteralFormula *enteralFormula;
/* description: Comments made about the {{title}} by the requester, performer, subject or other participants. */
	int note_count;
	struct Annotation *note;
};
typedef struct NutritionOrder NutritionOrder;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_OralDiet {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet. */
	int type_count;
	struct CodeableConcept *type;
/* description: Schedule information for an oral diet. */
	struct NutritionOrder_Schedule *schedule;
/* description: Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet. */
	int nutrient_count;
	struct NutritionOrder_Nutrient *nutrient;
/* description: Class that describes any texture modifications required for the patient to safely consume various types of solid foods. */
	int texture_count;
	struct NutritionOrder_Texture *texture;
/* description: The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient. */
	int fluidConsistencyType_count;
	struct CodeableConcept *fluidConsistencyType;
/* description: Free text or additional instructions or information pertaining to the oral diet. */
	string instruction;
};
typedef struct NutritionOrder_OralDiet NutritionOrder_OralDiet;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Schedule {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present. */
	int timing_count;
	struct Timing *timing;
/* description: Indicates whether the product is only taken when needed within a specific dosing schedule. */
	boolean asNeeded;
/* description: Indicates whether the product is only taken based on a precondition for taking the product. */
	struct CodeableConcept *asNeededFor;
};
typedef struct NutritionOrder_Schedule NutritionOrder_Schedule;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Nutrient {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The nutrient that is being modified such as carbohydrate or sodium. */
	struct CodeableConcept *modifier;
/* description: The quantity of the specified nutrient to include in diet. */
	struct Quantity *amount;
};
typedef struct NutritionOrder_Nutrient NutritionOrder_Nutrient;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Texture {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed. */
	struct CodeableConcept *modifier;
/* description: The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types. */
	struct CodeableConcept *foodType;
};
typedef struct NutritionOrder_Texture NutritionOrder_Texture;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Supplement {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement. */
	struct CodeableReference *type;
/* description: The product or brand name of the nutritional supplement such as "Acme Protein Shake". */
	string productName;
/* description: Schedule information for a supplement. */
	struct NutritionOrder_Schedule1 *schedule;
/* description: The amount of the nutritional supplement to be given. */
	struct Quantity *quantity;
/* description: Free text or additional instructions or information pertaining to the oral supplement. */
	string instruction;
};
typedef struct NutritionOrder_Supplement NutritionOrder_Supplement;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Schedule1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The time period and frequency at which the supplement should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present. */
	int timing_count;
	struct Timing *timing;
/* description: Indicates whether the supplement is only taken when needed within a specific dosing schedule. */
	boolean asNeeded;
/* description: Indicates whether the supplement is only taken based on a precondition for taking the supplement. */
	struct CodeableConcept *asNeededFor;
};
typedef struct NutritionOrder_Schedule1 NutritionOrder_Schedule1;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_EnteralFormula {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula. */
	struct CodeableReference *baseFormulaType;
/* description: The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula". */
	string baseFormulaProductName;
/* description: The intended type of device that is to be used for the administration of the enteral formula. */
	int deliveryDevice_count;
	struct CodeableReference *deliveryDevice;
/* description: Indicates modular components to be provided in addition or mixed with the base formula. */
	int additive_count;
	struct NutritionOrder_Additive *additive;
/* description: The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL. */
	struct Quantity *caloricDensity;
/* description: The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube. */
	struct CodeableConcept *routeOfAdministration;
/* description: Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours. */
	int administration_count;
	struct NutritionOrder_Administration *administration;
/* description: The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours. */
	struct Quantity *maxVolumeToDeliver;
/* description: Free text formula administration, feeding instructions or additional instructions or information. */
	markdown administrationInstruction;
};
typedef struct NutritionOrder_EnteralFormula NutritionOrder_EnteralFormula;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Additive {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula. */
	struct CodeableReference *type;
/* description: The product or brand name of the type of modular component to be added to the formula. */
	string productName;
/* description: The amount of additive to be given in addition or to be mixed in with the base formula. */
	struct Quantity *quantity;
};
typedef struct NutritionOrder_Additive NutritionOrder_Additive;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Administration {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Schedule information for an enteral formula. */
	struct NutritionOrder_Schedule2 *schedule;
/* description: The volume of formula to provide to the patient per the specified administration schedule. */
	struct Quantity *quantity;
/* description: The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule. */
	struct Quantity *rateQuantity;
/* description: The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule. */
	struct Ratio *rateRatio;
};
typedef struct NutritionOrder_Administration NutritionOrder_Administration;

/* description: A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident. */
struct NutritionOrder_Schedule2 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The time period and frequency at which the enteral formula should be given.  The enteral formula should be given for the combination of all schedules if more than one schedule is present. */
	int timing_count;
	struct Timing *timing;
/* description: Indicates whether the enteral formula is only taken when needed within a specific dosing schedule. */
	boolean asNeeded;
/* description: Indicates whether the enteral formula is only taken based on a precondition for taking the enteral formula. */
	struct CodeableConcept *asNeededFor;
};
typedef struct NutritionOrder_Schedule2 NutritionOrder_Schedule2;

/* description: A food or supplement that is consumed by patients. */
struct NutritionProduct {
/* description: This is a NutritionProduct resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The code assigned to the product, for example a USDA NDB number, a USDA FDC ID number, or a Langual code. */
	struct CodeableConcept *code_;
/* description: The current state of the product. */
	code status;
/* description: Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc. */
	int category_count;
	struct CodeableConcept *category;
/* description: The organisation (manufacturer, representative or legal authorization holder) that is responsible for the device. */
	int manufacturer_count;
	struct Reference *manufacturer;
/* description: The product's nutritional information expressed by the nutrients. */
	int nutrient_count;
	struct NutritionProduct_Nutrient *nutrient;
/* description: Ingredients contained in this product. */
	int ingredient_count;
	struct NutritionProduct_Ingredient *ingredient;
/* description: Allergens that are known or suspected to be a part of this nutrition product. */
	int knownAllergen_count;
	struct CodeableReference *knownAllergen;
/* description: Specifies descriptive properties of the nutrition product. */
	int characteristic_count;
	struct NutritionProduct_Characteristic *characteristic;
/* description: Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product. */
	int instance_count;
	struct NutritionProduct_Instance *instance;
/* description: Comments made about the product. */
	int note_count;
	struct Annotation *note;
};
typedef struct NutritionProduct NutritionProduct;

/* description: A food or supplement that is consumed by patients. */
struct NutritionProduct_Nutrient {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The (relevant) nutrients in the product. */
	struct CodeableReference *item;
/* description: The amount of nutrient expressed in one or more units: X per pack / per serving / per dose. */
	int amount_count;
	struct Ratio *amount;
};
typedef struct NutritionProduct_Nutrient NutritionProduct_Nutrient;

/* description: A food or supplement that is consumed by patients. */
struct NutritionProduct_Ingredient {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The ingredient contained in the product. */
	struct CodeableReference *item;
/* description: The amount of ingredient that is in the product. */
	int amount_count;
	struct Ratio *amount;
};
typedef struct NutritionProduct_Ingredient NutritionProduct_Ingredient;

/* description: A food or supplement that is consumed by patients. */
struct NutritionProduct_Characteristic {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code specifying which characteristic of the product is being described (for example, colour, shape). */
	struct CodeableConcept *type;
/* description: The actual characteristic value corresponding to the type. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The actual characteristic value corresponding to the type. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The actual characteristic value corresponding to the type. */
	struct Quantity *valueQuantity;
/* description: The actual characteristic value corresponding to the type. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: The actual characteristic value corresponding to the type. */
	struct Attachment *valueAttachment;
/* description: The actual characteristic value corresponding to the type. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
};
typedef struct NutritionProduct_Characteristic NutritionProduct_Characteristic;

/* description: A food or supplement that is consumed by patients. */
struct NutritionProduct_Instance {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The amount of items or instances that the resource considers, for instance when referring to 2 identical units together. */
	struct Quantity *quantity;
/* description: The identifier for the physical instance, typically a serial number or manufacturer number. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The name for the specific product. */
	string name;
/* description: The identification of the batch or lot of the product. */
	string lotNumber;
/* description: The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed. */
	dateTime expiry;
/* description: The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed. */
	dateTime useBy;
/* description: An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled. */
	struct Identifier *biologicalSourceEvent;
};
typedef struct NutritionProduct_Instance NutritionProduct_Instance;

/* description: Measurements and simple assertions made about a patient, device or other subject. */
struct Observation {
/* description: This is a Observation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this observation. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance. */
/* pattern: ^\S*$ */
	string instantiatesCanonical;
/* description: The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance. */
	struct Reference *instantiatesReference;
/* description: A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Identifies the observation(s) that triggered the performance of this observation. */
	int triggeredBy_count;
	struct Observation_TriggeredBy *triggeredBy;
/* description: A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure. */
	int partOf_count;
	struct Reference *partOf;
/* description: The status of the result value. */
	code status;
/* description: A code that classifies the general type of observation being made. */
	int category_count;
	struct CodeableConcept *category;
/* description: Describes what was observed. Sometimes this is called the observation "name". */
	struct CodeableConcept *code_;
/* description: The patient, or group of patients, location, device, organization, procedure or practitioner this observation is about and into whose or what record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation. */
	struct Reference *subject;
/* description: The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus. */
	int focus_count;
	struct Reference *focus;
/* description: The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made. */
	struct Reference *encounter;
/* description: The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string effectiveDateTime;
/* description: The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself. */
	struct Period *effectivePeriod;
/* description: The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself. */
	struct Timing *effectiveTiming;
/* description: The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string effectiveInstant;
/* description: The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified. */
	instant issued;
/* description: Who was responsible for asserting the observed value as "true". */
	int performer_count;
	struct Reference *performer;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Quantity *valueQuantity;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Range *valueRange;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Ratio *valueRatio;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct SampledData *valueSampledData;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Period *valuePeriod;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Attachment *valueAttachment;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Reference *valueReference;
/* description: Provides a reason why the expected value in the element Observation.value[x] is missing. */
	struct CodeableConcept *dataAbsentReason;
/* description: A categorical assessment of an observation value.  For example, high, low, normal. */
	int interpretation_count;
	struct CodeableConcept *interpretation;
/* description: Comments about the observation or the results. */
	int note_count;
	struct Annotation *note;
/* description: Indicates the site on the subject's body where the observation was made (i.e. the target site). */
	struct CodeableConcept *bodySite;
/* description: Indicates the body structure on the subject's body where the observation was made (i.e. the target site). */
	struct Reference *bodyStructure;
/* description: Indicates the mechanism used to perform the observation. */
	struct CodeableConcept *method;
/* description: The specimen that was used when this observation was made. */
	struct Reference *specimen;
/* description: A reference to the device that generates the measurements or the device settings for the device. */
	struct Reference *device;
/* description: Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used. */
	int referenceRange_count;
	struct Observation_ReferenceRange *referenceRange;
/* description: This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group. */
	int hasMember_count;
	struct Reference *hasMember;
/* description: The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image. */
	int derivedFrom_count;
	struct Reference *derivedFrom;
/* description: Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations. */
	int component_count;
	struct Observation_Component *component;
};
typedef struct Observation Observation;

/* description: Measurements and simple assertions made about a patient, device or other subject. */
struct Observation_TriggeredBy {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to the triggering observation. */
	struct Reference *observation;
/* description: The type of trigger.
Reflex | Repeat | Re-run. */
	code type;
/* description: Provides the reason why this observation was performed as a result of the observation(s) referenced. */
	string reason;
};
typedef struct Observation_TriggeredBy Observation_TriggeredBy;

/* description: Measurements and simple assertions made about a patient, device or other subject. */
struct Observation_ReferenceRange {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3). */
	struct Quantity *low;
/* description: The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3). */
	struct Quantity *high;
/* description: The value of the normal value of the reference range. */
	struct CodeableConcept *normalValue;
/* description: Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range. */
	struct CodeableConcept *type;
/* description: Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used. */
	int appliesTo_count;
	struct CodeableConcept *appliesTo;
/* description: The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so. */
	struct Range *age;
/* description: Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals". */
	markdown text;
};
typedef struct Observation_ReferenceRange Observation_ReferenceRange;

/* description: Measurements and simple assertions made about a patient, device or other subject. */
struct Observation_Component {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes what was observed. Sometimes this is called the observation "code". */
	struct CodeableConcept *code_;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Quantity *valueQuantity;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Range *valueRange;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Ratio *valueRatio;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct SampledData *valueSampledData;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Period *valuePeriod;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Attachment *valueAttachment;
/* description: The information determined as a result of making the observation, if the information has a simple value. */
	struct Reference *valueReference;
/* description: Provides a reason why the expected value in the element Observation.component.value[x] is missing. */
	struct CodeableConcept *dataAbsentReason;
/* description: A categorical assessment of an observation value.  For example, high, low, normal. */
	int interpretation_count;
	struct CodeableConcept *interpretation;
/* description: Guidance on how to interpret the value by comparison to a normal or recommended range. */
	int referenceRange_count;
	struct Observation_ReferenceRange *referenceRange;
};
typedef struct Observation_Component Observation_Component;

/* description: Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service. */
struct ObservationDefinition {
/* description: This is a ObservationDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URL that is used to identify this ObservationDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this ObservationDefinition is (or will be) published. The URL SHOULD include the major version of the ObservationDefinition. For more information see Technical and Business Versions. */
	uri url_;
/* description: Business identifiers assigned to this ObservationDefinition. by the performer and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server. */
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the ObservationDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the ObservationDefinition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the ObservationDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the ObservationDefinition. */
	string title;
/* description: The current state of the ObservationDefinition. */
	code status;
/* description: A flag to indicate that this ObservationDefinition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the ObservationDefinition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ObservationDefinition changes. */
	dateTime date_;
/* description: Helps establish the "authority/credibility" of the ObservationDefinition. May also allow for contact. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the ObservationDefinition from the consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate ObservationDefinition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A jurisdiction in which the ObservationDefinition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explains why this ObservationDefinition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: Copyright statement relating to the ObservationDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the ObservationDefinition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date. */
	date lastReviewDate;
/* description: The period during which the ObservationDefinition content was or is planned to be effective. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the {{title}}. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the {{title}}. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: The canonical URL pointing to another FHIR-defined ObservationDefinition that is adhered to in whole or in part by this definition. */
	int derivedFromCanonical_count;
	canonical derivedFromCanonical;
/* description: The URL pointing to an externally-defined observation definition, guideline or other definition that is adhered to in whole or in part by this definition. */
	int derivedFromUri_count;
	uri derivedFromUri;
/* description: A code that describes the intended kind of subject of Observation instances conforming to this ObservationDefinition. */
	int subject_count;
	struct CodeableConcept *subject;
/* description: The type of individual/organization/device that is expected to act upon instances of this definition. */
	struct CodeableConcept *performerType;
/* description: A code that classifies the general type of observation. */
	int category_count;
	struct CodeableConcept *category;
/* description: Describes what will be observed. Sometimes this is called the observation "name". */
	struct CodeableConcept *code_;
/* description: The data types allowed for the value element of the instance observations conforming to this ObservationDefinition. */
	int permittedDataType_count;
	code permittedDataType;
/* description: Multiple results allowed for observations conforming to this ObservationDefinition. */
	boolean multipleResultsAllowed;
/* description: The site on the subject's body where the  observation is to be made. */
	struct CodeableConcept *bodySite;
/* description: The method or technique used to perform the observation. */
	struct CodeableConcept *method;
/* description: The kind of specimen that this type of observation is produced on. */
	int specimen_count;
	struct Reference *specimen;
/* description: The measurement model of device or actual device used to produce observations of this type. */
	int device_count;
	struct Reference *device;
/* description: The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition. */
	string preferredReportName;
/* description: Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition. */
	int permittedUnit_count;
	struct Coding *permittedUnit;
/* description: A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations. */
	int qualifiedValue_count;
	struct ObservationDefinition_QualifiedValue *qualifiedValue;
/* description: This ObservationDefinition defines a group  observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group. */
	int hasMember_count;
	struct Reference *hasMember;
/* description: Some observations have multiple component observations, expressed as separate code value pairs. */
	int component_count;
	struct ObservationDefinition_Component *component;
};
typedef struct ObservationDefinition ObservationDefinition;

/* description: Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service. */
struct ObservationDefinition_QualifiedValue {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A concept defining the context for this set of qualified values. */
	struct CodeableConcept *context;
/* description: The target population this  set of qualified values applies to. */
	int appliesTo_count;
	struct CodeableConcept *appliesTo;
/* description: The gender this  set of qualified values applies to. */
	code gender;
/* description: The age range this  set of qualified values applies to. */
	struct Range *age;
/* description: The gestational age this  set of qualified values applies to. */
	struct Range *gestationalAge;
/* description: Text based condition for which the the set of qualified values is valid. */
	string condition;
/* description: The category of range of values for continuous or ordinal observations that match the criteria of this set of qualified values. */
	code rangeCategory;
/* description: The range of values defined for continuous or ordinal observations that match the criteria of this set of qualified values. */
	struct Range *range;
/* description: The set of valid coded results for qualitative observations  that match the criteria of this set of qualified values. */
	canonical validCodedValueSet;
/* description: The set of normal coded results for qualitative observations  that match the criteria of this set of qualified values. */
	canonical normalCodedValueSet;
/* description: The set of abnormal coded results for qualitative observations  that match the criteria of this set of qualified values. */
	canonical abnormalCodedValueSet;
/* description: The set of critical coded results for qualitative observations  that match the criteria of this set of qualified values. */
	canonical criticalCodedValueSet;
};
typedef struct ObservationDefinition_QualifiedValue ObservationDefinition_QualifiedValue;

/* description: Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service. */
struct ObservationDefinition_Component {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Describes what will be observed. */
	struct CodeableConcept *code_;
/* description: The data types allowed for the value element of the instance of this component observations. */
	int permittedDataType_count;
	code permittedDataType;
/* description: Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition. */
	int permittedUnit_count;
	struct Coding *permittedUnit;
/* description: A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations. */
	int qualifiedValue_count;
	struct ObservationDefinition_QualifiedValue *qualifiedValue;
};
typedef struct ObservationDefinition_Component ObservationDefinition_Component;

/* description: A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
struct OperationDefinition {
/* description: This is a OperationDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the operation definition. */
	string title;
/* description: The current state of this operation definition. */
	code status;
/* description: A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the operation definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the operation definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the operation definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the operation definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this operation definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the operation definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the operation definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: Whether this is an operation or a named query. */
	code kind;
/* description: Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'. */
	boolean affectsState;
/* description: The label that is recommended to be used in the URL for this operation. In some cases, servers may need to use a different CapabilityStatement operation.name to differentiate between multiple SearchParameters that happen to have the same code. */
	code code_;
/* description: Additional information about how to use this operation or named query. */
	markdown comment;
/* description: Indicates that this operation definition is a constraining profile on the base. */
	canonical base;
/* description: The types on which this operation can be executed. */
	int resource_count;
	code resource;
/* description: Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context). */
	boolean system;
/* description: Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context). */
	boolean type;
/* description: Indicates whether this operation can be invoked on a particular instance of one of the given types. */
	boolean instance;
/* description: Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole. */
	canonical inputProfile;
/* description: Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource. */
	canonical outputProfile;
/* description: The parameters for the operation/query. */
	int parameter_count;
	struct OperationDefinition_Parameter *parameter;
/* description: Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation. */
	int overload_count;
	struct OperationDefinition_Overload *overload;
};
typedef struct OperationDefinition OperationDefinition;

/* description: A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
struct OperationDefinition_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of used to identify the parameter. */
	code name;
/* description: Whether this is an input or an output parameter. */
	code use;
/* description: If present, indicates that the parameter applies when the operation is being invoked at the specified level. */
	int scope_count;
	code scope;
/* description: The minimum number of times this parameter SHALL appear in the request or response. */
	integer min;
/* description: The maximum number of times this element is permitted to appear in the request or response. */
	string max;
/* description: Describes the meaning or use of this parameter. */
	markdown documentation;
/* description: The type for this parameter. */
	code type;
/* description: Support for polymorphic types. If the parameter type is abstract, this element lists allowed sub-types for the parameter. */
	int allowedType_count;
	code allowedType;
/* description: Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide. */
	int targetProfile_count;
	canonical targetProfile;
/* description: How the parameter is understood if/when it used as search parameter. This is only used if the parameter is a string. */
	code searchType;
/* description: Binds to a value set if this parameter is coded (code, Coding, CodeableConcept). */
	struct OperationDefinition_Binding *binding;
/* description: Identifies other resource parameters within the operation invocation that are expected to resolve to this resource. */
	int referencedFrom_count;
	struct OperationDefinition_ReferencedFrom *referencedFrom;
/* description: The parts of a nested Parameter. */
	int part_count;
	struct OperationDefinition_Parameter *part;
};
typedef struct OperationDefinition_Parameter OperationDefinition_Parameter;

/* description: A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
struct OperationDefinition_Binding {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances. */
	code strength;
/* description: Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. */
	canonical valueSet;
};
typedef struct OperationDefinition_Binding OperationDefinition_Binding;

/* description: A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
struct OperationDefinition_ReferencedFrom {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource. */
	string source;
/* description: The id of the element in the referencing resource that is expected to resolve to this resource. */
	string sourceId;
};
typedef struct OperationDefinition_ReferencedFrom OperationDefinition_ReferencedFrom;

/* description: A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction). */
struct OperationDefinition_Overload {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name of parameter to include in overload. */
	int parameterName_count;
	string parameterName;
/* description: Comments to go on overload. */
	string comment;
};
typedef struct OperationDefinition_Overload OperationDefinition_Overload;

/* description: A collection of error, warning, or information messages that result from a system action. */
struct OperationOutcome {
/* description: This is a OperationOutcome resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An error, warning, or information message that results from a system action. */
	int issue_count;
	struct OperationOutcome_Issue *issue;
};
typedef struct OperationOutcome OperationOutcome;

/* description: A collection of error, warning, or information messages that result from a system action. */
struct OperationOutcome_Issue {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates whether the issue indicates a variation from successful processing. */
	code severity;
/* description: Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element. */
	code code_;
/* description: Additional details about the error. This may be a text description of the error or a system code that identifies the error. */
	struct CodeableConcept *details;
/* description: Additional diagnostic information about the issue. */
	string diagnostics;
/* description: This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse. 

For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be "http." + the parameter name. */
	int location_count;
	string location;
/* description: A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised. */
	int expression_count;
	string expression;
};
typedef struct OperationOutcome_Issue OperationOutcome_Issue;

/* description: A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action. */
struct Organization {
/* description: This is a Organization resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for the organization that is used to identify the organization across multiple disparate systems. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether the organization's record is still in active use. */
	boolean active;
/* description: The kind(s) of organization that this is. */
	int type_count;
	struct CodeableConcept *type;
/* description: A name associated with the organization. */
	string name;
/* description: A list of alternate names that the organization is known as, or was known as in the past. */
	int alias_count;
	string alias;
/* description: Description of the organization, which helps provide additional general context on the organization to ensure that the correct organization is selected. */
	markdown description;
/* description: The contact details of communication devices available relevant to the specific Organization. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites. */
	int contact_count;
	struct ExtendedContactDetail *contact;
/* description: The organization of which this organization forms a part. */
	struct Reference *partOf;
/* description: Technical endpoints providing access to services operated for the organization. */
	int endpoint_count;
	struct Reference *endpoint;
/* description: The official certifications, accreditations, training, designations and licenses that authorize and/or otherwise endorse the provision of care by the organization.For example, an approval to provide a type of services issued by a certifying body (such as the US Joint Commission) to an organization. */
	int qualification_count;
	struct Organization_Qualification *qualification;
};
typedef struct Organization Organization;

/* description: A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action. */
struct Organization_Qualification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier allocated to this qualification for this organization. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Coded representation of the qualification. */
	struct CodeableConcept *code_;
/* description: Qualifications often take time to attain and might be tracked during this time, and completed qualifications might not always be valid. This status concept has some overlap with period and both should be considered together. Refer to the descriptions of the codes for how the period should be interpreted.If a qualification is revoked or otherwise cancelled, then the period is likely to be ignored, and might be related to when it was active. */
	struct CodeableConcept *status;
/* description: Period during which the qualification is valid. */
	struct Period *period;
/* description: Organization that regulates and issues the qualification. */
	struct Reference *issuer;
};
typedef struct Organization_Qualification Organization_Qualification;

/* description: Defines an affiliation/association/relationship between 2 distinct organizations, that is not a part-of relationship/sub-division relationship. */
struct OrganizationAffiliation {
/* description: This is a OrganizationAffiliation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers that are specific to this role. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether this organization affiliation record is in active use. */
	boolean active;
/* description: The period during which the participatingOrganization is affiliated with the primary organization. */
	struct Period *period;
/* description: Organization where the role is available (primary organization/has members). */
	struct Reference *organization;
/* description: The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of). */
	struct Reference *participatingOrganization;
/* description: The network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined). */
	int network_count;
	struct Reference *network;
/* description: Definition of the role the participatingOrganization plays in the association. */
	int code_count;
	struct CodeableConcept *code_;
/* description: Specific specialty of the participatingOrganization in the context of the role. */
	int specialty_count;
	struct CodeableConcept *specialty;
/* description: The location(s) at which the role occurs. */
	int location_count;
	struct Reference *location;
/* description: Healthcare services provided through the role. */
	int healthcareService_count;
	struct Reference *healthcareService;
/* description: The contact details of communication devices available at the participatingOrganization relevant to this Affiliation. */
	int contact_count;
	struct ExtendedContactDetail *contact;
/* description: Technical endpoints providing access to services operated for this role. */
	int endpoint_count;
	struct Reference *endpoint;
};
typedef struct OrganizationAffiliation OrganizationAffiliation;

/* description: A medically related item or items, in a container or package. */
struct PackagedProductDefinition {
/* description: This is a PackagedProductDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc. */
	string name;
/* description: A high level category e.g. medicinal product, raw material, shipping/transport container, etc. */
	struct CodeableConcept *type;
/* description: The product this package model relates to, not the contents of the package (for which see package.containedItem). */
	int packageFor_count;
	struct Reference *packageFor;
/* description: The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status. */
	struct CodeableConcept *status;
/* description: The date at which the given status became applicable. */
	dateTime statusDate;
/* description: A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource. */
	int containedItemQuantity_count;
	struct Quantity *containedItemQuantity;
/* description: Textual description. Note that this is not the name of the package or product. */
	markdown description;
/* description: The legal status of supply of the packaged item as classified by the regulator. */
	int legalStatusOfSupply_count;
	struct PackagedProductDefinition_LegalStatusOfSupply *legalStatusOfSupply;
/* description: Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated. */
	int marketingStatus_count;
	struct MarketingStatus *marketingStatus;
/* description: Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant. */
	boolean copackagedIndicator;
/* description: Manufacturer of this package type. When there are multiple it means these are all possible manufacturers. */
	int manufacturer_count;
	struct Reference *manufacturer;
/* description: Additional information or supporting documentation about the packaged product. */
	int attachedDocument_count;
	struct Reference *attachedDocument;
/* description: A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item). */
	struct PackagedProductDefinition_Packaging *packaging;
/* description: Allows the key features to be recorded, such as "hospital pack", "nurse prescribable", "calendar pack". */
	int characteristic_count;
	struct PackagedProductDefinition_Property *characteristic;
};
typedef struct PackagedProductDefinition PackagedProductDefinition;

/* description: A medically related item or items, in a container or package. */
struct PackagedProductDefinition_LegalStatusOfSupply {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actual status of supply. Conveys in what situation this package type may be supplied for use. */
	struct CodeableConcept *code_;
/* description: The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context. */
	struct CodeableConcept *jurisdiction;
};
typedef struct PackagedProductDefinition_LegalStatusOfSupply PackagedProductDefinition_LegalStatusOfSupply;

/* description: A medically related item or items, in a container or package. */
struct PackagedProductDefinition_Packaging {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode). */
	int identifier_count;
	struct Identifier *identifier;
/* description: The physical type of the container of the items. */
	struct CodeableConcept *type;
/* description: Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not. */
	boolean componentPart;
/* description: The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2. */
	integer quantity;
/* description: Material type of the package item. */
	int material_count;
	struct CodeableConcept *material;
/* description: A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve). */
	int alternateMaterial_count;
	struct CodeableConcept *alternateMaterial;
/* description: Shelf Life and storage information. */
	int shelfLifeStorage_count;
	struct ProductShelfLife *shelfLifeStorage;
/* description: Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item. */
	int manufacturer_count;
	struct Reference *manufacturer;
/* description: General characteristics of this item. */
	int property_count;
	struct PackagedProductDefinition_Property *property;
/* description: The item(s) within the packaging. */
	int containedItem_count;
	struct PackagedProductDefinition_ContainedItem *containedItem;
/* description: Allows containers (and parts of containers) within containers, still as a part of a single packaged product. See also PackagedProductDefinition.packaging.containedItem.item(PackagedProductDefinition). */
	int packaging_count;
	struct PackagedProductDefinition_Packaging *packaging;
};
typedef struct PackagedProductDefinition_Packaging PackagedProductDefinition_Packaging;

/* description: A medically related item or items, in a container or package. */
struct PackagedProductDefinition_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code expressing the type of characteristic. */
	struct CodeableConcept *type;
/* description: A value for the characteristic. */
	struct CodeableConcept *valueCodeableConcept;
/* description: A value for the characteristic. */
	struct Quantity *valueQuantity;
/* description: A value for the characteristic. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: A value for the characteristic. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: A value for the characteristic. */
	struct Attachment *valueAttachment;
};
typedef struct PackagedProductDefinition_Property PackagedProductDefinition_Property;

/* description: A medically related item or items, in a container or package. */
struct PackagedProductDefinition_ContainedItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging). */
	struct CodeableReference *item;
/* description: The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition). */
	struct Quantity *amount;
};
typedef struct PackagedProductDefinition_ContainedItem PackagedProductDefinition_ContainedItem;

/* description: This resource is used to pass information into and back from an operation (whether invoked directly from REST or within a messaging environment).  It is not persisted or allowed to be referenced by other resources. */
struct Parameters {
/* description: This is a Parameters resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A parameter passed to or received from the operation. */
	int parameter_count;
	struct Parameters_Parameter *parameter;
};
typedef struct Parameters Parameters;

/* description: This resource is used to pass information into and back from an operation (whether invoked directly from REST or within a messaging environment).  It is not persisted or allowed to be referenced by other resources. */
struct Parameters_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of the parameter (reference to the operation definition). */
	string name;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^\S*$ */
	string valueCanonical;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string valueInstant;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string valueInteger64;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string valueOid;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^[1-9][0-9]*$ */
	number valuePositiveInt;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number valueUnsignedInt;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: Conveys the content if the parameter is a data type. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string valueUuid;
/* description: Conveys the content if the parameter is a data type. */
	struct Address *valueAddress;
/* description: Conveys the content if the parameter is a data type. */
	struct Age *valueAge;
/* description: Conveys the content if the parameter is a data type. */
	struct Annotation *valueAnnotation;
/* description: Conveys the content if the parameter is a data type. */
	struct Attachment *valueAttachment;
/* description: Conveys the content if the parameter is a data type. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Conveys the content if the parameter is a data type. */
	struct CodeableReference *valueCodeableReference;
/* description: Conveys the content if the parameter is a data type. */
	struct Coding *valueCoding;
/* description: Conveys the content if the parameter is a data type. */
	struct ContactPoint *valueContactPoint;
/* description: Conveys the content if the parameter is a data type. */
	struct Count *valueCount;
/* description: Conveys the content if the parameter is a data type. */
	struct Distance *valueDistance;
/* description: Conveys the content if the parameter is a data type. */
	struct Duration *valueDuration;
/* description: Conveys the content if the parameter is a data type. */
	struct HumanName *valueHumanName;
/* description: Conveys the content if the parameter is a data type. */
	struct Identifier *valueIdentifier;
/* description: Conveys the content if the parameter is a data type. */
	struct Money *valueMoney;
/* description: Conveys the content if the parameter is a data type. */
	struct Period *valuePeriod;
/* description: Conveys the content if the parameter is a data type. */
	struct Quantity *valueQuantity;
/* description: Conveys the content if the parameter is a data type. */
	struct Range *valueRange;
/* description: Conveys the content if the parameter is a data type. */
	struct Ratio *valueRatio;
/* description: Conveys the content if the parameter is a data type. */
	struct RatioRange *valueRatioRange;
/* description: Conveys the content if the parameter is a data type. */
	struct Reference *valueReference;
/* description: Conveys the content if the parameter is a data type. */
	struct SampledData *valueSampledData;
/* description: Conveys the content if the parameter is a data type. */
	struct Signature *valueSignature;
/* description: Conveys the content if the parameter is a data type. */
	struct Timing *valueTiming;
/* description: Conveys the content if the parameter is a data type. */
	struct ContactDetail *valueContactDetail;
/* description: Conveys the content if the parameter is a data type. */
	struct DataRequirement *valueDataRequirement;
/* description: Conveys the content if the parameter is a data type. */
	struct Expression *valueExpression;
/* description: Conveys the content if the parameter is a data type. */
	struct ParameterDefinition *valueParameterDefinition;
/* description: Conveys the content if the parameter is a data type. */
	struct RelatedArtifact *valueRelatedArtifact;
/* description: Conveys the content if the parameter is a data type. */
	struct TriggerDefinition *valueTriggerDefinition;
/* description: Conveys the content if the parameter is a data type. */
	struct UsageContext *valueUsageContext;
/* description: Conveys the content if the parameter is a data type. */
	struct Availability *valueAvailability;
/* description: Conveys the content if the parameter is a data type. */
	struct ExtendedContactDetail *valueExtendedContactDetail;
/* description: Conveys the content if the parameter is a data type. */
	struct Dosage *valueDosage;
/* description: Conveys the content if the parameter is a data type. */
	struct Meta *valueMeta;
/* description: Conveys the content if the parameter is a whole resource. */
	ResourceList resource;
/* description: A named part of a multi-part parameter. */
	int part_count;
	struct Parameters_Parameter *part;
};
typedef struct Parameters_Parameter Parameters_Parameter;

/* description: Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
struct Patient {
/* description: This is a Patient resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier for this patient. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether this patient record is in active use. 
Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.

It is often used to filter patient lists to exclude inactive patients

Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death. */
	boolean active;
/* description: A name associated with the individual. */
	int name_count;
	struct HumanName *name;
/* description: A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted. */
	int telecom_count;
	struct ContactPoint *telecom;
/* description: Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes. */
	code gender;
/* description: The date of birth for the individual. */
	date birthDate;
/* description: Indicates if the individual is deceased or not. */
/* pattern: ^true|false$ */
	boolean deceasedBoolean;
/* description: Indicates if the individual is deceased or not. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string deceasedDateTime;
/* description: An address for the individual. */
	int address_count;
	struct Address *address;
/* description: This field contains a patient's most recent marital (civil) status. */
	struct CodeableConcept *maritalStatus;
/* description: Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).  This count is relative to the total of live births and fetal losses. */
/* pattern: ^true|false$ */
	boolean multipleBirthBoolean;
/* description: Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).  This count is relative to the total of live births and fetal losses. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number multipleBirthInteger;
/* description: Image of the patient. */
	int photo_count;
	struct Attachment *photo;
/* description: A contact party (e.g. guardian, partner, friend) for the patient. */
	int contact_count;
	struct Patient_Contact *contact;
/* description: A language which may be used to communicate with the patient about his or her health. */
	int communication_count;
	struct Patient_Communication *communication;
/* description: Patient's nominated care provider. */
	int generalPractitioner_count;
	struct Reference *generalPractitioner;
/* description: Organization that is the custodian of the patient record. */
	struct Reference *managingOrganization;
/* description: Link to a Patient or RelatedPerson resource that concerns the same actual individual. */
	int link_count;
	struct Patient_Link *link;
};
typedef struct Patient Patient;

/* description: Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
struct Patient_Contact {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The nature of the relationship between the patient and the contact person. */
	int relationship_count;
	struct CodeableConcept *relationship;
/* description: A name associated with the contact person. */
	struct HumanName *name;
/* description: A contact detail for the person, e.g. a telephone number or an email address. */
	int telecom_count;
	struct ContactPoint *telecom;
/* description: Address for the contact person. */
	struct Address *address;
/* description: Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes. */
	code gender;
/* description: Organization on behalf of which the contact is acting or for which the contact is working. */
	struct Reference *organization;
/* description: The period during which this contact person or organization is valid to be contacted relating to this patient. */
	struct Period *period;
};
typedef struct Patient_Contact Patient_Contact;

/* description: Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
struct Patient_Communication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language which may be used to communicate with the individual. */
	struct CodeableConcept *language;
/* description: Indicates whether or not the patient prefers this language (over other languages he masters up a certain level). */
	boolean preferred;
};
typedef struct Patient_Communication Patient_Communication;

/* description: Demographics and other administrative information about an individual or animal receiving care or other health-related services. */
struct Patient_Link {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Link to a Patient or RelatedPerson resource that concerns the same actual individual. */
	struct Reference *other;
/* description: The type of link between this patient resource and another patient resource. */
	code type;
};
typedef struct Patient_Link Patient_Link;

/* description: This resource provides the status of the payment for goods and services rendered, and the request and response resource references. */
struct PaymentNotice {
/* description: This is a PaymentNotice resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this payment notice. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the resource instance. */
	code status;
/* description: Reference of resource for which payment is being made. */
	struct Reference *request;
/* description: Reference of response to resource for which payment is being made. */
	struct Reference *response;
/* description: The date when this resource was created. */
	dateTime created;
/* description: The party who reports the payment notice. */
	struct Reference *reporter;
/* description: A reference to the payment which is the subject of this notice. */
	struct Reference *payment;
/* description: The date when the above payment action occurred. */
	date paymentDate;
/* description: The party who will receive or has received payment that is the subject of this notification. */
	struct Reference *payee;
/* description: The party who is notified of the payment status. */
	struct Reference *recipient;
/* description: The amount sent to the payee. */
	struct Money *amount;
/* description: A code indicating whether payment has been sent or cleared. */
	struct CodeableConcept *paymentStatus;
};
typedef struct PaymentNotice PaymentNotice;

/* description: This resource provides the details including amount of a payment and allocates the payment items being paid. */
struct PaymentReconciliation {
/* description: This is a PaymentReconciliation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this payment reconciliation. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Code to indicate the nature of the payment such as payment, adjustment. */
	struct CodeableConcept *type;
/* description: The status of the resource instance. */
	code status;
/* description: The workflow or activity which gave rise to or during which the payment ocurred such as a kiosk, deposit on account, periodic payment etc. */
	struct CodeableConcept *kind;
/* description: The period of time for which payments have been gathered into this bulk payment for settlement. */
	struct Period *period;
/* description: The date when the resource was created. */
	dateTime created;
/* description: Payment enterer if not the actual payment issuer. */
	struct Reference *enterer;
/* description: The type of the source such as patient or insurance. */
	struct CodeableConcept *issuerType;
/* description: The party who generated the payment. */
	struct Reference *paymentIssuer;
/* description: Original request resource reference. */
	struct Reference *request;
/* description: The practitioner who is responsible for the services rendered to the patient. */
	struct Reference *requestor;
/* description: The outcome of a request for a reconciliation. */
	code outcome;
/* description: A human readable description of the status of the request for the reconciliation. */
	string disposition;
/* description: The date of payment as indicated on the financial instrument. */
	date date_;
/* description: The location of the site or device for electronic transfers or physical location for cash payments. */
	struct Reference *location;
/* description: The means of payment such as check, card cash, or electronic funds transfer. */
	struct CodeableConcept *method;
/* description: The card brand such as debit, Visa, Amex etc. used if a card is the method of payment. */
	string cardBrand;
/* description: A portion of the account number, often the last 4 digits, used for verification not charging purposes. */
	string accountNumber;
/* description: The year and month (YYYY-MM) when the instrument, typically card, expires. */
	date expirationDate;
/* description: The name of the card processor, etf processor, bank for checks. */
	string processor;
/* description: The check number, eft reference, car processor reference. */
	string referenceNumber;
/* description: An alphanumeric issued by the processor to confirm the successful issuance of payment. */
	string authorization;
/* description: The amount offered by the issuer, typically applies to cash when the issuer provides an amount in bank note denominations equal to or excess of the amount actually being paid. */
	struct Money *tenderedAmount;
/* description: The amount returned by the receiver which is excess to the amount payable, often referred to as 'change'. */
	struct Money *returnedAmount;
/* description: Total payment amount as indicated on the financial instrument. */
	struct Money *amount;
/* description: Issuer's unique identifier for the payment instrument. */
	struct Identifier *paymentIdentifier;
/* description: Distribution of the payment amount for a previously acknowledged payable. */
	int allocation_count;
	struct PaymentReconciliation_Allocation *allocation;
/* description: A code for the form to be used for printing the content. */
	struct CodeableConcept *formCode;
/* description: A note that describes or explains the processing in a human readable form. */
	int processNote_count;
	struct PaymentReconciliation_ProcessNote *processNote;
};
typedef struct PaymentReconciliation PaymentReconciliation;

/* description: This resource provides the details including amount of a payment and allocates the payment items being paid. */
struct PaymentReconciliation_Allocation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier for the current payment item for the referenced payable. */
	struct Identifier *identifier;
/* description: Unique identifier for the prior payment item for the referenced payable. */
	struct Identifier *predecessor;
/* description: Specific resource to which the payment/adjustment/advance applies. */
	struct Reference *target;
/* description:  Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred. */
/* pattern: ^^[\s\S]+$$ */
	string targetItemString;
/* description:  Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred. */
	struct Identifier *targetItemIdentifier;
/* description:  Identifies the claim line item, encounter or other sub-element being paid. Note payment may be partial, that is not match the then outstanding balance or amount incurred. */
/* pattern: ^[1-9][0-9]*$ */
	number targetItemPositiveInt;
/* description: The Encounter to which this payment applies, may be completed by the receiver, used for search. */
	struct Reference *encounter;
/* description: The Account to which this payment applies, may be completed by the receiver, used for search. */
	struct Reference *account;
/* description: Code to indicate the nature of the payment. */
	struct CodeableConcept *type;
/* description: The party which submitted the claim or financial transaction. */
	struct Reference *submitter;
/* description: A resource, such as a ClaimResponse, which contains a commitment to payment. */
	struct Reference *response;
/* description: The date from the response resource containing a commitment to pay. */
	date date_;
/* description: A reference to the individual who is responsible for inquiries regarding the response and its payment. */
	struct Reference *responsible;
/* description: The party which is receiving the payment. */
	struct Reference *payee;
/* description: The monetary amount allocated from the total payment to the payable. */
	struct Money *amount;
};
typedef struct PaymentReconciliation_Allocation PaymentReconciliation_Allocation;

/* description: This resource provides the details including amount of a payment and allocates the payment items being paid. */
struct PaymentReconciliation_ProcessNote {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The business purpose of the note text. */
	code type;
/* description: The explanation or description associated with the processing. */
	string text;
};
typedef struct PaymentReconciliation_ProcessNote PaymentReconciliation_ProcessNote;

/* description: Permission resource holds access rules for a given data and context. */
struct Permission {
/* description: This is a Permission resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Status. */
	code status;
/* description: The person or entity that asserts the permission. */
	struct Reference *asserter;
/* description: The date that permission was asserted. */
	int date_count;
	dateTime date_;
/* description: The period in which the permission is active. */
	struct Period *validity;
/* description: The asserted justification for using the data. */
	struct Permission_Justification *justification;
/* description: Defines a procedure for arriving at an access decision given the set of rules. */
	code combining;
/* description: A set of rules. */
	int rule_count;
	struct Permission_Rule *rule;
};
typedef struct Permission Permission;

/* description: Permission resource holds access rules for a given data and context. */
struct Permission_Justification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: This would be a codeableconcept, or a coding, which can be constrained to , for example, the 6 grounds for processing in GDPR. */
	int basis_count;
	struct CodeableConcept *basis;
/* description: Justifing rational. */
	int evidence_count;
	struct Reference *evidence;
};
typedef struct Permission_Justification Permission_Justification;

/* description: Permission resource holds access rules for a given data and context. */
struct Permission_Rule {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: deny | permit. */
	code type;
/* description: A description or definition of which activities are allowed to be done on the data. */
	int data_count;
	struct Permission_Data *data;
/* description: A description or definition of which activities are allowed to be done on the data. */
	int activity_count;
	struct Permission_Activity *activity;
/* description: What limits apply to the use of the data. */
	int limit_count;
	struct CodeableConcept *limit;
};
typedef struct Permission_Rule Permission_Rule;

/* description: Permission resource holds access rules for a given data and context. */
struct Permission_Data {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Explicit FHIR Resource references. */
	int resource_count;
	struct Permission_Resource *resource;
/* description: The data in scope are those with the given codes present in that data .meta.security element. */
	int security_count;
	struct Coding *security;
/* description: Clinical or Operational Relevant period of time that bounds the data controlled by this rule. */
	int period_count;
	struct Period *period;
/* description: Used when other data selection elements are insufficient. */
	struct Expression *expression;
};
typedef struct Permission_Data Permission_Data;

/* description: Permission resource holds access rules for a given data and context. */
struct Permission_Resource {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: How the resource reference is interpreted when testing consent restrictions. */
	code meaning;
/* description: A reference to a specific resource that defines which resources are covered by this consent. */
	struct Reference *reference;
};
typedef struct Permission_Resource Permission_Resource;

/* description: Permission resource holds access rules for a given data and context. */
struct Permission_Activity {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actor(s) authorized for the defined activity. */
	int actor_count;
	struct Reference *actor;
/* description: Actions controlled by this Rule. */
	int action_count;
	struct CodeableConcept *action;
/* description: The purpose for which the permission is given. */
	int purpose_count;
	struct CodeableConcept *purpose;
};
typedef struct Permission_Activity Permission_Activity;

/* description: Demographics and administrative information about a person independent of a specific health-related context. */
struct Person {
/* description: This is a Person resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for a person within a particular scope. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether this person's record is in active use. */
	boolean active;
/* description: A name associated with the person. */
	int name_count;
	struct HumanName *name;
/* description: A contact detail for the person, e.g. a telephone number or an email address. */
	int telecom_count;
	struct ContactPoint *telecom;
/* description: Administrative Gender. */
	code gender;
/* description: The birth date for the person. */
	date birthDate;
/* description: Indicates if the individual is deceased or not. */
/* pattern: ^true|false$ */
	boolean deceasedBoolean;
/* description: Indicates if the individual is deceased or not. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string deceasedDateTime;
/* description: One or more addresses for the person. */
	int address_count;
	struct Address *address;
/* description: This field contains a person's most recent marital (civil) status. */
	struct CodeableConcept *maritalStatus;
/* description: An image that can be displayed as a thumbnail of the person to enhance the identification of the individual. */
	int photo_count;
	struct Attachment *photo;
/* description: A language which may be used to communicate with the person about his or her health. */
	int communication_count;
	struct Person_Communication *communication;
/* description: The organization that is the custodian of the person record. */
	struct Reference *managingOrganization;
/* description: Link to a resource that concerns the same actual person. */
	int link_count;
	struct Person_Link *link;
};
typedef struct Person Person;

/* description: Demographics and administrative information about a person independent of a specific health-related context. */
struct Person_Communication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language which may be used to communicate with the individual. */
	struct CodeableConcept *language;
/* description: Indicates whether or not the person prefers this language (over other languages he masters up a certain level). */
	boolean preferred;
};
typedef struct Person_Communication Person_Communication;

/* description: Demographics and administrative information about a person independent of a specific health-related context. */
struct Person_Link {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The resource to which this actual person is associated. */
	struct Reference *target;
/* description: Level of assurance that this link is associated with the target resource. */
	code assurance;
};
typedef struct Person_Link Person_Link;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition {
/* description: This is a PlanDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the plan definition. */
	string title;
/* description: The status of this plan definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the plan definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the plan definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the plan definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the plan definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this plan definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the plan definition content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the content. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the content. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, or bibliographic references. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: An explanatory or alternate title for the plan definition giving additional information about its content. */
	string subtitle;
/* description: A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition. */
	struct CodeableConcept *type;
/* description: A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
	struct Reference *subjectReference;
/* description: A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
/* pattern: ^\S*$ */
	string subjectCanonical;
/* description: A detailed description of how the plan definition is used from a clinical perspective. */
	markdown usage;
/* description: A reference to a Library resource containing any formal logic used by the plan definition. */
	int library_count;
	canonical library;
/* description: A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc. */
	int goal_count;
	struct PlanDefinition_Goal *goal;
/* description: Actors represent the individuals or groups involved in the execution of the defined set of activities. */
	int actor_count;
	struct PlanDefinition_Actor *actor;
/* description: An action or group of actions to be taken as part of the plan. For example, in clinical care, an action would be to prescribe a particular indicated medication, or perform a particular test as appropriate. In pharmaceutical quality, an action would be the test that needs to be performed on a drug product as defined in the quality specification. */
	int action_count;
	struct PlanDefinition_Action *action;
/* description: If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc. */
/* pattern: ^true|false$ */
	boolean asNeededBoolean;
/* description: If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc. */
	struct CodeableConcept *asNeededCodeableConcept;
};
typedef struct PlanDefinition PlanDefinition;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Goal {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates a category the goal falls within. */
	struct CodeableConcept *category;
/* description: Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding". */
	struct CodeableConcept *description;
/* description: Identifies the expected level of importance associated with reaching/sustaining the defined goal. */
	struct CodeableConcept *priority;
/* description: The event after which the goal should begin being pursued. */
	struct CodeableConcept *start;
/* description: Identifies problems, conditions, issues, or concerns the goal is intended to address. */
	int addresses_count;
	struct CodeableConcept *addresses;
/* description: Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources. */
	int documentation_count;
	struct RelatedArtifact *documentation;
/* description: Indicates what should be done and within what timeframe. */
	int target_count;
	struct PlanDefinition_Target *target;
};
typedef struct PlanDefinition_Goal PlanDefinition_Goal;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Target {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level. */
	struct CodeableConcept *measure;
/* description: The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value. */
	struct Quantity *detailQuantity;
/* description: The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value. */
	struct Range *detailRange;
/* description: The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value. */
	struct CodeableConcept *detailCodeableConcept;
/* description: The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value. */
/* pattern: ^^[\s\S]+$$ */
	string detailString;
/* description: The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value. */
/* pattern: ^true|false$ */
	boolean detailBoolean;
/* description: The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number detailInteger;
/* description: The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value. */
	struct Ratio *detailRatio;
/* description: Indicates the timeframe after the start of the goal in which the goal should be met. */
	struct Duration *due;
};
typedef struct PlanDefinition_Target PlanDefinition_Target;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Actor {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A descriptive label for the actor. */
	string title;
/* description: A description of how the actor fits into the overall actions of the plan definition. */
	markdown description;
/* description: The characteristics of the candidates that could serve as the actor. */
	int option_count;
	struct PlanDefinition_Option *option;
};
typedef struct PlanDefinition_Actor PlanDefinition_Actor;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Option {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of participant in the action. */
	code type;
/* description: The type of participant in the action. */
	canonical typeCanonical;
/* description: The type of participant in the action. */
	struct Reference *typeReference;
/* description: The role the participant should play in performing the described action. */
	struct CodeableConcept *role;
};
typedef struct PlanDefinition_Option PlanDefinition_Option;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Action {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that is unique within the PlanDefinition to allow linkage within the realized CarePlan and/or RequestOrchestration. */
	string linkId;
/* description: A user-visible prefix for the action. For example a section or item numbering such as 1. or A. */
	string prefix;
/* description: The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC. */
	string title;
/* description: A brief description of the action used to provide a summary to display to the user. */
	markdown description;
/* description: A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically. */
	markdown textEquivalent;
/* description: Indicates how quickly the action should be addressed with respect to other actions. */
	code priority;
/* description: A code that provides a meaning, grouping, or classification for the action or action group. For example, a section may have a LOINC code for the section of a documentation template. In pharmaceutical quality, an action (Test) such as pH could be classified as a physical property. */
	struct CodeableConcept *code_;
/* description: A description of why this action is necessary or appropriate. */
	int reason_count;
	struct CodeableConcept *reason;
/* description: Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources. */
	int documentation_count;
	struct RelatedArtifact *documentation;
/* description: Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. In pharmaceutical quality, a goal represents acceptance criteria (Goal) for a given action (Test), so the goalId would be the unique id of a defined goal element establishing the acceptance criteria for the action. */
	int goalId_count;
	id goalId;
/* description: A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
	struct Reference *subjectReference;
/* description: A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource. */
/* pattern: ^\S*$ */
	string subjectCanonical;
/* description: A description of when the action should be triggered. When multiple triggers are specified on an action, any triggering event invokes the action. */
	int trigger_count;
	struct TriggerDefinition *trigger;
/* description: An expression that describes applicability criteria or start/stop conditions for the action. */
	int condition_count;
	struct PlanDefinition_Condition *condition;
/* description: Defines input data requirements for the action. */
	int input_count;
	struct PlanDefinition_Input *input;
/* description: Defines the outputs of the action, if any. */
	int output_count;
	struct PlanDefinition_Output *output;
/* description: A relationship to another action such as "before" or "30-60 minutes after start of". */
	int relatedAction_count;
	struct PlanDefinition_RelatedAction *relatedAction;
/* description: An optional value describing when the action should be performed. */
	struct Age *timingAge;
/* description: An optional value describing when the action should be performed. */
	struct Duration *timingDuration;
/* description: An optional value describing when the action should be performed. */
	struct Range *timingRange;
/* description: An optional value describing when the action should be performed. */
	struct Timing *timingTiming;
/* description: Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc. */
	struct CodeableReference *location;
/* description: Indicates who should participate in performing the action described. */
	int participant_count;
	struct PlanDefinition_Participant *participant;
/* description: The type of action to perform (create, update, remove). */
	struct CodeableConcept *type;
/* description: Defines the grouping behavior for the action and its children. */
	code groupingBehavior;
/* description: Defines the selection behavior for the action and its children. */
	code selectionBehavior;
/* description: Defines the required behavior for the action. */
	code requiredBehavior;
/* description: Defines whether the action should usually be preselected. */
	code precheckBehavior;
/* description: Defines whether the action can be selected multiple times. */
	code cardinalityBehavior;
/* description: A reference to an ActivityDefinition that describes the action to be taken in detail, a MessageDefinition describing a message to be snet, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured. */
/* pattern: ^\S*$ */
	string definitionCanonical;
/* description: A reference to an ActivityDefinition that describes the action to be taken in detail, a MessageDefinition describing a message to be snet, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured. */
/* pattern: ^\S*$ */
	string definitionUri;
/* description: A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input. */
	canonical transform;
/* description: Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result. */
	int dynamicValue_count;
	struct PlanDefinition_DynamicValue *dynamicValue;
/* description: Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition. */
	int action_count;
	struct PlanDefinition_Action *action;
};
typedef struct PlanDefinition_Action PlanDefinition_Action;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Condition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of condition. */
	code kind;
/* description: An expression that returns true or false, indicating whether the condition is satisfied. */
	struct Expression *expression;
};
typedef struct PlanDefinition_Condition PlanDefinition_Condition;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Input {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers. */
	string title;
/* description: Defines the data that is to be provided as input to the action. */
	struct DataRequirement *requirement;
/* description: Points to an existing input or output element that provides data to this input. */
	id relatedData;
};
typedef struct PlanDefinition_Input PlanDefinition_Input;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Output {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers. */
	string title;
/* description: Defines the data that results as output from the action. */
	struct DataRequirement *requirement;
/* description: Points to an existing input or output element that is results as output from the action. */
	string relatedData;
};
typedef struct PlanDefinition_Output PlanDefinition_Output;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_RelatedAction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The element id of the target related action. */
	id targetId;
/* description: The relationship of the start of this action to the related action. */
	code relationship;
/* description: The relationship of the end of this action to the related action. */
	code endRelationship;
/* description: A duration or range of durations to apply to the relationship. For example, 30-60 minutes before. */
	struct Duration *offsetDuration;
/* description: A duration or range of durations to apply to the relationship. For example, 30-60 minutes before. */
	struct Range *offsetRange;
};
typedef struct PlanDefinition_RelatedAction PlanDefinition_RelatedAction;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A reference to the id element of the actor who will participate in this action. */
	string actorId;
/* description: The type of participant in the action. */
	code type;
/* description: The type of participant in the action. */
	canonical typeCanonical;
/* description: The type of participant in the action. */
	struct Reference *typeReference;
/* description: The role the participant should play in performing the described action. */
	struct CodeableConcept *role;
/* description: Indicates how the actor will be involved in the action - author, reviewer, witness, etc. */
	struct CodeableConcept *function;
};
typedef struct PlanDefinition_Participant PlanDefinition_Participant;

/* description: This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications. */
struct PlanDefinition_DynamicValue {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). */
	string path;
/* description: An expression specifying the value of the customized element. */
	struct Expression *expression;
};
typedef struct PlanDefinition_DynamicValue PlanDefinition_DynamicValue;

/* description: A person who is directly or indirectly involved in the provisioning of healthcare or related services. */
struct Practitioner {
/* description: This is a Practitioner resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that applies to this person in this role. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether this practitioner's record is in active use. */
	boolean active;
/* description: The name(s) associated with the practitioner. */
	int name_count;
	struct HumanName *name;
/* description: A contact detail for the practitioner, e.g. a telephone number or an email address. */
	int telecom_count;
	struct ContactPoint *telecom;
/* description: Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes. */
	code gender;
/* description: The date of birth for the practitioner. */
	date birthDate;
/* description: Indicates if the practitioner is deceased or not. */
/* pattern: ^true|false$ */
	boolean deceasedBoolean;
/* description: Indicates if the practitioner is deceased or not. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string deceasedDateTime;
/* description: Address(es) of the practitioner that are not role specific (typically home address). Work addresses are not typically entered in this property as they are usually role dependent. */
	int address_count;
	struct Address *address;
/* description: Image of the person. */
	int photo_count;
	struct Attachment *photo;
/* description: The official qualifications, certifications, accreditations, training, licenses (and other types of educations/skills/capabilities) that authorize or otherwise pertain to the provision of care by the practitioner.For example, a medical license issued by a medical board of licensure authorizing the practitioner to practice medicine within a certain locality. */
	int qualification_count;
	struct Practitioner_Qualification *qualification;
/* description: A language which may be used to communicate with the practitioner, often for correspondence/administrative purposes.The `PractitionerRole.communication` property should be used for publishing the languages that a practitioner is able to communicate with patients (on a per Organization/Role basis). */
	int communication_count;
	struct Practitioner_Communication *communication;
};
typedef struct Practitioner Practitioner;

/* description: A person who is directly or indirectly involved in the provisioning of healthcare or related services. */
struct Practitioner_Qualification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that applies to this person's qualification. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Coded representation of the qualification. */
	struct CodeableConcept *code_;
/* description: Qualifications often take time to attain and might be tracked during this time, and completed qualifications might not always be valid. This status concept has some overlap with period and both should be considered together. Refer to the descriptions of the codes for how the period should be interpreted.If a qualification is revoked or otherwise cancelled, then the period is likely to be ignored, and m be related to when it was active. */
	struct CodeableConcept *status;
/* description: Period during which the qualification is valid. */
	struct Period *period;
/* description: Organization that regulates and issues the qualification. */
	struct Reference *issuer;
};
typedef struct Practitioner_Qualification Practitioner_Qualification;

/* description: A person who is directly or indirectly involved in the provisioning of healthcare or related services. */
struct Practitioner_Communication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language which may be used to communicate with the individual. */
	struct CodeableConcept *language;
/* description: Indicates whether or not the person prefers this language (over other languages he masters up a certain level). */
	boolean preferred;
};
typedef struct Practitioner_Communication Practitioner_Communication;

/* description: A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time. */
struct PractitionerRole {
/* description: This is a PractitionerRole resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business Identifiers that are specific to a role/location. */
	int identifier_count;
	struct Identifier *identifier;
/* description:  Whether this practitioner role record is in active use. Some systems may use this property to mark non-active practitioners, such as those that are not currently employed. */
	boolean active;
/* description: The period during which the person is authorized to act as a practitioner in these role(s) for the organization. */
	struct Period *period;
/* description: Practitioner that is able to provide the defined services for the organization. */
	struct Reference *practitioner;
/* description: The organization where the Practitioner performs the roles associated. */
	struct Reference *organization;
/* description: Roles which this practitioner is authorized to perform for the organization. */
	int code_count;
	struct CodeableConcept *code_;
/* description: The specialty of a practitioner that describes the functional role they are practicing at a given organization or location. */
	int specialty_count;
	struct CodeableConcept *specialty;
/* description: The location(s) at which this practitioner provides care. */
	int location_count;
	struct Reference *location;
/* description: The list of healthcare services that this worker provides for this role's Organization/Location(s). */
	int healthcareService_count;
	struct Reference *healthcareService;
/* description: The contact details of communication devices available relevant to the specific PractitionerRole. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites. */
	int contact_count;
	struct ExtendedContactDetail *contact;
/* description: Collection of characteristics (attributes). */
	int characteristic_count;
	struct CodeableConcept *characteristic;
/* description: A language the practitioner can use in patient communication. The practitioner may know several languages (listed in practitioner.communication), however these are the languages that could be advertised in a directory for a patient to search. */
	int communication_count;
	struct CodeableConcept *communication;
/* description: A collection of times the practitioner is available or performing this role at the location and/or healthcareservice. */
	struct Availability *availability;
/* description:  Technical endpoints providing access to services operated for the practitioner with this role. Commonly used for locating scheduling services, or identifying where to send referrals electronically. */
	int endpoint_count;
	struct Reference *endpoint;
};
typedef struct PractitionerRole PractitionerRole;

/* description: An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing. */
struct Procedure {
/* description: This is a Procedure resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: A reference to a resource that contains details of the request for this procedure. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A larger event of which this particular procedure is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code specifying the state of the procedure. Generally, this will be the in-progress or completed state. */
	code status;
/* description: Captures the reason for the current state of the procedure. */
	struct CodeableConcept *statusReason;
/* description: A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure"). */
	int category_count;
	struct CodeableConcept *category;
/* description: The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy"). */
	struct CodeableConcept *code_;
/* description: On whom or on what the procedure was performed. This is usually an individual human, but can also be performed on animals, groups of humans or animals, organizations or practitioners (for licensing), locations or devices (for safety inspections or regulatory authorizations).  If the actual focus of the procedure is different from the subject, the focus element specifies the actual focus of the procedure. */
	struct Reference *subject;
/* description: Who is the target of the procedure when it is not the subject of record only.  If focus is not present, then subject is the focus.  If focus is present and the subject is one of the targets of the procedure, include subject as a focus as well. If focus is present and the subject is not included in focus, it implies that the procedure was only targeted on the focus. For example, when a caregiver is given education for a patient, the caregiver would be the focus and the procedure record is associated with the subject (e.g. patient).  For example, use focus when recording the target of the education, training, or counseling is the parent or relative of a patient. */
	struct Reference *focus;
/* description: The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
	struct Period *occurrencePeriod;
/* description: Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
/* pattern: ^^[\s\S]+$$ */
	string occurrenceString;
/* description: Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
	struct Age *occurrenceAge;
/* description: Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
	struct Range *occurrenceRange;
/* description: Estimated or actual date, date-time, period, or age when the procedure did occur or is occurring.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured. */
	struct Timing *occurrenceTiming;
/* description: The date the occurrence of the procedure was first captured in the record regardless of Procedure.status (potentially after the occurrence of the event). */
	dateTime recorded;
/* description: Individual who recorded the record and takes responsibility for its content. */
	struct Reference *recorder;
/* description: Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report. */
/* pattern: ^true|false$ */
	boolean reportedBoolean;
/* description: Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report. */
	struct Reference *reportedReference;
/* description: Indicates who or what performed the procedure and how they were involved. */
	int performer_count;
	struct Procedure_Performer *performer;
/* description: The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant. */
	struct Reference *location;
/* description: The coded reason or reference why the procedure was performed. This may be a coded entity of some type, be present as text, or be a reference to one of several resources that justify the procedure. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion. */
	int bodySite_count;
	struct CodeableConcept *bodySite;
/* description: Indicates the body structure on the subject's body where the procedure was performed. */
	struct Reference *bodyStructure;
/* description: The outcome of the procedure - did it resolve the reasons for the procedure being performed? */
	struct CodeableConcept *outcome;
/* description: This could be a histology result, pathology report, surgical report, etc. */
	int report_count;
	struct Reference *report;
/* description: Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues. */
	int complication_count;
	struct CodeableReference *complication;
/* description: If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used. CarePlan can reference the Procedure via CarePlan.addresses. */
	int followUp_count;
	struct CodeableReference *followUp;
/* description: Any other notes and comments about the procedure. */
	int note_count;
	struct Annotation *note;
/* description: A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure. */
	int focalDevice_count;
	struct Procedure_FocalDevice *focalDevice;
/* description: Identifies medications, devices and any other substance used as part of the procedure. */
	int used_count;
	struct CodeableReference *used;
/* description: Other resources from the patient record that may be relevant to the procedure.  The information from these resources was either used to create the instance or is provided to help with its interpretation. This extension should not be used if more specific inline elements or extensions are available. */
	int supportingInfo_count;
	struct Reference *supportingInfo;
};
typedef struct Procedure Procedure;

/* description: An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing. */
struct Procedure_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist. */
	struct CodeableConcept *function;
/* description: Indicates who or what performed the procedure. */
	struct Reference *actor;
/* description: The Organization the Patient, RelatedPerson, Device, CareTeam, and HealthcareService was acting on behalf of. */
	struct Reference *onBehalfOf;
/* description: Time period during which the performer performed the procedure. */
	struct Period *period;
};
typedef struct Procedure_Performer Procedure_Performer;

/* description: An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing. */
struct Procedure_FocalDevice {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of change that happened to the device during the procedure. */
	struct CodeableConcept *action;
/* description: The device that was manipulated (changed) during the procedure. */
	struct Reference *manipulated;
};
typedef struct Procedure_FocalDevice Procedure_FocalDevice;

/* description: Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. */
struct Provenance {
/* description: This is a Provenance resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity. */
	int target_count;
	struct Reference *target;
/* description: The period during which the activity occurred. */
	struct Period *occurredPeriod;
/* description: The period during which the activity occurred. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurredDateTime;
/* description: The instant of time at which the activity was recorded. */
	instant recorded;
/* description: Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc. */
	int policy_count;
	uri policy;
/* description: Where the activity occurred, if relevant. */
	struct Reference *location;
/* description: The authorization (e.g., PurposeOfUse) that was used during the event being recorded. */
	int authorization_count;
	struct CodeableReference *authorization;
/* description: An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities. */
	struct CodeableConcept *activity;
/* description: Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity. */
	struct Reference *patient;
/* description: This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests). */
	struct Reference *encounter;
/* description: An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place. */
	int agent_count;
	struct Provenance_Agent *agent;
/* description: An entity used in this activity. */
	int entity_count;
	struct Provenance_Entity *entity;
/* description: A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated. */
	int signature_count;
	struct Signature *signature;
};
typedef struct Provenance Provenance;

/* description: Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. */
struct Provenance_Agent {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Functional Role of the agent with respect to the activity. */
	struct CodeableConcept *type;
/* description: The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity. */
	int role_count;
	struct CodeableConcept *role;
/* description: Indicates who or what performed in the event. */
	struct Reference *who;
/* description: The agent that delegated authority to perform the activity performed by the agent.who element. */
	struct Reference *onBehalfOf;
};
typedef struct Provenance_Agent Provenance_Agent;

/* description: Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies. */
struct Provenance_Entity {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: How the entity was used during the activity. */
	code role;
/* description: Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative. */
	struct Reference *what;
/* description: The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which used the entity. */
	int agent_count;
	struct Provenance_Agent *agent;
};
typedef struct Provenance_Entity Provenance_Entity;

/* description: A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
struct Questionnaire {
/* description: This is a Questionnaire resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the questionnaire. */
	string title;
/* description: The current state of this questionnaire. */
	code status;
/* description: A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the questionnaire was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the questionnaire. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the questionnaire from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaires. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the questionnaire is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this questionnaire is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the questionnaire content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the {{title}}. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the {{title}}. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: The URL of a Questionnaire that this Questionnaire is based on. */
	int derivedFrom_count;
	canonical derivedFrom;
/* description: The types of subjects that can be the subject of responses created for the questionnaire. */
	int subjectType_count;
	code subjectType;
/* description: An identifier for this collection of questions in a particular terminology such as LOINC. */
	int code_count;
	struct Coding *code_;
/* description: A particular question, question grouping or display text that is part of the questionnaire. */
	int item_count;
	struct Questionnaire_Item *item;
};
typedef struct Questionnaire Questionnaire;

/* description: A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
struct Questionnaire_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource. */
	string linkId;
/* description: This element is a URI that refers to an [ElementDefinition](elementdefinition.html) or to an [ObservationDefinition](observationdefinition.html) that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in [Comments](questionnaire.html#definition), below. */
	uri definition;
/* description: A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers). */
	int code_count;
	struct Coding *code_;
/* description: A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire. */
	string prefix;
/* description: The name of a section, the text of a question or text content for a display item. */
	string text;
/* description: The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, Coding, etc.). */
	code type;
/* description: A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true. */
	int enableWhen_count;
	struct Questionnaire_EnableWhen *enableWhen;
/* description: Controls how multiple enableWhen values are interpreted -  whether all or any must be true. */
	code enableBehavior;
/* description: Indicates if and how items that are disabled (because enableWhen evaluates to 'false') should be displayed. */
	code disabledDisplay;
/* description: An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire. */
	boolean required;
/* description: An indication, if true, that a QuestionnaireResponse for this item may include multiple answers associated with a single instance of this item (for question-type items) or multiple repetitions of the item (for group-type items). */
	boolean repeats;
/* description: An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire. */
	boolean readOnly;
/* description: The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse. */
	integer maxLength;
/* description: For items that have a defined set of allowed answers (via answerOption or answerValueSet), indicates whether values *other* than those specified can be selected. */
	code answerConstraint;
/* description: A reference to a value set containing a list of values representing permitted answers for a question. */
	canonical answerValueSet;
/* description: One of the permitted answers for the question. */
	int answerOption_count;
	struct Questionnaire_AnswerOption *answerOption;
/* description: One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input. */
	int initial_count;
	struct Questionnaire_Initial *initial;
/* description: Text, questions and other groups to be nested beneath a question or group. */
	int item_count;
	struct Questionnaire_Item *item;
};
typedef struct Questionnaire_Item Questionnaire_Item;

/* description: A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
struct Questionnaire_EnableWhen {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The linkId for the question whose answer (or lack of answer) governs whether this item is enabled. */
	string question;
/* description: Specifies the criteria by which the question is enabled. */
	code operator;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
/* pattern: ^true|false$ */
	boolean answerBoolean;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number answerDecimal;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number answerInteger;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string answerDate;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string answerDateTime;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string answerTime;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
/* pattern: ^^[\s\S]+$$ */
	string answerString;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
	struct Coding *answerCoding;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
	struct Quantity *answerQuantity;
/* description: A value that the referenced question is tested using the specified operator in order for the item to be enabled.  If there are multiple answers, a match on any of the answers suffices.  If different behavior is desired (all must match, at least 2 must match, etc.), consider using the enableWhenExpression extension. */
	struct Reference *answerReference;
};
typedef struct Questionnaire_EnableWhen Questionnaire_EnableWhen;

/* description: A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
struct Questionnaire_AnswerOption {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A potential answer that's allowed as the answer to this question. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: A potential answer that's allowed as the answer to this question. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: A potential answer that's allowed as the answer to this question. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: A potential answer that's allowed as the answer to this question. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: A potential answer that's allowed as the answer to this question. */
	struct Coding *valueCoding;
/* description: A potential answer that's allowed as the answer to this question. */
	struct Reference *valueReference;
/* description: Indicates whether the answer value is selected when the list of possible answers is initially shown. */
	boolean initialSelected;
};
typedef struct Questionnaire_AnswerOption Questionnaire_AnswerOption;

/* description: A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection. */
struct Questionnaire_Initial {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actual value to for an initial answer. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The actual value to for an initial answer. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The actual value to for an initial answer. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The actual value to for an initial answer. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: The actual value to for an initial answer. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The actual value to for an initial answer. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The actual value to for an initial answer. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The actual value to for an initial answer. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The actual value to for an initial answer. */
	struct Attachment *valueAttachment;
/* description: The actual value to for an initial answer. */
	struct Coding *valueCoding;
/* description: The actual value to for an initial answer. */
	struct Quantity *valueQuantity;
/* description: The actual value to for an initial answer. */
	struct Reference *valueReference;
};
typedef struct Questionnaire_Initial Questionnaire_Initial;

/* description: A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
struct QuestionnaireResponse {
/* description: This is a QuestionnaireResponse resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this questionnaire response by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan, proposal or order that is fulfilled in whole or in part by this questionnaire response.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of. */
	int partOf_count;
	struct Reference *partOf;
/* description: The Questionnaire that defines and organizes the questions for which answers are being provided. */
	canonical questionnaire;
/* description: The current state of the questionnaire response. */
	code status;
/* description: The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information. */
	struct Reference *subject;
/* description: The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated. */
	struct Reference *encounter;
/* description: The date and/or time that this questionnaire response was last modified by the user - e.g. changing answers or revising status. */
	dateTime authored;
/* description: The individual or device that received the answers to the questions in the QuestionnaireResponse and recorded them in the system. */
	struct Reference *author;
/* description: The individual or device that answered the questions about the subject. */
	struct Reference *source;
/* description: A group or question item from the original questionnaire for which answers are provided. */
	int item_count;
	struct QuestionnaireResponse_Item *item;
};
typedef struct QuestionnaireResponse QuestionnaireResponse;

/* description: A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
struct QuestionnaireResponse_Item {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource. */
	string linkId;
/* description: A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item. */
	uri definition;
/* description: Text that is displayed above the contents of the group or as the text of the question being answered. */
	string text;
/* description: The respondent's answer(s) to the question. */
	int answer_count;
	struct QuestionnaireResponse_Answer *answer;
/* description: Sub-questions, sub-groups or display items nested beneath a group. */
	int item_count;
	struct QuestionnaireResponse_Item *item;
};
typedef struct QuestionnaireResponse_Item QuestionnaireResponse_Item;

/* description: A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to. */
struct QuestionnaireResponse_Answer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
	struct Attachment *valueAttachment;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
	struct Coding *valueCoding;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
	struct Quantity *valueQuantity;
/* description: The answer (or one of the answers) provided by the respondent to the question. */
	struct Reference *valueReference;
/* description: Nested groups and/or questions found within this particular answer. */
	int item_count;
	struct QuestionnaireResponse_Item *item;
};
typedef struct QuestionnaireResponse_Answer QuestionnaireResponse_Answer;

/* description: Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product. */
struct RegulatedAuthorization {
/* description: This is a RegulatedAuthorization resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier for the authorization, typically assigned by the authorizing body. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The product type, treatment, facility or activity that is being authorized. */
	int subject_count;
	struct Reference *subject;
/* description: Overall type of this authorization, for example drug marketing approval, orphan drug designation. */
	struct CodeableConcept *type;
/* description: General textual supporting information. */
	markdown description;
/* description: The territory (e.g., country, jurisdiction etc.) in which the authorization has been granted. */
	int region_count;
	struct CodeableConcept *region;
/* description: The status that is authorised e.g. approved. Intermediate states and actions can be tracked with cases and applications. */
	struct CodeableConcept *status;
/* description: The date at which the current status was assigned. */
	dateTime statusDate;
/* description: The time period in which the regulatory approval, clearance or licencing is in effect. As an example, a Marketing Authorization includes the date of authorization and/or an expiration date. */
	struct Period *validityPeriod;
/* description: Condition for which the use of the regulated product applies. */
	int indication_count;
	struct CodeableReference *indication;
/* description: The intended use of the product, e.g. prevention, treatment, diagnosis. */
	struct CodeableConcept *intendedUse;
/* description: The legal or regulatory framework against which this authorization is granted, or other reasons for it. */
	int basis_count;
	struct CodeableConcept *basis;
/* description: The organization that has been granted this authorization, by some authoritative body (the 'regulator'). */
	struct Reference *holder;
/* description: The regulatory authority or authorizing body granting the authorization. For example, European Medicines Agency (EMA), Food and Drug Administration (FDA), Health Canada (HC), etc. */
	struct Reference *regulator;
/* description: Additional information or supporting documentation about the authorization. */
	int attachedDocument_count;
	struct Reference *attachedDocument;
/* description: The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page). */
	struct RegulatedAuthorization_Case *case_;
};
typedef struct RegulatedAuthorization RegulatedAuthorization;

/* description: Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product. */
struct RegulatedAuthorization_Case {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier by which this case can be referenced. */
	struct Identifier *identifier;
/* description: The defining type of case. */
	struct CodeableConcept *type;
/* description: The status associated with the case. */
	struct CodeableConcept *status;
/* description: Relevant date for this case. */
	struct Period *datePeriod;
/* description: Relevant date for this case. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string dateDateTime;
/* description: A regulatory submission from an organization to a regulator, as part of an assessing case. Multiple applications may occur over time, with more or different information to support or modify the submission or the authorization. The applications can be considered as steps within the longer running case or procedure for this authorization process. */
	int application_count;
	struct RegulatedAuthorization_Case *application;
};
typedef struct RegulatedAuthorization_Case RegulatedAuthorization_Case;

/* description: Information about a person that is involved in a patient's health or the care for a patient, but who is not the primary target of healthcare. */
struct RelatedPerson {
/* description: This is a RelatedPerson resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for a person within a particular scope. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether this related person record is in active use. */
	boolean active;
/* description: The patient this person is related to. */
	struct Reference *patient;
/* description: The nature of the relationship between the related person and the patient. */
	int relationship_count;
	struct CodeableConcept *relationship;
/* description: A name associated with the person. */
	int name_count;
	struct HumanName *name;
/* description: A contact detail for the person, e.g. a telephone number or an email address. */
	int telecom_count;
	struct ContactPoint *telecom;
/* description: Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes. */
	code gender;
/* description: The date on which the related person was born. */
	date birthDate;
/* description: Address where the related person can be contacted or visited. */
	int address_count;
	struct Address *address;
/* description: Image of the person. */
	int photo_count;
	struct Attachment *photo;
/* description: The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown. */
	struct Period *period;
/* description: A language which may be used to communicate with the related person about the patient's health. */
	int communication_count;
	struct RelatedPerson_Communication *communication;
};
typedef struct RelatedPerson RelatedPerson;

/* description: Information about a person that is involved in a patient's health or the care for a patient, but who is not the primary target of healthcare. */
struct RelatedPerson_Communication {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language which may be used to communicate with the individual. */
	struct CodeableConcept *language;
/* description: Indicates whether or not the related person prefers this language (over other languages he or she masters up a certain level). */
	boolean preferred;
};
typedef struct RelatedPerson_Communication RelatedPerson_Communication;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration {
/* description: This is a RequestOrchestration resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Allows a service to provide a unique, business identifier for the request. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: A plan, proposal or order that is fulfilled in whole or in part by this request. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Completed or terminated request(s) whose function is taken by this new request. */
	int replaces_count;
	struct Reference *replaces;
/* description: A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time. */
	struct Identifier *groupIdentifier;
/* description: The current state of the request. For request orchestrations, the status reflects the status of all the requests in the orchestration. */
	code status;
/* description: Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain. */
	code intent;
/* description: Indicates how quickly the request should be addressed with respect to other requests. */
	code priority;
/* description: A code that identifies what the overall request orchestration is. */
	struct CodeableConcept *code_;
/* description: The subject for which the request orchestration was created. */
	struct Reference *subject;
/* description: Describes the context of the request orchestration, if any. */
	struct Reference *encounter;
/* description: Indicates when the request orchestration was created. */
	dateTime authoredOn;
/* description: Provides a reference to the author of the request orchestration. */
	struct Reference *author;
/* description: Describes the reason for the request orchestration in coded or textual form. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Goals that are intended to be achieved by following the requests in this RequestOrchestration. */
	int goal_count;
	struct Reference *goal;
/* description: Provides a mechanism to communicate additional information about the response. */
	int note_count;
	struct Annotation *note;
/* description: The actions, if any, produced by the evaluation of the artifact. */
	int action_count;
	struct RequestOrchestration_Action *action;
};
typedef struct RequestOrchestration RequestOrchestration;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration_Action {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The linkId of the action from the PlanDefinition that corresponds to this action in the RequestOrchestration resource. */
	string linkId;
/* description: A user-visible prefix for the action. For example a section or item numbering such as 1. or A. */
	string prefix;
/* description: The title of the action displayed to a user. */
	string title;
/* description: A short description of the action used to provide a summary to display to the user. */
	markdown description;
/* description: A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically. */
	markdown textEquivalent;
/* description: Indicates how quickly the action should be addressed with respect to other actions. */
	code priority;
/* description: A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template. */
	int code_count;
	struct CodeableConcept *code_;
/* description: Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources. */
	int documentation_count;
	struct RelatedArtifact *documentation;
/* description: Goals that are intended to be achieved by following the requests in this action. */
	int goal_count;
	struct Reference *goal;
/* description: An expression that describes applicability criteria, or start/stop conditions for the action. */
	int condition_count;
	struct RequestOrchestration_Condition *condition;
/* description: Defines input data requirements for the action. */
	int input_count;
	struct RequestOrchestration_Input *input;
/* description: Defines the outputs of the action, if any. */
	int output_count;
	struct RequestOrchestration_Output *output;
/* description: A relationship to another action such as "before" or "30-60 minutes after start of". */
	int relatedAction_count;
	struct RequestOrchestration_RelatedAction *relatedAction;
/* description: An optional value describing when the action should be performed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string timingDateTime;
/* description: An optional value describing when the action should be performed. */
	struct Age *timingAge;
/* description: An optional value describing when the action should be performed. */
	struct Period *timingPeriod;
/* description: An optional value describing when the action should be performed. */
	struct Duration *timingDuration;
/* description: An optional value describing when the action should be performed. */
	struct Range *timingRange;
/* description: An optional value describing when the action should be performed. */
	struct Timing *timingTiming;
/* description: Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc. */
	struct CodeableReference *location;
/* description: The participant that should perform or be responsible for this action. */
	int participant_count;
	struct RequestOrchestration_Participant *participant;
/* description: The type of action to perform (create, update, remove). */
	struct CodeableConcept *type;
/* description: Defines the grouping behavior for the action and its children. */
	code groupingBehavior;
/* description: Defines the selection behavior for the action and its children. */
	code selectionBehavior;
/* description: Defines expectations around whether an action is required. */
	code requiredBehavior;
/* description: Defines whether the action should usually be preselected. */
	code precheckBehavior;
/* description: Defines whether the action can be selected multiple times. */
	code cardinalityBehavior;
/* description: The resource that is the target of the action (e.g. CommunicationRequest). */
	struct Reference *resource;
/* description: A reference to an ActivityDefinition that describes the action to be taken in detail, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured. */
/* pattern: ^\S*$ */
	string definitionCanonical;
/* description: A reference to an ActivityDefinition that describes the action to be taken in detail, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured. */
/* pattern: ^\S*$ */
	string definitionUri;
/* description: A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input. */
	canonical transform;
/* description: Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result. */
	int dynamicValue_count;
	struct RequestOrchestration_DynamicValue *dynamicValue;
/* description: Sub actions. */
	int action_count;
	struct RequestOrchestration_Action *action;
};
typedef struct RequestOrchestration_Action RequestOrchestration_Action;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration_Condition {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of condition. */
	code kind;
/* description: An expression that returns true or false, indicating whether or not the condition is satisfied. */
	struct Expression *expression;
};
typedef struct RequestOrchestration_Condition RequestOrchestration_Condition;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration_Input {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers. */
	string title;
/* description: Defines the data that is to be provided as input to the action. */
	struct DataRequirement *requirement;
/* description: Points to an existing input or output element that provides data to this input. */
	id relatedData;
};
typedef struct RequestOrchestration_Input RequestOrchestration_Input;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration_Output {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers. */
	string title;
/* description: Defines the data that results as output from the action. */
	struct DataRequirement *requirement;
/* description: Points to an existing input or output element that is results as output from the action. */
	string relatedData;
};
typedef struct RequestOrchestration_Output RequestOrchestration_Output;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration_RelatedAction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The element id of the target related action. */
	id targetId;
/* description: The relationship of this action to the related action. */
	code relationship;
/* description: The relationship of the end of this action to the related action. */
	code endRelationship;
/* description: A duration or range of durations to apply to the relationship. For example, 30-60 minutes before. */
	struct Duration *offsetDuration;
/* description: A duration or range of durations to apply to the relationship. For example, 30-60 minutes before. */
	struct Range *offsetRange;
};
typedef struct RequestOrchestration_RelatedAction RequestOrchestration_RelatedAction;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of participant in the action. */
	code type;
/* description: The type of participant in the action. */
	canonical typeCanonical;
/* description: The type of participant in the action. */
	struct Reference *typeReference;
/* description: The role the participant should play in performing the described action. */
	struct CodeableConcept *role;
/* description: Indicates how the actor will be involved in the action - author, reviewer, witness, etc. */
	struct CodeableConcept *function;
/* description: A reference to the actual participant. */
/* pattern: ^\S*$ */
	string actorCanonical;
/* description: A reference to the actual participant. */
	struct Reference *actorReference;
};
typedef struct RequestOrchestration_Participant RequestOrchestration_Participant;

/* description: A set of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one". */
struct RequestOrchestration_DynamicValue {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). */
	string path;
/* description: An expression specifying the value of the customized element. */
	struct Expression *expression;
};
typedef struct RequestOrchestration_DynamicValue RequestOrchestration_DynamicValue;

/* description: A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals. */
struct Requirements {
/* description: This is a Requirements resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this Requirements when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Requirements is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Requirements is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this Requirements when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the Requirements when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Requirements author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the Requirements. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the Requirements. */
	string title;
/* description: The status of this Requirements. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this Requirements is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the Requirements was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the Requirements changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the Requirements. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the requirements. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Requirements instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the Requirements is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this Requirements is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the Requirements and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Requirements. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: Another set of Requirements that this set of Requirements builds on and updates. */
	int derivedFrom_count;
	canonical derivedFrom;
/* description: A reference to another artifact that created this set of requirements. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere. */
	int reference_count;
	url reference;
/* description: An actor these requirements are in regard to. */
	int actor_count;
	canonical actor;
/* description: The actual statement of requirement, in markdown format. */
	int statement_count;
	struct Requirements_Statement *statement;
};
typedef struct Requirements Requirements;

/* description: A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals. */
struct Requirements_Statement {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Key that identifies this statement (unique within this resource). */
	id key;
/* description: A short human usable label for this statement. */
	string label;
/* description: A short human usable label for this statement. */
	int conformance_count;
	code conformance;
/* description: This boolean flag is set to true of the text of the requirement is conditional on something e.g. it includes lanauage like 'if x then y'. This conditionality flag is introduced for purposes of filtering and colour highlighting etc. */
	boolean conditionality;
/* description: The actual requirement for human consumption. */
	markdown requirement;
/* description: Another statement on one of the requirements that this requirement clarifies or restricts. */
	string derivedFrom;
/* description: A larger requirement that this requirement helps to refine and enable. */
	string parent;
/* description: A reference to another artifact that satisfies this requirement. This could be a Profile, extension, or an element in one of those, or a CapabilityStatement, OperationDefinition, SearchParameter, CodeSystem(/code), ValueSet, Libary etc. */
	int satisfiedBy_count;
	url satisfiedBy;
/* description: A reference to another artifact that created this requirement. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere. */
	int reference_count;
	url reference;
/* description: Who asked for this statement to be a requirement. By default, it's assumed that the publisher knows who it is if it matters. */
	int source_count;
	struct Reference *source;
};
typedef struct Requirements_Statement Requirements_Statement;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy {
/* description: This is a ResearchStudy resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Canonical identifier for this study resource, represented as a globally unique URI. */
	uri url_;
/* description: Identifiers assigned to this research study by the sponsor or other systems. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The business version for the study record. */
	string version;
/* description: Name for this study (computer friendly). */
	string name;
/* description: The human readable name of the research study. */
	string title;
/* description: Additional names for the study. */
	int label_count;
	struct ResearchStudy_Label *label;
/* description: The set of steps expected to be performed as part of the execution of the study. */
	int protocol_count;
	struct Reference *protocol;
/* description: A larger research study of which this particular study is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: Citations, references, URLs and other related documents.  When using relatedArtifact to share URLs, the relatedArtifact.type will often be set to one of "documentation" or "supported-with" and the URL value will often be in relatedArtifact.document.url but another possible location is relatedArtifact.resource when it is a canonical URL. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: The date (and optionally time) when the ResearchStudy Resource was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ResearchStudy Resource changes. */
	dateTime date_;
/* description: The publication state of the resource (not of the study). */
	code status;
/* description: The type of study based upon the intent of the study activities. A classification of the intent of the study. */
	struct CodeableConcept *primaryPurposeType;
/* description: The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation. */
	struct CodeableConcept *phase;
/* description: Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc. */
	int studyDesign_count;
	struct CodeableConcept *studyDesign;
/* description: The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about. */
	int focus_count;
	struct CodeableReference *focus;
/* description: The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code. */
	int condition_count;
	struct CodeableConcept *condition;
/* description: Key terms to aid in searching for or filtering the study. */
	int keyword_count;
	struct CodeableConcept *keyword;
/* description: A country, state or other area where the study is taking place rather than its precise geographic location or address. */
	int region_count;
	struct CodeableConcept *region;
/* description: A brief text for explaining the study. */
	markdown descriptionSummary;
/* description: A detailed and human-readable narrative of the study. E.g., study abstract. */
	markdown description;
/* description: Identifies the start date and the expected (or actual, depending on status) end date for the study. */
	struct Period *period;
/* description: A facility in which study activities are conducted. */
	int site_count;
	struct Reference *site;
/* description: Comments made about the study by the performer, subject or other participants. */
	int note_count;
	struct Annotation *note;
/* description: Additional grouping mechanism or categorization of a research study. Example: FDA regulated device, FDA regulated drug, MPG Paragraph 23b (a German legal requirement), IRB-exempt, etc. Implementation Note: do not use the classifier element to support existing semantics that are already supported thru explicit elements in the resource. */
	int classifier_count;
	struct CodeableConcept *classifier;
/* description: Sponsors, collaborators, and other parties. */
	int associatedParty_count;
	struct ResearchStudy_AssociatedParty *associatedParty;
/* description: Status of study with time for that status. */
	int progressStatus_count;
	struct ResearchStudy_ProgressStatus *progressStatus;
/* description: A description and/or code explaining the premature termination of the study. */
	struct CodeableConcept *whyStopped;
/* description: Target or actual group of participants enrolled in study. */
	struct ResearchStudy_Recruitment *recruitment;
/* description: Describes an expected event or sequence of events for one of the subjects of a study. E.g. for a living subject: exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up. E.g. for a stability study: {store sample from lot A at 25 degrees for 1 month}, {store sample from lot A at 40 degrees for 1 month}. */
	int comparisonGroup_count;
	struct ResearchStudy_ComparisonGroup *comparisonGroup;
/* description: A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study. */
	int objective_count;
	struct ResearchStudy_Objective *objective;
/* description: An "outcome measure", "endpoint", "effect measure" or "measure of effect" is a specific measurement or observation used to quantify the effect of experimental variables on the participants in a study, or for observational studies, to describe patterns of diseases or traits or associations with exposures, risk factors or treatment. */
	int outcomeMeasure_count;
	struct ResearchStudy_OutcomeMeasure *outcomeMeasure;
/* description: Link to one or more sets of results generated by the study.  Could also link to a research registry holding the results such as ClinicalTrials.gov. */
	int result_count;
	struct Reference *result;
};
typedef struct ResearchStudy ResearchStudy;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy_Label {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Kind of name. */
	struct CodeableConcept *type;
/* description: The name. */
	string value;
};
typedef struct ResearchStudy_Label ResearchStudy_Label;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy_AssociatedParty {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name of associated party. */
	string name;
/* description: Type of association. */
	struct CodeableConcept *role;
/* description: Identifies the start date and the end date of the associated party in the role. */
	int period_count;
	struct Period *period;
/* description: A categorization other than role for the associated party. */
	int classifier_count;
	struct CodeableConcept *classifier;
/* description: Individual or organization associated with study (use practitionerRole to specify their organisation). */
	struct Reference *party;
};
typedef struct ResearchStudy_AssociatedParty ResearchStudy_AssociatedParty;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy_ProgressStatus {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Label for status or state (e.g. recruitment status). */
	struct CodeableConcept *state;
/* description: An indication of whether or not the date is a known date when the state changed or will change. A value of true indicates a known date. A value of false indicates an estimated date. */
	boolean actual;
/* description: Date range. */
	struct Period *period;
};
typedef struct ResearchStudy_ProgressStatus ResearchStudy_ProgressStatus;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy_Recruitment {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Estimated total number of participants to be enrolled. */
	unsignedInt targetNumber;
/* description: Actual total number of participants enrolled in study. */
	unsignedInt actualNumber;
/* description: Inclusion and exclusion criteria. */
	struct Reference *eligibility;
/* description: Group of participants who were enrolled in study. */
	struct Reference *actualGroup;
};
typedef struct ResearchStudy_Recruitment ResearchStudy_Recruitment;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy_ComparisonGroup {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily. */
	id linkId;
/* description: Unique, human-readable label for this comparisonGroup of the study. */
	string name;
/* description: Categorization of study comparisonGroup, e.g. experimental, active comparator, placebo comparater. */
	struct CodeableConcept *type;
/* description: A succinct description of the path through the study that would be followed by a subject adhering to this comparisonGroup. */
	markdown description;
/* description: Interventions or exposures in this comparisonGroup or cohort. */
	int intendedExposure_count;
	struct Reference *intendedExposure;
/* description: Group of participants who were enrolled in study comparisonGroup. */
	struct Reference *observedGroup;
};
typedef struct ResearchStudy_ComparisonGroup ResearchStudy_ComparisonGroup;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy_Objective {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique, human-readable label for this objective of the study. */
	string name;
/* description: The kind of study objective. */
	struct CodeableConcept *type;
/* description: Free text description of the objective of the study.  This is what the study is trying to achieve rather than how it is going to achieve it (see ResearchStudy.description). */
	markdown description;
};
typedef struct ResearchStudy_Objective ResearchStudy_Objective;

/* description: A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future. */
struct ResearchStudy_OutcomeMeasure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Label for the outcome. */
	string name;
/* description: The parameter or characteristic being assessed as one of the values by which the study is assessed. */
	int type_count;
	struct CodeableConcept *type;
/* description: Description of the outcome. */
	markdown description;
/* description: Structured outcome definition. */
	struct Reference *reference;
};
typedef struct ResearchStudy_OutcomeMeasure ResearchStudy_OutcomeMeasure;

/* description: A ResearchSubject is a participant or object which is the recipient of investigative activities in a research study. */
struct ResearchSubject {
/* description: This is a ResearchSubject resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers assigned to this research subject for a study. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The publication state of the resource (not of the subject). */
	code status;
/* description: The current state (status) of the subject and resons for status change where appropriate. */
	int progress_count;
	struct ResearchSubject_Progress *progress;
/* description: The dates the subject began and ended their participation in the study. */
	struct Period *period;
/* description: Reference to the study the subject is participating in. */
	struct Reference *study;
/* description: The record of the person, animal or other entity involved in the study. */
	struct Reference *subject;
/* description: The name of the arm in the study the subject is expected to follow as part of this study. */
	id assignedComparisonGroup;
/* description: The name of the arm in the study the subject actually followed as part of this study. */
	id actualComparisonGroup;
/* description: A record of the patient's informed agreement to participate in the study. */
	int consent_count;
	struct Reference *consent;
};
typedef struct ResearchSubject ResearchSubject;

/* description: A ResearchSubject is a participant or object which is the recipient of investigative activities in a research study. */
struct ResearchSubject_Progress {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the aspect of the subject's journey that the state refers to. */
	struct CodeableConcept *type;
/* description: The current state of the subject. */
	struct CodeableConcept *subjectState;
/* description: The milestones the subject has passed through. */
	struct CodeableConcept *milestone;
/* description: The reason for the state change.  If coded it should follow the formal subject state model. */
	struct CodeableConcept *reason;
/* description: The date when the new status started. */
	dateTime startDate;
/* description: The date when the state ended. */
	dateTime endDate;
};
typedef struct ResearchSubject_Progress ResearchSubject_Progress;

/* description: An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome. */
struct RiskAssessment {
/* description: This is a RiskAssessment resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifier assigned to the risk assessment. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A reference to the request that is fulfilled by this risk assessment. */
	struct Reference *basedOn;
/* description: A reference to a resource that this risk assessment is part of, such as a Procedure. */
	struct Reference *parent;
/* description: The status of the RiskAssessment, using the same statuses as an Observation. */
	code status;
/* description: The algorithm, process or mechanism used to evaluate the risk. */
	struct CodeableConcept *method;
/* description: The type of the risk assessment performed. */
	struct CodeableConcept *code_;
/* description: The patient or group the risk assessment applies to. */
	struct Reference *subject;
/* description: The encounter where the assessment was performed. */
	struct Reference *encounter;
/* description: The date (and possibly time) the risk assessment was performed. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: The date (and possibly time) the risk assessment was performed. */
	struct Period *occurrencePeriod;
/* description: For assessments or prognosis specific to a particular condition, indicates the condition being assessed. */
	struct Reference *condition;
/* description: The provider, patient, related person, or software application that performed the assessment. */
	struct Reference *performer;
/* description: The reason the risk assessment was performed. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.). */
	int basis_count;
	struct Reference *basis;
/* description: Describes the expected outcome for the subject. */
	int prediction_count;
	struct RiskAssessment_Prediction *prediction;
/* description: A description of the steps that might be taken to reduce the identified risk(s). */
	string mitigation;
/* description: Additional comments about the risk assessment. */
	int note_count;
	struct Annotation *note;
};
typedef struct RiskAssessment RiskAssessment;

/* description: An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome. */
struct RiskAssessment_Prediction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: One of the potential outcomes for the patient (e.g. remission, death,  a particular condition). */
	struct CodeableConcept *outcome;
/* description: Indicates how likely the outcome is (in the specified timeframe). */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number probabilityDecimal;
/* description: Indicates how likely the outcome is (in the specified timeframe). */
	struct Range *probabilityRange;
/* description: Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high). */
	struct CodeableConcept *qualitativeRisk;
/* description: Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.). */
	decimal relativeRisk;
/* description: Indicates the period of time or age range of the subject to which the specified probability applies. */
	struct Period *whenPeriod;
/* description: Indicates the period of time or age range of the subject to which the specified probability applies. */
	struct Range *whenRange;
/* description: Additional information explaining the basis for the prediction. */
	string rationale;
};
typedef struct RiskAssessment_Prediction RiskAssessment_Prediction;

/* description: A container for slots of time that may be available for booking appointments. */
struct Schedule {
/* description: This is a Schedule resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: External Ids for this item. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Whether this schedule record is in active use or should not be used (such as was entered in error). */
	boolean active;
/* description: A broad categorization of the service that is to be performed during this appointment. */
	int serviceCategory_count;
	struct CodeableConcept *serviceCategory;
/* description: The specific service that is to be performed during this appointment. */
	int serviceType_count;
	struct CodeableReference *serviceType;
/* description: The specialty of a practitioner that would be required to perform the service requested in this appointment. */
	int specialty_count;
	struct CodeableConcept *specialty;
/* description: Further description of the schedule as it would be presented to a consumer while searching. */
	string name;
/* description: Slots that reference this schedule resource provide the availability details to these referenced resource(s). */
	int actor_count;
	struct Reference *actor;
/* description: The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates. */
	struct Period *planningHorizon;
/* description: Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated. */
	markdown comment;
};
typedef struct Schedule Schedule;

/* description: A search parameter that defines a named search item that can be used to search/filter on a resource. */
struct SearchParameter {
/* description: This is a SearchParameter resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this search parameter when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the search parameter. */
	string title;
/* description: The status of this search parameter. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the search parameter was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes. */
	dateTime date_;
/* description: The name of the organization or individual tresponsible for the release and ongoing maintenance of the search parameter. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: And how it used. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the search parameter is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this search parameter is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the search parameter and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the search parameter. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter. */
	canonical derivedFrom;
/* description: The label that is recommended to be used in the URL or the parameter name in a parameters resource for this search parameter.  In some cases, servers may need to use a different CapabilityStatement searchParam.name to differentiate between multiple SearchParameters that happen to have the same code. */
	code code_;
/* description: The base resource type(s) that this search parameter can be used against. */
	int base_count;
	code base;
/* description: The type of value that a search parameter may contain, and how the content is interpreted. */
	code type;
/* description: A FHIRPath expression that returns a set of elements for the search parameter. */
	string expression;
/* description: How the search parameter relates to the set of elements returned by evaluating the expression query. */
	code processingMode;
/* description: FHIRPath expression that defines/sets a complex constraint for when this SearchParameter is applicable. */
	string constraint;
/* description: Types of resource (if a resource is referenced). */
	int target_count;
	code target;
/* description: Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match. */
	boolean multipleOr;
/* description: Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match. */
	boolean multipleAnd;
/* description: Comparators supported for the search parameter. */
	int comparator_count;
	code comparator;
/* description: A modifier supported for the search parameter. */
	int modifier_count;
	code modifier;
/* description: Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type. */
	int chain_count;
	string chain;
/* description: Used to define the parts of a composite search parameter. */
	int component_count;
	struct SearchParameter_Component *component;
};
typedef struct SearchParameter SearchParameter;

/* description: A search parameter that defines a named search item that can be used to search/filter on a resource. */
struct SearchParameter_Component {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The definition of the search parameter that describes this part. */
	canonical definition;
/* description: A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression. */
	string expression;
};
typedef struct SearchParameter_Component SearchParameter_Component;

/* description: A record of a request for service such as diagnostic investigations, treatments, or operations to be performed. */
struct ServiceRequest {
/* description: This is a ServiceRequest resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest. */
	int instantiatesCanonical_count;
	canonical instantiatesCanonical;
/* description: The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest. */
	int instantiatesUri_count;
	uri instantiatesUri;
/* description: Plan/proposal/order fulfilled by this request. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: The request takes the place of the referenced completed or terminated request(s). */
	int replaces_count;
	struct Reference *replaces;
/* description: A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier. */
	struct Identifier *requisition;
/* description: The status of the order. */
	code status;
/* description: Whether the request is a proposal, plan, an original order or a reflex order. */
	code intent;
/* description: A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure"). */
	int category_count;
	struct CodeableConcept *category;
/* description: Indicates how quickly the ServiceRequest should be addressed with respect to other requests. */
	code priority;
/* description: Set this to true if the record is saying that the service/procedure should NOT be performed. */
	boolean doNotPerform;
/* description: A code or reference that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested. */
	struct CodeableReference *code_;
/* description: Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied. */
	int orderDetail_count;
	struct ServiceRequest_OrderDetail *orderDetail;
/* description: An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction). */
	struct Quantity *quantityQuantity;
/* description: An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction). */
	struct Ratio *quantityRatio;
/* description: An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction). */
	struct Range *quantityRange;
/* description: On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans). */
	struct Reference *subject;
/* description: The actual focus of a service request when it is not the subject of record representing something or someone associated with the subject such as a spouse, parent, fetus, or donor. The focus of a service request could also be an existing condition,  an intervention, the subject's diet,  another service request on the subject,  or a body structure such as tumor or implanted device. */
	int focus_count;
	struct Reference *focus;
/* description: An encounter that provides additional information about the healthcare context in which this request is made. */
	struct Reference *encounter;
/* description: The date/time at which the requested service should occur. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: The date/time at which the requested service should occur. */
	struct Period *occurrencePeriod;
/* description: The date/time at which the requested service should occur. */
	struct Timing *occurrenceTiming;
/* description: If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc. */
/* pattern: ^true|false$ */
	boolean asNeededBoolean;
/* description: If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc. */
	struct CodeableConcept *asNeededCodeableConcept;
/* description: When the request transitioned to being actionable. */
	dateTime authoredOn;
/* description: The individual who initiated the request and has responsibility for its activation. */
	struct Reference *requester;
/* description: Desired type of performer for doing the requested service. */
	struct CodeableConcept *performerType;
/* description: The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc. */
	int performer_count;
	struct Reference *performer;
/* description: The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center. */
	int location_count;
	struct CodeableReference *location;
/* description: An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service. */
	int insurance_count;
	struct Reference *insurance;
/* description: Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements. */
	int supportingInfo_count;
	struct CodeableReference *supportingInfo;
/* description: One or more specimens that the laboratory procedure will use. */
	int specimen_count;
	struct Reference *specimen;
/* description: Anatomic location where the procedure should be performed. This is the target site. */
	int bodySite_count;
	struct CodeableConcept *bodySite;
/* description: Anatomic location where the procedure should be performed. This is the target site. */
	struct Reference *bodyStructure;
/* description: Any other notes and comments made about the service request. For example, internal billing notes. */
	int note_count;
	struct Annotation *note;
/* description: Instructions in terms that are understood by the patient or consumer. */
	int patientInstruction_count;
	struct ServiceRequest_PatientInstruction *patientInstruction;
/* description: Key events in the history of the request. */
	int relevantHistory_count;
	struct Reference *relevantHistory;
};
typedef struct ServiceRequest ServiceRequest;

/* description: A record of a request for service such as diagnostic investigations, treatments, or operations to be performed. */
struct ServiceRequest_OrderDetail {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the context of the order details by reference. */
	struct CodeableReference *parameterFocus;
/* description: The parameter details for the service being requested. */
	int parameter_count;
	struct ServiceRequest_Parameter *parameter;
};
typedef struct ServiceRequest_OrderDetail ServiceRequest_OrderDetail;

/* description: A record of a request for service such as diagnostic investigations, treatments, or operations to be performed. */
struct ServiceRequest_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A value representing the additional detail or instructions for the order (e.g., catheter insertion, body elevation, descriptive device configuration and/or setting instructions). */
	struct CodeableConcept *code_;
/* description: Indicates a value for the order detail. */
	struct Quantity *valueQuantity;
/* description: Indicates a value for the order detail. */
	struct Ratio *valueRatio;
/* description: Indicates a value for the order detail. */
	struct Range *valueRange;
/* description: Indicates a value for the order detail. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Indicates a value for the order detail. */
	struct CodeableConcept *valueCodeableConcept;
/* description: Indicates a value for the order detail. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Indicates a value for the order detail. */
	struct Period *valuePeriod;
};
typedef struct ServiceRequest_Parameter ServiceRequest_Parameter;

/* description: A record of a request for service such as diagnostic investigations, treatments, or operations to be performed. */
struct ServiceRequest_PatientInstruction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Instructions in terms that are understood by the patient or consumer. */
/* pattern: ^^[\s\S]+$$ */
	string instructionMarkdown;
/* description: Instructions in terms that are understood by the patient or consumer. */
	struct Reference *instructionReference;
};
typedef struct ServiceRequest_PatientInstruction ServiceRequest_PatientInstruction;

/* description: A slot of time on a schedule that may be available for booking appointments. */
struct Slot {
/* description: This is a Slot resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: External Ids for this item. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A broad categorization of the service that is to be performed during this appointment. */
	int serviceCategory_count;
	struct CodeableConcept *serviceCategory;
/* description: The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the Schedule resource. */
	int serviceType_count;
	struct CodeableReference *serviceType;
/* description: The specialty of a practitioner that would be required to perform the service requested in this appointment. */
	int specialty_count;
	struct CodeableConcept *specialty;
/* description: The style of appointment or patient that may be booked in the slot (not service type). */
	int appointmentType_count;
	struct CodeableConcept *appointmentType;
/* description: The schedule resource that this slot defines an interval of status information. */
	struct Reference *schedule;
/* description: busy | free | busy-unavailable | busy-tentative | entered-in-error. */
	code status;
/* description: Date/Time that the slot is to begin. */
	instant start;
/* description: Date/Time that the slot is to conclude. */
	instant end;
/* description: This slot has already been overbooked, appointments are unlikely to be accepted for this time. */
	boolean overbooked;
/* description: Comments on the slot to describe any extended information. Such as custom constraints on the slot. */
	string comment;
};
typedef struct Slot Slot;

/* description: A sample to be used for analysis. */
struct Specimen {
/* description: This is a Specimen resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Id for specimen. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures. */
	struct Identifier *accessionIdentifier;
/* description: The availability of the specimen. */
	code status;
/* description: The kind of material that forms the specimen. */
	struct CodeableConcept *type;
/* description: Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance, a biologically-derived product, or a device. */
	struct Reference *subject;
/* description: Time when specimen is received by the testing laboratory for processing or testing. */
	dateTime receivedTime;
/* description: Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen. */
	int parent_count;
	struct Reference *parent;
/* description: Details concerning a service request that required a specimen to be collected. */
	int request_count;
	struct Reference *request;
/* description: This element signifies if the specimen is part of a group or pooled. */
	code combined;
/* description: The role or reason for the specimen in the testing workflow. */
	int role_count;
	struct CodeableConcept *role;
/* description: A physical feature or landmark on a specimen, highlighted for context by the collector of the specimen (e.g. surgeon), that identifies the type of feature as well as its meaning (e.g. the red ink indicating the resection margin of the right lobe of the excised prostate tissue or wire loop at radiologically suspected tumor location). */
	int feature_count;
	struct Specimen_Feature *feature;
/* description: Details concerning the specimen collection. */
	struct Specimen_Collection *collection;
/* description: Details concerning processing and processing steps for the specimen. */
	int processing_count;
	struct Specimen_Processing *processing;
/* description: The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here. */
	int container_count;
	struct Specimen_Container *container;
/* description: A mode or state of being that describes the nature of the specimen. */
	int condition_count;
	struct CodeableConcept *condition;
/* description: To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen). */
	int note_count;
	struct Annotation *note;
};
typedef struct Specimen Specimen;

/* description: A sample to be used for analysis. */
struct Specimen_Feature {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The landmark or feature being highlighted. */
	struct CodeableConcept *type;
/* description: Description of the feature of the specimen. */
	string description;
};
typedef struct Specimen_Feature Specimen_Feature;

/* description: A sample to be used for analysis. */
struct Specimen_Collection {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Person who collected the specimen. */
	struct Reference *collector;
/* description: Time when specimen was collected from subject - the physiologically relevant time. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string collectedDateTime;
/* description: Time when specimen was collected from subject - the physiologically relevant time. */
	struct Period *collectedPeriod;
/* description: The span of time over which the collection of a specimen occurred. */
	struct Duration *duration;
/* description: The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample. */
	struct Quantity *quantity;
/* description: A coded value specifying the technique that is used to perform the procedure. */
	struct CodeableConcept *method;
/* description: A coded value specifying the technique that is used to perform the procedure. */
	struct CodeableReference *device;
/* description: The procedure event during which the specimen was collected (e.g. the surgery leading to the collection of a pathology sample). */
	struct Reference *procedure;
/* description: Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens. */
	struct CodeableReference *bodySite;
/* description: Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection. */
	struct CodeableConcept *fastingStatusCodeableConcept;
/* description: Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection. */
	struct Duration *fastingStatusDuration;
};
typedef struct Specimen_Collection Specimen_Collection;

/* description: A sample to be used for analysis. */
struct Specimen_Processing {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Textual description of procedure. */
	string description;
/* description: A coded value specifying the method used to process the specimen. */
	struct CodeableConcept *method;
/* description: Material used in the processing step. */
	int additive_count;
	struct Reference *additive;
/* description: A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string timeDateTime;
/* description: A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin. */
	struct Period *timePeriod;
};
typedef struct Specimen_Processing Specimen_Processing;

/* description: A sample to be used for analysis. */
struct Specimen_Container {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The device resource for the the container holding the specimen. If the container is in a holder then the referenced device will point to a parent device. */
	struct Reference *device;
/* description: The location of the container holding the specimen. */
	struct Reference *location;
/* description: The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type. */
	struct Quantity *specimenQuantity;
};
typedef struct Specimen_Container Specimen_Container;

/* description: A kind of specimen with associated set of requirements. */
struct SpecimenDefinition {
/* description: This is a SpecimenDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URL that is used to identify this SpecimenDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this SpecimenDefinition is (or will be) published. The URL SHOULD include the major version of the SpecimenDefinition. For more information see Technical and Business Versions. */
	uri url_;
/* description: A business identifier assigned to this SpecimenDefinition. */
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the SpecimenDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the SpecimenDefinition author and is not expected to be globally unique. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the SpecimenDefinition. */
	string title;
/* description: The current state of theSpecimenDefinition. */
	code status;
/* description: A flag to indicate that this SpecimenDefinition is not authored for  genuine usage. */
	boolean experimental;
/* description: For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal. */
	dateTime date_;
/* description: Helps establish the "authority/credibility" of the SpecimenDefinition. May also allow for contact. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the SpecimenDefinition from the consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of specimen definitions. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A jurisdiction in which the SpecimenDefinition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explains why this SpecimeDefinition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: Copyright statement relating to the SpecimenDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SpecimenDefinition. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date. */
	date lastReviewDate;
/* description: The period during which the SpecimenDefinition content was or is planned to be effective. */
	struct Period *effectivePeriod;
/* description: Descriptive topics related to the content of the {{title}}. Topics provide a high-level categorization as well as keywords for the {{title}} that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the {{title}}. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the {{title}}. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the {{title}}. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the {{title}} for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: The canonical URL pointing to another FHIR-defined SpecimenDefinition that is adhered to in whole or in part by this definition. */
	int derivedFromCanonical_count;
	canonical derivedFromCanonical;
/* description: The URL pointing to an externally-defined type of specimen, guideline or other definition that is adhered to in whole or in part by this definition. */
	int derivedFromUri_count;
	uri derivedFromUri;
/* description: A code or group definition that describes the intended subject  from which this kind of specimen is to be collected. */
	struct CodeableConcept *subjectCodeableConcept;
/* description: A code or group definition that describes the intended subject  from which this kind of specimen is to be collected. */
	struct Reference *subjectReference;
/* description: The kind of material to be collected. */
	struct CodeableConcept *typeCollected;
/* description: Preparation of the patient for specimen collection. */
	int patientPreparation_count;
	struct CodeableConcept *patientPreparation;
/* description: Time aspect of specimen collection (duration or offset). */
	string timeAspect;
/* description: The action to be performed for collecting the specimen. */
	int collection_count;
	struct CodeableConcept *collection;
/* description: Specimen conditioned in a container as expected by the testing laboratory. */
	int typeTested_count;
	struct SpecimenDefinition_TypeTested *typeTested;
};
typedef struct SpecimenDefinition SpecimenDefinition;

/* description: A kind of specimen with associated set of requirements. */
struct SpecimenDefinition_TypeTested {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Primary of secondary specimen. */
	boolean isDerived;
/* description: The kind of specimen conditioned for testing expected by lab. */
	struct CodeableConcept *type;
/* description: The preference for this type of conditioned specimen. */
	code preference;
/* description: The specimen's container. */
	struct SpecimenDefinition_Container *container;
/* description: Requirements for delivery and special handling of this kind of conditioned specimen. */
	markdown requirement;
/* description: The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing. */
	struct Duration *retentionTime;
/* description: Specimen can be used by only one test or panel if the value is "true". */
	boolean singleUse;
/* description: Criterion for rejection of the specimen in its container by the laboratory. */
	int rejectionCriterion_count;
	struct CodeableConcept *rejectionCriterion;
/* description: Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process. */
	int handling_count;
	struct SpecimenDefinition_Handling *handling;
/* description: Where the specimen will be tested: e.g., lab, sector, device or any combination of these. */
	int testingDestination_count;
	struct CodeableConcept *testingDestination;
};
typedef struct SpecimenDefinition_TypeTested SpecimenDefinition_TypeTested;

/* description: A kind of specimen with associated set of requirements. */
struct SpecimenDefinition_Container {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of material of the container. */
	struct CodeableConcept *material;
/* description: The type of container used to contain this kind of specimen. */
	struct CodeableConcept *type;
/* description: Color of container cap. */
	struct CodeableConcept *cap;
/* description: The textual description of the kind of container. */
	markdown description;
/* description: The capacity (volume or other measure) of this kind of container. */
	struct Quantity *capacity;
/* description: The minimum volume to be conditioned in the container. */
	struct Quantity *minimumVolumeQuantity;
/* description: The minimum volume to be conditioned in the container. */
/* pattern: ^^[\s\S]+$$ */
	string minimumVolumeString;
/* description: Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA. */
	int additive_count;
	struct SpecimenDefinition_Additive *additive;
/* description: Special processing that should be applied to the container for this kind of specimen. */
	markdown preparation;
};
typedef struct SpecimenDefinition_Container SpecimenDefinition_Container;

/* description: A kind of specimen with associated set of requirements. */
struct SpecimenDefinition_Additive {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA. */
	struct CodeableConcept *additiveCodeableConcept;
/* description: Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA. */
	struct Reference *additiveReference;
};
typedef struct SpecimenDefinition_Additive SpecimenDefinition_Additive;

/* description: A kind of specimen with associated set of requirements. */
struct SpecimenDefinition_Handling {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element. */
	struct CodeableConcept *temperatureQualifier;
/* description: The temperature interval for this set of handling instructions. */
	struct Range *temperatureRange;
/* description: The maximum time interval of preservation of the specimen with these conditions. */
	struct Duration *maxDuration;
/* description: Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'. */
	markdown instruction;
};
typedef struct SpecimenDefinition_Handling SpecimenDefinition_Handling;

/* description: A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
struct StructureDefinition {
/* description: This is a StructureDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. There is no expectation that versions can be placed in a lexicographical sequence, so authors are encouraged to populate the StructureDefinition.versionAlgorithm[x] element to enable comparisons. If there is no managed version available, authors can consider using ISO date/time syntax (e.g., '2023-01-01'). */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the structure definition. */
	string title;
/* description: The status of this structure definition. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the structure definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the structure definition. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the structure definition from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the structure definition is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this structure definition is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.  The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: (DEPRECATED) A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes. */
	int keyword_count;
	struct Coding *keyword;
/* description: The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version. */
	code fhirVersion;
/* description: An external specification that the content is mapped to. */
	int mapping_count;
	struct StructureDefinition_Mapping *mapping;
/* description: Defines the kind of structure that this definition is describing. */
	code kind;
/* description: Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems. */
	boolean abstract;
/* description: Identifies the types of resource or data type elements to which the extension can be applied. For more guidance on using the 'context' element, see the [defining extensions page](defining-extensions.html#context). */
	int context_count;
	struct StructureDefinition_Context *context;
/* description: A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true. */
	int contextInvariant_count;
	string contextInvariant;
/* description: The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models, where they are required. */
	uri type;
/* description: An absolute URI that is the base structure from which this type is derived, either by specialization or constraint. */
	canonical baseDefinition;
/* description: How the type relates to the baseDefinition. */
	code derivation;
/* description: A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition. */
	struct StructureDefinition_Snapshot *snapshot;
/* description: A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies. */
	struct StructureDefinition_Differential *differential;
};
typedef struct StructureDefinition StructureDefinition;

/* description: A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
struct StructureDefinition_Mapping {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An Internal id that is used to identify this mapping set when specific mappings are made. */
	id identity;
/* description: An absolute URI that identifies the specification that this mapping is expressed to. */
	uri uri_;
/* description: A name for the specification that is being mapped to. */
	string name;
/* description: Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage. */
	string comment;
};
typedef struct StructureDefinition_Mapping StructureDefinition_Mapping;

/* description: A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
struct StructureDefinition_Context {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Defines how to interpret the expression that defines what the context of the extension is. */
	code type;
/* description: An expression that defines where an extension can be used in resources. */
	string expression;
};
typedef struct StructureDefinition_Context StructureDefinition_Context;

/* description: A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
struct StructureDefinition_Snapshot {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Captures constraints on each element within the resource. */
	int element_count;
	struct ElementDefinition *element;
};
typedef struct StructureDefinition_Snapshot StructureDefinition_Snapshot;

/* description: A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types. */
struct StructureDefinition_Differential {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Captures constraints on each element within the resource. */
	int element_count;
	struct ElementDefinition *element;
};
typedef struct StructureDefinition_Differential StructureDefinition_Differential;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap {
/* description: This is a StructureMap resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the structure map. */
	string title;
/* description: The status of this structure map. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the structure map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the structure map. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the structure map from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the structure map is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this structure map is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced. */
	int structure_count;
	struct StructureMap_Structure *structure;
/* description: Other maps used by this map (canonical URLs). */
	int import_count;
	canonical import;
/* description: Definition of a constant value used in the map rules. */
	int const_count;
	struct StructureMap_Const *const_;
/* description: Organizes the mapping into managable chunks for human review/ease of maintenance. */
	int group_count;
	struct StructureMap_Group *group;
};
typedef struct StructureMap StructureMap;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Structure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The canonical reference to the structure. */
	canonical url_;
/* description: How the referenced structure is used in this mapping. */
	code mode;
/* description: The name used for this type in the map. */
	string alias;
/* description: Documentation that describes how the structure is used in the mapping. */
	string documentation;
};
typedef struct StructureMap_Structure StructureMap_Structure;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Const {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Other maps used by this map (canonical URLs). */
	id name;
/* description: A FHIRPath expression that is the value of this variable. */
	string value;
};
typedef struct StructureMap_Const StructureMap_Const;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Group {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique name for the group for the convenience of human readers. */
	id name;
/* description: Another group that this group adds rules to. */
	id extends;
/* description: If this is the default rule set to apply for the source type or this combination of types. */
	code typeMode;
/* description: Additional supporting documentation that explains the purpose of the group and the types of mappings within it. */
	string documentation;
/* description: A name assigned to an instance of data. The instance must be provided when the mapping is invoked. */
	int input_count;
	struct StructureMap_Input *input;
/* description: Transform Rule from source to target. */
	int rule_count;
	struct StructureMap_Rule *rule;
};
typedef struct StructureMap_Group StructureMap_Group;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Input {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name for this instance of data. */
	id name;
/* description: Type for this instance of data. */
	string type;
/* description: Mode for this instance of data. */
	code mode;
/* description: Documentation for this instance of data. */
	string documentation;
};
typedef struct StructureMap_Input StructureMap_Input;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Rule {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name of the rule for internal references. */
	id name;
/* description: Source inputs to the mapping. */
	int source_count;
	struct StructureMap_Source *source;
/* description: Content to create because of this mapping rule. */
	int target_count;
	struct StructureMap_Target *target;
/* description: Rules contained in this rule. */
	int rule_count;
	struct StructureMap_Rule *rule;
/* description: Which other rules to apply in the context of this rule. */
	int dependent_count;
	struct StructureMap_Dependent *dependent;
/* description: Documentation for this instance of data. */
	string documentation;
};
typedef struct StructureMap_Rule StructureMap_Rule;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Source {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Type or variable this rule applies to. */
	id context;
/* description: Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content. */
	integer min;
/* description: Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value). */
	string max;
/* description: Specified type for the element. This works as a condition on the mapping - use for polymorphic elements. */
	string type;
/* description: A value to use if there is no existing value in the source object. */
	string defaultValue;
/* description: Optional field for this source. */
	string element;
/* description: How to handle the list mode for this element. */
	code listMode;
/* description: Named context for field, if a field is specified. */
	id variable;
/* description: FHIRPath expression  - must be true or the rule does not apply. */
	string condition;
/* description: FHIRPath expression  - must be true or the mapping engine throws an error instead of completing. */
	string check;
/* description: A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found. */
	string logMessage;
};
typedef struct StructureMap_Source StructureMap_Source;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Target {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Variable this rule applies to. */
	string context;
/* description: Field to create in the context. */
	string element;
/* description: Named context for field, if desired, and a field is specified. */
	id variable;
/* description: If field is a list, how to manage the list. */
	int listMode_count;
	code listMode;
/* description: Internal rule reference for shared list items. */
	id listRuleId;
/* description: How the data is copied / created. */
	code transform;
/* description: Parameters to the transform. */
	int parameter_count;
	struct StructureMap_Parameter *parameter;
};
typedef struct StructureMap_Target StructureMap_Target;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Parameter value - variable or literal. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: Parameter value - variable or literal. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: Parameter value - variable or literal. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: Parameter value - variable or literal. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: Parameter value - variable or literal. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: Parameter value - variable or literal. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: Parameter value - variable or literal. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: Parameter value - variable or literal. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
};
typedef struct StructureMap_Parameter StructureMap_Parameter;

/* description: A Map of relationships between 2 structures that can be used to transform data. */
struct StructureMap_Dependent {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name of a rule or group to apply. */
	id name;
/* description: Parameter to pass to the rule or group. */
	int parameter_count;
	struct StructureMap_Parameter *parameter;
};
typedef struct StructureMap_Dependent StructureMap_Dependent;

/* description: The subscription resource describes a particular client's request to be notified about a SubscriptionTopic. */
struct Subscription {
/* description: This is a Subscription resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A natural language name identifying the subscription. */
	string name;
/* description: The status of the subscription, which marks the server state for managing the subscription. */
	code status;
/* description: The reference to the subscription topic to be notified about. */
	canonical topic;
/* description: Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting. */
	int contact_count;
	struct ContactPoint *contact;
/* description: The time for the server to turn the subscription off. */
	instant end;
/* description: Entity with authorization to make subsequent revisions to the Subscription and also determines what data the subscription is authorized to disclose. */
	struct Reference *managingEntity;
/* description: A description of why this subscription is defined. */
	string reason;
/* description: The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions applicable to that resource are met; otherwise it returns false (i.e., logical AND). */
	int filterBy_count;
	struct Subscription_FilterBy *filterBy;
/* description: The type of channel to send notifications on. */
	struct Coding *channelType;
/* description: The url that describes the actual end-point to send notifications to. */
	url endpoint;
/* description: Channel-dependent information to send as part of the notification (e.g., HTTP Headers). */
	int parameter_count;
	struct Subscription_Parameter *parameter;
/* description: If present, a 'heartbeat' notification (keep-alive) is sent via this channel with an interval period equal to this elements integer value in seconds.  If not present, a heartbeat notification is not sent. */
	unsignedInt heartbeatPeriod;
/* description: If present, the maximum amount of time a server will allow before failing a notification attempt. */
	unsignedInt timeout;
/* description: The MIME type to send the payload in - e.g., `application/fhir+xml` or `application/fhir+json`. Note that:

* clients may request notifications in a specific FHIR version by using the [FHIR Version Parameter](http.html#version-parameter) - e.g., `application/fhir+json; fhirVersion=4.0`.

* additional MIME types can be allowed by channels - e.g., `text/plain` and `text/html` are defined by the Email channel. */
	code contentType;
/* description: How much of the resource content to deliver in the notification payload. The choices are an empty payload, only the resource id, or the full resource content. */
	code content;
/* description: If present, the maximum number of events that will be included in a notification bundle. Note that this is not a strict limit on the number of entries in a bundle, as dependent resources can be included. */
	positiveInt maxCount;
};
typedef struct Subscription Subscription;

/* description: The subscription resource describes a particular client's request to be notified about a SubscriptionTopic. */
struct Subscription_FilterBy {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A resource listed in the `SubscriptionTopic` this `Subscription` references (`SubscriptionTopic.canFilterBy.resource`). This element can be used to differentiate filters for topics that include more than one resource type. */
	uri resource;
/* description: The filter as defined in the `SubscriptionTopic.canFilterBy.filterParameter` element. */
	string filterParameter;
/* description: Comparator applied to this filter parameter. */
	code comparator;
/* description: Modifier applied to this filter parameter. */
	code modifier;
/* description: The literal value or resource path as is legal in search - for example, `Patient/123` or `le1950`. */
	string value;
};
typedef struct Subscription_FilterBy Subscription_FilterBy;

/* description: The subscription resource describes a particular client's request to be notified about a SubscriptionTopic. */
struct Subscription_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Parameter name for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the name would be Authorization. */
	string name;
/* description: Parameter value for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the value would be `Bearer 0193...`. */
	string value;
};
typedef struct Subscription_Parameter Subscription_Parameter;

/* description: The SubscriptionStatus resource describes the state of a Subscription during notifications. */
struct SubscriptionStatus {
/* description: This is a SubscriptionStatus resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The status of the subscription, which marks the server state for managing the subscription. */
	code status;
/* description: The type of event being conveyed with this notification. */
	code type;
/* description: The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) - regardless of how many have been successfully communicated.  This number is NOT incremented for handshake and heartbeat notifications. */
	integer64 eventsSinceSubscriptionStart;
/* description: Detailed information about events relevant to this subscription notification. */
	int notificationEvent_count;
	struct SubscriptionStatus_NotificationEvent *notificationEvent;
/* description: The reference to the Subscription which generated this notification. */
	struct Reference *subscription;
/* description: The reference to the SubscriptionTopic for the Subscription which generated this notification. */
	canonical topic;
/* description: A record of errors that occurred when the server processed a notification. */
	int error_count;
	struct CodeableConcept *error;
};
typedef struct SubscriptionStatus SubscriptionStatus;

/* description: The SubscriptionStatus resource describes the state of a Subscription during notifications. */
struct SubscriptionStatus_NotificationEvent {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Either the sequential number of this event in this subscription context or a relative event number for this notification. */
	integer64 eventNumber;
/* description: The actual time this event occurred on the server. */
	instant timestamp;
/* description: The focus of this event. While this will usually be a reference to the focus resource of the event, it MAY contain a reference to a non-FHIR object. */
	struct Reference *focus;
/* description: Additional context information for this event. Generally, this will contain references to additional resources included with the event (e.g., the Patient relevant to an Encounter), however it MAY refer to non-FHIR objects. */
	int additionalContext_count;
	struct Reference *additionalContext;
};
typedef struct SubscriptionStatus_NotificationEvent SubscriptionStatus_NotificationEvent;

/* description: Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic. */
struct SubscriptionTopic {
/* description: This is a SubscriptionTopic resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this subscription topic when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this subscription topic is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the subscription topic is stored on different servers. */
	uri url_;
/* description: Business identifiers assigned to this subscription topic by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the subscription topic when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Topic author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the subscription topic This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the subscription topic.  For example, "admission". */
	string title;
/* description: The current state of the SubscriptionTopic. */
	code status;
/* description: A flag to indicate that this TopSubscriptionTopicic is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the subscription topic was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the subscription topic changes. */
	dateTime date_;
/* description: Helps establish the "authority/credibility" of the SubscriptionTopic.  May also allow for contact. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the Topic from the consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of code system definitions. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A jurisdiction in which the Topic is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explains why this Topic is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in whole or in part by this SubscriptionTopic. */
	int derivedFrom_count;
	canonical derivedFrom;
/* description: The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date. */
	date lastReviewDate;
/* description: The period during which the SubscriptionTopic content was or is planned to be effective. */
	struct Period *effectivePeriod;
/* description: A definition of a resource-based event that triggers a notification based on the SubscriptionTopic. The criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression. Multiple triggers are considered OR joined (e.g., a resource update matching ANY of the definitions will trigger a notification). */
	int resourceTrigger_count;
	struct SubscriptionTopic_ResourceTrigger *resourceTrigger;
/* description: Event definition which can be used to trigger the SubscriptionTopic. */
	int eventTrigger_count;
	struct SubscriptionTopic_EventTrigger *eventTrigger;
/* description: List of properties by which Subscriptions on the SubscriptionTopic can be filtered. May be defined Search Parameters (e.g., Encounter.patient) or parameters defined within this SubscriptionTopic context (e.g., hub.event). */
	int canFilterBy_count;
	struct SubscriptionTopic_CanFilterBy *canFilterBy;
/* description: List of properties to describe the shape (e.g., resources) included in notifications from this Subscription Topic. */
	int notificationShape_count;
	struct SubscriptionTopic_NotificationShape *notificationShape;
};
typedef struct SubscriptionTopic SubscriptionTopic;

/* description: Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic. */
struct SubscriptionTopic_ResourceTrigger {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The human readable description of this resource trigger for the SubscriptionTopic -  for example, "An Encounter enters the 'in-progress' state". */
	markdown description;
/* description: URL of the Resource that is the type used in this resource trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>. */
	uri resource;
/* description: The FHIR RESTful interaction which can be used to trigger a notification for the SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or UPDATE). If not present, all supported interactions are assumed. */
	int supportedInteraction_count;
	code supportedInteraction;
/* description: The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic. */
	struct SubscriptionTopic_QueryCriteria *queryCriteria;
/* description: The FHIRPath based rules that the server should use to determine when to trigger a notification for this topic. */
	string fhirPathCriteria;
};
typedef struct SubscriptionTopic_ResourceTrigger SubscriptionTopic_ResourceTrigger;

/* description: Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic. */
struct SubscriptionTopic_QueryCriteria {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The FHIR query based rules are applied to the previous resource state (e.g., state before an update). */
	string previous;
/* description: For `create` interactions, should the `previous` criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `create` interactions is unspecified (server discretion). */
	code resultForCreate;
/* description: The FHIR query based rules are applied to the current resource state (e.g., state after an update). */
	string current;
/* description: For 'delete' interactions, should the 'current' query criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `delete` interactions is unspecified (server discretion). */
	code resultForDelete;
/* description: If set to `true`, both the `current` and `previous` query criteria must evaluate `true` to trigger a notification for this topic.  If set to `false` or not present, a notification for this topic will be triggered if either the `current` or `previous` tests evaluate to `true`. */
	boolean requireBoth;
};
typedef struct SubscriptionTopic_QueryCriteria SubscriptionTopic_QueryCriteria;

/* description: Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic. */
struct SubscriptionTopic_EventTrigger {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The human readable description of an event to trigger a notification for the SubscriptionTopic - for example, "Patient Admission, as defined in HL7v2 via message ADT^A01". Multiple values are considered OR joined (e.g., matching any single event listed). */
	markdown description;
/* description: A well-defined event which can be used to trigger notifications from the SubscriptionTopic. */
	struct CodeableConcept *event;
/* description: URL of the Resource that is the focus type used in this event trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>. */
	uri resource;
};
typedef struct SubscriptionTopic_EventTrigger SubscriptionTopic_EventTrigger;

/* description: Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic. */
struct SubscriptionTopic_CanFilterBy {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Description of how this filtering parameter is intended to be used. */
	markdown description;
/* description: URL of the Resource that is the type used in this filter. This is the "focus" of the topic (or one of them if there are more than one). It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present. */
	uri resource;
/* description: Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or topic-defined parameter (like "hub.event") which is a label for the filter. */
	string filterParameter;
/* description: Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter-patient") or the officially-defined URI for a shared filter concept (like "http://example.org/concepts/shared-common-event"). */
	uri filterDefinition;
/* description: Comparators allowed for the filter parameter. */
	int comparator_count;
	code comparator;
/* description: Modifiers allowed for the filter parameter. */
	int modifier_count;
	code modifier;
};
typedef struct SubscriptionTopic_CanFilterBy SubscriptionTopic_CanFilterBy;

/* description: Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic. */
struct SubscriptionTopic_NotificationShape {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: URL of the Resource that is the type used in this shape. This is the 'focus' resource of the topic (or one of them if there are more than one) and the root resource for this shape definition. It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present. */
	uri resource;
/* description: Search-style _include directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them. */
	int include_count;
	string include;
/* description: Search-style _revinclude directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them. */
	int revInclude_count;
	string revInclude;
};
typedef struct SubscriptionTopic_NotificationShape SubscriptionTopic_NotificationShape;

/* description: A homogeneous material with a definite composition. */
struct Substance {
/* description: This is a Substance resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Unique identifier for the substance. For an instance, an identifier associated with the package/container (usually a label affixed directly). */
	int identifier_count;
	struct Identifier *identifier;
/* description: A boolean to indicate if this an instance of a substance or a kind of one (a definition). */
	boolean instance;
/* description: A code to indicate if the substance is actively used. */
	code status;
/* description: A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes. */
	int category_count;
	struct CodeableConcept *category;
/* description: A code (or set of codes) that identify this substance. */
	struct CodeableReference *code_;
/* description: A description of the substance - its appearance, handling requirements, and other usage notes. */
	markdown description;
/* description: When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry. */
	dateTime expiry;
/* description: The amount of the substance. */
	struct Quantity *quantity;
/* description: A substance can be composed of other substances. */
	int ingredient_count;
	struct Substance_Ingredient *ingredient;
};
typedef struct Substance Substance;

/* description: A homogeneous material with a definite composition. */
struct Substance_Ingredient {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The amount of the ingredient in the substance - a concentration ratio. */
	struct Ratio *quantity;
/* description: Another substance that is a component of this substance. */
	struct CodeableConcept *substanceCodeableConcept;
/* description: Another substance that is a component of this substance. */
	struct Reference *substanceReference;
};
typedef struct Substance_Ingredient Substance_Ingredient;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition {
/* description: This is a SubstanceDefinition resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier by which this substance is known. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A business level version identifier of the substance. */
	string version;
/* description: Status of substance within the catalogue e.g. active, retired. */
	struct CodeableConcept *status;
/* description: A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, or a lower level such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant). */
	int classification_count;
	struct CodeableConcept *classification;
/* description: If the substance applies to human or veterinary use. */
	struct CodeableConcept *domain;
/* description: The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard). */
	int grade_count;
	struct CodeableConcept *grade;
/* description: Textual description of the substance. */
	markdown description;
/* description: Supporting literature. */
	int informationSource_count;
	struct Reference *informationSource;
/* description: Textual comment about the substance's catalogue or registry record. */
	int note_count;
	struct Annotation *note;
/* description: The entity that creates, makes, produces or fabricates the substance. This is a set of potential manufacturers but is not necessarily comprehensive. */
	int manufacturer_count;
	struct Reference *manufacturer;
/* description: An entity that is the source for the substance. It may be different from the manufacturer. Supplier is synonymous to a distributor. */
	int supplier_count;
	struct Reference *supplier;
/* description: Moiety, for structural modifications. */
	int moiety_count;
	struct SubstanceDefinition_Moiety *moiety;
/* description: General specifications for this substance. */
	int characterization_count;
	struct SubstanceDefinition_Characterization *characterization;
/* description: General specifications for this substance. */
	int property_count;
	struct SubstanceDefinition_Property *property;
/* description: General information detailing this substance. */
	struct Reference *referenceInformation;
/* description: The average mass of a molecule of a compound compared to 1/12 the mass of carbon 12 and calculated as the sum of the atomic weights of the constituent atoms. */
	int molecularWeight_count;
	struct SubstanceDefinition_MolecularWeight *molecularWeight;
/* description: Structural information. */
	struct SubstanceDefinition_Structure *structure;
/* description: Codes associated with the substance. */
	int code_count;
	struct SubstanceDefinition_Code *code_;
/* description: Names applicable to this substance. */
	int name_count;
	struct SubstanceDefinition_Name *name;
/* description: A link between this substance and another, with details of the relationship. */
	int relationship_count;
	struct SubstanceDefinition_Relationship *relationship;
/* description: Data items specific to nucleic acids. */
	struct Reference *nucleicAcid;
/* description: Data items specific to polymers. */
	struct Reference *polymer;
/* description: Data items specific to proteins. */
	struct Reference *protein;
/* description: Material or taxonomic/anatomical source for the substance. */
	struct SubstanceDefinition_SourceMaterial *sourceMaterial;
};
typedef struct SubstanceDefinition SubstanceDefinition;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Moiety {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Role that the moiety is playing. */
	struct CodeableConcept *role;
/* description: Identifier by which this moiety substance is known. */
	struct Identifier *identifier;
/* description: Textual name for this moiety substance. */
	string name;
/* description: Stereochemistry type. */
	struct CodeableConcept *stereochemistry;
/* description: Optical activity type. */
	struct CodeableConcept *opticalActivity;
/* description: Molecular formula for this moiety of this substance, typically using the Hill system. */
	string molecularFormula;
/* description: Quantitative value for this moiety. */
	struct Quantity *amountQuantity;
/* description: Quantitative value for this moiety. */
/* pattern: ^^[\s\S]+$$ */
	string amountString;
/* description: The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio. */
	struct CodeableConcept *measurementType;
};
typedef struct SubstanceDefinition_Moiety SubstanceDefinition_Moiety;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Characterization {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The method used to elucidate the characterization of the drug substance. Example: HPLC. */
	struct CodeableConcept *technique;
/* description: Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form. */
	struct CodeableConcept *form;
/* description: The description or justification in support of the interpretation of the data file. */
	markdown description;
/* description: The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis. */
	int file_count;
	struct Attachment *file;
};
typedef struct SubstanceDefinition_Characterization SubstanceDefinition_Characterization;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code expressing the type of property. */
	struct CodeableConcept *type;
/* description: A value for the property. */
	struct CodeableConcept *valueCodeableConcept;
/* description: A value for the property. */
	struct Quantity *valueQuantity;
/* description: A value for the property. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: A value for the property. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: A value for the property. */
	struct Attachment *valueAttachment;
};
typedef struct SubstanceDefinition_Property SubstanceDefinition_Property;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_MolecularWeight {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The method by which the molecular weight was determined. */
	struct CodeableConcept *method;
/* description: Type of molecular weight such as exact, average (also known as. number average), weight average. */
	struct CodeableConcept *type;
/* description: Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field. */
	struct Quantity *amount;
};
typedef struct SubstanceDefinition_MolecularWeight SubstanceDefinition_MolecularWeight;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Structure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Stereochemistry type. */
	struct CodeableConcept *stereochemistry;
/* description: Optical activity type. */
	struct CodeableConcept *opticalActivity;
/* description: An expression which states the number and type of atoms present in a molecule of a substance. */
	string molecularFormula;
/* description: Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot. */
	string molecularFormulaByMoiety;
/* description: The molecular weight or weight range (for proteins, polymers or nucleic acids). */
	struct SubstanceDefinition_MolecularWeight *molecularWeight;
/* description: The method used to elucidate the structure of the drug substance. Examples: X-ray, NMR, Peptide mapping, Ligand binding assay. */
	int technique_count;
	struct CodeableConcept *technique;
/* description: The source of information about the structure. */
	int sourceDocument_count;
	struct Reference *sourceDocument;
/* description: A depiction of the structure of the substance. */
	int representation_count;
	struct SubstanceDefinition_Representation *representation;
};
typedef struct SubstanceDefinition_Structure SubstanceDefinition_Structure;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Representation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kind of structural representation (e.g. full, partial). */
	struct CodeableConcept *type;
/* description: The structural representation as a text string in a standard format. */
	string representation;
/* description: The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document. */
	struct CodeableConcept *format;
/* description: An attached file with the structural representation e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file. */
	struct Reference *document;
};
typedef struct SubstanceDefinition_Representation SubstanceDefinition_Representation;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Code {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The specific code. */
	struct CodeableConcept *code_;
/* description: Status of the code assignment, for example 'provisional', 'approved'. */
	struct CodeableConcept *status;
/* description: The date at which the code status was changed as part of the terminology maintenance. */
	dateTime statusDate;
/* description: Any comment can be provided in this field, if necessary. */
	int note_count;
	struct Annotation *note;
/* description: Supporting literature. */
	int source_count;
	struct Reference *source;
};
typedef struct SubstanceDefinition_Code SubstanceDefinition_Code;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Name {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The actual name. */
	string name;
/* description: Name type, for example 'systematic',  'scientific, 'brand'. */
	struct CodeableConcept *type;
/* description: The status of the name, for example 'current', 'proposed'. */
	struct CodeableConcept *status;
/* description: If this is the preferred name for this substance. */
	boolean preferred;
/* description: Human language that the name is written in. */
	int language_count;
	struct CodeableConcept *language;
/* description: The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive. */
	int domain_count;
	struct CodeableConcept *domain;
/* description: The jurisdiction where this name applies. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: A synonym of this particular name, by which the substance is also known. */
	int synonym_count;
	struct SubstanceDefinition_Name *synonym;
/* description: A translation for this name into another human language. */
	int translation_count;
	struct SubstanceDefinition_Name *translation;
/* description: Details of the official nature of this name. */
	int official_count;
	struct SubstanceDefinition_Official *official;
/* description: Supporting literature. */
	int source_count;
	struct Reference *source;
};
typedef struct SubstanceDefinition_Name SubstanceDefinition_Name;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Official {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Which authority uses this official name. */
	struct CodeableConcept *authority;
/* description: The status of the official name, for example 'draft', 'active', 'retired'. */
	struct CodeableConcept *status;
/* description: Date of the official name change. */
	dateTime date_;
};
typedef struct SubstanceDefinition_Official SubstanceDefinition_Official;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_Relationship {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A pointer to another substance, as a resource or just a representational code. */
	struct Reference *substanceDefinitionReference;
/* description: A pointer to another substance, as a resource or just a representational code. */
	struct CodeableConcept *substanceDefinitionCodeableConcept;
/* description: For example "salt to parent", "active moiety", "starting material", "polymorph", "impurity of". */
	struct CodeableConcept *type;
/* description: For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships. */
	boolean isDefining;
/* description: A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other. */
	struct Quantity *amountQuantity;
/* description: A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other. */
	struct Ratio *amountRatio;
/* description: A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other. */
/* pattern: ^^[\s\S]+$$ */
	string amountString;
/* description: For use when the numeric has an uncertain range. */
	struct Ratio *ratioHighLimitAmount;
/* description: An operator for the amount, for example "average", "approximately", "less than". */
	struct CodeableConcept *comparator;
/* description: Supporting literature. */
	int source_count;
	struct Reference *source;
};
typedef struct SubstanceDefinition_Relationship SubstanceDefinition_Relationship;

/* description: The detailed description of a substance, typically at a level beyond what is used for prescribing. */
struct SubstanceDefinition_SourceMaterial {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type. */
	struct CodeableConcept *type;
/* description: The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name. */
	struct CodeableConcept *genus;
/* description: The species of an organism, typically referring to the Latin epithet of the species of the plant/animal. */
	struct CodeableConcept *species;
/* description: An anatomical origin of the source material within an organism. */
	struct CodeableConcept *part;
/* description: The country or countries where the material is harvested. */
	int countryOfOrigin_count;
	struct CodeableConcept *countryOfOrigin;
};
typedef struct SubstanceDefinition_SourceMaterial SubstanceDefinition_SourceMaterial;

/* description: Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction. */
struct SubstanceNucleicAcid {
/* description: This is a SubstanceNucleicAcid resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of the sequence shall be specified based on a controlled vocabulary. */
	struct CodeableConcept *sequenceType;
/* description: The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit. */
	integer numberOfSubunits;
/* description: The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”. */
	string areaOfHybridisation;
/* description: (TBC). */
	struct CodeableConcept *oligoNucleotideType;
/* description: Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times. */
	int subunit_count;
	struct SubstanceNucleicAcid_Subunit *subunit;
};
typedef struct SubstanceNucleicAcid SubstanceNucleicAcid;

/* description: Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction. */
struct SubstanceNucleicAcid_Subunit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts. */
	integer subunit;
/* description: Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured. */
	string sequence;
/* description: The length of the sequence shall be captured. */
	integer length;
/* description: (TBC). */
	struct Attachment *sequenceAttachment;
/* description: The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant. */
	struct CodeableConcept *fivePrime;
/* description: The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant. */
	struct CodeableConcept *threePrime;
/* description: The linkages between sugar residues will also be captured. */
	int linkage_count;
	struct SubstanceNucleicAcid_Linkage *linkage;
/* description: 5.3.6.8.1 Sugar ID (Mandatory). */
	int sugar_count;
	struct SubstanceNucleicAcid_Sugar *sugar;
};
typedef struct SubstanceNucleicAcid_Subunit SubstanceNucleicAcid_Subunit;

/* description: Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction. */
struct SubstanceNucleicAcid_Linkage {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified. */
	string connectivity;
/* description: Each linkage will be registered as a fragment and have an ID. */
	struct Identifier *identifier;
/* description: Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage. */
	string name;
/* description: Residues shall be captured as described in 5.3.6.8.3. */
	string residueSite;
};
typedef struct SubstanceNucleicAcid_Linkage SubstanceNucleicAcid_Linkage;

/* description: Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction. */
struct SubstanceNucleicAcid_Sugar {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Substance ID of the sugar or sugar-like component that make up the nucleotide. */
	struct Identifier *identifier;
/* description: The name of the sugar or sugar-like component that make up the nucleotide. */
	string name;
/* description: The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above. */
	string residueSite;
};
typedef struct SubstanceNucleicAcid_Sugar SubstanceNucleicAcid_Sugar;

/* description: Properties of a substance specific to it being a polymer. */
struct SubstancePolymer {
/* description: This is a SubstancePolymer resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier. */
	struct Identifier *identifier;
/* description: Overall type of the polymer. */
	struct CodeableConcept *class;
/* description: Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic. */
	struct CodeableConcept *geometry;
/* description: Descrtibes the copolymer sequence type (polymer connectivity). */
	int copolymerConnectivity_count;
	struct CodeableConcept *copolymerConnectivity;
/* description: Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder. */
	string modification;
/* description: Todo. */
	int monomerSet_count;
	struct SubstancePolymer_MonomerSet *monomerSet;
/* description: Specifies and quantifies the repeated units and their configuration. */
	int repeat_count;
	struct SubstancePolymer_Repeat *repeat;
};
typedef struct SubstancePolymer SubstancePolymer;

/* description: Properties of a substance specific to it being a polymer. */
struct SubstancePolymer_MonomerSet {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio. */
	struct CodeableConcept *ratioType;
/* description: The starting materials - monomer(s) used in the synthesis of the polymer. */
	int startingMaterial_count;
	struct SubstancePolymer_StartingMaterial *startingMaterial;
};
typedef struct SubstancePolymer_MonomerSet SubstancePolymer_MonomerSet;

/* description: Properties of a substance specific to it being a polymer. */
struct SubstancePolymer_StartingMaterial {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of substance for this starting material. */
	struct CodeableConcept *code_;
/* description: Substance high level category, e.g. chemical substance. */
	struct CodeableConcept *category;
/* description: Used to specify whether the attribute described is a defining element for the unique identification of the polymer. */
	boolean isDefining;
/* description: A percentage. */
	struct Quantity *amount;
};
typedef struct SubstancePolymer_StartingMaterial SubstancePolymer_StartingMaterial;

/* description: Properties of a substance specific to it being a polymer. */
struct SubstancePolymer_Repeat {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A representation of an (average) molecular formula from a polymer. */
	string averageMolecularFormula;
/* description: How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average). */
	struct CodeableConcept *repeatUnitAmountType;
/* description: An SRU - Structural Repeat Unit. */
	int repeatUnit_count;
	struct SubstancePolymer_RepeatUnit *repeatUnit;
};
typedef struct SubstancePolymer_Repeat SubstancePolymer_Repeat;

/* description: Properties of a substance specific to it being a polymer. */
struct SubstancePolymer_RepeatUnit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Structural repeat units are essential elements for defining polymers. */
	string unit;
/* description: The orientation of the polymerisation, e.g. head-tail, head-head, random. */
	struct CodeableConcept *orientation;
/* description: Number of repeats of this unit. */
	integer amount;
/* description: Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described. */
	int degreeOfPolymerisation_count;
	struct SubstancePolymer_DegreeOfPolymerisation *degreeOfPolymerisation;
/* description: A graphical structure for this SRU. */
	int structuralRepresentation_count;
	struct SubstancePolymer_StructuralRepresentation *structuralRepresentation;
};
typedef struct SubstancePolymer_RepeatUnit SubstancePolymer_RepeatUnit;

/* description: Properties of a substance specific to it being a polymer. */
struct SubstancePolymer_DegreeOfPolymerisation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio. */
	struct CodeableConcept *type;
/* description: An average amount of polymerisation. */
	integer average;
/* description: A low expected limit of the amount. */
	integer low;
/* description: A high expected limit of the amount. */
	integer high;
};
typedef struct SubstancePolymer_DegreeOfPolymerisation SubstancePolymer_DegreeOfPolymerisation;

/* description: Properties of a substance specific to it being a polymer. */
struct SubstancePolymer_StructuralRepresentation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of structure (e.g. Full, Partial, Representative). */
	struct CodeableConcept *type;
/* description: The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. */
	string representation;
/* description: The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. */
	struct CodeableConcept *format;
/* description: An attached file with the structural representation. */
	struct Attachment *attachment;
};
typedef struct SubstancePolymer_StructuralRepresentation SubstancePolymer_StructuralRepresentation;

/* description: A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators. */
struct SubstanceProtein {
/* description: This is a SubstanceProtein resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence. */
	struct CodeableConcept *sequenceType;
/* description: Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable. */
	integer numberOfSubunits;
/* description: The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions. */
	int disulfideLinkage_count;
	string disulfideLinkage;
/* description: This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times. */
	int subunit_count;
	struct SubstanceProtein_Subunit *subunit;
};
typedef struct SubstanceProtein SubstanceProtein;

/* description: A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators. */
struct SubstanceProtein_Subunit {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts. */
	integer subunit;
/* description: The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence. */
	string sequence;
/* description: Length of linear sequences of amino acids contained in the subunit. */
	integer length;
/* description: The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence. */
	struct Attachment *sequenceAttachment;
/* description: Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID. */
	struct Identifier *nTerminalModificationId;
/* description: The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified. */
	string nTerminalModification;
/* description: Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID. */
	struct Identifier *cTerminalModificationId;
/* description: The modification at the C-terminal shall be specified. */
	string cTerminalModification;
};
typedef struct SubstanceProtein_Subunit SubstanceProtein_Subunit;

/* description: Todo. */
struct SubstanceReferenceInformation {
/* description: This is a SubstanceReferenceInformation resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Todo. */
	string comment;
/* description: Todo. */
	int gene_count;
	struct SubstanceReferenceInformation_Gene *gene;
/* description: Todo. */
	int geneElement_count;
	struct SubstanceReferenceInformation_GeneElement *geneElement;
/* description: Todo. */
	int target_count;
	struct SubstanceReferenceInformation_Target *target;
};
typedef struct SubstanceReferenceInformation SubstanceReferenceInformation;

/* description: Todo. */
struct SubstanceReferenceInformation_Gene {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Todo. */
	struct CodeableConcept *geneSequenceOrigin;
/* description: Todo. */
	struct CodeableConcept *gene;
/* description: Todo. */
	int source_count;
	struct Reference *source;
};
typedef struct SubstanceReferenceInformation_Gene SubstanceReferenceInformation_Gene;

/* description: Todo. */
struct SubstanceReferenceInformation_GeneElement {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Todo. */
	struct CodeableConcept *type;
/* description: Todo. */
	struct Identifier *element;
/* description: Todo. */
	int source_count;
	struct Reference *source;
};
typedef struct SubstanceReferenceInformation_GeneElement SubstanceReferenceInformation_GeneElement;

/* description: Todo. */
struct SubstanceReferenceInformation_Target {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Todo. */
	struct Identifier *target;
/* description: Todo. */
	struct CodeableConcept *type;
/* description: Todo. */
	struct CodeableConcept *interaction;
/* description: Todo. */
	struct CodeableConcept *organism;
/* description: Todo. */
	struct CodeableConcept *organismType;
/* description: Todo. */
	struct Quantity *amountQuantity;
/* description: Todo. */
	struct Range *amountRange;
/* description: Todo. */
/* pattern: ^^[\s\S]+$$ */
	string amountString;
/* description: Todo. */
	struct CodeableConcept *amountType;
/* description: Todo. */
	int source_count;
	struct Reference *source;
};
typedef struct SubstanceReferenceInformation_Target SubstanceReferenceInformation_Target;

/* description: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. */
struct SubstanceSourceMaterial {
/* description: This is a SubstanceSourceMaterial resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: General high level classification of the source material specific to the origin of the material. */
	struct CodeableConcept *sourceMaterialClass;
/* description: The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent. */
	struct CodeableConcept *sourceMaterialType;
/* description: The state of the source material when extracted. */
	struct CodeableConcept *sourceMaterialState;
/* description: The unique identifier associated with the source material parent organism shall be specified. */
	struct Identifier *organismId;
/* description: The organism accepted Scientific name shall be provided based on the organism taxonomy. */
	string organismName;
/* description: The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant). */
	int parentSubstanceId_count;
	struct Identifier *parentSubstanceId;
/* description: The parent substance of the Herbal Drug, or Herbal preparation. */
	int parentSubstanceName_count;
	string parentSubstanceName;
/* description: The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate. */
	int countryOfOrigin_count;
	struct CodeableConcept *countryOfOrigin;
/* description: The place/region where the plant is harvested or the places/regions where the animal source material has its habitat. */
	int geographicalLocation_count;
	string geographicalLocation;
/* description: Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum). */
	struct CodeableConcept *developmentStage;
/* description: Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels. */
	int fractionDescription_count;
	struct SubstanceSourceMaterial_FractionDescription *fractionDescription;
/* description: This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf. */
	struct SubstanceSourceMaterial_Organism *organism;
/* description: To do. */
	int partDescription_count;
	struct SubstanceSourceMaterial_PartDescription *partDescription;
};
typedef struct SubstanceSourceMaterial SubstanceSourceMaterial;

/* description: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. */
struct SubstanceSourceMaterial_FractionDescription {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: This element is capturing information about the fraction of a plant part, or human plasma for fractionation. */
	string fraction;
/* description: The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1. */
	struct CodeableConcept *materialType;
};
typedef struct SubstanceSourceMaterial_FractionDescription SubstanceSourceMaterial_FractionDescription;

/* description: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. */
struct SubstanceSourceMaterial_Organism {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The family of an organism shall be specified. */
	struct CodeableConcept *family;
/* description: The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies. */
	struct CodeableConcept *genus;
/* description: The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies. */
	struct CodeableConcept *species;
/* description: The Intraspecific type of an organism shall be specified. */
	struct CodeableConcept *intraspecificType;
/* description: The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention. */
	string intraspecificDescription;
/* description: 4.9.13.6.1 Author type (Conditional). */
	int author_count;
	struct SubstanceSourceMaterial_Author *author;
/* description: 4.9.13.8.1 Hybrid species maternal organism ID (Optional). */
	struct SubstanceSourceMaterial_Hybrid *hybrid;
/* description: 4.9.13.7.1 Kingdom (Conditional). */
	struct SubstanceSourceMaterial_OrganismGeneral *organismGeneral;
};
typedef struct SubstanceSourceMaterial_Organism SubstanceSourceMaterial_Organism;

/* description: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. */
struct SubstanceSourceMaterial_Author {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name. */
	struct CodeableConcept *authorType;
/* description: The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank). */
	string authorDescription;
};
typedef struct SubstanceSourceMaterial_Author SubstanceSourceMaterial_Author;

/* description: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. */
struct SubstanceSourceMaterial_Hybrid {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal. */
	string maternalOrganismId;
/* description: The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal. */
	string maternalOrganismName;
/* description: The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. */
	string paternalOrganismId;
/* description: The name of the paternal species constituting the hybrid organism shall be specified. */
	string paternalOrganismName;
/* description: The hybrid type of an organism shall be specified. */
	struct CodeableConcept *hybridType;
};
typedef struct SubstanceSourceMaterial_Hybrid SubstanceSourceMaterial_Hybrid;

/* description: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. */
struct SubstanceSourceMaterial_OrganismGeneral {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The kingdom of an organism shall be specified. */
	struct CodeableConcept *kingdom;
/* description: The phylum of an organism shall be specified. */
	struct CodeableConcept *phylum;
/* description: The class of an organism shall be specified. */
	struct CodeableConcept *class;
/* description: The order of an organism shall be specified,. */
	struct CodeableConcept *order;
};
typedef struct SubstanceSourceMaterial_OrganismGeneral SubstanceSourceMaterial_OrganismGeneral;

/* description: Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex. */
struct SubstanceSourceMaterial_PartDescription {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Entity of anatomical origin of source material within an organism. */
	struct CodeableConcept *part;
/* description: The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply. */
	struct CodeableConcept *partLocation;
};
typedef struct SubstanceSourceMaterial_PartDescription SubstanceSourceMaterial_PartDescription;

/* description: Record of delivery of what is supplied. */
struct SupplyDelivery {
/* description: This is a SupplyDelivery resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for the supply delivery event that is used to identify it across multiple disparate systems. */
	int identifier_count;
	struct Identifier *identifier;
/* description: A plan, proposal or order that is fulfilled in whole or in part by this event. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A larger event of which this particular event is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code specifying the state of the dispense event. */
	code status;
/* description: A link to a resource representing the person whom the delivered item is for. */
	struct Reference *patient;
/* description: Indicates the type of supply being provided.  Examples include: Medication, Device, Biologically Derived Product. */
	struct CodeableConcept *type;
/* description: The item that is being delivered or has been supplied. */
	int suppliedItem_count;
	struct SupplyDelivery_SuppliedItem *suppliedItem;
/* description: The date or time(s) the activity occurred. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: The date or time(s) the activity occurred. */
	struct Period *occurrencePeriod;
/* description: The date or time(s) the activity occurred. */
	struct Timing *occurrenceTiming;
/* description: The individual or organization responsible for supplying the delivery. */
	struct Reference *supplier;
/* description: Identification of the facility/location where the delivery was shipped to. */
	struct Reference *destination;
/* description: Identifies the individual or organization that received the delivery. */
	int receiver_count;
	struct Reference *receiver;
};
typedef struct SupplyDelivery SupplyDelivery;

/* description: Record of delivery of what is supplied. */
struct SupplyDelivery_SuppliedItem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The amount of the item that has been supplied.  Unit of measure may be included. */
	struct Quantity *quantity;
/* description: Identifies the medication, substance, device or biologically derived product being supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list. */
	struct CodeableConcept *itemCodeableConcept;
/* description: Identifies the medication, substance, device or biologically derived product being supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list. */
	struct Reference *itemReference;
};
typedef struct SupplyDelivery_SuppliedItem SupplyDelivery_SuppliedItem;

/* description: A record of a request to deliver a medication, substance or device used in the healthcare setting to a particular destination for a particular person or organization. */
struct SupplyRequest {
/* description: This is a SupplyRequest resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server. */
	int identifier_count;
	struct Identifier *identifier;
/* description: Status of the supply request. */
	code status;
/* description: Plan/proposal/order fulfilled by this request. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process. */
	struct CodeableConcept *category;
/* description: Indicates how quickly this SupplyRequest should be addressed with respect to other requests. */
	code priority;
/* description: The patient to whom the supply will be given or for whom they will be used. */
	struct Reference *deliverFor;
/* description: The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list. */
	struct CodeableReference *item;
/* description: The amount that is being ordered of the indicated item. */
	struct Quantity *quantity;
/* description: Specific parameters for the ordered item.  For example, the size of the indicated item. */
	int parameter_count;
	struct SupplyRequest_Parameter *parameter;
/* description: When the request should be fulfilled. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string occurrenceDateTime;
/* description: When the request should be fulfilled. */
	struct Period *occurrencePeriod;
/* description: When the request should be fulfilled. */
	struct Timing *occurrenceTiming;
/* description: When the request was made. */
	dateTime authoredOn;
/* description: The device, practitioner, etc. who initiated the request. */
	struct Reference *requester;
/* description: Who is intended to fulfill the request. */
	int supplier_count;
	struct Reference *supplier;
/* description: The reason why the supply item was requested. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Where the supply is expected to come from. */
	struct Reference *deliverFrom;
/* description: Where the supply is destined to go. */
	struct Reference *deliverTo;
};
typedef struct SupplyRequest SupplyRequest;

/* description: A record of a request to deliver a medication, substance or device used in the healthcare setting to a particular destination for a particular person or organization. */
struct SupplyRequest_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code or string that identifies the device detail being asserted. */
	struct CodeableConcept *code_;
/* description: The value of the device detail. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the device detail. */
	struct Quantity *valueQuantity;
/* description: The value of the device detail. */
	struct Range *valueRange;
/* description: The value of the device detail. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
};
typedef struct SupplyRequest_Parameter SupplyRequest_Parameter;

/* description: A task to be performed. */
struct Task {
/* description: This is a Task resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The business identifier for this task. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task. */
	canonical instantiatesCanonical;
/* description: The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task. */
	uri instantiatesUri;
/* description: BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by focus.  For example, based on a CarePlan (= basedOn), a task is created to fulfill a ServiceRequest ( = focus ) to collect a specimen from a patient. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A shared identifier common to multiple independent Task and Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time. */
	struct Identifier *groupIdentifier;
/* description: Task that this particular task is part of. */
	int partOf_count;
	struct Reference *partOf;
/* description: The current status of the task. */
	code status;
/* description: An explanation as to why this task is held, failed, was refused, etc. */
	struct CodeableReference *statusReason;
/* description: Contains business-specific nuances of the business state. */
	struct CodeableConcept *businessStatus;
/* description: Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc. */
	code intent;
/* description: Indicates how quickly the Task should be addressed with respect to other requests. */
	code priority;
/* description: If true indicates that the Task is asking for the specified action to *not* occur. */
	boolean doNotPerform;
/* description: A name or code (or both) briefly describing what the task involves. */
	struct CodeableConcept *code_;
/* description: A free-text description of what is to be performed. */
	string description;
/* description: The request being fulfilled or the resource being manipulated (changed, suspended, etc.) by this task. */
	struct Reference *focus;
/* description: The entity who benefits from the performance of the service specified in the task (e.g., the patient). */
	struct Reference *for_;
/* description: The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created. */
	struct Reference *encounter;
/* description: Indicates the start and/or end of the period of time when completion of the task is desired to take place. */
	struct Period *requestedPeriod;
/* description: Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end). */
	struct Period *executionPeriod;
/* description: The date and time this task was created. */
	dateTime authoredOn;
/* description: The date and time of last modification to this task. */
	dateTime lastModified;
/* description: The creator of the task. */
	struct Reference *requester;
/* description: The kind of participant or specific participant that should perform the task. */
	int requestedPerformer_count;
	struct CodeableReference *requestedPerformer;
/* description: Party responsible for managing task execution. */
	struct Reference *owner;
/* description: The entity who performed the requested task. */
	int performer_count;
	struct Task_Performer *performer;
/* description: Principal physical location where this task is performed. */
	struct Reference *location;
/* description: A description, code, or reference indicating why this task needs to be performed. */
	int reason_count;
	struct CodeableReference *reason;
/* description: Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task. */
	int insurance_count;
	struct Reference *insurance;
/* description: Free-text information captured about the task as it progresses. */
	int note_count;
	struct Annotation *note;
/* description: Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task. */
	int relevantHistory_count;
	struct Reference *relevantHistory;
/* description: If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned. */
	struct Task_Restriction *restriction;
/* description: Additional information that may be needed in the execution of the task. */
	int input_count;
	struct Task_Input *input;
/* description: Outputs produced by the Task. */
	int output_count;
	struct Task_Output *output;
};
typedef struct Task Task;

/* description: A task to be performed. */
struct Task_Performer {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code or description of the performer of the task. */
	struct CodeableConcept *function;
/* description: The actor or entity who performed the task. */
	struct Reference *actor;
};
typedef struct Task_Performer Task_Performer;

/* description: A task to be performed. */
struct Task_Restriction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the number of times the requested action should occur. */
	positiveInt repetitions;
/* description: The time-period for which fulfillment is sought. This must fall within the overall time period authorized in the referenced request.  E.g. ServiceRequest.occurance[x]. */
	struct Period *period;
/* description: For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for. */
	int recipient_count;
	struct Reference *recipient;
};
typedef struct Task_Restriction Task_Restriction;

/* description: A task to be performed. */
struct Task_Input {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code or description indicating how the input is intended to be used as part of the task execution. */
	struct CodeableConcept *type;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueCanonical;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string valueInstant;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string valueInteger64;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string valueOid;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[1-9][0-9]*$ */
	number valuePositiveInt;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number valueUnsignedInt;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string valueUuid;
/* description: The value of the input parameter as a basic type. */
	struct Address *valueAddress;
/* description: The value of the input parameter as a basic type. */
	struct Age *valueAge;
/* description: The value of the input parameter as a basic type. */
	struct Annotation *valueAnnotation;
/* description: The value of the input parameter as a basic type. */
	struct Attachment *valueAttachment;
/* description: The value of the input parameter as a basic type. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the input parameter as a basic type. */
	struct CodeableReference *valueCodeableReference;
/* description: The value of the input parameter as a basic type. */
	struct Coding *valueCoding;
/* description: The value of the input parameter as a basic type. */
	struct ContactPoint *valueContactPoint;
/* description: The value of the input parameter as a basic type. */
	struct Count *valueCount;
/* description: The value of the input parameter as a basic type. */
	struct Distance *valueDistance;
/* description: The value of the input parameter as a basic type. */
	struct Duration *valueDuration;
/* description: The value of the input parameter as a basic type. */
	struct HumanName *valueHumanName;
/* description: The value of the input parameter as a basic type. */
	struct Identifier *valueIdentifier;
/* description: The value of the input parameter as a basic type. */
	struct Money *valueMoney;
/* description: The value of the input parameter as a basic type. */
	struct Period *valuePeriod;
/* description: The value of the input parameter as a basic type. */
	struct Quantity *valueQuantity;
/* description: The value of the input parameter as a basic type. */
	struct Range *valueRange;
/* description: The value of the input parameter as a basic type. */
	struct Ratio *valueRatio;
/* description: The value of the input parameter as a basic type. */
	struct RatioRange *valueRatioRange;
/* description: The value of the input parameter as a basic type. */
	struct Reference *valueReference;
/* description: The value of the input parameter as a basic type. */
	struct SampledData *valueSampledData;
/* description: The value of the input parameter as a basic type. */
	struct Signature *valueSignature;
/* description: The value of the input parameter as a basic type. */
	struct Timing *valueTiming;
/* description: The value of the input parameter as a basic type. */
	struct ContactDetail *valueContactDetail;
/* description: The value of the input parameter as a basic type. */
	struct DataRequirement *valueDataRequirement;
/* description: The value of the input parameter as a basic type. */
	struct Expression *valueExpression;
/* description: The value of the input parameter as a basic type. */
	struct ParameterDefinition *valueParameterDefinition;
/* description: The value of the input parameter as a basic type. */
	struct RelatedArtifact *valueRelatedArtifact;
/* description: The value of the input parameter as a basic type. */
	struct TriggerDefinition *valueTriggerDefinition;
/* description: The value of the input parameter as a basic type. */
	struct UsageContext *valueUsageContext;
/* description: The value of the input parameter as a basic type. */
	struct Availability *valueAvailability;
/* description: The value of the input parameter as a basic type. */
	struct ExtendedContactDetail *valueExtendedContactDetail;
/* description: The value of the input parameter as a basic type. */
	struct Dosage *valueDosage;
/* description: The value of the input parameter as a basic type. */
	struct Meta *valueMeta;
};
typedef struct Task_Input Task_Input;

/* description: A task to be performed. */
struct Task_Output {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of the Output parameter. */
	struct CodeableConcept *type;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueCanonical;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string valueInstant;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string valueInteger64;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string valueOid;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[1-9][0-9]*$ */
	number valuePositiveInt;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number valueUnsignedInt;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string valueUuid;
/* description: The value of the Output parameter as a basic type. */
	struct Address *valueAddress;
/* description: The value of the Output parameter as a basic type. */
	struct Age *valueAge;
/* description: The value of the Output parameter as a basic type. */
	struct Annotation *valueAnnotation;
/* description: The value of the Output parameter as a basic type. */
	struct Attachment *valueAttachment;
/* description: The value of the Output parameter as a basic type. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the Output parameter as a basic type. */
	struct CodeableReference *valueCodeableReference;
/* description: The value of the Output parameter as a basic type. */
	struct Coding *valueCoding;
/* description: The value of the Output parameter as a basic type. */
	struct ContactPoint *valueContactPoint;
/* description: The value of the Output parameter as a basic type. */
	struct Count *valueCount;
/* description: The value of the Output parameter as a basic type. */
	struct Distance *valueDistance;
/* description: The value of the Output parameter as a basic type. */
	struct Duration *valueDuration;
/* description: The value of the Output parameter as a basic type. */
	struct HumanName *valueHumanName;
/* description: The value of the Output parameter as a basic type. */
	struct Identifier *valueIdentifier;
/* description: The value of the Output parameter as a basic type. */
	struct Money *valueMoney;
/* description: The value of the Output parameter as a basic type. */
	struct Period *valuePeriod;
/* description: The value of the Output parameter as a basic type. */
	struct Quantity *valueQuantity;
/* description: The value of the Output parameter as a basic type. */
	struct Range *valueRange;
/* description: The value of the Output parameter as a basic type. */
	struct Ratio *valueRatio;
/* description: The value of the Output parameter as a basic type. */
	struct RatioRange *valueRatioRange;
/* description: The value of the Output parameter as a basic type. */
	struct Reference *valueReference;
/* description: The value of the Output parameter as a basic type. */
	struct SampledData *valueSampledData;
/* description: The value of the Output parameter as a basic type. */
	struct Signature *valueSignature;
/* description: The value of the Output parameter as a basic type. */
	struct Timing *valueTiming;
/* description: The value of the Output parameter as a basic type. */
	struct ContactDetail *valueContactDetail;
/* description: The value of the Output parameter as a basic type. */
	struct DataRequirement *valueDataRequirement;
/* description: The value of the Output parameter as a basic type. */
	struct Expression *valueExpression;
/* description: The value of the Output parameter as a basic type. */
	struct ParameterDefinition *valueParameterDefinition;
/* description: The value of the Output parameter as a basic type. */
	struct RelatedArtifact *valueRelatedArtifact;
/* description: The value of the Output parameter as a basic type. */
	struct TriggerDefinition *valueTriggerDefinition;
/* description: The value of the Output parameter as a basic type. */
	struct UsageContext *valueUsageContext;
/* description: The value of the Output parameter as a basic type. */
	struct Availability *valueAvailability;
/* description: The value of the Output parameter as a basic type. */
	struct ExtendedContactDetail *valueExtendedContactDetail;
/* description: The value of the Output parameter as a basic type. */
	struct Dosage *valueDosage;
/* description: The value of the Output parameter as a basic type. */
	struct Meta *valueMeta;
};
typedef struct Task_Output Task_Output;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities {
/* description: This is a TerminologyCapabilities resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this terminology capabilities when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the terminology capabilities. */
	string title;
/* description: The status of this terminology capabilities. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date  (and optionally time) when the terminology capabilities was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the terminology capabilities. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the terminology capabilities is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this terminology capabilities is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase). */
	code kind;
/* description: Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation. */
	struct TerminologyCapabilities_Software *software;
/* description: Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program. */
	struct TerminologyCapabilities_Implementation *implementation;
/* description: Whether the server supports lockedDate. */
	boolean lockedDate;
/* description: Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource. */
	int codeSystem_count;
	struct TerminologyCapabilities_CodeSystem *codeSystem;
/* description: Information about the [ValueSet/$expand](valueset-operation-expand.html) operation. */
	struct TerminologyCapabilities_Expansion *expansion;
/* description: The degree to which the server supports the code search parameter on ValueSet, if it is supported. */
	code codeSearch;
/* description: Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation. */
	struct TerminologyCapabilities_ValidateCode *validateCode;
/* description: Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation. */
	struct TerminologyCapabilities_Translation *translation;
/* description: Whether the $closure operation is supported. */
	struct TerminologyCapabilities_Closure *closure;
};
typedef struct TerminologyCapabilities TerminologyCapabilities;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Software {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name the software is known by. */
	string name;
/* description: The version identifier for the software covered by this statement. */
	string version;
};
typedef struct TerminologyCapabilities_Software TerminologyCapabilities_Software;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Implementation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Information about the specific installation that this terminology capability statement relates to. */
	markdown description;
/* description: An absolute base URL for the implementation. */
	url url_;
};
typedef struct TerminologyCapabilities_Implementation TerminologyCapabilities_Implementation;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_CodeSystem {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Canonical identifier for the code system, represented as a URI. */
	canonical uri_;
/* description: For the code system, a list of versions that are supported by the server. */
	int version_count;
	struct TerminologyCapabilities_Version *version;
/* description: The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance. */
	code content;
/* description: True if subsumption is supported for this version of the code system. */
	boolean subsumption;
};
typedef struct TerminologyCapabilities_CodeSystem TerminologyCapabilities_CodeSystem;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Version {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: For version-less code systems, there should be a single version with no identifier. */
	string code_;
/* description: If this is the default version for this code system. */
	boolean isDefault;
/* description: If the compositional grammar defined by the code system is supported. */
	boolean compositional;
/* description: Language Displays supported. */
	int language_count;
	code language;
/* description: Filter Properties supported. */
	int filter_count;
	struct TerminologyCapabilities_Filter *filter;
/* description: Properties supported for $lookup. */
	int property_count;
	code property;
};
typedef struct TerminologyCapabilities_Version TerminologyCapabilities_Version;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Filter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Code of the property supported. */
	code code_;
/* description: Operations supported for the property. */
	int op_count;
	code op;
};
typedef struct TerminologyCapabilities_Filter TerminologyCapabilities_Filter;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Expansion {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether the server can return nested value sets. */
	boolean hierarchical;
/* description: Whether the server supports paging on expansion. */
	boolean paging;
/* description: True if requests for incomplete expansions are allowed. */
	boolean incomplete;
/* description: Supported expansion parameter. */
	int parameter_count;
	struct TerminologyCapabilities_Parameter *parameter;
/* description: Documentation about text searching works. */
	markdown textFilter;
};
typedef struct TerminologyCapabilities_Expansion TerminologyCapabilities_Expansion;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name of the supported expansion parameter. */
	code name;
/* description: Description of support for parameter. */
	markdown documentation;
};
typedef struct TerminologyCapabilities_Parameter TerminologyCapabilities_Parameter;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_ValidateCode {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether translations are validated. */
	boolean translations;
};
typedef struct TerminologyCapabilities_ValidateCode TerminologyCapabilities_ValidateCode;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Translation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether the client must identify the map. */
	boolean needsMap;
};
typedef struct TerminologyCapabilities_Translation TerminologyCapabilities_Translation;

/* description: A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation. */
struct TerminologyCapabilities_Closure {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: If cross-system closure is supported. */
	boolean translation;
};
typedef struct TerminologyCapabilities_Closure TerminologyCapabilities_Closure;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan {
/* description: This is a TestPlan resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this test plan when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test plan is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test plan is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this test plan when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the test plan when it is referenced in a specification, model, design or instance.  This is an arbitrary value managed by the test plan author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the test plan. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the test plan. */
	string title;
/* description: The status of this test plan. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this test plan is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the test plan was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test plan changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the test plan. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the test plan from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test plan instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the test plan is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this test plan is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the test plan and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test plan. The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The category of the Test Plan - can be acceptance, unit, performance, etc. */
	int category_count;
	struct CodeableConcept *category;
/* description: What is being tested with this Test Plan - a conformance resource, or narrative criteria, or an external reference... */
	int scope_count;
	struct Reference *scope;
/* description: A description of test tools to be used in the test plan. */
	markdown testTools;
/* description: The required criteria to execute the test plan - e.g. preconditions, previous tests... */
	int dependency_count;
	struct TestPlan_Dependency *dependency;
/* description: The threshold or criteria for the test plan to be considered successfully executed - narrative. */
	markdown exitCriteria;
/* description: The individual test cases that are part of this plan, when they they are made explicit. */
	int testCase_count;
	struct TestPlan_TestCase *testCase;
};
typedef struct TestPlan TestPlan;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan_Dependency {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A textual description of the criterium - what is needed for the dependency to be considered met. */
	markdown description;
/* description: Predecessor test plans - those that are expected to be successfully performed as a dependency for the execution of this test plan. */
	struct Reference *predecessor;
};
typedef struct TestPlan_Dependency TestPlan_Dependency;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan_TestCase {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Sequence of test case - an ordinal number that indicates the order for the present test case in the test plan. */
	integer sequence;
/* description: The scope or artifact covered by the case, when the individual test case is associated with a testable artifact. */
	int scope_count;
	struct Reference *scope;
/* description: The required criteria to execute the test case - e.g. preconditions, previous tests. */
	int dependency_count;
	struct TestPlan_Dependency1 *dependency;
/* description: The actual test to be executed. */
	int testRun_count;
	struct TestPlan_TestRun *testRun;
/* description: The test data used in the test case. */
	int testData_count;
	struct TestPlan_TestData *testData;
/* description: The test assertions - the expectations of test results from the execution of the test case. */
	int assertion_count;
	struct TestPlan_Assertion *assertion;
};
typedef struct TestPlan_TestCase TestPlan_TestCase;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan_Dependency1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Description of the criteria. */
	markdown description;
/* description: Link to predecessor test plans. */
	struct Reference *predecessor;
};
typedef struct TestPlan_Dependency1 TestPlan_Dependency1;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan_TestRun {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The narrative description of the tests. */
	markdown narrative;
/* description: The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript. */
	struct TestPlan_Script *script;
};
typedef struct TestPlan_TestRun TestPlan_TestRun;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan_Script {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language for the test cases e.g. 'gherkin', 'testscript'. */
	struct CodeableConcept *language;
/* description: The actual content of the cases - references to TestScripts or externally defined content. */
/* pattern: ^^[\s\S]+$$ */
	string sourceString;
/* description: The actual content of the cases - references to TestScripts or externally defined content. */
	struct Reference *sourceReference;
};
typedef struct TestPlan_Script TestPlan_Script;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan_TestData {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of test data description, e.g. 'synthea'. */
	struct Coding *type;
/* description: The actual test resources when they exist. */
	struct Reference *content;
/* description: Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc. */
/* pattern: ^^[\s\S]+$$ */
	string sourceString;
/* description: Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc. */
	struct Reference *sourceReference;
};
typedef struct TestPlan_TestData TestPlan_TestData;

/* description: A plan for executing testing on an artifact or specifications. */
struct TestPlan_Assertion {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The test assertion type - this can be used to group assertions as 'required' or 'optional', or can be used for other classification of the assertion. */
	int type_count;
	struct CodeableConcept *type;
/* description: The focus or object of the assertion i.e. a resource. */
	int object_count;
	struct CodeableReference *object;
/* description: The test assertion - the expected outcome from the test case execution. */
	int result_count;
	struct CodeableReference *result;
};
typedef struct TestPlan_Assertion TestPlan_Assertion;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport {
/* description: This is a TestReport resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for the TestReport assigned for external purposes outside the context of FHIR. */
	struct Identifier *identifier;
/* description: A free text natural language name identifying the executed TestReport. */
	string name;
/* description: The current state of this test report. */
	code status;
/* description: Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`. */
	canonical testScript;
/* description: The overall result from the execution of the TestScript. */
	code result;
/* description: The final score (percentage of tests passed) resulting from the execution of the TestScript. */
	decimal score;
/* description: Name of the tester producing this report (Organization or individual). */
	string tester;
/* description: When the TestScript was executed and this TestReport was generated. */
	dateTime issued;
/* description: A participant in the test execution, either the execution engine, a client, or a server. */
	int participant_count;
	struct TestReport_Participant *participant;
/* description: The results of the series of required setup operations before the tests were executed. */
	struct TestReport_Setup *setup;
/* description: A test executed from the test script. */
	int test_count;
	struct TestReport_Test *test;
/* description: The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise). */
	struct TestReport_Teardown *teardown;
};
typedef struct TestReport TestReport;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Participant {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The type of participant. */
	code type;
/* description: The uri of the participant. An absolute URL is preferred. */
	uri uri_;
/* description: The display name of the participant. */
	string display;
};
typedef struct TestReport_Participant TestReport_Participant;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Setup {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Action would contain either an operation or an assertion. */
	int action_count;
	struct TestReport_Action *action;
};
typedef struct TestReport_Setup TestReport_Setup;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Action {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The operation performed. */
	struct TestReport_Operation *operation;
/* description: The results of the assertion performed on the previous operations. */
	struct TestReport_Assert *assert;
};
typedef struct TestReport_Action TestReport_Action;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Operation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The result of this operation. */
	code result;
/* description: An explanatory message associated with the result. */
	markdown message;
/* description: A link to further details on the result. */
	uri detail;
};
typedef struct TestReport_Operation TestReport_Operation;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Assert {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The result of this assertion. */
	code result;
/* description: An explanatory message associated with the result. */
	markdown message;
/* description: A link to further details on the result. */
	string detail;
/* description: Links or references providing traceability to the testing requirements for this assert. */
	int requirement_count;
	struct TestReport_Requirement *requirement;
};
typedef struct TestReport_Assert TestReport_Assert;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Requirement {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Link or reference providing traceability to the testing requirement for this test. */
/* pattern: ^\S*$ */
	string linkUri;
/* description: Link or reference providing traceability to the testing requirement for this test. */
/* pattern: ^\S*$ */
	string linkCanonical;
};
typedef struct TestReport_Requirement TestReport_Requirement;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Test {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of this test used for tracking/logging purposes by test engines. */
	string name;
/* description: A short description of the test used by test engines for tracking and reporting purposes. */
	string description;
/* description: Action would contain either an operation or an assertion. */
	int action_count;
	struct TestReport_Action1 *action;
};
typedef struct TestReport_Test TestReport_Test;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Action1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An operation would involve a REST request to a server. */
	struct TestReport_Operation *operation;
/* description: The results of the assertion performed on the previous operations. */
	struct TestReport_Assert *assert;
};
typedef struct TestReport_Action1 TestReport_Action1;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Teardown {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The teardown action will only contain an operation. */
	int action_count;
	struct TestReport_Action2 *action;
};
typedef struct TestReport_Teardown TestReport_Teardown;

/* description: A summary of information based on the results of executing a TestScript. */
struct TestReport_Action2 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An operation would involve a REST request to a server. */
	struct TestReport_Operation *operation;
};
typedef struct TestReport_Action2 TestReport_Action2;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript {
/* description: This is a TestScript resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the test script. */
	string title;
/* description: The status of this test script. Enables tracking the life-cycle of the content. */
	code status;
/* description: A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the test script was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the test script. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the test script from a consumer's perspective. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the test script is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this test script is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: An abstract server used in operations within this test script in the origin element. */
	int origin_count;
	struct TestScript_Origin *origin;
/* description: An abstract server used in operations within this test script in the destination element. */
	int destination_count;
	struct TestScript_Destination *destination;
/* description: The required capability must exist and are assumed to function correctly on the FHIR server being tested. */
	struct TestScript_Metadata *metadata;
/* description: The scope indicates a conformance artifact that is tested by the test(s) within this test case and the expectation of the test outcome(s) as well as the intended test phase inclusion. */
	int scope_count;
	struct TestScript_Scope *scope;
/* description: Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute. */
	int fixture_count;
	struct TestScript_Fixture *fixture;
/* description: Reference to the profile to be used for validation. */
	int profile_count;
	canonical profile;
/* description: Variable is set based either on element value in response body or on header field value in the response headers. */
	int variable_count;
	struct TestScript_Variable *variable;
/* description: A series of required setup operations before tests are executed. */
	struct TestScript_Setup *setup;
/* description: A test in this script. */
	int test_count;
	struct TestScript_Test *test;
/* description: A series of operations required to clean up after all the tests are executed (successfully or otherwise). */
	struct TestScript_Teardown *teardown;
};
typedef struct TestScript TestScript;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Origin {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1. */
	integer index;
/* description: The type of origin profile the test system supports. */
	struct Coding *profile;
/* description: The explicit url path of the origin server used in this test script. */
	url url_;
};
typedef struct TestScript_Origin TestScript_Origin;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Destination {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1. */
	integer index;
/* description: The type of destination profile the test system supports. */
	struct Coding *profile;
/* description: The explicit url path of the destination server used in this test script. */
	url url_;
};
typedef struct TestScript_Destination TestScript_Destination;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Metadata {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A link to the FHIR specification that this test is covering. */
	int link_count;
	struct TestScript_Link *link;
/* description: Capabilities that must exist and are assumed to function correctly on the FHIR server being tested. */
	int capability_count;
	struct TestScript_Capability *capability;
};
typedef struct TestScript_Metadata TestScript_Metadata;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Link {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: URL to a particular requirement or feature within the FHIR specification. */
	uri url_;
/* description: Short description of the link. */
	string description;
};
typedef struct TestScript_Link TestScript_Link;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Capability {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether or not the test execution will require the given capabilities of the server in order for this test script to execute. */
	boolean required;
/* description: Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute. */
	boolean validated;
/* description: Description of the capabilities that this test script is requiring the server to support. */
	string description;
/* description: Which origin server these requirements apply to. */
	int origin_count;
	integer origin;
/* description: Which server these requirements apply to. */
	integer destination;
/* description: Links to the FHIR specification that describes this interaction and the resources involved in more detail. */
	int link_count;
	uri link;
/* description: Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped. */
	canonical capabilities;
};
typedef struct TestScript_Capability TestScript_Capability;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Scope {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The specific conformance artifact being tested. The canonical reference can be version-specific. */
	canonical artifact;
/* description: The expectation of whether the test must pass for the system to be considered conformant with the artifact: required - all tests are expected to pass, optional - all test are expected to pass but non-pass status may be allowed, strict - all tests are expected to pass and warnings are treated as a failure. */
	struct CodeableConcept *conformance;
/* description: The phase of testing for this artifact: unit - development / implementation phase, integration - internal system to system phase, production - live system to system phase (Note, this may involve pii/phi data). */
	struct CodeableConcept *phase;
};
typedef struct TestScript_Scope TestScript_Scope;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Fixture {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section. */
	boolean autocreate;
/* description: Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section. */
	boolean autodelete;
/* description: Reference to the resource (containing the contents of the resource needed for operations). This is allowed to be a Parameters resource. */
	struct Reference *resource;
};
typedef struct TestScript_Fixture TestScript_Fixture;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Variable {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Descriptive name for this variable. */
	string name;
/* description: A default, hard-coded, or user-defined value for this variable. */
	string defaultValue;
/* description: A free text natural language description of the variable and its purpose. */
	string description;
/* description: The FHIRPath expression for a specific value to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified. */
	string expression;
/* description: Will be used to grab the HTTP header field value from the headers that sourceId is pointing to. */
	string headerField;
/* description: Displayable text string with hint help information to the user when entering a default value. */
	string hint;
/* description: XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified. */
	string path;
/* description: Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable. */
	id sourceId;
};
typedef struct TestScript_Variable TestScript_Variable;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Setup {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Action would contain either an operation or an assertion. */
	int action_count;
	struct TestScript_Action *action;
};
typedef struct TestScript_Setup TestScript_Setup;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Action {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The operation to perform. */
	struct TestScript_Operation *operation;
/* description: Evaluates the results of previous operations to determine if the server under test behaves appropriately. */
	struct TestScript_Assert *assert;
};
typedef struct TestScript_Action TestScript_Action;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Operation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Server interaction or operation type. */
	struct Coding *type;
/* description: The type of the FHIR resource. See the [resource list](resourcelist.html). Data type of uri is needed when non-HL7 artifacts are identified. */
	uri resource;
/* description: The label would be used for tracking/logging purposes by test engines. */
	string label;
/* description: The description would be used by test engines for tracking and reporting purposes. */
	string description;
/* description: The mime-type to use for RESTful operation in the 'Accept' header. */
	code accept;
/* description: The mime-type to use for RESTful operation in the 'Content-Type' header. */
	code contentType;
/* description: The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section. */
	integer destination;
/* description: Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths. */
	boolean encodeRequestUrl;
/* description: The HTTP method the test engine MUST use for this operation regardless of any other operation details. */
	code method;
/* description: The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section. */
	integer origin;
/* description: Path plus parameters after [type].  Used to set parts of the request URL explicitly. */
	string params;
/* description: Header elements would be used to set HTTP headers. */
	int requestHeader_count;
	struct TestScript_RequestHeader *requestHeader;
/* description: The fixture id (maybe new) to map to the request. */
	id requestId;
/* description: The fixture id (maybe new) to map to the response. */
	id responseId;
/* description: The id of the fixture used as the body of a PUT or POST request. */
	id sourceId;
/* description: Id of fixture used for extracting the [id],  [type], and [vid] for GET requests. */
	id targetId;
/* description: Complete request URL. */
	string url_;
};
typedef struct TestScript_Operation TestScript_Operation;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_RequestHeader {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The HTTP header field e.g. "Accept". */
	string field;
/* description: The value of the header e.g. "application/fhir+xml". */
	string value;
};
typedef struct TestScript_RequestHeader TestScript_RequestHeader;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Assert {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The label would be used for tracking/logging purposes by test engines. */
	string label;
/* description: The description would be used by test engines for tracking and reporting purposes. */
	string description;
/* description: The direction to use for the assertion. */
	code direction;
/* description: Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition. */
	string compareToSourceId;
/* description: The FHIRPath expression for a specific value to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both. */
	string compareToSourceExpression;
/* description: XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both. */
	string compareToSourcePath;
/* description: The mime-type contents to compare against the request or response message 'Content-Type' header. */
	code contentType;
/* description: The default manual completion outcome applied to this assertion. */
	code defaultManualCompletion;
/* description: The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload. */
	string expression;
/* description: The HTTP header field name e.g. 'Location'. */
	string headerField;
/* description: The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId. */
	string minimumId;
/* description: Whether or not the test execution performs validation on the bundle navigation links. */
	boolean navigationLinks;
/* description: The operator type defines the conditional behavior of the assert. */
	code operator;
/* description: The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server. */
	string path;
/* description: The request method or HTTP operation code to compare against that used by the client system under test. */
	code requestMethod;
/* description: The value to use in a comparison against the request URL path string. */
	string requestURL;
/* description: The type of the resource.  See the [resource list](resourcelist.html). */
	uri resource;
/* description: continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported. */
	code response;
/* description: The value of the HTTP response code to be tested. */
	string responseCode;
/* description: Fixture to evaluate the XPath/JSONPath expression or the headerField  against. */
	id sourceId;
/* description: Whether or not the current test execution will stop on failure for this assert. */
	boolean stopTestOnFail;
/* description: The ID of the Profile to validate against. */
	id validateProfileId;
/* description: The value to compare to. */
	string value;
/* description: Whether or not the test execution will produce a warning only on error for this assert. */
	boolean warningOnly;
/* description: Links or references providing traceability to the testing requirements for this assert. */
	int requirement_count;
	struct TestScript_Requirement *requirement;
};
typedef struct TestScript_Assert TestScript_Assert;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Requirement {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Link or reference providing traceability to the testing requirement for this test. */
/* pattern: ^\S*$ */
	string linkUri;
/* description: Link or reference providing traceability to the testing requirement for this test. */
/* pattern: ^\S*$ */
	string linkCanonical;
};
typedef struct TestScript_Requirement TestScript_Requirement;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Test {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of this test used for tracking/logging purposes by test engines. */
	string name;
/* description: A short description of the test used by test engines for tracking and reporting purposes. */
	string description;
/* description: Action would contain either an operation or an assertion. */
	int action_count;
	struct TestScript_Action1 *action;
};
typedef struct TestScript_Test TestScript_Test;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Action1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An operation would involve a REST request to a server. */
	struct TestScript_Operation *operation;
/* description: Evaluates the results of previous operations to determine if the server under test behaves appropriately. */
	struct TestScript_Assert *assert;
};
typedef struct TestScript_Action1 TestScript_Action1;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Teardown {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The teardown action will only contain an operation. */
	int action_count;
	struct TestScript_Action2 *action;
};
typedef struct TestScript_Teardown TestScript_Teardown;

/* description: A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification. */
struct TestScript_Action2 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An operation would involve a REST request to a server. */
	struct TestScript_Operation *operation;
};
typedef struct TestScript_Action2 TestScript_Action2;

/* description: Record of transport of item. */
struct Transport {
/* description: This is a Transport resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifier for the transport event that is used to identify it across multiple disparate systems. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport. */
	canonical instantiatesCanonical;
/* description: The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport. */
	uri instantiatesUri;
/* description: BasedOn refers to a higher-level authorization that triggered the creation of the transport.  It references a "request" resource such as a ServiceRequest or Transport, which is distinct from the "request" resource the Transport is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a transport is created to fulfill a procedureRequest ( = FocusOn ) to transport a specimen to the lab. */
	int basedOn_count;
	struct Reference *basedOn;
/* description: A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time. */
	struct Identifier *groupIdentifier;
/* description: A larger event of which this particular event is a component or step. */
	int partOf_count;
	struct Reference *partOf;
/* description: A code specifying the state of the transport event. */
	code status;
/* description: An explanation as to why this transport is held, failed, was refused, etc. */
	struct CodeableConcept *statusReason;
/* description: Indicates the "level" of actionability associated with the Transport, i.e. i+R[9]Cs this a proposed transport, a planned transport, an actionable transport, etc. */
	code intent;
/* description: Indicates how quickly the Transport should be addressed with respect to other requests. */
	code priority;
/* description: A name or code (or both) briefly describing what the transport involves. */
	struct CodeableConcept *code_;
/* description: A free-text description of what is to be performed. */
	string description;
/* description: The request being actioned or the resource being manipulated by this transport. */
	struct Reference *focus;
/* description: The entity who benefits from the performance of the service specified in the transport (e.g., the patient). */
	struct Reference *for_;
/* description: The healthcare event  (e.g. a patient and healthcare provider interaction) during which this transport was created. */
	struct Reference *encounter;
/* description: Identifies the completion time of the event (the occurrence). */
	dateTime completionTime;
/* description: The date and time this transport was created. */
	dateTime authoredOn;
/* description: The date and time of last modification to this transport. */
	dateTime lastModified;
/* description: The creator of the transport. */
	struct Reference *requester;
/* description: The kind of participant that should perform the transport. */
	int performerType_count;
	struct CodeableConcept *performerType;
/* description: Individual organization or Device currently responsible for transport execution. */
	struct Reference *owner;
/* description: Principal physical location where this transport is performed. */
	struct Reference *location;
/* description: Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Transport. */
	int insurance_count;
	struct Reference *insurance;
/* description: Free-text information captured about the transport as it progresses. */
	int note_count;
	struct Annotation *note;
/* description: Links to Provenance records for past versions of this Transport that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the transport. */
	int relevantHistory_count;
	struct Reference *relevantHistory;
/* description: If the Transport.focus is a request resource and the transport is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned. */
	struct Transport_Restriction *restriction;
/* description: Additional information that may be needed in the execution of the transport. */
	int input_count;
	struct Transport_Input *input;
/* description: Outputs produced by the Transport. */
	int output_count;
	struct Transport_Output *output;
/* description: The desired or final location for the transport. */
	struct Reference *requestedLocation;
/* description: The current location for the entity to be transported. */
	struct Reference *currentLocation;
/* description: A resource reference indicating why this transport needs to be performed. */
	struct CodeableReference *reason;
/* description: The transport event prior to this one. */
	struct Reference *history;
};
typedef struct Transport Transport;

/* description: Record of transport of item. */
struct Transport_Restriction {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Indicates the number of times the requested action should occur. */
	positiveInt repetitions;
/* description: Over what time-period is fulfillment sought. */
	struct Period *period;
/* description: For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for. */
	int recipient_count;
	struct Reference *recipient;
};
typedef struct Transport_Restriction Transport_Restriction;

/* description: Record of transport of item. */
struct Transport_Input {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code or description indicating how the input is intended to be used as part of the transport execution. */
	struct CodeableConcept *type;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueCanonical;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string valueInstant;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string valueInteger64;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string valueOid;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[1-9][0-9]*$ */
	number valuePositiveInt;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number valueUnsignedInt;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: The value of the input parameter as a basic type. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string valueUuid;
/* description: The value of the input parameter as a basic type. */
	struct Address *valueAddress;
/* description: The value of the input parameter as a basic type. */
	struct Age *valueAge;
/* description: The value of the input parameter as a basic type. */
	struct Annotation *valueAnnotation;
/* description: The value of the input parameter as a basic type. */
	struct Attachment *valueAttachment;
/* description: The value of the input parameter as a basic type. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the input parameter as a basic type. */
	struct CodeableReference *valueCodeableReference;
/* description: The value of the input parameter as a basic type. */
	struct Coding *valueCoding;
/* description: The value of the input parameter as a basic type. */
	struct ContactPoint *valueContactPoint;
/* description: The value of the input parameter as a basic type. */
	struct Count *valueCount;
/* description: The value of the input parameter as a basic type. */
	struct Distance *valueDistance;
/* description: The value of the input parameter as a basic type. */
	struct Duration *valueDuration;
/* description: The value of the input parameter as a basic type. */
	struct HumanName *valueHumanName;
/* description: The value of the input parameter as a basic type. */
	struct Identifier *valueIdentifier;
/* description: The value of the input parameter as a basic type. */
	struct Money *valueMoney;
/* description: The value of the input parameter as a basic type. */
	struct Period *valuePeriod;
/* description: The value of the input parameter as a basic type. */
	struct Quantity *valueQuantity;
/* description: The value of the input parameter as a basic type. */
	struct Range *valueRange;
/* description: The value of the input parameter as a basic type. */
	struct Ratio *valueRatio;
/* description: The value of the input parameter as a basic type. */
	struct RatioRange *valueRatioRange;
/* description: The value of the input parameter as a basic type. */
	struct Reference *valueReference;
/* description: The value of the input parameter as a basic type. */
	struct SampledData *valueSampledData;
/* description: The value of the input parameter as a basic type. */
	struct Signature *valueSignature;
/* description: The value of the input parameter as a basic type. */
	struct Timing *valueTiming;
/* description: The value of the input parameter as a basic type. */
	struct ContactDetail *valueContactDetail;
/* description: The value of the input parameter as a basic type. */
	struct DataRequirement *valueDataRequirement;
/* description: The value of the input parameter as a basic type. */
	struct Expression *valueExpression;
/* description: The value of the input parameter as a basic type. */
	struct ParameterDefinition *valueParameterDefinition;
/* description: The value of the input parameter as a basic type. */
	struct RelatedArtifact *valueRelatedArtifact;
/* description: The value of the input parameter as a basic type. */
	struct TriggerDefinition *valueTriggerDefinition;
/* description: The value of the input parameter as a basic type. */
	struct UsageContext *valueUsageContext;
/* description: The value of the input parameter as a basic type. */
	struct Availability *valueAvailability;
/* description: The value of the input parameter as a basic type. */
	struct ExtendedContactDetail *valueExtendedContactDetail;
/* description: The value of the input parameter as a basic type. */
	struct Dosage *valueDosage;
/* description: The value of the input parameter as a basic type. */
	struct Meta *valueMeta;
};
typedef struct Transport_Input Transport_Input;

/* description: Record of transport of item. */
struct Transport_Output {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The name of the Output parameter. */
	struct CodeableConcept *type;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$ */
	string valueBase64Binary;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueCanonical;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$ */
	string valueDate;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[A-Za-z0-9\-\.]{1,64}$ */
	string valueId;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$ */
	string valueInstant;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	string valueInteger64;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueMarkdown;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^urn:oid:[0-2](\.(0|[1-9][0-9]*))+$ */
	string valueOid;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[1-9][0-9]*$ */
	number valuePositiveInt;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?$ */
	string valueTime;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^[0]|([1-9][0-9]*)$ */
	number valueUnsignedInt;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^\S*$ */
	string valueUrl;
/* description: The value of the Output parameter as a basic type. */
/* pattern: ^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ */
	string valueUuid;
/* description: The value of the Output parameter as a basic type. */
	struct Address *valueAddress;
/* description: The value of the Output parameter as a basic type. */
	struct Age *valueAge;
/* description: The value of the Output parameter as a basic type. */
	struct Annotation *valueAnnotation;
/* description: The value of the Output parameter as a basic type. */
	struct Attachment *valueAttachment;
/* description: The value of the Output parameter as a basic type. */
	struct CodeableConcept *valueCodeableConcept;
/* description: The value of the Output parameter as a basic type. */
	struct CodeableReference *valueCodeableReference;
/* description: The value of the Output parameter as a basic type. */
	struct Coding *valueCoding;
/* description: The value of the Output parameter as a basic type. */
	struct ContactPoint *valueContactPoint;
/* description: The value of the Output parameter as a basic type. */
	struct Count *valueCount;
/* description: The value of the Output parameter as a basic type. */
	struct Distance *valueDistance;
/* description: The value of the Output parameter as a basic type. */
	struct Duration *valueDuration;
/* description: The value of the Output parameter as a basic type. */
	struct HumanName *valueHumanName;
/* description: The value of the Output parameter as a basic type. */
	struct Identifier *valueIdentifier;
/* description: The value of the Output parameter as a basic type. */
	struct Money *valueMoney;
/* description: The value of the Output parameter as a basic type. */
	struct Period *valuePeriod;
/* description: The value of the Output parameter as a basic type. */
	struct Quantity *valueQuantity;
/* description: The value of the Output parameter as a basic type. */
	struct Range *valueRange;
/* description: The value of the Output parameter as a basic type. */
	struct Ratio *valueRatio;
/* description: The value of the Output parameter as a basic type. */
	struct RatioRange *valueRatioRange;
/* description: The value of the Output parameter as a basic type. */
	struct Reference *valueReference;
/* description: The value of the Output parameter as a basic type. */
	struct SampledData *valueSampledData;
/* description: The value of the Output parameter as a basic type. */
	struct Signature *valueSignature;
/* description: The value of the Output parameter as a basic type. */
	struct Timing *valueTiming;
/* description: The value of the Output parameter as a basic type. */
	struct ContactDetail *valueContactDetail;
/* description: The value of the Output parameter as a basic type. */
	struct DataRequirement *valueDataRequirement;
/* description: The value of the Output parameter as a basic type. */
	struct Expression *valueExpression;
/* description: The value of the Output parameter as a basic type. */
	struct ParameterDefinition *valueParameterDefinition;
/* description: The value of the Output parameter as a basic type. */
	struct RelatedArtifact *valueRelatedArtifact;
/* description: The value of the Output parameter as a basic type. */
	struct TriggerDefinition *valueTriggerDefinition;
/* description: The value of the Output parameter as a basic type. */
	struct UsageContext *valueUsageContext;
/* description: The value of the Output parameter as a basic type. */
	struct Availability *valueAvailability;
/* description: The value of the Output parameter as a basic type. */
	struct ExtendedContactDetail *valueExtendedContactDetail;
/* description: The value of the Output parameter as a basic type. */
	struct Dosage *valueDosage;
/* description: The value of the Output parameter as a basic type. */
	struct Meta *valueMeta;
};
typedef struct Transport_Output Transport_Output;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet {
/* description: This is a ValueSet resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers. */
	uri url_;
/* description: A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. */
	string version;
/* description: Indicates the mechanism used to compare versions to determine which ValueSet is more current. */
/* pattern: ^^[\s\S]+$$ */
	string versionAlgorithmString;
/* description: Indicates the mechanism used to compare versions to determine which ValueSet is more current. */
	struct Coding *versionAlgorithmCoding;
/* description: A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation. */
	string name;
/* description: A short, descriptive, user-friendly title for the value set. */
	string title;
/* description: The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state. */
	code status;
/* description: A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage. */
	boolean experimental;
/* description: The date (and optionally time) when the value set metadata or content logical definition (.compose) was created or revised. */
	dateTime date_;
/* description: The name of the organization or individual responsible for the release and ongoing maintenance of the value set. */
	string publisher;
/* description: Contact details to assist a user in finding and communicating with the publisher. */
	int contact_count;
	struct ContactDetail *contact;
/* description: A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set. */
	markdown description;
/* description: The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances. */
	int useContext_count;
	struct UsageContext *useContext;
/* description: A legal or geographic region in which the value set is intended to be used. */
	int jurisdiction_count;
	struct CodeableConcept *jurisdiction;
/* description: Explanation of why this value set is needed and why it has been designed as it has. */
	markdown purpose;
/* description: A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set. */
	markdown copyright;
/* description: A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved'). */
	string copyrightLabel;
/* description: The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage. */
	date approvalDate;
/* description: The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date. */
	date lastReviewDate;
/* description: The period during which the ValueSet content was or is planned to be in active use. */
	struct Period *effectivePeriod;
/* description: Descriptions related to the content of the ValueSet. Topics provide a high-level categorization as well as keywords for the ValueSet that can be useful for filtering and searching. */
	int topic_count;
	struct CodeableConcept *topic;
/* description: An individiual or organization primarily involved in the creation and maintenance of the ValueSet. */
	int author_count;
	struct ContactDetail *author;
/* description: An individual or organization primarily responsible for internal coherence of the ValueSet. */
	int editor_count;
	struct ContactDetail *editor;
/* description: An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ValueSet. */
	int reviewer_count;
	struct ContactDetail *reviewer;
/* description: An individual or organization asserted by the publisher to be responsible for officially endorsing the ValueSet for use in some setting. */
	int endorser_count;
	struct ContactDetail *endorser;
/* description: Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts. */
	int relatedArtifact_count;
	struct RelatedArtifact *relatedArtifact;
/* description: If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change. */
	boolean immutable;
/* description: A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD). */
	struct ValueSet_Compose *compose;
/* description: A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed. */
	struct ValueSet_Expansion *expansion;
/* description: Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description. */
	struct ValueSet_Scope *scope;
};
typedef struct ValueSet ValueSet;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Compose {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version. */
	date lockedDate;
/* description: Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included). */
	boolean inactive;
/* description: Include one or more codes from a code system or other value set(s). */
	int include_count;
	struct ValueSet_Include *include;
/* description: Exclude one or more codes from the value set based on code system filters and/or other value sets. */
	int exclude_count;
	struct ValueSet_Include *exclude;
/* description: A property to return in the expansion, if the client doesn't ask for any particular properties. May be either a code from the code system definition (convenient) or a the formal URI that refers to the property. The special value '*' means all properties known to the server. */
	int property_count;
	string property;
};
typedef struct ValueSet_Compose ValueSet_Compose;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Include {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI which is the code system from which the selected codes come from. */
	uri system;
/* description: The version of the code system that the codes are selected from, or the special version '*' for all versions. */
	string version;
/* description: Specifies a concept to be included or excluded. */
	int concept_count;
	struct ValueSet_Concept *concept;
/* description: Select concepts by specifying a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified within the include, they SHALL all be true. */
	int filter_count;
	struct ValueSet_Filter *filter;
/* description: Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the intersection of the contents of all of the referenced value sets. */
	int valueSet_count;
	canonical valueSet;
/* description: A copyright statement for the specific code system asserted by the containing ValueSet.compose.include element's system value (if the associated ValueSet.compose.include.version element is not present); or the code system and version combination (if the associated ValueSet.compose.include.version element is present). */
	string copyright;
};
typedef struct ValueSet_Include ValueSet_Include;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Concept {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Specifies a code for the concept to be included or excluded. */
	code code_;
/* description: The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system. */
	string display;
/* description: Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc. */
	int designation_count;
	struct ValueSet_Designation *designation;
};
typedef struct ValueSet_Concept ValueSet_Concept;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Designation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The language this designation is defined for. */
	code language;
/* description: A code that represents types of uses of designations. */
	struct Coding *use;
/* description: Additional codes that detail how this designation would be used, if there is more than one use. */
	int additionalUse_count;
	struct Coding *additionalUse;
/* description: The text value for this designation. */
	string value;
};
typedef struct ValueSet_Designation ValueSet_Designation;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Filter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that identifies a property or a filter defined in the code system. */
	code property;
/* description: The kind of operation to perform as a part of the filter criteria. */
	code op;
/* description: The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'. */
	string value;
};
typedef struct ValueSet_Filter ValueSet_Filter;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Expansion {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier. */
	uri identifier;
/* description: As per paging Search results, the next URLs are opaque to the client, have no dictated structure, and only the server understands them. */
	uri next;
/* description: The time at which the expansion was produced by the expanding system. */
	dateTime timestamp;
/* description: The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter. */
	integer total;
/* description: If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present. */
	integer offset;
/* description: A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion. */
	int parameter_count;
	struct ValueSet_Parameter *parameter;
/* description: A property defines an additional slot through which additional information can be provided about a concept. */
	int property_count;
	struct ValueSet_Property *property;
/* description: The codes that are contained in the value set expansion. */
	int contains_count;
	struct ValueSet_Contains *contains;
};
typedef struct ValueSet_Expansion ValueSet_Expansion;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Parameter {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process. */
	string name;
/* description: The value of the parameter. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of the parameter. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of the parameter. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of the parameter. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: The value of the parameter. */
/* pattern: ^\S*$ */
	string valueUri;
/* description: The value of the parameter. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of the parameter. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
};
typedef struct ValueSet_Parameter ValueSet_Parameter;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Property {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that is used to identify the property. The code is used in ValueSet.expansion.contains.property.code. */
	code code_;
/* description: Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system. */
	uri uri_;
};
typedef struct ValueSet_Property ValueSet_Property;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Contains {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: An absolute URI which is the code system in which the code for this item in the expansion is defined. */
	uri system;
/* description: If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value. */
	boolean abstract;
/* description: If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether a concept is inactive (and it may depend on the context of use). */
	boolean inactive;
/* description: The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged. */
	string version;
/* description: The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set. */
	code code_;
/* description: The recommended display for this item in the expansion. */
	string display;
/* description: Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation. */
	int designation_count;
	struct ValueSet_Designation *designation;
/* description: A property value for this concept. */
	int property_count;
	struct ValueSet_Property1 *property;
/* description: Other codes and entries contained under this entry in the hierarchy. */
	int contains_count;
	struct ValueSet_Contains *contains;
};
typedef struct ValueSet_Contains ValueSet_Contains;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Property1 {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that is a reference to ValueSet.expansion.property.code. */
	code code_;
/* description: The value of this property. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of this property. */
	struct Coding *valueCoding;
/* description: The value of this property. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of this property. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of this property. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of this property. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of this property. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
/* description: A subproperty value for this concept. */
	int subProperty_count;
	struct ValueSet_SubProperty *subProperty;
};
typedef struct ValueSet_Property1 ValueSet_Property1;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_SubProperty {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A code that is a reference to ValueSet.expansion.property.code. */
	code code_;
/* description: The value of this subproperty. */
/* pattern: ^[^\s]+( [^\s]+)*$ */
	string valueCode;
/* description: The value of this subproperty. */
	struct Coding *valueCoding;
/* description: The value of this subproperty. */
/* pattern: ^^[\s\S]+$$ */
	string valueString;
/* description: The value of this subproperty. */
/* pattern: ^[0]|[-+]?[1-9][0-9]*$ */
	number valueInteger;
/* description: The value of this subproperty. */
/* pattern: ^true|false$ */
	boolean valueBoolean;
/* description: The value of this subproperty. */
/* pattern: ^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?)?)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$ */
	string valueDateTime;
/* description: The value of this subproperty. */
/* pattern: ^-?(0|[1-9][0-9]{0,17})(\.[0-9]{1,17})?([eE][+-]?[0-9]{1,9}})?$ */
	number valueDecimal;
};
typedef struct ValueSet_SubProperty ValueSet_SubProperty;

/* description: A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html). */
struct ValueSet_Scope {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Criteria describing which concepts or codes should be included and why. */
	string inclusionCriteria;
/* description: Criteria describing which concepts or codes should be excluded and why. */
	string exclusionCriteria;
};
typedef struct ValueSet_Scope ValueSet_Scope;

/* description: Describes validation requirements, source(s), status and dates for one or more elements. */
struct VerificationResult {
/* description: This is a VerificationResult resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A resource that was validated. */
	int target_count;
	struct Reference *target;
/* description: The fhirpath location(s) within the resource that was validated. */
	int targetLocation_count;
	string targetLocation;
/* description: The frequency with which the target must be validated (none; initial; periodic). */
	struct CodeableConcept *need;
/* description: The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed). */
	code status;
/* description: When the validation status was updated. */
	dateTime statusDate;
/* description: What the target is validated against (nothing; primary source; multiple sources). */
	struct CodeableConcept *validationType;
/* description: The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context). */
	int validationProcess_count;
	struct CodeableConcept *validationProcess;
/* description: Frequency of revalidation. */
	struct Timing *frequency;
/* description: The date/time validation was last completed (including failed validations). */
	dateTime lastPerformed;
/* description: The date when target is next validated, if appropriate. */
	date nextScheduled;
/* description: The result if validation fails (fatal; warning; record only; none). */
	struct CodeableConcept *failureAction;
/* description: Information about the primary source(s) involved in validation. */
	int primarySource_count;
	struct VerificationResult_PrimarySource *primarySource;
/* description: Information about the entity attesting to information. */
	struct VerificationResult_Attestation *attestation;
/* description: Information about the entity validating information. */
	int validator_count;
	struct VerificationResult_Validator *validator;
};
typedef struct VerificationResult VerificationResult;

/* description: Describes validation requirements, source(s), status and dates for one or more elements. */
struct VerificationResult_PrimarySource {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to the primary source. */
	struct Reference *who;
/* description: Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source). */
	int type_count;
	struct CodeableConcept *type;
/* description: Method for communicating with the primary source (manual; API; Push). */
	int communicationMethod_count;
	struct CodeableConcept *communicationMethod;
/* description: Status of the validation of the target against the primary source (successful; failed; unknown). */
	struct CodeableConcept *validationStatus;
/* description: When the target was validated against the primary source. */
	dateTime validationDate;
/* description: Ability of the primary source to push updates/alerts (yes; no; undetermined). */
	struct CodeableConcept *canPushUpdates;
/* description: Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source). */
	int pushTypeAvailable_count;
	struct CodeableConcept *pushTypeAvailable;
};
typedef struct VerificationResult_PrimarySource VerificationResult_PrimarySource;

/* description: Describes validation requirements, source(s), status and dates for one or more elements. */
struct VerificationResult_Attestation {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: The individual or organization attesting to information. */
	struct Reference *who;
/* description: When the who is asserting on behalf of another (organization or individual). */
	struct Reference *onBehalfOf;
/* description: The method by which attested information was submitted/retrieved (manual; API; Push). */
	struct CodeableConcept *communicationMethod;
/* description: The date the information was attested to. */
	date date_;
/* description: A digital identity certificate associated with the attestation source. */
	string sourceIdentityCertificate;
/* description: A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source. */
	string proxyIdentityCertificate;
/* description: Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source. */
	struct Signature *proxySignature;
/* description: Signed assertion by the attestation source that they have attested to the information. */
	struct Signature *sourceSignature;
};
typedef struct VerificationResult_Attestation VerificationResult_Attestation;

/* description: Describes validation requirements, source(s), status and dates for one or more elements. */
struct VerificationResult_Validator {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Reference to the organization validating information. */
	struct Reference *organization;
/* description: A digital identity certificate associated with the validator. */
	string identityCertificate;
/* description: Signed assertion by the validator that they have validated the information. */
	struct Signature *attestationSignature;
};
typedef struct VerificationResult_Validator VerificationResult_Validator;

/* description: An authorization for the provision of glasses and/or contact lenses to a patient. */
struct VisionPrescription {
/* description: This is a VisionPrescription resource */
	string resourceType;
/* description: The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes. */
	id id_;
/* description: The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource. */
	struct Meta *meta;
/* description: A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc. */
	uri implicitRules;
/* description: The base language in which the resource is written. */
	code language;
/* description: A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety. */
	struct Narrative *text;
/* description: These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning. */
	int contained_count;
	ResourceList contained;
/* description: May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: A unique identifier assigned to this vision prescription. */
	int identifier_count;
	struct Identifier *identifier;
/* description: The status of the resource instance. */
	code status;
/* description: The date this resource was created. */
	dateTime created;
/* description: A resource reference to the person to whom the vision prescription applies. */
	struct Reference *patient;
/* description: A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued. */
	struct Reference *encounter;
/* description: The date (and perhaps time) when the prescription was written. */
	dateTime dateWritten;
/* description: The healthcare professional responsible for authorizing the prescription. */
	struct Reference *prescriber;
/* description: Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals. */
	int lensSpecification_count;
	struct VisionPrescription_LensSpecification *lensSpecification;
};
typedef struct VisionPrescription VisionPrescription;

/* description: An authorization for the provision of glasses and/or contact lenses to a patient. */
struct VisionPrescription_LensSpecification {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Identifies the type of vision correction product which is required for the patient. */
	struct CodeableConcept *product;
/* description: The eye for which the lens specification applies. */
	code eye;
/* description: Lens power measured in dioptres (0.25 units). */
	decimal sphere;
/* description: Power adjustment for astigmatism measured in dioptres (0.25 units). */
	decimal cylinder;
/* description: Adjustment for astigmatism measured in integer degrees. */
	integer axis;
/* description: Allows for adjustment on two axis. */
	int prism_count;
	struct VisionPrescription_Prism *prism;
/* description: Power adjustment for multifocal lenses measured in dioptres (0.25 units). */
	decimal add;
/* description: Contact lens power measured in dioptres (0.25 units). */
	decimal power;
/* description: Back curvature measured in millimetres. */
	decimal backCurve;
/* description: Contact lens diameter measured in millimetres. */
	decimal diameter;
/* description: The recommended maximum wear period for the lens. */
	struct Quantity *duration;
/* description: Special color or pattern. */
	string color;
/* description: Brand recommendations or restrictions. */
	string brand;
/* description: Notes for special requirements such as coatings and lens materials. */
	int note_count;
	struct Annotation *note;
};
typedef struct VisionPrescription_LensSpecification VisionPrescription_LensSpecification;

/* description: An authorization for the provision of glasses and/or contact lenses to a patient. */
struct VisionPrescription_Prism {
/* description: Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces. */
	string id_;
/* description: May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. */
	int extension_count;
	struct Extension *extension;
/* description: May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself). */
	int modifierExtension_count;
	struct Extension *modifierExtension;
/* description: Amount of prism to compensate for eye alignment in fractional units. */
	decimal amount;
/* description: The relative base, or reference lens edge, for the prism. */
	code base;
};
typedef struct VisionPrescription_Prism VisionPrescription_Prism;

