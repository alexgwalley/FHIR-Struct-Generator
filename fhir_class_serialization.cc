String8
Serialize_Resource(Arena *arena, Resource *resource)
{
	switch (resource->resourceType) {
		case ResourceType::Resource:
			return Serialize_Resource(arena, (Resource*)resource);
		case ResourceType::Account:
			return Serialize_Account(arena, (Account*)resource);
		case ResourceType::Account_Coverage:
			return Serialize_Account_Coverage(arena, (Account_Coverage*)resource);
		case ResourceType::Account_Guarantor:
			return Serialize_Account_Guarantor(arena, (Account_Guarantor*)resource);
		case ResourceType::ActivityDefinition:
			return Serialize_ActivityDefinition(arena, (ActivityDefinition*)resource);
		case ResourceType::ActivityDefinition_Participant:
			return Serialize_ActivityDefinition_Participant(arena, (ActivityDefinition_Participant*)resource);
		case ResourceType::ActivityDefinition_DynamicValue:
			return Serialize_ActivityDefinition_DynamicValue(arena, (ActivityDefinition_DynamicValue*)resource);
		case ResourceType::AdverseEvent:
			return Serialize_AdverseEvent(arena, (AdverseEvent*)resource);
		case ResourceType::AdverseEvent_SuspectEntity:
			return Serialize_AdverseEvent_SuspectEntity(arena, (AdverseEvent_SuspectEntity*)resource);
		case ResourceType::AdverseEvent_SuspectEntity_Causality:
			return Serialize_AdverseEvent_SuspectEntity_Causality(arena, (AdverseEvent_SuspectEntity_Causality*)resource);
		case ResourceType::AllergyIntolerance:
			return Serialize_AllergyIntolerance(arena, (AllergyIntolerance*)resource);
		case ResourceType::AllergyIntolerance_Reaction:
			return Serialize_AllergyIntolerance_Reaction(arena, (AllergyIntolerance_Reaction*)resource);
		case ResourceType::Appointment:
			return Serialize_Appointment(arena, (Appointment*)resource);
		case ResourceType::Appointment_Participant:
			return Serialize_Appointment_Participant(arena, (Appointment_Participant*)resource);
		case ResourceType::AppointmentResponse:
			return Serialize_AppointmentResponse(arena, (AppointmentResponse*)resource);
		case ResourceType::AuditEvent:
			return Serialize_AuditEvent(arena, (AuditEvent*)resource);
		case ResourceType::AuditEvent_Agent:
			return Serialize_AuditEvent_Agent(arena, (AuditEvent_Agent*)resource);
		case ResourceType::AuditEvent_Agent_Network:
			return Serialize_AuditEvent_Agent_Network(arena, (AuditEvent_Agent_Network*)resource);
		case ResourceType::AuditEvent_Source:
			return Serialize_AuditEvent_Source(arena, (AuditEvent_Source*)resource);
		case ResourceType::AuditEvent_Entity:
			return Serialize_AuditEvent_Entity(arena, (AuditEvent_Entity*)resource);
		case ResourceType::AuditEvent_Entity_Detail:
			return Serialize_AuditEvent_Entity_Detail(arena, (AuditEvent_Entity_Detail*)resource);
		case ResourceType::Basic:
			return Serialize_Basic(arena, (Basic*)resource);
		case ResourceType::Binary:
			return Serialize_Binary(arena, (Binary*)resource);
		case ResourceType::BiologicallyDerivedProduct:
			return Serialize_BiologicallyDerivedProduct(arena, (BiologicallyDerivedProduct*)resource);
		case ResourceType::BiologicallyDerivedProduct_Collection:
			return Serialize_BiologicallyDerivedProduct_Collection(arena, (BiologicallyDerivedProduct_Collection*)resource);
		case ResourceType::BiologicallyDerivedProduct_Processing:
			return Serialize_BiologicallyDerivedProduct_Processing(arena, (BiologicallyDerivedProduct_Processing*)resource);
		case ResourceType::BiologicallyDerivedProduct_Manipulation:
			return Serialize_BiologicallyDerivedProduct_Manipulation(arena, (BiologicallyDerivedProduct_Manipulation*)resource);
		case ResourceType::BiologicallyDerivedProduct_Storage:
			return Serialize_BiologicallyDerivedProduct_Storage(arena, (BiologicallyDerivedProduct_Storage*)resource);
		case ResourceType::BodyStructure:
			return Serialize_BodyStructure(arena, (BodyStructure*)resource);
		case ResourceType::Bundle:
			return Serialize_Bundle(arena, (Bundle*)resource);
		case ResourceType::Bundle_Link:
			return Serialize_Bundle_Link(arena, (Bundle_Link*)resource);
		case ResourceType::Bundle_Entry:
			return Serialize_Bundle_Entry(arena, (Bundle_Entry*)resource);
		case ResourceType::Bundle_Entry_Search:
			return Serialize_Bundle_Entry_Search(arena, (Bundle_Entry_Search*)resource);
		case ResourceType::Bundle_Entry_Request:
			return Serialize_Bundle_Entry_Request(arena, (Bundle_Entry_Request*)resource);
		case ResourceType::Bundle_Entry_Response:
			return Serialize_Bundle_Entry_Response(arena, (Bundle_Entry_Response*)resource);
		case ResourceType::CapabilityStatement:
			return Serialize_CapabilityStatement(arena, (CapabilityStatement*)resource);
		case ResourceType::CapabilityStatement_Software:
			return Serialize_CapabilityStatement_Software(arena, (CapabilityStatement_Software*)resource);
		case ResourceType::CapabilityStatement_Implementation:
			return Serialize_CapabilityStatement_Implementation(arena, (CapabilityStatement_Implementation*)resource);
		case ResourceType::CapabilityStatement_Rest:
			return Serialize_CapabilityStatement_Rest(arena, (CapabilityStatement_Rest*)resource);
		case ResourceType::CapabilityStatement_Rest_Security:
			return Serialize_CapabilityStatement_Rest_Security(arena, (CapabilityStatement_Rest_Security*)resource);
		case ResourceType::CapabilityStatement_Rest_Resource:
			return Serialize_CapabilityStatement_Rest_Resource(arena, (CapabilityStatement_Rest_Resource*)resource);
		case ResourceType::CapabilityStatement_Rest_Resource_Interaction:
			return Serialize_CapabilityStatement_Rest_Resource_Interaction(arena, (CapabilityStatement_Rest_Resource_Interaction*)resource);
		case ResourceType::CapabilityStatement_Rest_Resource_SearchParam:
			return Serialize_CapabilityStatement_Rest_Resource_SearchParam(arena, (CapabilityStatement_Rest_Resource_SearchParam*)resource);
		case ResourceType::CapabilityStatement_Rest_Resource_Operation:
			return Serialize_CapabilityStatement_Rest_Resource_Operation(arena, (CapabilityStatement_Rest_Resource_Operation*)resource);
		case ResourceType::CapabilityStatement_Rest_Interaction:
			return Serialize_CapabilityStatement_Rest_Interaction(arena, (CapabilityStatement_Rest_Interaction*)resource);
		case ResourceType::CapabilityStatement_Messaging:
			return Serialize_CapabilityStatement_Messaging(arena, (CapabilityStatement_Messaging*)resource);
		case ResourceType::CapabilityStatement_Messaging_Endpoint:
			return Serialize_CapabilityStatement_Messaging_Endpoint(arena, (CapabilityStatement_Messaging_Endpoint*)resource);
		case ResourceType::CapabilityStatement_Messaging_SupportedMessage:
			return Serialize_CapabilityStatement_Messaging_SupportedMessage(arena, (CapabilityStatement_Messaging_SupportedMessage*)resource);
		case ResourceType::CapabilityStatement_Document:
			return Serialize_CapabilityStatement_Document(arena, (CapabilityStatement_Document*)resource);
		case ResourceType::CarePlan:
			return Serialize_CarePlan(arena, (CarePlan*)resource);
		case ResourceType::CarePlan_Activity:
			return Serialize_CarePlan_Activity(arena, (CarePlan_Activity*)resource);
		case ResourceType::CarePlan_Activity_Detail:
			return Serialize_CarePlan_Activity_Detail(arena, (CarePlan_Activity_Detail*)resource);
		case ResourceType::CareTeam:
			return Serialize_CareTeam(arena, (CareTeam*)resource);
		case ResourceType::CareTeam_Participant:
			return Serialize_CareTeam_Participant(arena, (CareTeam_Participant*)resource);
		case ResourceType::CatalogEntry:
			return Serialize_CatalogEntry(arena, (CatalogEntry*)resource);
		case ResourceType::CatalogEntry_RelatedEntry:
			return Serialize_CatalogEntry_RelatedEntry(arena, (CatalogEntry_RelatedEntry*)resource);
		case ResourceType::ChargeItem:
			return Serialize_ChargeItem(arena, (ChargeItem*)resource);
		case ResourceType::ChargeItem_Performer:
			return Serialize_ChargeItem_Performer(arena, (ChargeItem_Performer*)resource);
		case ResourceType::ChargeItemDefinition:
			return Serialize_ChargeItemDefinition(arena, (ChargeItemDefinition*)resource);
		case ResourceType::ChargeItemDefinition_Applicability:
			return Serialize_ChargeItemDefinition_Applicability(arena, (ChargeItemDefinition_Applicability*)resource);
		case ResourceType::ChargeItemDefinition_PropertyGroup:
			return Serialize_ChargeItemDefinition_PropertyGroup(arena, (ChargeItemDefinition_PropertyGroup*)resource);
		case ResourceType::ChargeItemDefinition_PropertyGroup_PriceComponent:
			return Serialize_ChargeItemDefinition_PropertyGroup_PriceComponent(arena, (ChargeItemDefinition_PropertyGroup_PriceComponent*)resource);
		case ResourceType::Claim:
			return Serialize_Claim(arena, (Claim*)resource);
		case ResourceType::Claim_Related:
			return Serialize_Claim_Related(arena, (Claim_Related*)resource);
		case ResourceType::Claim_Payee:
			return Serialize_Claim_Payee(arena, (Claim_Payee*)resource);
		case ResourceType::Claim_CareTeam:
			return Serialize_Claim_CareTeam(arena, (Claim_CareTeam*)resource);
		case ResourceType::Claim_SupportingInfo:
			return Serialize_Claim_SupportingInfo(arena, (Claim_SupportingInfo*)resource);
		case ResourceType::Claim_Diagnosis:
			return Serialize_Claim_Diagnosis(arena, (Claim_Diagnosis*)resource);
		case ResourceType::Claim_Procedure:
			return Serialize_Claim_Procedure(arena, (Claim_Procedure*)resource);
		case ResourceType::Claim_Insurance:
			return Serialize_Claim_Insurance(arena, (Claim_Insurance*)resource);
		case ResourceType::Claim_Accident:
			return Serialize_Claim_Accident(arena, (Claim_Accident*)resource);
		case ResourceType::Claim_Item:
			return Serialize_Claim_Item(arena, (Claim_Item*)resource);
		case ResourceType::Claim_Item_Detail:
			return Serialize_Claim_Item_Detail(arena, (Claim_Item_Detail*)resource);
		case ResourceType::Claim_Item_Detail_SubDetail:
			return Serialize_Claim_Item_Detail_SubDetail(arena, (Claim_Item_Detail_SubDetail*)resource);
		case ResourceType::ClaimResponse:
			return Serialize_ClaimResponse(arena, (ClaimResponse*)resource);
		case ResourceType::ClaimResponse_Item:
			return Serialize_ClaimResponse_Item(arena, (ClaimResponse_Item*)resource);
		case ResourceType::ClaimResponse_Item_Adjudication:
			return Serialize_ClaimResponse_Item_Adjudication(arena, (ClaimResponse_Item_Adjudication*)resource);
		case ResourceType::ClaimResponse_Item_Detail:
			return Serialize_ClaimResponse_Item_Detail(arena, (ClaimResponse_Item_Detail*)resource);
		case ResourceType::ClaimResponse_Item_Detail_SubDetail:
			return Serialize_ClaimResponse_Item_Detail_SubDetail(arena, (ClaimResponse_Item_Detail_SubDetail*)resource);
		case ResourceType::ClaimResponse_AddItem:
			return Serialize_ClaimResponse_AddItem(arena, (ClaimResponse_AddItem*)resource);
		case ResourceType::ClaimResponse_AddItem_Detail:
			return Serialize_ClaimResponse_AddItem_Detail(arena, (ClaimResponse_AddItem_Detail*)resource);
		case ResourceType::ClaimResponse_AddItem_Detail_SubDetail:
			return Serialize_ClaimResponse_AddItem_Detail_SubDetail(arena, (ClaimResponse_AddItem_Detail_SubDetail*)resource);
		case ResourceType::ClaimResponse_Total:
			return Serialize_ClaimResponse_Total(arena, (ClaimResponse_Total*)resource);
		case ResourceType::ClaimResponse_Payment:
			return Serialize_ClaimResponse_Payment(arena, (ClaimResponse_Payment*)resource);
		case ResourceType::ClaimResponse_ProcessNote:
			return Serialize_ClaimResponse_ProcessNote(arena, (ClaimResponse_ProcessNote*)resource);
		case ResourceType::ClaimResponse_Insurance:
			return Serialize_ClaimResponse_Insurance(arena, (ClaimResponse_Insurance*)resource);
		case ResourceType::ClaimResponse_Error:
			return Serialize_ClaimResponse_Error(arena, (ClaimResponse_Error*)resource);
		case ResourceType::ClinicalImpression:
			return Serialize_ClinicalImpression(arena, (ClinicalImpression*)resource);
		case ResourceType::ClinicalImpression_Investigation:
			return Serialize_ClinicalImpression_Investigation(arena, (ClinicalImpression_Investigation*)resource);
		case ResourceType::ClinicalImpression_Finding:
			return Serialize_ClinicalImpression_Finding(arena, (ClinicalImpression_Finding*)resource);
		case ResourceType::CodeSystem:
			return Serialize_CodeSystem(arena, (CodeSystem*)resource);
		case ResourceType::CodeSystem_Filter:
			return Serialize_CodeSystem_Filter(arena, (CodeSystem_Filter*)resource);
		case ResourceType::CodeSystem_Property:
			return Serialize_CodeSystem_Property(arena, (CodeSystem_Property*)resource);
		case ResourceType::CodeSystem_Concept:
			return Serialize_CodeSystem_Concept(arena, (CodeSystem_Concept*)resource);
		case ResourceType::CodeSystem_Concept_Designation:
			return Serialize_CodeSystem_Concept_Designation(arena, (CodeSystem_Concept_Designation*)resource);
		case ResourceType::CodeSystem_Concept_Property:
			return Serialize_CodeSystem_Concept_Property(arena, (CodeSystem_Concept_Property*)resource);
		case ResourceType::Communication:
			return Serialize_Communication(arena, (Communication*)resource);
		case ResourceType::Communication_Payload:
			return Serialize_Communication_Payload(arena, (Communication_Payload*)resource);
		case ResourceType::CommunicationRequest:
			return Serialize_CommunicationRequest(arena, (CommunicationRequest*)resource);
		case ResourceType::CommunicationRequest_Payload:
			return Serialize_CommunicationRequest_Payload(arena, (CommunicationRequest_Payload*)resource);
		case ResourceType::CompartmentDefinition:
			return Serialize_CompartmentDefinition(arena, (CompartmentDefinition*)resource);
		case ResourceType::CompartmentDefinition_Resource:
			return Serialize_CompartmentDefinition_Resource(arena, (CompartmentDefinition_Resource*)resource);
		case ResourceType::Composition:
			return Serialize_Composition(arena, (Composition*)resource);
		case ResourceType::Composition_Attester:
			return Serialize_Composition_Attester(arena, (Composition_Attester*)resource);
		case ResourceType::Composition_RelatesTo:
			return Serialize_Composition_RelatesTo(arena, (Composition_RelatesTo*)resource);
		case ResourceType::Composition_Event:
			return Serialize_Composition_Event(arena, (Composition_Event*)resource);
		case ResourceType::Composition_Section:
			return Serialize_Composition_Section(arena, (Composition_Section*)resource);
		case ResourceType::ConceptMap:
			return Serialize_ConceptMap(arena, (ConceptMap*)resource);
		case ResourceType::ConceptMap_Group:
			return Serialize_ConceptMap_Group(arena, (ConceptMap_Group*)resource);
		case ResourceType::ConceptMap_Group_Element:
			return Serialize_ConceptMap_Group_Element(arena, (ConceptMap_Group_Element*)resource);
		case ResourceType::ConceptMap_Group_Element_Target:
			return Serialize_ConceptMap_Group_Element_Target(arena, (ConceptMap_Group_Element_Target*)resource);
		case ResourceType::ConceptMap_Group_Element_Target_DependsOn:
			return Serialize_ConceptMap_Group_Element_Target_DependsOn(arena, (ConceptMap_Group_Element_Target_DependsOn*)resource);
		case ResourceType::ConceptMap_Group_Unmapped:
			return Serialize_ConceptMap_Group_Unmapped(arena, (ConceptMap_Group_Unmapped*)resource);
		case ResourceType::Condition:
			return Serialize_Condition(arena, (Condition*)resource);
		case ResourceType::Condition_Stage:
			return Serialize_Condition_Stage(arena, (Condition_Stage*)resource);
		case ResourceType::Condition_Evidence:
			return Serialize_Condition_Evidence(arena, (Condition_Evidence*)resource);
		case ResourceType::Consent:
			return Serialize_Consent(arena, (Consent*)resource);
		case ResourceType::Consent_Policy:
			return Serialize_Consent_Policy(arena, (Consent_Policy*)resource);
		case ResourceType::Consent_Verification:
			return Serialize_Consent_Verification(arena, (Consent_Verification*)resource);
		case ResourceType::Consent_Provision:
			return Serialize_Consent_Provision(arena, (Consent_Provision*)resource);
		case ResourceType::Consent_Provision_Actor:
			return Serialize_Consent_Provision_Actor(arena, (Consent_Provision_Actor*)resource);
		case ResourceType::Consent_Provision_Data:
			return Serialize_Consent_Provision_Data(arena, (Consent_Provision_Data*)resource);
		case ResourceType::Contract:
			return Serialize_Contract(arena, (Contract*)resource);
		case ResourceType::Contract_ContentDefinition:
			return Serialize_Contract_ContentDefinition(arena, (Contract_ContentDefinition*)resource);
		case ResourceType::Contract_Term:
			return Serialize_Contract_Term(arena, (Contract_Term*)resource);
		case ResourceType::Contract_Term_SecurityLabel:
			return Serialize_Contract_Term_SecurityLabel(arena, (Contract_Term_SecurityLabel*)resource);
		case ResourceType::Contract_Term_Offer:
			return Serialize_Contract_Term_Offer(arena, (Contract_Term_Offer*)resource);
		case ResourceType::Contract_Term_Offer_Party:
			return Serialize_Contract_Term_Offer_Party(arena, (Contract_Term_Offer_Party*)resource);
		case ResourceType::Contract_Term_Offer_Answer:
			return Serialize_Contract_Term_Offer_Answer(arena, (Contract_Term_Offer_Answer*)resource);
		case ResourceType::Contract_Term_Asset:
			return Serialize_Contract_Term_Asset(arena, (Contract_Term_Asset*)resource);
		case ResourceType::Contract_Term_Asset_Context:
			return Serialize_Contract_Term_Asset_Context(arena, (Contract_Term_Asset_Context*)resource);
		case ResourceType::Contract_Term_Asset_ValuedItem:
			return Serialize_Contract_Term_Asset_ValuedItem(arena, (Contract_Term_Asset_ValuedItem*)resource);
		case ResourceType::Contract_Term_Action:
			return Serialize_Contract_Term_Action(arena, (Contract_Term_Action*)resource);
		case ResourceType::Contract_Term_Action_Subject:
			return Serialize_Contract_Term_Action_Subject(arena, (Contract_Term_Action_Subject*)resource);
		case ResourceType::Contract_Signer:
			return Serialize_Contract_Signer(arena, (Contract_Signer*)resource);
		case ResourceType::Contract_Friendly:
			return Serialize_Contract_Friendly(arena, (Contract_Friendly*)resource);
		case ResourceType::Contract_Legal:
			return Serialize_Contract_Legal(arena, (Contract_Legal*)resource);
		case ResourceType::Contract_Rule:
			return Serialize_Contract_Rule(arena, (Contract_Rule*)resource);
		case ResourceType::Coverage:
			return Serialize_Coverage(arena, (Coverage*)resource);
		case ResourceType::Coverage_Class:
			return Serialize_Coverage_Class(arena, (Coverage_Class*)resource);
		case ResourceType::Coverage_CostToBeneficiary:
			return Serialize_Coverage_CostToBeneficiary(arena, (Coverage_CostToBeneficiary*)resource);
		case ResourceType::Coverage_CostToBeneficiary_Exception:
			return Serialize_Coverage_CostToBeneficiary_Exception(arena, (Coverage_CostToBeneficiary_Exception*)resource);
		case ResourceType::CoverageEligibilityRequest:
			return Serialize_CoverageEligibilityRequest(arena, (CoverageEligibilityRequest*)resource);
		case ResourceType::CoverageEligibilityRequest_SupportingInfo:
			return Serialize_CoverageEligibilityRequest_SupportingInfo(arena, (CoverageEligibilityRequest_SupportingInfo*)resource);
		case ResourceType::CoverageEligibilityRequest_Insurance:
			return Serialize_CoverageEligibilityRequest_Insurance(arena, (CoverageEligibilityRequest_Insurance*)resource);
		case ResourceType::CoverageEligibilityRequest_Item:
			return Serialize_CoverageEligibilityRequest_Item(arena, (CoverageEligibilityRequest_Item*)resource);
		case ResourceType::CoverageEligibilityRequest_Item_Diagnosis:
			return Serialize_CoverageEligibilityRequest_Item_Diagnosis(arena, (CoverageEligibilityRequest_Item_Diagnosis*)resource);
		case ResourceType::CoverageEligibilityResponse:
			return Serialize_CoverageEligibilityResponse(arena, (CoverageEligibilityResponse*)resource);
		case ResourceType::CoverageEligibilityResponse_Insurance:
			return Serialize_CoverageEligibilityResponse_Insurance(arena, (CoverageEligibilityResponse_Insurance*)resource);
		case ResourceType::CoverageEligibilityResponse_Insurance_Item:
			return Serialize_CoverageEligibilityResponse_Insurance_Item(arena, (CoverageEligibilityResponse_Insurance_Item*)resource);
		case ResourceType::CoverageEligibilityResponse_Insurance_Item_Benefit:
			return Serialize_CoverageEligibilityResponse_Insurance_Item_Benefit(arena, (CoverageEligibilityResponse_Insurance_Item_Benefit*)resource);
		case ResourceType::CoverageEligibilityResponse_Error:
			return Serialize_CoverageEligibilityResponse_Error(arena, (CoverageEligibilityResponse_Error*)resource);
		case ResourceType::DetectedIssue:
			return Serialize_DetectedIssue(arena, (DetectedIssue*)resource);
		case ResourceType::DetectedIssue_Evidence:
			return Serialize_DetectedIssue_Evidence(arena, (DetectedIssue_Evidence*)resource);
		case ResourceType::DetectedIssue_Mitigation:
			return Serialize_DetectedIssue_Mitigation(arena, (DetectedIssue_Mitigation*)resource);
		case ResourceType::Device:
			return Serialize_Device(arena, (Device*)resource);
		case ResourceType::Device_UdiCarrier:
			return Serialize_Device_UdiCarrier(arena, (Device_UdiCarrier*)resource);
		case ResourceType::Device_DeviceName:
			return Serialize_Device_DeviceName(arena, (Device_DeviceName*)resource);
		case ResourceType::Device_Specialization:
			return Serialize_Device_Specialization(arena, (Device_Specialization*)resource);
		case ResourceType::Device_Version:
			return Serialize_Device_Version(arena, (Device_Version*)resource);
		case ResourceType::Device_Property:
			return Serialize_Device_Property(arena, (Device_Property*)resource);
		case ResourceType::DeviceDefinition:
			return Serialize_DeviceDefinition(arena, (DeviceDefinition*)resource);
		case ResourceType::DeviceDefinition_UdiDeviceIdentifier:
			return Serialize_DeviceDefinition_UdiDeviceIdentifier(arena, (DeviceDefinition_UdiDeviceIdentifier*)resource);
		case ResourceType::DeviceDefinition_DeviceName:
			return Serialize_DeviceDefinition_DeviceName(arena, (DeviceDefinition_DeviceName*)resource);
		case ResourceType::DeviceDefinition_Specialization:
			return Serialize_DeviceDefinition_Specialization(arena, (DeviceDefinition_Specialization*)resource);
		case ResourceType::DeviceDefinition_Capability:
			return Serialize_DeviceDefinition_Capability(arena, (DeviceDefinition_Capability*)resource);
		case ResourceType::DeviceDefinition_Property:
			return Serialize_DeviceDefinition_Property(arena, (DeviceDefinition_Property*)resource);
		case ResourceType::DeviceDefinition_Material:
			return Serialize_DeviceDefinition_Material(arena, (DeviceDefinition_Material*)resource);
		case ResourceType::DeviceMetric:
			return Serialize_DeviceMetric(arena, (DeviceMetric*)resource);
		case ResourceType::DeviceMetric_Calibration:
			return Serialize_DeviceMetric_Calibration(arena, (DeviceMetric_Calibration*)resource);
		case ResourceType::DeviceRequest:
			return Serialize_DeviceRequest(arena, (DeviceRequest*)resource);
		case ResourceType::DeviceRequest_Parameter:
			return Serialize_DeviceRequest_Parameter(arena, (DeviceRequest_Parameter*)resource);
		case ResourceType::DeviceUseStatement:
			return Serialize_DeviceUseStatement(arena, (DeviceUseStatement*)resource);
		case ResourceType::DiagnosticReport:
			return Serialize_DiagnosticReport(arena, (DiagnosticReport*)resource);
		case ResourceType::DiagnosticReport_Media:
			return Serialize_DiagnosticReport_Media(arena, (DiagnosticReport_Media*)resource);
		case ResourceType::DocumentManifest:
			return Serialize_DocumentManifest(arena, (DocumentManifest*)resource);
		case ResourceType::DocumentManifest_Related:
			return Serialize_DocumentManifest_Related(arena, (DocumentManifest_Related*)resource);
		case ResourceType::DocumentReference:
			return Serialize_DocumentReference(arena, (DocumentReference*)resource);
		case ResourceType::DocumentReference_RelatesTo:
			return Serialize_DocumentReference_RelatesTo(arena, (DocumentReference_RelatesTo*)resource);
		case ResourceType::DocumentReference_Content:
			return Serialize_DocumentReference_Content(arena, (DocumentReference_Content*)resource);
		case ResourceType::DocumentReference_Context:
			return Serialize_DocumentReference_Context(arena, (DocumentReference_Context*)resource);
		case ResourceType::DomainResource:
			return Serialize_DomainResource(arena, (DomainResource*)resource);
		case ResourceType::EffectEvidenceSynthesis:
			return Serialize_EffectEvidenceSynthesis(arena, (EffectEvidenceSynthesis*)resource);
		case ResourceType::EffectEvidenceSynthesis_SampleSize:
			return Serialize_EffectEvidenceSynthesis_SampleSize(arena, (EffectEvidenceSynthesis_SampleSize*)resource);
		case ResourceType::EffectEvidenceSynthesis_ResultsByExposure:
			return Serialize_EffectEvidenceSynthesis_ResultsByExposure(arena, (EffectEvidenceSynthesis_ResultsByExposure*)resource);
		case ResourceType::EffectEvidenceSynthesis_EffectEstimate:
			return Serialize_EffectEvidenceSynthesis_EffectEstimate(arena, (EffectEvidenceSynthesis_EffectEstimate*)resource);
		case ResourceType::EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate:
			return Serialize_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate(arena, (EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate*)resource);
		case ResourceType::EffectEvidenceSynthesis_Certainty:
			return Serialize_EffectEvidenceSynthesis_Certainty(arena, (EffectEvidenceSynthesis_Certainty*)resource);
		case ResourceType::EffectEvidenceSynthesis_Certainty_CertaintySubcomponent:
			return Serialize_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, (EffectEvidenceSynthesis_Certainty_CertaintySubcomponent*)resource);
		case ResourceType::Encounter:
			return Serialize_Encounter(arena, (Encounter*)resource);
		case ResourceType::Encounter_StatusHistory:
			return Serialize_Encounter_StatusHistory(arena, (Encounter_StatusHistory*)resource);
		case ResourceType::Encounter_ClassHistory:
			return Serialize_Encounter_ClassHistory(arena, (Encounter_ClassHistory*)resource);
		case ResourceType::Encounter_Participant:
			return Serialize_Encounter_Participant(arena, (Encounter_Participant*)resource);
		case ResourceType::Encounter_Diagnosis:
			return Serialize_Encounter_Diagnosis(arena, (Encounter_Diagnosis*)resource);
		case ResourceType::Encounter_Hospitalization:
			return Serialize_Encounter_Hospitalization(arena, (Encounter_Hospitalization*)resource);
		case ResourceType::Encounter_Location:
			return Serialize_Encounter_Location(arena, (Encounter_Location*)resource);
		case ResourceType::Endpoint:
			return Serialize_Endpoint(arena, (Endpoint*)resource);
		case ResourceType::EnrollmentRequest:
			return Serialize_EnrollmentRequest(arena, (EnrollmentRequest*)resource);
		case ResourceType::EnrollmentResponse:
			return Serialize_EnrollmentResponse(arena, (EnrollmentResponse*)resource);
		case ResourceType::EpisodeOfCare:
			return Serialize_EpisodeOfCare(arena, (EpisodeOfCare*)resource);
		case ResourceType::EpisodeOfCare_StatusHistory:
			return Serialize_EpisodeOfCare_StatusHistory(arena, (EpisodeOfCare_StatusHistory*)resource);
		case ResourceType::EpisodeOfCare_Diagnosis:
			return Serialize_EpisodeOfCare_Diagnosis(arena, (EpisodeOfCare_Diagnosis*)resource);
		case ResourceType::EventDefinition:
			return Serialize_EventDefinition(arena, (EventDefinition*)resource);
		case ResourceType::Evidence:
			return Serialize_Evidence(arena, (Evidence*)resource);
		case ResourceType::EvidenceVariable:
			return Serialize_EvidenceVariable(arena, (EvidenceVariable*)resource);
		case ResourceType::EvidenceVariable_Characteristic:
			return Serialize_EvidenceVariable_Characteristic(arena, (EvidenceVariable_Characteristic*)resource);
		case ResourceType::ExampleScenario:
			return Serialize_ExampleScenario(arena, (ExampleScenario*)resource);
		case ResourceType::ExampleScenario_Actor:
			return Serialize_ExampleScenario_Actor(arena, (ExampleScenario_Actor*)resource);
		case ResourceType::ExampleScenario_Instance:
			return Serialize_ExampleScenario_Instance(arena, (ExampleScenario_Instance*)resource);
		case ResourceType::ExampleScenario_Instance_Version:
			return Serialize_ExampleScenario_Instance_Version(arena, (ExampleScenario_Instance_Version*)resource);
		case ResourceType::ExampleScenario_Instance_ContainedInstance:
			return Serialize_ExampleScenario_Instance_ContainedInstance(arena, (ExampleScenario_Instance_ContainedInstance*)resource);
		case ResourceType::ExampleScenario_Process:
			return Serialize_ExampleScenario_Process(arena, (ExampleScenario_Process*)resource);
		case ResourceType::ExampleScenario_Process_Step:
			return Serialize_ExampleScenario_Process_Step(arena, (ExampleScenario_Process_Step*)resource);
		case ResourceType::ExampleScenario_Process_Step_Operation:
			return Serialize_ExampleScenario_Process_Step_Operation(arena, (ExampleScenario_Process_Step_Operation*)resource);
		case ResourceType::ExampleScenario_Process_Step_Alternative:
			return Serialize_ExampleScenario_Process_Step_Alternative(arena, (ExampleScenario_Process_Step_Alternative*)resource);
		case ResourceType::ExplanationOfBenefit:
			return Serialize_ExplanationOfBenefit(arena, (ExplanationOfBenefit*)resource);
		case ResourceType::ExplanationOfBenefit_Related:
			return Serialize_ExplanationOfBenefit_Related(arena, (ExplanationOfBenefit_Related*)resource);
		case ResourceType::ExplanationOfBenefit_Payee:
			return Serialize_ExplanationOfBenefit_Payee(arena, (ExplanationOfBenefit_Payee*)resource);
		case ResourceType::ExplanationOfBenefit_CareTeam:
			return Serialize_ExplanationOfBenefit_CareTeam(arena, (ExplanationOfBenefit_CareTeam*)resource);
		case ResourceType::ExplanationOfBenefit_SupportingInfo:
			return Serialize_ExplanationOfBenefit_SupportingInfo(arena, (ExplanationOfBenefit_SupportingInfo*)resource);
		case ResourceType::ExplanationOfBenefit_Diagnosis:
			return Serialize_ExplanationOfBenefit_Diagnosis(arena, (ExplanationOfBenefit_Diagnosis*)resource);
		case ResourceType::ExplanationOfBenefit_Procedure:
			return Serialize_ExplanationOfBenefit_Procedure(arena, (ExplanationOfBenefit_Procedure*)resource);
		case ResourceType::ExplanationOfBenefit_Insurance:
			return Serialize_ExplanationOfBenefit_Insurance(arena, (ExplanationOfBenefit_Insurance*)resource);
		case ResourceType::ExplanationOfBenefit_Accident:
			return Serialize_ExplanationOfBenefit_Accident(arena, (ExplanationOfBenefit_Accident*)resource);
		case ResourceType::ExplanationOfBenefit_Item:
			return Serialize_ExplanationOfBenefit_Item(arena, (ExplanationOfBenefit_Item*)resource);
		case ResourceType::ExplanationOfBenefit_Item_Adjudication:
			return Serialize_ExplanationOfBenefit_Item_Adjudication(arena, (ExplanationOfBenefit_Item_Adjudication*)resource);
		case ResourceType::ExplanationOfBenefit_Item_Detail:
			return Serialize_ExplanationOfBenefit_Item_Detail(arena, (ExplanationOfBenefit_Item_Detail*)resource);
		case ResourceType::ExplanationOfBenefit_Item_Detail_SubDetail:
			return Serialize_ExplanationOfBenefit_Item_Detail_SubDetail(arena, (ExplanationOfBenefit_Item_Detail_SubDetail*)resource);
		case ResourceType::ExplanationOfBenefit_AddItem:
			return Serialize_ExplanationOfBenefit_AddItem(arena, (ExplanationOfBenefit_AddItem*)resource);
		case ResourceType::ExplanationOfBenefit_AddItem_Detail:
			return Serialize_ExplanationOfBenefit_AddItem_Detail(arena, (ExplanationOfBenefit_AddItem_Detail*)resource);
		case ResourceType::ExplanationOfBenefit_AddItem_Detail_SubDetail:
			return Serialize_ExplanationOfBenefit_AddItem_Detail_SubDetail(arena, (ExplanationOfBenefit_AddItem_Detail_SubDetail*)resource);
		case ResourceType::ExplanationOfBenefit_Total:
			return Serialize_ExplanationOfBenefit_Total(arena, (ExplanationOfBenefit_Total*)resource);
		case ResourceType::ExplanationOfBenefit_Payment:
			return Serialize_ExplanationOfBenefit_Payment(arena, (ExplanationOfBenefit_Payment*)resource);
		case ResourceType::ExplanationOfBenefit_ProcessNote:
			return Serialize_ExplanationOfBenefit_ProcessNote(arena, (ExplanationOfBenefit_ProcessNote*)resource);
		case ResourceType::ExplanationOfBenefit_BenefitBalance:
			return Serialize_ExplanationOfBenefit_BenefitBalance(arena, (ExplanationOfBenefit_BenefitBalance*)resource);
		case ResourceType::ExplanationOfBenefit_BenefitBalance_Financial:
			return Serialize_ExplanationOfBenefit_BenefitBalance_Financial(arena, (ExplanationOfBenefit_BenefitBalance_Financial*)resource);
		case ResourceType::FamilyMemberHistory:
			return Serialize_FamilyMemberHistory(arena, (FamilyMemberHistory*)resource);
		case ResourceType::FamilyMemberHistory_Condition:
			return Serialize_FamilyMemberHistory_Condition(arena, (FamilyMemberHistory_Condition*)resource);
		case ResourceType::Flag:
			return Serialize_Flag(arena, (Flag*)resource);
		case ResourceType::Goal:
			return Serialize_Goal(arena, (Goal*)resource);
		case ResourceType::Goal_Target:
			return Serialize_Goal_Target(arena, (Goal_Target*)resource);
		case ResourceType::GraphDefinition:
			return Serialize_GraphDefinition(arena, (GraphDefinition*)resource);
		case ResourceType::GraphDefinition_Link:
			return Serialize_GraphDefinition_Link(arena, (GraphDefinition_Link*)resource);
		case ResourceType::GraphDefinition_Link_Target:
			return Serialize_GraphDefinition_Link_Target(arena, (GraphDefinition_Link_Target*)resource);
		case ResourceType::GraphDefinition_Link_Target_Compartment:
			return Serialize_GraphDefinition_Link_Target_Compartment(arena, (GraphDefinition_Link_Target_Compartment*)resource);
		case ResourceType::Group:
			return Serialize_Group(arena, (Group*)resource);
		case ResourceType::Group_Characteristic:
			return Serialize_Group_Characteristic(arena, (Group_Characteristic*)resource);
		case ResourceType::Group_Member:
			return Serialize_Group_Member(arena, (Group_Member*)resource);
		case ResourceType::GuidanceResponse:
			return Serialize_GuidanceResponse(arena, (GuidanceResponse*)resource);
		case ResourceType::HealthcareService:
			return Serialize_HealthcareService(arena, (HealthcareService*)resource);
		case ResourceType::HealthcareService_Eligibility:
			return Serialize_HealthcareService_Eligibility(arena, (HealthcareService_Eligibility*)resource);
		case ResourceType::HealthcareService_AvailableTime:
			return Serialize_HealthcareService_AvailableTime(arena, (HealthcareService_AvailableTime*)resource);
		case ResourceType::HealthcareService_NotAvailable:
			return Serialize_HealthcareService_NotAvailable(arena, (HealthcareService_NotAvailable*)resource);
		case ResourceType::ImagingStudy:
			return Serialize_ImagingStudy(arena, (ImagingStudy*)resource);
		case ResourceType::ImagingStudy_Series:
			return Serialize_ImagingStudy_Series(arena, (ImagingStudy_Series*)resource);
		case ResourceType::ImagingStudy_Series_Performer:
			return Serialize_ImagingStudy_Series_Performer(arena, (ImagingStudy_Series_Performer*)resource);
		case ResourceType::ImagingStudy_Series_Instance:
			return Serialize_ImagingStudy_Series_Instance(arena, (ImagingStudy_Series_Instance*)resource);
		case ResourceType::Immunization:
			return Serialize_Immunization(arena, (Immunization*)resource);
		case ResourceType::Immunization_Performer:
			return Serialize_Immunization_Performer(arena, (Immunization_Performer*)resource);
		case ResourceType::Immunization_Education:
			return Serialize_Immunization_Education(arena, (Immunization_Education*)resource);
		case ResourceType::Immunization_Reaction:
			return Serialize_Immunization_Reaction(arena, (Immunization_Reaction*)resource);
		case ResourceType::Immunization_ProtocolApplied:
			return Serialize_Immunization_ProtocolApplied(arena, (Immunization_ProtocolApplied*)resource);
		case ResourceType::ImmunizationEvaluation:
			return Serialize_ImmunizationEvaluation(arena, (ImmunizationEvaluation*)resource);
		case ResourceType::ImmunizationRecommendation:
			return Serialize_ImmunizationRecommendation(arena, (ImmunizationRecommendation*)resource);
		case ResourceType::ImmunizationRecommendation_Recommendation:
			return Serialize_ImmunizationRecommendation_Recommendation(arena, (ImmunizationRecommendation_Recommendation*)resource);
		case ResourceType::ImmunizationRecommendation_Recommendation_DateCriterion:
			return Serialize_ImmunizationRecommendation_Recommendation_DateCriterion(arena, (ImmunizationRecommendation_Recommendation_DateCriterion*)resource);
		case ResourceType::ImplementationGuide:
			return Serialize_ImplementationGuide(arena, (ImplementationGuide*)resource);
		case ResourceType::ImplementationGuide_DependsOn:
			return Serialize_ImplementationGuide_DependsOn(arena, (ImplementationGuide_DependsOn*)resource);
		case ResourceType::ImplementationGuide_Global:
			return Serialize_ImplementationGuide_Global(arena, (ImplementationGuide_Global*)resource);
		case ResourceType::ImplementationGuide_Definition:
			return Serialize_ImplementationGuide_Definition(arena, (ImplementationGuide_Definition*)resource);
		case ResourceType::ImplementationGuide_Definition_Grouping:
			return Serialize_ImplementationGuide_Definition_Grouping(arena, (ImplementationGuide_Definition_Grouping*)resource);
		case ResourceType::ImplementationGuide_Definition_Resource:
			return Serialize_ImplementationGuide_Definition_Resource(arena, (ImplementationGuide_Definition_Resource*)resource);
		case ResourceType::ImplementationGuide_Definition_Page:
			return Serialize_ImplementationGuide_Definition_Page(arena, (ImplementationGuide_Definition_Page*)resource);
		case ResourceType::ImplementationGuide_Definition_Parameter:
			return Serialize_ImplementationGuide_Definition_Parameter(arena, (ImplementationGuide_Definition_Parameter*)resource);
		case ResourceType::ImplementationGuide_Definition_Template:
			return Serialize_ImplementationGuide_Definition_Template(arena, (ImplementationGuide_Definition_Template*)resource);
		case ResourceType::ImplementationGuide_Manifest:
			return Serialize_ImplementationGuide_Manifest(arena, (ImplementationGuide_Manifest*)resource);
		case ResourceType::ImplementationGuide_Manifest_Resource:
			return Serialize_ImplementationGuide_Manifest_Resource(arena, (ImplementationGuide_Manifest_Resource*)resource);
		case ResourceType::ImplementationGuide_Manifest_Page:
			return Serialize_ImplementationGuide_Manifest_Page(arena, (ImplementationGuide_Manifest_Page*)resource);
		case ResourceType::InsurancePlan:
			return Serialize_InsurancePlan(arena, (InsurancePlan*)resource);
		case ResourceType::InsurancePlan_Contact:
			return Serialize_InsurancePlan_Contact(arena, (InsurancePlan_Contact*)resource);
		case ResourceType::InsurancePlan_Coverage:
			return Serialize_InsurancePlan_Coverage(arena, (InsurancePlan_Coverage*)resource);
		case ResourceType::InsurancePlan_Coverage_Benefit:
			return Serialize_InsurancePlan_Coverage_Benefit(arena, (InsurancePlan_Coverage_Benefit*)resource);
		case ResourceType::InsurancePlan_Coverage_Benefit_Limit:
			return Serialize_InsurancePlan_Coverage_Benefit_Limit(arena, (InsurancePlan_Coverage_Benefit_Limit*)resource);
		case ResourceType::InsurancePlan_Plan:
			return Serialize_InsurancePlan_Plan(arena, (InsurancePlan_Plan*)resource);
		case ResourceType::InsurancePlan_Plan_GeneralCost:
			return Serialize_InsurancePlan_Plan_GeneralCost(arena, (InsurancePlan_Plan_GeneralCost*)resource);
		case ResourceType::InsurancePlan_Plan_SpecificCost:
			return Serialize_InsurancePlan_Plan_SpecificCost(arena, (InsurancePlan_Plan_SpecificCost*)resource);
		case ResourceType::InsurancePlan_Plan_SpecificCost_Benefit:
			return Serialize_InsurancePlan_Plan_SpecificCost_Benefit(arena, (InsurancePlan_Plan_SpecificCost_Benefit*)resource);
		case ResourceType::InsurancePlan_Plan_SpecificCost_Benefit_Cost:
			return Serialize_InsurancePlan_Plan_SpecificCost_Benefit_Cost(arena, (InsurancePlan_Plan_SpecificCost_Benefit_Cost*)resource);
		case ResourceType::Invoice:
			return Serialize_Invoice(arena, (Invoice*)resource);
		case ResourceType::Invoice_Participant:
			return Serialize_Invoice_Participant(arena, (Invoice_Participant*)resource);
		case ResourceType::Invoice_LineItem:
			return Serialize_Invoice_LineItem(arena, (Invoice_LineItem*)resource);
		case ResourceType::Invoice_LineItem_PriceComponent:
			return Serialize_Invoice_LineItem_PriceComponent(arena, (Invoice_LineItem_PriceComponent*)resource);
		case ResourceType::Library:
			return Serialize_Library(arena, (Library*)resource);
		case ResourceType::Linkage:
			return Serialize_Linkage(arena, (Linkage*)resource);
		case ResourceType::Linkage_Item:
			return Serialize_Linkage_Item(arena, (Linkage_Item*)resource);
		case ResourceType::List:
			return Serialize_List(arena, (List*)resource);
		case ResourceType::List_Entry:
			return Serialize_List_Entry(arena, (List_Entry*)resource);
		case ResourceType::Location:
			return Serialize_Location(arena, (Location*)resource);
		case ResourceType::Location_Position:
			return Serialize_Location_Position(arena, (Location_Position*)resource);
		case ResourceType::Location_HoursOfOperation:
			return Serialize_Location_HoursOfOperation(arena, (Location_HoursOfOperation*)resource);
		case ResourceType::Measure:
			return Serialize_Measure(arena, (Measure*)resource);
		case ResourceType::Measure_Group:
			return Serialize_Measure_Group(arena, (Measure_Group*)resource);
		case ResourceType::Measure_Group_Population:
			return Serialize_Measure_Group_Population(arena, (Measure_Group_Population*)resource);
		case ResourceType::Measure_Group_Stratifier:
			return Serialize_Measure_Group_Stratifier(arena, (Measure_Group_Stratifier*)resource);
		case ResourceType::Measure_Group_Stratifier_Component:
			return Serialize_Measure_Group_Stratifier_Component(arena, (Measure_Group_Stratifier_Component*)resource);
		case ResourceType::Measure_SupplementalData:
			return Serialize_Measure_SupplementalData(arena, (Measure_SupplementalData*)resource);
		case ResourceType::MeasureReport:
			return Serialize_MeasureReport(arena, (MeasureReport*)resource);
		case ResourceType::MeasureReport_Group:
			return Serialize_MeasureReport_Group(arena, (MeasureReport_Group*)resource);
		case ResourceType::MeasureReport_Group_Population:
			return Serialize_MeasureReport_Group_Population(arena, (MeasureReport_Group_Population*)resource);
		case ResourceType::MeasureReport_Group_Stratifier:
			return Serialize_MeasureReport_Group_Stratifier(arena, (MeasureReport_Group_Stratifier*)resource);
		case ResourceType::MeasureReport_Group_Stratifier_Stratum:
			return Serialize_MeasureReport_Group_Stratifier_Stratum(arena, (MeasureReport_Group_Stratifier_Stratum*)resource);
		case ResourceType::MeasureReport_Group_Stratifier_Stratum_Component:
			return Serialize_MeasureReport_Group_Stratifier_Stratum_Component(arena, (MeasureReport_Group_Stratifier_Stratum_Component*)resource);
		case ResourceType::MeasureReport_Group_Stratifier_Stratum_Population:
			return Serialize_MeasureReport_Group_Stratifier_Stratum_Population(arena, (MeasureReport_Group_Stratifier_Stratum_Population*)resource);
		case ResourceType::Media:
			return Serialize_Media(arena, (Media*)resource);
		case ResourceType::Medication:
			return Serialize_Medication(arena, (Medication*)resource);
		case ResourceType::Medication_Ingredient:
			return Serialize_Medication_Ingredient(arena, (Medication_Ingredient*)resource);
		case ResourceType::Medication_Batch:
			return Serialize_Medication_Batch(arena, (Medication_Batch*)resource);
		case ResourceType::MedicationAdministration:
			return Serialize_MedicationAdministration(arena, (MedicationAdministration*)resource);
		case ResourceType::MedicationAdministration_Performer:
			return Serialize_MedicationAdministration_Performer(arena, (MedicationAdministration_Performer*)resource);
		case ResourceType::MedicationAdministration_Dosage:
			return Serialize_MedicationAdministration_Dosage(arena, (MedicationAdministration_Dosage*)resource);
		case ResourceType::MedicationDispense:
			return Serialize_MedicationDispense(arena, (MedicationDispense*)resource);
		case ResourceType::MedicationDispense_Performer:
			return Serialize_MedicationDispense_Performer(arena, (MedicationDispense_Performer*)resource);
		case ResourceType::MedicationDispense_Substitution:
			return Serialize_MedicationDispense_Substitution(arena, (MedicationDispense_Substitution*)resource);
		case ResourceType::MedicationKnowledge:
			return Serialize_MedicationKnowledge(arena, (MedicationKnowledge*)resource);
		case ResourceType::MedicationKnowledge_RelatedMedicationKnowledge:
			return Serialize_MedicationKnowledge_RelatedMedicationKnowledge(arena, (MedicationKnowledge_RelatedMedicationKnowledge*)resource);
		case ResourceType::MedicationKnowledge_Monograph:
			return Serialize_MedicationKnowledge_Monograph(arena, (MedicationKnowledge_Monograph*)resource);
		case ResourceType::MedicationKnowledge_Ingredient:
			return Serialize_MedicationKnowledge_Ingredient(arena, (MedicationKnowledge_Ingredient*)resource);
		case ResourceType::MedicationKnowledge_Cost:
			return Serialize_MedicationKnowledge_Cost(arena, (MedicationKnowledge_Cost*)resource);
		case ResourceType::MedicationKnowledge_MonitoringProgram:
			return Serialize_MedicationKnowledge_MonitoringProgram(arena, (MedicationKnowledge_MonitoringProgram*)resource);
		case ResourceType::MedicationKnowledge_AdministrationGuidelines:
			return Serialize_MedicationKnowledge_AdministrationGuidelines(arena, (MedicationKnowledge_AdministrationGuidelines*)resource);
		case ResourceType::MedicationKnowledge_AdministrationGuidelines_Dosage:
			return Serialize_MedicationKnowledge_AdministrationGuidelines_Dosage(arena, (MedicationKnowledge_AdministrationGuidelines_Dosage*)resource);
		case ResourceType::MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics:
			return Serialize_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics(arena, (MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics*)resource);
		case ResourceType::MedicationKnowledge_MedicineClassification:
			return Serialize_MedicationKnowledge_MedicineClassification(arena, (MedicationKnowledge_MedicineClassification*)resource);
		case ResourceType::MedicationKnowledge_Packaging:
			return Serialize_MedicationKnowledge_Packaging(arena, (MedicationKnowledge_Packaging*)resource);
		case ResourceType::MedicationKnowledge_DrugCharacteristic:
			return Serialize_MedicationKnowledge_DrugCharacteristic(arena, (MedicationKnowledge_DrugCharacteristic*)resource);
		case ResourceType::MedicationKnowledge_Regulatory:
			return Serialize_MedicationKnowledge_Regulatory(arena, (MedicationKnowledge_Regulatory*)resource);
		case ResourceType::MedicationKnowledge_Regulatory_Substitution:
			return Serialize_MedicationKnowledge_Regulatory_Substitution(arena, (MedicationKnowledge_Regulatory_Substitution*)resource);
		case ResourceType::MedicationKnowledge_Regulatory_Schedule:
			return Serialize_MedicationKnowledge_Regulatory_Schedule(arena, (MedicationKnowledge_Regulatory_Schedule*)resource);
		case ResourceType::MedicationKnowledge_Regulatory_MaxDispense:
			return Serialize_MedicationKnowledge_Regulatory_MaxDispense(arena, (MedicationKnowledge_Regulatory_MaxDispense*)resource);
		case ResourceType::MedicationKnowledge_Kinetics:
			return Serialize_MedicationKnowledge_Kinetics(arena, (MedicationKnowledge_Kinetics*)resource);
		case ResourceType::MedicationRequest:
			return Serialize_MedicationRequest(arena, (MedicationRequest*)resource);
		case ResourceType::MedicationRequest_DispenseRequest:
			return Serialize_MedicationRequest_DispenseRequest(arena, (MedicationRequest_DispenseRequest*)resource);
		case ResourceType::MedicationRequest_DispenseRequest_InitialFill:
			return Serialize_MedicationRequest_DispenseRequest_InitialFill(arena, (MedicationRequest_DispenseRequest_InitialFill*)resource);
		case ResourceType::MedicationRequest_Substitution:
			return Serialize_MedicationRequest_Substitution(arena, (MedicationRequest_Substitution*)resource);
		case ResourceType::MedicationStatement:
			return Serialize_MedicationStatement(arena, (MedicationStatement*)resource);
		case ResourceType::MedicinalProduct:
			return Serialize_MedicinalProduct(arena, (MedicinalProduct*)resource);
		case ResourceType::MedicinalProduct_Name:
			return Serialize_MedicinalProduct_Name(arena, (MedicinalProduct_Name*)resource);
		case ResourceType::MedicinalProduct_Name_NamePart:
			return Serialize_MedicinalProduct_Name_NamePart(arena, (MedicinalProduct_Name_NamePart*)resource);
		case ResourceType::MedicinalProduct_Name_CountryLanguage:
			return Serialize_MedicinalProduct_Name_CountryLanguage(arena, (MedicinalProduct_Name_CountryLanguage*)resource);
		case ResourceType::MedicinalProduct_ManufacturingBusinessOperation:
			return Serialize_MedicinalProduct_ManufacturingBusinessOperation(arena, (MedicinalProduct_ManufacturingBusinessOperation*)resource);
		case ResourceType::MedicinalProduct_SpecialDesignation:
			return Serialize_MedicinalProduct_SpecialDesignation(arena, (MedicinalProduct_SpecialDesignation*)resource);
		case ResourceType::MedicinalProductAuthorization:
			return Serialize_MedicinalProductAuthorization(arena, (MedicinalProductAuthorization*)resource);
		case ResourceType::MedicinalProductAuthorization_JurisdictionalAuthorization:
			return Serialize_MedicinalProductAuthorization_JurisdictionalAuthorization(arena, (MedicinalProductAuthorization_JurisdictionalAuthorization*)resource);
		case ResourceType::MedicinalProductAuthorization_Procedure:
			return Serialize_MedicinalProductAuthorization_Procedure(arena, (MedicinalProductAuthorization_Procedure*)resource);
		case ResourceType::MedicinalProductContraindication:
			return Serialize_MedicinalProductContraindication(arena, (MedicinalProductContraindication*)resource);
		case ResourceType::MedicinalProductContraindication_OtherTherapy:
			return Serialize_MedicinalProductContraindication_OtherTherapy(arena, (MedicinalProductContraindication_OtherTherapy*)resource);
		case ResourceType::MedicinalProductIndication:
			return Serialize_MedicinalProductIndication(arena, (MedicinalProductIndication*)resource);
		case ResourceType::MedicinalProductIndication_OtherTherapy:
			return Serialize_MedicinalProductIndication_OtherTherapy(arena, (MedicinalProductIndication_OtherTherapy*)resource);
		case ResourceType::MedicinalProductIngredient:
			return Serialize_MedicinalProductIngredient(arena, (MedicinalProductIngredient*)resource);
		case ResourceType::MedicinalProductIngredient_SpecifiedSubstance:
			return Serialize_MedicinalProductIngredient_SpecifiedSubstance(arena, (MedicinalProductIngredient_SpecifiedSubstance*)resource);
		case ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength:
			return Serialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(arena, (MedicinalProductIngredient_SpecifiedSubstance_Strength*)resource);
		case ResourceType::MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength:
			return Serialize_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength(arena, (MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength*)resource);
		case ResourceType::MedicinalProductIngredient_Substance:
			return Serialize_MedicinalProductIngredient_Substance(arena, (MedicinalProductIngredient_Substance*)resource);
		case ResourceType::MedicinalProductInteraction:
			return Serialize_MedicinalProductInteraction(arena, (MedicinalProductInteraction*)resource);
		case ResourceType::MedicinalProductInteraction_Interactant:
			return Serialize_MedicinalProductInteraction_Interactant(arena, (MedicinalProductInteraction_Interactant*)resource);
		case ResourceType::MedicinalProductManufactured:
			return Serialize_MedicinalProductManufactured(arena, (MedicinalProductManufactured*)resource);
		case ResourceType::MedicinalProductPackaged:
			return Serialize_MedicinalProductPackaged(arena, (MedicinalProductPackaged*)resource);
		case ResourceType::MedicinalProductPackaged_BatchIdentifier:
			return Serialize_MedicinalProductPackaged_BatchIdentifier(arena, (MedicinalProductPackaged_BatchIdentifier*)resource);
		case ResourceType::MedicinalProductPackaged_PackageItem:
			return Serialize_MedicinalProductPackaged_PackageItem(arena, (MedicinalProductPackaged_PackageItem*)resource);
		case ResourceType::MedicinalProductPharmaceutical:
			return Serialize_MedicinalProductPharmaceutical(arena, (MedicinalProductPharmaceutical*)resource);
		case ResourceType::MedicinalProductPharmaceutical_Characteristics:
			return Serialize_MedicinalProductPharmaceutical_Characteristics(arena, (MedicinalProductPharmaceutical_Characteristics*)resource);
		case ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration:
			return Serialize_MedicinalProductPharmaceutical_RouteOfAdministration(arena, (MedicinalProductPharmaceutical_RouteOfAdministration*)resource);
		case ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies:
			return Serialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies(arena, (MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies*)resource);
		case ResourceType::MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod:
			return Serialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod(arena, (MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod*)resource);
		case ResourceType::MedicinalProductUndesirableEffect:
			return Serialize_MedicinalProductUndesirableEffect(arena, (MedicinalProductUndesirableEffect*)resource);
		case ResourceType::MessageDefinition:
			return Serialize_MessageDefinition(arena, (MessageDefinition*)resource);
		case ResourceType::MessageDefinition_Focus:
			return Serialize_MessageDefinition_Focus(arena, (MessageDefinition_Focus*)resource);
		case ResourceType::MessageDefinition_AllowedResponse:
			return Serialize_MessageDefinition_AllowedResponse(arena, (MessageDefinition_AllowedResponse*)resource);
		case ResourceType::MessageHeader:
			return Serialize_MessageHeader(arena, (MessageHeader*)resource);
		case ResourceType::MessageHeader_Destination:
			return Serialize_MessageHeader_Destination(arena, (MessageHeader_Destination*)resource);
		case ResourceType::MessageHeader_Source:
			return Serialize_MessageHeader_Source(arena, (MessageHeader_Source*)resource);
		case ResourceType::MessageHeader_Response:
			return Serialize_MessageHeader_Response(arena, (MessageHeader_Response*)resource);
		case ResourceType::MolecularSequence:
			return Serialize_MolecularSequence(arena, (MolecularSequence*)resource);
		case ResourceType::MolecularSequence_ReferenceSeq:
			return Serialize_MolecularSequence_ReferenceSeq(arena, (MolecularSequence_ReferenceSeq*)resource);
		case ResourceType::MolecularSequence_Variant:
			return Serialize_MolecularSequence_Variant(arena, (MolecularSequence_Variant*)resource);
		case ResourceType::MolecularSequence_Quality:
			return Serialize_MolecularSequence_Quality(arena, (MolecularSequence_Quality*)resource);
		case ResourceType::MolecularSequence_Quality_Roc:
			return Serialize_MolecularSequence_Quality_Roc(arena, (MolecularSequence_Quality_Roc*)resource);
		case ResourceType::MolecularSequence_Repository:
			return Serialize_MolecularSequence_Repository(arena, (MolecularSequence_Repository*)resource);
		case ResourceType::MolecularSequence_StructureVariant:
			return Serialize_MolecularSequence_StructureVariant(arena, (MolecularSequence_StructureVariant*)resource);
		case ResourceType::MolecularSequence_StructureVariant_Outer:
			return Serialize_MolecularSequence_StructureVariant_Outer(arena, (MolecularSequence_StructureVariant_Outer*)resource);
		case ResourceType::MolecularSequence_StructureVariant_Inner:
			return Serialize_MolecularSequence_StructureVariant_Inner(arena, (MolecularSequence_StructureVariant_Inner*)resource);
		case ResourceType::NamingSystem:
			return Serialize_NamingSystem(arena, (NamingSystem*)resource);
		case ResourceType::NamingSystem_UniqueId:
			return Serialize_NamingSystem_UniqueId(arena, (NamingSystem_UniqueId*)resource);
		case ResourceType::NutritionOrder:
			return Serialize_NutritionOrder(arena, (NutritionOrder*)resource);
		case ResourceType::NutritionOrder_OralDiet:
			return Serialize_NutritionOrder_OralDiet(arena, (NutritionOrder_OralDiet*)resource);
		case ResourceType::NutritionOrder_OralDiet_Nutrient:
			return Serialize_NutritionOrder_OralDiet_Nutrient(arena, (NutritionOrder_OralDiet_Nutrient*)resource);
		case ResourceType::NutritionOrder_OralDiet_Texture:
			return Serialize_NutritionOrder_OralDiet_Texture(arena, (NutritionOrder_OralDiet_Texture*)resource);
		case ResourceType::NutritionOrder_Supplement:
			return Serialize_NutritionOrder_Supplement(arena, (NutritionOrder_Supplement*)resource);
		case ResourceType::NutritionOrder_EnteralFormula:
			return Serialize_NutritionOrder_EnteralFormula(arena, (NutritionOrder_EnteralFormula*)resource);
		case ResourceType::NutritionOrder_EnteralFormula_Administration:
			return Serialize_NutritionOrder_EnteralFormula_Administration(arena, (NutritionOrder_EnteralFormula_Administration*)resource);
		case ResourceType::Observation:
			return Serialize_Observation(arena, (Observation*)resource);
		case ResourceType::Observation_ReferenceRange:
			return Serialize_Observation_ReferenceRange(arena, (Observation_ReferenceRange*)resource);
		case ResourceType::Observation_Component:
			return Serialize_Observation_Component(arena, (Observation_Component*)resource);
		case ResourceType::ObservationDefinition:
			return Serialize_ObservationDefinition(arena, (ObservationDefinition*)resource);
		case ResourceType::ObservationDefinition_QuantitativeDetails:
			return Serialize_ObservationDefinition_QuantitativeDetails(arena, (ObservationDefinition_QuantitativeDetails*)resource);
		case ResourceType::ObservationDefinition_QualifiedInterval:
			return Serialize_ObservationDefinition_QualifiedInterval(arena, (ObservationDefinition_QualifiedInterval*)resource);
		case ResourceType::OperationDefinition:
			return Serialize_OperationDefinition(arena, (OperationDefinition*)resource);
		case ResourceType::OperationDefinition_Parameter:
			return Serialize_OperationDefinition_Parameter(arena, (OperationDefinition_Parameter*)resource);
		case ResourceType::OperationDefinition_Parameter_Binding:
			return Serialize_OperationDefinition_Parameter_Binding(arena, (OperationDefinition_Parameter_Binding*)resource);
		case ResourceType::OperationDefinition_Parameter_ReferencedFrom:
			return Serialize_OperationDefinition_Parameter_ReferencedFrom(arena, (OperationDefinition_Parameter_ReferencedFrom*)resource);
		case ResourceType::OperationDefinition_Overload:
			return Serialize_OperationDefinition_Overload(arena, (OperationDefinition_Overload*)resource);
		case ResourceType::OperationOutcome:
			return Serialize_OperationOutcome(arena, (OperationOutcome*)resource);
		case ResourceType::OperationOutcome_Issue:
			return Serialize_OperationOutcome_Issue(arena, (OperationOutcome_Issue*)resource);
		case ResourceType::Organization:
			return Serialize_Organization(arena, (Organization*)resource);
		case ResourceType::Organization_Contact:
			return Serialize_Organization_Contact(arena, (Organization_Contact*)resource);
		case ResourceType::OrganizationAffiliation:
			return Serialize_OrganizationAffiliation(arena, (OrganizationAffiliation*)resource);
		case ResourceType::Parameters:
			return Serialize_Parameters(arena, (Parameters*)resource);
		case ResourceType::Parameters_Parameter:
			return Serialize_Parameters_Parameter(arena, (Parameters_Parameter*)resource);
		case ResourceType::Patient:
			return Serialize_Patient(arena, (Patient*)resource);
		case ResourceType::Patient_Contact:
			return Serialize_Patient_Contact(arena, (Patient_Contact*)resource);
		case ResourceType::Patient_Communication:
			return Serialize_Patient_Communication(arena, (Patient_Communication*)resource);
		case ResourceType::Patient_Link:
			return Serialize_Patient_Link(arena, (Patient_Link*)resource);
		case ResourceType::PaymentNotice:
			return Serialize_PaymentNotice(arena, (PaymentNotice*)resource);
		case ResourceType::PaymentReconciliation:
			return Serialize_PaymentReconciliation(arena, (PaymentReconciliation*)resource);
		case ResourceType::PaymentReconciliation_Detail:
			return Serialize_PaymentReconciliation_Detail(arena, (PaymentReconciliation_Detail*)resource);
		case ResourceType::PaymentReconciliation_ProcessNote:
			return Serialize_PaymentReconciliation_ProcessNote(arena, (PaymentReconciliation_ProcessNote*)resource);
		case ResourceType::Person:
			return Serialize_Person(arena, (Person*)resource);
		case ResourceType::Person_Link:
			return Serialize_Person_Link(arena, (Person_Link*)resource);
		case ResourceType::PlanDefinition:
			return Serialize_PlanDefinition(arena, (PlanDefinition*)resource);
		case ResourceType::PlanDefinition_Goal:
			return Serialize_PlanDefinition_Goal(arena, (PlanDefinition_Goal*)resource);
		case ResourceType::PlanDefinition_Goal_Target:
			return Serialize_PlanDefinition_Goal_Target(arena, (PlanDefinition_Goal_Target*)resource);
		case ResourceType::PlanDefinition_Action:
			return Serialize_PlanDefinition_Action(arena, (PlanDefinition_Action*)resource);
		case ResourceType::PlanDefinition_Action_Condition:
			return Serialize_PlanDefinition_Action_Condition(arena, (PlanDefinition_Action_Condition*)resource);
		case ResourceType::PlanDefinition_Action_RelatedAction:
			return Serialize_PlanDefinition_Action_RelatedAction(arena, (PlanDefinition_Action_RelatedAction*)resource);
		case ResourceType::PlanDefinition_Action_Participant:
			return Serialize_PlanDefinition_Action_Participant(arena, (PlanDefinition_Action_Participant*)resource);
		case ResourceType::PlanDefinition_Action_DynamicValue:
			return Serialize_PlanDefinition_Action_DynamicValue(arena, (PlanDefinition_Action_DynamicValue*)resource);
		case ResourceType::Practitioner:
			return Serialize_Practitioner(arena, (Practitioner*)resource);
		case ResourceType::Practitioner_Qualification:
			return Serialize_Practitioner_Qualification(arena, (Practitioner_Qualification*)resource);
		case ResourceType::PractitionerRole:
			return Serialize_PractitionerRole(arena, (PractitionerRole*)resource);
		case ResourceType::PractitionerRole_AvailableTime:
			return Serialize_PractitionerRole_AvailableTime(arena, (PractitionerRole_AvailableTime*)resource);
		case ResourceType::PractitionerRole_NotAvailable:
			return Serialize_PractitionerRole_NotAvailable(arena, (PractitionerRole_NotAvailable*)resource);
		case ResourceType::Procedure:
			return Serialize_Procedure(arena, (Procedure*)resource);
		case ResourceType::Procedure_Performer:
			return Serialize_Procedure_Performer(arena, (Procedure_Performer*)resource);
		case ResourceType::Procedure_FocalDevice:
			return Serialize_Procedure_FocalDevice(arena, (Procedure_FocalDevice*)resource);
		case ResourceType::Provenance:
			return Serialize_Provenance(arena, (Provenance*)resource);
		case ResourceType::Provenance_Agent:
			return Serialize_Provenance_Agent(arena, (Provenance_Agent*)resource);
		case ResourceType::Provenance_Entity:
			return Serialize_Provenance_Entity(arena, (Provenance_Entity*)resource);
		case ResourceType::Questionnaire:
			return Serialize_Questionnaire(arena, (Questionnaire*)resource);
		case ResourceType::Questionnaire_Item:
			return Serialize_Questionnaire_Item(arena, (Questionnaire_Item*)resource);
		case ResourceType::Questionnaire_Item_EnableWhen:
			return Serialize_Questionnaire_Item_EnableWhen(arena, (Questionnaire_Item_EnableWhen*)resource);
		case ResourceType::Questionnaire_Item_AnswerOption:
			return Serialize_Questionnaire_Item_AnswerOption(arena, (Questionnaire_Item_AnswerOption*)resource);
		case ResourceType::Questionnaire_Item_Initial:
			return Serialize_Questionnaire_Item_Initial(arena, (Questionnaire_Item_Initial*)resource);
		case ResourceType::QuestionnaireResponse:
			return Serialize_QuestionnaireResponse(arena, (QuestionnaireResponse*)resource);
		case ResourceType::QuestionnaireResponse_Item:
			return Serialize_QuestionnaireResponse_Item(arena, (QuestionnaireResponse_Item*)resource);
		case ResourceType::QuestionnaireResponse_Item_Answer:
			return Serialize_QuestionnaireResponse_Item_Answer(arena, (QuestionnaireResponse_Item_Answer*)resource);
		case ResourceType::RelatedPerson:
			return Serialize_RelatedPerson(arena, (RelatedPerson*)resource);
		case ResourceType::RelatedPerson_Communication:
			return Serialize_RelatedPerson_Communication(arena, (RelatedPerson_Communication*)resource);
		case ResourceType::RequestGroup:
			return Serialize_RequestGroup(arena, (RequestGroup*)resource);
		case ResourceType::RequestGroup_Action:
			return Serialize_RequestGroup_Action(arena, (RequestGroup_Action*)resource);
		case ResourceType::RequestGroup_Action_Condition:
			return Serialize_RequestGroup_Action_Condition(arena, (RequestGroup_Action_Condition*)resource);
		case ResourceType::RequestGroup_Action_RelatedAction:
			return Serialize_RequestGroup_Action_RelatedAction(arena, (RequestGroup_Action_RelatedAction*)resource);
		case ResourceType::ResearchDefinition:
			return Serialize_ResearchDefinition(arena, (ResearchDefinition*)resource);
		case ResourceType::ResearchElementDefinition:
			return Serialize_ResearchElementDefinition(arena, (ResearchElementDefinition*)resource);
		case ResourceType::ResearchElementDefinition_Characteristic:
			return Serialize_ResearchElementDefinition_Characteristic(arena, (ResearchElementDefinition_Characteristic*)resource);
		case ResourceType::ResearchStudy:
			return Serialize_ResearchStudy(arena, (ResearchStudy*)resource);
		case ResourceType::ResearchStudy_Arm:
			return Serialize_ResearchStudy_Arm(arena, (ResearchStudy_Arm*)resource);
		case ResourceType::ResearchStudy_Objective:
			return Serialize_ResearchStudy_Objective(arena, (ResearchStudy_Objective*)resource);
		case ResourceType::ResearchSubject:
			return Serialize_ResearchSubject(arena, (ResearchSubject*)resource);
		case ResourceType::RiskAssessment:
			return Serialize_RiskAssessment(arena, (RiskAssessment*)resource);
		case ResourceType::RiskAssessment_Prediction:
			return Serialize_RiskAssessment_Prediction(arena, (RiskAssessment_Prediction*)resource);
		case ResourceType::RiskEvidenceSynthesis:
			return Serialize_RiskEvidenceSynthesis(arena, (RiskEvidenceSynthesis*)resource);
		case ResourceType::RiskEvidenceSynthesis_SampleSize:
			return Serialize_RiskEvidenceSynthesis_SampleSize(arena, (RiskEvidenceSynthesis_SampleSize*)resource);
		case ResourceType::RiskEvidenceSynthesis_RiskEstimate:
			return Serialize_RiskEvidenceSynthesis_RiskEstimate(arena, (RiskEvidenceSynthesis_RiskEstimate*)resource);
		case ResourceType::RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate:
			return Serialize_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate(arena, (RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate*)resource);
		case ResourceType::RiskEvidenceSynthesis_Certainty:
			return Serialize_RiskEvidenceSynthesis_Certainty(arena, (RiskEvidenceSynthesis_Certainty*)resource);
		case ResourceType::RiskEvidenceSynthesis_Certainty_CertaintySubcomponent:
			return Serialize_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, (RiskEvidenceSynthesis_Certainty_CertaintySubcomponent*)resource);
		case ResourceType::Schedule:
			return Serialize_Schedule(arena, (Schedule*)resource);
		case ResourceType::SearchParameter:
			return Serialize_SearchParameter(arena, (SearchParameter*)resource);
		case ResourceType::SearchParameter_Component:
			return Serialize_SearchParameter_Component(arena, (SearchParameter_Component*)resource);
		case ResourceType::ServiceRequest:
			return Serialize_ServiceRequest(arena, (ServiceRequest*)resource);
		case ResourceType::Slot:
			return Serialize_Slot(arena, (Slot*)resource);
		case ResourceType::Specimen:
			return Serialize_Specimen(arena, (Specimen*)resource);
		case ResourceType::Specimen_Collection:
			return Serialize_Specimen_Collection(arena, (Specimen_Collection*)resource);
		case ResourceType::Specimen_Processing:
			return Serialize_Specimen_Processing(arena, (Specimen_Processing*)resource);
		case ResourceType::Specimen_Container:
			return Serialize_Specimen_Container(arena, (Specimen_Container*)resource);
		case ResourceType::SpecimenDefinition:
			return Serialize_SpecimenDefinition(arena, (SpecimenDefinition*)resource);
		case ResourceType::SpecimenDefinition_TypeTested:
			return Serialize_SpecimenDefinition_TypeTested(arena, (SpecimenDefinition_TypeTested*)resource);
		case ResourceType::SpecimenDefinition_TypeTested_Container:
			return Serialize_SpecimenDefinition_TypeTested_Container(arena, (SpecimenDefinition_TypeTested_Container*)resource);
		case ResourceType::SpecimenDefinition_TypeTested_Container_Additive:
			return Serialize_SpecimenDefinition_TypeTested_Container_Additive(arena, (SpecimenDefinition_TypeTested_Container_Additive*)resource);
		case ResourceType::SpecimenDefinition_TypeTested_Handling:
			return Serialize_SpecimenDefinition_TypeTested_Handling(arena, (SpecimenDefinition_TypeTested_Handling*)resource);
		case ResourceType::StructureDefinition:
			return Serialize_StructureDefinition(arena, (StructureDefinition*)resource);
		case ResourceType::StructureDefinition_Mapping:
			return Serialize_StructureDefinition_Mapping(arena, (StructureDefinition_Mapping*)resource);
		case ResourceType::StructureDefinition_Context:
			return Serialize_StructureDefinition_Context(arena, (StructureDefinition_Context*)resource);
		case ResourceType::StructureDefinition_Snapshot:
			return Serialize_StructureDefinition_Snapshot(arena, (StructureDefinition_Snapshot*)resource);
		case ResourceType::StructureDefinition_Differential:
			return Serialize_StructureDefinition_Differential(arena, (StructureDefinition_Differential*)resource);
		case ResourceType::StructureMap:
			return Serialize_StructureMap(arena, (StructureMap*)resource);
		case ResourceType::StructureMap_Structure:
			return Serialize_StructureMap_Structure(arena, (StructureMap_Structure*)resource);
		case ResourceType::StructureMap_Group:
			return Serialize_StructureMap_Group(arena, (StructureMap_Group*)resource);
		case ResourceType::StructureMap_Group_Input:
			return Serialize_StructureMap_Group_Input(arena, (StructureMap_Group_Input*)resource);
		case ResourceType::StructureMap_Group_Rule:
			return Serialize_StructureMap_Group_Rule(arena, (StructureMap_Group_Rule*)resource);
		case ResourceType::StructureMap_Group_Rule_Source:
			return Serialize_StructureMap_Group_Rule_Source(arena, (StructureMap_Group_Rule_Source*)resource);
		case ResourceType::StructureMap_Group_Rule_Target:
			return Serialize_StructureMap_Group_Rule_Target(arena, (StructureMap_Group_Rule_Target*)resource);
		case ResourceType::StructureMap_Group_Rule_Target_Parameter:
			return Serialize_StructureMap_Group_Rule_Target_Parameter(arena, (StructureMap_Group_Rule_Target_Parameter*)resource);
		case ResourceType::StructureMap_Group_Rule_Dependent:
			return Serialize_StructureMap_Group_Rule_Dependent(arena, (StructureMap_Group_Rule_Dependent*)resource);
		case ResourceType::Subscription:
			return Serialize_Subscription(arena, (Subscription*)resource);
		case ResourceType::Subscription_Channel:
			return Serialize_Subscription_Channel(arena, (Subscription_Channel*)resource);
		case ResourceType::Substance:
			return Serialize_Substance(arena, (Substance*)resource);
		case ResourceType::Substance_Instance:
			return Serialize_Substance_Instance(arena, (Substance_Instance*)resource);
		case ResourceType::Substance_Ingredient:
			return Serialize_Substance_Ingredient(arena, (Substance_Ingredient*)resource);
		case ResourceType::SubstanceNucleicAcid:
			return Serialize_SubstanceNucleicAcid(arena, (SubstanceNucleicAcid*)resource);
		case ResourceType::SubstanceNucleicAcid_Subunit:
			return Serialize_SubstanceNucleicAcid_Subunit(arena, (SubstanceNucleicAcid_Subunit*)resource);
		case ResourceType::SubstanceNucleicAcid_Subunit_Linkage:
			return Serialize_SubstanceNucleicAcid_Subunit_Linkage(arena, (SubstanceNucleicAcid_Subunit_Linkage*)resource);
		case ResourceType::SubstanceNucleicAcid_Subunit_Sugar:
			return Serialize_SubstanceNucleicAcid_Subunit_Sugar(arena, (SubstanceNucleicAcid_Subunit_Sugar*)resource);
		case ResourceType::SubstancePolymer:
			return Serialize_SubstancePolymer(arena, (SubstancePolymer*)resource);
		case ResourceType::SubstancePolymer_MonomerSet:
			return Serialize_SubstancePolymer_MonomerSet(arena, (SubstancePolymer_MonomerSet*)resource);
		case ResourceType::SubstancePolymer_MonomerSet_StartingMaterial:
			return Serialize_SubstancePolymer_MonomerSet_StartingMaterial(arena, (SubstancePolymer_MonomerSet_StartingMaterial*)resource);
		case ResourceType::SubstancePolymer_Repeat:
			return Serialize_SubstancePolymer_Repeat(arena, (SubstancePolymer_Repeat*)resource);
		case ResourceType::SubstancePolymer_Repeat_RepeatUnit:
			return Serialize_SubstancePolymer_Repeat_RepeatUnit(arena, (SubstancePolymer_Repeat_RepeatUnit*)resource);
		case ResourceType::SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation:
			return Serialize_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation(arena, (SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation*)resource);
		case ResourceType::SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation:
			return Serialize_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation(arena, (SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation*)resource);
		case ResourceType::SubstanceProtein:
			return Serialize_SubstanceProtein(arena, (SubstanceProtein*)resource);
		case ResourceType::SubstanceProtein_Subunit:
			return Serialize_SubstanceProtein_Subunit(arena, (SubstanceProtein_Subunit*)resource);
		case ResourceType::SubstanceReferenceInformation:
			return Serialize_SubstanceReferenceInformation(arena, (SubstanceReferenceInformation*)resource);
		case ResourceType::SubstanceReferenceInformation_Gene:
			return Serialize_SubstanceReferenceInformation_Gene(arena, (SubstanceReferenceInformation_Gene*)resource);
		case ResourceType::SubstanceReferenceInformation_GeneElement:
			return Serialize_SubstanceReferenceInformation_GeneElement(arena, (SubstanceReferenceInformation_GeneElement*)resource);
		case ResourceType::SubstanceReferenceInformation_Classification:
			return Serialize_SubstanceReferenceInformation_Classification(arena, (SubstanceReferenceInformation_Classification*)resource);
		case ResourceType::SubstanceReferenceInformation_Target:
			return Serialize_SubstanceReferenceInformation_Target(arena, (SubstanceReferenceInformation_Target*)resource);
		case ResourceType::SubstanceSourceMaterial:
			return Serialize_SubstanceSourceMaterial(arena, (SubstanceSourceMaterial*)resource);
		case ResourceType::SubstanceSourceMaterial_FractionDescription:
			return Serialize_SubstanceSourceMaterial_FractionDescription(arena, (SubstanceSourceMaterial_FractionDescription*)resource);
		case ResourceType::SubstanceSourceMaterial_Organism:
			return Serialize_SubstanceSourceMaterial_Organism(arena, (SubstanceSourceMaterial_Organism*)resource);
		case ResourceType::SubstanceSourceMaterial_Organism_Author:
			return Serialize_SubstanceSourceMaterial_Organism_Author(arena, (SubstanceSourceMaterial_Organism_Author*)resource);
		case ResourceType::SubstanceSourceMaterial_Organism_Hybrid:
			return Serialize_SubstanceSourceMaterial_Organism_Hybrid(arena, (SubstanceSourceMaterial_Organism_Hybrid*)resource);
		case ResourceType::SubstanceSourceMaterial_Organism_OrganismGeneral:
			return Serialize_SubstanceSourceMaterial_Organism_OrganismGeneral(arena, (SubstanceSourceMaterial_Organism_OrganismGeneral*)resource);
		case ResourceType::SubstanceSourceMaterial_PartDescription:
			return Serialize_SubstanceSourceMaterial_PartDescription(arena, (SubstanceSourceMaterial_PartDescription*)resource);
		case ResourceType::SubstanceSpecification:
			return Serialize_SubstanceSpecification(arena, (SubstanceSpecification*)resource);
		case ResourceType::SubstanceSpecification_Moiety:
			return Serialize_SubstanceSpecification_Moiety(arena, (SubstanceSpecification_Moiety*)resource);
		case ResourceType::SubstanceSpecification_Property:
			return Serialize_SubstanceSpecification_Property(arena, (SubstanceSpecification_Property*)resource);
		case ResourceType::SubstanceSpecification_Structure:
			return Serialize_SubstanceSpecification_Structure(arena, (SubstanceSpecification_Structure*)resource);
		case ResourceType::SubstanceSpecification_Structure_Isotope:
			return Serialize_SubstanceSpecification_Structure_Isotope(arena, (SubstanceSpecification_Structure_Isotope*)resource);
		case ResourceType::SubstanceSpecification_Structure_Isotope_MolecularWeight:
			return Serialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, (SubstanceSpecification_Structure_Isotope_MolecularWeight*)resource);
		case ResourceType::SubstanceSpecification_Structure_Representation:
			return Serialize_SubstanceSpecification_Structure_Representation(arena, (SubstanceSpecification_Structure_Representation*)resource);
		case ResourceType::SubstanceSpecification_Code:
			return Serialize_SubstanceSpecification_Code(arena, (SubstanceSpecification_Code*)resource);
		case ResourceType::SubstanceSpecification_Name:
			return Serialize_SubstanceSpecification_Name(arena, (SubstanceSpecification_Name*)resource);
		case ResourceType::SubstanceSpecification_Name_Official:
			return Serialize_SubstanceSpecification_Name_Official(arena, (SubstanceSpecification_Name_Official*)resource);
		case ResourceType::SubstanceSpecification_Relationship:
			return Serialize_SubstanceSpecification_Relationship(arena, (SubstanceSpecification_Relationship*)resource);
		case ResourceType::SupplyDelivery:
			return Serialize_SupplyDelivery(arena, (SupplyDelivery*)resource);
		case ResourceType::SupplyDelivery_SuppliedItem:
			return Serialize_SupplyDelivery_SuppliedItem(arena, (SupplyDelivery_SuppliedItem*)resource);
		case ResourceType::SupplyRequest:
			return Serialize_SupplyRequest(arena, (SupplyRequest*)resource);
		case ResourceType::SupplyRequest_Parameter:
			return Serialize_SupplyRequest_Parameter(arena, (SupplyRequest_Parameter*)resource);
		case ResourceType::Task:
			return Serialize_Task(arena, (Task*)resource);
		case ResourceType::Task_Restriction:
			return Serialize_Task_Restriction(arena, (Task_Restriction*)resource);
		case ResourceType::Task_Input:
			return Serialize_Task_Input(arena, (Task_Input*)resource);
		case ResourceType::Task_Output:
			return Serialize_Task_Output(arena, (Task_Output*)resource);
		case ResourceType::TerminologyCapabilities:
			return Serialize_TerminologyCapabilities(arena, (TerminologyCapabilities*)resource);
		case ResourceType::TerminologyCapabilities_Software:
			return Serialize_TerminologyCapabilities_Software(arena, (TerminologyCapabilities_Software*)resource);
		case ResourceType::TerminologyCapabilities_Implementation:
			return Serialize_TerminologyCapabilities_Implementation(arena, (TerminologyCapabilities_Implementation*)resource);
		case ResourceType::TerminologyCapabilities_CodeSystem:
			return Serialize_TerminologyCapabilities_CodeSystem(arena, (TerminologyCapabilities_CodeSystem*)resource);
		case ResourceType::TerminologyCapabilities_CodeSystem_Version:
			return Serialize_TerminologyCapabilities_CodeSystem_Version(arena, (TerminologyCapabilities_CodeSystem_Version*)resource);
		case ResourceType::TerminologyCapabilities_CodeSystem_Version_Filter:
			return Serialize_TerminologyCapabilities_CodeSystem_Version_Filter(arena, (TerminologyCapabilities_CodeSystem_Version_Filter*)resource);
		case ResourceType::TerminologyCapabilities_Expansion:
			return Serialize_TerminologyCapabilities_Expansion(arena, (TerminologyCapabilities_Expansion*)resource);
		case ResourceType::TerminologyCapabilities_Expansion_Parameter:
			return Serialize_TerminologyCapabilities_Expansion_Parameter(arena, (TerminologyCapabilities_Expansion_Parameter*)resource);
		case ResourceType::TerminologyCapabilities_ValidateCode:
			return Serialize_TerminologyCapabilities_ValidateCode(arena, (TerminologyCapabilities_ValidateCode*)resource);
		case ResourceType::TerminologyCapabilities_Translation:
			return Serialize_TerminologyCapabilities_Translation(arena, (TerminologyCapabilities_Translation*)resource);
		case ResourceType::TerminologyCapabilities_Closure:
			return Serialize_TerminologyCapabilities_Closure(arena, (TerminologyCapabilities_Closure*)resource);
		case ResourceType::TestReport:
			return Serialize_TestReport(arena, (TestReport*)resource);
		case ResourceType::TestReport_Participant:
			return Serialize_TestReport_Participant(arena, (TestReport_Participant*)resource);
		case ResourceType::TestReport_Setup:
			return Serialize_TestReport_Setup(arena, (TestReport_Setup*)resource);
		case ResourceType::TestReport_Setup_Action:
			return Serialize_TestReport_Setup_Action(arena, (TestReport_Setup_Action*)resource);
		case ResourceType::TestReport_Setup_Action_Operation:
			return Serialize_TestReport_Setup_Action_Operation(arena, (TestReport_Setup_Action_Operation*)resource);
		case ResourceType::TestReport_Setup_Action_Assert:
			return Serialize_TestReport_Setup_Action_Assert(arena, (TestReport_Setup_Action_Assert*)resource);
		case ResourceType::TestReport_Test:
			return Serialize_TestReport_Test(arena, (TestReport_Test*)resource);
		case ResourceType::TestReport_Test_Action:
			return Serialize_TestReport_Test_Action(arena, (TestReport_Test_Action*)resource);
		case ResourceType::TestReport_Teardown:
			return Serialize_TestReport_Teardown(arena, (TestReport_Teardown*)resource);
		case ResourceType::TestReport_Teardown_Action:
			return Serialize_TestReport_Teardown_Action(arena, (TestReport_Teardown_Action*)resource);
		case ResourceType::TestScript:
			return Serialize_TestScript(arena, (TestScript*)resource);
		case ResourceType::TestScript_Origin:
			return Serialize_TestScript_Origin(arena, (TestScript_Origin*)resource);
		case ResourceType::TestScript_Destination:
			return Serialize_TestScript_Destination(arena, (TestScript_Destination*)resource);
		case ResourceType::TestScript_Metadata:
			return Serialize_TestScript_Metadata(arena, (TestScript_Metadata*)resource);
		case ResourceType::TestScript_Metadata_Link:
			return Serialize_TestScript_Metadata_Link(arena, (TestScript_Metadata_Link*)resource);
		case ResourceType::TestScript_Metadata_Capability:
			return Serialize_TestScript_Metadata_Capability(arena, (TestScript_Metadata_Capability*)resource);
		case ResourceType::TestScript_Fixture:
			return Serialize_TestScript_Fixture(arena, (TestScript_Fixture*)resource);
		case ResourceType::TestScript_Variable:
			return Serialize_TestScript_Variable(arena, (TestScript_Variable*)resource);
		case ResourceType::TestScript_Setup:
			return Serialize_TestScript_Setup(arena, (TestScript_Setup*)resource);
		case ResourceType::TestScript_Setup_Action:
			return Serialize_TestScript_Setup_Action(arena, (TestScript_Setup_Action*)resource);
		case ResourceType::TestScript_Setup_Action_Operation:
			return Serialize_TestScript_Setup_Action_Operation(arena, (TestScript_Setup_Action_Operation*)resource);
		case ResourceType::TestScript_Setup_Action_Operation_RequestHeader:
			return Serialize_TestScript_Setup_Action_Operation_RequestHeader(arena, (TestScript_Setup_Action_Operation_RequestHeader*)resource);
		case ResourceType::TestScript_Setup_Action_Assert:
			return Serialize_TestScript_Setup_Action_Assert(arena, (TestScript_Setup_Action_Assert*)resource);
		case ResourceType::TestScript_Test:
			return Serialize_TestScript_Test(arena, (TestScript_Test*)resource);
		case ResourceType::TestScript_Test_Action:
			return Serialize_TestScript_Test_Action(arena, (TestScript_Test_Action*)resource);
		case ResourceType::TestScript_Teardown:
			return Serialize_TestScript_Teardown(arena, (TestScript_Teardown*)resource);
		case ResourceType::TestScript_Teardown_Action:
			return Serialize_TestScript_Teardown_Action(arena, (TestScript_Teardown_Action*)resource);
		case ResourceType::ValueSet:
			return Serialize_ValueSet(arena, (ValueSet*)resource);
		case ResourceType::ValueSet_Compose:
			return Serialize_ValueSet_Compose(arena, (ValueSet_Compose*)resource);
		case ResourceType::ValueSet_Compose_Include:
			return Serialize_ValueSet_Compose_Include(arena, (ValueSet_Compose_Include*)resource);
		case ResourceType::ValueSet_Compose_Include_Concept:
			return Serialize_ValueSet_Compose_Include_Concept(arena, (ValueSet_Compose_Include_Concept*)resource);
		case ResourceType::ValueSet_Compose_Include_Concept_Designation:
			return Serialize_ValueSet_Compose_Include_Concept_Designation(arena, (ValueSet_Compose_Include_Concept_Designation*)resource);
		case ResourceType::ValueSet_Compose_Include_Filter:
			return Serialize_ValueSet_Compose_Include_Filter(arena, (ValueSet_Compose_Include_Filter*)resource);
		case ResourceType::ValueSet_Expansion:
			return Serialize_ValueSet_Expansion(arena, (ValueSet_Expansion*)resource);
		case ResourceType::ValueSet_Expansion_Parameter:
			return Serialize_ValueSet_Expansion_Parameter(arena, (ValueSet_Expansion_Parameter*)resource);
		case ResourceType::ValueSet_Expansion_Contains:
			return Serialize_ValueSet_Expansion_Contains(arena, (ValueSet_Expansion_Contains*)resource);
		case ResourceType::VerificationResult:
			return Serialize_VerificationResult(arena, (VerificationResult*)resource);
		case ResourceType::VerificationResult_PrimarySource:
			return Serialize_VerificationResult_PrimarySource(arena, (VerificationResult_PrimarySource*)resource);
		case ResourceType::VerificationResult_Attestation:
			return Serialize_VerificationResult_Attestation(arena, (VerificationResult_Attestation*)resource);
		case ResourceType::VerificationResult_Validator:
			return Serialize_VerificationResult_Validator(arena, (VerificationResult_Validator*)resource);
		case ResourceType::VisionPrescription:
			return Serialize_VisionPrescription(arena, (VisionPrescription*)resource);
		case ResourceType::VisionPrescription_LensSpecification:
			return Serialize_VisionPrescription_LensSpecification(arena, (VisionPrescription_LensSpecification*)resource);
		case ResourceType::VisionPrescription_LensSpecification_Prism:
			return Serialize_VisionPrescription_LensSpecification_Prism(arena, (VisionPrescription_LensSpecification_Prism*)resource);
		case ResourceType::MetadataResource:
			return Serialize_MetadataResource(arena, (MetadataResource*)resource);
		case ResourceType::Element:
			return Serialize_Element(arena, (Element*)resource);
		case ResourceType::BackboneElement:
			return Serialize_BackboneElement(arena, (BackboneElement*)resource);
		case ResourceType::Integer:
			return Serialize_Integer(arena, (Integer*)resource);
		case ResourceType::Xhtml:
			return Serialize_Xhtml(arena, (Xhtml*)resource);
		case ResourceType::Address:
			return Serialize_Address(arena, (Address*)resource);
		case ResourceType::Age:
			return Serialize_Age(arena, (Age*)resource);
		case ResourceType::Annotation:
			return Serialize_Annotation(arena, (Annotation*)resource);
		case ResourceType::Attachment:
			return Serialize_Attachment(arena, (Attachment*)resource);
		case ResourceType::CodeableConcept:
			return Serialize_CodeableConcept(arena, (CodeableConcept*)resource);
		case ResourceType::Coding:
			return Serialize_Coding(arena, (Coding*)resource);
		case ResourceType::ContactDetail:
			return Serialize_ContactDetail(arena, (ContactDetail*)resource);
		case ResourceType::ContactPoint:
			return Serialize_ContactPoint(arena, (ContactPoint*)resource);
		case ResourceType::Contributor:
			return Serialize_Contributor(arena, (Contributor*)resource);
		case ResourceType::Count:
			return Serialize_Count(arena, (Count*)resource);
		case ResourceType::DataRequirement:
			return Serialize_DataRequirement(arena, (DataRequirement*)resource);
		case ResourceType::DataRequirement_CodeFilter:
			return Serialize_DataRequirement_CodeFilter(arena, (DataRequirement_CodeFilter*)resource);
		case ResourceType::DataRequirement_DateFilter:
			return Serialize_DataRequirement_DateFilter(arena, (DataRequirement_DateFilter*)resource);
		case ResourceType::DataRequirement_Sort:
			return Serialize_DataRequirement_Sort(arena, (DataRequirement_Sort*)resource);
		case ResourceType::Distance:
			return Serialize_Distance(arena, (Distance*)resource);
		case ResourceType::Dosage:
			return Serialize_Dosage(arena, (Dosage*)resource);
		case ResourceType::Dosage_DoseAndRate:
			return Serialize_Dosage_DoseAndRate(arena, (Dosage_DoseAndRate*)resource);
		case ResourceType::Duration:
			return Serialize_Duration(arena, (Duration*)resource);
		case ResourceType::ElementDefinition:
			return Serialize_ElementDefinition(arena, (ElementDefinition*)resource);
		case ResourceType::ElementDefinition_Slicing:
			return Serialize_ElementDefinition_Slicing(arena, (ElementDefinition_Slicing*)resource);
		case ResourceType::ElementDefinition_Slicing_Discriminator:
			return Serialize_ElementDefinition_Slicing_Discriminator(arena, (ElementDefinition_Slicing_Discriminator*)resource);
		case ResourceType::ElementDefinition_Base:
			return Serialize_ElementDefinition_Base(arena, (ElementDefinition_Base*)resource);
		case ResourceType::ElementDefinition_Type:
			return Serialize_ElementDefinition_Type(arena, (ElementDefinition_Type*)resource);
		case ResourceType::ElementDefinition_Example:
			return Serialize_ElementDefinition_Example(arena, (ElementDefinition_Example*)resource);
		case ResourceType::ElementDefinition_Constraint:
			return Serialize_ElementDefinition_Constraint(arena, (ElementDefinition_Constraint*)resource);
		case ResourceType::ElementDefinition_Binding:
			return Serialize_ElementDefinition_Binding(arena, (ElementDefinition_Binding*)resource);
		case ResourceType::ElementDefinition_Mapping:
			return Serialize_ElementDefinition_Mapping(arena, (ElementDefinition_Mapping*)resource);
		case ResourceType::Expression:
			return Serialize_Expression(arena, (Expression*)resource);
		case ResourceType::Extension:
			return Serialize_Extension(arena, (Extension*)resource);
		case ResourceType::HumanName:
			return Serialize_HumanName(arena, (HumanName*)resource);
		case ResourceType::Identifier:
			return Serialize_Identifier(arena, (Identifier*)resource);
		case ResourceType::MarketingStatus:
			return Serialize_MarketingStatus(arena, (MarketingStatus*)resource);
		case ResourceType::Meta:
			return Serialize_Meta(arena, (Meta*)resource);
		case ResourceType::Money:
			return Serialize_Money(arena, (Money*)resource);
		case ResourceType::Narrative:
			return Serialize_Narrative(arena, (Narrative*)resource);
		case ResourceType::ParameterDefinition:
			return Serialize_ParameterDefinition(arena, (ParameterDefinition*)resource);
		case ResourceType::Period:
			return Serialize_Period(arena, (Period*)resource);
		case ResourceType::Population:
			return Serialize_Population(arena, (Population*)resource);
		case ResourceType::ProdCharacteristic:
			return Serialize_ProdCharacteristic(arena, (ProdCharacteristic*)resource);
		case ResourceType::ProductShelfLife:
			return Serialize_ProductShelfLife(arena, (ProductShelfLife*)resource);
		case ResourceType::Quantity:
			return Serialize_Quantity(arena, (Quantity*)resource);
		case ResourceType::Range:
			return Serialize_Range(arena, (Range*)resource);
		case ResourceType::Ratio:
			return Serialize_Ratio(arena, (Ratio*)resource);
		case ResourceType::Reference:
			return Serialize_Reference(arena, (Reference*)resource);
		case ResourceType::RelatedArtifact:
			return Serialize_RelatedArtifact(arena, (RelatedArtifact*)resource);
		case ResourceType::SampledData:
			return Serialize_SampledData(arena, (SampledData*)resource);
		case ResourceType::Signature:
			return Serialize_Signature(arena, (Signature*)resource);
		case ResourceType::SubstanceAmount:
			return Serialize_SubstanceAmount(arena, (SubstanceAmount*)resource);
		case ResourceType::SubstanceAmount_ReferenceRange:
			return Serialize_SubstanceAmount_ReferenceRange(arena, (SubstanceAmount_ReferenceRange*)resource);
		case ResourceType::Timing:
			return Serialize_Timing(arena, (Timing*)resource);
		case ResourceType::Timing_Repeat:
			return Serialize_Timing_Repeat(arena, (Timing_Repeat*)resource);
		case ResourceType::TriggerDefinition:
			return Serialize_TriggerDefinition(arena, (TriggerDefinition*)resource);
		case ResourceType::UsageContext:
			return Serialize_UsageContext(arena, (UsageContext*)resource);
		case ResourceType::MoneyQuantity:
			return Serialize_MoneyQuantity(arena, (MoneyQuantity*)resource);
		case ResourceType::SimpleQuantity:
			return Serialize_SimpleQuantity(arena, (SimpleQuantity*)resource);
		case ResourceType::Shareablemeasure:
			return Serialize_Shareablemeasure(arena, (Shareablemeasure*)resource);
		case ResourceType::Servicerequest_genetics:
			return Serialize_Servicerequest_genetics(arena, (Servicerequest_genetics*)resource);
		case ResourceType::Groupdefinition:
			return Serialize_Groupdefinition(arena, (Groupdefinition*)resource);
		case ResourceType::Actualgroup:
			return Serialize_Actualgroup(arena, (Actualgroup*)resource);
		case ResourceType::Familymemberhistory_genetic:
			return Serialize_Familymemberhistory_genetic(arena, (Familymemberhistory_genetic*)resource);
		case ResourceType::Shareableactivitydefinition:
			return Serialize_Shareableactivitydefinition(arena, (Shareableactivitydefinition*)resource);
		case ResourceType::Cdshooksrequestgroup:
			return Serialize_Cdshooksrequestgroup(arena, (Cdshooksrequestgroup*)resource);
		case ResourceType::Provenance_relevant_history:
			return Serialize_Provenance_relevant_history(arena, (Provenance_relevant_history*)resource);
		case ResourceType::Cqf_questionnaire:
			return Serialize_Cqf_questionnaire(arena, (Cqf_questionnaire*)resource);
		case ResourceType::Shareablevalueset:
			return Serialize_Shareablevalueset(arena, (Shareablevalueset*)resource);
		case ResourceType::Picoelement:
			return Serialize_Picoelement(arena, (Picoelement*)resource);
		case ResourceType::Shareablecodesystem:
			return Serialize_Shareablecodesystem(arena, (Shareablecodesystem*)resource);
		case ResourceType::Cdshooksguidanceresponse:
			return Serialize_Cdshooksguidanceresponse(arena, (Cdshooksguidanceresponse*)resource);
		case ResourceType::Devicemetricobservation:
			return Serialize_Devicemetricobservation(arena, (Devicemetricobservation*)resource);
		case ResourceType::Observation_genetics:
			return Serialize_Observation_genetics(arena, (Observation_genetics*)resource);
		case ResourceType::Vitalsigns:
			return Serialize_Vitalsigns(arena, (Vitalsigns*)resource);
		case ResourceType::Bodyweight:
			return Serialize_Bodyweight(arena, (Bodyweight*)resource);
		case ResourceType::Vitalspanel:
			return Serialize_Vitalspanel(arena, (Vitalspanel*)resource);
		case ResourceType::Bodyheight:
			return Serialize_Bodyheight(arena, (Bodyheight*)resource);
		case ResourceType::Resprate:
			return Serialize_Resprate(arena, (Resprate*)resource);
		case ResourceType::Heartrate:
			return Serialize_Heartrate(arena, (Heartrate*)resource);
		case ResourceType::Bodytemp:
			return Serialize_Bodytemp(arena, (Bodytemp*)resource);
		case ResourceType::Headcircum:
			return Serialize_Headcircum(arena, (Headcircum*)resource);
		case ResourceType::Oxygensat:
			return Serialize_Oxygensat(arena, (Oxygensat*)resource);
		case ResourceType::Bmi:
			return Serialize_Bmi(arena, (Bmi*)resource);
		case ResourceType::Bp:
			return Serialize_Bp(arena, (Bp*)resource);
		case ResourceType::Shareablelibrary:
			return Serialize_Shareablelibrary(arena, (Shareablelibrary*)resource);
		case ResourceType::Cqllibrary:
			return Serialize_Cqllibrary(arena, (Cqllibrary*)resource);
		case ResourceType::Lipidprofile:
			return Serialize_Lipidprofile(arena, (Lipidprofile*)resource);
		case ResourceType::Cholesterol:
			return Serialize_Cholesterol(arena, (Cholesterol*)resource);
		case ResourceType::Triglyceride:
			return Serialize_Triglyceride(arena, (Triglyceride*)resource);
		case ResourceType::Hdlcholesterol:
			return Serialize_Hdlcholesterol(arena, (Hdlcholesterol*)resource);
		case ResourceType::Ldlcholesterol:
			return Serialize_Ldlcholesterol(arena, (Ldlcholesterol*)resource);
		case ResourceType::Diagnosticreport_genetics:
			return Serialize_Diagnosticreport_genetics(arena, (Diagnosticreport_genetics*)resource);
		case ResourceType::Hlaresult:
			return Serialize_Hlaresult(arena, (Hlaresult*)resource);
		case ResourceType::Synthesis:
			return Serialize_Synthesis(arena, (Synthesis*)resource);
		case ResourceType::Clinicaldocument:
			return Serialize_Clinicaldocument(arena, (Clinicaldocument*)resource);
		case ResourceType::Catalog:
			return Serialize_Catalog(arena, (Catalog*)resource);
		case ResourceType::Shareableplandefinition:
			return Serialize_Shareableplandefinition(arena, (Shareableplandefinition*)resource);
		case ResourceType::Computableplandefinition:
			return Serialize_Computableplandefinition(arena, (Computableplandefinition*)resource);
		case ResourceType::Cdshooksserviceplandefinition:
			return Serialize_Cdshooksserviceplandefinition(arena, (Cdshooksserviceplandefinition*)resource);
		case ResourceType::Elementdefinition_de:
			return Serialize_Elementdefinition_de(arena, (Elementdefinition_de*)resource);
		case ResourceType::Ehrsrle_auditevent:
			return Serialize_Ehrsrle_auditevent(arena, (Ehrsrle_auditevent*)resource);
		case ResourceType::Ehrsrle_provenance:
			return Serialize_Ehrsrle_provenance(arena, (Ehrsrle_provenance*)resource);
	}
	Assert(false);
	return Str8Lit("");
}

String8
Serialize_Account(Arena *arena, Account *account)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&account->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&account->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", account->id.size, account->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, account->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", account->implicitRules.size, account->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", account->language.size, account->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, account->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &account->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &account->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &account->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &account->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", account->status.size, account->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, account->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", account->name.size, account->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account->subject_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &account->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account->servicePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, account->servicePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account->coverage_count; i++)
		{
			String8 to_add = Serialize_Account_Coverage(arena, &account->coverage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account->owner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, account->owner);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", account->description.size, account->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account->guarantor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account->guarantor_count; i++)
		{
			String8 to_add = Serialize_Account_Guarantor(arena, &account->guarantor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, account->partOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Account_Coverage(Arena *arena, Account_Coverage *account_Coverage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&account_Coverage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&account_Coverage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", account_Coverage->id.size, account_Coverage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account_Coverage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account_Coverage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &account_Coverage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account_Coverage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account_Coverage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &account_Coverage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account_Coverage->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, account_Coverage->coverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account_Coverage->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%d\"", account_Coverage->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Account_Guarantor(Arena *arena, Account_Guarantor *account_Guarantor)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&account_Guarantor->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&account_Guarantor->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", account_Guarantor->id.size, account_Guarantor->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account_Guarantor->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account_Guarantor->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &account_Guarantor->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account_Guarantor->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < account_Guarantor->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &account_Guarantor->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&account_Guarantor->party)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, account_Guarantor->party);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account_Guarantor->onHold)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"onHold\" : \"%.*s\"", account_Guarantor->onHold ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&account_Guarantor->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, account_Guarantor->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ActivityDefinition(Arena *arena, ActivityDefinition *activityDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&activityDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&activityDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", activityDefinition->id.size, activityDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, activityDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", activityDefinition->implicitRules.size, activityDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", activityDefinition->language.size, activityDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, activityDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &activityDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &activityDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &activityDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", activityDefinition->url.size, activityDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &activityDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", activityDefinition->version.size, activityDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", activityDefinition->name.size, activityDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", activityDefinition->title.size, activityDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", activityDefinition->subtitle.size, activityDefinition->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", activityDefinition->status.size, activityDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", activityDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(activityDefinition->subject_type == ActivityDefinition::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, activityDefinition->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(activityDefinition->subject_type == ActivityDefinition::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, activityDefinition->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&activityDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", activityDefinition->date.size, activityDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", activityDefinition->publisher.size, activityDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &activityDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", activityDefinition->description.size, activityDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &activityDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &activityDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", activityDefinition->purpose.size, activityDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", activityDefinition->usage.size, activityDefinition->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", activityDefinition->copyright.size, activityDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", activityDefinition->approvalDate.size, activityDefinition->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", activityDefinition->lastReviewDate.size, activityDefinition->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, activityDefinition->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &activityDefinition->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &activityDefinition->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &activityDefinition->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &activityDefinition->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &activityDefinition->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &activityDefinition->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->library)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->library_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"library\" : \"%.*s\"", &activityDefinition->library[i].size, &activityDefinition->library[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", activityDefinition->kind.size, activityDefinition->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", activityDefinition->profile.size, activityDefinition->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, activityDefinition->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", activityDefinition->intent.size, activityDefinition->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", activityDefinition->priority.size, activityDefinition->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->doNotPerform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"doNotPerform\" : \"%.*s\"", activityDefinition->doNotPerform ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(activityDefinition->timing_type == ActivityDefinition::TimingType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, activityDefinition->timing.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(activityDefinition->timing_type == ActivityDefinition::TimingType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", activityDefinition->timing.valueDateTime.size, activityDefinition->timing.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(activityDefinition->timing_type == ActivityDefinition::TimingType::Age)	
	{
			String8 to_add = Serialize_Age(arena, activityDefinition->timing.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(activityDefinition->timing_type == ActivityDefinition::TimingType::Period)	
	{
			String8 to_add = Serialize_Period(arena, activityDefinition->timing.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(activityDefinition->timing_type == ActivityDefinition::TimingType::Range)	
	{
			String8 to_add = Serialize_Range(arena, activityDefinition->timing.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(activityDefinition->timing_type == ActivityDefinition::TimingType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, activityDefinition->timing.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&activityDefinition->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, activityDefinition->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->participant_count; i++)
		{
			String8 to_add = Serialize_ActivityDefinition_Participant(arena, &activityDefinition->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(activityDefinition->product_type == ActivityDefinition::ProductType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, activityDefinition->product.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(activityDefinition->product_type == ActivityDefinition::ProductType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, activityDefinition->product.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&activityDefinition->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, activityDefinition->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->dosage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->dosage_count; i++)
		{
			String8 to_add = Serialize_Dosage(arena, &activityDefinition->dosage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->bodySite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &activityDefinition->bodySite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->specimenRequirement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->specimenRequirement_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &activityDefinition->specimenRequirement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->observationRequirement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->observationRequirement_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &activityDefinition->observationRequirement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->observationResultRequirement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->observationResultRequirement_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &activityDefinition->observationResultRequirement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition->transform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"transform\" : \"%.*s\"", activityDefinition->transform.size, activityDefinition->transform.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition->dynamicValue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition->dynamicValue_count; i++)
		{
			String8 to_add = Serialize_ActivityDefinition_DynamicValue(arena, &activityDefinition->dynamicValue[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ActivityDefinition_Participant(Arena *arena, ActivityDefinition_Participant *activityDefinition_Participant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&activityDefinition_Participant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&activityDefinition_Participant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", activityDefinition_Participant->id.size, activityDefinition_Participant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition_Participant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition_Participant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &activityDefinition_Participant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition_Participant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition_Participant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &activityDefinition_Participant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition_Participant->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", activityDefinition_Participant->type.size, activityDefinition_Participant->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition_Participant->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, activityDefinition_Participant->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ActivityDefinition_DynamicValue(Arena *arena, ActivityDefinition_DynamicValue *activityDefinition_DynamicValue)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&activityDefinition_DynamicValue->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&activityDefinition_DynamicValue->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", activityDefinition_DynamicValue->id.size, activityDefinition_DynamicValue->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition_DynamicValue->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition_DynamicValue->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &activityDefinition_DynamicValue->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition_DynamicValue->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < activityDefinition_DynamicValue->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &activityDefinition_DynamicValue->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&activityDefinition_DynamicValue->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", activityDefinition_DynamicValue->path.size, activityDefinition_DynamicValue->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&activityDefinition_DynamicValue->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, activityDefinition_DynamicValue->expression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AdverseEvent(Arena *arena, AdverseEvent *adverseEvent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&adverseEvent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&adverseEvent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", adverseEvent->id.size, adverseEvent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, adverseEvent->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", adverseEvent->implicitRules.size, adverseEvent->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", adverseEvent->language.size, adverseEvent->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, adverseEvent->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &adverseEvent->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &adverseEvent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &adverseEvent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, adverseEvent->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->actuality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"actuality\" : \"%.*s\"", adverseEvent->actuality.size, adverseEvent->actuality.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &adverseEvent->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->event)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, adverseEvent->event);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, adverseEvent->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, adverseEvent->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", adverseEvent->date.size, adverseEvent->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->detected)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"detected\" : \"%.*s\"", adverseEvent->detected.size, adverseEvent->detected.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->recordedDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recordedDate\" : \"%.*s\"", adverseEvent->recordedDate.size, adverseEvent->recordedDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->resultingCondition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->resultingCondition_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &adverseEvent->resultingCondition[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, adverseEvent->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->seriousness)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, adverseEvent->seriousness);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->severity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, adverseEvent->severity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, adverseEvent->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->recorder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, adverseEvent->recorder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent->contributor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->contributor_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &adverseEvent->contributor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->suspectEntity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->suspectEntity_count; i++)
		{
			String8 to_add = Serialize_AdverseEvent_SuspectEntity(arena, &adverseEvent->suspectEntity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->subjectMedicalHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->subjectMedicalHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &adverseEvent->subjectMedicalHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->referenceDocument)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->referenceDocument_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &adverseEvent->referenceDocument[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent->study)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent->study_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &adverseEvent->study[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AdverseEvent_SuspectEntity(Arena *arena, AdverseEvent_SuspectEntity *adverseEvent_SuspectEntity)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&adverseEvent_SuspectEntity->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&adverseEvent_SuspectEntity->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", adverseEvent_SuspectEntity->id.size, adverseEvent_SuspectEntity->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent_SuspectEntity->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent_SuspectEntity->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &adverseEvent_SuspectEntity->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent_SuspectEntity->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent_SuspectEntity->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &adverseEvent_SuspectEntity->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent_SuspectEntity->instance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, adverseEvent_SuspectEntity->instance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent_SuspectEntity->causality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent_SuspectEntity->causality_count; i++)
		{
			String8 to_add = Serialize_AdverseEvent_SuspectEntity_Causality(arena, &adverseEvent_SuspectEntity->causality[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AdverseEvent_SuspectEntity_Causality(Arena *arena, AdverseEvent_SuspectEntity_Causality *adverseEvent_SuspectEntity_Causality)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", adverseEvent_SuspectEntity_Causality->id.size, adverseEvent_SuspectEntity_Causality->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent_SuspectEntity_Causality->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &adverseEvent_SuspectEntity_Causality->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < adverseEvent_SuspectEntity_Causality->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &adverseEvent_SuspectEntity_Causality->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->assessment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, adverseEvent_SuspectEntity_Causality->assessment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->productRelatedness)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"productRelatedness\" : \"%.*s\"", adverseEvent_SuspectEntity_Causality->productRelatedness.size, adverseEvent_SuspectEntity_Causality->productRelatedness.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, adverseEvent_SuspectEntity_Causality->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&adverseEvent_SuspectEntity_Causality->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, adverseEvent_SuspectEntity_Causality->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AllergyIntolerance(Arena *arena, AllergyIntolerance *allergyIntolerance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&allergyIntolerance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&allergyIntolerance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", allergyIntolerance->id.size, allergyIntolerance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, allergyIntolerance->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", allergyIntolerance->implicitRules.size, allergyIntolerance->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", allergyIntolerance->language.size, allergyIntolerance->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, allergyIntolerance->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &allergyIntolerance->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &allergyIntolerance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &allergyIntolerance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &allergyIntolerance->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance->clinicalStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, allergyIntolerance->clinicalStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->verificationStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, allergyIntolerance->verificationStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", allergyIntolerance->type.size, allergyIntolerance->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance->category_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"category\" : \"%.*s\"", &allergyIntolerance->category[i].size, &allergyIntolerance->category[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance->criticality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"criticality\" : \"%.*s\"", allergyIntolerance->criticality.size, allergyIntolerance->criticality.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, allergyIntolerance->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, allergyIntolerance->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, allergyIntolerance->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(allergyIntolerance->onset_type == AllergyIntolerance::OnsetType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", allergyIntolerance->onset.valueDateTime.size, allergyIntolerance->onset.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(allergyIntolerance->onset_type == AllergyIntolerance::OnsetType::Age)	
	{
			String8 to_add = Serialize_Age(arena, allergyIntolerance->onset.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(allergyIntolerance->onset_type == AllergyIntolerance::OnsetType::Period)	
	{
			String8 to_add = Serialize_Period(arena, allergyIntolerance->onset.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(allergyIntolerance->onset_type == AllergyIntolerance::OnsetType::Range)	
	{
			String8 to_add = Serialize_Range(arena, allergyIntolerance->onset.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(allergyIntolerance->onset_type == AllergyIntolerance::OnsetType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", allergyIntolerance->onset.valueString.size, allergyIntolerance->onset.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&allergyIntolerance->recordedDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recordedDate\" : \"%.*s\"", allergyIntolerance->recordedDate.size, allergyIntolerance->recordedDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->recorder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, allergyIntolerance->recorder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->asserter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, allergyIntolerance->asserter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->lastOccurrence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastOccurrence\" : \"%.*s\"", allergyIntolerance->lastOccurrence.size, allergyIntolerance->lastOccurrence.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &allergyIntolerance->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance->reaction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance->reaction_count; i++)
		{
			String8 to_add = Serialize_AllergyIntolerance_Reaction(arena, &allergyIntolerance->reaction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AllergyIntolerance_Reaction(Arena *arena, AllergyIntolerance_Reaction *allergyIntolerance_Reaction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&allergyIntolerance_Reaction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&allergyIntolerance_Reaction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", allergyIntolerance_Reaction->id.size, allergyIntolerance_Reaction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance_Reaction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance_Reaction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &allergyIntolerance_Reaction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance_Reaction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance_Reaction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &allergyIntolerance_Reaction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance_Reaction->substance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, allergyIntolerance_Reaction->substance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance_Reaction->manifestation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance_Reaction->manifestation_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &allergyIntolerance_Reaction->manifestation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&allergyIntolerance_Reaction->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", allergyIntolerance_Reaction->description.size, allergyIntolerance_Reaction->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance_Reaction->onset)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"onset\" : \"%.*s\"", allergyIntolerance_Reaction->onset.size, allergyIntolerance_Reaction->onset.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance_Reaction->severity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"severity\" : \"%.*s\"", allergyIntolerance_Reaction->severity.size, allergyIntolerance_Reaction->severity.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance_Reaction->exposureRoute)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, allergyIntolerance_Reaction->exposureRoute);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&allergyIntolerance_Reaction->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < allergyIntolerance_Reaction->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &allergyIntolerance_Reaction->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Appointment(Arena *arena, Appointment *appointment)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&appointment->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&appointment->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", appointment->id.size, appointment->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, appointment->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", appointment->implicitRules.size, appointment->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", appointment->language.size, appointment->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, appointment->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &appointment->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &appointment->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &appointment->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &appointment->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", appointment->status.size, appointment->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->cancelationReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, appointment->cancelationReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->serviceCategory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->serviceCategory_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &appointment->serviceCategory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->serviceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->serviceType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &appointment->serviceType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->specialty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->specialty_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &appointment->specialty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->appointmentType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, appointment->appointmentType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &appointment->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &appointment->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%d\"", appointment->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", appointment->description.size, appointment->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->supportingInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->supportingInformation_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &appointment->supportingInformation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"start\" : \"%.*s\"", appointment->start.size, appointment->start.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"end\" : \"%.*s\"", appointment->end.size, appointment->end.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->minutesDuration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"minutesDuration\" : \"%d\"", appointment->minutesDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->slot)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->slot_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &appointment->slot[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", appointment->created.size, appointment->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", appointment->comment.size, appointment->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->patientInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"patientInstruction\" : \"%.*s\"", appointment->patientInstruction.size, appointment->patientInstruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &appointment->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->participant_count; i++)
		{
			String8 to_add = Serialize_Appointment_Participant(arena, &appointment->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment->requestedPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment->requestedPeriod_count; i++)
		{
			String8 to_add = Serialize_Period(arena, &appointment->requestedPeriod[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Appointment_Participant(Arena *arena, Appointment_Participant *appointment_Participant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&appointment_Participant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&appointment_Participant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", appointment_Participant->id.size, appointment_Participant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment_Participant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment_Participant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &appointment_Participant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment_Participant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment_Participant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &appointment_Participant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment_Participant->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointment_Participant->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &appointment_Participant->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointment_Participant->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, appointment_Participant->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment_Participant->required)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"required\" : \"%.*s\"", appointment_Participant->required.size, appointment_Participant->required.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment_Participant->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", appointment_Participant->status.size, appointment_Participant->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointment_Participant->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, appointment_Participant->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AppointmentResponse(Arena *arena, AppointmentResponse *appointmentResponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&appointmentResponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&appointmentResponse->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", appointmentResponse->id.size, appointmentResponse->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, appointmentResponse->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", appointmentResponse->implicitRules.size, appointmentResponse->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", appointmentResponse->language.size, appointmentResponse->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, appointmentResponse->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointmentResponse->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &appointmentResponse->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointmentResponse->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointmentResponse->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &appointmentResponse->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointmentResponse->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointmentResponse->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &appointmentResponse->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointmentResponse->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointmentResponse->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &appointmentResponse->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointmentResponse->appointment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, appointmentResponse->appointment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"start\" : \"%.*s\"", appointmentResponse->start.size, appointmentResponse->start.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"end\" : \"%.*s\"", appointmentResponse->end.size, appointmentResponse->end.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->participantType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < appointmentResponse->participantType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &appointmentResponse->participantType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&appointmentResponse->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, appointmentResponse->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->participantStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"participantStatus\" : \"%.*s\"", appointmentResponse->participantStatus.size, appointmentResponse->participantStatus.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&appointmentResponse->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", appointmentResponse->comment.size, appointmentResponse->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AuditEvent(Arena *arena, AuditEvent *auditEvent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&auditEvent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&auditEvent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", auditEvent->id.size, auditEvent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, auditEvent->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", auditEvent->implicitRules.size, auditEvent->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", auditEvent->language.size, auditEvent->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, auditEvent->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &auditEvent->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, auditEvent->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->subtype)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent->subtype_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &auditEvent->subtype[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"action\" : \"%.*s\"", auditEvent->action.size, auditEvent->action.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, auditEvent->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->recorded)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recorded\" : \"%.*s\"", auditEvent->recorded.size, auditEvent->recorded.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outcome\" : \"%.*s\"", auditEvent->outcome.size, auditEvent->outcome.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->outcomeDesc)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outcomeDesc\" : \"%.*s\"", auditEvent->outcomeDesc.size, auditEvent->outcomeDesc.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->purposeOfEvent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent->purposeOfEvent_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &auditEvent->purposeOfEvent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent->agent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent->agent_count; i++)
		{
			String8 to_add = Serialize_AuditEvent_Agent(arena, &auditEvent->agent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_AuditEvent_Source(arena, auditEvent->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent->entity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent->entity_count; i++)
		{
			String8 to_add = Serialize_AuditEvent_Entity(arena, &auditEvent->entity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AuditEvent_Agent(Arena *arena, AuditEvent_Agent *auditEvent_Agent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&auditEvent_Agent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&auditEvent_Agent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", auditEvent_Agent->id.size, auditEvent_Agent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Agent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Agent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Agent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Agent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Agent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Agent->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, auditEvent_Agent->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Agent->role_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &auditEvent_Agent->role[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Agent->who)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, auditEvent_Agent->who);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->altId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"altId\" : \"%.*s\"", auditEvent_Agent->altId.size, auditEvent_Agent->altId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", auditEvent_Agent->name.size, auditEvent_Agent->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->requestor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requestor\" : \"%.*s\"", auditEvent_Agent->requestor ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, auditEvent_Agent->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->policy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Agent->policy_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"policy\" : \"%.*s\"", &auditEvent_Agent->policy[i].size, &auditEvent_Agent->policy[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Agent->media)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, auditEvent_Agent->media);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_AuditEvent_Agent_Network(arena, auditEvent_Agent->network);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent->purposeOfUse)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Agent->purposeOfUse_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &auditEvent_Agent->purposeOfUse[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AuditEvent_Agent_Network(Arena *arena, AuditEvent_Agent_Network *auditEvent_Agent_Network)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&auditEvent_Agent_Network->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&auditEvent_Agent_Network->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", auditEvent_Agent_Network->id.size, auditEvent_Agent_Network->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent_Network->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Agent_Network->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Agent_Network->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Agent_Network->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Agent_Network->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Agent_Network->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Agent_Network->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"address\" : \"%.*s\"", auditEvent_Agent_Network->address.size, auditEvent_Agent_Network->address.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Agent_Network->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", auditEvent_Agent_Network->type.size, auditEvent_Agent_Network->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AuditEvent_Source(Arena *arena, AuditEvent_Source *auditEvent_Source)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&auditEvent_Source->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&auditEvent_Source->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", auditEvent_Source->id.size, auditEvent_Source->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Source->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Source->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Source->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Source->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Source->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Source->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Source->site)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"site\" : \"%.*s\"", auditEvent_Source->site.size, auditEvent_Source->site.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Source->observer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, auditEvent_Source->observer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Source->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Source->type_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &auditEvent_Source->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AuditEvent_Entity(Arena *arena, AuditEvent_Entity *auditEvent_Entity)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&auditEvent_Entity->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&auditEvent_Entity->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", auditEvent_Entity->id.size, auditEvent_Entity->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Entity->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Entity->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Entity->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Entity->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Entity->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Entity->what)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, auditEvent_Entity->what);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, auditEvent_Entity->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, auditEvent_Entity->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->lifecycle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, auditEvent_Entity->lifecycle);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->securityLabel)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Entity->securityLabel_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &auditEvent_Entity->securityLabel[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Entity->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", auditEvent_Entity->name.size, auditEvent_Entity->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", auditEvent_Entity->description.size, auditEvent_Entity->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->query)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"query\" : \"%.*s\"", auditEvent_Entity->query.size, auditEvent_Entity->query.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Entity->detail_count; i++)
		{
			String8 to_add = Serialize_AuditEvent_Entity_Detail(arena, &auditEvent_Entity->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_AuditEvent_Entity_Detail(Arena *arena, AuditEvent_Entity_Detail *auditEvent_Entity_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&auditEvent_Entity_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&auditEvent_Entity_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", auditEvent_Entity_Detail->id.size, auditEvent_Entity_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&auditEvent_Entity_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Entity_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Entity_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Entity_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < auditEvent_Entity_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &auditEvent_Entity_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&auditEvent_Entity_Detail->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", auditEvent_Entity_Detail->type.size, auditEvent_Entity_Detail->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(auditEvent_Entity_Detail->value_type == AuditEvent_Entity_Detail::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", auditEvent_Entity_Detail->value.valueString.size, auditEvent_Entity_Detail->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(auditEvent_Entity_Detail->value_type == AuditEvent_Entity_Detail::ValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", auditEvent_Entity_Detail->value.valueBase64Binary.size, auditEvent_Entity_Detail->value.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Basic(Arena *arena, Basic *basic)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&basic->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&basic->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", basic->id.size, basic->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, basic->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", basic->implicitRules.size, basic->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", basic->language.size, basic->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, basic->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < basic->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &basic->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&basic->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < basic->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &basic->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&basic->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < basic->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &basic->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&basic->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < basic->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &basic->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&basic->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, basic->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, basic->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", basic->created.size, basic->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&basic->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, basic->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Binary(Arena *arena, Binary *binary)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&binary->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&binary->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", binary->id.size, binary->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&binary->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, binary->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&binary->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", binary->implicitRules.size, binary->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&binary->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", binary->language.size, binary->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&binary->contentType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"contentType\" : \"%.*s\"", binary->contentType.size, binary->contentType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&binary->securityContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, binary->securityContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&binary->data)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"data\" : \"%.*s\"", binary->data.size, binary->data.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_BiologicallyDerivedProduct(Arena *arena, BiologicallyDerivedProduct *biologicallyDerivedProduct)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&biologicallyDerivedProduct->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", biologicallyDerivedProduct->id.size, biologicallyDerivedProduct->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, biologicallyDerivedProduct->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", biologicallyDerivedProduct->implicitRules.size, biologicallyDerivedProduct->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", biologicallyDerivedProduct->language.size, biologicallyDerivedProduct->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, biologicallyDerivedProduct->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &biologicallyDerivedProduct->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &biologicallyDerivedProduct->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->productCategory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"productCategory\" : \"%.*s\"", biologicallyDerivedProduct->productCategory.size, biologicallyDerivedProduct->productCategory.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->productCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, biologicallyDerivedProduct->productCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", biologicallyDerivedProduct->status.size, biologicallyDerivedProduct->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->request_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &biologicallyDerivedProduct->request[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, biologicallyDerivedProduct->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->parent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->parent_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &biologicallyDerivedProduct->parent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->collection)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_BiologicallyDerivedProduct_Collection(arena, biologicallyDerivedProduct->collection);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->processing)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->processing_count; i++)
		{
			String8 to_add = Serialize_BiologicallyDerivedProduct_Processing(arena, &biologicallyDerivedProduct->processing[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct->manipulation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_BiologicallyDerivedProduct_Manipulation(arena, biologicallyDerivedProduct->manipulation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct->storage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct->storage_count; i++)
		{
			String8 to_add = Serialize_BiologicallyDerivedProduct_Storage(arena, &biologicallyDerivedProduct->storage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_BiologicallyDerivedProduct_Collection(Arena *arena, BiologicallyDerivedProduct_Collection *biologicallyDerivedProduct_Collection)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&biologicallyDerivedProduct_Collection->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Collection->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", biologicallyDerivedProduct_Collection->id.size, biologicallyDerivedProduct_Collection->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Collection->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Collection->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Collection->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Collection->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Collection->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Collection->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Collection->collector)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, biologicallyDerivedProduct_Collection->collector);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Collection->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, biologicallyDerivedProduct_Collection->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(biologicallyDerivedProduct_Collection->collected_type == BiologicallyDerivedProduct_Collection::CollectedType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", biologicallyDerivedProduct_Collection->collected.valueDateTime.size, biologicallyDerivedProduct_Collection->collected.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(biologicallyDerivedProduct_Collection->collected_type == BiologicallyDerivedProduct_Collection::CollectedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, biologicallyDerivedProduct_Collection->collected.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_BiologicallyDerivedProduct_Processing(Arena *arena, BiologicallyDerivedProduct_Processing *biologicallyDerivedProduct_Processing)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&biologicallyDerivedProduct_Processing->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Processing->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", biologicallyDerivedProduct_Processing->id.size, biologicallyDerivedProduct_Processing->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Processing->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Processing->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Processing->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Processing->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Processing->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Processing->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Processing->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", biologicallyDerivedProduct_Processing->description.size, biologicallyDerivedProduct_Processing->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Processing->procedure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, biologicallyDerivedProduct_Processing->procedure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Processing->additive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, biologicallyDerivedProduct_Processing->additive);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(biologicallyDerivedProduct_Processing->time_type == BiologicallyDerivedProduct_Processing::TimeType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", biologicallyDerivedProduct_Processing->time.valueDateTime.size, biologicallyDerivedProduct_Processing->time.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(biologicallyDerivedProduct_Processing->time_type == BiologicallyDerivedProduct_Processing::TimeType::Period)	
	{
			String8 to_add = Serialize_Period(arena, biologicallyDerivedProduct_Processing->time.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_BiologicallyDerivedProduct_Manipulation(Arena *arena, BiologicallyDerivedProduct_Manipulation *biologicallyDerivedProduct_Manipulation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&biologicallyDerivedProduct_Manipulation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Manipulation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", biologicallyDerivedProduct_Manipulation->id.size, biologicallyDerivedProduct_Manipulation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Manipulation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Manipulation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Manipulation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Manipulation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Manipulation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Manipulation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Manipulation->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", biologicallyDerivedProduct_Manipulation->description.size, biologicallyDerivedProduct_Manipulation->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(biologicallyDerivedProduct_Manipulation->time_type == BiologicallyDerivedProduct_Manipulation::TimeType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", biologicallyDerivedProduct_Manipulation->time.valueDateTime.size, biologicallyDerivedProduct_Manipulation->time.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(biologicallyDerivedProduct_Manipulation->time_type == BiologicallyDerivedProduct_Manipulation::TimeType::Period)	
	{
			String8 to_add = Serialize_Period(arena, biologicallyDerivedProduct_Manipulation->time.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_BiologicallyDerivedProduct_Storage(Arena *arena, BiologicallyDerivedProduct_Storage *biologicallyDerivedProduct_Storage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&biologicallyDerivedProduct_Storage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Storage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", biologicallyDerivedProduct_Storage->id.size, biologicallyDerivedProduct_Storage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Storage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Storage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Storage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Storage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < biologicallyDerivedProduct_Storage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &biologicallyDerivedProduct_Storage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&biologicallyDerivedProduct_Storage->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", biologicallyDerivedProduct_Storage->description.size, biologicallyDerivedProduct_Storage->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Storage->temperature)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"temperature\" : \"%d\"", biologicallyDerivedProduct_Storage->temperature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Storage->scale)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"scale\" : \"%.*s\"", biologicallyDerivedProduct_Storage->scale.size, biologicallyDerivedProduct_Storage->scale.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&biologicallyDerivedProduct_Storage->duration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, biologicallyDerivedProduct_Storage->duration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_BodyStructure(Arena *arena, BodyStructure *bodyStructure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bodyStructure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&bodyStructure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", bodyStructure->id.size, bodyStructure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, bodyStructure->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", bodyStructure->implicitRules.size, bodyStructure->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", bodyStructure->language.size, bodyStructure->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, bodyStructure->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bodyStructure->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &bodyStructure->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bodyStructure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bodyStructure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bodyStructure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bodyStructure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bodyStructure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bodyStructure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bodyStructure->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bodyStructure->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &bodyStructure->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bodyStructure->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", bodyStructure->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->morphology)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, bodyStructure->morphology);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, bodyStructure->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->locationQualifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bodyStructure->locationQualifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &bodyStructure->locationQualifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bodyStructure->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", bodyStructure->description.size, bodyStructure->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bodyStructure->image)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bodyStructure->image_count; i++)
		{
			String8 to_add = Serialize_Attachment(arena, &bodyStructure->image[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bodyStructure->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, bodyStructure->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bundle(Arena *arena, Bundle *bundle)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bundle->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&bundle->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", bundle->id.size, bundle->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, bundle->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", bundle->implicitRules.size, bundle->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", bundle->language.size, bundle->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, bundle->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", bundle->type.size, bundle->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->timestamp)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"timestamp\" : \"%.*s\"", bundle->timestamp.size, bundle->timestamp.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->total)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"total\" : \"%d\"", bundle->total);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle->link_count; i++)
		{
			String8 to_add = Serialize_Bundle_Link(arena, &bundle->link[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle->entry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle->entry_count; i++)
		{
			String8 to_add = Serialize_Bundle_Entry(arena, &bundle->entry[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle->signature)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Signature(arena, bundle->signature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bundle_Link(Arena *arena, Bundle_Link *bundle_Link)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bundle_Link->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&bundle_Link->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", bundle_Link->id.size, bundle_Link->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Link->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Link->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Link->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Link->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Link->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Link->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Link->relation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"relation\" : \"%.*s\"", bundle_Link->relation.size, bundle_Link->relation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Link->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", bundle_Link->url.size, bundle_Link->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bundle_Entry(Arena *arena, Bundle_Entry *bundle_Entry)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bundle_Entry->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&bundle_Entry->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", bundle_Entry->id.size, bundle_Entry->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry->link_count; i++)
		{
			String8 to_add = Serialize_Bundle_Link(arena, &bundle_Entry->link[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry->fullUrl)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"fullUrl\" : \"%.*s\"", bundle_Entry->fullUrl.size, bundle_Entry->fullUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Resource(arena, bundle_Entry->resource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry->search)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Bundle_Entry_Search(arena, bundle_Entry->search);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Bundle_Entry_Request(arena, bundle_Entry->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry->response)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Bundle_Entry_Response(arena, bundle_Entry->response);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bundle_Entry_Search(Arena *arena, Bundle_Entry_Search *bundle_Entry_Search)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bundle_Entry_Search->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&bundle_Entry_Search->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", bundle_Entry_Search->id.size, bundle_Entry_Search->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Search->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry_Search->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry_Search->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry_Search->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry_Search->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry_Search->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry_Search->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", bundle_Entry_Search->mode.size, bundle_Entry_Search->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Search->score)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"score\" : \"%d\"", bundle_Entry_Search->score);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bundle_Entry_Request(Arena *arena, Bundle_Entry_Request *bundle_Entry_Request)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bundle_Entry_Request->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&bundle_Entry_Request->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", bundle_Entry_Request->id.size, bundle_Entry_Request->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Request->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry_Request->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry_Request->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry_Request->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry_Request->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry_Request->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry_Request->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"method\" : \"%.*s\"", bundle_Entry_Request->method.size, bundle_Entry_Request->method.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Request->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", bundle_Entry_Request->url.size, bundle_Entry_Request->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Request->ifNoneMatch)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"ifNoneMatch\" : \"%.*s\"", bundle_Entry_Request->ifNoneMatch.size, bundle_Entry_Request->ifNoneMatch.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Request->ifModifiedSince)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"ifModifiedSince\" : \"%.*s\"", bundle_Entry_Request->ifModifiedSince.size, bundle_Entry_Request->ifModifiedSince.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Request->ifMatch)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"ifMatch\" : \"%.*s\"", bundle_Entry_Request->ifMatch.size, bundle_Entry_Request->ifMatch.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Request->ifNoneExist)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"ifNoneExist\" : \"%.*s\"", bundle_Entry_Request->ifNoneExist.size, bundle_Entry_Request->ifNoneExist.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bundle_Entry_Response(Arena *arena, Bundle_Entry_Response *bundle_Entry_Response)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bundle_Entry_Response->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&bundle_Entry_Response->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", bundle_Entry_Response->id.size, bundle_Entry_Response->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Response->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry_Response->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry_Response->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry_Response->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < bundle_Entry_Response->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &bundle_Entry_Response->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&bundle_Entry_Response->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", bundle_Entry_Response->status.size, bundle_Entry_Response->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Response->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"location\" : \"%.*s\"", bundle_Entry_Response->location.size, bundle_Entry_Response->location.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Response->etag)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"etag\" : \"%.*s\"", bundle_Entry_Response->etag.size, bundle_Entry_Response->etag.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Response->lastModified)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastModified\" : \"%.*s\"", bundle_Entry_Response->lastModified.size, bundle_Entry_Response->lastModified.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&bundle_Entry_Response->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Resource(arena, bundle_Entry_Response->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement(Arena *arena, CapabilityStatement *capabilityStatement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement->id.size, capabilityStatement->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, capabilityStatement->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", capabilityStatement->implicitRules.size, capabilityStatement->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", capabilityStatement->language.size, capabilityStatement->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, capabilityStatement->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &capabilityStatement->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", capabilityStatement->url.size, capabilityStatement->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", capabilityStatement->version.size, capabilityStatement->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", capabilityStatement->name.size, capabilityStatement->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", capabilityStatement->title.size, capabilityStatement->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", capabilityStatement->status.size, capabilityStatement->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", capabilityStatement->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", capabilityStatement->date.size, capabilityStatement->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", capabilityStatement->publisher.size, capabilityStatement->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &capabilityStatement->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", capabilityStatement->description.size, capabilityStatement->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &capabilityStatement->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &capabilityStatement->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", capabilityStatement->purpose.size, capabilityStatement->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", capabilityStatement->copyright.size, capabilityStatement->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", capabilityStatement->kind.size, capabilityStatement->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->instantiates)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->instantiates_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiates\" : \"%.*s\"", &capabilityStatement->instantiates[i].size, &capabilityStatement->instantiates[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->imports)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->imports_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"imports\" : \"%.*s\"", &capabilityStatement->imports[i].size, &capabilityStatement->imports[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->software)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CapabilityStatement_Software(arena, capabilityStatement->software);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->implementation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CapabilityStatement_Implementation(arena, capabilityStatement->implementation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->fhirVersion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"fhirVersion\" : \"%.*s\"", capabilityStatement->fhirVersion.size, capabilityStatement->fhirVersion.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement->format)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->format_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"format\" : \"%.*s\"", &capabilityStatement->format[i].size, &capabilityStatement->format[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->patchFormat)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->patchFormat_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"patchFormat\" : \"%.*s\"", &capabilityStatement->patchFormat[i].size, &capabilityStatement->patchFormat[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->implementationGuide)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->implementationGuide_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"implementationGuide\" : \"%.*s\"", &capabilityStatement->implementationGuide[i].size, &capabilityStatement->implementationGuide[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->rest)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->rest_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest(arena, &capabilityStatement->rest[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->messaging)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->messaging_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Messaging(arena, &capabilityStatement->messaging[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement->document)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement->document_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Document(arena, &capabilityStatement->document[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Software(Arena *arena, CapabilityStatement_Software *capabilityStatement_Software)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Software->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Software->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Software->id.size, capabilityStatement_Software->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Software->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Software->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Software->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Software->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Software->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Software->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Software->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", capabilityStatement_Software->name.size, capabilityStatement_Software->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Software->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", capabilityStatement_Software->version.size, capabilityStatement_Software->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Software->releaseDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"releaseDate\" : \"%.*s\"", capabilityStatement_Software->releaseDate.size, capabilityStatement_Software->releaseDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Implementation(Arena *arena, CapabilityStatement_Implementation *capabilityStatement_Implementation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Implementation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Implementation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Implementation->id.size, capabilityStatement_Implementation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Implementation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Implementation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Implementation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Implementation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Implementation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Implementation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Implementation->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", capabilityStatement_Implementation->description.size, capabilityStatement_Implementation->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Implementation->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", capabilityStatement_Implementation->url.size, capabilityStatement_Implementation->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Implementation->custodian)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, capabilityStatement_Implementation->custodian);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Rest(Arena *arena, CapabilityStatement_Rest *capabilityStatement_Rest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Rest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Rest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Rest->id.size, capabilityStatement_Rest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", capabilityStatement_Rest->mode.size, capabilityStatement_Rest->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Rest->documentation.size, capabilityStatement_Rest->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest->security)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CapabilityStatement_Rest_Security(arena, capabilityStatement_Rest->security);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest->resource_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest_Resource(arena, &capabilityStatement_Rest->resource[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest->interaction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest->interaction_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest_Interaction(arena, &capabilityStatement_Rest->interaction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest->searchParam)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest->searchParam_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest_Resource_SearchParam(arena, &capabilityStatement_Rest->searchParam[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest->operation_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest_Resource_Operation(arena, &capabilityStatement_Rest->operation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest->compartment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest->compartment_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"compartment\" : \"%.*s\"", &capabilityStatement_Rest->compartment[i].size, &capabilityStatement_Rest->compartment[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Rest_Security(Arena *arena, CapabilityStatement_Rest_Security *capabilityStatement_Rest_Security)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Rest_Security->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Security->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Rest_Security->id.size, capabilityStatement_Rest_Security->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Security->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Security->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Security->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Security->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Security->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Security->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Security->cors)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"cors\" : \"%.*s\"", capabilityStatement_Rest_Security->cors ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Security->service)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Security->service_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &capabilityStatement_Rest_Security->service[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Security->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", capabilityStatement_Rest_Security->description.size, capabilityStatement_Rest_Security->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Rest_Resource(Arena *arena, CapabilityStatement_Rest_Resource *capabilityStatement_Rest_Resource)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Rest_Resource->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Rest_Resource->id.size, capabilityStatement_Rest_Resource->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", capabilityStatement_Rest_Resource->type.size, capabilityStatement_Rest_Resource->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", capabilityStatement_Rest_Resource->profile.size, capabilityStatement_Rest_Resource->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->supportedProfile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->supportedProfile_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"supportedProfile\" : \"%.*s\"", &capabilityStatement_Rest_Resource->supportedProfile[i].size, &capabilityStatement_Rest_Resource->supportedProfile[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Rest_Resource->documentation.size, capabilityStatement_Rest_Resource->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->interaction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->interaction_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest_Resource_Interaction(arena, &capabilityStatement_Rest_Resource->interaction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->versioning)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"versioning\" : \"%.*s\"", capabilityStatement_Rest_Resource->versioning.size, capabilityStatement_Rest_Resource->versioning.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->readHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"readHistory\" : \"%.*s\"", capabilityStatement_Rest_Resource->readHistory ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->updateCreate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"updateCreate\" : \"%.*s\"", capabilityStatement_Rest_Resource->updateCreate ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->conditionalCreate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"conditionalCreate\" : \"%.*s\"", capabilityStatement_Rest_Resource->conditionalCreate ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->conditionalRead)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"conditionalRead\" : \"%.*s\"", capabilityStatement_Rest_Resource->conditionalRead.size, capabilityStatement_Rest_Resource->conditionalRead.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->conditionalUpdate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"conditionalUpdate\" : \"%.*s\"", capabilityStatement_Rest_Resource->conditionalUpdate ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->conditionalDelete)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"conditionalDelete\" : \"%.*s\"", capabilityStatement_Rest_Resource->conditionalDelete.size, capabilityStatement_Rest_Resource->conditionalDelete.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->referencePolicy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->referencePolicy_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"referencePolicy\" : \"%.*s\"", &capabilityStatement_Rest_Resource->referencePolicy[i].size, &capabilityStatement_Rest_Resource->referencePolicy[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->searchInclude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->searchInclude_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"searchInclude\" : \"%.*s\"", &capabilityStatement_Rest_Resource->searchInclude[i].size, &capabilityStatement_Rest_Resource->searchInclude[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->searchRevInclude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->searchRevInclude_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"searchRevInclude\" : \"%.*s\"", &capabilityStatement_Rest_Resource->searchRevInclude[i].size, &capabilityStatement_Rest_Resource->searchRevInclude[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->searchParam)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->searchParam_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest_Resource_SearchParam(arena, &capabilityStatement_Rest_Resource->searchParam[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource->operation_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Rest_Resource_Operation(arena, &capabilityStatement_Rest_Resource->operation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Rest_Resource_Interaction(Arena *arena, CapabilityStatement_Rest_Resource_Interaction *capabilityStatement_Rest_Resource_Interaction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Rest_Resource_Interaction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Interaction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Rest_Resource_Interaction->id.size, capabilityStatement_Rest_Resource_Interaction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Interaction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource_Interaction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource_Interaction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Interaction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource_Interaction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource_Interaction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Interaction->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", capabilityStatement_Rest_Resource_Interaction->code.size, capabilityStatement_Rest_Resource_Interaction->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Interaction->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Rest_Resource_Interaction->documentation.size, capabilityStatement_Rest_Resource_Interaction->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Rest_Resource_SearchParam(Arena *arena, CapabilityStatement_Rest_Resource_SearchParam *capabilityStatement_Rest_Resource_SearchParam)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Rest_Resource_SearchParam->id.size, capabilityStatement_Rest_Resource_SearchParam->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource_SearchParam->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource_SearchParam->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource_SearchParam->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource_SearchParam->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", capabilityStatement_Rest_Resource_SearchParam->name.size, capabilityStatement_Rest_Resource_SearchParam->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", capabilityStatement_Rest_Resource_SearchParam->definition.size, capabilityStatement_Rest_Resource_SearchParam->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", capabilityStatement_Rest_Resource_SearchParam->type.size, capabilityStatement_Rest_Resource_SearchParam->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_SearchParam->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Rest_Resource_SearchParam->documentation.size, capabilityStatement_Rest_Resource_SearchParam->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Rest_Resource_Operation(Arena *arena, CapabilityStatement_Rest_Resource_Operation *capabilityStatement_Rest_Resource_Operation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Rest_Resource_Operation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Operation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Rest_Resource_Operation->id.size, capabilityStatement_Rest_Resource_Operation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Operation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource_Operation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource_Operation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Operation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Resource_Operation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Resource_Operation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Operation->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", capabilityStatement_Rest_Resource_Operation->name.size, capabilityStatement_Rest_Resource_Operation->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Operation->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", capabilityStatement_Rest_Resource_Operation->definition.size, capabilityStatement_Rest_Resource_Operation->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Resource_Operation->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Rest_Resource_Operation->documentation.size, capabilityStatement_Rest_Resource_Operation->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Rest_Interaction(Arena *arena, CapabilityStatement_Rest_Interaction *capabilityStatement_Rest_Interaction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Rest_Interaction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Interaction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Rest_Interaction->id.size, capabilityStatement_Rest_Interaction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Interaction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Interaction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Interaction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Interaction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Rest_Interaction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Rest_Interaction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Rest_Interaction->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", capabilityStatement_Rest_Interaction->code.size, capabilityStatement_Rest_Interaction->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Rest_Interaction->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Rest_Interaction->documentation.size, capabilityStatement_Rest_Interaction->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Messaging(Arena *arena, CapabilityStatement_Messaging *capabilityStatement_Messaging)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Messaging->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Messaging->id.size, capabilityStatement_Messaging->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Messaging->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Messaging->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Messaging->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging->endpoint_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Messaging_Endpoint(arena, &capabilityStatement_Messaging->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging->reliableCache)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"reliableCache\" : \"%d\"", capabilityStatement_Messaging->reliableCache);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Messaging->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Messaging->documentation.size, capabilityStatement_Messaging->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Messaging->supportedMessage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging->supportedMessage_count; i++)
		{
			String8 to_add = Serialize_CapabilityStatement_Messaging_SupportedMessage(arena, &capabilityStatement_Messaging->supportedMessage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Messaging_Endpoint(Arena *arena, CapabilityStatement_Messaging_Endpoint *capabilityStatement_Messaging_Endpoint)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Messaging_Endpoint->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging_Endpoint->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Messaging_Endpoint->id.size, capabilityStatement_Messaging_Endpoint->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Messaging_Endpoint->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging_Endpoint->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Messaging_Endpoint->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging_Endpoint->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging_Endpoint->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Messaging_Endpoint->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging_Endpoint->protocol)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, capabilityStatement_Messaging_Endpoint->protocol);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Messaging_Endpoint->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"address\" : \"%.*s\"", capabilityStatement_Messaging_Endpoint->address.size, capabilityStatement_Messaging_Endpoint->address.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Messaging_SupportedMessage(Arena *arena, CapabilityStatement_Messaging_SupportedMessage *capabilityStatement_Messaging_SupportedMessage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Messaging_SupportedMessage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging_SupportedMessage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Messaging_SupportedMessage->id.size, capabilityStatement_Messaging_SupportedMessage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Messaging_SupportedMessage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging_SupportedMessage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Messaging_SupportedMessage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging_SupportedMessage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Messaging_SupportedMessage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Messaging_SupportedMessage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Messaging_SupportedMessage->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", capabilityStatement_Messaging_SupportedMessage->mode.size, capabilityStatement_Messaging_SupportedMessage->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Messaging_SupportedMessage->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", capabilityStatement_Messaging_SupportedMessage->definition.size, capabilityStatement_Messaging_SupportedMessage->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CapabilityStatement_Document(Arena *arena, CapabilityStatement_Document *capabilityStatement_Document)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&capabilityStatement_Document->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&capabilityStatement_Document->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", capabilityStatement_Document->id.size, capabilityStatement_Document->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Document->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Document->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Document->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Document->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < capabilityStatement_Document->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &capabilityStatement_Document->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&capabilityStatement_Document->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", capabilityStatement_Document->mode.size, capabilityStatement_Document->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Document->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", capabilityStatement_Document->documentation.size, capabilityStatement_Document->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&capabilityStatement_Document->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", capabilityStatement_Document->profile.size, capabilityStatement_Document->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CarePlan(Arena *arena, CarePlan *carePlan)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&carePlan->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&carePlan->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", carePlan->id.size, carePlan->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, carePlan->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", carePlan->implicitRules.size, carePlan->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", carePlan->language.size, carePlan->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, carePlan->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &carePlan->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &carePlan->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &carePlan->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &carePlan->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &carePlan->instantiatesCanonical[i].size, &carePlan->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &carePlan->instantiatesUri[i].size, &carePlan->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->replaces)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->replaces_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->replaces[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", carePlan->status.size, carePlan->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", carePlan->intent.size, carePlan->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &carePlan->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", carePlan->title.size, carePlan->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", carePlan->description.size, carePlan->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, carePlan->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, carePlan->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, carePlan->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", carePlan->created.size, carePlan->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, carePlan->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan->contributor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->contributor_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->contributor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->careTeam)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->careTeam_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->careTeam[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->addresses)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->addresses_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->addresses[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->goal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->goal_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan->goal[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->activity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->activity_count; i++)
		{
			String8 to_add = Serialize_CarePlan_Activity(arena, &carePlan->activity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &carePlan->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CarePlan_Activity(Arena *arena, CarePlan_Activity *carePlan_Activity)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&carePlan_Activity->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&carePlan_Activity->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", carePlan_Activity->id.size, carePlan_Activity->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &carePlan_Activity->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &carePlan_Activity->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity->outcomeCodeableConcept)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity->outcomeCodeableConcept_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &carePlan_Activity->outcomeCodeableConcept[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity->outcomeReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity->outcomeReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan_Activity->outcomeReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity->progress)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity->progress_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &carePlan_Activity->progress[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, carePlan_Activity->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CarePlan_Activity_Detail(arena, carePlan_Activity->detail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CarePlan_Activity_Detail(Arena *arena, CarePlan_Activity_Detail *carePlan_Activity_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&carePlan_Activity_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", carePlan_Activity_Detail->id.size, carePlan_Activity_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &carePlan_Activity_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &carePlan_Activity_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", carePlan_Activity_Detail->kind.size, carePlan_Activity_Detail->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &carePlan_Activity_Detail->instantiatesCanonical[i].size, &carePlan_Activity_Detail->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &carePlan_Activity_Detail->instantiatesUri[i].size, &carePlan_Activity_Detail->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, carePlan_Activity_Detail->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &carePlan_Activity_Detail->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan_Activity_Detail->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->goal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->goal_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan_Activity_Detail->goal[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&carePlan_Activity_Detail->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", carePlan_Activity_Detail->status.size, carePlan_Activity_Detail->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, carePlan_Activity_Detail->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->doNotPerform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"doNotPerform\" : \"%.*s\"", carePlan_Activity_Detail->doNotPerform ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(carePlan_Activity_Detail->scheduled_type == CarePlan_Activity_Detail::ScheduledType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, carePlan_Activity_Detail->scheduled.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(carePlan_Activity_Detail->scheduled_type == CarePlan_Activity_Detail::ScheduledType::Period)	
	{
			String8 to_add = Serialize_Period(arena, carePlan_Activity_Detail->scheduled.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(carePlan_Activity_Detail->scheduled_type == CarePlan_Activity_Detail::ScheduledType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", carePlan_Activity_Detail->scheduled.valueString.size, carePlan_Activity_Detail->scheduled.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&carePlan_Activity_Detail->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, carePlan_Activity_Detail->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < carePlan_Activity_Detail->performer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &carePlan_Activity_Detail->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(carePlan_Activity_Detail->product_type == CarePlan_Activity_Detail::ProductType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, carePlan_Activity_Detail->product.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(carePlan_Activity_Detail->product_type == CarePlan_Activity_Detail::ProductType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, carePlan_Activity_Detail->product.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&carePlan_Activity_Detail->dailyAmount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, carePlan_Activity_Detail->dailyAmount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, carePlan_Activity_Detail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&carePlan_Activity_Detail->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", carePlan_Activity_Detail->description.size, carePlan_Activity_Detail->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CareTeam(Arena *arena, CareTeam *careTeam)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&careTeam->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&careTeam->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", careTeam->id.size, careTeam->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, careTeam->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", careTeam->implicitRules.size, careTeam->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", careTeam->language.size, careTeam->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, careTeam->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &careTeam->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &careTeam->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &careTeam->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &careTeam->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", careTeam->status.size, careTeam->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &careTeam->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", careTeam->name.size, careTeam->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, careTeam->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, careTeam->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, careTeam->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->participant_count; i++)
		{
			String8 to_add = Serialize_CareTeam_Participant(arena, &careTeam->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &careTeam->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &careTeam->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->managingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->managingOrganization_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &careTeam->managingOrganization[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &careTeam->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &careTeam->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CareTeam_Participant(Arena *arena, CareTeam_Participant *careTeam_Participant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&careTeam_Participant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&careTeam_Participant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", careTeam_Participant->id.size, careTeam_Participant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam_Participant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam_Participant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &careTeam_Participant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam_Participant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam_Participant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &careTeam_Participant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam_Participant->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < careTeam_Participant->role_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &careTeam_Participant->role[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&careTeam_Participant->member)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, careTeam_Participant->member);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam_Participant->onBehalfOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, careTeam_Participant->onBehalfOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&careTeam_Participant->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, careTeam_Participant->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CatalogEntry(Arena *arena, CatalogEntry *catalogEntry)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&catalogEntry->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&catalogEntry->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", catalogEntry->id.size, catalogEntry->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, catalogEntry->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", catalogEntry->implicitRules.size, catalogEntry->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", catalogEntry->language.size, catalogEntry->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, catalogEntry->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &catalogEntry->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &catalogEntry->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &catalogEntry->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &catalogEntry->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, catalogEntry->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->orderable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"orderable\" : \"%.*s\"", catalogEntry->orderable ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->referencedItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, catalogEntry->referencedItem);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->additionalIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->additionalIdentifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &catalogEntry->additionalIdentifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->classification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->classification_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &catalogEntry->classification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", catalogEntry->status.size, catalogEntry->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->validityPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, catalogEntry->validityPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->validTo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"validTo\" : \"%.*s\"", catalogEntry->validTo.size, catalogEntry->validTo.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->lastUpdated)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastUpdated\" : \"%.*s\"", catalogEntry->lastUpdated.size, catalogEntry->lastUpdated.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry->additionalCharacteristic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->additionalCharacteristic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &catalogEntry->additionalCharacteristic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->additionalClassification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->additionalClassification_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &catalogEntry->additionalClassification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry->relatedEntry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry->relatedEntry_count; i++)
		{
			String8 to_add = Serialize_CatalogEntry_RelatedEntry(arena, &catalogEntry->relatedEntry[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CatalogEntry_RelatedEntry(Arena *arena, CatalogEntry_RelatedEntry *catalogEntry_RelatedEntry)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&catalogEntry_RelatedEntry->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&catalogEntry_RelatedEntry->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", catalogEntry_RelatedEntry->id.size, catalogEntry_RelatedEntry->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry_RelatedEntry->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry_RelatedEntry->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &catalogEntry_RelatedEntry->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry_RelatedEntry->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < catalogEntry_RelatedEntry->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &catalogEntry_RelatedEntry->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&catalogEntry_RelatedEntry->relationtype)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"relationtype\" : \"%.*s\"", catalogEntry_RelatedEntry->relationtype.size, catalogEntry_RelatedEntry->relationtype.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&catalogEntry_RelatedEntry->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, catalogEntry_RelatedEntry->item);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ChargeItem(Arena *arena, ChargeItem *chargeItem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&chargeItem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&chargeItem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", chargeItem->id.size, chargeItem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, chargeItem->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", chargeItem->implicitRules.size, chargeItem->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", chargeItem->language.size, chargeItem->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, chargeItem->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &chargeItem->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &chargeItem->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->definitionUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->definitionUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"definitionUri\" : \"%.*s\"", &chargeItem->definitionUri[i].size, &chargeItem->definitionUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->definitionCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->definitionCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"definitionCanonical\" : \"%.*s\"", &chargeItem->definitionCanonical[i].size, &chargeItem->definitionCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", chargeItem->status.size, chargeItem->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &chargeItem->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, chargeItem->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, chargeItem->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, chargeItem->context);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(chargeItem->occurrence_type == ChargeItem::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", chargeItem->occurrence.valueDateTime.size, chargeItem->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(chargeItem->occurrence_type == ChargeItem::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, chargeItem->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(chargeItem->occurrence_type == ChargeItem::OccurrenceType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, chargeItem->occurrence.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&chargeItem->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->performer_count; i++)
		{
			String8 to_add = Serialize_ChargeItem_Performer(arena, &chargeItem->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->performingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, chargeItem->performingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->requestingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, chargeItem->requestingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->costCenter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, chargeItem->costCenter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, chargeItem->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->bodysite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->bodysite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &chargeItem->bodysite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->factorOverride)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factorOverride\" : \"%d\"", chargeItem->factorOverride);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->priceOverride)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, chargeItem->priceOverride);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->overrideReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"overrideReason\" : \"%.*s\"", chargeItem->overrideReason.size, chargeItem->overrideReason.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->enterer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, chargeItem->enterer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->enteredDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"enteredDate\" : \"%.*s\"", chargeItem->enteredDate.size, chargeItem->enteredDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->reason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &chargeItem->reason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->service)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->service_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &chargeItem->service[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(chargeItem->product_type == ChargeItem::ProductType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, chargeItem->product.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(chargeItem->product_type == ChargeItem::ProductType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, chargeItem->product.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&chargeItem->account)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->account_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &chargeItem->account[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &chargeItem->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem->supportingInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem->supportingInformation_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &chargeItem->supportingInformation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ChargeItem_Performer(Arena *arena, ChargeItem_Performer *chargeItem_Performer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&chargeItem_Performer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&chargeItem_Performer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", chargeItem_Performer->id.size, chargeItem_Performer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem_Performer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem_Performer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItem_Performer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem_Performer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItem_Performer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItem_Performer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItem_Performer->function_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, chargeItem_Performer->function_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItem_Performer->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, chargeItem_Performer->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ChargeItemDefinition(Arena *arena, ChargeItemDefinition *chargeItemDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&chargeItemDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&chargeItemDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", chargeItemDefinition->id.size, chargeItemDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, chargeItemDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", chargeItemDefinition->implicitRules.size, chargeItemDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", chargeItemDefinition->language.size, chargeItemDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, chargeItemDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &chargeItemDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", chargeItemDefinition->url.size, chargeItemDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &chargeItemDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", chargeItemDefinition->version.size, chargeItemDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", chargeItemDefinition->title.size, chargeItemDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->derivedFromUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->derivedFromUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"derivedFromUri\" : \"%.*s\"", &chargeItemDefinition->derivedFromUri[i].size, &chargeItemDefinition->derivedFromUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->partOf_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"partOf\" : \"%.*s\"", &chargeItemDefinition->partOf[i].size, &chargeItemDefinition->partOf[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->replaces)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->replaces_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"replaces\" : \"%.*s\"", &chargeItemDefinition->replaces[i].size, &chargeItemDefinition->replaces[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", chargeItemDefinition->status.size, chargeItemDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", chargeItemDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", chargeItemDefinition->date.size, chargeItemDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", chargeItemDefinition->publisher.size, chargeItemDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &chargeItemDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", chargeItemDefinition->description.size, chargeItemDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &chargeItemDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &chargeItemDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", chargeItemDefinition->copyright.size, chargeItemDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", chargeItemDefinition->approvalDate.size, chargeItemDefinition->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", chargeItemDefinition->lastReviewDate.size, chargeItemDefinition->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, chargeItemDefinition->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, chargeItemDefinition->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition->instance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->instance_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &chargeItemDefinition->instance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->applicability)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->applicability_count; i++)
		{
			String8 to_add = Serialize_ChargeItemDefinition_Applicability(arena, &chargeItemDefinition->applicability[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition->propertyGroup)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition->propertyGroup_count; i++)
		{
			String8 to_add = Serialize_ChargeItemDefinition_PropertyGroup(arena, &chargeItemDefinition->propertyGroup[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ChargeItemDefinition_Applicability(Arena *arena, ChargeItemDefinition_Applicability *chargeItemDefinition_Applicability)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&chargeItemDefinition_Applicability->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&chargeItemDefinition_Applicability->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", chargeItemDefinition_Applicability->id.size, chargeItemDefinition_Applicability->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_Applicability->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_Applicability->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition_Applicability->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition_Applicability->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_Applicability->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition_Applicability->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition_Applicability->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", chargeItemDefinition_Applicability->description.size, chargeItemDefinition_Applicability->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_Applicability->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", chargeItemDefinition_Applicability->language.size, chargeItemDefinition_Applicability->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_Applicability->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", chargeItemDefinition_Applicability->expression.size, chargeItemDefinition_Applicability->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ChargeItemDefinition_PropertyGroup(Arena *arena, ChargeItemDefinition_PropertyGroup *chargeItemDefinition_PropertyGroup)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&chargeItemDefinition_PropertyGroup->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", chargeItemDefinition_PropertyGroup->id.size, chargeItemDefinition_PropertyGroup->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_PropertyGroup->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition_PropertyGroup->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_PropertyGroup->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition_PropertyGroup->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup->applicability)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_PropertyGroup->applicability_count; i++)
		{
			String8 to_add = Serialize_ChargeItemDefinition_Applicability(arena, &chargeItemDefinition_PropertyGroup->applicability[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup->priceComponent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_PropertyGroup->priceComponent_count; i++)
		{
			String8 to_add = Serialize_ChargeItemDefinition_PropertyGroup_PriceComponent(arena, &chargeItemDefinition_PropertyGroup->priceComponent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ChargeItemDefinition_PropertyGroup_PriceComponent(Arena *arena, ChargeItemDefinition_PropertyGroup_PriceComponent *chargeItemDefinition_PropertyGroup_PriceComponent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", chargeItemDefinition_PropertyGroup_PriceComponent->id.size, chargeItemDefinition_PropertyGroup_PriceComponent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_PropertyGroup_PriceComponent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition_PropertyGroup_PriceComponent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < chargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &chargeItemDefinition_PropertyGroup_PriceComponent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", chargeItemDefinition_PropertyGroup_PriceComponent->type.size, chargeItemDefinition_PropertyGroup_PriceComponent->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, chargeItemDefinition_PropertyGroup_PriceComponent->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", chargeItemDefinition_PropertyGroup_PriceComponent->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&chargeItemDefinition_PropertyGroup_PriceComponent->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, chargeItemDefinition_PropertyGroup_PriceComponent->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim(Arena *arena, Claim *claim)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim->id.size, claim->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, claim->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", claim->implicitRules.size, claim->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", claim->language.size, claim->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, claim->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &claim->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &claim->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", claim->status.size, claim->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->subType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim->subType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", claim->use.size, claim->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->billablePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, claim->billablePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", claim->created.size, claim->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->enterer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->enterer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->insurer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->insurer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->fundsReserve)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim->fundsReserve);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->related)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->related_count; i++)
		{
			String8 to_add = Serialize_Claim_Related(arena, &claim->related[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->prescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->prescription);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->originalPrescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->originalPrescription);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->payee)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Claim_Payee(arena, claim->payee);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->referral)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->referral);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->facility)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim->facility);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->careTeam)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->careTeam_count; i++)
		{
			String8 to_add = Serialize_Claim_CareTeam(arena, &claim->careTeam[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_Claim_SupportingInfo(arena, &claim->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->diagnosis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->diagnosis_count; i++)
		{
			String8 to_add = Serialize_Claim_Diagnosis(arena, &claim->diagnosis[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->procedure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->procedure_count; i++)
		{
			String8 to_add = Serialize_Claim_Procedure(arena, &claim->procedure[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->insurance_count; i++)
		{
			String8 to_add = Serialize_Claim_Insurance(arena, &claim->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->accident)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Claim_Accident(arena, claim->accident);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim->item_count; i++)
		{
			String8 to_add = Serialize_Claim_Item(arena, &claim->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim->total)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claim->total);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Related(Arena *arena, Claim_Related *claim_Related)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Related->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Related->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Related->id.size, claim_Related->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Related->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Related->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Related->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Related->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Related->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Related->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Related->claim)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim_Related->claim);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Related->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Related->relationship);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Related->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, claim_Related->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Payee(Arena *arena, Claim_Payee *claim_Payee)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Payee->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Payee->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Payee->id.size, claim_Payee->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Payee->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Payee->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Payee->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Payee->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Payee->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Payee->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Payee->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Payee->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Payee->party)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim_Payee->party);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_CareTeam(Arena *arena, Claim_CareTeam *claim_CareTeam)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_CareTeam->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_CareTeam->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_CareTeam->id.size, claim_CareTeam->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_CareTeam->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_CareTeam->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_CareTeam->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_CareTeam->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_CareTeam->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_CareTeam->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_CareTeam->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_CareTeam->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_CareTeam->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim_CareTeam->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_CareTeam->responsible)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"responsible\" : \"%.*s\"", claim_CareTeam->responsible ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_CareTeam->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_CareTeam->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_CareTeam->qualification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_CareTeam->qualification);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_SupportingInfo(Arena *arena, Claim_SupportingInfo *claim_SupportingInfo)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_SupportingInfo->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_SupportingInfo->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_SupportingInfo->id.size, claim_SupportingInfo->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_SupportingInfo->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_SupportingInfo->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_SupportingInfo->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_SupportingInfo->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_SupportingInfo->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_SupportingInfo->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_SupportingInfo->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_SupportingInfo->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_SupportingInfo->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_SupportingInfo->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_SupportingInfo->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_SupportingInfo->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claim_SupportingInfo->timing_type == Claim_SupportingInfo::TimingType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", claim_SupportingInfo->timing.valueDate.size, claim_SupportingInfo->timing.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_SupportingInfo->timing_type == Claim_SupportingInfo::TimingType::Period)	
	{
			String8 to_add = Serialize_Period(arena, claim_SupportingInfo->timing.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claim_SupportingInfo->value_type == Claim_SupportingInfo::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", claim_SupportingInfo->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_SupportingInfo->value_type == Claim_SupportingInfo::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", claim_SupportingInfo->value.valueString.size, claim_SupportingInfo->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_SupportingInfo->value_type == Claim_SupportingInfo::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, claim_SupportingInfo->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_SupportingInfo->value_type == Claim_SupportingInfo::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, claim_SupportingInfo->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_SupportingInfo->value_type == Claim_SupportingInfo::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, claim_SupportingInfo->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&claim_SupportingInfo->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_SupportingInfo->reason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Diagnosis(Arena *arena, Claim_Diagnosis *claim_Diagnosis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Diagnosis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Diagnosis->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Diagnosis->id.size, claim_Diagnosis->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Diagnosis->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Diagnosis->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Diagnosis->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Diagnosis->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Diagnosis->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Diagnosis->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Diagnosis->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_Diagnosis->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claim_Diagnosis->diagnosis_type == Claim_Diagnosis::DiagnosisType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, claim_Diagnosis->diagnosis.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_Diagnosis->diagnosis_type == Claim_Diagnosis::DiagnosisType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, claim_Diagnosis->diagnosis.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&claim_Diagnosis->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Diagnosis->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Diagnosis->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Diagnosis->onAdmission)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Diagnosis->onAdmission);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Diagnosis->packageCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Diagnosis->packageCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Procedure(Arena *arena, Claim_Procedure *claim_Procedure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Procedure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Procedure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Procedure->id.size, claim_Procedure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Procedure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Procedure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Procedure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Procedure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Procedure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Procedure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Procedure->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_Procedure->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Procedure->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Procedure->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Procedure->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Procedure->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", claim_Procedure->date.size, claim_Procedure->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claim_Procedure->procedure_type == Claim_Procedure::ProcedureType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, claim_Procedure->procedure.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_Procedure->procedure_type == Claim_Procedure::ProcedureType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, claim_Procedure->procedure.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&claim_Procedure->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Procedure->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &claim_Procedure->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Insurance(Arena *arena, Claim_Insurance *claim_Insurance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Insurance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Insurance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Insurance->id.size, claim_Insurance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Insurance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Insurance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Insurance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Insurance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Insurance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Insurance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Insurance->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_Insurance->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Insurance->focal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"focal\" : \"%.*s\"", claim_Insurance->focal ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Insurance->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, claim_Insurance->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Insurance->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim_Insurance->coverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Insurance->businessArrangement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"businessArrangement\" : \"%.*s\"", claim_Insurance->businessArrangement.size, claim_Insurance->businessArrangement.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Insurance->preAuthRef)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Insurance->preAuthRef_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"preAuthRef\" : \"%.*s\"", &claim_Insurance->preAuthRef[i].size, &claim_Insurance->preAuthRef[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Insurance->claimResponse)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claim_Insurance->claimResponse);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Accident(Arena *arena, Claim_Accident *claim_Accident)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Accident->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Accident->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Accident->id.size, claim_Accident->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Accident->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Accident->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Accident->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Accident->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Accident->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Accident->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Accident->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", claim_Accident->date.size, claim_Accident->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Accident->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Accident->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claim_Accident->location_type == Claim_Accident::LocationType::Address)	
	{
			String8 to_add = Serialize_Address(arena, claim_Accident->location.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_Accident->location_type == Claim_Accident::LocationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, claim_Accident->location.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Item(Arena *arena, Claim_Item *claim_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Item->id.size, claim_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_Item->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->careTeamSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->careTeamSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"careTeamSequence\" : \"%d\"", &claim_Item->careTeamSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->diagnosisSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->diagnosisSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"diagnosisSequence\" : \"%d\"", &claim_Item->diagnosisSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->procedureSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->procedureSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"procedureSequence\" : \"%d\"", &claim_Item->procedureSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->informationSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->informationSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"informationSequence\" : \"%d\"", &claim_Item->informationSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->revenue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item->revenue);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Item->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Item->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claim_Item->serviced_type == Claim_Item::ServicedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", claim_Item->serviced.valueDate.size, claim_Item->serviced.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_Item->serviced_type == Claim_Item::ServicedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, claim_Item->serviced.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claim_Item->location_type == Claim_Item::LocationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item->location.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_Item->location_type == Claim_Item::LocationType::Address)	
	{
			String8 to_add = Serialize_Address(arena, claim_Item->location.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claim_Item->location_type == Claim_Item::LocationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, claim_Item->location.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&claim_Item->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, claim_Item->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claim_Item->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", claim_Item->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claim_Item->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &claim_Item->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item->subSite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->subSite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Item->subSite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->encounter_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &claim_Item->encounter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item->detail_count; i++)
		{
			String8 to_add = Serialize_Claim_Item_Detail(arena, &claim_Item->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Item_Detail(Arena *arena, Claim_Item_Detail *claim_Item_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Item_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Item_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Item_Detail->id.size, claim_Item_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Item_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Item_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_Item_Detail->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->revenue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item_Detail->revenue);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item_Detail->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item_Detail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Item_Detail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Item_Detail->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, claim_Item_Detail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claim_Item_Detail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", claim_Item_Detail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claim_Item_Detail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &claim_Item_Detail->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail->subDetail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail->subDetail_count; i++)
		{
			String8 to_add = Serialize_Claim_Item_Detail_SubDetail(arena, &claim_Item_Detail->subDetail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Claim_Item_Detail_SubDetail(Arena *arena, Claim_Item_Detail_SubDetail *claim_Item_Detail_SubDetail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claim_Item_Detail_SubDetail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claim_Item_Detail_SubDetail->id.size, claim_Item_Detail_SubDetail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail_SubDetail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Item_Detail_SubDetail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail_SubDetail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claim_Item_Detail_SubDetail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claim_Item_Detail_SubDetail->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->revenue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item_Detail_SubDetail->revenue);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item_Detail_SubDetail->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claim_Item_Detail_SubDetail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail_SubDetail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Item_Detail_SubDetail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail_SubDetail->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claim_Item_Detail_SubDetail->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, claim_Item_Detail_SubDetail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claim_Item_Detail_SubDetail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", claim_Item_Detail_SubDetail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claim_Item_Detail_SubDetail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claim_Item_Detail_SubDetail->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claim_Item_Detail_SubDetail->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &claim_Item_Detail_SubDetail->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse(Arena *arena, ClaimResponse *claimResponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse->id.size, claimResponse->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, claimResponse->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", claimResponse->implicitRules.size, claimResponse->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", claimResponse->language.size, claimResponse->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, claimResponse->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &claimResponse->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &claimResponse->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", claimResponse->status.size, claimResponse->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->subType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse->subType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", claimResponse->use.size, claimResponse->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claimResponse->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", claimResponse->created.size, claimResponse->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->insurer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claimResponse->insurer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->requestor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claimResponse->requestor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claimResponse->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outcome\" : \"%.*s\"", claimResponse->outcome.size, claimResponse->outcome.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->disposition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"disposition\" : \"%.*s\"", claimResponse->disposition.size, claimResponse->disposition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->preAuthRef)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preAuthRef\" : \"%.*s\"", claimResponse->preAuthRef.size, claimResponse->preAuthRef.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->preAuthPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, claimResponse->preAuthPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->payeeType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse->payeeType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->item_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item(arena, &claimResponse->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->addItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->addItem_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_AddItem(arena, &claimResponse->addItem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->adjudication_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Adjudication(arena, &claimResponse->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->total)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->total_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Total(arena, &claimResponse->total[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->payment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ClaimResponse_Payment(arena, claimResponse->payment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->fundsReserve)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse->fundsReserve);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->formCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse->formCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->form)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, claimResponse->form);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse->processNote)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->processNote_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_ProcessNote(arena, &claimResponse->processNote[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->communicationRequest)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->communicationRequest_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &claimResponse->communicationRequest[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->insurance_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Insurance(arena, &claimResponse->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse->error)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse->error_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Error(arena, &claimResponse->error[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Item(Arena *arena, ClaimResponse_Item *claimResponse_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Item->id.size, claimResponse_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item->itemSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"itemSequence\" : \"%d\"", claimResponse_Item->itemSequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &claimResponse_Item->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item->adjudication_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Adjudication(arena, &claimResponse_Item->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item->detail_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Detail(arena, &claimResponse_Item->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Item_Adjudication(Arena *arena, ClaimResponse_Item_Adjudication *claimResponse_Item_Adjudication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Item_Adjudication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Item_Adjudication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Item_Adjudication->id.size, claimResponse_Item_Adjudication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Adjudication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Adjudication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item_Adjudication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Adjudication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Adjudication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item_Adjudication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Adjudication->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_Item_Adjudication->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Adjudication->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_Item_Adjudication->reason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Adjudication->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_Item_Adjudication->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Adjudication->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", claimResponse_Item_Adjudication->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Item_Detail(Arena *arena, ClaimResponse_Item_Detail *claimResponse_Item_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Item_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Item_Detail->id.size, claimResponse_Item_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail->detailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"detailSequence\" : \"%d\"", claimResponse_Item_Detail->detailSequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Detail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &claimResponse_Item_Detail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Adjudication(arena, &claimResponse_Item_Detail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail->subDetail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail->subDetail_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Detail_SubDetail(arena, &claimResponse_Item_Detail->subDetail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Item_Detail_SubDetail(Arena *arena, ClaimResponse_Item_Detail_SubDetail *claimResponse_Item_Detail_SubDetail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Item_Detail_SubDetail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail_SubDetail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Item_Detail_SubDetail->id.size, claimResponse_Item_Detail_SubDetail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Detail_SubDetail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail_SubDetail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item_Detail_SubDetail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail_SubDetail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail_SubDetail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Item_Detail_SubDetail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail_SubDetail->subDetailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subDetailSequence\" : \"%d\"", claimResponse_Item_Detail_SubDetail->subDetailSequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Item_Detail_SubDetail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail_SubDetail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &claimResponse_Item_Detail_SubDetail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Item_Detail_SubDetail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Item_Detail_SubDetail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Adjudication(arena, &claimResponse_Item_Detail_SubDetail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_AddItem(Arena *arena, ClaimResponse_AddItem *claimResponse_AddItem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_AddItem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_AddItem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_AddItem->id.size, claimResponse_AddItem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_AddItem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_AddItem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->itemSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->itemSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"itemSequence\" : \"%d\"", &claimResponse_AddItem->itemSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->detailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->detailSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"detailSequence\" : \"%d\"", &claimResponse_AddItem->detailSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->subdetailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->subdetailSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"subdetailSequence\" : \"%d\"", &claimResponse_AddItem->subdetailSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->provider_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &claimResponse_AddItem->provider[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_AddItem->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claimResponse_AddItem->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claimResponse_AddItem->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claimResponse_AddItem->serviced_type == ClaimResponse_AddItem::ServicedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", claimResponse_AddItem->serviced.valueDate.size, claimResponse_AddItem->serviced.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claimResponse_AddItem->serviced_type == ClaimResponse_AddItem::ServicedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, claimResponse_AddItem->serviced.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(claimResponse_AddItem->location_type == ClaimResponse_AddItem::LocationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_AddItem->location.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claimResponse_AddItem->location_type == ClaimResponse_AddItem::LocationType::Address)	
	{
			String8 to_add = Serialize_Address(arena, claimResponse_AddItem->location.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(claimResponse_AddItem->location_type == ClaimResponse_AddItem::LocationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, claimResponse_AddItem->location.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&claimResponse_AddItem->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, claimResponse_AddItem->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_AddItem->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", claimResponse_AddItem->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_AddItem->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_AddItem->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem->subSite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->subSite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claimResponse_AddItem->subSite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &claimResponse_AddItem->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->adjudication_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Adjudication(arena, &claimResponse_AddItem->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem->detail_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_AddItem_Detail(arena, &claimResponse_AddItem->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_AddItem_Detail(Arena *arena, ClaimResponse_AddItem_Detail *claimResponse_AddItem_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_AddItem_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_AddItem_Detail->id.size, claimResponse_AddItem_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_AddItem_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_AddItem_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_AddItem_Detail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claimResponse_AddItem_Detail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, claimResponse_AddItem_Detail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_AddItem_Detail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", claimResponse_AddItem_Detail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_AddItem_Detail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &claimResponse_AddItem_Detail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Adjudication(arena, &claimResponse_AddItem_Detail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail->subDetail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail->subDetail_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_AddItem_Detail_SubDetail(arena, &claimResponse_AddItem_Detail->subDetail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_AddItem_Detail_SubDetail(Arena *arena, ClaimResponse_AddItem_Detail_SubDetail *claimResponse_AddItem_Detail_SubDetail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_AddItem_Detail_SubDetail->id.size, claimResponse_AddItem_Detail_SubDetail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail_SubDetail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_AddItem_Detail_SubDetail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail_SubDetail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_AddItem_Detail_SubDetail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_AddItem_Detail_SubDetail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail_SubDetail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &claimResponse_AddItem_Detail_SubDetail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, claimResponse_AddItem_Detail_SubDetail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_AddItem_Detail_SubDetail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", claimResponse_AddItem_Detail_SubDetail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_AddItem_Detail_SubDetail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail_SubDetail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &claimResponse_AddItem_Detail_SubDetail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_AddItem_Detail_SubDetail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_AddItem_Detail_SubDetail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ClaimResponse_Item_Adjudication(arena, &claimResponse_AddItem_Detail_SubDetail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Total(Arena *arena, ClaimResponse_Total *claimResponse_Total)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Total->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Total->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Total->id.size, claimResponse_Total->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Total->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Total->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Total->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Total->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Total->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Total->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Total->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_Total->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Total->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_Total->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Payment(Arena *arena, ClaimResponse_Payment *claimResponse_Payment)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Payment->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Payment->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Payment->id.size, claimResponse_Payment->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Payment->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Payment->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Payment->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Payment->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Payment->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Payment->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Payment->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_Payment->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Payment->adjustment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_Payment->adjustment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Payment->adjustmentReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_Payment->adjustmentReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Payment->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", claimResponse_Payment->date.size, claimResponse_Payment->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Payment->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, claimResponse_Payment->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Payment->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, claimResponse_Payment->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_ProcessNote(Arena *arena, ClaimResponse_ProcessNote *claimResponse_ProcessNote)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_ProcessNote->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_ProcessNote->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_ProcessNote->id.size, claimResponse_ProcessNote->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_ProcessNote->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_ProcessNote->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_ProcessNote->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_ProcessNote->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_ProcessNote->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_ProcessNote->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_ProcessNote->number)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"number\" : \"%d\"", claimResponse_ProcessNote->number);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_ProcessNote->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", claimResponse_ProcessNote->type.size, claimResponse_ProcessNote->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_ProcessNote->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", claimResponse_ProcessNote->text.size, claimResponse_ProcessNote->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_ProcessNote->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_ProcessNote->language);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Insurance(Arena *arena, ClaimResponse_Insurance *claimResponse_Insurance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Insurance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Insurance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Insurance->id.size, claimResponse_Insurance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Insurance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Insurance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Insurance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Insurance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Insurance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Insurance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Insurance->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", claimResponse_Insurance->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Insurance->focal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"focal\" : \"%.*s\"", claimResponse_Insurance->focal ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Insurance->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claimResponse_Insurance->coverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Insurance->businessArrangement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"businessArrangement\" : \"%.*s\"", claimResponse_Insurance->businessArrangement.size, claimResponse_Insurance->businessArrangement.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Insurance->claimResponse)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, claimResponse_Insurance->claimResponse);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClaimResponse_Error(Arena *arena, ClaimResponse_Error *claimResponse_Error)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&claimResponse_Error->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&claimResponse_Error->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", claimResponse_Error->id.size, claimResponse_Error->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Error->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Error->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Error->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Error->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < claimResponse_Error->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &claimResponse_Error->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&claimResponse_Error->itemSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"itemSequence\" : \"%d\"", claimResponse_Error->itemSequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Error->detailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"detailSequence\" : \"%d\"", claimResponse_Error->detailSequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Error->subDetailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subDetailSequence\" : \"%d\"", claimResponse_Error->subDetailSequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&claimResponse_Error->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, claimResponse_Error->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClinicalImpression(Arena *arena, ClinicalImpression *clinicalImpression)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&clinicalImpression->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&clinicalImpression->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", clinicalImpression->id.size, clinicalImpression->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, clinicalImpression->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", clinicalImpression->implicitRules.size, clinicalImpression->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", clinicalImpression->language.size, clinicalImpression->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, clinicalImpression->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &clinicalImpression->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &clinicalImpression->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &clinicalImpression->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &clinicalImpression->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", clinicalImpression->status.size, clinicalImpression->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, clinicalImpression->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, clinicalImpression->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", clinicalImpression->description.size, clinicalImpression->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, clinicalImpression->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, clinicalImpression->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(clinicalImpression->effective_type == ClinicalImpression::EffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", clinicalImpression->effective.valueDateTime.size, clinicalImpression->effective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(clinicalImpression->effective_type == ClinicalImpression::EffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, clinicalImpression->effective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&clinicalImpression->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", clinicalImpression->date.size, clinicalImpression->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->assessor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, clinicalImpression->assessor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->previous)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, clinicalImpression->previous);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->problem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->problem_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &clinicalImpression->problem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->investigation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->investigation_count; i++)
		{
			String8 to_add = Serialize_ClinicalImpression_Investigation(arena, &clinicalImpression->investigation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->protocol)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->protocol_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"protocol\" : \"%.*s\"", &clinicalImpression->protocol[i].size, &clinicalImpression->protocol[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->summary)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"summary\" : \"%.*s\"", clinicalImpression->summary.size, clinicalImpression->summary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression->finding)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->finding_count; i++)
		{
			String8 to_add = Serialize_ClinicalImpression_Finding(arena, &clinicalImpression->finding[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->prognosisCodeableConcept)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->prognosisCodeableConcept_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &clinicalImpression->prognosisCodeableConcept[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->prognosisReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->prognosisReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &clinicalImpression->prognosisReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &clinicalImpression->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &clinicalImpression->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClinicalImpression_Investigation(Arena *arena, ClinicalImpression_Investigation *clinicalImpression_Investigation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&clinicalImpression_Investigation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&clinicalImpression_Investigation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", clinicalImpression_Investigation->id.size, clinicalImpression_Investigation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression_Investigation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression_Investigation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &clinicalImpression_Investigation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression_Investigation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression_Investigation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &clinicalImpression_Investigation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression_Investigation->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, clinicalImpression_Investigation->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression_Investigation->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression_Investigation->item_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &clinicalImpression_Investigation->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ClinicalImpression_Finding(Arena *arena, ClinicalImpression_Finding *clinicalImpression_Finding)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&clinicalImpression_Finding->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&clinicalImpression_Finding->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", clinicalImpression_Finding->id.size, clinicalImpression_Finding->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression_Finding->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression_Finding->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &clinicalImpression_Finding->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression_Finding->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < clinicalImpression_Finding->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &clinicalImpression_Finding->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&clinicalImpression_Finding->itemCodeableConcept)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, clinicalImpression_Finding->itemCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression_Finding->itemReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, clinicalImpression_Finding->itemReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&clinicalImpression_Finding->basis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"basis\" : \"%.*s\"", clinicalImpression_Finding->basis.size, clinicalImpression_Finding->basis.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CodeSystem(Arena *arena, CodeSystem *codeSystem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&codeSystem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&codeSystem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", codeSystem->id.size, codeSystem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, codeSystem->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", codeSystem->implicitRules.size, codeSystem->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", codeSystem->language.size, codeSystem->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, codeSystem->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &codeSystem->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", codeSystem->url.size, codeSystem->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &codeSystem->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", codeSystem->version.size, codeSystem->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", codeSystem->name.size, codeSystem->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", codeSystem->title.size, codeSystem->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", codeSystem->status.size, codeSystem->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", codeSystem->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", codeSystem->date.size, codeSystem->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", codeSystem->publisher.size, codeSystem->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &codeSystem->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", codeSystem->description.size, codeSystem->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &codeSystem->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &codeSystem->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", codeSystem->purpose.size, codeSystem->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", codeSystem->copyright.size, codeSystem->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->caseSensitive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"caseSensitive\" : \"%.*s\"", codeSystem->caseSensitive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->valueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"valueSet\" : \"%.*s\"", codeSystem->valueSet.size, codeSystem->valueSet.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->hierarchyMeaning)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"hierarchyMeaning\" : \"%.*s\"", codeSystem->hierarchyMeaning.size, codeSystem->hierarchyMeaning.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->compositional)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"compositional\" : \"%.*s\"", codeSystem->compositional ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->versionNeeded)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"versionNeeded\" : \"%.*s\"", codeSystem->versionNeeded ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->content)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"content\" : \"%.*s\"", codeSystem->content.size, codeSystem->content.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->supplements)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"supplements\" : \"%.*s\"", codeSystem->supplements.size, codeSystem->supplements.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->count)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"count\" : \"%d\"", codeSystem->count);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem->filter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->filter_count; i++)
		{
			String8 to_add = Serialize_CodeSystem_Filter(arena, &codeSystem->filter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->property_count; i++)
		{
			String8 to_add = Serialize_CodeSystem_Property(arena, &codeSystem->property[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem->concept)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem->concept_count; i++)
		{
			String8 to_add = Serialize_CodeSystem_Concept(arena, &codeSystem->concept[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CodeSystem_Filter(Arena *arena, CodeSystem_Filter *codeSystem_Filter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&codeSystem_Filter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&codeSystem_Filter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", codeSystem_Filter->id.size, codeSystem_Filter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Filter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Filter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Filter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Filter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Filter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Filter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Filter->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", codeSystem_Filter->code.size, codeSystem_Filter->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Filter->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", codeSystem_Filter->description.size, codeSystem_Filter->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Filter->operator_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Filter->operator__count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"operator_\" : \"%.*s\"", &codeSystem_Filter->operator_[i].size, &codeSystem_Filter->operator_[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Filter->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", codeSystem_Filter->value.size, codeSystem_Filter->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CodeSystem_Property(Arena *arena, CodeSystem_Property *codeSystem_Property)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&codeSystem_Property->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&codeSystem_Property->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", codeSystem_Property->id.size, codeSystem_Property->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Property->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Property->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Property->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Property->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Property->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Property->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Property->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", codeSystem_Property->code.size, codeSystem_Property->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Property->uri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uri\" : \"%.*s\"", codeSystem_Property->uri.size, codeSystem_Property->uri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Property->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", codeSystem_Property->description.size, codeSystem_Property->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Property->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", codeSystem_Property->type.size, codeSystem_Property->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CodeSystem_Concept(Arena *arena, CodeSystem_Concept *codeSystem_Concept)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&codeSystem_Concept->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&codeSystem_Concept->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", codeSystem_Concept->id.size, codeSystem_Concept->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Concept->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Concept->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", codeSystem_Concept->code.size, codeSystem_Concept->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", codeSystem_Concept->display.size, codeSystem_Concept->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", codeSystem_Concept->definition.size, codeSystem_Concept->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept->designation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept->designation_count; i++)
		{
			String8 to_add = Serialize_CodeSystem_Concept_Designation(arena, &codeSystem_Concept->designation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept->property_count; i++)
		{
			String8 to_add = Serialize_CodeSystem_Concept_Property(arena, &codeSystem_Concept->property[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept->concept)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept->concept_count; i++)
		{
			String8 to_add = Serialize_CodeSystem_Concept(arena, &codeSystem_Concept->concept[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CodeSystem_Concept_Designation(Arena *arena, CodeSystem_Concept_Designation *codeSystem_Concept_Designation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&codeSystem_Concept_Designation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&codeSystem_Concept_Designation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", codeSystem_Concept_Designation->id.size, codeSystem_Concept_Designation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept_Designation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept_Designation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Concept_Designation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept_Designation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept_Designation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Concept_Designation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept_Designation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", codeSystem_Concept_Designation->language.size, codeSystem_Concept_Designation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept_Designation->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, codeSystem_Concept_Designation->use);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept_Designation->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", codeSystem_Concept_Designation->value.size, codeSystem_Concept_Designation->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CodeSystem_Concept_Property(Arena *arena, CodeSystem_Concept_Property *codeSystem_Concept_Property)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&codeSystem_Concept_Property->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&codeSystem_Concept_Property->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", codeSystem_Concept_Property->id.size, codeSystem_Concept_Property->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeSystem_Concept_Property->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept_Property->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Concept_Property->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept_Property->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeSystem_Concept_Property->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeSystem_Concept_Property->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeSystem_Concept_Property->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", codeSystem_Concept_Property->code.size, codeSystem_Concept_Property->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(codeSystem_Concept_Property->value_type == CodeSystem_Concept_Property::ValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", codeSystem_Concept_Property->value.valueCode.size, codeSystem_Concept_Property->value.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(codeSystem_Concept_Property->value_type == CodeSystem_Concept_Property::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, codeSystem_Concept_Property->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(codeSystem_Concept_Property->value_type == CodeSystem_Concept_Property::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", codeSystem_Concept_Property->value.valueString.size, codeSystem_Concept_Property->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(codeSystem_Concept_Property->value_type == CodeSystem_Concept_Property::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, codeSystem_Concept_Property->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(codeSystem_Concept_Property->value_type == CodeSystem_Concept_Property::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", codeSystem_Concept_Property->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(codeSystem_Concept_Property->value_type == CodeSystem_Concept_Property::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", codeSystem_Concept_Property->value.valueDateTime.size, codeSystem_Concept_Property->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(codeSystem_Concept_Property->value_type == CodeSystem_Concept_Property::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", codeSystem_Concept_Property->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Communication(Arena *arena, Communication *communication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&communication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&communication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", communication->id.size, communication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, communication->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", communication->implicitRules.size, communication->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", communication->language.size, communication->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, communication->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &communication->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &communication->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &communication->instantiatesCanonical[i].size, &communication->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &communication->instantiatesUri[i].size, &communication->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communication->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communication->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->inResponseTo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->inResponseTo_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communication->inResponseTo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", communication->status.size, communication->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, communication->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &communication->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", communication->priority.size, communication->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->medium)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->medium_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &communication->medium[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, communication->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, communication->topic);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->about)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->about_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communication->about[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, communication->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->sent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sent\" : \"%.*s\"", communication->sent.size, communication->sent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->received)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"received\" : \"%.*s\"", communication->received.size, communication->received.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->recipient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->recipient_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communication->recipient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->sender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, communication->sender);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &communication->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communication->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->payload)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->payload_count; i++)
		{
			String8 to_add = Serialize_Communication_Payload(arena, &communication->payload[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &communication->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Communication_Payload(Arena *arena, Communication_Payload *communication_Payload)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&communication_Payload->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&communication_Payload->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", communication_Payload->id.size, communication_Payload->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communication_Payload->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication_Payload->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communication_Payload->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communication_Payload->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communication_Payload->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communication_Payload->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(communication_Payload->content_type == Communication_Payload::ContentType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", communication_Payload->content.valueString.size, communication_Payload->content.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(communication_Payload->content_type == Communication_Payload::ContentType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, communication_Payload->content.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(communication_Payload->content_type == Communication_Payload::ContentType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, communication_Payload->content.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CommunicationRequest(Arena *arena, CommunicationRequest *communicationRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&communicationRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&communicationRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", communicationRequest->id.size, communicationRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, communicationRequest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", communicationRequest->implicitRules.size, communicationRequest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", communicationRequest->language.size, communicationRequest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, communicationRequest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &communicationRequest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communicationRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communicationRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &communicationRequest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communicationRequest->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->replaces)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->replaces_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communicationRequest->replaces[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->groupIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, communicationRequest->groupIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", communicationRequest->status.size, communicationRequest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, communicationRequest->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &communicationRequest->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", communicationRequest->priority.size, communicationRequest->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->doNotPerform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"doNotPerform\" : \"%.*s\"", communicationRequest->doNotPerform ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->medium)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->medium_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &communicationRequest->medium[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, communicationRequest->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->about)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->about_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communicationRequest->about[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, communicationRequest->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->payload)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->payload_count; i++)
		{
			String8 to_add = Serialize_CommunicationRequest_Payload(arena, &communicationRequest->payload[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(communicationRequest->occurrence_type == CommunicationRequest::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", communicationRequest->occurrence.valueDateTime.size, communicationRequest->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(communicationRequest->occurrence_type == CommunicationRequest::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, communicationRequest->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&communicationRequest->authoredOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authoredOn\" : \"%.*s\"", communicationRequest->authoredOn.size, communicationRequest->authoredOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->requester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, communicationRequest->requester);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->recipient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->recipient_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communicationRequest->recipient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->sender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, communicationRequest->sender);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &communicationRequest->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &communicationRequest->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &communicationRequest->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CommunicationRequest_Payload(Arena *arena, CommunicationRequest_Payload *communicationRequest_Payload)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&communicationRequest_Payload->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&communicationRequest_Payload->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", communicationRequest_Payload->id.size, communicationRequest_Payload->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&communicationRequest_Payload->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest_Payload->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communicationRequest_Payload->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&communicationRequest_Payload->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < communicationRequest_Payload->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &communicationRequest_Payload->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(communicationRequest_Payload->content_type == CommunicationRequest_Payload::ContentType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", communicationRequest_Payload->content.valueString.size, communicationRequest_Payload->content.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(communicationRequest_Payload->content_type == CommunicationRequest_Payload::ContentType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, communicationRequest_Payload->content.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(communicationRequest_Payload->content_type == CommunicationRequest_Payload::ContentType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, communicationRequest_Payload->content.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CompartmentDefinition(Arena *arena, CompartmentDefinition *compartmentDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&compartmentDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&compartmentDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", compartmentDefinition->id.size, compartmentDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, compartmentDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", compartmentDefinition->implicitRules.size, compartmentDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", compartmentDefinition->language.size, compartmentDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, compartmentDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &compartmentDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &compartmentDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &compartmentDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", compartmentDefinition->url.size, compartmentDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", compartmentDefinition->version.size, compartmentDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", compartmentDefinition->name.size, compartmentDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", compartmentDefinition->status.size, compartmentDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", compartmentDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", compartmentDefinition->date.size, compartmentDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", compartmentDefinition->publisher.size, compartmentDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &compartmentDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", compartmentDefinition->description.size, compartmentDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &compartmentDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", compartmentDefinition->purpose.size, compartmentDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", compartmentDefinition->code.size, compartmentDefinition->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->search)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"search\" : \"%.*s\"", compartmentDefinition->search ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition->resource_count; i++)
		{
			String8 to_add = Serialize_CompartmentDefinition_Resource(arena, &compartmentDefinition->resource[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CompartmentDefinition_Resource(Arena *arena, CompartmentDefinition_Resource *compartmentDefinition_Resource)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&compartmentDefinition_Resource->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&compartmentDefinition_Resource->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", compartmentDefinition_Resource->id.size, compartmentDefinition_Resource->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition_Resource->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition_Resource->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &compartmentDefinition_Resource->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition_Resource->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition_Resource->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &compartmentDefinition_Resource->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition_Resource->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", compartmentDefinition_Resource->code.size, compartmentDefinition_Resource->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&compartmentDefinition_Resource->param)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < compartmentDefinition_Resource->param_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"param\" : \"%.*s\"", &compartmentDefinition_Resource->param[i].size, &compartmentDefinition_Resource->param[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&compartmentDefinition_Resource->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", compartmentDefinition_Resource->documentation.size, compartmentDefinition_Resource->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Composition(Arena *arena, Composition *composition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&composition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&composition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", composition->id.size, composition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, composition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", composition->implicitRules.size, composition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", composition->language.size, composition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, composition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &composition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, composition->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", composition->status.size, composition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, composition->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &composition->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, composition->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, composition->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", composition->date.size, composition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->author_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &composition->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", composition->title.size, composition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->confidentiality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"confidentiality\" : \"%.*s\"", composition->confidentiality.size, composition->confidentiality.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->attester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->attester_count; i++)
		{
			String8 to_add = Serialize_Composition_Attester(arena, &composition->attester[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->custodian)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, composition->custodian);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition->relatesTo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->relatesTo_count; i++)
		{
			String8 to_add = Serialize_Composition_RelatesTo(arena, &composition->relatesTo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->event)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->event_count; i++)
		{
			String8 to_add = Serialize_Composition_Event(arena, &composition->event[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition->section)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition->section_count; i++)
		{
			String8 to_add = Serialize_Composition_Section(arena, &composition->section[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Composition_Attester(Arena *arena, Composition_Attester *composition_Attester)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&composition_Attester->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&composition_Attester->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", composition_Attester->id.size, composition_Attester->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Attester->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Attester->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_Attester->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Attester->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Attester->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_Attester->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Attester->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", composition_Attester->mode.size, composition_Attester->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Attester->time)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"time\" : \"%.*s\"", composition_Attester->time.size, composition_Attester->time.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Attester->party)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, composition_Attester->party);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Composition_RelatesTo(Arena *arena, Composition_RelatesTo *composition_RelatesTo)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&composition_RelatesTo->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&composition_RelatesTo->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", composition_RelatesTo->id.size, composition_RelatesTo->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_RelatesTo->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_RelatesTo->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_RelatesTo->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_RelatesTo->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_RelatesTo->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_RelatesTo->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_RelatesTo->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", composition_RelatesTo->code.size, composition_RelatesTo->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(composition_RelatesTo->target_type == Composition_RelatesTo::TargetType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, composition_RelatesTo->target.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(composition_RelatesTo->target_type == Composition_RelatesTo::TargetType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, composition_RelatesTo->target.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Composition_Event(Arena *arena, Composition_Event *composition_Event)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&composition_Event->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&composition_Event->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", composition_Event->id.size, composition_Event->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Event->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Event->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_Event->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Event->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Event->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_Event->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Event->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Event->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &composition_Event->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Event->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, composition_Event->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Event->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Event->detail_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &composition_Event->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Composition_Section(Arena *arena, Composition_Section *composition_Section)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&composition_Section->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&composition_Section->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", composition_Section->id.size, composition_Section->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Section->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_Section->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Section->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Section->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &composition_Section->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Section->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", composition_Section->title.size, composition_Section->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, composition_Section->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Section->author_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &composition_Section->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Section->focus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, composition_Section->focus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, composition_Section->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", composition_Section->mode.size, composition_Section->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->orderedBy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, composition_Section->orderedBy);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->entry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Section->entry_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &composition_Section->entry[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&composition_Section->emptyReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, composition_Section->emptyReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&composition_Section->section)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < composition_Section->section_count; i++)
		{
			String8 to_add = Serialize_Composition_Section(arena, &composition_Section->section[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ConceptMap(Arena *arena, ConceptMap *conceptMap)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&conceptMap->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&conceptMap->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", conceptMap->id.size, conceptMap->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, conceptMap->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", conceptMap->implicitRules.size, conceptMap->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", conceptMap->language.size, conceptMap->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, conceptMap->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &conceptMap->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", conceptMap->url.size, conceptMap->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, conceptMap->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", conceptMap->version.size, conceptMap->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", conceptMap->name.size, conceptMap->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", conceptMap->title.size, conceptMap->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", conceptMap->status.size, conceptMap->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", conceptMap->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", conceptMap->date.size, conceptMap->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", conceptMap->publisher.size, conceptMap->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &conceptMap->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", conceptMap->description.size, conceptMap->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &conceptMap->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &conceptMap->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", conceptMap->purpose.size, conceptMap->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", conceptMap->copyright.size, conceptMap->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(conceptMap->source_type == ConceptMap::SourceType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", conceptMap->source.valueUri.size, conceptMap->source.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(conceptMap->source_type == ConceptMap::SourceType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", conceptMap->source.valueCanonical.size, conceptMap->source.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(conceptMap->target_type == ConceptMap::TargetType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", conceptMap->target.valueUri.size, conceptMap->target.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(conceptMap->target_type == ConceptMap::TargetType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", conceptMap->target.valueCanonical.size, conceptMap->target.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&conceptMap->group)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap->group_count; i++)
		{
			String8 to_add = Serialize_ConceptMap_Group(arena, &conceptMap->group[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ConceptMap_Group(Arena *arena, ConceptMap_Group *conceptMap_Group)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&conceptMap_Group->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&conceptMap_Group->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", conceptMap_Group->id.size, conceptMap_Group->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"source\" : \"%.*s\"", conceptMap_Group->source.size, conceptMap_Group->source.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group->sourceVersion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sourceVersion\" : \"%.*s\"", conceptMap_Group->sourceVersion.size, conceptMap_Group->sourceVersion.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"target\" : \"%.*s\"", conceptMap_Group->target.size, conceptMap_Group->target.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group->targetVersion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"targetVersion\" : \"%.*s\"", conceptMap_Group->targetVersion.size, conceptMap_Group->targetVersion.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group->element)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group->element_count; i++)
		{
			String8 to_add = Serialize_ConceptMap_Group_Element(arena, &conceptMap_Group->element[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group->unmapped)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ConceptMap_Group_Unmapped(arena, conceptMap_Group->unmapped);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ConceptMap_Group_Element(Arena *arena, ConceptMap_Group_Element *conceptMap_Group_Element)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&conceptMap_Group_Element->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&conceptMap_Group_Element->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", conceptMap_Group_Element->id.size, conceptMap_Group_Element->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Element->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Element->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Element->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Element->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", conceptMap_Group_Element->code.size, conceptMap_Group_Element->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", conceptMap_Group_Element->display.size, conceptMap_Group_Element->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element->target_count; i++)
		{
			String8 to_add = Serialize_ConceptMap_Group_Element_Target(arena, &conceptMap_Group_Element->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ConceptMap_Group_Element_Target(Arena *arena, ConceptMap_Group_Element_Target *conceptMap_Group_Element_Target)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&conceptMap_Group_Element_Target->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", conceptMap_Group_Element_Target->id.size, conceptMap_Group_Element_Target->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element_Target->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Element_Target->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element_Target->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Element_Target->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", conceptMap_Group_Element_Target->code.size, conceptMap_Group_Element_Target->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", conceptMap_Group_Element_Target->display.size, conceptMap_Group_Element_Target->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->equivalence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"equivalence\" : \"%.*s\"", conceptMap_Group_Element_Target->equivalence.size, conceptMap_Group_Element_Target->equivalence.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", conceptMap_Group_Element_Target->comment.size, conceptMap_Group_Element_Target->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->dependsOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element_Target->dependsOn_count; i++)
		{
			String8 to_add = Serialize_ConceptMap_Group_Element_Target_DependsOn(arena, &conceptMap_Group_Element_Target->dependsOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Element_Target->product)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element_Target->product_count; i++)
		{
			String8 to_add = Serialize_ConceptMap_Group_Element_Target_DependsOn(arena, &conceptMap_Group_Element_Target->product[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ConceptMap_Group_Element_Target_DependsOn(Arena *arena, ConceptMap_Group_Element_Target_DependsOn *conceptMap_Group_Element_Target_DependsOn)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", conceptMap_Group_Element_Target_DependsOn->id.size, conceptMap_Group_Element_Target_DependsOn->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element_Target_DependsOn->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Element_Target_DependsOn->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Element_Target_DependsOn->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Element_Target_DependsOn->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"property\" : \"%.*s\"", conceptMap_Group_Element_Target_DependsOn->property.size, conceptMap_Group_Element_Target_DependsOn->property.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", conceptMap_Group_Element_Target_DependsOn->system.size, conceptMap_Group_Element_Target_DependsOn->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", conceptMap_Group_Element_Target_DependsOn->value.size, conceptMap_Group_Element_Target_DependsOn->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Element_Target_DependsOn->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", conceptMap_Group_Element_Target_DependsOn->display.size, conceptMap_Group_Element_Target_DependsOn->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ConceptMap_Group_Unmapped(Arena *arena, ConceptMap_Group_Unmapped *conceptMap_Group_Unmapped)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&conceptMap_Group_Unmapped->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&conceptMap_Group_Unmapped->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", conceptMap_Group_Unmapped->id.size, conceptMap_Group_Unmapped->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Unmapped->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Unmapped->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Unmapped->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Unmapped->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < conceptMap_Group_Unmapped->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &conceptMap_Group_Unmapped->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&conceptMap_Group_Unmapped->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", conceptMap_Group_Unmapped->mode.size, conceptMap_Group_Unmapped->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Unmapped->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", conceptMap_Group_Unmapped->code.size, conceptMap_Group_Unmapped->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Unmapped->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", conceptMap_Group_Unmapped->display.size, conceptMap_Group_Unmapped->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&conceptMap_Group_Unmapped->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", conceptMap_Group_Unmapped->url.size, conceptMap_Group_Unmapped->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Condition(Arena *arena, Condition *condition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&condition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&condition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", condition->id.size, condition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, condition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", condition->implicitRules.size, condition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", condition->language.size, condition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, condition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &condition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &condition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &condition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &condition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->clinicalStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, condition->clinicalStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->verificationStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, condition->verificationStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &condition->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->severity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, condition->severity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, condition->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->bodySite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &condition->bodySite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, condition->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, condition->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(condition->onset_type == Condition::OnsetType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", condition->onset.valueDateTime.size, condition->onset.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->onset_type == Condition::OnsetType::Age)	
	{
			String8 to_add = Serialize_Age(arena, condition->onset.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->onset_type == Condition::OnsetType::Period)	
	{
			String8 to_add = Serialize_Period(arena, condition->onset.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->onset_type == Condition::OnsetType::Range)	
	{
			String8 to_add = Serialize_Range(arena, condition->onset.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->onset_type == Condition::OnsetType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", condition->onset.valueString.size, condition->onset.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(condition->abatement_type == Condition::AbatementType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", condition->abatement.valueDateTime.size, condition->abatement.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->abatement_type == Condition::AbatementType::Age)	
	{
			String8 to_add = Serialize_Age(arena, condition->abatement.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->abatement_type == Condition::AbatementType::Period)	
	{
			String8 to_add = Serialize_Period(arena, condition->abatement.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->abatement_type == Condition::AbatementType::Range)	
	{
			String8 to_add = Serialize_Range(arena, condition->abatement.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(condition->abatement_type == Condition::AbatementType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", condition->abatement.valueString.size, condition->abatement.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&condition->recordedDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recordedDate\" : \"%.*s\"", condition->recordedDate.size, condition->recordedDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->recorder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, condition->recorder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->asserter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, condition->asserter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition->stage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->stage_count; i++)
		{
			String8 to_add = Serialize_Condition_Stage(arena, &condition->stage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->evidence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->evidence_count; i++)
		{
			String8 to_add = Serialize_Condition_Evidence(arena, &condition->evidence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &condition->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Condition_Stage(Arena *arena, Condition_Stage *condition_Stage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&condition_Stage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&condition_Stage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", condition_Stage->id.size, condition_Stage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition_Stage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition_Stage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &condition_Stage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition_Stage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition_Stage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &condition_Stage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition_Stage->summary)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, condition_Stage->summary);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition_Stage->assessment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition_Stage->assessment_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &condition_Stage->assessment[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition_Stage->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, condition_Stage->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Condition_Evidence(Arena *arena, Condition_Evidence *condition_Evidence)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&condition_Evidence->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&condition_Evidence->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", condition_Evidence->id.size, condition_Evidence->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&condition_Evidence->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition_Evidence->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &condition_Evidence->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition_Evidence->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition_Evidence->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &condition_Evidence->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition_Evidence->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition_Evidence->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &condition_Evidence->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&condition_Evidence->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < condition_Evidence->detail_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &condition_Evidence->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Consent(Arena *arena, Consent *consent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&consent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&consent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", consent->id.size, consent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, consent->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", consent->implicitRules.size, consent->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", consent->language.size, consent->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, consent->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &consent->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &consent->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", consent->status.size, consent->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->scope)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, consent->scope);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &consent->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, consent->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->dateTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"dateTime\" : \"%.*s\"", consent->dateTime.size, consent->dateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->performer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &consent->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->organization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->organization_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &consent->organization[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(consent->source_type == Consent::SourceType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, consent->source.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(consent->source_type == Consent::SourceType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, consent->source.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&consent->policy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->policy_count; i++)
		{
			String8 to_add = Serialize_Consent_Policy(arena, &consent->policy[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->policyRule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, consent->policyRule);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent->verification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent->verification_count; i++)
		{
			String8 to_add = Serialize_Consent_Verification(arena, &consent->verification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent->provision)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Consent_Provision(arena, consent->provision);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Consent_Policy(Arena *arena, Consent_Policy *consent_Policy)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&consent_Policy->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&consent_Policy->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", consent_Policy->id.size, consent_Policy->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Policy->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Policy->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Policy->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Policy->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Policy->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Policy->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Policy->authority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authority\" : \"%.*s\"", consent_Policy->authority.size, consent_Policy->authority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Policy->uri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uri\" : \"%.*s\"", consent_Policy->uri.size, consent_Policy->uri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Consent_Verification(Arena *arena, Consent_Verification *consent_Verification)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&consent_Verification->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&consent_Verification->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", consent_Verification->id.size, consent_Verification->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Verification->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Verification->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Verification->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Verification->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Verification->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Verification->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Verification->verified)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"verified\" : \"%.*s\"", consent_Verification->verified ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Verification->verifiedWith)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, consent_Verification->verifiedWith);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Verification->verificationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"verificationDate\" : \"%.*s\"", consent_Verification->verificationDate.size, consent_Verification->verificationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Consent_Provision(Arena *arena, Consent_Provision *consent_Provision)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&consent_Provision->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&consent_Provision->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", consent_Provision->id.size, consent_Provision->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Provision->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Provision->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", consent_Provision->type.size, consent_Provision->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, consent_Provision->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->actor_count; i++)
		{
			String8 to_add = Serialize_Consent_Provision_Actor(arena, &consent_Provision->actor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->action_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &consent_Provision->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->securityLabel)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->securityLabel_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &consent_Provision->securityLabel[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->purpose_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &consent_Provision->purpose[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->class_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->class__count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &consent_Provision->class_[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &consent_Provision->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->dataPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, consent_Provision->dataPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision->data)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->data_count; i++)
		{
			String8 to_add = Serialize_Consent_Provision_Data(arena, &consent_Provision->data[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision->provision)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision->provision_count; i++)
		{
			String8 to_add = Serialize_Consent_Provision(arena, &consent_Provision->provision[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Consent_Provision_Actor(Arena *arena, Consent_Provision_Actor *consent_Provision_Actor)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&consent_Provision_Actor->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&consent_Provision_Actor->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", consent_Provision_Actor->id.size, consent_Provision_Actor->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision_Actor->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision_Actor->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Provision_Actor->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision_Actor->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision_Actor->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Provision_Actor->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision_Actor->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, consent_Provision_Actor->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision_Actor->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, consent_Provision_Actor->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Consent_Provision_Data(Arena *arena, Consent_Provision_Data *consent_Provision_Data)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&consent_Provision_Data->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&consent_Provision_Data->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", consent_Provision_Data->id.size, consent_Provision_Data->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision_Data->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision_Data->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Provision_Data->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision_Data->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < consent_Provision_Data->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &consent_Provision_Data->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&consent_Provision_Data->meaning)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"meaning\" : \"%.*s\"", consent_Provision_Data->meaning.size, consent_Provision_Data->meaning.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&consent_Provision_Data->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, consent_Provision_Data->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract(Arena *arena, Contract *contract)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract->id.size, contract->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, contract->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", contract->implicitRules.size, contract->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", contract->language.size, contract->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, contract->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &contract->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &contract->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", contract->url.size, contract->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", contract->version.size, contract->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", contract->status.size, contract->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->legalState)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract->legalState);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract->instantiatesCanonical);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", contract->instantiatesUri.size, contract->instantiatesUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->contentDerivative)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract->contentDerivative);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->issued)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issued\" : \"%.*s\"", contract->issued.size, contract->issued.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->applies)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, contract->applies);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->expirationType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract->expirationType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->subject_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->authority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->authority_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract->authority[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->domain)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->domain_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract->domain[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->site)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->site_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract->site[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", contract->name.size, contract->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", contract->title.size, contract->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", contract->subtitle.size, contract->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->alias)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->alias_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"alias\" : \"%.*s\"", &contract->alias[i].size, &contract->alias[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->scope)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract->scope);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract->topic_type == Contract::TopicType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, contract->topic.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract->topic_type == Contract::TopicType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract->topic.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&contract->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->subType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->subType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract->subType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->contentDefinition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Contract_ContentDefinition(arena, contract->contentDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract->term)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->term_count; i++)
		{
			String8 to_add = Serialize_Contract_Term(arena, &contract->term[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->relevantHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->relevantHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract->relevantHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->signer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->signer_count; i++)
		{
			String8 to_add = Serialize_Contract_Signer(arena, &contract->signer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->friendly)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->friendly_count; i++)
		{
			String8 to_add = Serialize_Contract_Friendly(arena, &contract->friendly[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->legal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->legal_count; i++)
		{
			String8 to_add = Serialize_Contract_Legal(arena, &contract->legal[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract->rule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract->rule_count; i++)
		{
			String8 to_add = Serialize_Contract_Rule(arena, &contract->rule[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract->legallyBinding_type == Contract::LegallyBindingType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, contract->legallyBinding.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract->legallyBinding_type == Contract::LegallyBindingType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract->legallyBinding.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_ContentDefinition(Arena *arena, Contract_ContentDefinition *contract_ContentDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_ContentDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_ContentDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_ContentDefinition->id.size, contract_ContentDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_ContentDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_ContentDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_ContentDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_ContentDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_ContentDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_ContentDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_ContentDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_ContentDefinition->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_ContentDefinition->subType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_ContentDefinition->subType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_ContentDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_ContentDefinition->publisher);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_ContentDefinition->publicationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publicationDate\" : \"%.*s\"", contract_ContentDefinition->publicationDate.size, contract_ContentDefinition->publicationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_ContentDefinition->publicationStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publicationStatus\" : \"%.*s\"", contract_ContentDefinition->publicationStatus.size, contract_ContentDefinition->publicationStatus.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_ContentDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", contract_ContentDefinition->copyright.size, contract_ContentDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term(Arena *arena, Contract_Term *contract_Term)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term->id.size, contract_Term->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, contract_Term->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term->issued)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issued\" : \"%.*s\"", contract_Term->issued.size, contract_Term->issued.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term->applies)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, contract_Term->applies);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract_Term->topic_type == Contract_Term::TopicType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term->topic.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term->topic_type == Contract_Term::TopicType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract_Term->topic.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&contract_Term->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term->subType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term->subType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", contract_Term->text.size, contract_Term->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term->securityLabel)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term->securityLabel_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_SecurityLabel(arena, &contract_Term->securityLabel[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term->offer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Contract_Term_Offer(arena, contract_Term->offer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term->asset)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term->asset_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Asset(arena, &contract_Term->asset[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term->action_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Action(arena, &contract_Term->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term->group)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term->group_count; i++)
		{
			String8 to_add = Serialize_Contract_Term(arena, &contract_Term->group[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_SecurityLabel(Arena *arena, Contract_Term_SecurityLabel *contract_Term_SecurityLabel)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_SecurityLabel->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_SecurityLabel->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_SecurityLabel->id.size, contract_Term_SecurityLabel->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_SecurityLabel->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_SecurityLabel->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_SecurityLabel->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_SecurityLabel->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_SecurityLabel->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_SecurityLabel->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_SecurityLabel->number)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_SecurityLabel->number_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"number\" : \"%d\"", &contract_Term_SecurityLabel->number[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_SecurityLabel->classification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, contract_Term_SecurityLabel->classification);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_SecurityLabel->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_SecurityLabel->category_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &contract_Term_SecurityLabel->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_SecurityLabel->control)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_SecurityLabel->control_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &contract_Term_SecurityLabel->control[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Offer(Arena *arena, Contract_Term_Offer *contract_Term_Offer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Offer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Offer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Offer->id.size, contract_Term_Offer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Offer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Offer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Offer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &contract_Term_Offer->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer->party)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->party_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Offer_Party(arena, &contract_Term_Offer->party[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_Term_Offer->topic);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Offer->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Offer->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Offer->decision)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Offer->decision);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Offer->decisionMode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->decisionMode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract_Term_Offer->decisionMode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer->answer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->answer_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Offer_Answer(arena, &contract_Term_Offer->answer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", contract_Term_Offer->text.size, contract_Term_Offer->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Offer->linkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->linkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"linkId\" : \"%.*s\"", &contract_Term_Offer->linkId[i].size, &contract_Term_Offer->linkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer->securityLabelNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer->securityLabelNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"securityLabelNumber\" : \"%d\"", &contract_Term_Offer->securityLabelNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Offer_Party(Arena *arena, Contract_Term_Offer_Party *contract_Term_Offer_Party)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Offer_Party->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Offer_Party->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Offer_Party->id.size, contract_Term_Offer_Party->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Offer_Party->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer_Party->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Offer_Party->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer_Party->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer_Party->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Offer_Party->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer_Party->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer_Party->reference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract_Term_Offer_Party->reference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer_Party->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Offer_Party->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Offer_Answer(Arena *arena, Contract_Term_Offer_Answer *contract_Term_Offer_Answer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Offer_Answer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Offer_Answer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Offer_Answer->id.size, contract_Term_Offer_Answer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Offer_Answer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer_Answer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Offer_Answer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Offer_Answer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Offer_Answer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Offer_Answer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", contract_Term_Offer_Answer->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", contract_Term_Offer_Answer->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, contract_Term_Offer_Answer->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", contract_Term_Offer_Answer->value.valueDate.size, contract_Term_Offer_Answer->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", contract_Term_Offer_Answer->value.valueDateTime.size, contract_Term_Offer_Answer->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", contract_Term_Offer_Answer->value.valueTime.size, contract_Term_Offer_Answer->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", contract_Term_Offer_Answer->value.valueString.size, contract_Term_Offer_Answer->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", contract_Term_Offer_Answer->value.valueUri.size, contract_Term_Offer_Answer->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, contract_Term_Offer_Answer->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, contract_Term_Offer_Answer->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, contract_Term_Offer_Answer->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Offer_Answer->value_type == Contract_Term_Offer_Answer::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract_Term_Offer_Answer->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Asset(Arena *arena, Contract_Term_Asset *contract_Term_Asset)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Asset->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Asset->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Asset->id.size, contract_Term_Asset->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Asset->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Asset->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->scope)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Asset->scope);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract_Term_Asset->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->typeReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->typeReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract_Term_Asset->typeReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->subtype)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->subtype_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract_Term_Asset->subtype[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, contract_Term_Asset->relationship);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->context_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Asset_Context(arena, &contract_Term_Asset->context[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"condition\" : \"%.*s\"", contract_Term_Asset->condition.size, contract_Term_Asset->condition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset->periodType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->periodType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract_Term_Asset->periodType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->period_count; i++)
		{
			String8 to_add = Serialize_Period(arena, &contract_Term_Asset->period[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->usePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->usePeriod_count; i++)
		{
			String8 to_add = Serialize_Period(arena, &contract_Term_Asset->usePeriod[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", contract_Term_Asset->text.size, contract_Term_Asset->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset->linkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->linkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"linkId\" : \"%.*s\"", &contract_Term_Asset->linkId[i].size, &contract_Term_Asset->linkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->answer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->answer_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Offer_Answer(arena, &contract_Term_Asset->answer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->securityLabelNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->securityLabelNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"securityLabelNumber\" : \"%d\"", &contract_Term_Asset->securityLabelNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset->valuedItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset->valuedItem_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Asset_ValuedItem(arena, &contract_Term_Asset->valuedItem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Asset_Context(Arena *arena, Contract_Term_Asset_Context *contract_Term_Asset_Context)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Asset_Context->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Asset_Context->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Asset_Context->id.size, contract_Term_Asset_Context->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_Context->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset_Context->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Asset_Context->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset_Context->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset_Context->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Asset_Context->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset_Context->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_Term_Asset_Context->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_Context->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset_Context->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract_Term_Asset_Context->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset_Context->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", contract_Term_Asset_Context->text.size, contract_Term_Asset_Context->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Asset_ValuedItem(Arena *arena, Contract_Term_Asset_ValuedItem *contract_Term_Asset_ValuedItem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Asset_ValuedItem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Asset_ValuedItem->id.size, contract_Term_Asset_ValuedItem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset_ValuedItem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Asset_ValuedItem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset_ValuedItem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Asset_ValuedItem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract_Term_Asset_ValuedItem->entity_type == Contract_Term_Asset_ValuedItem::EntityType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Asset_ValuedItem->entity.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Asset_ValuedItem->entity_type == Contract_Term_Asset_ValuedItem::EntityType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract_Term_Asset_ValuedItem->entity.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&contract_Term_Asset_ValuedItem->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, contract_Term_Asset_ValuedItem->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->effectiveTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"effectiveTime\" : \"%.*s\"", contract_Term_Asset_ValuedItem->effectiveTime.size, contract_Term_Asset_ValuedItem->effectiveTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, contract_Term_Asset_ValuedItem->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, contract_Term_Asset_ValuedItem->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", contract_Term_Asset_ValuedItem->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->points)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"points\" : \"%d\"", contract_Term_Asset_ValuedItem->points);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, contract_Term_Asset_ValuedItem->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->payment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"payment\" : \"%.*s\"", contract_Term_Asset_ValuedItem->payment.size, contract_Term_Asset_ValuedItem->payment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->paymentDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"paymentDate\" : \"%.*s\"", contract_Term_Asset_ValuedItem->paymentDate.size, contract_Term_Asset_ValuedItem->paymentDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->responsible)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_Term_Asset_ValuedItem->responsible);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->recipient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_Term_Asset_ValuedItem->recipient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->linkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset_ValuedItem->linkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"linkId\" : \"%.*s\"", &contract_Term_Asset_ValuedItem->linkId[i].size, &contract_Term_Asset_ValuedItem->linkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Asset_ValuedItem->securityLabelNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Asset_ValuedItem->securityLabelNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"securityLabelNumber\" : \"%d\"", &contract_Term_Asset_ValuedItem->securityLabelNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Action(Arena *arena, Contract_Term_Action *contract_Term_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Action->id.size, contract_Term_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->doNotPerform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"doNotPerform\" : \"%.*s\"", contract_Term_Action->doNotPerform ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Action->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->subject_count; i++)
		{
			String8 to_add = Serialize_Contract_Term_Action_Subject(arena, &contract_Term_Action->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Action->intent);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->linkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->linkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"linkId\" : \"%.*s\"", &contract_Term_Action->linkId[i].size, &contract_Term_Action->linkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Action->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_Term_Action->context);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->contextLinkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->contextLinkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"contextLinkId\" : \"%.*s\"", &contract_Term_Action->contextLinkId[i].size, &contract_Term_Action->contextLinkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract_Term_Action->occurrence_type == Contract_Term_Action::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", contract_Term_Action->occurrence.valueDateTime.size, contract_Term_Action->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Action->occurrence_type == Contract_Term_Action::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, contract_Term_Action->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Term_Action->occurrence_type == Contract_Term_Action::OccurrenceType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, contract_Term_Action->occurrence.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&contract_Term_Action->requester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->requester_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract_Term_Action->requester[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->requesterLinkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->requesterLinkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"requesterLinkId\" : \"%.*s\"", &contract_Term_Action->requesterLinkId[i].size, &contract_Term_Action->requesterLinkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->performerType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->performerType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract_Term_Action->performerType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->performerRole)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Action->performerRole);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_Term_Action->performer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action->performerLinkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->performerLinkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"performerLinkId\" : \"%.*s\"", &contract_Term_Action->performerLinkId[i].size, &contract_Term_Action->performerLinkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &contract_Term_Action->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract_Term_Action->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->reason_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"reason\" : \"%.*s\"", &contract_Term_Action->reason[i].size, &contract_Term_Action->reason[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->reasonLinkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->reasonLinkId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"reasonLinkId\" : \"%.*s\"", &contract_Term_Action->reasonLinkId[i].size, &contract_Term_Action->reasonLinkId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &contract_Term_Action->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action->securityLabelNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action->securityLabelNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"securityLabelNumber\" : \"%d\"", &contract_Term_Action->securityLabelNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Term_Action_Subject(Arena *arena, Contract_Term_Action_Subject *contract_Term_Action_Subject)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Term_Action_Subject->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Term_Action_Subject->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Term_Action_Subject->id.size, contract_Term_Action_Subject->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Term_Action_Subject->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action_Subject->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Action_Subject->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action_Subject->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action_Subject->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Term_Action_Subject->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action_Subject->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Term_Action_Subject->reference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &contract_Term_Action_Subject->reference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Term_Action_Subject->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, contract_Term_Action_Subject->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Signer(Arena *arena, Contract_Signer *contract_Signer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Signer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Signer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Signer->id.size, contract_Signer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Signer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Signer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Signer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Signer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Signer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Signer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Signer->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, contract_Signer->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Signer->party)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, contract_Signer->party);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Signer->signature)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Signer->signature_count; i++)
		{
			String8 to_add = Serialize_Signature(arena, &contract_Signer->signature[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Friendly(Arena *arena, Contract_Friendly *contract_Friendly)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Friendly->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Friendly->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Friendly->id.size, contract_Friendly->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Friendly->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Friendly->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Friendly->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Friendly->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Friendly->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Friendly->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract_Friendly->content_type == Contract_Friendly::ContentType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, contract_Friendly->content.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Friendly->content_type == Contract_Friendly::ContentType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract_Friendly->content.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Legal(Arena *arena, Contract_Legal *contract_Legal)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Legal->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Legal->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Legal->id.size, contract_Legal->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Legal->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Legal->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Legal->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Legal->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Legal->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Legal->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract_Legal->content_type == Contract_Legal::ContentType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, contract_Legal->content.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Legal->content_type == Contract_Legal::ContentType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract_Legal->content.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contract_Rule(Arena *arena, Contract_Rule *contract_Rule)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contract_Rule->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contract_Rule->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contract_Rule->id.size, contract_Rule->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contract_Rule->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Rule->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Rule->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contract_Rule->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contract_Rule->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contract_Rule->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(contract_Rule->content_type == Contract_Rule::ContentType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, contract_Rule->content.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(contract_Rule->content_type == Contract_Rule::ContentType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, contract_Rule->content.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Coverage(Arena *arena, Coverage *coverage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverage->id.size, coverage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, coverage->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", coverage->implicitRules.size, coverage->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", coverage->language.size, coverage->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, coverage->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &coverage->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &coverage->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", coverage->status.size, coverage->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverage->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->policyHolder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverage->policyHolder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->subscriber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverage->subscriber);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->subscriberId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subscriberId\" : \"%.*s\"", coverage->subscriberId.size, coverage->subscriberId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->beneficiary)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverage->beneficiary);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->dependent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"dependent\" : \"%.*s\"", coverage->dependent.size, coverage->dependent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverage->relationship);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, coverage->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->payor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->payor_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &coverage->payor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage->class_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->class__count; i++)
		{
			String8 to_add = Serialize_Coverage_Class(arena, &coverage->class_[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage->order)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"order\" : \"%d\"", coverage->order);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"network\" : \"%.*s\"", coverage->network.size, coverage->network.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->costToBeneficiary)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->costToBeneficiary_count; i++)
		{
			String8 to_add = Serialize_Coverage_CostToBeneficiary(arena, &coverage->costToBeneficiary[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage->subrogation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subrogation\" : \"%.*s\"", coverage->subrogation ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage->contract)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage->contract_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &coverage->contract[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Coverage_Class(Arena *arena, Coverage_Class *coverage_Class)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverage_Class->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverage_Class->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverage_Class->id.size, coverage_Class->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage_Class->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage_Class->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage_Class->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage_Class->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage_Class->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage_Class->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage_Class->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverage_Class->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage_Class->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", coverage_Class->value.size, coverage_Class->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage_Class->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", coverage_Class->name.size, coverage_Class->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Coverage_CostToBeneficiary(Arena *arena, Coverage_CostToBeneficiary *coverage_CostToBeneficiary)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverage_CostToBeneficiary->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverage_CostToBeneficiary->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverage_CostToBeneficiary->id.size, coverage_CostToBeneficiary->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage_CostToBeneficiary->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage_CostToBeneficiary->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage_CostToBeneficiary->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage_CostToBeneficiary->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage_CostToBeneficiary->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage_CostToBeneficiary->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage_CostToBeneficiary->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverage_CostToBeneficiary->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(coverage_CostToBeneficiary->value_type == Coverage_CostToBeneficiary::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, coverage_CostToBeneficiary->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverage_CostToBeneficiary->value_type == Coverage_CostToBeneficiary::ValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, coverage_CostToBeneficiary->value.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&coverage_CostToBeneficiary->exception)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage_CostToBeneficiary->exception_count; i++)
		{
			String8 to_add = Serialize_Coverage_CostToBeneficiary_Exception(arena, &coverage_CostToBeneficiary->exception[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Coverage_CostToBeneficiary_Exception(Arena *arena, Coverage_CostToBeneficiary_Exception *coverage_CostToBeneficiary_Exception)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverage_CostToBeneficiary_Exception->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverage_CostToBeneficiary_Exception->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverage_CostToBeneficiary_Exception->id.size, coverage_CostToBeneficiary_Exception->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage_CostToBeneficiary_Exception->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage_CostToBeneficiary_Exception->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage_CostToBeneficiary_Exception->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage_CostToBeneficiary_Exception->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverage_CostToBeneficiary_Exception->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverage_CostToBeneficiary_Exception->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverage_CostToBeneficiary_Exception->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverage_CostToBeneficiary_Exception->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverage_CostToBeneficiary_Exception->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, coverage_CostToBeneficiary_Exception->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityRequest(Arena *arena, CoverageEligibilityRequest *coverageEligibilityRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityRequest->id.size, coverageEligibilityRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, coverageEligibilityRequest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", coverageEligibilityRequest->implicitRules.size, coverageEligibilityRequest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", coverageEligibilityRequest->language.size, coverageEligibilityRequest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, coverageEligibilityRequest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &coverageEligibilityRequest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &coverageEligibilityRequest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", coverageEligibilityRequest->status.size, coverageEligibilityRequest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityRequest->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->purpose_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", &coverageEligibilityRequest->purpose[i].size, &coverageEligibilityRequest->purpose[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(coverageEligibilityRequest->serviced_type == CoverageEligibilityRequest::ServicedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", coverageEligibilityRequest->serviced.valueDate.size, coverageEligibilityRequest->serviced.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverageEligibilityRequest->serviced_type == CoverageEligibilityRequest::ServicedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, coverageEligibilityRequest->serviced.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&coverageEligibilityRequest->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", coverageEligibilityRequest->created.size, coverageEligibilityRequest->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->enterer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest->enterer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->insurer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest->insurer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->facility)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest->facility);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityRequest_SupportingInfo(arena, &coverageEligibilityRequest->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->insurance_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityRequest_Insurance(arena, &coverageEligibilityRequest->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest->item_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityRequest_Item(arena, &coverageEligibilityRequest->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityRequest_SupportingInfo(Arena *arena, CoverageEligibilityRequest_SupportingInfo *coverageEligibilityRequest_SupportingInfo)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityRequest_SupportingInfo->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_SupportingInfo->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityRequest_SupportingInfo->id.size, coverageEligibilityRequest_SupportingInfo->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_SupportingInfo->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_SupportingInfo->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_SupportingInfo->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_SupportingInfo->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_SupportingInfo->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_SupportingInfo->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_SupportingInfo->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", coverageEligibilityRequest_SupportingInfo->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_SupportingInfo->information)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest_SupportingInfo->information);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_SupportingInfo->appliesToAll)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"appliesToAll\" : \"%.*s\"", coverageEligibilityRequest_SupportingInfo->appliesToAll ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityRequest_Insurance(Arena *arena, CoverageEligibilityRequest_Insurance *coverageEligibilityRequest_Insurance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityRequest_Insurance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Insurance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityRequest_Insurance->id.size, coverageEligibilityRequest_Insurance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Insurance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Insurance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_Insurance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Insurance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Insurance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_Insurance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Insurance->focal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"focal\" : \"%.*s\"", coverageEligibilityRequest_Insurance->focal ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Insurance->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest_Insurance->coverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Insurance->businessArrangement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"businessArrangement\" : \"%.*s\"", coverageEligibilityRequest_Insurance->businessArrangement.size, coverageEligibilityRequest_Insurance->businessArrangement.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityRequest_Item(Arena *arena, CoverageEligibilityRequest_Item *coverageEligibilityRequest_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityRequest_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityRequest_Item->id.size, coverageEligibilityRequest_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->supportingInfoSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item->supportingInfoSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"supportingInfoSequence\" : \"%d\"", &coverageEligibilityRequest_Item->supportingInfoSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityRequest_Item->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityRequest_Item->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &coverageEligibilityRequest_Item->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest_Item->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, coverageEligibilityRequest_Item->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, coverageEligibilityRequest_Item->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->facility)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest_Item->facility);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->diagnosis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item->diagnosis_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityRequest_Item_Diagnosis(arena, &coverageEligibilityRequest_Item->diagnosis[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item->detail_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &coverageEligibilityRequest_Item->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityRequest_Item_Diagnosis(Arena *arena, CoverageEligibilityRequest_Item_Diagnosis *coverageEligibilityRequest_Item_Diagnosis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityRequest_Item_Diagnosis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item_Diagnosis->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityRequest_Item_Diagnosis->id.size, coverageEligibilityRequest_Item_Diagnosis->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityRequest_Item_Diagnosis->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item_Diagnosis->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_Item_Diagnosis->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityRequest_Item_Diagnosis->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityRequest_Item_Diagnosis->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityRequest_Item_Diagnosis->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(coverageEligibilityRequest_Item_Diagnosis->diagnosis_type == CoverageEligibilityRequest_Item_Diagnosis::DiagnosisType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityRequest_Item_Diagnosis->diagnosis.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverageEligibilityRequest_Item_Diagnosis->diagnosis_type == CoverageEligibilityRequest_Item_Diagnosis::DiagnosisType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, coverageEligibilityRequest_Item_Diagnosis->diagnosis.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityResponse(Arena *arena, CoverageEligibilityResponse *coverageEligibilityResponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityResponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityResponse->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityResponse->id.size, coverageEligibilityResponse->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, coverageEligibilityResponse->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", coverageEligibilityResponse->implicitRules.size, coverageEligibilityResponse->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", coverageEligibilityResponse->language.size, coverageEligibilityResponse->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, coverageEligibilityResponse->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &coverageEligibilityResponse->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &coverageEligibilityResponse->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", coverageEligibilityResponse->status.size, coverageEligibilityResponse->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse->purpose_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", &coverageEligibilityResponse->purpose[i].size, &coverageEligibilityResponse->purpose[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityResponse->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(coverageEligibilityResponse->serviced_type == CoverageEligibilityResponse::ServicedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", coverageEligibilityResponse->serviced.valueDate.size, coverageEligibilityResponse->serviced.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverageEligibilityResponse->serviced_type == CoverageEligibilityResponse::ServicedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, coverageEligibilityResponse->serviced.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&coverageEligibilityResponse->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", coverageEligibilityResponse->created.size, coverageEligibilityResponse->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->requestor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityResponse->requestor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityResponse->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outcome\" : \"%.*s\"", coverageEligibilityResponse->outcome.size, coverageEligibilityResponse->outcome.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->disposition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"disposition\" : \"%.*s\"", coverageEligibilityResponse->disposition.size, coverageEligibilityResponse->disposition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->insurer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityResponse->insurer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse->insurance_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityResponse_Insurance(arena, &coverageEligibilityResponse->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse->preAuthRef)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preAuthRef\" : \"%.*s\"", coverageEligibilityResponse->preAuthRef.size, coverageEligibilityResponse->preAuthRef.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->form)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse->form);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse->error)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse->error_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityResponse_Error(arena, &coverageEligibilityResponse->error[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityResponse_Insurance(Arena *arena, CoverageEligibilityResponse_Insurance *coverageEligibilityResponse_Insurance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityResponse_Insurance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityResponse_Insurance->id.size, coverageEligibilityResponse_Insurance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Insurance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Insurance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityResponse_Insurance->coverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance->inforce)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"inforce\" : \"%.*s\"", coverageEligibilityResponse_Insurance->inforce ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance->benefitPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, coverageEligibilityResponse_Insurance->benefitPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance->item_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityResponse_Insurance_Item(arena, &coverageEligibilityResponse_Insurance->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityResponse_Insurance_Item(Arena *arena, CoverageEligibilityResponse_Insurance_Item *coverageEligibilityResponse_Insurance_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item->id.size, coverageEligibilityResponse_Insurance_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Insurance_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Insurance_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse_Insurance_Item->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse_Insurance_Item->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance_Item->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &coverageEligibilityResponse_Insurance_Item->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, coverageEligibilityResponse_Insurance_Item->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->excluded)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"excluded\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item->excluded ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item->name.size, coverageEligibilityResponse_Insurance_Item->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item->description.size, coverageEligibilityResponse_Insurance_Item->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse_Insurance_Item->network);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse_Insurance_Item->unit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->term)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse_Insurance_Item->term);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->benefit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance_Item->benefit_count; i++)
		{
			String8 to_add = Serialize_CoverageEligibilityResponse_Insurance_Item_Benefit(arena, &coverageEligibilityResponse_Insurance_Item->benefit[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->authorizationRequired)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authorizationRequired\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item->authorizationRequired ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->authorizationSupporting)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance_Item->authorizationSupporting_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &coverageEligibilityResponse_Insurance_Item->authorizationSupporting[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item->authorizationUrl)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authorizationUrl\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item->authorizationUrl.size, coverageEligibilityResponse_Insurance_Item->authorizationUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityResponse_Insurance_Item_Benefit(Arena *arena, CoverageEligibilityResponse_Insurance_Item_Benefit *coverageEligibilityResponse_Insurance_Item_Benefit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item_Benefit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item_Benefit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item_Benefit->id.size, coverageEligibilityResponse_Insurance_Item_Benefit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item_Benefit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance_Item_Benefit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Insurance_Item_Benefit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Insurance_Item_Benefit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Insurance_Item_Benefit->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse_Insurance_Item_Benefit->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(coverageEligibilityResponse_Insurance_Item_Benefit->allowed_type == CoverageEligibilityResponse_Insurance_Item_Benefit::AllowedType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", coverageEligibilityResponse_Insurance_Item_Benefit->allowed.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverageEligibilityResponse_Insurance_Item_Benefit->allowed_type == CoverageEligibilityResponse_Insurance_Item_Benefit::AllowedType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item_Benefit->allowed.valueString.size, coverageEligibilityResponse_Insurance_Item_Benefit->allowed.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverageEligibilityResponse_Insurance_Item_Benefit->allowed_type == CoverageEligibilityResponse_Insurance_Item_Benefit::AllowedType::Money)	
	{
			String8 to_add = Serialize_Money(arena, coverageEligibilityResponse_Insurance_Item_Benefit->allowed.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(coverageEligibilityResponse_Insurance_Item_Benefit->used_type == CoverageEligibilityResponse_Insurance_Item_Benefit::UsedType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", coverageEligibilityResponse_Insurance_Item_Benefit->used.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverageEligibilityResponse_Insurance_Item_Benefit->used_type == CoverageEligibilityResponse_Insurance_Item_Benefit::UsedType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", coverageEligibilityResponse_Insurance_Item_Benefit->used.valueString.size, coverageEligibilityResponse_Insurance_Item_Benefit->used.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(coverageEligibilityResponse_Insurance_Item_Benefit->used_type == CoverageEligibilityResponse_Insurance_Item_Benefit::UsedType::Money)	
	{
			String8 to_add = Serialize_Money(arena, coverageEligibilityResponse_Insurance_Item_Benefit->used.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CoverageEligibilityResponse_Error(Arena *arena, CoverageEligibilityResponse_Error *coverageEligibilityResponse_Error)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coverageEligibilityResponse_Error->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Error->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coverageEligibilityResponse_Error->id.size, coverageEligibilityResponse_Error->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coverageEligibilityResponse_Error->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Error->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Error->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Error->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coverageEligibilityResponse_Error->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coverageEligibilityResponse_Error->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coverageEligibilityResponse_Error->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, coverageEligibilityResponse_Error->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DetectedIssue(Arena *arena, DetectedIssue *detectedIssue)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&detectedIssue->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&detectedIssue->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", detectedIssue->id.size, detectedIssue->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, detectedIssue->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", detectedIssue->implicitRules.size, detectedIssue->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", detectedIssue->language.size, detectedIssue->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, detectedIssue->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &detectedIssue->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &detectedIssue->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &detectedIssue->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &detectedIssue->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", detectedIssue->status.size, detectedIssue->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, detectedIssue->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->severity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"severity\" : \"%.*s\"", detectedIssue->severity.size, detectedIssue->severity.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, detectedIssue->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(detectedIssue->identified_type == DetectedIssue::IdentifiedType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", detectedIssue->identified.valueDateTime.size, detectedIssue->identified.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(detectedIssue->identified_type == DetectedIssue::IdentifiedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, detectedIssue->identified.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&detectedIssue->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, detectedIssue->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->implicated)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue->implicated_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &detectedIssue->implicated[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue->evidence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue->evidence_count; i++)
		{
			String8 to_add = Serialize_DetectedIssue_Evidence(arena, &detectedIssue->evidence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"detail\" : \"%.*s\"", detectedIssue->detail.size, detectedIssue->detail.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"reference\" : \"%.*s\"", detectedIssue->reference.size, detectedIssue->reference.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue->mitigation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue->mitigation_count; i++)
		{
			String8 to_add = Serialize_DetectedIssue_Mitigation(arena, &detectedIssue->mitigation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DetectedIssue_Evidence(Arena *arena, DetectedIssue_Evidence *detectedIssue_Evidence)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&detectedIssue_Evidence->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&detectedIssue_Evidence->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", detectedIssue_Evidence->id.size, detectedIssue_Evidence->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue_Evidence->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue_Evidence->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &detectedIssue_Evidence->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue_Evidence->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue_Evidence->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &detectedIssue_Evidence->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue_Evidence->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue_Evidence->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &detectedIssue_Evidence->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue_Evidence->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue_Evidence->detail_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &detectedIssue_Evidence->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DetectedIssue_Mitigation(Arena *arena, DetectedIssue_Mitigation *detectedIssue_Mitigation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&detectedIssue_Mitigation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&detectedIssue_Mitigation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", detectedIssue_Mitigation->id.size, detectedIssue_Mitigation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue_Mitigation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue_Mitigation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &detectedIssue_Mitigation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue_Mitigation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < detectedIssue_Mitigation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &detectedIssue_Mitigation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&detectedIssue_Mitigation->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, detectedIssue_Mitigation->action);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue_Mitigation->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", detectedIssue_Mitigation->date.size, detectedIssue_Mitigation->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&detectedIssue_Mitigation->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, detectedIssue_Mitigation->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Device(Arena *arena, Device *device)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&device->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&device->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", device->id.size, device->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, device->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", device->implicitRules.size, device->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", device->language.size, device->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, device->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &device->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &device->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, device->definition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->udiCarrier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->udiCarrier_count; i++)
		{
			String8 to_add = Serialize_Device_UdiCarrier(arena, &device->udiCarrier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", device->status.size, device->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->statusReason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &device->statusReason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->distinctIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"distinctIdentifier\" : \"%.*s\"", device->distinctIdentifier.size, device->distinctIdentifier.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"manufacturer\" : \"%.*s\"", device->manufacturer.size, device->manufacturer.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->manufactureDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"manufactureDate\" : \"%.*s\"", device->manufactureDate.size, device->manufactureDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->expirationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expirationDate\" : \"%.*s\"", device->expirationDate.size, device->expirationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->lotNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lotNumber\" : \"%.*s\"", device->lotNumber.size, device->lotNumber.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->serialNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"serialNumber\" : \"%.*s\"", device->serialNumber.size, device->serialNumber.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->deviceName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->deviceName_count; i++)
		{
			String8 to_add = Serialize_Device_DeviceName(arena, &device->deviceName[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->modelNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"modelNumber\" : \"%.*s\"", device->modelNumber.size, device->modelNumber.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->partNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"partNumber\" : \"%.*s\"", device->partNumber.size, device->partNumber.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, device->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->specialization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->specialization_count; i++)
		{
			String8 to_add = Serialize_Device_Specialization(arena, &device->specialization[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->version_count; i++)
		{
			String8 to_add = Serialize_Device_Version(arena, &device->version[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->property_count; i++)
		{
			String8 to_add = Serialize_Device_Property(arena, &device->property[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, device->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->owner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, device->owner);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->contact_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &device->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, device->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", device->url.size, device->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &device->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->safety)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device->safety_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &device->safety[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device->parent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, device->parent);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Device_UdiCarrier(Arena *arena, Device_UdiCarrier *device_UdiCarrier)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&device_UdiCarrier->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&device_UdiCarrier->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", device_UdiCarrier->id.size, device_UdiCarrier->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_UdiCarrier->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_UdiCarrier->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_UdiCarrier->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_UdiCarrier->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_UdiCarrier->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_UdiCarrier->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_UdiCarrier->deviceIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"deviceIdentifier\" : \"%.*s\"", device_UdiCarrier->deviceIdentifier.size, device_UdiCarrier->deviceIdentifier.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_UdiCarrier->issuer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issuer\" : \"%.*s\"", device_UdiCarrier->issuer.size, device_UdiCarrier->issuer.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_UdiCarrier->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"jurisdiction\" : \"%.*s\"", device_UdiCarrier->jurisdiction.size, device_UdiCarrier->jurisdiction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_UdiCarrier->carrierAIDC)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"carrierAIDC\" : \"%.*s\"", device_UdiCarrier->carrierAIDC.size, device_UdiCarrier->carrierAIDC.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_UdiCarrier->carrierHRF)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"carrierHRF\" : \"%.*s\"", device_UdiCarrier->carrierHRF.size, device_UdiCarrier->carrierHRF.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_UdiCarrier->entryType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"entryType\" : \"%.*s\"", device_UdiCarrier->entryType.size, device_UdiCarrier->entryType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Device_DeviceName(Arena *arena, Device_DeviceName *device_DeviceName)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&device_DeviceName->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&device_DeviceName->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", device_DeviceName->id.size, device_DeviceName->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_DeviceName->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_DeviceName->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_DeviceName->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_DeviceName->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_DeviceName->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_DeviceName->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_DeviceName->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", device_DeviceName->name.size, device_DeviceName->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_DeviceName->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", device_DeviceName->type.size, device_DeviceName->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Device_Specialization(Arena *arena, Device_Specialization *device_Specialization)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&device_Specialization->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&device_Specialization->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", device_Specialization->id.size, device_Specialization->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_Specialization->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Specialization->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_Specialization->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_Specialization->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Specialization->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_Specialization->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_Specialization->systemType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, device_Specialization->systemType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_Specialization->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", device_Specialization->version.size, device_Specialization->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Device_Version(Arena *arena, Device_Version *device_Version)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&device_Version->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&device_Version->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", device_Version->id.size, device_Version->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_Version->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Version->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_Version->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_Version->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Version->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_Version->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_Version->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, device_Version->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_Version->component)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, device_Version->component);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_Version->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", device_Version->value.size, device_Version->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Device_Property(Arena *arena, Device_Property *device_Property)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&device_Property->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&device_Property->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", device_Property->id.size, device_Property->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_Property->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Property->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_Property->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_Property->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Property->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &device_Property->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_Property->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, device_Property->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&device_Property->valueQuantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Property->valueQuantity_count; i++)
		{
			String8 to_add = Serialize_Quantity(arena, &device_Property->valueQuantity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&device_Property->valueCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < device_Property->valueCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &device_Property->valueCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceDefinition(Arena *arena, DeviceDefinition *deviceDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceDefinition->id.size, deviceDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, deviceDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", deviceDefinition->implicitRules.size, deviceDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", deviceDefinition->language.size, deviceDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, deviceDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &deviceDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &deviceDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->udiDeviceIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->udiDeviceIdentifier_count; i++)
		{
			String8 to_add = Serialize_DeviceDefinition_UdiDeviceIdentifier(arena, &deviceDefinition->udiDeviceIdentifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(deviceDefinition->manufacturer_type == DeviceDefinition::ManufacturerType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", deviceDefinition->manufacturer.valueString.size, deviceDefinition->manufacturer.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceDefinition->manufacturer_type == DeviceDefinition::ManufacturerType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, deviceDefinition->manufacturer.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&deviceDefinition->deviceName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->deviceName_count; i++)
		{
			String8 to_add = Serialize_DeviceDefinition_DeviceName(arena, &deviceDefinition->deviceName[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->modelNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"modelNumber\" : \"%.*s\"", deviceDefinition->modelNumber.size, deviceDefinition->modelNumber.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceDefinition->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->specialization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->specialization_count; i++)
		{
			String8 to_add = Serialize_DeviceDefinition_Specialization(arena, &deviceDefinition->specialization[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->version_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", &deviceDefinition->version[i].size, &deviceDefinition->version[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->safety)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->safety_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &deviceDefinition->safety[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->shelfLifeStorage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->shelfLifeStorage_count; i++)
		{
			String8 to_add = Serialize_ProductShelfLife(arena, &deviceDefinition->shelfLifeStorage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->physicalCharacteristics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ProdCharacteristic(arena, deviceDefinition->physicalCharacteristics);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->languageCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->languageCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &deviceDefinition->languageCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->capability)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->capability_count; i++)
		{
			String8 to_add = Serialize_DeviceDefinition_Capability(arena, &deviceDefinition->capability[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->property_count; i++)
		{
			String8 to_add = Serialize_DeviceDefinition_Property(arena, &deviceDefinition->property[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->owner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceDefinition->owner);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &deviceDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", deviceDefinition->url.size, deviceDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->onlineInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"onlineInformation\" : \"%.*s\"", deviceDefinition->onlineInformation.size, deviceDefinition->onlineInformation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &deviceDefinition->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, deviceDefinition->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->parentDevice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceDefinition->parentDevice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition->material)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition->material_count; i++)
		{
			String8 to_add = Serialize_DeviceDefinition_Material(arena, &deviceDefinition->material[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceDefinition_UdiDeviceIdentifier(Arena *arena, DeviceDefinition_UdiDeviceIdentifier *deviceDefinition_UdiDeviceIdentifier)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceDefinition_UdiDeviceIdentifier->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceDefinition_UdiDeviceIdentifier->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceDefinition_UdiDeviceIdentifier->id.size, deviceDefinition_UdiDeviceIdentifier->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_UdiDeviceIdentifier->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_UdiDeviceIdentifier->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_UdiDeviceIdentifier->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_UdiDeviceIdentifier->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_UdiDeviceIdentifier->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_UdiDeviceIdentifier->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_UdiDeviceIdentifier->deviceIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"deviceIdentifier\" : \"%.*s\"", deviceDefinition_UdiDeviceIdentifier->deviceIdentifier.size, deviceDefinition_UdiDeviceIdentifier->deviceIdentifier.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_UdiDeviceIdentifier->issuer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issuer\" : \"%.*s\"", deviceDefinition_UdiDeviceIdentifier->issuer.size, deviceDefinition_UdiDeviceIdentifier->issuer.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_UdiDeviceIdentifier->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"jurisdiction\" : \"%.*s\"", deviceDefinition_UdiDeviceIdentifier->jurisdiction.size, deviceDefinition_UdiDeviceIdentifier->jurisdiction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceDefinition_DeviceName(Arena *arena, DeviceDefinition_DeviceName *deviceDefinition_DeviceName)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceDefinition_DeviceName->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceDefinition_DeviceName->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceDefinition_DeviceName->id.size, deviceDefinition_DeviceName->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_DeviceName->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_DeviceName->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_DeviceName->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_DeviceName->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_DeviceName->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_DeviceName->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_DeviceName->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", deviceDefinition_DeviceName->name.size, deviceDefinition_DeviceName->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_DeviceName->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", deviceDefinition_DeviceName->type.size, deviceDefinition_DeviceName->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceDefinition_Specialization(Arena *arena, DeviceDefinition_Specialization *deviceDefinition_Specialization)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceDefinition_Specialization->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceDefinition_Specialization->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceDefinition_Specialization->id.size, deviceDefinition_Specialization->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Specialization->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Specialization->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Specialization->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Specialization->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Specialization->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Specialization->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Specialization->systemType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"systemType\" : \"%.*s\"", deviceDefinition_Specialization->systemType.size, deviceDefinition_Specialization->systemType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Specialization->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", deviceDefinition_Specialization->version.size, deviceDefinition_Specialization->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceDefinition_Capability(Arena *arena, DeviceDefinition_Capability *deviceDefinition_Capability)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceDefinition_Capability->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceDefinition_Capability->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceDefinition_Capability->id.size, deviceDefinition_Capability->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Capability->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Capability->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Capability->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Capability->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Capability->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Capability->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Capability->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceDefinition_Capability->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Capability->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Capability->description_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &deviceDefinition_Capability->description[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceDefinition_Property(Arena *arena, DeviceDefinition_Property *deviceDefinition_Property)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceDefinition_Property->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceDefinition_Property->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceDefinition_Property->id.size, deviceDefinition_Property->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Property->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Property->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Property->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Property->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Property->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Property->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Property->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceDefinition_Property->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Property->valueQuantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Property->valueQuantity_count; i++)
		{
			String8 to_add = Serialize_Quantity(arena, &deviceDefinition_Property->valueQuantity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Property->valueCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Property->valueCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &deviceDefinition_Property->valueCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceDefinition_Material(Arena *arena, DeviceDefinition_Material *deviceDefinition_Material)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceDefinition_Material->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceDefinition_Material->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceDefinition_Material->id.size, deviceDefinition_Material->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Material->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Material->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Material->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Material->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceDefinition_Material->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceDefinition_Material->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceDefinition_Material->substance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceDefinition_Material->substance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Material->alternate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"alternate\" : \"%.*s\"", deviceDefinition_Material->alternate ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceDefinition_Material->allergenicIndicator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"allergenicIndicator\" : \"%.*s\"", deviceDefinition_Material->allergenicIndicator ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceMetric(Arena *arena, DeviceMetric *deviceMetric)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceMetric->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceMetric->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceMetric->id.size, deviceMetric->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, deviceMetric->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", deviceMetric->implicitRules.size, deviceMetric->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", deviceMetric->language.size, deviceMetric->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, deviceMetric->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceMetric->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &deviceMetric->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceMetric->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceMetric->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceMetric->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceMetric->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceMetric->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceMetric->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceMetric->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceMetric->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &deviceMetric->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceMetric->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceMetric->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceMetric->unit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceMetric->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->parent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceMetric->parent);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->operationalStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"operationalStatus\" : \"%.*s\"", deviceMetric->operationalStatus.size, deviceMetric->operationalStatus.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->color)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"color\" : \"%.*s\"", deviceMetric->color.size, deviceMetric->color.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"category\" : \"%.*s\"", deviceMetric->category.size, deviceMetric->category.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->measurementPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Timing(arena, deviceMetric->measurementPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric->calibration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceMetric->calibration_count; i++)
		{
			String8 to_add = Serialize_DeviceMetric_Calibration(arena, &deviceMetric->calibration[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceMetric_Calibration(Arena *arena, DeviceMetric_Calibration *deviceMetric_Calibration)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceMetric_Calibration->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceMetric_Calibration->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceMetric_Calibration->id.size, deviceMetric_Calibration->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric_Calibration->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceMetric_Calibration->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceMetric_Calibration->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceMetric_Calibration->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceMetric_Calibration->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceMetric_Calibration->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceMetric_Calibration->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", deviceMetric_Calibration->type.size, deviceMetric_Calibration->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric_Calibration->state)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"state\" : \"%.*s\"", deviceMetric_Calibration->state.size, deviceMetric_Calibration->state.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceMetric_Calibration->time)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"time\" : \"%.*s\"", deviceMetric_Calibration->time.size, deviceMetric_Calibration->time.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceRequest(Arena *arena, DeviceRequest *deviceRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceRequest->id.size, deviceRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, deviceRequest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", deviceRequest->implicitRules.size, deviceRequest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", deviceRequest->language.size, deviceRequest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, deviceRequest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &deviceRequest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &deviceRequest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &deviceRequest->instantiatesCanonical[i].size, &deviceRequest->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &deviceRequest->instantiatesUri[i].size, &deviceRequest->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceRequest->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->priorRequest)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->priorRequest_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceRequest->priorRequest[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->groupIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, deviceRequest->groupIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", deviceRequest->status.size, deviceRequest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", deviceRequest->intent.size, deviceRequest->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", deviceRequest->priority.size, deviceRequest->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(deviceRequest->code_type == DeviceRequest::CodeType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, deviceRequest->code.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceRequest->code_type == DeviceRequest::CodeType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, deviceRequest->code.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&deviceRequest->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->parameter_count; i++)
		{
			String8 to_add = Serialize_DeviceRequest_Parameter(arena, &deviceRequest->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceRequest->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceRequest->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(deviceRequest->occurrence_type == DeviceRequest::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", deviceRequest->occurrence.valueDateTime.size, deviceRequest->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceRequest->occurrence_type == DeviceRequest::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, deviceRequest->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceRequest->occurrence_type == DeviceRequest::OccurrenceType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, deviceRequest->occurrence.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&deviceRequest->authoredOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authoredOn\" : \"%.*s\"", deviceRequest->authoredOn.size, deviceRequest->authoredOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->requester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceRequest->requester);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->performerType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceRequest->performerType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceRequest->performer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &deviceRequest->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceRequest->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->insurance_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceRequest->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceRequest->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &deviceRequest->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest->relevantHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest->relevantHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceRequest->relevantHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceRequest_Parameter(Arena *arena, DeviceRequest_Parameter *deviceRequest_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceRequest_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceRequest_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceRequest_Parameter->id.size, deviceRequest_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceRequest_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceRequest_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceRequest_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceRequest_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceRequest_Parameter->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceRequest_Parameter->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(deviceRequest_Parameter->value_type == DeviceRequest_Parameter::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, deviceRequest_Parameter->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceRequest_Parameter->value_type == DeviceRequest_Parameter::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, deviceRequest_Parameter->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceRequest_Parameter->value_type == DeviceRequest_Parameter::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, deviceRequest_Parameter->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceRequest_Parameter->value_type == DeviceRequest_Parameter::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", deviceRequest_Parameter->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DeviceUseStatement(Arena *arena, DeviceUseStatement *deviceUseStatement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&deviceUseStatement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&deviceUseStatement->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", deviceUseStatement->id.size, deviceUseStatement->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, deviceUseStatement->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", deviceUseStatement->implicitRules.size, deviceUseStatement->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", deviceUseStatement->language.size, deviceUseStatement->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, deviceUseStatement->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &deviceUseStatement->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceUseStatement->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceUseStatement->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceUseStatement->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &deviceUseStatement->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceUseStatement->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &deviceUseStatement->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceUseStatement->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceUseStatement->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceUseStatement->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", deviceUseStatement->status.size, deviceUseStatement->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceUseStatement->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->derivedFrom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->derivedFrom_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceUseStatement->derivedFrom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(deviceUseStatement->timing_type == DeviceUseStatement::TimingType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, deviceUseStatement->timing.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceUseStatement->timing_type == DeviceUseStatement::TimingType::Period)	
	{
			String8 to_add = Serialize_Period(arena, deviceUseStatement->timing.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(deviceUseStatement->timing_type == DeviceUseStatement::TimingType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", deviceUseStatement->timing.valueDateTime.size, deviceUseStatement->timing.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&deviceUseStatement->recordedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recordedOn\" : \"%.*s\"", deviceUseStatement->recordedOn.size, deviceUseStatement->recordedOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceUseStatement->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->device)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, deviceUseStatement->device);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &deviceUseStatement->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceUseStatement->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &deviceUseStatement->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&deviceUseStatement->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, deviceUseStatement->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&deviceUseStatement->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < deviceUseStatement->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &deviceUseStatement->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DiagnosticReport(Arena *arena, DiagnosticReport *diagnosticReport)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&diagnosticReport->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&diagnosticReport->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", diagnosticReport->id.size, diagnosticReport->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, diagnosticReport->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", diagnosticReport->implicitRules.size, diagnosticReport->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", diagnosticReport->language.size, diagnosticReport->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, diagnosticReport->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &diagnosticReport->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &diagnosticReport->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &diagnosticReport->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &diagnosticReport->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &diagnosticReport->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", diagnosticReport->status.size, diagnosticReport->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &diagnosticReport->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, diagnosticReport->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, diagnosticReport->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, diagnosticReport->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(diagnosticReport->effective_type == DiagnosticReport::EffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", diagnosticReport->effective.valueDateTime.size, diagnosticReport->effective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(diagnosticReport->effective_type == DiagnosticReport::EffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, diagnosticReport->effective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&diagnosticReport->issued)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issued\" : \"%.*s\"", diagnosticReport->issued.size, diagnosticReport->issued.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->performer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &diagnosticReport->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->resultsInterpreter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->resultsInterpreter_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &diagnosticReport->resultsInterpreter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->specimen)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->specimen_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &diagnosticReport->specimen[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->result)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->result_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &diagnosticReport->result[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->imagingStudy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->imagingStudy_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &diagnosticReport->imagingStudy[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->media)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->media_count; i++)
		{
			String8 to_add = Serialize_DiagnosticReport_Media(arena, &diagnosticReport->media[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->conclusion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"conclusion\" : \"%.*s\"", diagnosticReport->conclusion.size, diagnosticReport->conclusion.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport->conclusionCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->conclusionCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &diagnosticReport->conclusionCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport->presentedForm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport->presentedForm_count; i++)
		{
			String8 to_add = Serialize_Attachment(arena, &diagnosticReport->presentedForm[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DiagnosticReport_Media(Arena *arena, DiagnosticReport_Media *diagnosticReport_Media)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&diagnosticReport_Media->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&diagnosticReport_Media->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", diagnosticReport_Media->id.size, diagnosticReport_Media->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport_Media->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport_Media->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &diagnosticReport_Media->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport_Media->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < diagnosticReport_Media->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &diagnosticReport_Media->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&diagnosticReport_Media->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", diagnosticReport_Media->comment.size, diagnosticReport_Media->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&diagnosticReport_Media->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, diagnosticReport_Media->link);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DocumentManifest(Arena *arena, DocumentManifest *documentManifest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&documentManifest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&documentManifest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", documentManifest->id.size, documentManifest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, documentManifest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", documentManifest->implicitRules.size, documentManifest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", documentManifest->language.size, documentManifest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, documentManifest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &documentManifest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentManifest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentManifest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest->masterIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, documentManifest->masterIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &documentManifest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", documentManifest->status.size, documentManifest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, documentManifest->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, documentManifest->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", documentManifest->created.size, documentManifest->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->author_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &documentManifest->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest->recipient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->recipient_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &documentManifest->recipient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"source\" : \"%.*s\"", documentManifest->source.size, documentManifest->source.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", documentManifest->description.size, documentManifest->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest->content)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->content_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &documentManifest->content[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest->related)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest->related_count; i++)
		{
			String8 to_add = Serialize_DocumentManifest_Related(arena, &documentManifest->related[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DocumentManifest_Related(Arena *arena, DocumentManifest_Related *documentManifest_Related)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&documentManifest_Related->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&documentManifest_Related->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", documentManifest_Related->id.size, documentManifest_Related->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest_Related->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest_Related->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentManifest_Related->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest_Related->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentManifest_Related->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentManifest_Related->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentManifest_Related->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, documentManifest_Related->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentManifest_Related->ref)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, documentManifest_Related->ref);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DocumentReference(Arena *arena, DocumentReference *documentReference)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&documentReference->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&documentReference->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", documentReference->id.size, documentReference->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, documentReference->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", documentReference->implicitRules.size, documentReference->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", documentReference->language.size, documentReference->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, documentReference->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &documentReference->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->masterIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, documentReference->masterIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &documentReference->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", documentReference->status.size, documentReference->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->docStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"docStatus\" : \"%.*s\"", documentReference->docStatus.size, documentReference->docStatus.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, documentReference->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &documentReference->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, documentReference->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", documentReference->date.size, documentReference->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->author_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &documentReference->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->authenticator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, documentReference->authenticator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->custodian)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, documentReference->custodian);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->relatesTo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->relatesTo_count; i++)
		{
			String8 to_add = Serialize_DocumentReference_RelatesTo(arena, &documentReference->relatesTo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", documentReference->description.size, documentReference->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference->securityLabel)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->securityLabel_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &documentReference->securityLabel[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->content)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference->content_count; i++)
		{
			String8 to_add = Serialize_DocumentReference_Content(arena, &documentReference->content[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_DocumentReference_Context(arena, documentReference->context);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DocumentReference_RelatesTo(Arena *arena, DocumentReference_RelatesTo *documentReference_RelatesTo)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&documentReference_RelatesTo->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&documentReference_RelatesTo->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", documentReference_RelatesTo->id.size, documentReference_RelatesTo->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_RelatesTo->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_RelatesTo->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference_RelatesTo->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_RelatesTo->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_RelatesTo->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference_RelatesTo->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_RelatesTo->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", documentReference_RelatesTo->code.size, documentReference_RelatesTo->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_RelatesTo->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, documentReference_RelatesTo->target);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DocumentReference_Content(Arena *arena, DocumentReference_Content *documentReference_Content)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&documentReference_Content->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&documentReference_Content->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", documentReference_Content->id.size, documentReference_Content->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_Content->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_Content->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference_Content->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_Content->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_Content->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference_Content->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_Content->attachment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, documentReference_Content->attachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_Content->format)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, documentReference_Content->format);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DocumentReference_Context(Arena *arena, DocumentReference_Context *documentReference_Context)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&documentReference_Context->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&documentReference_Context->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", documentReference_Context->id.size, documentReference_Context->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_Context->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_Context->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference_Context->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_Context->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_Context->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &documentReference_Context->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_Context->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_Context->encounter_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &documentReference_Context->encounter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_Context->event)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_Context->event_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &documentReference_Context->event[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&documentReference_Context->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, documentReference_Context->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_Context->facilityType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, documentReference_Context->facilityType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_Context->practiceSetting)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, documentReference_Context->practiceSetting);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_Context->sourcePatientInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, documentReference_Context->sourcePatientInfo);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&documentReference_Context->related)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < documentReference_Context->related_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &documentReference_Context->related[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DomainResource(Arena *arena, DomainResource *domainResource)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&domainResource->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&domainResource->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", domainResource->id.size, domainResource->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&domainResource->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, domainResource->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&domainResource->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", domainResource->implicitRules.size, domainResource->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&domainResource->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", domainResource->language.size, domainResource->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&domainResource->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, domainResource->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&domainResource->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < domainResource->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &domainResource->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&domainResource->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < domainResource->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &domainResource->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&domainResource->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < domainResource->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &domainResource->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EffectEvidenceSynthesis(Arena *arena, EffectEvidenceSynthesis *effectEvidenceSynthesis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&effectEvidenceSynthesis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", effectEvidenceSynthesis->id.size, effectEvidenceSynthesis->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, effectEvidenceSynthesis->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", effectEvidenceSynthesis->implicitRules.size, effectEvidenceSynthesis->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", effectEvidenceSynthesis->language.size, effectEvidenceSynthesis->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, effectEvidenceSynthesis->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &effectEvidenceSynthesis->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", effectEvidenceSynthesis->url.size, effectEvidenceSynthesis->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &effectEvidenceSynthesis->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", effectEvidenceSynthesis->version.size, effectEvidenceSynthesis->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", effectEvidenceSynthesis->name.size, effectEvidenceSynthesis->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", effectEvidenceSynthesis->title.size, effectEvidenceSynthesis->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", effectEvidenceSynthesis->status.size, effectEvidenceSynthesis->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", effectEvidenceSynthesis->date.size, effectEvidenceSynthesis->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", effectEvidenceSynthesis->publisher.size, effectEvidenceSynthesis->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &effectEvidenceSynthesis->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", effectEvidenceSynthesis->description.size, effectEvidenceSynthesis->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &effectEvidenceSynthesis->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &effectEvidenceSynthesis->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &effectEvidenceSynthesis->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", effectEvidenceSynthesis->copyright.size, effectEvidenceSynthesis->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", effectEvidenceSynthesis->approvalDate.size, effectEvidenceSynthesis->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", effectEvidenceSynthesis->lastReviewDate.size, effectEvidenceSynthesis->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, effectEvidenceSynthesis->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &effectEvidenceSynthesis->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &effectEvidenceSynthesis->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &effectEvidenceSynthesis->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &effectEvidenceSynthesis->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &effectEvidenceSynthesis->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &effectEvidenceSynthesis->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->synthesisType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis->synthesisType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->studyType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis->studyType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, effectEvidenceSynthesis->population);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->exposure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, effectEvidenceSynthesis->exposure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->exposureAlternative)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, effectEvidenceSynthesis->exposureAlternative);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, effectEvidenceSynthesis->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->sampleSize)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_EffectEvidenceSynthesis_SampleSize(arena, effectEvidenceSynthesis->sampleSize);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis->resultsByExposure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->resultsByExposure_count; i++)
		{
			String8 to_add = Serialize_EffectEvidenceSynthesis_ResultsByExposure(arena, &effectEvidenceSynthesis->resultsByExposure[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->effectEstimate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->effectEstimate_count; i++)
		{
			String8 to_add = Serialize_EffectEvidenceSynthesis_EffectEstimate(arena, &effectEvidenceSynthesis->effectEstimate[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis->certainty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis->certainty_count; i++)
		{
			String8 to_add = Serialize_EffectEvidenceSynthesis_Certainty(arena, &effectEvidenceSynthesis->certainty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EffectEvidenceSynthesis_SampleSize(Arena *arena, EffectEvidenceSynthesis_SampleSize *effectEvidenceSynthesis_SampleSize)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&effectEvidenceSynthesis_SampleSize->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_SampleSize->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", effectEvidenceSynthesis_SampleSize->id.size, effectEvidenceSynthesis_SampleSize->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_SampleSize->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_SampleSize->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_SampleSize->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_SampleSize->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_SampleSize->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_SampleSize->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_SampleSize->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", effectEvidenceSynthesis_SampleSize->description.size, effectEvidenceSynthesis_SampleSize->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_SampleSize->numberOfStudies)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, effectEvidenceSynthesis_SampleSize->numberOfStudies);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_SampleSize->numberOfParticipants)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, effectEvidenceSynthesis_SampleSize->numberOfParticipants);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EffectEvidenceSynthesis_ResultsByExposure(Arena *arena, EffectEvidenceSynthesis_ResultsByExposure *effectEvidenceSynthesis_ResultsByExposure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", effectEvidenceSynthesis_ResultsByExposure->id.size, effectEvidenceSynthesis_ResultsByExposure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_ResultsByExposure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_ResultsByExposure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_ResultsByExposure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_ResultsByExposure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", effectEvidenceSynthesis_ResultsByExposure->description.size, effectEvidenceSynthesis_ResultsByExposure->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->exposureState)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"exposureState\" : \"%.*s\"", effectEvidenceSynthesis_ResultsByExposure->exposureState.size, effectEvidenceSynthesis_ResultsByExposure->exposureState.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->variantState)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis_ResultsByExposure->variantState);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_ResultsByExposure->riskEvidenceSynthesis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, effectEvidenceSynthesis_ResultsByExposure->riskEvidenceSynthesis);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EffectEvidenceSynthesis_EffectEstimate(Arena *arena, EffectEvidenceSynthesis_EffectEstimate *effectEvidenceSynthesis_EffectEstimate)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", effectEvidenceSynthesis_EffectEstimate->id.size, effectEvidenceSynthesis_EffectEstimate->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_EffectEstimate->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_EffectEstimate->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_EffectEstimate->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_EffectEstimate->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", effectEvidenceSynthesis_EffectEstimate->description.size, effectEvidenceSynthesis_EffectEstimate->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis_EffectEstimate->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->variantState)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis_EffectEstimate->variantState);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", effectEvidenceSynthesis_EffectEstimate->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->unitOfMeasure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis_EffectEstimate->unitOfMeasure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate->precisionEstimate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_EffectEstimate->precisionEstimate_count; i++)
		{
			String8 to_add = Serialize_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate(arena, &effectEvidenceSynthesis_EffectEstimate->precisionEstimate[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate(Arena *arena, EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate *effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->id.size, effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->level)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"level\" : \"%d\"", effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->level);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->from)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"from\" : \"%d\"", effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->from);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->to)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"to\" : \"%d\"", effectEvidenceSynthesis_EffectEstimate_PrecisionEstimate->to);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EffectEvidenceSynthesis_Certainty(Arena *arena, EffectEvidenceSynthesis_Certainty *effectEvidenceSynthesis_Certainty)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&effectEvidenceSynthesis_Certainty->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", effectEvidenceSynthesis_Certainty->id.size, effectEvidenceSynthesis_Certainty->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_Certainty->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_Certainty->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty->rating)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty->rating_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &effectEvidenceSynthesis_Certainty->rating[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &effectEvidenceSynthesis_Certainty->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty->certaintySubcomponent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty->certaintySubcomponent_count; i++)
		{
			String8 to_add = Serialize_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, &effectEvidenceSynthesis_Certainty->certaintySubcomponent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EffectEvidenceSynthesis_Certainty_CertaintySubcomponent(Arena *arena, EffectEvidenceSynthesis_Certainty_CertaintySubcomponent *effectEvidenceSynthesis_Certainty_CertaintySubcomponent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&effectEvidenceSynthesis_Certainty_CertaintySubcomponent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty_CertaintySubcomponent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", effectEvidenceSynthesis_Certainty_CertaintySubcomponent->id.size, effectEvidenceSynthesis_Certainty_CertaintySubcomponent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_Certainty_CertaintySubcomponent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &effectEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty_CertaintySubcomponent->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, effectEvidenceSynthesis_Certainty_CertaintySubcomponent->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &effectEvidenceSynthesis_Certainty_CertaintySubcomponent->rating[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&effectEvidenceSynthesis_Certainty_CertaintySubcomponent->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < effectEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &effectEvidenceSynthesis_Certainty_CertaintySubcomponent->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Encounter(Arena *arena, Encounter *encounter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&encounter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&encounter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", encounter->id.size, encounter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, encounter->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", encounter->implicitRules.size, encounter->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", encounter->language.size, encounter->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, encounter->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &encounter->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &encounter->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", encounter->status.size, encounter->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->statusHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->statusHistory_count; i++)
		{
			String8 to_add = Serialize_Encounter_StatusHistory(arena, &encounter->statusHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->class_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, encounter->class_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->classHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->classHistory_count; i++)
		{
			String8 to_add = Serialize_Encounter_ClassHistory(arena, &encounter->classHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &encounter->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->serviceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, encounter->serviceType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, encounter->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->episodeOfCare)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->episodeOfCare_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &encounter->episodeOfCare[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &encounter->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->participant_count; i++)
		{
			String8 to_add = Serialize_Encounter_Participant(arena, &encounter->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->appointment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->appointment_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &encounter->appointment[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, encounter->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->length)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, encounter->length);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &encounter->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &encounter->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->diagnosis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->diagnosis_count; i++)
		{
			String8 to_add = Serialize_Encounter_Diagnosis(arena, &encounter->diagnosis[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->account)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->account_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &encounter->account[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->hospitalization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Encounter_Hospitalization(arena, encounter->hospitalization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter->location_count; i++)
		{
			String8 to_add = Serialize_Encounter_Location(arena, &encounter->location[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter->serviceProvider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter->serviceProvider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter->partOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Encounter_StatusHistory(Arena *arena, Encounter_StatusHistory *encounter_StatusHistory)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&encounter_StatusHistory->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&encounter_StatusHistory->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", encounter_StatusHistory->id.size, encounter_StatusHistory->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_StatusHistory->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_StatusHistory->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_StatusHistory->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_StatusHistory->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_StatusHistory->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_StatusHistory->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_StatusHistory->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", encounter_StatusHistory->status.size, encounter_StatusHistory->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_StatusHistory->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, encounter_StatusHistory->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Encounter_ClassHistory(Arena *arena, Encounter_ClassHistory *encounter_ClassHistory)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&encounter_ClassHistory->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&encounter_ClassHistory->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", encounter_ClassHistory->id.size, encounter_ClassHistory->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_ClassHistory->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_ClassHistory->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_ClassHistory->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_ClassHistory->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_ClassHistory->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_ClassHistory->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_ClassHistory->class_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, encounter_ClassHistory->class_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_ClassHistory->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, encounter_ClassHistory->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Encounter_Participant(Arena *arena, Encounter_Participant *encounter_Participant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&encounter_Participant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&encounter_Participant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", encounter_Participant->id.size, encounter_Participant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Participant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Participant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Participant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Participant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Participant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Participant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Participant->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Participant->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &encounter_Participant->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Participant->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, encounter_Participant->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Participant->individual)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter_Participant->individual);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Encounter_Diagnosis(Arena *arena, Encounter_Diagnosis *encounter_Diagnosis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&encounter_Diagnosis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&encounter_Diagnosis->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", encounter_Diagnosis->id.size, encounter_Diagnosis->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Diagnosis->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Diagnosis->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Diagnosis->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Diagnosis->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Diagnosis->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Diagnosis->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Diagnosis->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter_Diagnosis->condition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Diagnosis->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, encounter_Diagnosis->use);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Diagnosis->rank)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rank\" : \"%d\"", encounter_Diagnosis->rank);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Encounter_Hospitalization(Arena *arena, Encounter_Hospitalization *encounter_Hospitalization)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&encounter_Hospitalization->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&encounter_Hospitalization->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", encounter_Hospitalization->id.size, encounter_Hospitalization->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Hospitalization->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Hospitalization->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Hospitalization->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Hospitalization->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Hospitalization->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Hospitalization->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Hospitalization->preAdmissionIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, encounter_Hospitalization->preAdmissionIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Hospitalization->origin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter_Hospitalization->origin);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Hospitalization->admitSource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, encounter_Hospitalization->admitSource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Hospitalization->reAdmission)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, encounter_Hospitalization->reAdmission);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Hospitalization->dietPreference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Hospitalization->dietPreference_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &encounter_Hospitalization->dietPreference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Hospitalization->specialCourtesy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Hospitalization->specialCourtesy_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &encounter_Hospitalization->specialCourtesy[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Hospitalization->specialArrangement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Hospitalization->specialArrangement_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &encounter_Hospitalization->specialArrangement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Hospitalization->destination)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter_Hospitalization->destination);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Hospitalization->dischargeDisposition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, encounter_Hospitalization->dischargeDisposition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Encounter_Location(Arena *arena, Encounter_Location *encounter_Location)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&encounter_Location->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&encounter_Location->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", encounter_Location->id.size, encounter_Location->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Location->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Location->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Location->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Location->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < encounter_Location->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &encounter_Location->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&encounter_Location->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, encounter_Location->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Location->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", encounter_Location->status.size, encounter_Location->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Location->physicalType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, encounter_Location->physicalType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&encounter_Location->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, encounter_Location->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Endpoint(Arena *arena, Endpoint *endpoint)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&endpoint->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&endpoint->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", endpoint->id.size, endpoint->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, endpoint->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", endpoint->implicitRules.size, endpoint->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", endpoint->language.size, endpoint->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, endpoint->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &endpoint->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&endpoint->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &endpoint->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&endpoint->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &endpoint->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&endpoint->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &endpoint->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&endpoint->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", endpoint->status.size, endpoint->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->connectionType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, endpoint->connectionType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", endpoint->name.size, endpoint->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->managingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, endpoint->managingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->contact_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &endpoint->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&endpoint->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, endpoint->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->payloadType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->payloadType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &endpoint->payloadType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&endpoint->payloadMimeType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->payloadMimeType_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"payloadMimeType\" : \"%.*s\"", &endpoint->payloadMimeType[i].size, &endpoint->payloadMimeType[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&endpoint->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"address\" : \"%.*s\"", endpoint->address.size, endpoint->address.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&endpoint->header)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < endpoint->header_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"header\" : \"%.*s\"", &endpoint->header[i].size, &endpoint->header[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EnrollmentRequest(Arena *arena, EnrollmentRequest *enrollmentRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&enrollmentRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&enrollmentRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", enrollmentRequest->id.size, enrollmentRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, enrollmentRequest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", enrollmentRequest->implicitRules.size, enrollmentRequest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", enrollmentRequest->language.size, enrollmentRequest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, enrollmentRequest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentRequest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &enrollmentRequest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &enrollmentRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &enrollmentRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentRequest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentRequest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &enrollmentRequest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentRequest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", enrollmentRequest->status.size, enrollmentRequest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", enrollmentRequest->created.size, enrollmentRequest->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->insurer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, enrollmentRequest->insurer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, enrollmentRequest->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->candidate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, enrollmentRequest->candidate);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentRequest->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, enrollmentRequest->coverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EnrollmentResponse(Arena *arena, EnrollmentResponse *enrollmentResponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&enrollmentResponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&enrollmentResponse->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", enrollmentResponse->id.size, enrollmentResponse->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, enrollmentResponse->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", enrollmentResponse->implicitRules.size, enrollmentResponse->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", enrollmentResponse->language.size, enrollmentResponse->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, enrollmentResponse->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentResponse->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &enrollmentResponse->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentResponse->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentResponse->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &enrollmentResponse->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentResponse->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentResponse->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &enrollmentResponse->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentResponse->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < enrollmentResponse->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &enrollmentResponse->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&enrollmentResponse->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", enrollmentResponse->status.size, enrollmentResponse->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, enrollmentResponse->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outcome\" : \"%.*s\"", enrollmentResponse->outcome.size, enrollmentResponse->outcome.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->disposition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"disposition\" : \"%.*s\"", enrollmentResponse->disposition.size, enrollmentResponse->disposition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", enrollmentResponse->created.size, enrollmentResponse->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->organization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, enrollmentResponse->organization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&enrollmentResponse->requestProvider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, enrollmentResponse->requestProvider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EpisodeOfCare(Arena *arena, EpisodeOfCare *episodeOfCare)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&episodeOfCare->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&episodeOfCare->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", episodeOfCare->id.size, episodeOfCare->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, episodeOfCare->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", episodeOfCare->implicitRules.size, episodeOfCare->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", episodeOfCare->language.size, episodeOfCare->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, episodeOfCare->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &episodeOfCare->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &episodeOfCare->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &episodeOfCare->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &episodeOfCare->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", episodeOfCare->status.size, episodeOfCare->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->statusHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->statusHistory_count; i++)
		{
			String8 to_add = Serialize_EpisodeOfCare_StatusHistory(arena, &episodeOfCare->statusHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &episodeOfCare->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->diagnosis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->diagnosis_count; i++)
		{
			String8 to_add = Serialize_EpisodeOfCare_Diagnosis(arena, &episodeOfCare->diagnosis[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, episodeOfCare->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->managingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, episodeOfCare->managingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, episodeOfCare->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->referralRequest)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->referralRequest_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &episodeOfCare->referralRequest[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->careManager)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, episodeOfCare->careManager);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare->team)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->team_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &episodeOfCare->team[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare->account)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare->account_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &episodeOfCare->account[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EpisodeOfCare_StatusHistory(Arena *arena, EpisodeOfCare_StatusHistory *episodeOfCare_StatusHistory)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&episodeOfCare_StatusHistory->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&episodeOfCare_StatusHistory->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", episodeOfCare_StatusHistory->id.size, episodeOfCare_StatusHistory->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare_StatusHistory->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare_StatusHistory->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &episodeOfCare_StatusHistory->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare_StatusHistory->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare_StatusHistory->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &episodeOfCare_StatusHistory->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare_StatusHistory->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", episodeOfCare_StatusHistory->status.size, episodeOfCare_StatusHistory->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare_StatusHistory->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, episodeOfCare_StatusHistory->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EpisodeOfCare_Diagnosis(Arena *arena, EpisodeOfCare_Diagnosis *episodeOfCare_Diagnosis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&episodeOfCare_Diagnosis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&episodeOfCare_Diagnosis->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", episodeOfCare_Diagnosis->id.size, episodeOfCare_Diagnosis->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare_Diagnosis->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare_Diagnosis->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &episodeOfCare_Diagnosis->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare_Diagnosis->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < episodeOfCare_Diagnosis->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &episodeOfCare_Diagnosis->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&episodeOfCare_Diagnosis->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, episodeOfCare_Diagnosis->condition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare_Diagnosis->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, episodeOfCare_Diagnosis->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&episodeOfCare_Diagnosis->rank)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rank\" : \"%d\"", episodeOfCare_Diagnosis->rank);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EventDefinition(Arena *arena, EventDefinition *eventDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&eventDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&eventDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", eventDefinition->id.size, eventDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, eventDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", eventDefinition->implicitRules.size, eventDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", eventDefinition->language.size, eventDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, eventDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &eventDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &eventDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &eventDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", eventDefinition->url.size, eventDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &eventDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", eventDefinition->version.size, eventDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", eventDefinition->name.size, eventDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", eventDefinition->title.size, eventDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", eventDefinition->subtitle.size, eventDefinition->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", eventDefinition->status.size, eventDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", eventDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(eventDefinition->subject_type == EventDefinition::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, eventDefinition->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(eventDefinition->subject_type == EventDefinition::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, eventDefinition->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&eventDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", eventDefinition->date.size, eventDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", eventDefinition->publisher.size, eventDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &eventDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", eventDefinition->description.size, eventDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &eventDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &eventDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", eventDefinition->purpose.size, eventDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", eventDefinition->usage.size, eventDefinition->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", eventDefinition->copyright.size, eventDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", eventDefinition->approvalDate.size, eventDefinition->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", eventDefinition->lastReviewDate.size, eventDefinition->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, eventDefinition->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&eventDefinition->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &eventDefinition->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &eventDefinition->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &eventDefinition->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &eventDefinition->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &eventDefinition->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &eventDefinition->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&eventDefinition->trigger)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < eventDefinition->trigger_count; i++)
		{
			String8 to_add = Serialize_TriggerDefinition(arena, &eventDefinition->trigger[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Evidence(Arena *arena, Evidence *evidence)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&evidence->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&evidence->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", evidence->id.size, evidence->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, evidence->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", evidence->implicitRules.size, evidence->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", evidence->language.size, evidence->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, evidence->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &evidence->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &evidence->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &evidence->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", evidence->url.size, evidence->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &evidence->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", evidence->version.size, evidence->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", evidence->name.size, evidence->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", evidence->title.size, evidence->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->shortTitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"shortTitle\" : \"%.*s\"", evidence->shortTitle.size, evidence->shortTitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", evidence->subtitle.size, evidence->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", evidence->status.size, evidence->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", evidence->date.size, evidence->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", evidence->publisher.size, evidence->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidence->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", evidence->description.size, evidence->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &evidence->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &evidence->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &evidence->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", evidence->copyright.size, evidence->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", evidence->approvalDate.size, evidence->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", evidence->lastReviewDate.size, evidence->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, evidence->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &evidence->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidence->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidence->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidence->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidence->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &evidence->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->exposureBackground)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, evidence->exposureBackground);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidence->exposureVariant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->exposureVariant_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &evidence->exposureVariant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidence->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidence->outcome_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &evidence->outcome[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EvidenceVariable(Arena *arena, EvidenceVariable *evidenceVariable)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&evidenceVariable->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&evidenceVariable->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", evidenceVariable->id.size, evidenceVariable->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, evidenceVariable->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", evidenceVariable->implicitRules.size, evidenceVariable->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", evidenceVariable->language.size, evidenceVariable->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, evidenceVariable->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &evidenceVariable->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &evidenceVariable->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &evidenceVariable->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", evidenceVariable->url.size, evidenceVariable->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &evidenceVariable->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", evidenceVariable->version.size, evidenceVariable->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", evidenceVariable->name.size, evidenceVariable->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", evidenceVariable->title.size, evidenceVariable->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->shortTitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"shortTitle\" : \"%.*s\"", evidenceVariable->shortTitle.size, evidenceVariable->shortTitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", evidenceVariable->subtitle.size, evidenceVariable->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", evidenceVariable->status.size, evidenceVariable->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", evidenceVariable->date.size, evidenceVariable->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", evidenceVariable->publisher.size, evidenceVariable->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidenceVariable->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", evidenceVariable->description.size, evidenceVariable->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &evidenceVariable->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &evidenceVariable->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &evidenceVariable->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", evidenceVariable->copyright.size, evidenceVariable->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", evidenceVariable->approvalDate.size, evidenceVariable->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", evidenceVariable->lastReviewDate.size, evidenceVariable->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, evidenceVariable->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &evidenceVariable->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidenceVariable->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidenceVariable->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidenceVariable->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &evidenceVariable->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &evidenceVariable->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", evidenceVariable->type.size, evidenceVariable->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable->characteristic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable->characteristic_count; i++)
		{
			String8 to_add = Serialize_EvidenceVariable_Characteristic(arena, &evidenceVariable->characteristic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_EvidenceVariable_Characteristic(Arena *arena, EvidenceVariable_Characteristic *evidenceVariable_Characteristic)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&evidenceVariable_Characteristic->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&evidenceVariable_Characteristic->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", evidenceVariable_Characteristic->id.size, evidenceVariable_Characteristic->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable_Characteristic->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable_Characteristic->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &evidenceVariable_Characteristic->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable_Characteristic->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable_Characteristic->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &evidenceVariable_Characteristic->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable_Characteristic->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", evidenceVariable_Characteristic->description.size, evidenceVariable_Characteristic->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(evidenceVariable_Characteristic->definition_type == EvidenceVariable_Characteristic::DefinitionType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, evidenceVariable_Characteristic->definition.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->definition_type == EvidenceVariable_Characteristic::DefinitionType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", evidenceVariable_Characteristic->definition.valueCanonical.size, evidenceVariable_Characteristic->definition.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->definition_type == EvidenceVariable_Characteristic::DefinitionType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, evidenceVariable_Characteristic->definition.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->definition_type == EvidenceVariable_Characteristic::DefinitionType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, evidenceVariable_Characteristic->definition.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->definition_type == EvidenceVariable_Characteristic::DefinitionType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, evidenceVariable_Characteristic->definition.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->definition_type == EvidenceVariable_Characteristic::DefinitionType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, evidenceVariable_Characteristic->definition.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&evidenceVariable_Characteristic->usageContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < evidenceVariable_Characteristic->usageContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &evidenceVariable_Characteristic->usageContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&evidenceVariable_Characteristic->exclude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"exclude\" : \"%.*s\"", evidenceVariable_Characteristic->exclude ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(evidenceVariable_Characteristic->participantEffective_type == EvidenceVariable_Characteristic::ParticipantEffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", evidenceVariable_Characteristic->participantEffective.valueDateTime.size, evidenceVariable_Characteristic->participantEffective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->participantEffective_type == EvidenceVariable_Characteristic::ParticipantEffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, evidenceVariable_Characteristic->participantEffective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->participantEffective_type == EvidenceVariable_Characteristic::ParticipantEffectiveType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, evidenceVariable_Characteristic->participantEffective.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(evidenceVariable_Characteristic->participantEffective_type == EvidenceVariable_Characteristic::ParticipantEffectiveType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, evidenceVariable_Characteristic->participantEffective.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&evidenceVariable_Characteristic->timeFromStart)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, evidenceVariable_Characteristic->timeFromStart);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&evidenceVariable_Characteristic->groupMeasure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"groupMeasure\" : \"%.*s\"", evidenceVariable_Characteristic->groupMeasure.size, evidenceVariable_Characteristic->groupMeasure.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario(Arena *arena, ExampleScenario *exampleScenario)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario->id.size, exampleScenario->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, exampleScenario->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", exampleScenario->implicitRules.size, exampleScenario->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", exampleScenario->language.size, exampleScenario->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, exampleScenario->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &exampleScenario->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", exampleScenario->url.size, exampleScenario->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &exampleScenario->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", exampleScenario->version.size, exampleScenario->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", exampleScenario->name.size, exampleScenario->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", exampleScenario->status.size, exampleScenario->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", exampleScenario->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", exampleScenario->date.size, exampleScenario->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", exampleScenario->publisher.size, exampleScenario->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &exampleScenario->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &exampleScenario->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &exampleScenario->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", exampleScenario->copyright.size, exampleScenario->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", exampleScenario->purpose.size, exampleScenario->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->actor_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Actor(arena, &exampleScenario->actor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->instance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->instance_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Instance(arena, &exampleScenario->instance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->process)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->process_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Process(arena, &exampleScenario->process[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario->workflow)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario->workflow_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"workflow\" : \"%.*s\"", &exampleScenario->workflow[i].size, &exampleScenario->workflow[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Actor(Arena *arena, ExampleScenario_Actor *exampleScenario_Actor)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Actor->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Actor->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Actor->id.size, exampleScenario_Actor->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Actor->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Actor->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Actor->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Actor->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Actor->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Actor->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Actor->actorId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"actorId\" : \"%.*s\"", exampleScenario_Actor->actorId.size, exampleScenario_Actor->actorId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Actor->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", exampleScenario_Actor->type.size, exampleScenario_Actor->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Actor->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", exampleScenario_Actor->name.size, exampleScenario_Actor->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Actor->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", exampleScenario_Actor->description.size, exampleScenario_Actor->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Instance(Arena *arena, ExampleScenario_Instance *exampleScenario_Instance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Instance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Instance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Instance->id.size, exampleScenario_Instance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Instance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Instance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Instance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Instance->resourceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"resourceId\" : \"%.*s\"", exampleScenario_Instance->resourceId.size, exampleScenario_Instance->resourceId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance->resourceType_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"resourceType_\" : \"%.*s\"", exampleScenario_Instance->resourceType_.size, exampleScenario_Instance->resourceType_.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", exampleScenario_Instance->name.size, exampleScenario_Instance->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", exampleScenario_Instance->description.size, exampleScenario_Instance->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance->version_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Instance_Version(arena, &exampleScenario_Instance->version[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Instance->containedInstance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance->containedInstance_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Instance_ContainedInstance(arena, &exampleScenario_Instance->containedInstance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Instance_Version(Arena *arena, ExampleScenario_Instance_Version *exampleScenario_Instance_Version)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Instance_Version->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Instance_Version->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Instance_Version->id.size, exampleScenario_Instance_Version->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance_Version->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance_Version->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Instance_Version->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Instance_Version->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance_Version->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Instance_Version->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Instance_Version->versionId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"versionId\" : \"%.*s\"", exampleScenario_Instance_Version->versionId.size, exampleScenario_Instance_Version->versionId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance_Version->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", exampleScenario_Instance_Version->description.size, exampleScenario_Instance_Version->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Instance_ContainedInstance(Arena *arena, ExampleScenario_Instance_ContainedInstance *exampleScenario_Instance_ContainedInstance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Instance_ContainedInstance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Instance_ContainedInstance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Instance_ContainedInstance->id.size, exampleScenario_Instance_ContainedInstance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance_ContainedInstance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance_ContainedInstance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Instance_ContainedInstance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Instance_ContainedInstance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Instance_ContainedInstance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Instance_ContainedInstance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Instance_ContainedInstance->resourceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"resourceId\" : \"%.*s\"", exampleScenario_Instance_ContainedInstance->resourceId.size, exampleScenario_Instance_ContainedInstance->resourceId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Instance_ContainedInstance->versionId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"versionId\" : \"%.*s\"", exampleScenario_Instance_ContainedInstance->versionId.size, exampleScenario_Instance_ContainedInstance->versionId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Process(Arena *arena, ExampleScenario_Process *exampleScenario_Process)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Process->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Process->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Process->id.size, exampleScenario_Process->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", exampleScenario_Process->title.size, exampleScenario_Process->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", exampleScenario_Process->description.size, exampleScenario_Process->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process->preConditions)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preConditions\" : \"%.*s\"", exampleScenario_Process->preConditions.size, exampleScenario_Process->preConditions.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process->postConditions)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"postConditions\" : \"%.*s\"", exampleScenario_Process->postConditions.size, exampleScenario_Process->postConditions.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process->step)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process->step_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Process_Step(arena, &exampleScenario_Process->step[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Process_Step(Arena *arena, ExampleScenario_Process_Step *exampleScenario_Process_Step)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Process_Step->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Process_Step->id.size, exampleScenario_Process_Step->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process_Step->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process_Step->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step->process)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step->process_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Process(arena, &exampleScenario_Process_Step->process[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step->pause)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"pause\" : \"%.*s\"", exampleScenario_Process_Step->pause ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ExampleScenario_Process_Step_Operation(arena, exampleScenario_Process_Step->operation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step->alternative)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step->alternative_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Process_Step_Alternative(arena, &exampleScenario_Process_Step->alternative[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Process_Step_Operation(Arena *arena, ExampleScenario_Process_Step_Operation *exampleScenario_Process_Step_Operation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Process_Step_Operation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Process_Step_Operation->id.size, exampleScenario_Process_Step_Operation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step_Operation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process_Step_Operation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step_Operation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process_Step_Operation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->number)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"number\" : \"%.*s\"", exampleScenario_Process_Step_Operation->number.size, exampleScenario_Process_Step_Operation->number.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", exampleScenario_Process_Step_Operation->type.size, exampleScenario_Process_Step_Operation->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", exampleScenario_Process_Step_Operation->name.size, exampleScenario_Process_Step_Operation->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->initiator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"initiator\" : \"%.*s\"", exampleScenario_Process_Step_Operation->initiator.size, exampleScenario_Process_Step_Operation->initiator.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->receiver)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"receiver\" : \"%.*s\"", exampleScenario_Process_Step_Operation->receiver.size, exampleScenario_Process_Step_Operation->receiver.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", exampleScenario_Process_Step_Operation->description.size, exampleScenario_Process_Step_Operation->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->initiatorActive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"initiatorActive\" : \"%.*s\"", exampleScenario_Process_Step_Operation->initiatorActive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->receiverActive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"receiverActive\" : \"%.*s\"", exampleScenario_Process_Step_Operation->receiverActive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ExampleScenario_Instance_ContainedInstance(arena, exampleScenario_Process_Step_Operation->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Operation->response)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ExampleScenario_Instance_ContainedInstance(arena, exampleScenario_Process_Step_Operation->response);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExampleScenario_Process_Step_Alternative(Arena *arena, ExampleScenario_Process_Step_Alternative *exampleScenario_Process_Step_Alternative)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&exampleScenario_Process_Step_Alternative->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step_Alternative->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", exampleScenario_Process_Step_Alternative->id.size, exampleScenario_Process_Step_Alternative->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Alternative->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step_Alternative->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process_Step_Alternative->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step_Alternative->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step_Alternative->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &exampleScenario_Process_Step_Alternative->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&exampleScenario_Process_Step_Alternative->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", exampleScenario_Process_Step_Alternative->title.size, exampleScenario_Process_Step_Alternative->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Alternative->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", exampleScenario_Process_Step_Alternative->description.size, exampleScenario_Process_Step_Alternative->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&exampleScenario_Process_Step_Alternative->step)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < exampleScenario_Process_Step_Alternative->step_count; i++)
		{
			String8 to_add = Serialize_ExampleScenario_Process_Step(arena, &exampleScenario_Process_Step_Alternative->step[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit(Arena *arena, ExplanationOfBenefit *explanationOfBenefit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit->id.size, explanationOfBenefit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, explanationOfBenefit->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", explanationOfBenefit->implicitRules.size, explanationOfBenefit->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", explanationOfBenefit->language.size, explanationOfBenefit->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, explanationOfBenefit->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &explanationOfBenefit->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &explanationOfBenefit->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", explanationOfBenefit->status.size, explanationOfBenefit->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->subType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit->subType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", explanationOfBenefit->use.size, explanationOfBenefit->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->billablePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, explanationOfBenefit->billablePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", explanationOfBenefit->created.size, explanationOfBenefit->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->enterer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->enterer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->insurer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->insurer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->fundsReserveRequested)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit->fundsReserveRequested);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->fundsReserve)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit->fundsReserve);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->related)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->related_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Related(arena, &explanationOfBenefit->related[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->prescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->prescription);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->originalPrescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->originalPrescription);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->payee)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ExplanationOfBenefit_Payee(arena, explanationOfBenefit->payee);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->referral)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->referral);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->facility)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->facility);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->claim)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->claim);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->claimResponse)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit->claimResponse);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outcome\" : \"%.*s\"", explanationOfBenefit->outcome.size, explanationOfBenefit->outcome.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->disposition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"disposition\" : \"%.*s\"", explanationOfBenefit->disposition.size, explanationOfBenefit->disposition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->preAuthRef)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->preAuthRef_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"preAuthRef\" : \"%.*s\"", &explanationOfBenefit->preAuthRef[i].size, &explanationOfBenefit->preAuthRef[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->preAuthRefPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->preAuthRefPeriod_count; i++)
		{
			String8 to_add = Serialize_Period(arena, &explanationOfBenefit->preAuthRefPeriod[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->careTeam)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->careTeam_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_CareTeam(arena, &explanationOfBenefit->careTeam[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_SupportingInfo(arena, &explanationOfBenefit->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->diagnosis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->diagnosis_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Diagnosis(arena, &explanationOfBenefit->diagnosis[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->procedure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->procedure_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Procedure(arena, &explanationOfBenefit->procedure[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->precedence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"precedence\" : \"%d\"", explanationOfBenefit->precedence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->insurance_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Insurance(arena, &explanationOfBenefit->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->accident)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ExplanationOfBenefit_Accident(arena, explanationOfBenefit->accident);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->item_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item(arena, &explanationOfBenefit->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->addItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->addItem_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_AddItem(arena, &explanationOfBenefit->addItem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->adjudication_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Adjudication(arena, &explanationOfBenefit->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->total)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->total_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Total(arena, &explanationOfBenefit->total[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->payment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ExplanationOfBenefit_Payment(arena, explanationOfBenefit->payment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->formCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit->formCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->form)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, explanationOfBenefit->form);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->processNote)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->processNote_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_ProcessNote(arena, &explanationOfBenefit->processNote[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit->benefitPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, explanationOfBenefit->benefitPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit->benefitBalance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit->benefitBalance_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_BenefitBalance(arena, &explanationOfBenefit->benefitBalance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Related(Arena *arena, ExplanationOfBenefit_Related *explanationOfBenefit_Related)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Related->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Related->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Related->id.size, explanationOfBenefit_Related->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Related->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Related->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Related->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Related->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Related->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Related->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Related->claim)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_Related->claim);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Related->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Related->relationship);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Related->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, explanationOfBenefit_Related->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Payee(Arena *arena, ExplanationOfBenefit_Payee *explanationOfBenefit_Payee)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Payee->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Payee->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Payee->id.size, explanationOfBenefit_Payee->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payee->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Payee->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Payee->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Payee->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Payee->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Payee->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Payee->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Payee->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payee->party)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_Payee->party);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_CareTeam(Arena *arena, ExplanationOfBenefit_CareTeam *explanationOfBenefit_CareTeam)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_CareTeam->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_CareTeam->id.size, explanationOfBenefit_CareTeam->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_CareTeam->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_CareTeam->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_CareTeam->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_CareTeam->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", explanationOfBenefit_CareTeam->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_CareTeam->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->responsible)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"responsible\" : \"%.*s\"", explanationOfBenefit_CareTeam->responsible ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_CareTeam->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_CareTeam->qualification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_CareTeam->qualification);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_SupportingInfo(Arena *arena, ExplanationOfBenefit_SupportingInfo *explanationOfBenefit_SupportingInfo)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_SupportingInfo->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_SupportingInfo->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_SupportingInfo->id.size, explanationOfBenefit_SupportingInfo->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_SupportingInfo->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_SupportingInfo->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_SupportingInfo->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_SupportingInfo->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_SupportingInfo->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_SupportingInfo->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_SupportingInfo->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", explanationOfBenefit_SupportingInfo->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_SupportingInfo->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_SupportingInfo->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_SupportingInfo->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_SupportingInfo->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_SupportingInfo->timing_type == ExplanationOfBenefit_SupportingInfo::TimingType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", explanationOfBenefit_SupportingInfo->timing.valueDate.size, explanationOfBenefit_SupportingInfo->timing.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_SupportingInfo->timing_type == ExplanationOfBenefit_SupportingInfo::TimingType::Period)	
	{
			String8 to_add = Serialize_Period(arena, explanationOfBenefit_SupportingInfo->timing.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_SupportingInfo->value_type == ExplanationOfBenefit_SupportingInfo::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", explanationOfBenefit_SupportingInfo->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_SupportingInfo->value_type == ExplanationOfBenefit_SupportingInfo::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", explanationOfBenefit_SupportingInfo->value.valueString.size, explanationOfBenefit_SupportingInfo->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_SupportingInfo->value_type == ExplanationOfBenefit_SupportingInfo::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, explanationOfBenefit_SupportingInfo->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_SupportingInfo->value_type == ExplanationOfBenefit_SupportingInfo::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, explanationOfBenefit_SupportingInfo->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_SupportingInfo->value_type == ExplanationOfBenefit_SupportingInfo::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_SupportingInfo->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&explanationOfBenefit_SupportingInfo->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, explanationOfBenefit_SupportingInfo->reason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Diagnosis(Arena *arena, ExplanationOfBenefit_Diagnosis *explanationOfBenefit_Diagnosis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Diagnosis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Diagnosis->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Diagnosis->id.size, explanationOfBenefit_Diagnosis->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Diagnosis->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Diagnosis->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Diagnosis->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Diagnosis->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Diagnosis->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Diagnosis->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Diagnosis->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", explanationOfBenefit_Diagnosis->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_Diagnosis->diagnosis_type == ExplanationOfBenefit_Diagnosis::DiagnosisType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Diagnosis->diagnosis.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_Diagnosis->diagnosis_type == ExplanationOfBenefit_Diagnosis::DiagnosisType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_Diagnosis->diagnosis.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&explanationOfBenefit_Diagnosis->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Diagnosis->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Diagnosis->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Diagnosis->onAdmission)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Diagnosis->onAdmission);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Diagnosis->packageCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Diagnosis->packageCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Procedure(Arena *arena, ExplanationOfBenefit_Procedure *explanationOfBenefit_Procedure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Procedure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Procedure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Procedure->id.size, explanationOfBenefit_Procedure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Procedure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Procedure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Procedure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Procedure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Procedure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Procedure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Procedure->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", explanationOfBenefit_Procedure->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Procedure->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Procedure->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Procedure->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Procedure->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", explanationOfBenefit_Procedure->date.size, explanationOfBenefit_Procedure->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_Procedure->procedure_type == ExplanationOfBenefit_Procedure::ProcedureType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Procedure->procedure.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_Procedure->procedure_type == ExplanationOfBenefit_Procedure::ProcedureType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_Procedure->procedure.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&explanationOfBenefit_Procedure->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Procedure->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &explanationOfBenefit_Procedure->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Insurance(Arena *arena, ExplanationOfBenefit_Insurance *explanationOfBenefit_Insurance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Insurance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Insurance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Insurance->id.size, explanationOfBenefit_Insurance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Insurance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Insurance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Insurance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Insurance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Insurance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Insurance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Insurance->focal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"focal\" : \"%.*s\"", explanationOfBenefit_Insurance->focal ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Insurance->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_Insurance->coverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Insurance->preAuthRef)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Insurance->preAuthRef_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"preAuthRef\" : \"%.*s\"", &explanationOfBenefit_Insurance->preAuthRef[i].size, &explanationOfBenefit_Insurance->preAuthRef[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Accident(Arena *arena, ExplanationOfBenefit_Accident *explanationOfBenefit_Accident)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Accident->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Accident->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Accident->id.size, explanationOfBenefit_Accident->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Accident->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Accident->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Accident->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Accident->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Accident->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Accident->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Accident->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", explanationOfBenefit_Accident->date.size, explanationOfBenefit_Accident->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Accident->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Accident->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_Accident->location_type == ExplanationOfBenefit_Accident::LocationType::Address)	
	{
			String8 to_add = Serialize_Address(arena, explanationOfBenefit_Accident->location.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_Accident->location_type == ExplanationOfBenefit_Accident::LocationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_Accident->location.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Item(Arena *arena, ExplanationOfBenefit_Item *explanationOfBenefit_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Item->id.size, explanationOfBenefit_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", explanationOfBenefit_Item->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->careTeamSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->careTeamSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"careTeamSequence\" : \"%d\"", &explanationOfBenefit_Item->careTeamSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->diagnosisSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->diagnosisSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"diagnosisSequence\" : \"%d\"", &explanationOfBenefit_Item->diagnosisSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->procedureSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->procedureSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"procedureSequence\" : \"%d\"", &explanationOfBenefit_Item->procedureSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->informationSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->informationSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"informationSequence\" : \"%d\"", &explanationOfBenefit_Item->informationSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->revenue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item->revenue);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Item->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Item->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_Item->serviced_type == ExplanationOfBenefit_Item::ServicedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", explanationOfBenefit_Item->serviced.valueDate.size, explanationOfBenefit_Item->serviced.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_Item->serviced_type == ExplanationOfBenefit_Item::ServicedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, explanationOfBenefit_Item->serviced.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_Item->location_type == ExplanationOfBenefit_Item::LocationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item->location.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_Item->location_type == ExplanationOfBenefit_Item::LocationType::Address)	
	{
			String8 to_add = Serialize_Address(arena, explanationOfBenefit_Item->location.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_Item->location_type == ExplanationOfBenefit_Item::LocationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_Item->location.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&explanationOfBenefit_Item->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, explanationOfBenefit_Item->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Item->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", explanationOfBenefit_Item->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Item->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &explanationOfBenefit_Item->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item->subSite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->subSite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Item->subSite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->encounter_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &explanationOfBenefit_Item->encounter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &explanationOfBenefit_Item->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->adjudication_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Adjudication(arena, &explanationOfBenefit_Item->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item->detail_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Detail(arena, &explanationOfBenefit_Item->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Item_Adjudication(Arena *arena, ExplanationOfBenefit_Item_Adjudication *explanationOfBenefit_Item_Adjudication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Item_Adjudication->id.size, explanationOfBenefit_Item_Adjudication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Adjudication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item_Adjudication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Adjudication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item_Adjudication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Adjudication->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Adjudication->reason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Item_Adjudication->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Adjudication->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", explanationOfBenefit_Item_Adjudication->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Item_Detail(Arena *arena, ExplanationOfBenefit_Item_Detail *explanationOfBenefit_Item_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Item_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Item_Detail->id.size, explanationOfBenefit_Item_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", explanationOfBenefit_Item_Detail->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->revenue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Detail->revenue);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Detail->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Detail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Item_Detail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Item_Detail->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, explanationOfBenefit_Item_Detail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Item_Detail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", explanationOfBenefit_Item_Detail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Item_Detail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &explanationOfBenefit_Item_Detail->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &explanationOfBenefit_Item_Detail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Adjudication(arena, &explanationOfBenefit_Item_Detail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail->subDetail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail->subDetail_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Detail_SubDetail(arena, &explanationOfBenefit_Item_Detail->subDetail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Item_Detail_SubDetail(Arena *arena, ExplanationOfBenefit_Item_Detail_SubDetail *explanationOfBenefit_Item_Detail_SubDetail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Item_Detail_SubDetail->id.size, explanationOfBenefit_Item_Detail_SubDetail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail_SubDetail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item_Detail_SubDetail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail_SubDetail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Item_Detail_SubDetail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", explanationOfBenefit_Item_Detail_SubDetail->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->revenue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Detail_SubDetail->revenue);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Detail_SubDetail->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Item_Detail_SubDetail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail_SubDetail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Item_Detail_SubDetail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail_SubDetail->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_Item_Detail_SubDetail->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, explanationOfBenefit_Item_Detail_SubDetail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Item_Detail_SubDetail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", explanationOfBenefit_Item_Detail_SubDetail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Item_Detail_SubDetail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->udi)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail_SubDetail->udi_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &explanationOfBenefit_Item_Detail_SubDetail->udi[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail_SubDetail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &explanationOfBenefit_Item_Detail_SubDetail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Item_Detail_SubDetail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Item_Detail_SubDetail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Adjudication(arena, &explanationOfBenefit_Item_Detail_SubDetail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_AddItem(Arena *arena, ExplanationOfBenefit_AddItem *explanationOfBenefit_AddItem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_AddItem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_AddItem->id.size, explanationOfBenefit_AddItem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_AddItem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_AddItem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->itemSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->itemSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"itemSequence\" : \"%d\"", &explanationOfBenefit_AddItem->itemSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->detailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->detailSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"detailSequence\" : \"%d\"", &explanationOfBenefit_AddItem->detailSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->subDetailSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->subDetailSequence_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"subDetailSequence\" : \"%d\"", &explanationOfBenefit_AddItem->subDetailSequence[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->provider_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &explanationOfBenefit_AddItem->provider[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_AddItem->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_AddItem->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->programCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->programCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_AddItem->programCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_AddItem->serviced_type == ExplanationOfBenefit_AddItem::ServicedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", explanationOfBenefit_AddItem->serviced.valueDate.size, explanationOfBenefit_AddItem->serviced.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_AddItem->serviced_type == ExplanationOfBenefit_AddItem::ServicedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, explanationOfBenefit_AddItem->serviced.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_AddItem->location_type == ExplanationOfBenefit_AddItem::LocationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_AddItem->location.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_AddItem->location_type == ExplanationOfBenefit_AddItem::LocationType::Address)	
	{
			String8 to_add = Serialize_Address(arena, explanationOfBenefit_AddItem->location.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_AddItem->location_type == ExplanationOfBenefit_AddItem::LocationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, explanationOfBenefit_AddItem->location.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&explanationOfBenefit_AddItem->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, explanationOfBenefit_AddItem->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_AddItem->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", explanationOfBenefit_AddItem->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_AddItem->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_AddItem->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->subSite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->subSite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_AddItem->subSite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &explanationOfBenefit_AddItem->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->adjudication_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Adjudication(arena, &explanationOfBenefit_AddItem->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem->detail_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_AddItem_Detail(arena, &explanationOfBenefit_AddItem->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_AddItem_Detail(Arena *arena, ExplanationOfBenefit_AddItem_Detail *explanationOfBenefit_AddItem_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_AddItem_Detail->id.size, explanationOfBenefit_AddItem_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_AddItem_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_AddItem_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_AddItem_Detail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_AddItem_Detail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, explanationOfBenefit_AddItem_Detail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_AddItem_Detail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", explanationOfBenefit_AddItem_Detail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_AddItem_Detail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &explanationOfBenefit_AddItem_Detail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Adjudication(arena, &explanationOfBenefit_AddItem_Detail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail->subDetail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail->subDetail_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_AddItem_Detail_SubDetail(arena, &explanationOfBenefit_AddItem_Detail->subDetail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_AddItem_Detail_SubDetail(Arena *arena, ExplanationOfBenefit_AddItem_Detail_SubDetail *explanationOfBenefit_AddItem_Detail_SubDetail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_AddItem_Detail_SubDetail->id.size, explanationOfBenefit_AddItem_Detail_SubDetail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail_SubDetail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_AddItem_Detail_SubDetail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_AddItem_Detail_SubDetail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->productOrService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_AddItem_Detail_SubDetail->productOrService);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail_SubDetail->modifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &explanationOfBenefit_AddItem_Detail_SubDetail->modifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, explanationOfBenefit_AddItem_Detail_SubDetail->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->unitPrice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_AddItem_Detail_SubDetail->unitPrice);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", explanationOfBenefit_AddItem_Detail_SubDetail->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->net)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_AddItem_Detail_SubDetail->net);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->noteNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail_SubDetail->noteNumber_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"noteNumber\" : \"%d\"", &explanationOfBenefit_AddItem_Detail_SubDetail->noteNumber[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_AddItem_Detail_SubDetail->adjudication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_AddItem_Detail_SubDetail->adjudication_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_Item_Adjudication(arena, &explanationOfBenefit_AddItem_Detail_SubDetail->adjudication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Total(Arena *arena, ExplanationOfBenefit_Total *explanationOfBenefit_Total)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Total->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Total->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Total->id.size, explanationOfBenefit_Total->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Total->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Total->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Total->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Total->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Total->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Total->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Total->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Total->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Total->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Total->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_Payment(Arena *arena, ExplanationOfBenefit_Payment *explanationOfBenefit_Payment)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_Payment->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_Payment->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_Payment->id.size, explanationOfBenefit_Payment->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payment->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Payment->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Payment->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Payment->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_Payment->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_Payment->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_Payment->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Payment->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payment->adjustment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Payment->adjustment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payment->adjustmentReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_Payment->adjustmentReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payment->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", explanationOfBenefit_Payment->date.size, explanationOfBenefit_Payment->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payment->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_Payment->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_Payment->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, explanationOfBenefit_Payment->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_ProcessNote(Arena *arena, ExplanationOfBenefit_ProcessNote *explanationOfBenefit_ProcessNote)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_ProcessNote->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_ProcessNote->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_ProcessNote->id.size, explanationOfBenefit_ProcessNote->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_ProcessNote->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_ProcessNote->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_ProcessNote->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_ProcessNote->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_ProcessNote->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_ProcessNote->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_ProcessNote->number)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"number\" : \"%d\"", explanationOfBenefit_ProcessNote->number);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_ProcessNote->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", explanationOfBenefit_ProcessNote->type.size, explanationOfBenefit_ProcessNote->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_ProcessNote->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", explanationOfBenefit_ProcessNote->text.size, explanationOfBenefit_ProcessNote->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_ProcessNote->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_ProcessNote->language);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_BenefitBalance(Arena *arena, ExplanationOfBenefit_BenefitBalance *explanationOfBenefit_BenefitBalance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_BenefitBalance->id.size, explanationOfBenefit_BenefitBalance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_BenefitBalance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_BenefitBalance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_BenefitBalance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_BenefitBalance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_BenefitBalance->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->excluded)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"excluded\" : \"%.*s\"", explanationOfBenefit_BenefitBalance->excluded ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", explanationOfBenefit_BenefitBalance->name.size, explanationOfBenefit_BenefitBalance->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", explanationOfBenefit_BenefitBalance->description.size, explanationOfBenefit_BenefitBalance->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_BenefitBalance->network);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_BenefitBalance->unit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->term)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_BenefitBalance->term);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance->financial)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_BenefitBalance->financial_count; i++)
		{
			String8 to_add = Serialize_ExplanationOfBenefit_BenefitBalance_Financial(arena, &explanationOfBenefit_BenefitBalance->financial[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ExplanationOfBenefit_BenefitBalance_Financial(Arena *arena, ExplanationOfBenefit_BenefitBalance_Financial *explanationOfBenefit_BenefitBalance_Financial)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&explanationOfBenefit_BenefitBalance_Financial->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance_Financial->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", explanationOfBenefit_BenefitBalance_Financial->id.size, explanationOfBenefit_BenefitBalance_Financial->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance_Financial->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_BenefitBalance_Financial->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_BenefitBalance_Financial->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance_Financial->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < explanationOfBenefit_BenefitBalance_Financial->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &explanationOfBenefit_BenefitBalance_Financial->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&explanationOfBenefit_BenefitBalance_Financial->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, explanationOfBenefit_BenefitBalance_Financial->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_BenefitBalance_Financial->allowed_type == ExplanationOfBenefit_BenefitBalance_Financial::AllowedType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", explanationOfBenefit_BenefitBalance_Financial->allowed.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_BenefitBalance_Financial->allowed_type == ExplanationOfBenefit_BenefitBalance_Financial::AllowedType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", explanationOfBenefit_BenefitBalance_Financial->allowed.valueString.size, explanationOfBenefit_BenefitBalance_Financial->allowed.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_BenefitBalance_Financial->allowed_type == ExplanationOfBenefit_BenefitBalance_Financial::AllowedType::Money)	
	{
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_BenefitBalance_Financial->allowed.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(explanationOfBenefit_BenefitBalance_Financial->used_type == ExplanationOfBenefit_BenefitBalance_Financial::UsedType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", explanationOfBenefit_BenefitBalance_Financial->used.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(explanationOfBenefit_BenefitBalance_Financial->used_type == ExplanationOfBenefit_BenefitBalance_Financial::UsedType::Money)	
	{
			String8 to_add = Serialize_Money(arena, explanationOfBenefit_BenefitBalance_Financial->used.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_FamilyMemberHistory(Arena *arena, FamilyMemberHistory *familyMemberHistory)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&familyMemberHistory->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&familyMemberHistory->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", familyMemberHistory->id.size, familyMemberHistory->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, familyMemberHistory->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", familyMemberHistory->implicitRules.size, familyMemberHistory->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", familyMemberHistory->language.size, familyMemberHistory->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, familyMemberHistory->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &familyMemberHistory->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &familyMemberHistory->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &familyMemberHistory->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &familyMemberHistory->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &familyMemberHistory->instantiatesCanonical[i].size, &familyMemberHistory->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &familyMemberHistory->instantiatesUri[i].size, &familyMemberHistory->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", familyMemberHistory->status.size, familyMemberHistory->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->dataAbsentReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, familyMemberHistory->dataAbsentReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, familyMemberHistory->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", familyMemberHistory->date.size, familyMemberHistory->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", familyMemberHistory->name.size, familyMemberHistory->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, familyMemberHistory->relationship);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory->sex)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, familyMemberHistory->sex);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(familyMemberHistory->born_type == FamilyMemberHistory::BornType::Period)	
	{
			String8 to_add = Serialize_Period(arena, familyMemberHistory->born.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->born_type == FamilyMemberHistory::BornType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", familyMemberHistory->born.valueDate.size, familyMemberHistory->born.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->born_type == FamilyMemberHistory::BornType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", familyMemberHistory->born.valueString.size, familyMemberHistory->born.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(familyMemberHistory->age_type == FamilyMemberHistory::AgeType::Age)	
	{
			String8 to_add = Serialize_Age(arena, familyMemberHistory->age.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->age_type == FamilyMemberHistory::AgeType::Range)	
	{
			String8 to_add = Serialize_Range(arena, familyMemberHistory->age.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->age_type == FamilyMemberHistory::AgeType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", familyMemberHistory->age.valueString.size, familyMemberHistory->age.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&familyMemberHistory->estimatedAge)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"estimatedAge\" : \"%.*s\"", familyMemberHistory->estimatedAge ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(familyMemberHistory->deceased_type == FamilyMemberHistory::DeceasedType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", familyMemberHistory->deceased.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->deceased_type == FamilyMemberHistory::DeceasedType::Age)	
	{
			String8 to_add = Serialize_Age(arena, familyMemberHistory->deceased.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->deceased_type == FamilyMemberHistory::DeceasedType::Range)	
	{
			String8 to_add = Serialize_Range(arena, familyMemberHistory->deceased.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->deceased_type == FamilyMemberHistory::DeceasedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", familyMemberHistory->deceased.valueDate.size, familyMemberHistory->deceased.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory->deceased_type == FamilyMemberHistory::DeceasedType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", familyMemberHistory->deceased.valueString.size, familyMemberHistory->deceased.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&familyMemberHistory->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &familyMemberHistory->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &familyMemberHistory->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &familyMemberHistory->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory->condition_count; i++)
		{
			String8 to_add = Serialize_FamilyMemberHistory_Condition(arena, &familyMemberHistory->condition[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_FamilyMemberHistory_Condition(Arena *arena, FamilyMemberHistory_Condition *familyMemberHistory_Condition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&familyMemberHistory_Condition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&familyMemberHistory_Condition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", familyMemberHistory_Condition->id.size, familyMemberHistory_Condition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory_Condition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory_Condition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &familyMemberHistory_Condition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory_Condition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory_Condition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &familyMemberHistory_Condition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&familyMemberHistory_Condition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, familyMemberHistory_Condition->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory_Condition->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, familyMemberHistory_Condition->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&familyMemberHistory_Condition->contributedToDeath)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"contributedToDeath\" : \"%.*s\"", familyMemberHistory_Condition->contributedToDeath ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(familyMemberHistory_Condition->onset_type == FamilyMemberHistory_Condition::OnsetType::Age)	
	{
			String8 to_add = Serialize_Age(arena, familyMemberHistory_Condition->onset.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory_Condition->onset_type == FamilyMemberHistory_Condition::OnsetType::Range)	
	{
			String8 to_add = Serialize_Range(arena, familyMemberHistory_Condition->onset.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory_Condition->onset_type == FamilyMemberHistory_Condition::OnsetType::Period)	
	{
			String8 to_add = Serialize_Period(arena, familyMemberHistory_Condition->onset.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(familyMemberHistory_Condition->onset_type == FamilyMemberHistory_Condition::OnsetType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", familyMemberHistory_Condition->onset.valueString.size, familyMemberHistory_Condition->onset.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&familyMemberHistory_Condition->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < familyMemberHistory_Condition->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &familyMemberHistory_Condition->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Flag(Arena *arena, Flag *flag)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&flag->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&flag->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", flag->id.size, flag->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, flag->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", flag->implicitRules.size, flag->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", flag->language.size, flag->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, flag->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < flag->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &flag->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&flag->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < flag->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &flag->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&flag->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < flag->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &flag->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&flag->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < flag->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &flag->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&flag->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", flag->status.size, flag->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < flag->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &flag->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&flag->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, flag->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, flag->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, flag->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, flag->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&flag->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, flag->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Goal(Arena *arena, Goal *goal)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&goal->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&goal->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", goal->id.size, goal->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, goal->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", goal->implicitRules.size, goal->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", goal->language.size, goal->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, goal->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &goal->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &goal->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &goal->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &goal->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->lifecycleStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lifecycleStatus\" : \"%.*s\"", goal->lifecycleStatus.size, goal->lifecycleStatus.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->achievementStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, goal->achievementStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &goal->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, goal->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, goal->description);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, goal->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(goal->start_type == Goal::StartType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", goal->start.valueDate.size, goal->start.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal->start_type == Goal::StartType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, goal->start.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&goal->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->target_count; i++)
		{
			String8 to_add = Serialize_Goal_Target(arena, &goal->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->statusDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"statusDate\" : \"%.*s\"", goal->statusDate.size, goal->statusDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"statusReason\" : \"%.*s\"", goal->statusReason.size, goal->statusReason.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->expressedBy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, goal->expressedBy);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal->addresses)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->addresses_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &goal->addresses[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &goal->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->outcomeCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->outcomeCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &goal->outcomeCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal->outcomeReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal->outcomeReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &goal->outcomeReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Goal_Target(Arena *arena, Goal_Target *goal_Target)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&goal_Target->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&goal_Target->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", goal_Target->id.size, goal_Target->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&goal_Target->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal_Target->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &goal_Target->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal_Target->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < goal_Target->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &goal_Target->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&goal_Target->measure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, goal_Target->measure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(goal_Target->detail_type == Goal_Target::DetailType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, goal_Target->detail.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal_Target->detail_type == Goal_Target::DetailType::Range)	
	{
			String8 to_add = Serialize_Range(arena, goal_Target->detail.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal_Target->detail_type == Goal_Target::DetailType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, goal_Target->detail.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal_Target->detail_type == Goal_Target::DetailType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", goal_Target->detail.valueString.size, goal_Target->detail.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal_Target->detail_type == Goal_Target::DetailType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", goal_Target->detail.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal_Target->detail_type == Goal_Target::DetailType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, goal_Target->detail.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal_Target->detail_type == Goal_Target::DetailType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, goal_Target->detail.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(goal_Target->due_type == Goal_Target::DueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", goal_Target->due.valueDate.size, goal_Target->due.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(goal_Target->due_type == Goal_Target::DueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, goal_Target->due.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_GraphDefinition(Arena *arena, GraphDefinition *graphDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&graphDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&graphDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", graphDefinition->id.size, graphDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, graphDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", graphDefinition->implicitRules.size, graphDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", graphDefinition->language.size, graphDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, graphDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &graphDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", graphDefinition->url.size, graphDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", graphDefinition->version.size, graphDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", graphDefinition->name.size, graphDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", graphDefinition->status.size, graphDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", graphDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", graphDefinition->date.size, graphDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", graphDefinition->publisher.size, graphDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &graphDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", graphDefinition->description.size, graphDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &graphDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &graphDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", graphDefinition->purpose.size, graphDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"start\" : \"%.*s\"", graphDefinition->start.size, graphDefinition->start.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", graphDefinition->profile.size, graphDefinition->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition->link_count; i++)
		{
			String8 to_add = Serialize_GraphDefinition_Link(arena, &graphDefinition->link[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_GraphDefinition_Link(Arena *arena, GraphDefinition_Link *graphDefinition_Link)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&graphDefinition_Link->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&graphDefinition_Link->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", graphDefinition_Link->id.size, graphDefinition_Link->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition_Link->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition_Link->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition_Link->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition_Link->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", graphDefinition_Link->path.size, graphDefinition_Link->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link->sliceName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sliceName\" : \"%.*s\"", graphDefinition_Link->sliceName.size, graphDefinition_Link->sliceName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link->min)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, graphDefinition_Link->min);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link->max)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"max\" : \"%.*s\"", graphDefinition_Link->max.size, graphDefinition_Link->max.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", graphDefinition_Link->description.size, graphDefinition_Link->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link->target_count; i++)
		{
			String8 to_add = Serialize_GraphDefinition_Link_Target(arena, &graphDefinition_Link->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_GraphDefinition_Link_Target(Arena *arena, GraphDefinition_Link_Target *graphDefinition_Link_Target)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&graphDefinition_Link_Target->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&graphDefinition_Link_Target->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", graphDefinition_Link_Target->id.size, graphDefinition_Link_Target->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link_Target->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition_Link_Target->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition_Link_Target->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link_Target->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition_Link_Target->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition_Link_Target->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", graphDefinition_Link_Target->type.size, graphDefinition_Link_Target->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target->params)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"params\" : \"%.*s\"", graphDefinition_Link_Target->params.size, graphDefinition_Link_Target->params.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", graphDefinition_Link_Target->profile.size, graphDefinition_Link_Target->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target->compartment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link_Target->compartment_count; i++)
		{
			String8 to_add = Serialize_GraphDefinition_Link_Target_Compartment(arena, &graphDefinition_Link_Target->compartment[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition_Link_Target->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link_Target->link_count; i++)
		{
			String8 to_add = Serialize_GraphDefinition_Link(arena, &graphDefinition_Link_Target->link[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_GraphDefinition_Link_Target_Compartment(Arena *arena, GraphDefinition_Link_Target_Compartment *graphDefinition_Link_Target_Compartment)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", graphDefinition_Link_Target_Compartment->id.size, graphDefinition_Link_Target_Compartment->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link_Target_Compartment->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition_Link_Target_Compartment->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < graphDefinition_Link_Target_Compartment->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &graphDefinition_Link_Target_Compartment->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", graphDefinition_Link_Target_Compartment->use.size, graphDefinition_Link_Target_Compartment->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", graphDefinition_Link_Target_Compartment->code.size, graphDefinition_Link_Target_Compartment->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->rule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rule\" : \"%.*s\"", graphDefinition_Link_Target_Compartment->rule.size, graphDefinition_Link_Target_Compartment->rule.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", graphDefinition_Link_Target_Compartment->expression.size, graphDefinition_Link_Target_Compartment->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&graphDefinition_Link_Target_Compartment->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", graphDefinition_Link_Target_Compartment->description.size, graphDefinition_Link_Target_Compartment->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Group(Arena *arena, Group *group)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&group->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&group->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", group->id.size, group->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, group->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", group->implicitRules.size, group->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", group->language.size, group->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, group->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &group->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &group->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &group->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &group->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", group->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", group->type.size, group->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->actual)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"actual\" : \"%.*s\"", group->actual ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, group->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", group->name.size, group->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"quantity\" : \"%d\"", group->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->managingEntity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, group->managingEntity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group->characteristic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group->characteristic_count; i++)
		{
			String8 to_add = Serialize_Group_Characteristic(arena, &group->characteristic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group->member)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group->member_count; i++)
		{
			String8 to_add = Serialize_Group_Member(arena, &group->member[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Group_Characteristic(Arena *arena, Group_Characteristic *group_Characteristic)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&group_Characteristic->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&group_Characteristic->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", group_Characteristic->id.size, group_Characteristic->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group_Characteristic->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group_Characteristic->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &group_Characteristic->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group_Characteristic->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group_Characteristic->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &group_Characteristic->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group_Characteristic->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, group_Characteristic->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(group_Characteristic->value_type == Group_Characteristic::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, group_Characteristic->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(group_Characteristic->value_type == Group_Characteristic::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", group_Characteristic->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(group_Characteristic->value_type == Group_Characteristic::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, group_Characteristic->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(group_Characteristic->value_type == Group_Characteristic::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, group_Characteristic->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(group_Characteristic->value_type == Group_Characteristic::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, group_Characteristic->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&group_Characteristic->exclude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"exclude\" : \"%.*s\"", group_Characteristic->exclude ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group_Characteristic->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, group_Characteristic->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Group_Member(Arena *arena, Group_Member *group_Member)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&group_Member->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&group_Member->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", group_Member->id.size, group_Member->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group_Member->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group_Member->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &group_Member->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group_Member->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < group_Member->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &group_Member->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&group_Member->entity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, group_Member->entity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group_Member->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, group_Member->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&group_Member->inactive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"inactive\" : \"%.*s\"", group_Member->inactive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_GuidanceResponse(Arena *arena, GuidanceResponse *guidanceResponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&guidanceResponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&guidanceResponse->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", guidanceResponse->id.size, guidanceResponse->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, guidanceResponse->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", guidanceResponse->implicitRules.size, guidanceResponse->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", guidanceResponse->language.size, guidanceResponse->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, guidanceResponse->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &guidanceResponse->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&guidanceResponse->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &guidanceResponse->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&guidanceResponse->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &guidanceResponse->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&guidanceResponse->requestIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, guidanceResponse->requestIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &guidanceResponse->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(guidanceResponse->module_type == GuidanceResponse::ModuleType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", guidanceResponse->module.valueUri.size, guidanceResponse->module.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(guidanceResponse->module_type == GuidanceResponse::ModuleType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", guidanceResponse->module.valueCanonical.size, guidanceResponse->module.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(guidanceResponse->module_type == GuidanceResponse::ModuleType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, guidanceResponse->module.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&guidanceResponse->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", guidanceResponse->status.size, guidanceResponse->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, guidanceResponse->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, guidanceResponse->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->occurrenceDateTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"occurrenceDateTime\" : \"%.*s\"", guidanceResponse->occurrenceDateTime.size, guidanceResponse->occurrenceDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, guidanceResponse->performer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &guidanceResponse->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&guidanceResponse->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &guidanceResponse->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&guidanceResponse->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &guidanceResponse->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&guidanceResponse->evaluationMessage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->evaluationMessage_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &guidanceResponse->evaluationMessage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&guidanceResponse->outputParameters)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, guidanceResponse->outputParameters);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->result)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, guidanceResponse->result);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&guidanceResponse->dataRequirement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < guidanceResponse->dataRequirement_count; i++)
		{
			String8 to_add = Serialize_DataRequirement(arena, &guidanceResponse->dataRequirement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_HealthcareService(Arena *arena, HealthcareService *healthcareService)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&healthcareService->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&healthcareService->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", healthcareService->id.size, healthcareService->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, healthcareService->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", healthcareService->implicitRules.size, healthcareService->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", healthcareService->language.size, healthcareService->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, healthcareService->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &healthcareService->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &healthcareService->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", healthcareService->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->providedBy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, healthcareService->providedBy);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->specialty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->specialty_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->specialty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->location_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &healthcareService->location[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", healthcareService->name.size, healthcareService->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", healthcareService->comment.size, healthcareService->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->extraDetails)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"extraDetails\" : \"%.*s\"", healthcareService->extraDetails.size, healthcareService->extraDetails.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->photo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, healthcareService->photo);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &healthcareService->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->coverageArea)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->coverageArea_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &healthcareService->coverageArea[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->serviceProvisionCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->serviceProvisionCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->serviceProvisionCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->eligibility)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->eligibility_count; i++)
		{
			String8 to_add = Serialize_HealthcareService_Eligibility(arena, &healthcareService->eligibility[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->program)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->program_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->program[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->characteristic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->characteristic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->characteristic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->communication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->communication_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->communication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->referralMethod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->referralMethod_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &healthcareService->referralMethod[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->appointmentRequired)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"appointmentRequired\" : \"%.*s\"", healthcareService->appointmentRequired ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->availableTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->availableTime_count; i++)
		{
			String8 to_add = Serialize_HealthcareService_AvailableTime(arena, &healthcareService->availableTime[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->notAvailable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->notAvailable_count; i++)
		{
			String8 to_add = Serialize_HealthcareService_NotAvailable(arena, &healthcareService->notAvailable[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService->availabilityExceptions)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"availabilityExceptions\" : \"%.*s\"", healthcareService->availabilityExceptions.size, healthcareService->availabilityExceptions.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &healthcareService->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_HealthcareService_Eligibility(Arena *arena, HealthcareService_Eligibility *healthcareService_Eligibility)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&healthcareService_Eligibility->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&healthcareService_Eligibility->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", healthcareService_Eligibility->id.size, healthcareService_Eligibility->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService_Eligibility->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService_Eligibility->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService_Eligibility->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService_Eligibility->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService_Eligibility->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService_Eligibility->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService_Eligibility->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, healthcareService_Eligibility->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService_Eligibility->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", healthcareService_Eligibility->comment.size, healthcareService_Eligibility->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_HealthcareService_AvailableTime(Arena *arena, HealthcareService_AvailableTime *healthcareService_AvailableTime)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&healthcareService_AvailableTime->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&healthcareService_AvailableTime->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", healthcareService_AvailableTime->id.size, healthcareService_AvailableTime->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService_AvailableTime->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService_AvailableTime->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService_AvailableTime->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService_AvailableTime->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService_AvailableTime->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService_AvailableTime->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService_AvailableTime->daysOfWeek)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService_AvailableTime->daysOfWeek_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"daysOfWeek\" : \"%.*s\"", &healthcareService_AvailableTime->daysOfWeek[i].size, &healthcareService_AvailableTime->daysOfWeek[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService_AvailableTime->allDay)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"allDay\" : \"%.*s\"", healthcareService_AvailableTime->allDay ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService_AvailableTime->availableStartTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"availableStartTime\" : \"%.*s\"", healthcareService_AvailableTime->availableStartTime.size, healthcareService_AvailableTime->availableStartTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService_AvailableTime->availableEndTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"availableEndTime\" : \"%.*s\"", healthcareService_AvailableTime->availableEndTime.size, healthcareService_AvailableTime->availableEndTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_HealthcareService_NotAvailable(Arena *arena, HealthcareService_NotAvailable *healthcareService_NotAvailable)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&healthcareService_NotAvailable->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&healthcareService_NotAvailable->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", healthcareService_NotAvailable->id.size, healthcareService_NotAvailable->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService_NotAvailable->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService_NotAvailable->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService_NotAvailable->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService_NotAvailable->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < healthcareService_NotAvailable->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &healthcareService_NotAvailable->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&healthcareService_NotAvailable->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", healthcareService_NotAvailable->description.size, healthcareService_NotAvailable->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&healthcareService_NotAvailable->during)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, healthcareService_NotAvailable->during);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImagingStudy(Arena *arena, ImagingStudy *imagingStudy)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&imagingStudy->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&imagingStudy->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", imagingStudy->id.size, imagingStudy->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, imagingStudy->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", imagingStudy->implicitRules.size, imagingStudy->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", imagingStudy->language.size, imagingStudy->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, imagingStudy->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &imagingStudy->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &imagingStudy->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", imagingStudy->status.size, imagingStudy->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->modality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->modality_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &imagingStudy->modality[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, imagingStudy->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, imagingStudy->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->started)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"started\" : \"%.*s\"", imagingStudy->started.size, imagingStudy->started.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &imagingStudy->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->referrer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, imagingStudy->referrer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->interpreter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->interpreter_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &imagingStudy->interpreter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &imagingStudy->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->numberOfSeries)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"numberOfSeries\" : \"%d\"", imagingStudy->numberOfSeries);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->numberOfInstances)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"numberOfInstances\" : \"%d\"", imagingStudy->numberOfInstances);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->procedureReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, imagingStudy->procedureReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->procedureCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->procedureCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &imagingStudy->procedureCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, imagingStudy->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &imagingStudy->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &imagingStudy->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &imagingStudy->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", imagingStudy->description.size, imagingStudy->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy->series)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy->series_count; i++)
		{
			String8 to_add = Serialize_ImagingStudy_Series(arena, &imagingStudy->series[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImagingStudy_Series(Arena *arena, ImagingStudy_Series *imagingStudy_Series)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&imagingStudy_Series->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&imagingStudy_Series->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", imagingStudy_Series->id.size, imagingStudy_Series->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy_Series->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy_Series->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series->uid)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uid\" : \"%.*s\"", imagingStudy_Series->uid.size, imagingStudy_Series->uid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->number)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"number\" : \"%d\"", imagingStudy_Series->number);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->modality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, imagingStudy_Series->modality);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", imagingStudy_Series->description.size, imagingStudy_Series->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->numberOfInstances)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"numberOfInstances\" : \"%d\"", imagingStudy_Series->numberOfInstances);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &imagingStudy_Series->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, imagingStudy_Series->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->laterality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, imagingStudy_Series->laterality);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->specimen)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series->specimen_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &imagingStudy_Series->specimen[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series->started)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"started\" : \"%.*s\"", imagingStudy_Series->started.size, imagingStudy_Series->started.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series->performer_count; i++)
		{
			String8 to_add = Serialize_ImagingStudy_Series_Performer(arena, &imagingStudy_Series->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series->instance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series->instance_count; i++)
		{
			String8 to_add = Serialize_ImagingStudy_Series_Instance(arena, &imagingStudy_Series->instance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImagingStudy_Series_Performer(Arena *arena, ImagingStudy_Series_Performer *imagingStudy_Series_Performer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&imagingStudy_Series_Performer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&imagingStudy_Series_Performer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", imagingStudy_Series_Performer->id.size, imagingStudy_Series_Performer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series_Performer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series_Performer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy_Series_Performer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series_Performer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series_Performer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy_Series_Performer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series_Performer->function_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, imagingStudy_Series_Performer->function_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series_Performer->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, imagingStudy_Series_Performer->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImagingStudy_Series_Instance(Arena *arena, ImagingStudy_Series_Instance *imagingStudy_Series_Instance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&imagingStudy_Series_Instance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&imagingStudy_Series_Instance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", imagingStudy_Series_Instance->id.size, imagingStudy_Series_Instance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series_Instance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series_Instance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy_Series_Instance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series_Instance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < imagingStudy_Series_Instance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &imagingStudy_Series_Instance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&imagingStudy_Series_Instance->uid)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uid\" : \"%.*s\"", imagingStudy_Series_Instance->uid.size, imagingStudy_Series_Instance->uid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series_Instance->sopClass)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, imagingStudy_Series_Instance->sopClass);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series_Instance->number)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"number\" : \"%d\"", imagingStudy_Series_Instance->number);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&imagingStudy_Series_Instance->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", imagingStudy_Series_Instance->title.size, imagingStudy_Series_Instance->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Immunization(Arena *arena, Immunization *immunization)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunization->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunization->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunization->id.size, immunization->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, immunization->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", immunization->implicitRules.size, immunization->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", immunization->language.size, immunization->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, immunization->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &immunization->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &immunization->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", immunization->status.size, immunization->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunization->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->vaccineCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunization->vaccineCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunization->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunization->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(immunization->occurrence_type == Immunization::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", immunization->occurrence.valueDateTime.size, immunization->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(immunization->occurrence_type == Immunization::OccurrenceType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", immunization->occurrence.valueString.size, immunization->occurrence.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&immunization->recorded)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recorded\" : \"%.*s\"", immunization->recorded.size, immunization->recorded.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->primarySource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"primarySource\" : \"%.*s\"", immunization->primarySource ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->reportOrigin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunization->reportOrigin);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunization->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunization->manufacturer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->lotNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lotNumber\" : \"%.*s\"", immunization->lotNumber.size, immunization->lotNumber.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->expirationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expirationDate\" : \"%.*s\"", immunization->expirationDate.size, immunization->expirationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->site)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunization->site);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->route)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunization->route);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->doseQuantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, immunization->doseQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->performer_count; i++)
		{
			String8 to_add = Serialize_Immunization_Performer(arena, &immunization->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &immunization->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunization->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &immunization->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->isSubpotent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isSubpotent\" : \"%.*s\"", immunization->isSubpotent ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->subpotentReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->subpotentReason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunization->subpotentReason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->education)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->education_count; i++)
		{
			String8 to_add = Serialize_Immunization_Education(arena, &immunization->education[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->programEligibility)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->programEligibility_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunization->programEligibility[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->fundingSource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunization->fundingSource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization->reaction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->reaction_count; i++)
		{
			String8 to_add = Serialize_Immunization_Reaction(arena, &immunization->reaction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization->protocolApplied)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization->protocolApplied_count; i++)
		{
			String8 to_add = Serialize_Immunization_ProtocolApplied(arena, &immunization->protocolApplied[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Immunization_Performer(Arena *arena, Immunization_Performer *immunization_Performer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunization_Performer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunization_Performer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunization_Performer->id.size, immunization_Performer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Performer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_Performer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_Performer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_Performer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_Performer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_Performer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_Performer->function_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunization_Performer->function_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Performer->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunization_Performer->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Immunization_Education(Arena *arena, Immunization_Education *immunization_Education)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunization_Education->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunization_Education->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunization_Education->id.size, immunization_Education->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Education->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_Education->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_Education->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_Education->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_Education->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_Education->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_Education->documentType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentType\" : \"%.*s\"", immunization_Education->documentType.size, immunization_Education->documentType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Education->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"reference\" : \"%.*s\"", immunization_Education->reference.size, immunization_Education->reference.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Education->publicationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publicationDate\" : \"%.*s\"", immunization_Education->publicationDate.size, immunization_Education->publicationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Education->presentationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"presentationDate\" : \"%.*s\"", immunization_Education->presentationDate.size, immunization_Education->presentationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Immunization_Reaction(Arena *arena, Immunization_Reaction *immunization_Reaction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunization_Reaction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunization_Reaction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunization_Reaction->id.size, immunization_Reaction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Reaction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_Reaction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_Reaction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_Reaction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_Reaction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_Reaction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_Reaction->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", immunization_Reaction->date.size, immunization_Reaction->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Reaction->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunization_Reaction->detail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_Reaction->reported)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"reported\" : \"%.*s\"", immunization_Reaction->reported ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Immunization_ProtocolApplied(Arena *arena, Immunization_ProtocolApplied *immunization_ProtocolApplied)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunization_ProtocolApplied->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunization_ProtocolApplied->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunization_ProtocolApplied->id.size, immunization_ProtocolApplied->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_ProtocolApplied->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_ProtocolApplied->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_ProtocolApplied->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_ProtocolApplied->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_ProtocolApplied->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunization_ProtocolApplied->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunization_ProtocolApplied->series)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"series\" : \"%.*s\"", immunization_ProtocolApplied->series.size, immunization_ProtocolApplied->series.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_ProtocolApplied->authority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunization_ProtocolApplied->authority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunization_ProtocolApplied->targetDisease)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunization_ProtocolApplied->targetDisease_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunization_ProtocolApplied->targetDisease[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(immunization_ProtocolApplied->doseNumber_type == Immunization_ProtocolApplied::DoseNumberType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", immunization_ProtocolApplied->doseNumber.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(immunization_ProtocolApplied->doseNumber_type == Immunization_ProtocolApplied::DoseNumberType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", immunization_ProtocolApplied->doseNumber.valueString.size, immunization_ProtocolApplied->doseNumber.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(immunization_ProtocolApplied->seriesDoses_type == Immunization_ProtocolApplied::SeriesDosesType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", immunization_ProtocolApplied->seriesDoses.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(immunization_ProtocolApplied->seriesDoses_type == Immunization_ProtocolApplied::SeriesDosesType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", immunization_ProtocolApplied->seriesDoses.valueString.size, immunization_ProtocolApplied->seriesDoses.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImmunizationEvaluation(Arena *arena, ImmunizationEvaluation *immunizationEvaluation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunizationEvaluation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunizationEvaluation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunizationEvaluation->id.size, immunizationEvaluation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, immunizationEvaluation->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", immunizationEvaluation->implicitRules.size, immunizationEvaluation->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", immunizationEvaluation->language.size, immunizationEvaluation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, immunizationEvaluation->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationEvaluation->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &immunizationEvaluation->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationEvaluation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationEvaluation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationEvaluation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationEvaluation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationEvaluation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationEvaluation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationEvaluation->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationEvaluation->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &immunizationEvaluation->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationEvaluation->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", immunizationEvaluation->status.size, immunizationEvaluation->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunizationEvaluation->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", immunizationEvaluation->date.size, immunizationEvaluation->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->authority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunizationEvaluation->authority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->targetDisease)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunizationEvaluation->targetDisease);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->immunizationEvent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunizationEvaluation->immunizationEvent);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->doseStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunizationEvaluation->doseStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->doseStatusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationEvaluation->doseStatusReason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunizationEvaluation->doseStatusReason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationEvaluation->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", immunizationEvaluation->description.size, immunizationEvaluation->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationEvaluation->series)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"series\" : \"%.*s\"", immunizationEvaluation->series.size, immunizationEvaluation->series.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(immunizationEvaluation->doseNumber_type == ImmunizationEvaluation::DoseNumberType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", immunizationEvaluation->doseNumber.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(immunizationEvaluation->doseNumber_type == ImmunizationEvaluation::DoseNumberType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", immunizationEvaluation->doseNumber.valueString.size, immunizationEvaluation->doseNumber.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(immunizationEvaluation->seriesDoses_type == ImmunizationEvaluation::SeriesDosesType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", immunizationEvaluation->seriesDoses.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(immunizationEvaluation->seriesDoses_type == ImmunizationEvaluation::SeriesDosesType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", immunizationEvaluation->seriesDoses.valueString.size, immunizationEvaluation->seriesDoses.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImmunizationRecommendation(Arena *arena, ImmunizationRecommendation *immunizationRecommendation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunizationRecommendation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunizationRecommendation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunizationRecommendation->id.size, immunizationRecommendation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, immunizationRecommendation->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", immunizationRecommendation->implicitRules.size, immunizationRecommendation->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", immunizationRecommendation->language.size, immunizationRecommendation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, immunizationRecommendation->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &immunizationRecommendation->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationRecommendation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationRecommendation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &immunizationRecommendation->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunizationRecommendation->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", immunizationRecommendation->date.size, immunizationRecommendation->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->authority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, immunizationRecommendation->authority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation->recommendation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation->recommendation_count; i++)
		{
			String8 to_add = Serialize_ImmunizationRecommendation_Recommendation(arena, &immunizationRecommendation->recommendation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImmunizationRecommendation_Recommendation(Arena *arena, ImmunizationRecommendation_Recommendation *immunizationRecommendation_Recommendation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunizationRecommendation_Recommendation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunizationRecommendation_Recommendation->id.size, immunizationRecommendation_Recommendation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationRecommendation_Recommendation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationRecommendation_Recommendation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->vaccineCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->vaccineCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunizationRecommendation_Recommendation->vaccineCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->targetDisease)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunizationRecommendation_Recommendation->targetDisease);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->contraindicatedVaccineCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->contraindicatedVaccineCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunizationRecommendation_Recommendation->contraindicatedVaccineCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->forecastStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunizationRecommendation_Recommendation->forecastStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->forecastReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->forecastReason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &immunizationRecommendation_Recommendation->forecastReason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->dateCriterion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->dateCriterion_count; i++)
		{
			String8 to_add = Serialize_ImmunizationRecommendation_Recommendation_DateCriterion(arena, &immunizationRecommendation_Recommendation->dateCriterion[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", immunizationRecommendation_Recommendation->description.size, immunizationRecommendation_Recommendation->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->series)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"series\" : \"%.*s\"", immunizationRecommendation_Recommendation->series.size, immunizationRecommendation_Recommendation->series.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(immunizationRecommendation_Recommendation->doseNumber_type == ImmunizationRecommendation_Recommendation::DoseNumberType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", immunizationRecommendation_Recommendation->doseNumber.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(immunizationRecommendation_Recommendation->doseNumber_type == ImmunizationRecommendation_Recommendation::DoseNumberType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", immunizationRecommendation_Recommendation->doseNumber.valueString.size, immunizationRecommendation_Recommendation->doseNumber.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(immunizationRecommendation_Recommendation->seriesDoses_type == ImmunizationRecommendation_Recommendation::SeriesDosesType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", immunizationRecommendation_Recommendation->seriesDoses.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(immunizationRecommendation_Recommendation->seriesDoses_type == ImmunizationRecommendation_Recommendation::SeriesDosesType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", immunizationRecommendation_Recommendation->seriesDoses.valueString.size, immunizationRecommendation_Recommendation->seriesDoses.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&immunizationRecommendation_Recommendation->supportingImmunization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->supportingImmunization_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &immunizationRecommendation_Recommendation->supportingImmunization[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation->supportingPatientInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation->supportingPatientInformation_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &immunizationRecommendation_Recommendation->supportingPatientInformation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImmunizationRecommendation_Recommendation_DateCriterion(Arena *arena, ImmunizationRecommendation_Recommendation_DateCriterion *immunizationRecommendation_Recommendation_DateCriterion)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&immunizationRecommendation_Recommendation_DateCriterion->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation_DateCriterion->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", immunizationRecommendation_Recommendation_DateCriterion->id.size, immunizationRecommendation_Recommendation_DateCriterion->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation_DateCriterion->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation_DateCriterion->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationRecommendation_Recommendation_DateCriterion->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation_DateCriterion->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < immunizationRecommendation_Recommendation_DateCriterion->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &immunizationRecommendation_Recommendation_DateCriterion->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation_DateCriterion->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, immunizationRecommendation_Recommendation_DateCriterion->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&immunizationRecommendation_Recommendation_DateCriterion->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", immunizationRecommendation_Recommendation_DateCriterion->value.size, immunizationRecommendation_Recommendation_DateCriterion->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide(Arena *arena, ImplementationGuide *implementationGuide)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide->id.size, implementationGuide->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, implementationGuide->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", implementationGuide->implicitRules.size, implementationGuide->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", implementationGuide->language.size, implementationGuide->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, implementationGuide->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &implementationGuide->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", implementationGuide->url.size, implementationGuide->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", implementationGuide->version.size, implementationGuide->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", implementationGuide->name.size, implementationGuide->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", implementationGuide->title.size, implementationGuide->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", implementationGuide->status.size, implementationGuide->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", implementationGuide->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", implementationGuide->date.size, implementationGuide->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", implementationGuide->publisher.size, implementationGuide->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &implementationGuide->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", implementationGuide->description.size, implementationGuide->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &implementationGuide->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &implementationGuide->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", implementationGuide->copyright.size, implementationGuide->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->packageId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"packageId\" : \"%.*s\"", implementationGuide->packageId.size, implementationGuide->packageId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->license)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"license\" : \"%.*s\"", implementationGuide->license.size, implementationGuide->license.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->fhirVersion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->fhirVersion_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"fhirVersion\" : \"%.*s\"", &implementationGuide->fhirVersion[i].size, &implementationGuide->fhirVersion[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->dependsOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->dependsOn_count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_DependsOn(arena, &implementationGuide->dependsOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->global_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide->global__count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Global(arena, &implementationGuide->global_[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ImplementationGuide_Definition(arena, implementationGuide->definition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide->manifest)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ImplementationGuide_Manifest(arena, implementationGuide->manifest);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_DependsOn(Arena *arena, ImplementationGuide_DependsOn *implementationGuide_DependsOn)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_DependsOn->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_DependsOn->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_DependsOn->id.size, implementationGuide_DependsOn->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_DependsOn->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_DependsOn->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_DependsOn->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_DependsOn->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_DependsOn->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_DependsOn->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_DependsOn->uri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uri\" : \"%.*s\"", implementationGuide_DependsOn->uri.size, implementationGuide_DependsOn->uri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_DependsOn->packageId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"packageId\" : \"%.*s\"", implementationGuide_DependsOn->packageId.size, implementationGuide_DependsOn->packageId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_DependsOn->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", implementationGuide_DependsOn->version.size, implementationGuide_DependsOn->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Global(Arena *arena, ImplementationGuide_Global *implementationGuide_Global)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Global->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Global->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Global->id.size, implementationGuide_Global->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Global->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Global->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Global->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Global->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Global->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Global->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Global->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", implementationGuide_Global->type.size, implementationGuide_Global->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Global->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", implementationGuide_Global->profile.size, implementationGuide_Global->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Definition(Arena *arena, ImplementationGuide_Definition *implementationGuide_Definition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Definition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Definition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Definition->id.size, implementationGuide_Definition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition->grouping)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition->grouping_count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Definition_Grouping(arena, &implementationGuide_Definition->grouping[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition->resource_count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Definition_Resource(arena, &implementationGuide_Definition->resource[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition->page)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ImplementationGuide_Definition_Page(arena, implementationGuide_Definition->page);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition->parameter_count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Definition_Parameter(arena, &implementationGuide_Definition->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition->template_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition->template__count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Definition_Template(arena, &implementationGuide_Definition->template_[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Definition_Grouping(Arena *arena, ImplementationGuide_Definition_Grouping *implementationGuide_Definition_Grouping)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Definition_Grouping->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Grouping->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Definition_Grouping->id.size, implementationGuide_Definition_Grouping->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Grouping->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Grouping->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Grouping->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Grouping->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Grouping->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Grouping->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Grouping->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", implementationGuide_Definition_Grouping->name.size, implementationGuide_Definition_Grouping->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Grouping->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", implementationGuide_Definition_Grouping->description.size, implementationGuide_Definition_Grouping->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Definition_Resource(Arena *arena, ImplementationGuide_Definition_Resource *implementationGuide_Definition_Resource)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Definition_Resource->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Resource->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Definition_Resource->id.size, implementationGuide_Definition_Resource->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Resource->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Resource->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Resource->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Resource->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Resource->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Resource->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Resource->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, implementationGuide_Definition_Resource->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Resource->fhirVersion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Resource->fhirVersion_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"fhirVersion\" : \"%.*s\"", &implementationGuide_Definition_Resource->fhirVersion[i].size, &implementationGuide_Definition_Resource->fhirVersion[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Resource->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", implementationGuide_Definition_Resource->name.size, implementationGuide_Definition_Resource->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Resource->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", implementationGuide_Definition_Resource->description.size, implementationGuide_Definition_Resource->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(implementationGuide_Definition_Resource->example_type == ImplementationGuide_Definition_Resource::ExampleType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", implementationGuide_Definition_Resource->example.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(implementationGuide_Definition_Resource->example_type == ImplementationGuide_Definition_Resource::ExampleType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", implementationGuide_Definition_Resource->example.valueCanonical.size, implementationGuide_Definition_Resource->example.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&implementationGuide_Definition_Resource->groupingId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"groupingId\" : \"%.*s\"", implementationGuide_Definition_Resource->groupingId.size, implementationGuide_Definition_Resource->groupingId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Definition_Page(Arena *arena, ImplementationGuide_Definition_Page *implementationGuide_Definition_Page)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Definition_Page->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Page->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Definition_Page->id.size, implementationGuide_Definition_Page->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Page->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Page->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Page->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Page->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Page->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Page->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(implementationGuide_Definition_Page->name_type == ImplementationGuide_Definition_Page::NameType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", implementationGuide_Definition_Page->name.valueUrl.size, implementationGuide_Definition_Page->name.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(implementationGuide_Definition_Page->name_type == ImplementationGuide_Definition_Page::NameType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, implementationGuide_Definition_Page->name.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&implementationGuide_Definition_Page->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", implementationGuide_Definition_Page->title.size, implementationGuide_Definition_Page->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Page->generation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"generation\" : \"%.*s\"", implementationGuide_Definition_Page->generation.size, implementationGuide_Definition_Page->generation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Page->page)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Page->page_count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Definition_Page(arena, &implementationGuide_Definition_Page->page[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Definition_Parameter(Arena *arena, ImplementationGuide_Definition_Parameter *implementationGuide_Definition_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Definition_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Definition_Parameter->id.size, implementationGuide_Definition_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Parameter->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", implementationGuide_Definition_Parameter->code.size, implementationGuide_Definition_Parameter->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Parameter->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", implementationGuide_Definition_Parameter->value.size, implementationGuide_Definition_Parameter->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Definition_Template(Arena *arena, ImplementationGuide_Definition_Template *implementationGuide_Definition_Template)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Definition_Template->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Template->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Definition_Template->id.size, implementationGuide_Definition_Template->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Template->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Template->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Template->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Template->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Definition_Template->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Definition_Template->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Definition_Template->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", implementationGuide_Definition_Template->code.size, implementationGuide_Definition_Template->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Template->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"source\" : \"%.*s\"", implementationGuide_Definition_Template->source.size, implementationGuide_Definition_Template->source.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Definition_Template->scope)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"scope\" : \"%.*s\"", implementationGuide_Definition_Template->scope.size, implementationGuide_Definition_Template->scope.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Manifest(Arena *arena, ImplementationGuide_Manifest *implementationGuide_Manifest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Manifest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Manifest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Manifest->id.size, implementationGuide_Manifest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Manifest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Manifest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Manifest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest->rendering)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rendering\" : \"%.*s\"", implementationGuide_Manifest->rendering.size, implementationGuide_Manifest->rendering.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Manifest->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest->resource_count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Manifest_Resource(arena, &implementationGuide_Manifest->resource[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest->page)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest->page_count; i++)
		{
			String8 to_add = Serialize_ImplementationGuide_Manifest_Page(arena, &implementationGuide_Manifest->page[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest->image)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest->image_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"image\" : \"%.*s\"", &implementationGuide_Manifest->image[i].size, &implementationGuide_Manifest->image[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest->other)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest->other_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"other\" : \"%.*s\"", &implementationGuide_Manifest->other[i].size, &implementationGuide_Manifest->other[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Manifest_Resource(Arena *arena, ImplementationGuide_Manifest_Resource *implementationGuide_Manifest_Resource)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Manifest_Resource->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Manifest_Resource->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Manifest_Resource->id.size, implementationGuide_Manifest_Resource->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Manifest_Resource->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest_Resource->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Manifest_Resource->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest_Resource->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest_Resource->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Manifest_Resource->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest_Resource->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, implementationGuide_Manifest_Resource->reference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(implementationGuide_Manifest_Resource->example_type == ImplementationGuide_Manifest_Resource::ExampleType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", implementationGuide_Manifest_Resource->example.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(implementationGuide_Manifest_Resource->example_type == ImplementationGuide_Manifest_Resource::ExampleType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", implementationGuide_Manifest_Resource->example.valueCanonical.size, implementationGuide_Manifest_Resource->example.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&implementationGuide_Manifest_Resource->relativePath)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"relativePath\" : \"%.*s\"", implementationGuide_Manifest_Resource->relativePath.size, implementationGuide_Manifest_Resource->relativePath.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ImplementationGuide_Manifest_Page(Arena *arena, ImplementationGuide_Manifest_Page *implementationGuide_Manifest_Page)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&implementationGuide_Manifest_Page->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&implementationGuide_Manifest_Page->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", implementationGuide_Manifest_Page->id.size, implementationGuide_Manifest_Page->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Manifest_Page->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest_Page->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Manifest_Page->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest_Page->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest_Page->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &implementationGuide_Manifest_Page->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&implementationGuide_Manifest_Page->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", implementationGuide_Manifest_Page->name.size, implementationGuide_Manifest_Page->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Manifest_Page->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", implementationGuide_Manifest_Page->title.size, implementationGuide_Manifest_Page->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&implementationGuide_Manifest_Page->anchor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < implementationGuide_Manifest_Page->anchor_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"anchor\" : \"%.*s\"", &implementationGuide_Manifest_Page->anchor[i].size, &implementationGuide_Manifest_Page->anchor[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan(Arena *arena, InsurancePlan *insurancePlan)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan->id.size, insurancePlan->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, insurancePlan->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", insurancePlan->implicitRules.size, insurancePlan->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", insurancePlan->language.size, insurancePlan->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, insurancePlan->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &insurancePlan->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &insurancePlan->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", insurancePlan->status.size, insurancePlan->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &insurancePlan->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", insurancePlan->name.size, insurancePlan->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->alias)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->alias_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"alias\" : \"%.*s\"", &insurancePlan->alias[i].size, &insurancePlan->alias[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, insurancePlan->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->ownedBy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, insurancePlan->ownedBy);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->administeredBy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, insurancePlan->administeredBy);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan->coverageArea)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->coverageArea_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &insurancePlan->coverageArea[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->contact_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Contact(arena, &insurancePlan->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &insurancePlan->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->network_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &insurancePlan->network[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->coverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->coverage_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Coverage(arena, &insurancePlan->coverage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan->plan)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan->plan_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Plan(arena, &insurancePlan->plan[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Contact(Arena *arena, InsurancePlan_Contact *insurancePlan_Contact)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Contact->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Contact->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Contact->id.size, insurancePlan_Contact->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Contact->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Contact->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Contact->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Contact->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Contact->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Contact->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Contact->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Contact->purpose);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Contact->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_HumanName(arena, insurancePlan_Contact->name);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Contact->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Contact->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &insurancePlan_Contact->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Contact->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Address(arena, insurancePlan_Contact->address);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Coverage(Arena *arena, InsurancePlan_Coverage *insurancePlan_Coverage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Coverage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Coverage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Coverage->id.size, insurancePlan_Coverage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Coverage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Coverage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Coverage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Coverage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Coverage->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Coverage->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Coverage->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage->network_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &insurancePlan_Coverage->network[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Coverage->benefit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage->benefit_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Coverage_Benefit(arena, &insurancePlan_Coverage->benefit[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Coverage_Benefit(Arena *arena, InsurancePlan_Coverage_Benefit *insurancePlan_Coverage_Benefit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Coverage_Benefit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Coverage_Benefit->id.size, insurancePlan_Coverage_Benefit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage_Benefit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Coverage_Benefit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage_Benefit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Coverage_Benefit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Coverage_Benefit->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit->requirement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requirement\" : \"%.*s\"", insurancePlan_Coverage_Benefit->requirement.size, insurancePlan_Coverage_Benefit->requirement.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit->limit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage_Benefit->limit_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Coverage_Benefit_Limit(arena, &insurancePlan_Coverage_Benefit->limit[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Coverage_Benefit_Limit(Arena *arena, InsurancePlan_Coverage_Benefit_Limit *insurancePlan_Coverage_Benefit_Limit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Coverage_Benefit_Limit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit_Limit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Coverage_Benefit_Limit->id.size, insurancePlan_Coverage_Benefit_Limit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit_Limit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage_Benefit_Limit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Coverage_Benefit_Limit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit_Limit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Coverage_Benefit_Limit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Coverage_Benefit_Limit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit_Limit->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, insurancePlan_Coverage_Benefit_Limit->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Coverage_Benefit_Limit->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Coverage_Benefit_Limit->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Plan(Arena *arena, InsurancePlan_Plan *insurancePlan_Plan)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Plan->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Plan->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Plan->id.size, insurancePlan_Plan->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &insurancePlan_Plan->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Plan->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan->coverageArea)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan->coverageArea_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &insurancePlan_Plan->coverageArea[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan->network_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &insurancePlan_Plan->network[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan->generalCost)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan->generalCost_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Plan_GeneralCost(arena, &insurancePlan_Plan->generalCost[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan->specificCost)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan->specificCost_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Plan_SpecificCost(arena, &insurancePlan_Plan->specificCost[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Plan_GeneralCost(Arena *arena, InsurancePlan_Plan_GeneralCost *insurancePlan_Plan_GeneralCost)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Plan_GeneralCost->id.size, insurancePlan_Plan_GeneralCost->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_GeneralCost->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_GeneralCost->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_GeneralCost->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_GeneralCost->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Plan_GeneralCost->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->groupSize)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"groupSize\" : \"%d\"", insurancePlan_Plan_GeneralCost->groupSize);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->cost)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, insurancePlan_Plan_GeneralCost->cost);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_GeneralCost->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", insurancePlan_Plan_GeneralCost->comment.size, insurancePlan_Plan_GeneralCost->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Plan_SpecificCost(Arena *arena, InsurancePlan_Plan_SpecificCost *insurancePlan_Plan_SpecificCost)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Plan_SpecificCost->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Plan_SpecificCost->id.size, insurancePlan_Plan_SpecificCost->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_SpecificCost->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_SpecificCost->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Plan_SpecificCost->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost->benefit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost->benefit_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Plan_SpecificCost_Benefit(arena, &insurancePlan_Plan_SpecificCost->benefit[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Plan_SpecificCost_Benefit(Arena *arena, InsurancePlan_Plan_SpecificCost_Benefit *insurancePlan_Plan_SpecificCost_Benefit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Plan_SpecificCost_Benefit->id.size, insurancePlan_Plan_SpecificCost_Benefit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost_Benefit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_SpecificCost_Benefit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost_Benefit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_SpecificCost_Benefit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Plan_SpecificCost_Benefit->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit->cost)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost_Benefit->cost_count; i++)
		{
			String8 to_add = Serialize_InsurancePlan_Plan_SpecificCost_Benefit_Cost(arena, &insurancePlan_Plan_SpecificCost_Benefit->cost[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_InsurancePlan_Plan_SpecificCost_Benefit_Cost(Arena *arena, InsurancePlan_Plan_SpecificCost_Benefit_Cost *insurancePlan_Plan_SpecificCost_Benefit_Cost)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", insurancePlan_Plan_SpecificCost_Benefit_Cost->id.size, insurancePlan_Plan_SpecificCost_Benefit_Cost->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost_Benefit_Cost->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_SpecificCost_Benefit_Cost->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &insurancePlan_Plan_SpecificCost_Benefit_Cost->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Plan_SpecificCost_Benefit_Cost->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->applicability)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, insurancePlan_Plan_SpecificCost_Benefit_Cost->applicability);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < insurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &insurancePlan_Plan_SpecificCost_Benefit_Cost->qualifiers[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&insurancePlan_Plan_SpecificCost_Benefit_Cost->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, insurancePlan_Plan_SpecificCost_Benefit_Cost->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Invoice(Arena *arena, Invoice *invoice)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&invoice->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&invoice->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", invoice->id.size, invoice->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, invoice->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", invoice->implicitRules.size, invoice->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", invoice->language.size, invoice->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, invoice->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &invoice->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &invoice->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", invoice->status.size, invoice->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->cancelledReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"cancelledReason\" : \"%.*s\"", invoice->cancelledReason.size, invoice->cancelledReason.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, invoice->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, invoice->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->recipient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, invoice->recipient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", invoice->date.size, invoice->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->participant_count; i++)
		{
			String8 to_add = Serialize_Invoice_Participant(arena, &invoice->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice->issuer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, invoice->issuer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->account)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, invoice->account);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->lineItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->lineItem_count; i++)
		{
			String8 to_add = Serialize_Invoice_LineItem(arena, &invoice->lineItem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice->totalPriceComponent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->totalPriceComponent_count; i++)
		{
			String8 to_add = Serialize_Invoice_LineItem_PriceComponent(arena, &invoice->totalPriceComponent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice->totalNet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, invoice->totalNet);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->totalGross)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, invoice->totalGross);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->paymentTerms)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"paymentTerms\" : \"%.*s\"", invoice->paymentTerms.size, invoice->paymentTerms.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &invoice->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Invoice_Participant(Arena *arena, Invoice_Participant *invoice_Participant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&invoice_Participant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&invoice_Participant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", invoice_Participant->id.size, invoice_Participant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice_Participant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice_Participant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice_Participant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice_Participant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice_Participant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice_Participant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice_Participant->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, invoice_Participant->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice_Participant->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, invoice_Participant->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Invoice_LineItem(Arena *arena, Invoice_LineItem *invoice_LineItem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&invoice_LineItem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&invoice_LineItem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", invoice_LineItem->id.size, invoice_LineItem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice_LineItem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice_LineItem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice_LineItem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice_LineItem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice_LineItem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice_LineItem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice_LineItem->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%d\"", invoice_LineItem->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(invoice_LineItem->chargeItem_type == Invoice_LineItem::ChargeItemType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, invoice_LineItem->chargeItem.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(invoice_LineItem->chargeItem_type == Invoice_LineItem::ChargeItemType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, invoice_LineItem->chargeItem.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&invoice_LineItem->priceComponent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice_LineItem->priceComponent_count; i++)
		{
			String8 to_add = Serialize_Invoice_LineItem_PriceComponent(arena, &invoice_LineItem->priceComponent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Invoice_LineItem_PriceComponent(Arena *arena, Invoice_LineItem_PriceComponent *invoice_LineItem_PriceComponent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&invoice_LineItem_PriceComponent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&invoice_LineItem_PriceComponent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", invoice_LineItem_PriceComponent->id.size, invoice_LineItem_PriceComponent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice_LineItem_PriceComponent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice_LineItem_PriceComponent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice_LineItem_PriceComponent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice_LineItem_PriceComponent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < invoice_LineItem_PriceComponent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &invoice_LineItem_PriceComponent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&invoice_LineItem_PriceComponent->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", invoice_LineItem_PriceComponent->type.size, invoice_LineItem_PriceComponent->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice_LineItem_PriceComponent->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, invoice_LineItem_PriceComponent->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice_LineItem_PriceComponent->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", invoice_LineItem_PriceComponent->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&invoice_LineItem_PriceComponent->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, invoice_LineItem_PriceComponent->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Library(Arena *arena, Library *library)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&library->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&library->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", library->id.size, library->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, library->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", library->implicitRules.size, library->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", library->language.size, library->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, library->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &library->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &library->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &library->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", library->url.size, library->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &library->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", library->version.size, library->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", library->name.size, library->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", library->title.size, library->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", library->subtitle.size, library->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", library->status.size, library->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", library->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, library->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(library->subject_type == Library::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, library->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(library->subject_type == Library::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, library->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&library->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", library->date.size, library->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", library->publisher.size, library->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &library->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", library->description.size, library->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &library->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &library->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", library->purpose.size, library->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", library->usage.size, library->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", library->copyright.size, library->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", library->approvalDate.size, library->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", library->lastReviewDate.size, library->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, library->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&library->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &library->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &library->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &library->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &library->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &library->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &library->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->parameter_count; i++)
		{
			String8 to_add = Serialize_ParameterDefinition(arena, &library->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->dataRequirement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->dataRequirement_count; i++)
		{
			String8 to_add = Serialize_DataRequirement(arena, &library->dataRequirement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&library->content)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < library->content_count; i++)
		{
			String8 to_add = Serialize_Attachment(arena, &library->content[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Linkage(Arena *arena, Linkage *linkage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&linkage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&linkage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", linkage->id.size, linkage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, linkage->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", linkage->implicitRules.size, linkage->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", linkage->language.size, linkage->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, linkage->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < linkage->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &linkage->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&linkage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < linkage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &linkage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&linkage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < linkage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &linkage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&linkage->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", linkage->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, linkage->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < linkage->item_count; i++)
		{
			String8 to_add = Serialize_Linkage_Item(arena, &linkage->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Linkage_Item(Arena *arena, Linkage_Item *linkage_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&linkage_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&linkage_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", linkage_Item->id.size, linkage_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < linkage_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &linkage_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&linkage_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < linkage_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &linkage_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&linkage_Item->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", linkage_Item->type.size, linkage_Item->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&linkage_Item->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, linkage_Item->resource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_List(Arena *arena, List *list)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&list->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&list->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", list->id.size, list->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, list->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", list->implicitRules.size, list->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", list->language.size, list->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, list->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &list->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &list->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &list->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &list->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", list->status.size, list->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", list->mode.size, list->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", list->title.size, list->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, list->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, list->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, list->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", list->date.size, list->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, list->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->orderedBy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, list->orderedBy);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &list->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list->entry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list->entry_count; i++)
		{
			String8 to_add = Serialize_List_Entry(arena, &list->entry[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list->emptyReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, list->emptyReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_List_Entry(Arena *arena, List_Entry *list_Entry)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&list_Entry->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&list_Entry->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", list_Entry->id.size, list_Entry->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list_Entry->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list_Entry->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &list_Entry->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list_Entry->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < list_Entry->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &list_Entry->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&list_Entry->flag)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, list_Entry->flag);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list_Entry->deleted)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"deleted\" : \"%.*s\"", list_Entry->deleted ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list_Entry->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", list_Entry->date.size, list_Entry->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&list_Entry->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, list_Entry->item);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Location(Arena *arena, Location *location)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&location->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&location->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", location->id.size, location->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, location->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", location->implicitRules.size, location->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", location->language.size, location->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, location->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &location->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &location->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &location->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &location->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", location->status.size, location->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->operationalStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, location->operationalStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", location->name.size, location->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->alias)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->alias_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"alias\" : \"%.*s\"", &location->alias[i].size, &location->alias[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", location->description.size, location->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", location->mode.size, location->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &location->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &location->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Address(arena, location->address);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->physicalType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, location->physicalType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->position)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Location_Position(arena, location->position);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->managingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, location->managingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, location->partOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->hoursOfOperation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->hoursOfOperation_count; i++)
		{
			String8 to_add = Serialize_Location_HoursOfOperation(arena, &location->hoursOfOperation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location->availabilityExceptions)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"availabilityExceptions\" : \"%.*s\"", location->availabilityExceptions.size, location->availabilityExceptions.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &location->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Location_Position(Arena *arena, Location_Position *location_Position)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&location_Position->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&location_Position->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", location_Position->id.size, location_Position->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location_Position->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location_Position->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &location_Position->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location_Position->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location_Position->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &location_Position->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location_Position->longitude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"longitude\" : \"%d\"", location_Position->longitude);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location_Position->latitude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"latitude\" : \"%d\"", location_Position->latitude);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location_Position->altitude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"altitude\" : \"%d\"", location_Position->altitude);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Location_HoursOfOperation(Arena *arena, Location_HoursOfOperation *location_HoursOfOperation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&location_HoursOfOperation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&location_HoursOfOperation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", location_HoursOfOperation->id.size, location_HoursOfOperation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location_HoursOfOperation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location_HoursOfOperation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &location_HoursOfOperation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location_HoursOfOperation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location_HoursOfOperation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &location_HoursOfOperation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location_HoursOfOperation->daysOfWeek)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < location_HoursOfOperation->daysOfWeek_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"daysOfWeek\" : \"%.*s\"", &location_HoursOfOperation->daysOfWeek[i].size, &location_HoursOfOperation->daysOfWeek[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&location_HoursOfOperation->allDay)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"allDay\" : \"%.*s\"", location_HoursOfOperation->allDay ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location_HoursOfOperation->openingTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"openingTime\" : \"%.*s\"", location_HoursOfOperation->openingTime.size, location_HoursOfOperation->openingTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&location_HoursOfOperation->closingTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"closingTime\" : \"%.*s\"", location_HoursOfOperation->closingTime.size, location_HoursOfOperation->closingTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Measure(Arena *arena, Measure *measure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measure->id.size, measure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, measure->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", measure->implicitRules.size, measure->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", measure->language.size, measure->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, measure->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &measure->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", measure->url.size, measure->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &measure->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", measure->version.size, measure->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", measure->name.size, measure->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", measure->title.size, measure->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", measure->subtitle.size, measure->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", measure->status.size, measure->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", measure->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(measure->subject_type == Measure::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, measure->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(measure->subject_type == Measure::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, measure->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&measure->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", measure->date.size, measure->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", measure->publisher.size, measure->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &measure->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", measure->description.size, measure->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &measure->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &measure->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", measure->purpose.size, measure->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", measure->usage.size, measure->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", measure->copyright.size, measure->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", measure->approvalDate.size, measure->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", measure->lastReviewDate.size, measure->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, measure->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &measure->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &measure->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &measure->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &measure->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &measure->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &measure->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->library)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->library_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"library\" : \"%.*s\"", &measure->library[i].size, &measure->library[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->disclaimer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"disclaimer\" : \"%.*s\"", measure->disclaimer.size, measure->disclaimer.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->scoring)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure->scoring);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->compositeScoring)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure->compositeScoring);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &measure->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->riskAdjustment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"riskAdjustment\" : \"%.*s\"", measure->riskAdjustment.size, measure->riskAdjustment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->rateAggregation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rateAggregation\" : \"%.*s\"", measure->rateAggregation.size, measure->rateAggregation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->rationale)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rationale\" : \"%.*s\"", measure->rationale.size, measure->rationale.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->clinicalRecommendationStatement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"clinicalRecommendationStatement\" : \"%.*s\"", measure->clinicalRecommendationStatement.size, measure->clinicalRecommendationStatement.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->improvementNotation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure->improvementNotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->definition_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", &measure->definition[i].size, &measure->definition[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->guidance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"guidance\" : \"%.*s\"", measure->guidance.size, measure->guidance.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure->group)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->group_count; i++)
		{
			String8 to_add = Serialize_Measure_Group(arena, &measure->group[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure->supplementalData)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure->supplementalData_count; i++)
		{
			String8 to_add = Serialize_Measure_SupplementalData(arena, &measure->supplementalData[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Measure_Group(Arena *arena, Measure_Group *measure_Group)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measure_Group->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measure_Group->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measure_Group->id.size, measure_Group->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure_Group->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", measure_Group->description.size, measure_Group->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group->population_count; i++)
		{
			String8 to_add = Serialize_Measure_Group_Population(arena, &measure_Group->population[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group->stratifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group->stratifier_count; i++)
		{
			String8 to_add = Serialize_Measure_Group_Stratifier(arena, &measure_Group->stratifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Measure_Group_Population(Arena *arena, Measure_Group_Population *measure_Group_Population)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measure_Group_Population->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measure_Group_Population->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measure_Group_Population->id.size, measure_Group_Population->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Population->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group_Population->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group_Population->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group_Population->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group_Population->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group_Population->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group_Population->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure_Group_Population->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Population->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", measure_Group_Population->description.size, measure_Group_Population->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Population->criteria)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, measure_Group_Population->criteria);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Measure_Group_Stratifier(Arena *arena, Measure_Group_Stratifier *measure_Group_Stratifier)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measure_Group_Stratifier->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measure_Group_Stratifier->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measure_Group_Stratifier->id.size, measure_Group_Stratifier->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Stratifier->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group_Stratifier->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group_Stratifier->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group_Stratifier->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group_Stratifier->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group_Stratifier->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group_Stratifier->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure_Group_Stratifier->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Stratifier->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", measure_Group_Stratifier->description.size, measure_Group_Stratifier->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Stratifier->criteria)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, measure_Group_Stratifier->criteria);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Stratifier->component)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group_Stratifier->component_count; i++)
		{
			String8 to_add = Serialize_Measure_Group_Stratifier_Component(arena, &measure_Group_Stratifier->component[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Measure_Group_Stratifier_Component(Arena *arena, Measure_Group_Stratifier_Component *measure_Group_Stratifier_Component)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measure_Group_Stratifier_Component->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measure_Group_Stratifier_Component->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measure_Group_Stratifier_Component->id.size, measure_Group_Stratifier_Component->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Stratifier_Component->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group_Stratifier_Component->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group_Stratifier_Component->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group_Stratifier_Component->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_Group_Stratifier_Component->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_Group_Stratifier_Component->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_Group_Stratifier_Component->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure_Group_Stratifier_Component->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Stratifier_Component->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", measure_Group_Stratifier_Component->description.size, measure_Group_Stratifier_Component->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_Group_Stratifier_Component->criteria)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, measure_Group_Stratifier_Component->criteria);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Measure_SupplementalData(Arena *arena, Measure_SupplementalData *measure_SupplementalData)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measure_SupplementalData->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measure_SupplementalData->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measure_SupplementalData->id.size, measure_SupplementalData->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_SupplementalData->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_SupplementalData->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_SupplementalData->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_SupplementalData->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_SupplementalData->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measure_SupplementalData->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_SupplementalData->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measure_SupplementalData->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_SupplementalData->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measure_SupplementalData->usage_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &measure_SupplementalData->usage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measure_SupplementalData->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", measure_SupplementalData->description.size, measure_SupplementalData->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measure_SupplementalData->criteria)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, measure_SupplementalData->criteria);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MeasureReport(Arena *arena, MeasureReport *measureReport)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measureReport->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measureReport->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measureReport->id.size, measureReport->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, measureReport->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", measureReport->implicitRules.size, measureReport->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", measureReport->language.size, measureReport->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, measureReport->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &measureReport->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &measureReport->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", measureReport->status.size, measureReport->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", measureReport->type.size, measureReport->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->measure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"measure\" : \"%.*s\"", measureReport->measure.size, measureReport->measure.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, measureReport->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", measureReport->date.size, measureReport->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->reporter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, measureReport->reporter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, measureReport->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->improvementNotation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measureReport->improvementNotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport->group)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport->group_count; i++)
		{
			String8 to_add = Serialize_MeasureReport_Group(arena, &measureReport->group[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport->evaluatedResource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport->evaluatedResource_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &measureReport->evaluatedResource[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MeasureReport_Group(Arena *arena, MeasureReport_Group *measureReport_Group)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measureReport_Group->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measureReport_Group->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measureReport_Group->id.size, measureReport_Group->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measureReport_Group->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group->population_count; i++)
		{
			String8 to_add = Serialize_MeasureReport_Group_Population(arena, &measureReport_Group->population[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group->measureScore)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, measureReport_Group->measureScore);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group->stratifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group->stratifier_count; i++)
		{
			String8 to_add = Serialize_MeasureReport_Group_Stratifier(arena, &measureReport_Group->stratifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MeasureReport_Group_Population(Arena *arena, MeasureReport_Group_Population *measureReport_Group_Population)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measureReport_Group_Population->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measureReport_Group_Population->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measureReport_Group_Population->id.size, measureReport_Group_Population->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Population->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Population->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Population->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Population->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Population->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Population->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Population->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measureReport_Group_Population->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Population->count)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, measureReport_Group_Population->count);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Population->subjectResults)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, measureReport_Group_Population->subjectResults);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MeasureReport_Group_Stratifier(Arena *arena, MeasureReport_Group_Stratifier *measureReport_Group_Stratifier)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measureReport_Group_Stratifier->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measureReport_Group_Stratifier->id.size, measureReport_Group_Stratifier->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &measureReport_Group_Stratifier->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier->stratum)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier->stratum_count; i++)
		{
			String8 to_add = Serialize_MeasureReport_Group_Stratifier_Stratum(arena, &measureReport_Group_Stratifier->stratum[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MeasureReport_Group_Stratifier_Stratum(Arena *arena, MeasureReport_Group_Stratifier_Stratum *measureReport_Group_Stratifier_Stratum)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measureReport_Group_Stratifier_Stratum->id.size, measureReport_Group_Stratifier_Stratum->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier_Stratum->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier_Stratum->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measureReport_Group_Stratifier_Stratum->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->component)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum->component_count; i++)
		{
			String8 to_add = Serialize_MeasureReport_Group_Stratifier_Stratum_Component(arena, &measureReport_Group_Stratifier_Stratum->component[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum->population_count; i++)
		{
			String8 to_add = Serialize_MeasureReport_Group_Stratifier_Stratum_Population(arena, &measureReport_Group_Stratifier_Stratum->population[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum->measureScore)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, measureReport_Group_Stratifier_Stratum->measureScore);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MeasureReport_Group_Stratifier_Stratum_Component(Arena *arena, MeasureReport_Group_Stratifier_Stratum_Component *measureReport_Group_Stratifier_Stratum_Component)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Component->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Component->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measureReport_Group_Stratifier_Stratum_Component->id.size, measureReport_Group_Stratifier_Stratum_Component->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Component->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum_Component->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier_Stratum_Component->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Component->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum_Component->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier_Stratum_Component->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Component->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measureReport_Group_Stratifier_Stratum_Component->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Component->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measureReport_Group_Stratifier_Stratum_Component->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MeasureReport_Group_Stratifier_Stratum_Population(Arena *arena, MeasureReport_Group_Stratifier_Stratum_Population *measureReport_Group_Stratifier_Stratum_Population)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Population->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Population->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", measureReport_Group_Stratifier_Stratum_Population->id.size, measureReport_Group_Stratifier_Stratum_Population->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Population->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum_Population->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier_Stratum_Population->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Population->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < measureReport_Group_Stratifier_Stratum_Population->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &measureReport_Group_Stratifier_Stratum_Population->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Population->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, measureReport_Group_Stratifier_Stratum_Population->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Population->count)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, measureReport_Group_Stratifier_Stratum_Population->count);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&measureReport_Group_Stratifier_Stratum_Population->subjectResults)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, measureReport_Group_Stratifier_Stratum_Population->subjectResults);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Media(Arena *arena, Media *media)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&media->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&media->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", media->id.size, media->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, media->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", media->implicitRules.size, media->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", media->language.size, media->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, media->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &media->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&media->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &media->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&media->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &media->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&media->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &media->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&media->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &media->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&media->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &media->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&media->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", media->status.size, media->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, media->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->modality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, media->modality);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->view)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, media->view);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, media->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, media->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(media->created_type == Media::CreatedType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", media->created.valueDateTime.size, media->created.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(media->created_type == Media::CreatedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, media->created.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&media->issued)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issued\" : \"%.*s\"", media->issued.size, media->issued.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->operator_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, media->operator_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &media->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&media->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, media->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->deviceName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"deviceName\" : \"%.*s\"", media->deviceName.size, media->deviceName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->device)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, media->device);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->height)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"height\" : \"%d\"", media->height);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->width)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"width\" : \"%d\"", media->width);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->frames)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"frames\" : \"%d\"", media->frames);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->duration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"duration\" : \"%d\"", media->duration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->content)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, media->content);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&media->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < media->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &media->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Medication(Arena *arena, Medication *medication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medication->id.size, medication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medication->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medication->implicitRules.size, medication->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medication->language.size, medication->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medication->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medication->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medication->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medication->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", medication->status.size, medication->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medication->manufacturer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->form)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medication->form);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medication->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication->ingredient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication->ingredient_count; i++)
		{
			String8 to_add = Serialize_Medication_Ingredient(arena, &medication->ingredient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication->batch)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Medication_Batch(arena, medication->batch);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Medication_Ingredient(Arena *arena, Medication_Ingredient *medication_Ingredient)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medication_Ingredient->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medication_Ingredient->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medication_Ingredient->id.size, medication_Ingredient->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication_Ingredient->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication_Ingredient->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medication_Ingredient->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication_Ingredient->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication_Ingredient->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medication_Ingredient->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medication_Ingredient->item_type == Medication_Ingredient::ItemType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medication_Ingredient->item.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medication_Ingredient->item_type == Medication_Ingredient::ItemType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medication_Ingredient->item.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medication_Ingredient->isActive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isActive\" : \"%.*s\"", medication_Ingredient->isActive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication_Ingredient->strength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medication_Ingredient->strength);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Medication_Batch(Arena *arena, Medication_Batch *medication_Batch)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medication_Batch->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medication_Batch->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medication_Batch->id.size, medication_Batch->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication_Batch->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication_Batch->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medication_Batch->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication_Batch->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medication_Batch->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medication_Batch->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medication_Batch->lotNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lotNumber\" : \"%.*s\"", medication_Batch->lotNumber.size, medication_Batch->lotNumber.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medication_Batch->expirationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expirationDate\" : \"%.*s\"", medication_Batch->expirationDate.size, medication_Batch->expirationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationAdministration(Arena *arena, MedicationAdministration *medicationAdministration)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationAdministration->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationAdministration->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationAdministration->id.size, medicationAdministration->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicationAdministration->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicationAdministration->implicitRules.size, medicationAdministration->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicationAdministration->language.size, medicationAdministration->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicationAdministration->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicationAdministration->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationAdministration->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationAdministration->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicationAdministration->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->instantiates)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->instantiates_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiates\" : \"%.*s\"", &medicationAdministration->instantiates[i].size, &medicationAdministration->instantiates[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationAdministration->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", medicationAdministration->status.size, medicationAdministration->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->statusReason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationAdministration->statusReason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationAdministration->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationAdministration->medication_type == MedicationAdministration::MedicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationAdministration->medication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationAdministration->medication_type == MedicationAdministration::MedicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationAdministration->medication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationAdministration->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationAdministration->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationAdministration->context);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->supportingInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->supportingInformation_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationAdministration->supportingInformation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationAdministration->effective_type == MedicationAdministration::EffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", medicationAdministration->effective.valueDateTime.size, medicationAdministration->effective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationAdministration->effective_type == MedicationAdministration::EffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, medicationAdministration->effective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationAdministration->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->performer_count; i++)
		{
			String8 to_add = Serialize_MedicationAdministration_Performer(arena, &medicationAdministration->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationAdministration->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationAdministration->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationAdministration->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->device)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->device_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationAdministration->device[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &medicationAdministration->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration->dosage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicationAdministration_Dosage(arena, medicationAdministration->dosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration->eventHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration->eventHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationAdministration->eventHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationAdministration_Performer(Arena *arena, MedicationAdministration_Performer *medicationAdministration_Performer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationAdministration_Performer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationAdministration_Performer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationAdministration_Performer->id.size, medicationAdministration_Performer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration_Performer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration_Performer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationAdministration_Performer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration_Performer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration_Performer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationAdministration_Performer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration_Performer->function_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationAdministration_Performer->function_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration_Performer->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationAdministration_Performer->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationAdministration_Dosage(Arena *arena, MedicationAdministration_Dosage *medicationAdministration_Dosage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationAdministration_Dosage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationAdministration_Dosage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationAdministration_Dosage->id.size, medicationAdministration_Dosage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration_Dosage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration_Dosage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationAdministration_Dosage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration_Dosage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationAdministration_Dosage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationAdministration_Dosage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationAdministration_Dosage->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", medicationAdministration_Dosage->text.size, medicationAdministration_Dosage->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration_Dosage->site)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationAdministration_Dosage->site);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration_Dosage->route)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationAdministration_Dosage->route);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration_Dosage->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationAdministration_Dosage->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationAdministration_Dosage->dose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationAdministration_Dosage->dose);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationAdministration_Dosage->rate_type == MedicationAdministration_Dosage::RateType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, medicationAdministration_Dosage->rate.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationAdministration_Dosage->rate_type == MedicationAdministration_Dosage::RateType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, medicationAdministration_Dosage->rate.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationDispense(Arena *arena, MedicationDispense *medicationDispense)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationDispense->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationDispense->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationDispense->id.size, medicationDispense->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicationDispense->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicationDispense->implicitRules.size, medicationDispense->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicationDispense->language.size, medicationDispense->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicationDispense->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicationDispense->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationDispense->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationDispense->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicationDispense->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationDispense->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", medicationDispense->status.size, medicationDispense->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationDispense->statusReason_type == MedicationDispense::StatusReasonType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationDispense->statusReason.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationDispense->statusReason_type == MedicationDispense::StatusReasonType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationDispense->statusReason.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationDispense->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationDispense->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationDispense->medication_type == MedicationDispense::MedicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationDispense->medication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationDispense->medication_type == MedicationDispense::MedicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationDispense->medication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationDispense->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationDispense->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationDispense->context);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->supportingInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->supportingInformation_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationDispense->supportingInformation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->performer_count; i++)
		{
			String8 to_add = Serialize_MedicationDispense_Performer(arena, &medicationDispense->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationDispense->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->authorizingPrescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->authorizingPrescription_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationDispense->authorizingPrescription[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationDispense->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationDispense->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->daysSupply)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationDispense->daysSupply);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->whenPrepared)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"whenPrepared\" : \"%.*s\"", medicationDispense->whenPrepared.size, medicationDispense->whenPrepared.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->whenHandedOver)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"whenHandedOver\" : \"%.*s\"", medicationDispense->whenHandedOver.size, medicationDispense->whenHandedOver.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->destination)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationDispense->destination);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->receiver)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->receiver_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationDispense->receiver[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &medicationDispense->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->dosageInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->dosageInstruction_count; i++)
		{
			String8 to_add = Serialize_Dosage(arena, &medicationDispense->dosageInstruction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->substitution)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicationDispense_Substitution(arena, medicationDispense->substitution);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense->detectedIssue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->detectedIssue_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationDispense->detectedIssue[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense->eventHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense->eventHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationDispense->eventHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationDispense_Performer(Arena *arena, MedicationDispense_Performer *medicationDispense_Performer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationDispense_Performer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationDispense_Performer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationDispense_Performer->id.size, medicationDispense_Performer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense_Performer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense_Performer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationDispense_Performer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense_Performer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense_Performer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationDispense_Performer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense_Performer->function_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationDispense_Performer->function_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense_Performer->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationDispense_Performer->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationDispense_Substitution(Arena *arena, MedicationDispense_Substitution *medicationDispense_Substitution)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationDispense_Substitution->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationDispense_Substitution->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationDispense_Substitution->id.size, medicationDispense_Substitution->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense_Substitution->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense_Substitution->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationDispense_Substitution->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense_Substitution->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense_Substitution->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationDispense_Substitution->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense_Substitution->wasSubstituted)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"wasSubstituted\" : \"%.*s\"", medicationDispense_Substitution->wasSubstituted ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense_Substitution->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationDispense_Substitution->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationDispense_Substitution->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense_Substitution->reason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationDispense_Substitution->reason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationDispense_Substitution->responsibleParty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationDispense_Substitution->responsibleParty_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationDispense_Substitution->responsibleParty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge(Arena *arena, MedicationKnowledge *medicationKnowledge)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge->id.size, medicationKnowledge->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicationKnowledge->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicationKnowledge->implicitRules.size, medicationKnowledge->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicationKnowledge->language.size, medicationKnowledge->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicationKnowledge->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicationKnowledge->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", medicationKnowledge->status.size, medicationKnowledge->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationKnowledge->manufacturer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->doseForm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge->doseForm);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationKnowledge->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->synonym)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->synonym_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"synonym\" : \"%.*s\"", &medicationKnowledge->synonym[i].size, &medicationKnowledge->synonym[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->relatedMedicationKnowledge)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->relatedMedicationKnowledge_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_RelatedMedicationKnowledge(arena, &medicationKnowledge->relatedMedicationKnowledge[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->associatedMedication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->associatedMedication_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationKnowledge->associatedMedication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->productType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->productType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationKnowledge->productType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->monograph)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->monograph_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_Monograph(arena, &medicationKnowledge->monograph[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->ingredient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->ingredient_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_Ingredient(arena, &medicationKnowledge->ingredient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->preparationInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preparationInstruction\" : \"%.*s\"", medicationKnowledge->preparationInstruction.size, medicationKnowledge->preparationInstruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->intendedRoute)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->intendedRoute_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationKnowledge->intendedRoute[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->cost)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->cost_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_Cost(arena, &medicationKnowledge->cost[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->monitoringProgram)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->monitoringProgram_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_MonitoringProgram(arena, &medicationKnowledge->monitoringProgram[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->administrationGuidelines)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->administrationGuidelines_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_AdministrationGuidelines(arena, &medicationKnowledge->administrationGuidelines[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->medicineClassification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->medicineClassification_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_MedicineClassification(arena, &medicationKnowledge->medicineClassification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->packaging)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicationKnowledge_Packaging(arena, medicationKnowledge->packaging);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge->drugCharacteristic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->drugCharacteristic_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_DrugCharacteristic(arena, &medicationKnowledge->drugCharacteristic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->contraindication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->contraindication_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationKnowledge->contraindication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->regulatory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->regulatory_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_Regulatory(arena, &medicationKnowledge->regulatory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge->kinetics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge->kinetics_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_Kinetics(arena, &medicationKnowledge->kinetics[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_RelatedMedicationKnowledge(Arena *arena, MedicationKnowledge_RelatedMedicationKnowledge *medicationKnowledge_RelatedMedicationKnowledge)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_RelatedMedicationKnowledge->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_RelatedMedicationKnowledge->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_RelatedMedicationKnowledge->id.size, medicationKnowledge_RelatedMedicationKnowledge->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_RelatedMedicationKnowledge->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_RelatedMedicationKnowledge->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_RelatedMedicationKnowledge->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_RelatedMedicationKnowledge->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_RelatedMedicationKnowledge->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_RelatedMedicationKnowledge->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_RelatedMedicationKnowledge->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_RelatedMedicationKnowledge->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_RelatedMedicationKnowledge->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_RelatedMedicationKnowledge->reference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationKnowledge_RelatedMedicationKnowledge->reference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Monograph(Arena *arena, MedicationKnowledge_Monograph *medicationKnowledge_Monograph)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Monograph->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Monograph->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Monograph->id.size, medicationKnowledge_Monograph->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Monograph->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Monograph->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Monograph->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Monograph->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Monograph->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Monograph->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Monograph->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_Monograph->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Monograph->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationKnowledge_Monograph->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Ingredient(Arena *arena, MedicationKnowledge_Ingredient *medicationKnowledge_Ingredient)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Ingredient->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Ingredient->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Ingredient->id.size, medicationKnowledge_Ingredient->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Ingredient->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Ingredient->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Ingredient->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Ingredient->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Ingredient->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Ingredient->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationKnowledge_Ingredient->item_type == MedicationKnowledge_Ingredient::ItemType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_Ingredient->item.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationKnowledge_Ingredient->item_type == MedicationKnowledge_Ingredient::ItemType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationKnowledge_Ingredient->item.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationKnowledge_Ingredient->isActive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isActive\" : \"%.*s\"", medicationKnowledge_Ingredient->isActive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Ingredient->strength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicationKnowledge_Ingredient->strength);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Cost(Arena *arena, MedicationKnowledge_Cost *medicationKnowledge_Cost)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Cost->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Cost->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Cost->id.size, medicationKnowledge_Cost->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Cost->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Cost->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Cost->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Cost->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Cost->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Cost->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Cost->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_Cost->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Cost->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"source\" : \"%.*s\"", medicationKnowledge_Cost->source.size, medicationKnowledge_Cost->source.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Cost->cost)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, medicationKnowledge_Cost->cost);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_MonitoringProgram(Arena *arena, MedicationKnowledge_MonitoringProgram *medicationKnowledge_MonitoringProgram)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_MonitoringProgram->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_MonitoringProgram->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_MonitoringProgram->id.size, medicationKnowledge_MonitoringProgram->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_MonitoringProgram->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_MonitoringProgram->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_MonitoringProgram->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_MonitoringProgram->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_MonitoringProgram->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_MonitoringProgram->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_MonitoringProgram->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_MonitoringProgram->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_MonitoringProgram->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", medicationKnowledge_MonitoringProgram->name.size, medicationKnowledge_MonitoringProgram->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_AdministrationGuidelines(Arena *arena, MedicationKnowledge_AdministrationGuidelines *medicationKnowledge_AdministrationGuidelines)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_AdministrationGuidelines->id.size, medicationKnowledge_AdministrationGuidelines->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_AdministrationGuidelines->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_AdministrationGuidelines->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines->dosage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines->dosage_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_AdministrationGuidelines_Dosage(arena, &medicationKnowledge_AdministrationGuidelines->dosage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationKnowledge_AdministrationGuidelines->indication_type == MedicationKnowledge_AdministrationGuidelines::IndicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_AdministrationGuidelines->indication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationKnowledge_AdministrationGuidelines->indication_type == MedicationKnowledge_AdministrationGuidelines::IndicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationKnowledge_AdministrationGuidelines->indication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines->patientCharacteristics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines->patientCharacteristics_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics(arena, &medicationKnowledge_AdministrationGuidelines->patientCharacteristics[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_AdministrationGuidelines_Dosage(Arena *arena, MedicationKnowledge_AdministrationGuidelines_Dosage *medicationKnowledge_AdministrationGuidelines_Dosage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_Dosage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_Dosage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_AdministrationGuidelines_Dosage->id.size, medicationKnowledge_AdministrationGuidelines_Dosage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_Dosage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines_Dosage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_AdministrationGuidelines_Dosage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_AdministrationGuidelines_Dosage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_Dosage->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_AdministrationGuidelines_Dosage->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_Dosage->dosage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines_Dosage->dosage_count; i++)
		{
			String8 to_add = Serialize_Dosage(arena, &medicationKnowledge_AdministrationGuidelines_Dosage->dosage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics(Arena *arena, MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics *medicationKnowledge_AdministrationGuidelines_PatientCharacteristics)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->id.size, medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic_type == MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics::CharacteristicType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic_type == MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics::CharacteristicType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->characteristic.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", &medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value[i].size, &medicationKnowledge_AdministrationGuidelines_PatientCharacteristics->value[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_MedicineClassification(Arena *arena, MedicationKnowledge_MedicineClassification *medicationKnowledge_MedicineClassification)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_MedicineClassification->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_MedicineClassification->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_MedicineClassification->id.size, medicationKnowledge_MedicineClassification->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_MedicineClassification->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_MedicineClassification->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_MedicineClassification->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_MedicineClassification->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_MedicineClassification->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_MedicineClassification->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_MedicineClassification->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_MedicineClassification->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_MedicineClassification->classification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_MedicineClassification->classification_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationKnowledge_MedicineClassification->classification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Packaging(Arena *arena, MedicationKnowledge_Packaging *medicationKnowledge_Packaging)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Packaging->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Packaging->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Packaging->id.size, medicationKnowledge_Packaging->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Packaging->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Packaging->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Packaging->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Packaging->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Packaging->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Packaging->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Packaging->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_Packaging->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Packaging->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationKnowledge_Packaging->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_DrugCharacteristic(Arena *arena, MedicationKnowledge_DrugCharacteristic *medicationKnowledge_DrugCharacteristic)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_DrugCharacteristic->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_DrugCharacteristic->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_DrugCharacteristic->id.size, medicationKnowledge_DrugCharacteristic->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_DrugCharacteristic->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_DrugCharacteristic->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_DrugCharacteristic->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_DrugCharacteristic->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_DrugCharacteristic->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_DrugCharacteristic->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_DrugCharacteristic->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_DrugCharacteristic->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationKnowledge_DrugCharacteristic->value_type == MedicationKnowledge_DrugCharacteristic::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_DrugCharacteristic->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationKnowledge_DrugCharacteristic->value_type == MedicationKnowledge_DrugCharacteristic::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", medicationKnowledge_DrugCharacteristic->value.valueString.size, medicationKnowledge_DrugCharacteristic->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationKnowledge_DrugCharacteristic->value_type == MedicationKnowledge_DrugCharacteristic::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, medicationKnowledge_DrugCharacteristic->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationKnowledge_DrugCharacteristic->value_type == MedicationKnowledge_DrugCharacteristic::ValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", medicationKnowledge_DrugCharacteristic->value.valueBase64Binary.size, medicationKnowledge_DrugCharacteristic->value.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Regulatory(Arena *arena, MedicationKnowledge_Regulatory *medicationKnowledge_Regulatory)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Regulatory->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Regulatory->id.size, medicationKnowledge_Regulatory->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Regulatory->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory->regulatoryAuthority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationKnowledge_Regulatory->regulatoryAuthority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Regulatory->substitution)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory->substitution_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_Regulatory_Substitution(arena, &medicationKnowledge_Regulatory->substitution[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory->schedule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory->schedule_count; i++)
		{
			String8 to_add = Serialize_MedicationKnowledge_Regulatory_Schedule(arena, &medicationKnowledge_Regulatory->schedule[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory->maxDispense)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicationKnowledge_Regulatory_MaxDispense(arena, medicationKnowledge_Regulatory->maxDispense);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Regulatory_Substitution(Arena *arena, MedicationKnowledge_Regulatory_Substitution *medicationKnowledge_Regulatory_Substitution)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Regulatory_Substitution->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Substitution->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Regulatory_Substitution->id.size, medicationKnowledge_Regulatory_Substitution->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Substitution->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory_Substitution->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory_Substitution->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Substitution->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory_Substitution->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory_Substitution->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Substitution->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_Regulatory_Substitution->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Substitution->allowed)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"allowed\" : \"%.*s\"", medicationKnowledge_Regulatory_Substitution->allowed ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Regulatory_Schedule(Arena *arena, MedicationKnowledge_Regulatory_Schedule *medicationKnowledge_Regulatory_Schedule)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Regulatory_Schedule->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Schedule->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Regulatory_Schedule->id.size, medicationKnowledge_Regulatory_Schedule->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Schedule->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory_Schedule->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory_Schedule->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Schedule->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory_Schedule->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory_Schedule->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_Schedule->schedule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationKnowledge_Regulatory_Schedule->schedule);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Regulatory_MaxDispense(Arena *arena, MedicationKnowledge_Regulatory_MaxDispense *medicationKnowledge_Regulatory_MaxDispense)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Regulatory_MaxDispense->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_MaxDispense->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Regulatory_MaxDispense->id.size, medicationKnowledge_Regulatory_MaxDispense->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_MaxDispense->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory_MaxDispense->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory_MaxDispense->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_MaxDispense->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Regulatory_MaxDispense->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Regulatory_MaxDispense->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_MaxDispense->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationKnowledge_Regulatory_MaxDispense->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Regulatory_MaxDispense->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, medicationKnowledge_Regulatory_MaxDispense->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationKnowledge_Kinetics(Arena *arena, MedicationKnowledge_Kinetics *medicationKnowledge_Kinetics)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationKnowledge_Kinetics->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationKnowledge_Kinetics->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationKnowledge_Kinetics->id.size, medicationKnowledge_Kinetics->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationKnowledge_Kinetics->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Kinetics->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Kinetics->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Kinetics->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Kinetics->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationKnowledge_Kinetics->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Kinetics->areaUnderCurve)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Kinetics->areaUnderCurve_count; i++)
		{
			String8 to_add = Serialize_Quantity(arena, &medicationKnowledge_Kinetics->areaUnderCurve[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Kinetics->lethalDose50)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationKnowledge_Kinetics->lethalDose50_count; i++)
		{
			String8 to_add = Serialize_Quantity(arena, &medicationKnowledge_Kinetics->lethalDose50[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationKnowledge_Kinetics->halfLifePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, medicationKnowledge_Kinetics->halfLifePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationRequest(Arena *arena, MedicationRequest *medicationRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationRequest->id.size, medicationRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicationRequest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicationRequest->implicitRules.size, medicationRequest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicationRequest->language.size, medicationRequest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicationRequest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicationRequest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicationRequest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", medicationRequest->status.size, medicationRequest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationRequest->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", medicationRequest->intent.size, medicationRequest->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationRequest->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", medicationRequest->priority.size, medicationRequest->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->doNotPerform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"doNotPerform\" : \"%.*s\"", medicationRequest->doNotPerform ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationRequest->reported_type == MedicationRequest::ReportedType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", medicationRequest->reported.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationRequest->reported_type == MedicationRequest::ReportedType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationRequest->reported.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationRequest->medication_type == MedicationRequest::MedicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationRequest->medication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationRequest->medication_type == MedicationRequest::MedicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationRequest->medication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationRequest->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationRequest->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationRequest->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->supportingInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->supportingInformation_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationRequest->supportingInformation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->authoredOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authoredOn\" : \"%.*s\"", medicationRequest->authoredOn.size, medicationRequest->authoredOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->requester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationRequest->requester);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationRequest->performer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->performerType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationRequest->performerType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->recorder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationRequest->recorder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationRequest->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationRequest->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &medicationRequest->instantiatesCanonical[i].size, &medicationRequest->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &medicationRequest->instantiatesUri[i].size, &medicationRequest->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationRequest->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->groupIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, medicationRequest->groupIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->courseOfTherapyType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationRequest->courseOfTherapyType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->insurance_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationRequest->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &medicationRequest->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->dosageInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->dosageInstruction_count; i++)
		{
			String8 to_add = Serialize_Dosage(arena, &medicationRequest->dosageInstruction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->dispenseRequest)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicationRequest_DispenseRequest(arena, medicationRequest->dispenseRequest);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->substitution)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicationRequest_Substitution(arena, medicationRequest->substitution);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->priorPrescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationRequest->priorPrescription);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest->detectedIssue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->detectedIssue_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationRequest->detectedIssue[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest->eventHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest->eventHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationRequest->eventHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationRequest_DispenseRequest(Arena *arena, MedicationRequest_DispenseRequest *medicationRequest_DispenseRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationRequest_DispenseRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationRequest_DispenseRequest->id.size, medicationRequest_DispenseRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest_DispenseRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest_DispenseRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest_DispenseRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest_DispenseRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->initialFill)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicationRequest_DispenseRequest_InitialFill(arena, medicationRequest_DispenseRequest->initialFill);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->dispenseInterval)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, medicationRequest_DispenseRequest->dispenseInterval);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->validityPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, medicationRequest_DispenseRequest->validityPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->numberOfRepeatsAllowed)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"numberOfRepeatsAllowed\" : \"%d\"", medicationRequest_DispenseRequest->numberOfRepeatsAllowed);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationRequest_DispenseRequest->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->expectedSupplyDuration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, medicationRequest_DispenseRequest->expectedSupplyDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationRequest_DispenseRequest->performer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationRequest_DispenseRequest_InitialFill(Arena *arena, MedicationRequest_DispenseRequest_InitialFill *medicationRequest_DispenseRequest_InitialFill)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationRequest_DispenseRequest_InitialFill->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationRequest_DispenseRequest_InitialFill->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationRequest_DispenseRequest_InitialFill->id.size, medicationRequest_DispenseRequest_InitialFill->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest_InitialFill->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest_DispenseRequest_InitialFill->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest_DispenseRequest_InitialFill->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest_DispenseRequest_InitialFill->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest_DispenseRequest_InitialFill->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest_DispenseRequest_InitialFill->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest_DispenseRequest_InitialFill->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicationRequest_DispenseRequest_InitialFill->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_DispenseRequest_InitialFill->duration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, medicationRequest_DispenseRequest_InitialFill->duration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationRequest_Substitution(Arena *arena, MedicationRequest_Substitution *medicationRequest_Substitution)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationRequest_Substitution->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationRequest_Substitution->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationRequest_Substitution->id.size, medicationRequest_Substitution->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationRequest_Substitution->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest_Substitution->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest_Substitution->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationRequest_Substitution->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationRequest_Substitution->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationRequest_Substitution->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationRequest_Substitution->allowed_type == MedicationRequest_Substitution::AllowedType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", medicationRequest_Substitution->allowed.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationRequest_Substitution->allowed_type == MedicationRequest_Substitution::AllowedType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationRequest_Substitution->allowed.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationRequest_Substitution->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationRequest_Substitution->reason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicationStatement(Arena *arena, MedicationStatement *medicationStatement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicationStatement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicationStatement->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicationStatement->id.size, medicationStatement->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicationStatement->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicationStatement->implicitRules.size, medicationStatement->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicationStatement->language.size, medicationStatement->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicationStatement->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicationStatement->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationStatement->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicationStatement->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicationStatement->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationStatement->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationStatement->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", medicationStatement->status.size, medicationStatement->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->statusReason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationStatement->statusReason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicationStatement->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationStatement->medication_type == MedicationStatement::MedicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicationStatement->medication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationStatement->medication_type == MedicationStatement::MedicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicationStatement->medication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationStatement->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationStatement->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationStatement->context);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicationStatement->effective_type == MedicationStatement::EffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", medicationStatement->effective.valueDateTime.size, medicationStatement->effective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicationStatement->effective_type == MedicationStatement::EffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, medicationStatement->effective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicationStatement->dateAsserted)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"dateAsserted\" : \"%.*s\"", medicationStatement->dateAsserted.size, medicationStatement->dateAsserted.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->informationSource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicationStatement->informationSource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicationStatement->derivedFrom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->derivedFrom_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationStatement->derivedFrom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicationStatement->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicationStatement->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &medicationStatement->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicationStatement->dosage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicationStatement->dosage_count; i++)
		{
			String8 to_add = Serialize_Dosage(arena, &medicationStatement->dosage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProduct(Arena *arena, MedicinalProduct *medicinalProduct)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProduct->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProduct->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProduct->id.size, medicinalProduct->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProduct->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProduct->implicitRules.size, medicinalProduct->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProduct->language.size, medicinalProduct->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProduct->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProduct->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProduct->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->domain)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, medicinalProduct->domain);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->combinedPharmaceuticalDoseForm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct->combinedPharmaceuticalDoseForm);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->legalStatusOfSupply)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct->legalStatusOfSupply);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->additionalMonitoringIndicator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct->additionalMonitoringIndicator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->specialMeasures)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->specialMeasures_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"specialMeasures\" : \"%.*s\"", &medicinalProduct->specialMeasures[i].size, &medicinalProduct->specialMeasures[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->paediatricUseIndicator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct->paediatricUseIndicator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct->productClassification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->productClassification_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProduct->productClassification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->marketingStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->marketingStatus_count; i++)
		{
			String8 to_add = Serialize_MarketingStatus(arena, &medicinalProduct->marketingStatus[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->pharmaceuticalProduct)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->pharmaceuticalProduct_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProduct->pharmaceuticalProduct[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->packagedMedicinalProduct)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->packagedMedicinalProduct_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProduct->packagedMedicinalProduct[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->attachedDocument)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->attachedDocument_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProduct->attachedDocument[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->masterFile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->masterFile_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProduct->masterFile[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->contact_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProduct->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->clinicalTrial)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->clinicalTrial_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProduct->clinicalTrial[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->name_count; i++)
		{
			String8 to_add = Serialize_MedicinalProduct_Name(arena, &medicinalProduct->name[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->crossReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->crossReference_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProduct->crossReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->manufacturingBusinessOperation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->manufacturingBusinessOperation_count; i++)
		{
			String8 to_add = Serialize_MedicinalProduct_ManufacturingBusinessOperation(arena, &medicinalProduct->manufacturingBusinessOperation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct->specialDesignation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct->specialDesignation_count; i++)
		{
			String8 to_add = Serialize_MedicinalProduct_SpecialDesignation(arena, &medicinalProduct->specialDesignation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProduct_Name(Arena *arena, MedicinalProduct_Name *medicinalProduct_Name)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProduct_Name->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProduct_Name->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProduct_Name->id.size, medicinalProduct_Name->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_Name->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_Name->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_Name->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_Name->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_Name->productName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"productName\" : \"%.*s\"", medicinalProduct_Name->productName.size, medicinalProduct_Name->productName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_Name->namePart)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name->namePart_count; i++)
		{
			String8 to_add = Serialize_MedicinalProduct_Name_NamePart(arena, &medicinalProduct_Name->namePart[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_Name->countryLanguage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name->countryLanguage_count; i++)
		{
			String8 to_add = Serialize_MedicinalProduct_Name_CountryLanguage(arena, &medicinalProduct_Name->countryLanguage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProduct_Name_NamePart(Arena *arena, MedicinalProduct_Name_NamePart *medicinalProduct_Name_NamePart)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProduct_Name_NamePart->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProduct_Name_NamePart->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProduct_Name_NamePart->id.size, medicinalProduct_Name_NamePart->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_Name_NamePart->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name_NamePart->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_Name_NamePart->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_Name_NamePart->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name_NamePart->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_Name_NamePart->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_Name_NamePart->part)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"part\" : \"%.*s\"", medicinalProduct_Name_NamePart->part.size, medicinalProduct_Name_NamePart->part.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_Name_NamePart->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, medicinalProduct_Name_NamePart->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProduct_Name_CountryLanguage(Arena *arena, MedicinalProduct_Name_CountryLanguage *medicinalProduct_Name_CountryLanguage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProduct_Name_CountryLanguage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProduct_Name_CountryLanguage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProduct_Name_CountryLanguage->id.size, medicinalProduct_Name_CountryLanguage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_Name_CountryLanguage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name_CountryLanguage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_Name_CountryLanguage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_Name_CountryLanguage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_Name_CountryLanguage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_Name_CountryLanguage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_Name_CountryLanguage->country)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_Name_CountryLanguage->country);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_Name_CountryLanguage->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_Name_CountryLanguage->jurisdiction);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_Name_CountryLanguage->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_Name_CountryLanguage->language);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProduct_ManufacturingBusinessOperation(Arena *arena, MedicinalProduct_ManufacturingBusinessOperation *medicinalProduct_ManufacturingBusinessOperation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProduct_ManufacturingBusinessOperation->id.size, medicinalProduct_ManufacturingBusinessOperation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_ManufacturingBusinessOperation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_ManufacturingBusinessOperation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_ManufacturingBusinessOperation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_ManufacturingBusinessOperation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->operationType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_ManufacturingBusinessOperation->operationType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->authorisationReferenceNumber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, medicinalProduct_ManufacturingBusinessOperation->authorisationReferenceNumber);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->effectiveDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"effectiveDate\" : \"%.*s\"", medicinalProduct_ManufacturingBusinessOperation->effectiveDate.size, medicinalProduct_ManufacturingBusinessOperation->effectiveDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->confidentialityIndicator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_ManufacturingBusinessOperation->confidentialityIndicator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_ManufacturingBusinessOperation->manufacturer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProduct_ManufacturingBusinessOperation->manufacturer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_ManufacturingBusinessOperation->regulator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicinalProduct_ManufacturingBusinessOperation->regulator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProduct_SpecialDesignation(Arena *arena, MedicinalProduct_SpecialDesignation *medicinalProduct_SpecialDesignation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProduct_SpecialDesignation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProduct_SpecialDesignation->id.size, medicinalProduct_SpecialDesignation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_SpecialDesignation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_SpecialDesignation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_SpecialDesignation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProduct_SpecialDesignation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProduct_SpecialDesignation->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProduct_SpecialDesignation->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_SpecialDesignation->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->intendedUse)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_SpecialDesignation->intendedUse);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicinalProduct_SpecialDesignation->indication_type == MedicinalProduct_SpecialDesignation::IndicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_SpecialDesignation->indication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicinalProduct_SpecialDesignation->indication_type == MedicinalProduct_SpecialDesignation::IndicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicinalProduct_SpecialDesignation->indication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicinalProduct_SpecialDesignation->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_SpecialDesignation->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", medicinalProduct_SpecialDesignation->date.size, medicinalProduct_SpecialDesignation->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProduct_SpecialDesignation->species)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProduct_SpecialDesignation->species);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductAuthorization(Arena *arena, MedicinalProductAuthorization *medicinalProductAuthorization)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductAuthorization->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductAuthorization->id.size, medicinalProductAuthorization->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductAuthorization->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductAuthorization->implicitRules.size, medicinalProductAuthorization->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductAuthorization->language.size, medicinalProductAuthorization->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductAuthorization->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductAuthorization->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductAuthorization->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductAuthorization->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProductAuthorization->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicinalProductAuthorization->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->country)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization->country_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductAuthorization->country[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductAuthorization->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductAuthorization->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->statusDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"statusDate\" : \"%.*s\"", medicinalProductAuthorization->statusDate.size, medicinalProductAuthorization->statusDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->restoreDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"restoreDate\" : \"%.*s\"", medicinalProductAuthorization->restoreDate.size, medicinalProductAuthorization->restoreDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->validityPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, medicinalProductAuthorization->validityPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->dataExclusivityPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, medicinalProductAuthorization->dataExclusivityPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->dateOfFirstAuthorization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"dateOfFirstAuthorization\" : \"%.*s\"", medicinalProductAuthorization->dateOfFirstAuthorization.size, medicinalProductAuthorization->dateOfFirstAuthorization.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->internationalBirthDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"internationalBirthDate\" : \"%.*s\"", medicinalProductAuthorization->internationalBirthDate.size, medicinalProductAuthorization->internationalBirthDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->legalBasis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductAuthorization->legalBasis);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->jurisdictionalAuthorization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization->jurisdictionalAuthorization_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductAuthorization_JurisdictionalAuthorization(arena, &medicinalProductAuthorization->jurisdictionalAuthorization[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization->holder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicinalProductAuthorization->holder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->regulator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicinalProductAuthorization->regulator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization->procedure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicinalProductAuthorization_Procedure(arena, medicinalProductAuthorization->procedure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductAuthorization_JurisdictionalAuthorization(Arena *arena, MedicinalProductAuthorization_JurisdictionalAuthorization *medicinalProductAuthorization_JurisdictionalAuthorization)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductAuthorization_JurisdictionalAuthorization->id.size, medicinalProductAuthorization_JurisdictionalAuthorization->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization_JurisdictionalAuthorization->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductAuthorization_JurisdictionalAuthorization->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductAuthorization_JurisdictionalAuthorization->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization_JurisdictionalAuthorization->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProductAuthorization_JurisdictionalAuthorization->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->country)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductAuthorization_JurisdictionalAuthorization->country);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductAuthorization_JurisdictionalAuthorization->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->legalStatusOfSupply)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductAuthorization_JurisdictionalAuthorization->legalStatusOfSupply);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization_JurisdictionalAuthorization->validityPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, medicinalProductAuthorization_JurisdictionalAuthorization->validityPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductAuthorization_Procedure(Arena *arena, MedicinalProductAuthorization_Procedure *medicinalProductAuthorization_Procedure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductAuthorization_Procedure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_Procedure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductAuthorization_Procedure->id.size, medicinalProductAuthorization_Procedure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization_Procedure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization_Procedure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductAuthorization_Procedure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_Procedure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization_Procedure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductAuthorization_Procedure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductAuthorization_Procedure->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, medicinalProductAuthorization_Procedure->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductAuthorization_Procedure->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductAuthorization_Procedure->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicinalProductAuthorization_Procedure->date_type == MedicinalProductAuthorization_Procedure::DateType::Period)	
	{
			String8 to_add = Serialize_Period(arena, medicinalProductAuthorization_Procedure->date.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicinalProductAuthorization_Procedure->date_type == MedicinalProductAuthorization_Procedure::DateType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", medicinalProductAuthorization_Procedure->date.valueDateTime.size, medicinalProductAuthorization_Procedure->date.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&medicinalProductAuthorization_Procedure->application)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductAuthorization_Procedure->application_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductAuthorization_Procedure(arena, &medicinalProductAuthorization_Procedure->application[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductContraindication(Arena *arena, MedicinalProductContraindication *medicinalProductContraindication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductContraindication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductContraindication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductContraindication->id.size, medicinalProductContraindication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductContraindication->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductContraindication->implicitRules.size, medicinalProductContraindication->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductContraindication->language.size, medicinalProductContraindication->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductContraindication->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductContraindication->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductContraindication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductContraindication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->subject_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductContraindication->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication->disease)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductContraindication->disease);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication->diseaseStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductContraindication->diseaseStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication->comorbidity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->comorbidity_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductContraindication->comorbidity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication->therapeuticIndication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->therapeuticIndication_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductContraindication->therapeuticIndication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication->otherTherapy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->otherTherapy_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductContraindication_OtherTherapy(arena, &medicinalProductContraindication->otherTherapy[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication->population_count; i++)
		{
			String8 to_add = Serialize_Population(arena, &medicinalProductContraindication->population[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductContraindication_OtherTherapy(Arena *arena, MedicinalProductContraindication_OtherTherapy *medicinalProductContraindication_OtherTherapy)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductContraindication_OtherTherapy->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductContraindication_OtherTherapy->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductContraindication_OtherTherapy->id.size, medicinalProductContraindication_OtherTherapy->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductContraindication_OtherTherapy->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication_OtherTherapy->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductContraindication_OtherTherapy->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication_OtherTherapy->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductContraindication_OtherTherapy->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductContraindication_OtherTherapy->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductContraindication_OtherTherapy->therapyRelationshipType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductContraindication_OtherTherapy->therapyRelationshipType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicinalProductContraindication_OtherTherapy->medication_type == MedicinalProductContraindication_OtherTherapy::MedicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductContraindication_OtherTherapy->medication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicinalProductContraindication_OtherTherapy->medication_type == MedicinalProductContraindication_OtherTherapy::MedicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicinalProductContraindication_OtherTherapy->medication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductIndication(Arena *arena, MedicinalProductIndication *medicinalProductIndication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductIndication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductIndication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductIndication->id.size, medicinalProductIndication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductIndication->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductIndication->implicitRules.size, medicinalProductIndication->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductIndication->language.size, medicinalProductIndication->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductIndication->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductIndication->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIndication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIndication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->subject_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductIndication->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication->diseaseSymptomProcedure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIndication->diseaseSymptomProcedure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->diseaseStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIndication->diseaseStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->comorbidity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->comorbidity_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductIndication->comorbidity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication->intendedEffect)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIndication->intendedEffect);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->duration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicinalProductIndication->duration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication->otherTherapy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->otherTherapy_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductIndication_OtherTherapy(arena, &medicinalProductIndication->otherTherapy[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication->undesirableEffect)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->undesirableEffect_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductIndication->undesirableEffect[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication->population_count; i++)
		{
			String8 to_add = Serialize_Population(arena, &medicinalProductIndication->population[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductIndication_OtherTherapy(Arena *arena, MedicinalProductIndication_OtherTherapy *medicinalProductIndication_OtherTherapy)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductIndication_OtherTherapy->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductIndication_OtherTherapy->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductIndication_OtherTherapy->id.size, medicinalProductIndication_OtherTherapy->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIndication_OtherTherapy->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication_OtherTherapy->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIndication_OtherTherapy->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication_OtherTherapy->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIndication_OtherTherapy->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIndication_OtherTherapy->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIndication_OtherTherapy->therapyRelationshipType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIndication_OtherTherapy->therapyRelationshipType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicinalProductIndication_OtherTherapy->medication_type == MedicinalProductIndication_OtherTherapy::MedicationType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIndication_OtherTherapy->medication.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicinalProductIndication_OtherTherapy->medication_type == MedicinalProductIndication_OtherTherapy::MedicationType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicinalProductIndication_OtherTherapy->medication.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductIngredient(Arena *arena, MedicinalProductIngredient *medicinalProductIngredient)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductIngredient->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductIngredient->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductIngredient->id.size, medicinalProductIngredient->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductIngredient->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductIngredient->implicitRules.size, medicinalProductIngredient->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductIngredient->language.size, medicinalProductIngredient->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductIngredient->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductIngredient->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, medicinalProductIngredient->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIngredient->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->allergenicIndicator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"allergenicIndicator\" : \"%.*s\"", medicinalProductIngredient->allergenicIndicator ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient->manufacturer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductIngredient->manufacturer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient->specifiedSubstance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient->specifiedSubstance_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductIngredient_SpecifiedSubstance(arena, &medicinalProductIngredient->specifiedSubstance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient->substance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MedicinalProductIngredient_Substance(arena, medicinalProductIngredient->substance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductIngredient_SpecifiedSubstance(Arena *arena, MedicinalProductIngredient_SpecifiedSubstance *medicinalProductIngredient_SpecifiedSubstance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductIngredient_SpecifiedSubstance->id.size, medicinalProductIngredient_SpecifiedSubstance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_SpecifiedSubstance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_SpecifiedSubstance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIngredient_SpecifiedSubstance->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->group)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIngredient_SpecifiedSubstance->group);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->confidentiality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIngredient_SpecifiedSubstance->confidentiality);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance->strength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance->strength_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(arena, &medicinalProductIngredient_SpecifiedSubstance->strength[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(Arena *arena, MedicinalProductIngredient_SpecifiedSubstance_Strength *medicinalProductIngredient_SpecifiedSubstance_Strength)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductIngredient_SpecifiedSubstance_Strength->id.size, medicinalProductIngredient_SpecifiedSubstance_Strength->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance_Strength->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_SpecifiedSubstance_Strength->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_SpecifiedSubstance_Strength->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->presentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicinalProductIngredient_SpecifiedSubstance_Strength->presentation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->presentationLowLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicinalProductIngredient_SpecifiedSubstance_Strength->presentationLowLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->concentration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicinalProductIngredient_SpecifiedSubstance_Strength->concentration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->concentrationLowLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicinalProductIngredient_SpecifiedSubstance_Strength->concentrationLowLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->measurementPoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"measurementPoint\" : \"%.*s\"", medicinalProductIngredient_SpecifiedSubstance_Strength->measurementPoint.size, medicinalProductIngredient_SpecifiedSubstance_Strength->measurementPoint.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->country)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance_Strength->country_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductIngredient_SpecifiedSubstance_Strength->country[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength(arena, &medicinalProductIngredient_SpecifiedSubstance_Strength->referenceStrength[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength(Arena *arena, MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength *medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->id.size, medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->substance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->substance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->strength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->strength);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->strengthLowLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->strengthLowLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->measurementPoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"measurementPoint\" : \"%.*s\"", medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->measurementPoint.size, medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->measurementPoint.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength->country[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductIngredient_Substance(Arena *arena, MedicinalProductIngredient_Substance *medicinalProductIngredient_Substance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductIngredient_Substance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductIngredient_Substance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductIngredient_Substance->id.size, medicinalProductIngredient_Substance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_Substance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_Substance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_Substance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_Substance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_Substance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductIngredient_Substance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductIngredient_Substance->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductIngredient_Substance->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductIngredient_Substance->strength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductIngredient_Substance->strength_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductIngredient_SpecifiedSubstance_Strength(arena, &medicinalProductIngredient_Substance->strength[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductInteraction(Arena *arena, MedicinalProductInteraction *medicinalProductInteraction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductInteraction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductInteraction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductInteraction->id.size, medicinalProductInteraction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductInteraction->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductInteraction->implicitRules.size, medicinalProductInteraction->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductInteraction->language.size, medicinalProductInteraction->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductInteraction->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductInteraction->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductInteraction->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductInteraction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductInteraction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductInteraction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductInteraction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductInteraction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductInteraction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductInteraction->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductInteraction->subject_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductInteraction->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductInteraction->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", medicinalProductInteraction->description.size, medicinalProductInteraction->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->interactant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductInteraction->interactant_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductInteraction_Interactant(arena, &medicinalProductInteraction->interactant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductInteraction->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductInteraction->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->effect)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductInteraction->effect);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->incidence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductInteraction->incidence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction->management)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductInteraction->management);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductInteraction_Interactant(Arena *arena, MedicinalProductInteraction_Interactant *medicinalProductInteraction_Interactant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductInteraction_Interactant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductInteraction_Interactant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductInteraction_Interactant->id.size, medicinalProductInteraction_Interactant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductInteraction_Interactant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductInteraction_Interactant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductInteraction_Interactant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductInteraction_Interactant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductInteraction_Interactant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductInteraction_Interactant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(medicinalProductInteraction_Interactant->item_type == MedicinalProductInteraction_Interactant::ItemType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, medicinalProductInteraction_Interactant->item.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(medicinalProductInteraction_Interactant->item_type == MedicinalProductInteraction_Interactant::ItemType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductInteraction_Interactant->item.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductManufactured(Arena *arena, MedicinalProductManufactured *medicinalProductManufactured)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductManufactured->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductManufactured->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductManufactured->id.size, medicinalProductManufactured->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductManufactured->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductManufactured->implicitRules.size, medicinalProductManufactured->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductManufactured->language.size, medicinalProductManufactured->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductManufactured->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductManufactured->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductManufactured->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductManufactured->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductManufactured->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductManufactured->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductManufactured->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductManufactured->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductManufactured->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductManufactured->manufacturedDoseForm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductManufactured->manufacturedDoseForm);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->unitOfPresentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductManufactured->unitOfPresentation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicinalProductManufactured->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductManufactured->manufacturer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductManufactured->manufacturer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductManufactured->ingredient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductManufactured->ingredient_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductManufactured->ingredient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductManufactured->physicalCharacteristics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ProdCharacteristic(arena, medicinalProductManufactured->physicalCharacteristics);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductManufactured->otherCharacteristics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductManufactured->otherCharacteristics_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductManufactured->otherCharacteristics[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPackaged(Arena *arena, MedicinalProductPackaged *medicinalProductPackaged)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPackaged->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPackaged->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPackaged->id.size, medicinalProductPackaged->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductPackaged->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductPackaged->implicitRules.size, medicinalProductPackaged->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductPackaged->language.size, medicinalProductPackaged->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductPackaged->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductPackaged->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPackaged->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPackaged->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProductPackaged->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->subject_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductPackaged->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", medicinalProductPackaged->description.size, medicinalProductPackaged->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->legalStatusOfSupply)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPackaged->legalStatusOfSupply);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->marketingStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->marketingStatus_count; i++)
		{
			String8 to_add = Serialize_MarketingStatus(arena, &medicinalProductPackaged->marketingStatus[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->marketingAuthorization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, medicinalProductPackaged->marketingAuthorization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->manufacturer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductPackaged->manufacturer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->batchIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->batchIdentifier_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductPackaged_BatchIdentifier(arena, &medicinalProductPackaged->batchIdentifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged->packageItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged->packageItem_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductPackaged_PackageItem(arena, &medicinalProductPackaged->packageItem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPackaged_BatchIdentifier(Arena *arena, MedicinalProductPackaged_BatchIdentifier *medicinalProductPackaged_BatchIdentifier)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPackaged_BatchIdentifier->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPackaged_BatchIdentifier->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPackaged_BatchIdentifier->id.size, medicinalProductPackaged_BatchIdentifier->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged_BatchIdentifier->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_BatchIdentifier->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPackaged_BatchIdentifier->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_BatchIdentifier->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_BatchIdentifier->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPackaged_BatchIdentifier->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_BatchIdentifier->outerPackaging)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, medicinalProductPackaged_BatchIdentifier->outerPackaging);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged_BatchIdentifier->immediatePackaging)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, medicinalProductPackaged_BatchIdentifier->immediatePackaging);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPackaged_PackageItem(Arena *arena, MedicinalProductPackaged_PackageItem *medicinalProductPackaged_PackageItem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPackaged_PackageItem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPackaged_PackageItem->id.size, medicinalProductPackaged_PackageItem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPackaged_PackageItem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPackaged_PackageItem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProductPackaged_PackageItem->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPackaged_PackageItem->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicinalProductPackaged_PackageItem->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->material)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->material_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductPackaged_PackageItem->material[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->alternateMaterial)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->alternateMaterial_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductPackaged_PackageItem->alternateMaterial[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->device)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->device_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductPackaged_PackageItem->device[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->manufacturedItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->manufacturedItem_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductPackaged_PackageItem->manufacturedItem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->packageItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->packageItem_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductPackaged_PackageItem(arena, &medicinalProductPackaged_PackageItem->packageItem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->physicalCharacteristics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ProdCharacteristic(arena, medicinalProductPackaged_PackageItem->physicalCharacteristics);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->otherCharacteristics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->otherCharacteristics_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &medicinalProductPackaged_PackageItem->otherCharacteristics[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->shelfLifeStorage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->shelfLifeStorage_count; i++)
		{
			String8 to_add = Serialize_ProductShelfLife(arena, &medicinalProductPackaged_PackageItem->shelfLifeStorage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPackaged_PackageItem->manufacturer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPackaged_PackageItem->manufacturer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductPackaged_PackageItem->manufacturer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPharmaceutical(Arena *arena, MedicinalProductPharmaceutical *medicinalProductPharmaceutical)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPharmaceutical->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPharmaceutical->id.size, medicinalProductPharmaceutical->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductPharmaceutical->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductPharmaceutical->implicitRules.size, medicinalProductPharmaceutical->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductPharmaceutical->language.size, medicinalProductPharmaceutical->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductPharmaceutical->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductPharmaceutical->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &medicinalProductPharmaceutical->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->administrableDoseForm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPharmaceutical->administrableDoseForm);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical->unitOfPresentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPharmaceutical->unitOfPresentation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical->ingredient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->ingredient_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductPharmaceutical->ingredient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->device)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->device_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductPharmaceutical->device[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->characteristics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->characteristics_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductPharmaceutical_Characteristics(arena, &medicinalProductPharmaceutical->characteristics[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical->routeOfAdministration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical->routeOfAdministration_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductPharmaceutical_RouteOfAdministration(arena, &medicinalProductPharmaceutical->routeOfAdministration[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPharmaceutical_Characteristics(Arena *arena, MedicinalProductPharmaceutical_Characteristics *medicinalProductPharmaceutical_Characteristics)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPharmaceutical_Characteristics->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_Characteristics->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPharmaceutical_Characteristics->id.size, medicinalProductPharmaceutical_Characteristics->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_Characteristics->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_Characteristics->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_Characteristics->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_Characteristics->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_Characteristics->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_Characteristics->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_Characteristics->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPharmaceutical_Characteristics->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_Characteristics->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPharmaceutical_Characteristics->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPharmaceutical_RouteOfAdministration(Arena *arena, MedicinalProductPharmaceutical_RouteOfAdministration *medicinalProductPharmaceutical_RouteOfAdministration)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPharmaceutical_RouteOfAdministration->id.size, medicinalProductPharmaceutical_RouteOfAdministration->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_RouteOfAdministration->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_RouteOfAdministration->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPharmaceutical_RouteOfAdministration->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->firstDose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicinalProductPharmaceutical_RouteOfAdministration->firstDose);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->maxSingleDose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicinalProductPharmaceutical_RouteOfAdministration->maxSingleDose);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->maxDosePerDay)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicinalProductPharmaceutical_RouteOfAdministration->maxDosePerDay);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->maxDosePerTreatmentPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, medicinalProductPharmaceutical_RouteOfAdministration->maxDosePerTreatmentPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->maxTreatmentPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, medicinalProductPharmaceutical_RouteOfAdministration->maxTreatmentPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration->targetSpecies)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration->targetSpecies_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies(arena, &medicinalProductPharmaceutical_RouteOfAdministration->targetSpecies[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies(Arena *arena, MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies *medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->id.size, medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod_count; i++)
		{
			String8 to_add = Serialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod(arena, &medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies->withdrawalPeriod[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod(Arena *arena, MedicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod *medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->id.size, medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->tissue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->tissue);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->supportingInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"supportingInformation\" : \"%.*s\"", medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->supportingInformation.size, medicinalProductPharmaceutical_RouteOfAdministration_TargetSpecies_WithdrawalPeriod->supportingInformation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MedicinalProductUndesirableEffect(Arena *arena, MedicinalProductUndesirableEffect *medicinalProductUndesirableEffect)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&medicinalProductUndesirableEffect->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", medicinalProductUndesirableEffect->id.size, medicinalProductUndesirableEffect->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, medicinalProductUndesirableEffect->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", medicinalProductUndesirableEffect->implicitRules.size, medicinalProductUndesirableEffect->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", medicinalProductUndesirableEffect->language.size, medicinalProductUndesirableEffect->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, medicinalProductUndesirableEffect->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductUndesirableEffect->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &medicinalProductUndesirableEffect->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductUndesirableEffect->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductUndesirableEffect->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductUndesirableEffect->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &medicinalProductUndesirableEffect->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductUndesirableEffect->subject_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &medicinalProductUndesirableEffect->subject[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->symptomConditionEffect)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductUndesirableEffect->symptomConditionEffect);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->classification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductUndesirableEffect->classification);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->frequencyOfOccurrence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, medicinalProductUndesirableEffect->frequencyOfOccurrence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&medicinalProductUndesirableEffect->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < medicinalProductUndesirableEffect->population_count; i++)
		{
			String8 to_add = Serialize_Population(arena, &medicinalProductUndesirableEffect->population[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MessageDefinition(Arena *arena, MessageDefinition *messageDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&messageDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&messageDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", messageDefinition->id.size, messageDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, messageDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", messageDefinition->implicitRules.size, messageDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", messageDefinition->language.size, messageDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, messageDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &messageDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", messageDefinition->url.size, messageDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &messageDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", messageDefinition->version.size, messageDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", messageDefinition->name.size, messageDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", messageDefinition->title.size, messageDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->replaces)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->replaces_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"replaces\" : \"%.*s\"", &messageDefinition->replaces[i].size, &messageDefinition->replaces[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", messageDefinition->status.size, messageDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", messageDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", messageDefinition->date.size, messageDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", messageDefinition->publisher.size, messageDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &messageDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", messageDefinition->description.size, messageDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &messageDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &messageDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", messageDefinition->purpose.size, messageDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", messageDefinition->copyright.size, messageDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->base)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"base\" : \"%.*s\"", messageDefinition->base.size, messageDefinition->base.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->parent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->parent_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"parent\" : \"%.*s\"", &messageDefinition->parent[i].size, &messageDefinition->parent[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(messageDefinition->event_type == MessageDefinition::EventType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, messageDefinition->event.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(messageDefinition->event_type == MessageDefinition::EventType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", messageDefinition->event.valueUri.size, messageDefinition->event.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&messageDefinition->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"category\" : \"%.*s\"", messageDefinition->category.size, messageDefinition->category.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->focus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->focus_count; i++)
		{
			String8 to_add = Serialize_MessageDefinition_Focus(arena, &messageDefinition->focus[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->responseRequired)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"responseRequired\" : \"%.*s\"", messageDefinition->responseRequired.size, messageDefinition->responseRequired.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition->allowedResponse)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->allowedResponse_count; i++)
		{
			String8 to_add = Serialize_MessageDefinition_AllowedResponse(arena, &messageDefinition->allowedResponse[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition->graph)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition->graph_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"graph\" : \"%.*s\"", &messageDefinition->graph[i].size, &messageDefinition->graph[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MessageDefinition_Focus(Arena *arena, MessageDefinition_Focus *messageDefinition_Focus)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&messageDefinition_Focus->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&messageDefinition_Focus->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", messageDefinition_Focus->id.size, messageDefinition_Focus->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition_Focus->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition_Focus->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageDefinition_Focus->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition_Focus->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition_Focus->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageDefinition_Focus->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition_Focus->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", messageDefinition_Focus->code.size, messageDefinition_Focus->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition_Focus->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", messageDefinition_Focus->profile.size, messageDefinition_Focus->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition_Focus->min)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"min\" : \"%d\"", messageDefinition_Focus->min);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition_Focus->max)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"max\" : \"%.*s\"", messageDefinition_Focus->max.size, messageDefinition_Focus->max.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MessageDefinition_AllowedResponse(Arena *arena, MessageDefinition_AllowedResponse *messageDefinition_AllowedResponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&messageDefinition_AllowedResponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&messageDefinition_AllowedResponse->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", messageDefinition_AllowedResponse->id.size, messageDefinition_AllowedResponse->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition_AllowedResponse->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition_AllowedResponse->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageDefinition_AllowedResponse->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition_AllowedResponse->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageDefinition_AllowedResponse->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageDefinition_AllowedResponse->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageDefinition_AllowedResponse->message)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"message\" : \"%.*s\"", messageDefinition_AllowedResponse->message.size, messageDefinition_AllowedResponse->message.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageDefinition_AllowedResponse->situation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"situation\" : \"%.*s\"", messageDefinition_AllowedResponse->situation.size, messageDefinition_AllowedResponse->situation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MessageHeader(Arena *arena, MessageHeader *messageHeader)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&messageHeader->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&messageHeader->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", messageHeader->id.size, messageHeader->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, messageHeader->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", messageHeader->implicitRules.size, messageHeader->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", messageHeader->language.size, messageHeader->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, messageHeader->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &messageHeader->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(messageHeader->event_type == MessageHeader::EventType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, messageHeader->event.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(messageHeader->event_type == MessageHeader::EventType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", messageHeader->event.valueUri.size, messageHeader->event.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&messageHeader->destination)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader->destination_count; i++)
		{
			String8 to_add = Serialize_MessageHeader_Destination(arena, &messageHeader->destination[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader->sender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, messageHeader->sender);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->enterer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, messageHeader->enterer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, messageHeader->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MessageHeader_Source(arena, messageHeader->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->responsible)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, messageHeader->responsible);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, messageHeader->reason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->response)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MessageHeader_Response(arena, messageHeader->response);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader->focus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader->focus_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &messageHeader->focus[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", messageHeader->definition.size, messageHeader->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MessageHeader_Destination(Arena *arena, MessageHeader_Destination *messageHeader_Destination)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&messageHeader_Destination->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&messageHeader_Destination->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", messageHeader_Destination->id.size, messageHeader_Destination->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Destination->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader_Destination->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader_Destination->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader_Destination->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader_Destination->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader_Destination->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader_Destination->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", messageHeader_Destination->name.size, messageHeader_Destination->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Destination->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, messageHeader_Destination->target);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Destination->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"endpoint\" : \"%.*s\"", messageHeader_Destination->endpoint.size, messageHeader_Destination->endpoint.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Destination->receiver)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, messageHeader_Destination->receiver);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MessageHeader_Source(Arena *arena, MessageHeader_Source *messageHeader_Source)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&messageHeader_Source->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&messageHeader_Source->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", messageHeader_Source->id.size, messageHeader_Source->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Source->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader_Source->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader_Source->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader_Source->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader_Source->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader_Source->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader_Source->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", messageHeader_Source->name.size, messageHeader_Source->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Source->software)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"software\" : \"%.*s\"", messageHeader_Source->software.size, messageHeader_Source->software.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Source->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", messageHeader_Source->version.size, messageHeader_Source->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Source->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ContactPoint(arena, messageHeader_Source->contact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Source->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"endpoint\" : \"%.*s\"", messageHeader_Source->endpoint.size, messageHeader_Source->endpoint.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MessageHeader_Response(Arena *arena, MessageHeader_Response *messageHeader_Response)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&messageHeader_Response->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&messageHeader_Response->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", messageHeader_Response->id.size, messageHeader_Response->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Response->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader_Response->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader_Response->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader_Response->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < messageHeader_Response->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &messageHeader_Response->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&messageHeader_Response->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"identifier\" : \"%.*s\"", messageHeader_Response->identifier.size, messageHeader_Response->identifier.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Response->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", messageHeader_Response->code.size, messageHeader_Response->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&messageHeader_Response->details)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, messageHeader_Response->details);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence(Arena *arena, MolecularSequence *molecularSequence)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence->id.size, molecularSequence->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, molecularSequence->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", molecularSequence->implicitRules.size, molecularSequence->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", molecularSequence->language.size, molecularSequence->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, molecularSequence->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &molecularSequence->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &molecularSequence->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", molecularSequence->type.size, molecularSequence->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->coordinateSystem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence->coordinateSystem);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, molecularSequence->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->specimen)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, molecularSequence->specimen);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->device)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, molecularSequence->device);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, molecularSequence->performer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, molecularSequence->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->referenceSeq)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MolecularSequence_ReferenceSeq(arena, molecularSequence->referenceSeq);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->variant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->variant_count; i++)
		{
			String8 to_add = Serialize_MolecularSequence_Variant(arena, &molecularSequence->variant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->observedSeq)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"observedSeq\" : \"%.*s\"", molecularSequence->observedSeq.size, molecularSequence->observedSeq.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->quality)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->quality_count; i++)
		{
			String8 to_add = Serialize_MolecularSequence_Quality(arena, &molecularSequence->quality[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->readCoverage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence->readCoverage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence->repository)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->repository_count; i++)
		{
			String8 to_add = Serialize_MolecularSequence_Repository(arena, &molecularSequence->repository[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->pointer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->pointer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &molecularSequence->pointer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence->structureVariant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence->structureVariant_count; i++)
		{
			String8 to_add = Serialize_MolecularSequence_StructureVariant(arena, &molecularSequence->structureVariant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_ReferenceSeq(Arena *arena, MolecularSequence_ReferenceSeq *molecularSequence_ReferenceSeq)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_ReferenceSeq->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_ReferenceSeq->id.size, molecularSequence_ReferenceSeq->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_ReferenceSeq->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_ReferenceSeq->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_ReferenceSeq->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_ReferenceSeq->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->chromosome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, molecularSequence_ReferenceSeq->chromosome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->genomeBuild)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"genomeBuild\" : \"%.*s\"", molecularSequence_ReferenceSeq->genomeBuild.size, molecularSequence_ReferenceSeq->genomeBuild.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->orientation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"orientation\" : \"%.*s\"", molecularSequence_ReferenceSeq->orientation.size, molecularSequence_ReferenceSeq->orientation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->referenceSeqId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, molecularSequence_ReferenceSeq->referenceSeqId);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->referenceSeqPointer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, molecularSequence_ReferenceSeq->referenceSeqPointer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->referenceSeqString)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"referenceSeqString\" : \"%.*s\"", molecularSequence_ReferenceSeq->referenceSeqString.size, molecularSequence_ReferenceSeq->referenceSeqString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->strand)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"strand\" : \"%.*s\"", molecularSequence_ReferenceSeq->strand.size, molecularSequence_ReferenceSeq->strand.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->windowStart)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_ReferenceSeq->windowStart);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_ReferenceSeq->windowEnd)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_ReferenceSeq->windowEnd);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_Variant(Arena *arena, MolecularSequence_Variant *molecularSequence_Variant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_Variant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_Variant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_Variant->id.size, molecularSequence_Variant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Variant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Variant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Variant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Variant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Variant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Variant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Variant->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_Variant->start);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Variant->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_Variant->end);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Variant->observedAllele)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"observedAllele\" : \"%.*s\"", molecularSequence_Variant->observedAllele.size, molecularSequence_Variant->observedAllele.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Variant->referenceAllele)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"referenceAllele\" : \"%.*s\"", molecularSequence_Variant->referenceAllele.size, molecularSequence_Variant->referenceAllele.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Variant->cigar)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"cigar\" : \"%.*s\"", molecularSequence_Variant->cigar.size, molecularSequence_Variant->cigar.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Variant->variantPointer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, molecularSequence_Variant->variantPointer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_Quality(Arena *arena, MolecularSequence_Quality *molecularSequence_Quality)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_Quality->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_Quality->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_Quality->id.size, molecularSequence_Quality->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Quality->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Quality->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", molecularSequence_Quality->type.size, molecularSequence_Quality->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->standardSequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, molecularSequence_Quality->standardSequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_Quality->start);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_Quality->end);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->score)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, molecularSequence_Quality->score);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, molecularSequence_Quality->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->truthTP)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"truthTP\" : \"%d\"", molecularSequence_Quality->truthTP);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->queryTP)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"queryTP\" : \"%d\"", molecularSequence_Quality->queryTP);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->truthFN)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"truthFN\" : \"%d\"", molecularSequence_Quality->truthFN);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->queryFP)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"queryFP\" : \"%d\"", molecularSequence_Quality->queryFP);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->gtFP)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"gtFP\" : \"%d\"", molecularSequence_Quality->gtFP);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->precision)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"precision\" : \"%d\"", molecularSequence_Quality->precision);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->recall)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recall\" : \"%d\"", molecularSequence_Quality->recall);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->fScore)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"fScore\" : \"%d\"", molecularSequence_Quality->fScore);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality->roc)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MolecularSequence_Quality_Roc(arena, molecularSequence_Quality->roc);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_Quality_Roc(Arena *arena, MolecularSequence_Quality_Roc *molecularSequence_Quality_Roc)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_Quality_Roc->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_Quality_Roc->id.size, molecularSequence_Quality_Roc->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Quality_Roc->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Quality_Roc->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->score)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->score_count; i++)
		{
			String8 to_add = Serialize_Integer(arena, &molecularSequence_Quality_Roc->score[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->numTP)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->numTP_count; i++)
		{
			String8 to_add = Serialize_Integer(arena, &molecularSequence_Quality_Roc->numTP[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->numFP)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->numFP_count; i++)
		{
			String8 to_add = Serialize_Integer(arena, &molecularSequence_Quality_Roc->numFP[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->numFN)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->numFN_count; i++)
		{
			String8 to_add = Serialize_Integer(arena, &molecularSequence_Quality_Roc->numFN[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->precision)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->precision_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"precision\" : \"%d\"", &molecularSequence_Quality_Roc->precision[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->sensitivity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->sensitivity_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"sensitivity\" : \"%d\"", &molecularSequence_Quality_Roc->sensitivity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Quality_Roc->fMeasure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Quality_Roc->fMeasure_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"fMeasure\" : \"%d\"", &molecularSequence_Quality_Roc->fMeasure[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_Repository(Arena *arena, MolecularSequence_Repository *molecularSequence_Repository)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_Repository->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_Repository->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_Repository->id.size, molecularSequence_Repository->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Repository->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Repository->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Repository->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Repository->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_Repository->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_Repository->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_Repository->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", molecularSequence_Repository->type.size, molecularSequence_Repository->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Repository->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", molecularSequence_Repository->url.size, molecularSequence_Repository->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Repository->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", molecularSequence_Repository->name.size, molecularSequence_Repository->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Repository->datasetId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"datasetId\" : \"%.*s\"", molecularSequence_Repository->datasetId.size, molecularSequence_Repository->datasetId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Repository->variantsetId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"variantsetId\" : \"%.*s\"", molecularSequence_Repository->variantsetId.size, molecularSequence_Repository->variantsetId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_Repository->readsetId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"readsetId\" : \"%.*s\"", molecularSequence_Repository->readsetId.size, molecularSequence_Repository->readsetId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_StructureVariant(Arena *arena, MolecularSequence_StructureVariant *molecularSequence_StructureVariant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_StructureVariant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_StructureVariant->id.size, molecularSequence_StructureVariant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_StructureVariant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_StructureVariant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_StructureVariant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_StructureVariant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant->variantType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, molecularSequence_StructureVariant->variantType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant->exact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"exact\" : \"%.*s\"", molecularSequence_StructureVariant->exact ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant->length)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_StructureVariant->length);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant->outer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MolecularSequence_StructureVariant_Outer(arena, molecularSequence_StructureVariant->outer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant->inner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_MolecularSequence_StructureVariant_Inner(arena, molecularSequence_StructureVariant->inner);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_StructureVariant_Outer(Arena *arena, MolecularSequence_StructureVariant_Outer *molecularSequence_StructureVariant_Outer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_StructureVariant_Outer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Outer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_StructureVariant_Outer->id.size, molecularSequence_StructureVariant_Outer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Outer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_StructureVariant_Outer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_StructureVariant_Outer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Outer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_StructureVariant_Outer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_StructureVariant_Outer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Outer->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_StructureVariant_Outer->start);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Outer->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_StructureVariant_Outer->end);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MolecularSequence_StructureVariant_Inner(Arena *arena, MolecularSequence_StructureVariant_Inner *molecularSequence_StructureVariant_Inner)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&molecularSequence_StructureVariant_Inner->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Inner->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", molecularSequence_StructureVariant_Inner->id.size, molecularSequence_StructureVariant_Inner->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Inner->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_StructureVariant_Inner->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_StructureVariant_Inner->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Inner->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < molecularSequence_StructureVariant_Inner->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &molecularSequence_StructureVariant_Inner->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Inner->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_StructureVariant_Inner->start);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&molecularSequence_StructureVariant_Inner->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, molecularSequence_StructureVariant_Inner->end);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NamingSystem(Arena *arena, NamingSystem *namingSystem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&namingSystem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&namingSystem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", namingSystem->id.size, namingSystem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, namingSystem->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", namingSystem->implicitRules.size, namingSystem->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", namingSystem->language.size, namingSystem->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, namingSystem->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &namingSystem->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &namingSystem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &namingSystem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", namingSystem->name.size, namingSystem->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", namingSystem->status.size, namingSystem->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", namingSystem->kind.size, namingSystem->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", namingSystem->date.size, namingSystem->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", namingSystem->publisher.size, namingSystem->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &namingSystem->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem->responsible)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"responsible\" : \"%.*s\"", namingSystem->responsible.size, namingSystem->responsible.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, namingSystem->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", namingSystem->description.size, namingSystem->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &namingSystem->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &namingSystem->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", namingSystem->usage.size, namingSystem->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem->uniqueId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem->uniqueId_count; i++)
		{
			String8 to_add = Serialize_NamingSystem_UniqueId(arena, &namingSystem->uniqueId[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NamingSystem_UniqueId(Arena *arena, NamingSystem_UniqueId *namingSystem_UniqueId)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&namingSystem_UniqueId->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&namingSystem_UniqueId->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", namingSystem_UniqueId->id.size, namingSystem_UniqueId->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem_UniqueId->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem_UniqueId->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &namingSystem_UniqueId->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem_UniqueId->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < namingSystem_UniqueId->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &namingSystem_UniqueId->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&namingSystem_UniqueId->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", namingSystem_UniqueId->type.size, namingSystem_UniqueId->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem_UniqueId->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", namingSystem_UniqueId->value.size, namingSystem_UniqueId->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem_UniqueId->preferred)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preferred\" : \"%.*s\"", namingSystem_UniqueId->preferred ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem_UniqueId->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", namingSystem_UniqueId->comment.size, namingSystem_UniqueId->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&namingSystem_UniqueId->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, namingSystem_UniqueId->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NutritionOrder(Arena *arena, NutritionOrder *nutritionOrder)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&nutritionOrder->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&nutritionOrder->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", nutritionOrder->id.size, nutritionOrder->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, nutritionOrder->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", nutritionOrder->implicitRules.size, nutritionOrder->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", nutritionOrder->language.size, nutritionOrder->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, nutritionOrder->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &nutritionOrder->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &nutritionOrder->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &nutritionOrder->instantiatesCanonical[i].size, &nutritionOrder->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &nutritionOrder->instantiatesUri[i].size, &nutritionOrder->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->instantiates)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->instantiates_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiates\" : \"%.*s\"", &nutritionOrder->instantiates[i].size, &nutritionOrder->instantiates[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", nutritionOrder->status.size, nutritionOrder->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", nutritionOrder->intent.size, nutritionOrder->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, nutritionOrder->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, nutritionOrder->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->dateTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"dateTime\" : \"%.*s\"", nutritionOrder->dateTime.size, nutritionOrder->dateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->orderer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, nutritionOrder->orderer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->allergyIntolerance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->allergyIntolerance_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &nutritionOrder->allergyIntolerance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->foodPreferenceModifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->foodPreferenceModifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &nutritionOrder->foodPreferenceModifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->excludeFoodModifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->excludeFoodModifier_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &nutritionOrder->excludeFoodModifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->oralDiet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_NutritionOrder_OralDiet(arena, nutritionOrder->oralDiet);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->supplement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->supplement_count; i++)
		{
			String8 to_add = Serialize_NutritionOrder_Supplement(arena, &nutritionOrder->supplement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder->enteralFormula)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_NutritionOrder_EnteralFormula(arena, nutritionOrder->enteralFormula);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &nutritionOrder->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NutritionOrder_OralDiet(Arena *arena, NutritionOrder_OralDiet *nutritionOrder_OralDiet)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&nutritionOrder_OralDiet->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", nutritionOrder_OralDiet->id.size, nutritionOrder_OralDiet->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_OralDiet->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_OralDiet->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_OralDiet->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &nutritionOrder_OralDiet->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->schedule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet->schedule_count; i++)
		{
			String8 to_add = Serialize_Timing(arena, &nutritionOrder_OralDiet->schedule[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->nutrient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet->nutrient_count; i++)
		{
			String8 to_add = Serialize_NutritionOrder_OralDiet_Nutrient(arena, &nutritionOrder_OralDiet->nutrient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->texture)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet->texture_count; i++)
		{
			String8 to_add = Serialize_NutritionOrder_OralDiet_Texture(arena, &nutritionOrder_OralDiet->texture[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->fluidConsistencyType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet->fluidConsistencyType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &nutritionOrder_OralDiet->fluidConsistencyType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet->instruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"instruction\" : \"%.*s\"", nutritionOrder_OralDiet->instruction.size, nutritionOrder_OralDiet->instruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NutritionOrder_OralDiet_Nutrient(Arena *arena, NutritionOrder_OralDiet_Nutrient *nutritionOrder_OralDiet_Nutrient)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&nutritionOrder_OralDiet_Nutrient->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Nutrient->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", nutritionOrder_OralDiet_Nutrient->id.size, nutritionOrder_OralDiet_Nutrient->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Nutrient->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet_Nutrient->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_OralDiet_Nutrient->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Nutrient->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet_Nutrient->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_OralDiet_Nutrient->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Nutrient->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, nutritionOrder_OralDiet_Nutrient->modifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Nutrient->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, nutritionOrder_OralDiet_Nutrient->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NutritionOrder_OralDiet_Texture(Arena *arena, NutritionOrder_OralDiet_Texture *nutritionOrder_OralDiet_Texture)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&nutritionOrder_OralDiet_Texture->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Texture->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", nutritionOrder_OralDiet_Texture->id.size, nutritionOrder_OralDiet_Texture->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Texture->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet_Texture->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_OralDiet_Texture->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Texture->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_OralDiet_Texture->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_OralDiet_Texture->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Texture->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, nutritionOrder_OralDiet_Texture->modifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_OralDiet_Texture->foodType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, nutritionOrder_OralDiet_Texture->foodType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NutritionOrder_Supplement(Arena *arena, NutritionOrder_Supplement *nutritionOrder_Supplement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&nutritionOrder_Supplement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&nutritionOrder_Supplement->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", nutritionOrder_Supplement->id.size, nutritionOrder_Supplement->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_Supplement->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_Supplement->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_Supplement->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_Supplement->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_Supplement->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_Supplement->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_Supplement->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, nutritionOrder_Supplement->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_Supplement->productName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"productName\" : \"%.*s\"", nutritionOrder_Supplement->productName.size, nutritionOrder_Supplement->productName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_Supplement->schedule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_Supplement->schedule_count; i++)
		{
			String8 to_add = Serialize_Timing(arena, &nutritionOrder_Supplement->schedule[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_Supplement->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, nutritionOrder_Supplement->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_Supplement->instruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"instruction\" : \"%.*s\"", nutritionOrder_Supplement->instruction.size, nutritionOrder_Supplement->instruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NutritionOrder_EnteralFormula(Arena *arena, NutritionOrder_EnteralFormula *nutritionOrder_EnteralFormula)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&nutritionOrder_EnteralFormula->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", nutritionOrder_EnteralFormula->id.size, nutritionOrder_EnteralFormula->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_EnteralFormula->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_EnteralFormula->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_EnteralFormula->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_EnteralFormula->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->baseFormulaType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, nutritionOrder_EnteralFormula->baseFormulaType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->baseFormulaProductName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"baseFormulaProductName\" : \"%.*s\"", nutritionOrder_EnteralFormula->baseFormulaProductName.size, nutritionOrder_EnteralFormula->baseFormulaProductName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->additiveType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, nutritionOrder_EnteralFormula->additiveType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->additiveProductName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"additiveProductName\" : \"%.*s\"", nutritionOrder_EnteralFormula->additiveProductName.size, nutritionOrder_EnteralFormula->additiveProductName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->caloricDensity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, nutritionOrder_EnteralFormula->caloricDensity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->routeofAdministration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, nutritionOrder_EnteralFormula->routeofAdministration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->administration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_EnteralFormula->administration_count; i++)
		{
			String8 to_add = Serialize_NutritionOrder_EnteralFormula_Administration(arena, &nutritionOrder_EnteralFormula->administration[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->maxVolumeToDeliver)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, nutritionOrder_EnteralFormula->maxVolumeToDeliver);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula->administrationInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"administrationInstruction\" : \"%.*s\"", nutritionOrder_EnteralFormula->administrationInstruction.size, nutritionOrder_EnteralFormula->administrationInstruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_NutritionOrder_EnteralFormula_Administration(Arena *arena, NutritionOrder_EnteralFormula_Administration *nutritionOrder_EnteralFormula_Administration)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&nutritionOrder_EnteralFormula_Administration->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula_Administration->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", nutritionOrder_EnteralFormula_Administration->id.size, nutritionOrder_EnteralFormula_Administration->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula_Administration->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_EnteralFormula_Administration->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_EnteralFormula_Administration->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula_Administration->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < nutritionOrder_EnteralFormula_Administration->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &nutritionOrder_EnteralFormula_Administration->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula_Administration->schedule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Timing(arena, nutritionOrder_EnteralFormula_Administration->schedule);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&nutritionOrder_EnteralFormula_Administration->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, nutritionOrder_EnteralFormula_Administration->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(nutritionOrder_EnteralFormula_Administration->rate_type == NutritionOrder_EnteralFormula_Administration::RateType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, nutritionOrder_EnteralFormula_Administration->rate.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(nutritionOrder_EnteralFormula_Administration->rate_type == NutritionOrder_EnteralFormula_Administration::RateType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, nutritionOrder_EnteralFormula_Administration->rate.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Observation(Arena *arena, Observation *observation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&observation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&observation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", observation->id.size, observation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, observation->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", observation->implicitRules.size, observation->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", observation->language.size, observation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, observation->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &observation->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &observation->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &observation->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &observation->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", observation->status.size, observation->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &observation->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observation->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observation->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->focus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->focus_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &observation->focus[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observation->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(observation->effective_type == Observation::EffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", observation->effective.valueDateTime.size, observation->effective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->effective_type == Observation::EffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, observation->effective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->effective_type == Observation::EffectiveType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, observation->effective.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->effective_type == Observation::EffectiveType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", observation->effective.valueInstant.size, observation->effective.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&observation->issued)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issued\" : \"%.*s\"", observation->issued.size, observation->issued.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->performer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &observation->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(observation->value_type == Observation::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, observation->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, observation->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", observation->value.valueString.size, observation->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", observation->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, observation->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, observation->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, observation->value.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, observation->value.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", observation->value.valueTime.size, observation->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", observation->value.valueDateTime.size, observation->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation->value_type == Observation::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, observation->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&observation->dataAbsentReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observation->dataAbsentReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->interpretation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->interpretation_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &observation->interpretation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &observation->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observation->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observation->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->specimen)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observation->specimen);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->device)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observation->device);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation->referenceRange)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->referenceRange_count; i++)
		{
			String8 to_add = Serialize_Observation_ReferenceRange(arena, &observation->referenceRange[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->hasMember)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->hasMember_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &observation->hasMember[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->derivedFrom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->derivedFrom_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &observation->derivedFrom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation->component)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation->component_count; i++)
		{
			String8 to_add = Serialize_Observation_Component(arena, &observation->component[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Observation_ReferenceRange(Arena *arena, Observation_ReferenceRange *observation_ReferenceRange)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&observation_ReferenceRange->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&observation_ReferenceRange->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", observation_ReferenceRange->id.size, observation_ReferenceRange->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation_ReferenceRange->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation_ReferenceRange->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observation_ReferenceRange->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation_ReferenceRange->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation_ReferenceRange->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observation_ReferenceRange->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation_ReferenceRange->low)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, observation_ReferenceRange->low);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation_ReferenceRange->high)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, observation_ReferenceRange->high);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation_ReferenceRange->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observation_ReferenceRange->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation_ReferenceRange->appliesTo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation_ReferenceRange->appliesTo_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &observation_ReferenceRange->appliesTo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation_ReferenceRange->age)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Range(arena, observation_ReferenceRange->age);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation_ReferenceRange->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", observation_ReferenceRange->text.size, observation_ReferenceRange->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Observation_Component(Arena *arena, Observation_Component *observation_Component)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&observation_Component->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&observation_Component->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", observation_Component->id.size, observation_Component->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation_Component->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation_Component->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observation_Component->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation_Component->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation_Component->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observation_Component->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation_Component->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observation_Component->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(observation_Component->value_type == Observation_Component::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, observation_Component->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, observation_Component->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", observation_Component->value.valueString.size, observation_Component->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", observation_Component->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, observation_Component->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, observation_Component->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, observation_Component->value.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, observation_Component->value.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", observation_Component->value.valueTime.size, observation_Component->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", observation_Component->value.valueDateTime.size, observation_Component->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(observation_Component->value_type == Observation_Component::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, observation_Component->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&observation_Component->dataAbsentReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observation_Component->dataAbsentReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observation_Component->interpretation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation_Component->interpretation_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &observation_Component->interpretation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observation_Component->referenceRange)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observation_Component->referenceRange_count; i++)
		{
			String8 to_add = Serialize_Observation_ReferenceRange(arena, &observation_Component->referenceRange[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ObservationDefinition(Arena *arena, ObservationDefinition *observationDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&observationDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&observationDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", observationDefinition->id.size, observationDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, observationDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", observationDefinition->implicitRules.size, observationDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", observationDefinition->language.size, observationDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, observationDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &observationDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observationDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observationDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &observationDefinition->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observationDefinition->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &observationDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition->permittedDataType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition->permittedDataType_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"permittedDataType\" : \"%.*s\"", &observationDefinition->permittedDataType[i].size, &observationDefinition->permittedDataType[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition->multipleResultsAllowed)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"multipleResultsAllowed\" : \"%.*s\"", observationDefinition->multipleResultsAllowed ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observationDefinition->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->preferredReportName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preferredReportName\" : \"%.*s\"", observationDefinition->preferredReportName.size, observationDefinition->preferredReportName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->quantitativeDetails)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ObservationDefinition_QuantitativeDetails(arena, observationDefinition->quantitativeDetails);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->qualifiedInterval)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition->qualifiedInterval_count; i++)
		{
			String8 to_add = Serialize_ObservationDefinition_QualifiedInterval(arena, &observationDefinition->qualifiedInterval[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition->validCodedValueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observationDefinition->validCodedValueSet);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->normalCodedValueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observationDefinition->normalCodedValueSet);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->abnormalCodedValueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observationDefinition->abnormalCodedValueSet);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition->criticalCodedValueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, observationDefinition->criticalCodedValueSet);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ObservationDefinition_QuantitativeDetails(Arena *arena, ObservationDefinition_QuantitativeDetails *observationDefinition_QuantitativeDetails)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&observationDefinition_QuantitativeDetails->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&observationDefinition_QuantitativeDetails->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", observationDefinition_QuantitativeDetails->id.size, observationDefinition_QuantitativeDetails->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QuantitativeDetails->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition_QuantitativeDetails->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observationDefinition_QuantitativeDetails->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition_QuantitativeDetails->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition_QuantitativeDetails->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observationDefinition_QuantitativeDetails->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition_QuantitativeDetails->customaryUnit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observationDefinition_QuantitativeDetails->customaryUnit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QuantitativeDetails->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observationDefinition_QuantitativeDetails->unit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QuantitativeDetails->conversionFactor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"conversionFactor\" : \"%d\"", observationDefinition_QuantitativeDetails->conversionFactor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QuantitativeDetails->decimalPrecision)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, observationDefinition_QuantitativeDetails->decimalPrecision);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ObservationDefinition_QualifiedInterval(Arena *arena, ObservationDefinition_QualifiedInterval *observationDefinition_QualifiedInterval)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&observationDefinition_QualifiedInterval->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", observationDefinition_QualifiedInterval->id.size, observationDefinition_QualifiedInterval->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition_QualifiedInterval->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observationDefinition_QualifiedInterval->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition_QualifiedInterval->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &observationDefinition_QualifiedInterval->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"category\" : \"%.*s\"", observationDefinition_QualifiedInterval->category.size, observationDefinition_QualifiedInterval->category.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->range)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Range(arena, observationDefinition_QualifiedInterval->range);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, observationDefinition_QualifiedInterval->context);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->appliesTo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < observationDefinition_QualifiedInterval->appliesTo_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &observationDefinition_QualifiedInterval->appliesTo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->gender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"gender\" : \"%.*s\"", observationDefinition_QualifiedInterval->gender.size, observationDefinition_QualifiedInterval->gender.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->age)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Range(arena, observationDefinition_QualifiedInterval->age);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->gestationalAge)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Range(arena, observationDefinition_QualifiedInterval->gestationalAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&observationDefinition_QualifiedInterval->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"condition\" : \"%.*s\"", observationDefinition_QualifiedInterval->condition.size, observationDefinition_QualifiedInterval->condition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OperationDefinition(Arena *arena, OperationDefinition *operationDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&operationDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&operationDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", operationDefinition->id.size, operationDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, operationDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", operationDefinition->implicitRules.size, operationDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", operationDefinition->language.size, operationDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, operationDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &operationDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", operationDefinition->url.size, operationDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", operationDefinition->version.size, operationDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", operationDefinition->name.size, operationDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", operationDefinition->title.size, operationDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", operationDefinition->status.size, operationDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", operationDefinition->kind.size, operationDefinition->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", operationDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", operationDefinition->date.size, operationDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", operationDefinition->publisher.size, operationDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &operationDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", operationDefinition->description.size, operationDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &operationDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &operationDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", operationDefinition->purpose.size, operationDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->affectsState)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"affectsState\" : \"%.*s\"", operationDefinition->affectsState ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", operationDefinition->code.size, operationDefinition->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", operationDefinition->comment.size, operationDefinition->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->base)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"base\" : \"%.*s\"", operationDefinition->base.size, operationDefinition->base.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->resource_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"resource\" : \"%.*s\"", &operationDefinition->resource[i].size, &operationDefinition->resource[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", operationDefinition->system ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", operationDefinition->type ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->instance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"instance\" : \"%.*s\"", operationDefinition->instance ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->inputProfile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"inputProfile\" : \"%.*s\"", operationDefinition->inputProfile.size, operationDefinition->inputProfile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->outputProfile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outputProfile\" : \"%.*s\"", operationDefinition->outputProfile.size, operationDefinition->outputProfile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->parameter_count; i++)
		{
			String8 to_add = Serialize_OperationDefinition_Parameter(arena, &operationDefinition->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition->overload)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition->overload_count; i++)
		{
			String8 to_add = Serialize_OperationDefinition_Overload(arena, &operationDefinition->overload[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OperationDefinition_Parameter(Arena *arena, OperationDefinition_Parameter *operationDefinition_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&operationDefinition_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&operationDefinition_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", operationDefinition_Parameter->id.size, operationDefinition_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", operationDefinition_Parameter->name.size, operationDefinition_Parameter->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", operationDefinition_Parameter->use.size, operationDefinition_Parameter->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->min)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, operationDefinition_Parameter->min);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->max)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"max\" : \"%.*s\"", operationDefinition_Parameter->max.size, operationDefinition_Parameter->max.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", operationDefinition_Parameter->documentation.size, operationDefinition_Parameter->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", operationDefinition_Parameter->type.size, operationDefinition_Parameter->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->targetProfile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter->targetProfile_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"targetProfile\" : \"%.*s\"", &operationDefinition_Parameter->targetProfile[i].size, &operationDefinition_Parameter->targetProfile[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter->searchType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"searchType\" : \"%.*s\"", operationDefinition_Parameter->searchType.size, operationDefinition_Parameter->searchType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->binding)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_OperationDefinition_Parameter_Binding(arena, operationDefinition_Parameter->binding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter->referencedFrom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter->referencedFrom_count; i++)
		{
			String8 to_add = Serialize_OperationDefinition_Parameter_ReferencedFrom(arena, &operationDefinition_Parameter->referencedFrom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter->part)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter->part_count; i++)
		{
			String8 to_add = Serialize_OperationDefinition_Parameter(arena, &operationDefinition_Parameter->part[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OperationDefinition_Parameter_Binding(Arena *arena, OperationDefinition_Parameter_Binding *operationDefinition_Parameter_Binding)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&operationDefinition_Parameter_Binding->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&operationDefinition_Parameter_Binding->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", operationDefinition_Parameter_Binding->id.size, operationDefinition_Parameter_Binding->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter_Binding->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter_Binding->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Parameter_Binding->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter_Binding->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter_Binding->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Parameter_Binding->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter_Binding->strength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"strength\" : \"%.*s\"", operationDefinition_Parameter_Binding->strength.size, operationDefinition_Parameter_Binding->strength.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter_Binding->valueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"valueSet\" : \"%.*s\"", operationDefinition_Parameter_Binding->valueSet.size, operationDefinition_Parameter_Binding->valueSet.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OperationDefinition_Parameter_ReferencedFrom(Arena *arena, OperationDefinition_Parameter_ReferencedFrom *operationDefinition_Parameter_ReferencedFrom)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&operationDefinition_Parameter_ReferencedFrom->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&operationDefinition_Parameter_ReferencedFrom->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", operationDefinition_Parameter_ReferencedFrom->id.size, operationDefinition_Parameter_ReferencedFrom->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter_ReferencedFrom->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter_ReferencedFrom->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Parameter_ReferencedFrom->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter_ReferencedFrom->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Parameter_ReferencedFrom->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Parameter_ReferencedFrom->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Parameter_ReferencedFrom->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"source\" : \"%.*s\"", operationDefinition_Parameter_ReferencedFrom->source.size, operationDefinition_Parameter_ReferencedFrom->source.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Parameter_ReferencedFrom->sourceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sourceId\" : \"%.*s\"", operationDefinition_Parameter_ReferencedFrom->sourceId.size, operationDefinition_Parameter_ReferencedFrom->sourceId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OperationDefinition_Overload(Arena *arena, OperationDefinition_Overload *operationDefinition_Overload)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&operationDefinition_Overload->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&operationDefinition_Overload->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", operationDefinition_Overload->id.size, operationDefinition_Overload->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationDefinition_Overload->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Overload->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Overload->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Overload->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Overload->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationDefinition_Overload->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Overload->parameterName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationDefinition_Overload->parameterName_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"parameterName\" : \"%.*s\"", &operationDefinition_Overload->parameterName[i].size, &operationDefinition_Overload->parameterName[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationDefinition_Overload->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", operationDefinition_Overload->comment.size, operationDefinition_Overload->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OperationOutcome(Arena *arena, OperationOutcome *operationOutcome)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&operationOutcome->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&operationOutcome->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", operationOutcome->id.size, operationOutcome->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, operationOutcome->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", operationOutcome->implicitRules.size, operationOutcome->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", operationOutcome->language.size, operationOutcome->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, operationOutcome->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &operationOutcome->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationOutcome->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationOutcome->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationOutcome->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationOutcome->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationOutcome->issue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome->issue_count; i++)
		{
			String8 to_add = Serialize_OperationOutcome_Issue(arena, &operationOutcome->issue[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OperationOutcome_Issue(Arena *arena, OperationOutcome_Issue *operationOutcome_Issue)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&operationOutcome_Issue->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&operationOutcome_Issue->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", operationOutcome_Issue->id.size, operationOutcome_Issue->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome_Issue->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome_Issue->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationOutcome_Issue->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationOutcome_Issue->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome_Issue->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &operationOutcome_Issue->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationOutcome_Issue->severity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"severity\" : \"%.*s\"", operationOutcome_Issue->severity.size, operationOutcome_Issue->severity.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome_Issue->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", operationOutcome_Issue->code.size, operationOutcome_Issue->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome_Issue->details)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, operationOutcome_Issue->details);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome_Issue->diagnostics)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"diagnostics\" : \"%.*s\"", operationOutcome_Issue->diagnostics.size, operationOutcome_Issue->diagnostics.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&operationOutcome_Issue->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome_Issue->location_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"location\" : \"%.*s\"", &operationOutcome_Issue->location[i].size, &operationOutcome_Issue->location[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&operationOutcome_Issue->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < operationOutcome_Issue->expression_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", &operationOutcome_Issue->expression[i].size, &operationOutcome_Issue->expression[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Organization(Arena *arena, Organization *organization)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&organization->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&organization->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", organization->id.size, organization->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, organization->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", organization->implicitRules.size, organization->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", organization->language.size, organization->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, organization->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &organization->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &organization->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &organization->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &organization->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", organization->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &organization->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", organization->name.size, organization->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->alias)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->alias_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"alias\" : \"%.*s\"", &organization->alias[i].size, &organization->alias[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &organization->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->address_count; i++)
		{
			String8 to_add = Serialize_Address(arena, &organization->address[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, organization->partOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->contact_count; i++)
		{
			String8 to_add = Serialize_Organization_Contact(arena, &organization->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &organization->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Organization_Contact(Arena *arena, Organization_Contact *organization_Contact)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&organization_Contact->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&organization_Contact->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", organization_Contact->id.size, organization_Contact->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization_Contact->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization_Contact->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &organization_Contact->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization_Contact->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization_Contact->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &organization_Contact->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization_Contact->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, organization_Contact->purpose);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization_Contact->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_HumanName(arena, organization_Contact->name);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organization_Contact->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organization_Contact->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &organization_Contact->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organization_Contact->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Address(arena, organization_Contact->address);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_OrganizationAffiliation(Arena *arena, OrganizationAffiliation *organizationAffiliation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&organizationAffiliation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&organizationAffiliation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", organizationAffiliation->id.size, organizationAffiliation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, organizationAffiliation->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", organizationAffiliation->implicitRules.size, organizationAffiliation->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", organizationAffiliation->language.size, organizationAffiliation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, organizationAffiliation->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &organizationAffiliation->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &organizationAffiliation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &organizationAffiliation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &organizationAffiliation->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", organizationAffiliation->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, organizationAffiliation->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->organization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, organizationAffiliation->organization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->participatingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, organizationAffiliation->participatingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&organizationAffiliation->network)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->network_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &organizationAffiliation->network[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &organizationAffiliation->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->specialty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->specialty_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &organizationAffiliation->specialty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->location_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &organizationAffiliation->location[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->healthcareService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->healthcareService_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &organizationAffiliation->healthcareService[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &organizationAffiliation->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&organizationAffiliation->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < organizationAffiliation->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &organizationAffiliation->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Parameters(Arena *arena, Parameters *parameters)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&parameters->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&parameters->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", parameters->id.size, parameters->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameters->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, parameters->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameters->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", parameters->implicitRules.size, parameters->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameters->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", parameters->language.size, parameters->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameters->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < parameters->parameter_count; i++)
		{
			String8 to_add = Serialize_Parameters_Parameter(arena, &parameters->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Parameters_Parameter(Arena *arena, Parameters_Parameter *parameters_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&parameters_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&parameters_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", parameters_Parameter->id.size, parameters_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameters_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < parameters_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &parameters_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&parameters_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < parameters_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &parameters_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&parameters_Parameter->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", parameters_Parameter->name.size, parameters_Parameter->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", parameters_Parameter->value.valueBase64Binary.size, parameters_Parameter->value.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", parameters_Parameter->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", parameters_Parameter->value.valueCanonical.size, parameters_Parameter->value.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", parameters_Parameter->value.valueCode.size, parameters_Parameter->value.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", parameters_Parameter->value.valueDate.size, parameters_Parameter->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", parameters_Parameter->value.valueDateTime.size, parameters_Parameter->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", parameters_Parameter->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", parameters_Parameter->value.valueId.size, parameters_Parameter->value.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", parameters_Parameter->value.valueInstant.size, parameters_Parameter->value.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, parameters_Parameter->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", parameters_Parameter->value.valueMarkdown.size, parameters_Parameter->value.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", parameters_Parameter->value.valueOid.size, parameters_Parameter->value.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", parameters_Parameter->value.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", parameters_Parameter->value.valueString.size, parameters_Parameter->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", parameters_Parameter->value.valueTime.size, parameters_Parameter->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", parameters_Parameter->value.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", parameters_Parameter->value.valueUri.size, parameters_Parameter->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", parameters_Parameter->value.valueUrl.size, parameters_Parameter->value.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", parameters_Parameter->value.valueUuid.size, parameters_Parameter->value.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Address)	
	{
			String8 to_add = Serialize_Address(arena, parameters_Parameter->value.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Age)	
	{
			String8 to_add = Serialize_Age(arena, parameters_Parameter->value.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, parameters_Parameter->value.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, parameters_Parameter->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, parameters_Parameter->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, parameters_Parameter->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, parameters_Parameter->value.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Count)	
	{
			String8 to_add = Serialize_Count(arena, parameters_Parameter->value.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, parameters_Parameter->value.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, parameters_Parameter->value.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, parameters_Parameter->value.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, parameters_Parameter->value.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, parameters_Parameter->value.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, parameters_Parameter->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, parameters_Parameter->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, parameters_Parameter->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, parameters_Parameter->value.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, parameters_Parameter->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, parameters_Parameter->value.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, parameters_Parameter->value.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, parameters_Parameter->value.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, parameters_Parameter->value.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, parameters_Parameter->value.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, parameters_Parameter->value.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, parameters_Parameter->value.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, parameters_Parameter->value.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, parameters_Parameter->value.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, parameters_Parameter->value.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, parameters_Parameter->value.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, parameters_Parameter->value.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(parameters_Parameter->value_type == Parameters_Parameter::ValueType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, parameters_Parameter->value.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&parameters_Parameter->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Resource(arena, parameters_Parameter->resource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameters_Parameter->part)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < parameters_Parameter->part_count; i++)
		{
			String8 to_add = Serialize_Parameters_Parameter(arena, &parameters_Parameter->part[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Patient(Arena *arena, Patient *patient)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&patient->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&patient->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", patient->id.size, patient->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, patient->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", patient->implicitRules.size, patient->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", patient->language.size, patient->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, patient->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &patient->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &patient->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", patient->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->name_count; i++)
		{
			String8 to_add = Serialize_HumanName(arena, &patient->name[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &patient->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->gender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"gender\" : \"%.*s\"", patient->gender.size, patient->gender.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->birthDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"birthDate\" : \"%.*s\"", patient->birthDate.size, patient->birthDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(patient->deceased_type == Patient::DeceasedType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", patient->deceased.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(patient->deceased_type == Patient::DeceasedType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", patient->deceased.valueDateTime.size, patient->deceased.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&patient->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->address_count; i++)
		{
			String8 to_add = Serialize_Address(arena, &patient->address[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->maritalStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, patient->maritalStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(patient->multipleBirth_type == Patient::MultipleBirthType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", patient->multipleBirth.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(patient->multipleBirth_type == Patient::MultipleBirthType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, patient->multipleBirth.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&patient->photo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->photo_count; i++)
		{
			String8 to_add = Serialize_Attachment(arena, &patient->photo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->contact_count; i++)
		{
			String8 to_add = Serialize_Patient_Contact(arena, &patient->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->communication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->communication_count; i++)
		{
			String8 to_add = Serialize_Patient_Communication(arena, &patient->communication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->generalPractitioner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->generalPractitioner_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &patient->generalPractitioner[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient->managingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, patient->managingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient->link_count; i++)
		{
			String8 to_add = Serialize_Patient_Link(arena, &patient->link[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Patient_Contact(Arena *arena, Patient_Contact *patient_Contact)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&patient_Contact->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&patient_Contact->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", patient_Contact->id.size, patient_Contact->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Contact->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Contact->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient_Contact->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Contact->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Contact->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient_Contact->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Contact->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Contact->relationship_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &patient_Contact->relationship[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Contact->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_HumanName(arena, patient_Contact->name);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Contact->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Contact->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &patient_Contact->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Contact->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Address(arena, patient_Contact->address);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Contact->gender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"gender\" : \"%.*s\"", patient_Contact->gender.size, patient_Contact->gender.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Contact->organization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, patient_Contact->organization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Contact->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, patient_Contact->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Patient_Communication(Arena *arena, Patient_Communication *patient_Communication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&patient_Communication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&patient_Communication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", patient_Communication->id.size, patient_Communication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Communication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Communication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient_Communication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Communication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Communication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient_Communication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Communication->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, patient_Communication->language);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Communication->preferred)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preferred\" : \"%.*s\"", patient_Communication->preferred ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Patient_Link(Arena *arena, Patient_Link *patient_Link)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&patient_Link->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&patient_Link->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", patient_Link->id.size, patient_Link->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Link->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Link->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient_Link->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Link->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < patient_Link->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &patient_Link->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&patient_Link->other)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, patient_Link->other);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&patient_Link->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", patient_Link->type.size, patient_Link->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PaymentNotice(Arena *arena, PaymentNotice *paymentNotice)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&paymentNotice->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&paymentNotice->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", paymentNotice->id.size, paymentNotice->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, paymentNotice->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", paymentNotice->implicitRules.size, paymentNotice->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", paymentNotice->language.size, paymentNotice->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, paymentNotice->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentNotice->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &paymentNotice->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentNotice->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentNotice->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentNotice->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentNotice->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentNotice->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentNotice->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentNotice->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentNotice->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &paymentNotice->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentNotice->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", paymentNotice->status.size, paymentNotice->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentNotice->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->response)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentNotice->response);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", paymentNotice->created.size, paymentNotice->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->provider)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentNotice->provider);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->payment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentNotice->payment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->paymentDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"paymentDate\" : \"%.*s\"", paymentNotice->paymentDate.size, paymentNotice->paymentDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->payee)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentNotice->payee);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->recipient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentNotice->recipient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, paymentNotice->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentNotice->paymentStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, paymentNotice->paymentStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PaymentReconciliation(Arena *arena, PaymentReconciliation *paymentReconciliation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&paymentReconciliation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&paymentReconciliation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", paymentReconciliation->id.size, paymentReconciliation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, paymentReconciliation->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", paymentReconciliation->implicitRules.size, paymentReconciliation->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", paymentReconciliation->language.size, paymentReconciliation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, paymentReconciliation->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &paymentReconciliation->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentReconciliation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentReconciliation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &paymentReconciliation->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", paymentReconciliation->status.size, paymentReconciliation->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, paymentReconciliation->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", paymentReconciliation->created.size, paymentReconciliation->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->paymentIssuer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation->paymentIssuer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->requestor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation->requestor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"outcome\" : \"%.*s\"", paymentReconciliation->outcome.size, paymentReconciliation->outcome.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->disposition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"disposition\" : \"%.*s\"", paymentReconciliation->disposition.size, paymentReconciliation->disposition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->paymentDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"paymentDate\" : \"%.*s\"", paymentReconciliation->paymentDate.size, paymentReconciliation->paymentDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->paymentAmount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, paymentReconciliation->paymentAmount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->paymentIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, paymentReconciliation->paymentIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation->detail_count; i++)
		{
			String8 to_add = Serialize_PaymentReconciliation_Detail(arena, &paymentReconciliation->detail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation->formCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, paymentReconciliation->formCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation->processNote)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation->processNote_count; i++)
		{
			String8 to_add = Serialize_PaymentReconciliation_ProcessNote(arena, &paymentReconciliation->processNote[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PaymentReconciliation_Detail(Arena *arena, PaymentReconciliation_Detail *paymentReconciliation_Detail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&paymentReconciliation_Detail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&paymentReconciliation_Detail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", paymentReconciliation_Detail->id.size, paymentReconciliation_Detail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation_Detail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentReconciliation_Detail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation_Detail->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation_Detail->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentReconciliation_Detail->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation_Detail->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, paymentReconciliation_Detail->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->predecessor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, paymentReconciliation_Detail->predecessor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, paymentReconciliation_Detail->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation_Detail->request);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->submitter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation_Detail->submitter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->response)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation_Detail->response);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", paymentReconciliation_Detail->date.size, paymentReconciliation_Detail->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->responsible)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation_Detail->responsible);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->payee)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, paymentReconciliation_Detail->payee);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_Detail->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Money(arena, paymentReconciliation_Detail->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PaymentReconciliation_ProcessNote(Arena *arena, PaymentReconciliation_ProcessNote *paymentReconciliation_ProcessNote)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&paymentReconciliation_ProcessNote->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&paymentReconciliation_ProcessNote->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", paymentReconciliation_ProcessNote->id.size, paymentReconciliation_ProcessNote->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_ProcessNote->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation_ProcessNote->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentReconciliation_ProcessNote->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation_ProcessNote->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < paymentReconciliation_ProcessNote->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &paymentReconciliation_ProcessNote->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&paymentReconciliation_ProcessNote->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", paymentReconciliation_ProcessNote->type.size, paymentReconciliation_ProcessNote->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&paymentReconciliation_ProcessNote->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", paymentReconciliation_ProcessNote->text.size, paymentReconciliation_ProcessNote->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Person(Arena *arena, Person *person)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&person->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&person->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", person->id.size, person->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, person->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", person->implicitRules.size, person->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", person->language.size, person->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, person->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &person->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &person->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &person->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &person->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->name_count; i++)
		{
			String8 to_add = Serialize_HumanName(arena, &person->name[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &person->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person->gender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"gender\" : \"%.*s\"", person->gender.size, person->gender.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->birthDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"birthDate\" : \"%.*s\"", person->birthDate.size, person->birthDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->address_count; i++)
		{
			String8 to_add = Serialize_Address(arena, &person->address[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person->photo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, person->photo);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->managingOrganization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, person->managingOrganization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", person->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person->link_count; i++)
		{
			String8 to_add = Serialize_Person_Link(arena, &person->link[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Person_Link(Arena *arena, Person_Link *person_Link)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&person_Link->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&person_Link->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", person_Link->id.size, person_Link->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person_Link->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person_Link->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &person_Link->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person_Link->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < person_Link->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &person_Link->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&person_Link->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, person_Link->target);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&person_Link->assurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"assurance\" : \"%.*s\"", person_Link->assurance.size, person_Link->assurance.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition(Arena *arena, PlanDefinition *planDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition->id.size, planDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, planDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", planDefinition->implicitRules.size, planDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", planDefinition->language.size, planDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, planDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &planDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", planDefinition->url.size, planDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &planDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", planDefinition->version.size, planDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", planDefinition->name.size, planDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", planDefinition->title.size, planDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", planDefinition->subtitle.size, planDefinition->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", planDefinition->status.size, planDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", planDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(planDefinition->subject_type == PlanDefinition::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition->subject_type == PlanDefinition::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, planDefinition->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&planDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", planDefinition->date.size, planDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", planDefinition->publisher.size, planDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &planDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", planDefinition->description.size, planDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &planDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &planDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", planDefinition->purpose.size, planDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", planDefinition->usage.size, planDefinition->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", planDefinition->copyright.size, planDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", planDefinition->approvalDate.size, planDefinition->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", planDefinition->lastReviewDate.size, planDefinition->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, planDefinition->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &planDefinition->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &planDefinition->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &planDefinition->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &planDefinition->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &planDefinition->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &planDefinition->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->library)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->library_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"library\" : \"%.*s\"", &planDefinition->library[i].size, &planDefinition->library[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->goal)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->goal_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Goal(arena, &planDefinition->goal[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition->action_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Action(arena, &planDefinition->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition_Goal(Arena *arena, PlanDefinition_Goal *planDefinition_Goal)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition_Goal->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition_Goal->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition_Goal->id.size, planDefinition_Goal->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Goal->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Goal->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Goal->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Goal->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Goal->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Goal->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Goal->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Goal->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Goal->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Goal->description);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Goal->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Goal->priority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Goal->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Goal->start);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Goal->addresses)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Goal->addresses_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &planDefinition_Goal->addresses[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Goal->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Goal->documentation_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &planDefinition_Goal->documentation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Goal->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Goal->target_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Goal_Target(arena, &planDefinition_Goal->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition_Goal_Target(Arena *arena, PlanDefinition_Goal_Target *planDefinition_Goal_Target)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition_Goal_Target->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition_Goal_Target->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition_Goal_Target->id.size, planDefinition_Goal_Target->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Goal_Target->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Goal_Target->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Goal_Target->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Goal_Target->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Goal_Target->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Goal_Target->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Goal_Target->measure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Goal_Target->measure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(planDefinition_Goal_Target->detail_type == PlanDefinition_Goal_Target::DetailType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, planDefinition_Goal_Target->detail.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Goal_Target->detail_type == PlanDefinition_Goal_Target::DetailType::Range)	
	{
			String8 to_add = Serialize_Range(arena, planDefinition_Goal_Target->detail.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Goal_Target->detail_type == PlanDefinition_Goal_Target::DetailType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Goal_Target->detail.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&planDefinition_Goal_Target->due)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, planDefinition_Goal_Target->due);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition_Action(Arena *arena, PlanDefinition_Action *planDefinition_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition_Action->id.size, planDefinition_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->prefix)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"prefix\" : \"%.*s\"", planDefinition_Action->prefix.size, planDefinition_Action->prefix.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", planDefinition_Action->title.size, planDefinition_Action->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", planDefinition_Action->description.size, planDefinition_Action->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->textEquivalent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"textEquivalent\" : \"%.*s\"", planDefinition_Action->textEquivalent.size, planDefinition_Action->textEquivalent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", planDefinition_Action->priority.size, planDefinition_Action->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &planDefinition_Action->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->reason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &planDefinition_Action->reason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->documentation_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &planDefinition_Action->documentation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->goalId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->goalId_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"goalId\" : \"%.*s\"", &planDefinition_Action->goalId[i].size, &planDefinition_Action->goalId[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(planDefinition_Action->subject_type == PlanDefinition_Action::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Action->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action->subject_type == PlanDefinition_Action::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, planDefinition_Action->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&planDefinition_Action->trigger)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->trigger_count; i++)
		{
			String8 to_add = Serialize_TriggerDefinition(arena, &planDefinition_Action->trigger[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->condition_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Action_Condition(arena, &planDefinition_Action->condition[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->input)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->input_count; i++)
		{
			String8 to_add = Serialize_DataRequirement(arena, &planDefinition_Action->input[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->output)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->output_count; i++)
		{
			String8 to_add = Serialize_DataRequirement(arena, &planDefinition_Action->output[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->relatedAction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->relatedAction_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Action_RelatedAction(arena, &planDefinition_Action->relatedAction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(planDefinition_Action->timing_type == PlanDefinition_Action::TimingType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", planDefinition_Action->timing.valueDateTime.size, planDefinition_Action->timing.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action->timing_type == PlanDefinition_Action::TimingType::Age)	
	{
			String8 to_add = Serialize_Age(arena, planDefinition_Action->timing.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action->timing_type == PlanDefinition_Action::TimingType::Period)	
	{
			String8 to_add = Serialize_Period(arena, planDefinition_Action->timing.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action->timing_type == PlanDefinition_Action::TimingType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, planDefinition_Action->timing.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action->timing_type == PlanDefinition_Action::TimingType::Range)	
	{
			String8 to_add = Serialize_Range(arena, planDefinition_Action->timing.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action->timing_type == PlanDefinition_Action::TimingType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, planDefinition_Action->timing.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&planDefinition_Action->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->participant_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Action_Participant(arena, &planDefinition_Action->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Action->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->groupingBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"groupingBehavior\" : \"%.*s\"", planDefinition_Action->groupingBehavior.size, planDefinition_Action->groupingBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->selectionBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"selectionBehavior\" : \"%.*s\"", planDefinition_Action->selectionBehavior.size, planDefinition_Action->selectionBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->requiredBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requiredBehavior\" : \"%.*s\"", planDefinition_Action->requiredBehavior.size, planDefinition_Action->requiredBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->precheckBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"precheckBehavior\" : \"%.*s\"", planDefinition_Action->precheckBehavior.size, planDefinition_Action->precheckBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->cardinalityBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"cardinalityBehavior\" : \"%.*s\"", planDefinition_Action->cardinalityBehavior.size, planDefinition_Action->cardinalityBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(planDefinition_Action->definition_type == PlanDefinition_Action::DefinitionType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", planDefinition_Action->definition.valueCanonical.size, planDefinition_Action->definition.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action->definition_type == PlanDefinition_Action::DefinitionType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", planDefinition_Action->definition.valueUri.size, planDefinition_Action->definition.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&planDefinition_Action->transform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"transform\" : \"%.*s\"", planDefinition_Action->transform.size, planDefinition_Action->transform.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action->dynamicValue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->dynamicValue_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Action_DynamicValue(arena, &planDefinition_Action->dynamicValue[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action->action_count; i++)
		{
			String8 to_add = Serialize_PlanDefinition_Action(arena, &planDefinition_Action->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition_Action_Condition(Arena *arena, PlanDefinition_Action_Condition *planDefinition_Action_Condition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition_Action_Condition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition_Action_Condition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition_Action_Condition->id.size, planDefinition_Action_Condition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_Condition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_Condition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_Condition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_Condition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_Condition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_Condition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_Condition->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", planDefinition_Action_Condition->kind.size, planDefinition_Action_Condition->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_Condition->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, planDefinition_Action_Condition->expression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition_Action_RelatedAction(Arena *arena, PlanDefinition_Action_RelatedAction *planDefinition_Action_RelatedAction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition_Action_RelatedAction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition_Action_RelatedAction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition_Action_RelatedAction->id.size, planDefinition_Action_RelatedAction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_RelatedAction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_RelatedAction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_RelatedAction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_RelatedAction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_RelatedAction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_RelatedAction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_RelatedAction->actionId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"actionId\" : \"%.*s\"", planDefinition_Action_RelatedAction->actionId.size, planDefinition_Action_RelatedAction->actionId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_RelatedAction->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"relationship\" : \"%.*s\"", planDefinition_Action_RelatedAction->relationship.size, planDefinition_Action_RelatedAction->relationship.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(planDefinition_Action_RelatedAction->offset_type == PlanDefinition_Action_RelatedAction::OffsetType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, planDefinition_Action_RelatedAction->offset.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(planDefinition_Action_RelatedAction->offset_type == PlanDefinition_Action_RelatedAction::OffsetType::Range)	
	{
			String8 to_add = Serialize_Range(arena, planDefinition_Action_RelatedAction->offset.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition_Action_Participant(Arena *arena, PlanDefinition_Action_Participant *planDefinition_Action_Participant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition_Action_Participant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition_Action_Participant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition_Action_Participant->id.size, planDefinition_Action_Participant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_Participant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_Participant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_Participant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_Participant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_Participant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_Participant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_Participant->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", planDefinition_Action_Participant->type.size, planDefinition_Action_Participant->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_Participant->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, planDefinition_Action_Participant->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PlanDefinition_Action_DynamicValue(Arena *arena, PlanDefinition_Action_DynamicValue *planDefinition_Action_DynamicValue)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&planDefinition_Action_DynamicValue->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&planDefinition_Action_DynamicValue->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", planDefinition_Action_DynamicValue->id.size, planDefinition_Action_DynamicValue->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_DynamicValue->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_DynamicValue->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_DynamicValue->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_DynamicValue->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < planDefinition_Action_DynamicValue->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &planDefinition_Action_DynamicValue->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&planDefinition_Action_DynamicValue->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", planDefinition_Action_DynamicValue->path.size, planDefinition_Action_DynamicValue->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&planDefinition_Action_DynamicValue->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, planDefinition_Action_DynamicValue->expression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Practitioner(Arena *arena, Practitioner *practitioner)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&practitioner->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&practitioner->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", practitioner->id.size, practitioner->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, practitioner->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", practitioner->implicitRules.size, practitioner->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", practitioner->language.size, practitioner->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, practitioner->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &practitioner->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitioner->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitioner->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &practitioner->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", practitioner->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->name_count; i++)
		{
			String8 to_add = Serialize_HumanName(arena, &practitioner->name[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &practitioner->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->address_count; i++)
		{
			String8 to_add = Serialize_Address(arena, &practitioner->address[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->gender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"gender\" : \"%.*s\"", practitioner->gender.size, practitioner->gender.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->birthDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"birthDate\" : \"%.*s\"", practitioner->birthDate.size, practitioner->birthDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner->photo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->photo_count; i++)
		{
			String8 to_add = Serialize_Attachment(arena, &practitioner->photo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->qualification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->qualification_count; i++)
		{
			String8 to_add = Serialize_Practitioner_Qualification(arena, &practitioner->qualification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner->communication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner->communication_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &practitioner->communication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Practitioner_Qualification(Arena *arena, Practitioner_Qualification *practitioner_Qualification)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&practitioner_Qualification->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&practitioner_Qualification->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", practitioner_Qualification->id.size, practitioner_Qualification->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner_Qualification->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner_Qualification->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitioner_Qualification->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner_Qualification->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner_Qualification->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitioner_Qualification->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner_Qualification->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitioner_Qualification->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &practitioner_Qualification->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitioner_Qualification->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, practitioner_Qualification->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner_Qualification->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, practitioner_Qualification->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitioner_Qualification->issuer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, practitioner_Qualification->issuer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PractitionerRole(Arena *arena, PractitionerRole *practitionerRole)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&practitionerRole->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&practitionerRole->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", practitionerRole->id.size, practitionerRole->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, practitionerRole->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", practitionerRole->implicitRules.size, practitionerRole->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", practitionerRole->language.size, practitionerRole->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, practitionerRole->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &practitionerRole->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitionerRole->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitionerRole->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &practitionerRole->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", practitionerRole->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, practitionerRole->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->practitioner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, practitionerRole->practitioner);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->organization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, practitionerRole->organization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &practitionerRole->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->specialty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->specialty_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &practitionerRole->specialty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->location_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &practitionerRole->location[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->healthcareService)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->healthcareService_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &practitionerRole->healthcareService[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &practitionerRole->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->availableTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->availableTime_count; i++)
		{
			String8 to_add = Serialize_PractitionerRole_AvailableTime(arena, &practitionerRole->availableTime[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->notAvailable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->notAvailable_count; i++)
		{
			String8 to_add = Serialize_PractitionerRole_NotAvailable(arena, &practitionerRole->notAvailable[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole->availabilityExceptions)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"availabilityExceptions\" : \"%.*s\"", practitionerRole->availabilityExceptions.size, practitionerRole->availabilityExceptions.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole->endpoint_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &practitionerRole->endpoint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PractitionerRole_AvailableTime(Arena *arena, PractitionerRole_AvailableTime *practitionerRole_AvailableTime)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&practitionerRole_AvailableTime->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&practitionerRole_AvailableTime->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", practitionerRole_AvailableTime->id.size, practitionerRole_AvailableTime->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole_AvailableTime->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole_AvailableTime->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitionerRole_AvailableTime->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole_AvailableTime->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole_AvailableTime->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitionerRole_AvailableTime->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole_AvailableTime->daysOfWeek)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole_AvailableTime->daysOfWeek_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"daysOfWeek\" : \"%.*s\"", &practitionerRole_AvailableTime->daysOfWeek[i].size, &practitionerRole_AvailableTime->daysOfWeek[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole_AvailableTime->allDay)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"allDay\" : \"%.*s\"", practitionerRole_AvailableTime->allDay ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole_AvailableTime->availableStartTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"availableStartTime\" : \"%.*s\"", practitionerRole_AvailableTime->availableStartTime.size, practitionerRole_AvailableTime->availableStartTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole_AvailableTime->availableEndTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"availableEndTime\" : \"%.*s\"", practitionerRole_AvailableTime->availableEndTime.size, practitionerRole_AvailableTime->availableEndTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_PractitionerRole_NotAvailable(Arena *arena, PractitionerRole_NotAvailable *practitionerRole_NotAvailable)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&practitionerRole_NotAvailable->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&practitionerRole_NotAvailable->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", practitionerRole_NotAvailable->id.size, practitionerRole_NotAvailable->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole_NotAvailable->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole_NotAvailable->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitionerRole_NotAvailable->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole_NotAvailable->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < practitionerRole_NotAvailable->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &practitionerRole_NotAvailable->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&practitionerRole_NotAvailable->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", practitionerRole_NotAvailable->description.size, practitionerRole_NotAvailable->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&practitionerRole_NotAvailable->during)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, practitionerRole_NotAvailable->during);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Procedure(Arena *arena, Procedure *procedure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&procedure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&procedure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", procedure->id.size, procedure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, procedure->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", procedure->implicitRules.size, procedure->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", procedure->language.size, procedure->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, procedure->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &procedure->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &procedure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &procedure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &procedure->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &procedure->instantiatesCanonical[i].size, &procedure->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &procedure->instantiatesUri[i].size, &procedure->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &procedure->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &procedure->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", procedure->status.size, procedure->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, procedure->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, procedure->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, procedure->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(procedure->performed_type == Procedure::PerformedType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", procedure->performed.valueDateTime.size, procedure->performed.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(procedure->performed_type == Procedure::PerformedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, procedure->performed.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(procedure->performed_type == Procedure::PerformedType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", procedure->performed.valueString.size, procedure->performed.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(procedure->performed_type == Procedure::PerformedType::Age)	
	{
			String8 to_add = Serialize_Age(arena, procedure->performed.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(procedure->performed_type == Procedure::PerformedType::Range)	
	{
			String8 to_add = Serialize_Range(arena, procedure->performed.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&procedure->recorder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure->recorder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->asserter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure->asserter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->performer_count; i++)
		{
			String8 to_add = Serialize_Procedure_Performer(arena, &procedure->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &procedure->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &procedure->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->bodySite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &procedure->bodySite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, procedure->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure->report)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->report_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &procedure->report[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->complication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->complication_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &procedure->complication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->complicationDetail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->complicationDetail_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &procedure->complicationDetail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->followUp)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->followUp_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &procedure->followUp[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &procedure->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->focalDevice)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->focalDevice_count; i++)
		{
			String8 to_add = Serialize_Procedure_FocalDevice(arena, &procedure->focalDevice[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->usedReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->usedReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &procedure->usedReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure->usedCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure->usedCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &procedure->usedCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Procedure_Performer(Arena *arena, Procedure_Performer *procedure_Performer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&procedure_Performer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&procedure_Performer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", procedure_Performer->id.size, procedure_Performer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure_Performer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure_Performer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &procedure_Performer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure_Performer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure_Performer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &procedure_Performer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure_Performer->function_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, procedure_Performer->function_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure_Performer->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure_Performer->actor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure_Performer->onBehalfOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure_Performer->onBehalfOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Procedure_FocalDevice(Arena *arena, Procedure_FocalDevice *procedure_FocalDevice)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&procedure_FocalDevice->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&procedure_FocalDevice->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", procedure_FocalDevice->id.size, procedure_FocalDevice->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure_FocalDevice->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure_FocalDevice->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &procedure_FocalDevice->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure_FocalDevice->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < procedure_FocalDevice->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &procedure_FocalDevice->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&procedure_FocalDevice->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, procedure_FocalDevice->action);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&procedure_FocalDevice->manipulated)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, procedure_FocalDevice->manipulated);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Provenance(Arena *arena, Provenance *provenance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&provenance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&provenance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", provenance->id.size, provenance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, provenance->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", provenance->implicitRules.size, provenance->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", provenance->language.size, provenance->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, provenance->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &provenance->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &provenance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &provenance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->target_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &provenance->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(provenance->occurred_type == Provenance::OccurredType::Period)	
	{
			String8 to_add = Serialize_Period(arena, provenance->occurred.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(provenance->occurred_type == Provenance::OccurredType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", provenance->occurred.valueDateTime.size, provenance->occurred.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&provenance->recorded)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"recorded\" : \"%.*s\"", provenance->recorded.size, provenance->recorded.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->policy)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->policy_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"policy\" : \"%.*s\"", &provenance->policy[i].size, &provenance->policy[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, provenance->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->reason_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &provenance->reason[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance->activity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, provenance->activity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance->agent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->agent_count; i++)
		{
			String8 to_add = Serialize_Provenance_Agent(arena, &provenance->agent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance->entity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->entity_count; i++)
		{
			String8 to_add = Serialize_Provenance_Entity(arena, &provenance->entity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance->signature)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance->signature_count; i++)
		{
			String8 to_add = Serialize_Signature(arena, &provenance->signature[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Provenance_Agent(Arena *arena, Provenance_Agent *provenance_Agent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&provenance_Agent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&provenance_Agent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", provenance_Agent->id.size, provenance_Agent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance_Agent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance_Agent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &provenance_Agent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance_Agent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance_Agent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &provenance_Agent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance_Agent->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, provenance_Agent->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance_Agent->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance_Agent->role_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &provenance_Agent->role[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance_Agent->who)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, provenance_Agent->who);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance_Agent->onBehalfOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, provenance_Agent->onBehalfOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Provenance_Entity(Arena *arena, Provenance_Entity *provenance_Entity)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&provenance_Entity->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&provenance_Entity->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", provenance_Entity->id.size, provenance_Entity->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance_Entity->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance_Entity->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &provenance_Entity->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance_Entity->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance_Entity->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &provenance_Entity->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&provenance_Entity->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"role\" : \"%.*s\"", provenance_Entity->role.size, provenance_Entity->role.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance_Entity->what)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, provenance_Entity->what);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&provenance_Entity->agent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < provenance_Entity->agent_count; i++)
		{
			String8 to_add = Serialize_Provenance_Agent(arena, &provenance_Entity->agent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Questionnaire(Arena *arena, Questionnaire *questionnaire)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaire->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaire->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaire->id.size, questionnaire->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, questionnaire->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", questionnaire->implicitRules.size, questionnaire->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", questionnaire->language.size, questionnaire->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, questionnaire->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &questionnaire->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", questionnaire->url.size, questionnaire->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &questionnaire->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", questionnaire->version.size, questionnaire->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", questionnaire->name.size, questionnaire->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", questionnaire->title.size, questionnaire->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->derivedFrom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->derivedFrom_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"derivedFrom\" : \"%.*s\"", &questionnaire->derivedFrom[i].size, &questionnaire->derivedFrom[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", questionnaire->status.size, questionnaire->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", questionnaire->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->subjectType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->subjectType_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"subjectType\" : \"%.*s\"", &questionnaire->subjectType[i].size, &questionnaire->subjectType[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", questionnaire->date.size, questionnaire->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", questionnaire->publisher.size, questionnaire->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &questionnaire->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", questionnaire->description.size, questionnaire->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &questionnaire->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &questionnaire->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", questionnaire->purpose.size, questionnaire->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", questionnaire->copyright.size, questionnaire->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", questionnaire->approvalDate.size, questionnaire->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", questionnaire->lastReviewDate.size, questionnaire->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, questionnaire->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->code_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &questionnaire->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire->item_count; i++)
		{
			String8 to_add = Serialize_Questionnaire_Item(arena, &questionnaire->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Questionnaire_Item(Arena *arena, Questionnaire_Item *questionnaire_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaire_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaire_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaire_Item->id.size, questionnaire_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item->linkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"linkId\" : \"%.*s\"", questionnaire_Item->linkId.size, questionnaire_Item->linkId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", questionnaire_Item->definition.size, questionnaire_Item->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item->code_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &questionnaire_Item->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item->prefix)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"prefix\" : \"%.*s\"", questionnaire_Item->prefix.size, questionnaire_Item->prefix.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", questionnaire_Item->text.size, questionnaire_Item->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", questionnaire_Item->type.size, questionnaire_Item->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->enableWhen)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item->enableWhen_count; i++)
		{
			String8 to_add = Serialize_Questionnaire_Item_EnableWhen(arena, &questionnaire_Item->enableWhen[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item->enableBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"enableBehavior\" : \"%.*s\"", questionnaire_Item->enableBehavior.size, questionnaire_Item->enableBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->required)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"required\" : \"%.*s\"", questionnaire_Item->required ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->repeats)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"repeats\" : \"%.*s\"", questionnaire_Item->repeats ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->readOnly)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"readOnly\" : \"%.*s\"", questionnaire_Item->readOnly ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->maxLength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, questionnaire_Item->maxLength);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->answerValueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"answerValueSet\" : \"%.*s\"", questionnaire_Item->answerValueSet.size, questionnaire_Item->answerValueSet.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item->answerOption)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item->answerOption_count; i++)
		{
			String8 to_add = Serialize_Questionnaire_Item_AnswerOption(arena, &questionnaire_Item->answerOption[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item->initial)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item->initial_count; i++)
		{
			String8 to_add = Serialize_Questionnaire_Item_Initial(arena, &questionnaire_Item->initial[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item->item_count; i++)
		{
			String8 to_add = Serialize_Questionnaire_Item(arena, &questionnaire_Item->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Questionnaire_Item_EnableWhen(Arena *arena, Questionnaire_Item_EnableWhen *questionnaire_Item_EnableWhen)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaire_Item_EnableWhen->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaire_Item_EnableWhen->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaire_Item_EnableWhen->id.size, questionnaire_Item_EnableWhen->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item_EnableWhen->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item_EnableWhen->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item_EnableWhen->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item_EnableWhen->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item_EnableWhen->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item_EnableWhen->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item_EnableWhen->question)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"question\" : \"%.*s\"", questionnaire_Item_EnableWhen->question.size, questionnaire_Item_EnableWhen->question.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item_EnableWhen->operator_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"operator_\" : \"%.*s\"", questionnaire_Item_EnableWhen->operator_.size, questionnaire_Item_EnableWhen->operator_.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", questionnaire_Item_EnableWhen->answer.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", questionnaire_Item_EnableWhen->answer.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, questionnaire_Item_EnableWhen->answer.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", questionnaire_Item_EnableWhen->answer.valueDate.size, questionnaire_Item_EnableWhen->answer.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", questionnaire_Item_EnableWhen->answer.valueDateTime.size, questionnaire_Item_EnableWhen->answer.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", questionnaire_Item_EnableWhen->answer.valueTime.size, questionnaire_Item_EnableWhen->answer.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", questionnaire_Item_EnableWhen->answer.valueString.size, questionnaire_Item_EnableWhen->answer.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, questionnaire_Item_EnableWhen->answer.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, questionnaire_Item_EnableWhen->answer.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_EnableWhen->answer_type == Questionnaire_Item_EnableWhen::AnswerType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, questionnaire_Item_EnableWhen->answer.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Questionnaire_Item_AnswerOption(Arena *arena, Questionnaire_Item_AnswerOption *questionnaire_Item_AnswerOption)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaire_Item_AnswerOption->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaire_Item_AnswerOption->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaire_Item_AnswerOption->id.size, questionnaire_Item_AnswerOption->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item_AnswerOption->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item_AnswerOption->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item_AnswerOption->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item_AnswerOption->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item_AnswerOption->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item_AnswerOption->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(questionnaire_Item_AnswerOption->value_type == Questionnaire_Item_AnswerOption::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, questionnaire_Item_AnswerOption->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_AnswerOption->value_type == Questionnaire_Item_AnswerOption::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", questionnaire_Item_AnswerOption->value.valueDate.size, questionnaire_Item_AnswerOption->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_AnswerOption->value_type == Questionnaire_Item_AnswerOption::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", questionnaire_Item_AnswerOption->value.valueTime.size, questionnaire_Item_AnswerOption->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_AnswerOption->value_type == Questionnaire_Item_AnswerOption::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", questionnaire_Item_AnswerOption->value.valueString.size, questionnaire_Item_AnswerOption->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_AnswerOption->value_type == Questionnaire_Item_AnswerOption::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, questionnaire_Item_AnswerOption->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_AnswerOption->value_type == Questionnaire_Item_AnswerOption::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, questionnaire_Item_AnswerOption->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&questionnaire_Item_AnswerOption->initialSelected)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"initialSelected\" : \"%.*s\"", questionnaire_Item_AnswerOption->initialSelected ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Questionnaire_Item_Initial(Arena *arena, Questionnaire_Item_Initial *questionnaire_Item_Initial)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaire_Item_Initial->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaire_Item_Initial->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaire_Item_Initial->id.size, questionnaire_Item_Initial->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaire_Item_Initial->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item_Initial->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item_Initial->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaire_Item_Initial->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaire_Item_Initial->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaire_Item_Initial->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", questionnaire_Item_Initial->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", questionnaire_Item_Initial->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, questionnaire_Item_Initial->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", questionnaire_Item_Initial->value.valueDate.size, questionnaire_Item_Initial->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", questionnaire_Item_Initial->value.valueDateTime.size, questionnaire_Item_Initial->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", questionnaire_Item_Initial->value.valueTime.size, questionnaire_Item_Initial->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", questionnaire_Item_Initial->value.valueString.size, questionnaire_Item_Initial->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", questionnaire_Item_Initial->value.valueUri.size, questionnaire_Item_Initial->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, questionnaire_Item_Initial->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, questionnaire_Item_Initial->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, questionnaire_Item_Initial->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaire_Item_Initial->value_type == Questionnaire_Item_Initial::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, questionnaire_Item_Initial->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_QuestionnaireResponse(Arena *arena, QuestionnaireResponse *questionnaireResponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaireResponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaireResponse->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaireResponse->id.size, questionnaireResponse->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, questionnaireResponse->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", questionnaireResponse->implicitRules.size, questionnaireResponse->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", questionnaireResponse->language.size, questionnaireResponse->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, questionnaireResponse->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &questionnaireResponse->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaireResponse->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaireResponse->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, questionnaireResponse->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &questionnaireResponse->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &questionnaireResponse->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse->questionnaire)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"questionnaire\" : \"%.*s\"", questionnaireResponse->questionnaire.size, questionnaireResponse->questionnaire.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", questionnaireResponse->status.size, questionnaireResponse->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, questionnaireResponse->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, questionnaireResponse->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->authored)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authored\" : \"%.*s\"", questionnaireResponse->authored.size, questionnaireResponse->authored.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, questionnaireResponse->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, questionnaireResponse->source);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse->item_count; i++)
		{
			String8 to_add = Serialize_QuestionnaireResponse_Item(arena, &questionnaireResponse->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_QuestionnaireResponse_Item(Arena *arena, QuestionnaireResponse_Item *questionnaireResponse_Item)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaireResponse_Item->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaireResponse_Item->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaireResponse_Item->id.size, questionnaireResponse_Item->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse_Item->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse_Item->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaireResponse_Item->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse_Item->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse_Item->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaireResponse_Item->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse_Item->linkId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"linkId\" : \"%.*s\"", questionnaireResponse_Item->linkId.size, questionnaireResponse_Item->linkId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse_Item->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", questionnaireResponse_Item->definition.size, questionnaireResponse_Item->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse_Item->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", questionnaireResponse_Item->text.size, questionnaireResponse_Item->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse_Item->answer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse_Item->answer_count; i++)
		{
			String8 to_add = Serialize_QuestionnaireResponse_Item_Answer(arena, &questionnaireResponse_Item->answer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse_Item->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse_Item->item_count; i++)
		{
			String8 to_add = Serialize_QuestionnaireResponse_Item(arena, &questionnaireResponse_Item->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_QuestionnaireResponse_Item_Answer(Arena *arena, QuestionnaireResponse_Item_Answer *questionnaireResponse_Item_Answer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&questionnaireResponse_Item_Answer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&questionnaireResponse_Item_Answer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", questionnaireResponse_Item_Answer->id.size, questionnaireResponse_Item_Answer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&questionnaireResponse_Item_Answer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse_Item_Answer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaireResponse_Item_Answer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&questionnaireResponse_Item_Answer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse_Item_Answer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &questionnaireResponse_Item_Answer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", questionnaireResponse_Item_Answer->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", questionnaireResponse_Item_Answer->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, questionnaireResponse_Item_Answer->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", questionnaireResponse_Item_Answer->value.valueDate.size, questionnaireResponse_Item_Answer->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", questionnaireResponse_Item_Answer->value.valueDateTime.size, questionnaireResponse_Item_Answer->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", questionnaireResponse_Item_Answer->value.valueTime.size, questionnaireResponse_Item_Answer->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", questionnaireResponse_Item_Answer->value.valueString.size, questionnaireResponse_Item_Answer->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", questionnaireResponse_Item_Answer->value.valueUri.size, questionnaireResponse_Item_Answer->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, questionnaireResponse_Item_Answer->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, questionnaireResponse_Item_Answer->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, questionnaireResponse_Item_Answer->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(questionnaireResponse_Item_Answer->value_type == QuestionnaireResponse_Item_Answer::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, questionnaireResponse_Item_Answer->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&questionnaireResponse_Item_Answer->item)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < questionnaireResponse_Item_Answer->item_count; i++)
		{
			String8 to_add = Serialize_QuestionnaireResponse_Item(arena, &questionnaireResponse_Item_Answer->item[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RelatedPerson(Arena *arena, RelatedPerson *relatedPerson)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&relatedPerson->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&relatedPerson->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", relatedPerson->id.size, relatedPerson->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, relatedPerson->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", relatedPerson->implicitRules.size, relatedPerson->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", relatedPerson->language.size, relatedPerson->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, relatedPerson->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &relatedPerson->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &relatedPerson->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &relatedPerson->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &relatedPerson->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", relatedPerson->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, relatedPerson->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->relationship_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &relatedPerson->relationship[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->name_count; i++)
		{
			String8 to_add = Serialize_HumanName(arena, &relatedPerson->name[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &relatedPerson->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->gender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"gender\" : \"%.*s\"", relatedPerson->gender.size, relatedPerson->gender.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->birthDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"birthDate\" : \"%.*s\"", relatedPerson->birthDate.size, relatedPerson->birthDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->address)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->address_count; i++)
		{
			String8 to_add = Serialize_Address(arena, &relatedPerson->address[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->photo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->photo_count; i++)
		{
			String8 to_add = Serialize_Attachment(arena, &relatedPerson->photo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, relatedPerson->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson->communication)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson->communication_count; i++)
		{
			String8 to_add = Serialize_RelatedPerson_Communication(arena, &relatedPerson->communication[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RelatedPerson_Communication(Arena *arena, RelatedPerson_Communication *relatedPerson_Communication)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&relatedPerson_Communication->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&relatedPerson_Communication->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", relatedPerson_Communication->id.size, relatedPerson_Communication->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson_Communication->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson_Communication->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &relatedPerson_Communication->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson_Communication->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedPerson_Communication->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &relatedPerson_Communication->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedPerson_Communication->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, relatedPerson_Communication->language);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedPerson_Communication->preferred)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preferred\" : \"%.*s\"", relatedPerson_Communication->preferred ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RequestGroup(Arena *arena, RequestGroup *requestGroup)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&requestGroup->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&requestGroup->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", requestGroup->id.size, requestGroup->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, requestGroup->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", requestGroup->implicitRules.size, requestGroup->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", requestGroup->language.size, requestGroup->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, requestGroup->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &requestGroup->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &requestGroup->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &requestGroup->instantiatesCanonical[i].size, &requestGroup->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &requestGroup->instantiatesUri[i].size, &requestGroup->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &requestGroup->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->replaces)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->replaces_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &requestGroup->replaces[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->groupIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, requestGroup->groupIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", requestGroup->status.size, requestGroup->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", requestGroup->intent.size, requestGroup->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", requestGroup->priority.size, requestGroup->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, requestGroup->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, requestGroup->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, requestGroup->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->authoredOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authoredOn\" : \"%.*s\"", requestGroup->authoredOn.size, requestGroup->authoredOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, requestGroup->author);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &requestGroup->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &requestGroup->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &requestGroup->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup->action_count; i++)
		{
			String8 to_add = Serialize_RequestGroup_Action(arena, &requestGroup->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RequestGroup_Action(Arena *arena, RequestGroup_Action *requestGroup_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&requestGroup_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&requestGroup_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", requestGroup_Action->id.size, requestGroup_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action->prefix)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"prefix\" : \"%.*s\"", requestGroup_Action->prefix.size, requestGroup_Action->prefix.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", requestGroup_Action->title.size, requestGroup_Action->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", requestGroup_Action->description.size, requestGroup_Action->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->textEquivalent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"textEquivalent\" : \"%.*s\"", requestGroup_Action->textEquivalent.size, requestGroup_Action->textEquivalent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", requestGroup_Action->priority.size, requestGroup_Action->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->code_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &requestGroup_Action->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->documentation_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &requestGroup_Action->documentation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->condition_count; i++)
		{
			String8 to_add = Serialize_RequestGroup_Action_Condition(arena, &requestGroup_Action->condition[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action->relatedAction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->relatedAction_count; i++)
		{
			String8 to_add = Serialize_RequestGroup_Action_RelatedAction(arena, &requestGroup_Action->relatedAction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(requestGroup_Action->timing_type == RequestGroup_Action::TimingType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", requestGroup_Action->timing.valueDateTime.size, requestGroup_Action->timing.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(requestGroup_Action->timing_type == RequestGroup_Action::TimingType::Age)	
	{
			String8 to_add = Serialize_Age(arena, requestGroup_Action->timing.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(requestGroup_Action->timing_type == RequestGroup_Action::TimingType::Period)	
	{
			String8 to_add = Serialize_Period(arena, requestGroup_Action->timing.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(requestGroup_Action->timing_type == RequestGroup_Action::TimingType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, requestGroup_Action->timing.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(requestGroup_Action->timing_type == RequestGroup_Action::TimingType::Range)	
	{
			String8 to_add = Serialize_Range(arena, requestGroup_Action->timing.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(requestGroup_Action->timing_type == RequestGroup_Action::TimingType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, requestGroup_Action->timing.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&requestGroup_Action->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->participant_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &requestGroup_Action->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, requestGroup_Action->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->groupingBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"groupingBehavior\" : \"%.*s\"", requestGroup_Action->groupingBehavior.size, requestGroup_Action->groupingBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->selectionBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"selectionBehavior\" : \"%.*s\"", requestGroup_Action->selectionBehavior.size, requestGroup_Action->selectionBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->requiredBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requiredBehavior\" : \"%.*s\"", requestGroup_Action->requiredBehavior.size, requestGroup_Action->requiredBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->precheckBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"precheckBehavior\" : \"%.*s\"", requestGroup_Action->precheckBehavior.size, requestGroup_Action->precheckBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->cardinalityBehavior)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"cardinalityBehavior\" : \"%.*s\"", requestGroup_Action->cardinalityBehavior.size, requestGroup_Action->cardinalityBehavior.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, requestGroup_Action->resource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action->action_count; i++)
		{
			String8 to_add = Serialize_RequestGroup_Action(arena, &requestGroup_Action->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RequestGroup_Action_Condition(Arena *arena, RequestGroup_Action_Condition *requestGroup_Action_Condition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&requestGroup_Action_Condition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&requestGroup_Action_Condition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", requestGroup_Action_Condition->id.size, requestGroup_Action_Condition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action_Condition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action_Condition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup_Action_Condition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action_Condition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action_Condition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup_Action_Condition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action_Condition->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", requestGroup_Action_Condition->kind.size, requestGroup_Action_Condition->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action_Condition->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, requestGroup_Action_Condition->expression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RequestGroup_Action_RelatedAction(Arena *arena, RequestGroup_Action_RelatedAction *requestGroup_Action_RelatedAction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&requestGroup_Action_RelatedAction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&requestGroup_Action_RelatedAction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", requestGroup_Action_RelatedAction->id.size, requestGroup_Action_RelatedAction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action_RelatedAction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action_RelatedAction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup_Action_RelatedAction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action_RelatedAction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < requestGroup_Action_RelatedAction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &requestGroup_Action_RelatedAction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&requestGroup_Action_RelatedAction->actionId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"actionId\" : \"%.*s\"", requestGroup_Action_RelatedAction->actionId.size, requestGroup_Action_RelatedAction->actionId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&requestGroup_Action_RelatedAction->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"relationship\" : \"%.*s\"", requestGroup_Action_RelatedAction->relationship.size, requestGroup_Action_RelatedAction->relationship.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(requestGroup_Action_RelatedAction->offset_type == RequestGroup_Action_RelatedAction::OffsetType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, requestGroup_Action_RelatedAction->offset.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(requestGroup_Action_RelatedAction->offset_type == RequestGroup_Action_RelatedAction::OffsetType::Range)	
	{
			String8 to_add = Serialize_Range(arena, requestGroup_Action_RelatedAction->offset.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ResearchDefinition(Arena *arena, ResearchDefinition *researchDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&researchDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&researchDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", researchDefinition->id.size, researchDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, researchDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", researchDefinition->implicitRules.size, researchDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", researchDefinition->language.size, researchDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, researchDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &researchDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", researchDefinition->url.size, researchDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &researchDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", researchDefinition->version.size, researchDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", researchDefinition->name.size, researchDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", researchDefinition->title.size, researchDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->shortTitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"shortTitle\" : \"%.*s\"", researchDefinition->shortTitle.size, researchDefinition->shortTitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", researchDefinition->subtitle.size, researchDefinition->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", researchDefinition->status.size, researchDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", researchDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(researchDefinition->subject_type == ResearchDefinition::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, researchDefinition->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchDefinition->subject_type == ResearchDefinition::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, researchDefinition->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&researchDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", researchDefinition->date.size, researchDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", researchDefinition->publisher.size, researchDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", researchDefinition->description.size, researchDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->comment_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", &researchDefinition->comment[i].size, &researchDefinition->comment[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &researchDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", researchDefinition->purpose.size, researchDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", researchDefinition->usage.size, researchDefinition->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", researchDefinition->copyright.size, researchDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", researchDefinition->approvalDate.size, researchDefinition->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", researchDefinition->lastReviewDate.size, researchDefinition->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, researchDefinition->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchDefinition->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchDefinition->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchDefinition->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchDefinition->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchDefinition->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &researchDefinition->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->library)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchDefinition->library_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"library\" : \"%.*s\"", &researchDefinition->library[i].size, &researchDefinition->library[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchDefinition->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchDefinition->population);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->exposure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchDefinition->exposure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->exposureAlternative)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchDefinition->exposureAlternative);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchDefinition->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchDefinition->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ResearchElementDefinition(Arena *arena, ResearchElementDefinition *researchElementDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&researchElementDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&researchElementDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", researchElementDefinition->id.size, researchElementDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, researchElementDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", researchElementDefinition->implicitRules.size, researchElementDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", researchElementDefinition->language.size, researchElementDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, researchElementDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &researchElementDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchElementDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchElementDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", researchElementDefinition->url.size, researchElementDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &researchElementDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", researchElementDefinition->version.size, researchElementDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", researchElementDefinition->name.size, researchElementDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", researchElementDefinition->title.size, researchElementDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->shortTitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"shortTitle\" : \"%.*s\"", researchElementDefinition->shortTitle.size, researchElementDefinition->shortTitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->subtitle)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subtitle\" : \"%.*s\"", researchElementDefinition->subtitle.size, researchElementDefinition->subtitle.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", researchElementDefinition->status.size, researchElementDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", researchElementDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(researchElementDefinition->subject_type == ResearchElementDefinition::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, researchElementDefinition->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition->subject_type == ResearchElementDefinition::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, researchElementDefinition->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&researchElementDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", researchElementDefinition->date.size, researchElementDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", researchElementDefinition->publisher.size, researchElementDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchElementDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", researchElementDefinition->description.size, researchElementDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->comment_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", &researchElementDefinition->comment[i].size, &researchElementDefinition->comment[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &researchElementDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchElementDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", researchElementDefinition->purpose.size, researchElementDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->usage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"usage\" : \"%.*s\"", researchElementDefinition->usage.size, researchElementDefinition->usage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", researchElementDefinition->copyright.size, researchElementDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", researchElementDefinition->approvalDate.size, researchElementDefinition->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", researchElementDefinition->lastReviewDate.size, researchElementDefinition->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, researchElementDefinition->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchElementDefinition->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchElementDefinition->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchElementDefinition->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchElementDefinition->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchElementDefinition->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &researchElementDefinition->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->library)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->library_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"library\" : \"%.*s\"", &researchElementDefinition->library[i].size, &researchElementDefinition->library[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", researchElementDefinition->type.size, researchElementDefinition->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->variableType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"variableType\" : \"%.*s\"", researchElementDefinition->variableType.size, researchElementDefinition->variableType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition->characteristic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition->characteristic_count; i++)
		{
			String8 to_add = Serialize_ResearchElementDefinition_Characteristic(arena, &researchElementDefinition->characteristic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ResearchElementDefinition_Characteristic(Arena *arena, ResearchElementDefinition_Characteristic *researchElementDefinition_Characteristic)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&researchElementDefinition_Characteristic->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", researchElementDefinition_Characteristic->id.size, researchElementDefinition_Characteristic->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition_Characteristic->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchElementDefinition_Characteristic->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition_Characteristic->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchElementDefinition_Characteristic->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(researchElementDefinition_Characteristic->definition_type == ResearchElementDefinition_Characteristic::DefinitionType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, researchElementDefinition_Characteristic->definition.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->definition_type == ResearchElementDefinition_Characteristic::DefinitionType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", researchElementDefinition_Characteristic->definition.valueCanonical.size, researchElementDefinition_Characteristic->definition.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->definition_type == ResearchElementDefinition_Characteristic::DefinitionType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, researchElementDefinition_Characteristic->definition.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->definition_type == ResearchElementDefinition_Characteristic::DefinitionType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, researchElementDefinition_Characteristic->definition.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&researchElementDefinition_Characteristic->usageContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchElementDefinition_Characteristic->usageContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &researchElementDefinition_Characteristic->usageContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->exclude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"exclude\" : \"%.*s\"", researchElementDefinition_Characteristic->exclude ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->unitOfMeasure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, researchElementDefinition_Characteristic->unitOfMeasure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->studyEffectiveDescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"studyEffectiveDescription\" : \"%.*s\"", researchElementDefinition_Characteristic->studyEffectiveDescription.size, researchElementDefinition_Characteristic->studyEffectiveDescription.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(researchElementDefinition_Characteristic->studyEffective_type == ResearchElementDefinition_Characteristic::StudyEffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", researchElementDefinition_Characteristic->studyEffective.valueDateTime.size, researchElementDefinition_Characteristic->studyEffective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->studyEffective_type == ResearchElementDefinition_Characteristic::StudyEffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, researchElementDefinition_Characteristic->studyEffective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->studyEffective_type == ResearchElementDefinition_Characteristic::StudyEffectiveType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, researchElementDefinition_Characteristic->studyEffective.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->studyEffective_type == ResearchElementDefinition_Characteristic::StudyEffectiveType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, researchElementDefinition_Characteristic->studyEffective.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&researchElementDefinition_Characteristic->studyEffectiveTimeFromStart)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, researchElementDefinition_Characteristic->studyEffectiveTimeFromStart);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->studyEffectiveGroupMeasure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"studyEffectiveGroupMeasure\" : \"%.*s\"", researchElementDefinition_Characteristic->studyEffectiveGroupMeasure.size, researchElementDefinition_Characteristic->studyEffectiveGroupMeasure.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->participantEffectiveDescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"participantEffectiveDescription\" : \"%.*s\"", researchElementDefinition_Characteristic->participantEffectiveDescription.size, researchElementDefinition_Characteristic->participantEffectiveDescription.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(researchElementDefinition_Characteristic->participantEffective_type == ResearchElementDefinition_Characteristic::ParticipantEffectiveType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", researchElementDefinition_Characteristic->participantEffective.valueDateTime.size, researchElementDefinition_Characteristic->participantEffective.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->participantEffective_type == ResearchElementDefinition_Characteristic::ParticipantEffectiveType::Period)	
	{
			String8 to_add = Serialize_Period(arena, researchElementDefinition_Characteristic->participantEffective.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->participantEffective_type == ResearchElementDefinition_Characteristic::ParticipantEffectiveType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, researchElementDefinition_Characteristic->participantEffective.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(researchElementDefinition_Characteristic->participantEffective_type == ResearchElementDefinition_Characteristic::ParticipantEffectiveType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, researchElementDefinition_Characteristic->participantEffective.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&researchElementDefinition_Characteristic->participantEffectiveTimeFromStart)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, researchElementDefinition_Characteristic->participantEffectiveTimeFromStart);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchElementDefinition_Characteristic->participantEffectiveGroupMeasure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"participantEffectiveGroupMeasure\" : \"%.*s\"", researchElementDefinition_Characteristic->participantEffectiveGroupMeasure.size, researchElementDefinition_Characteristic->participantEffectiveGroupMeasure.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ResearchStudy(Arena *arena, ResearchStudy *researchStudy)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&researchStudy->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&researchStudy->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", researchStudy->id.size, researchStudy->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, researchStudy->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", researchStudy->implicitRules.size, researchStudy->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", researchStudy->language.size, researchStudy->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, researchStudy->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &researchStudy->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchStudy->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchStudy->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &researchStudy->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", researchStudy->title.size, researchStudy->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->protocol)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->protocol_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &researchStudy->protocol[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &researchStudy->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", researchStudy->status.size, researchStudy->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->primaryPurposeType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, researchStudy->primaryPurposeType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->phase)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, researchStudy->phase);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchStudy->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->focus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->focus_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchStudy->focus[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->condition_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchStudy->condition[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &researchStudy->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &researchStudy->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->keyword)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->keyword_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchStudy->keyword[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->location_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &researchStudy->location[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", researchStudy->description.size, researchStudy->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->enrollment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->enrollment_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &researchStudy->enrollment[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, researchStudy->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->sponsor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchStudy->sponsor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->principalInvestigator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchStudy->principalInvestigator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->site)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->site_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &researchStudy->site[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->reasonStopped)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, researchStudy->reasonStopped);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &researchStudy->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->arm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->arm_count; i++)
		{
			String8 to_add = Serialize_ResearchStudy_Arm(arena, &researchStudy->arm[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy->objective)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy->objective_count; i++)
		{
			String8 to_add = Serialize_ResearchStudy_Objective(arena, &researchStudy->objective[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ResearchStudy_Arm(Arena *arena, ResearchStudy_Arm *researchStudy_Arm)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&researchStudy_Arm->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&researchStudy_Arm->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", researchStudy_Arm->id.size, researchStudy_Arm->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy_Arm->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy_Arm->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchStudy_Arm->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy_Arm->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy_Arm->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchStudy_Arm->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy_Arm->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", researchStudy_Arm->name.size, researchStudy_Arm->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy_Arm->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, researchStudy_Arm->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy_Arm->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", researchStudy_Arm->description.size, researchStudy_Arm->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ResearchStudy_Objective(Arena *arena, ResearchStudy_Objective *researchStudy_Objective)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&researchStudy_Objective->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&researchStudy_Objective->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", researchStudy_Objective->id.size, researchStudy_Objective->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy_Objective->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy_Objective->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchStudy_Objective->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy_Objective->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchStudy_Objective->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchStudy_Objective->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchStudy_Objective->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", researchStudy_Objective->name.size, researchStudy_Objective->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchStudy_Objective->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, researchStudy_Objective->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ResearchSubject(Arena *arena, ResearchSubject *researchSubject)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&researchSubject->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&researchSubject->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", researchSubject->id.size, researchSubject->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, researchSubject->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", researchSubject->implicitRules.size, researchSubject->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", researchSubject->language.size, researchSubject->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, researchSubject->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchSubject->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &researchSubject->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchSubject->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchSubject->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchSubject->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchSubject->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchSubject->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &researchSubject->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchSubject->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < researchSubject->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &researchSubject->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&researchSubject->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", researchSubject->status.size, researchSubject->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, researchSubject->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->study)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchSubject->study);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->individual)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchSubject->individual);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->assignedArm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"assignedArm\" : \"%.*s\"", researchSubject->assignedArm.size, researchSubject->assignedArm.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->actualArm)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"actualArm\" : \"%.*s\"", researchSubject->actualArm.size, researchSubject->actualArm.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&researchSubject->consent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, researchSubject->consent);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskAssessment(Arena *arena, RiskAssessment *riskAssessment)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskAssessment->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskAssessment->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskAssessment->id.size, riskAssessment->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, riskAssessment->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", riskAssessment->implicitRules.size, riskAssessment->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", riskAssessment->language.size, riskAssessment->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, riskAssessment->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &riskAssessment->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskAssessment->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskAssessment->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &riskAssessment->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskAssessment->basedOn);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->parent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskAssessment->parent);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", riskAssessment->status.size, riskAssessment->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskAssessment->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskAssessment->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskAssessment->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskAssessment->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(riskAssessment->occurrence_type == RiskAssessment::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", riskAssessment->occurrence.valueDateTime.size, riskAssessment->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(riskAssessment->occurrence_type == RiskAssessment::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, riskAssessment->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&riskAssessment->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskAssessment->condition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskAssessment->performer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &riskAssessment->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &riskAssessment->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->basis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->basis_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &riskAssessment->basis[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->prediction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->prediction_count; i++)
		{
			String8 to_add = Serialize_RiskAssessment_Prediction(arena, &riskAssessment->prediction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment->mitigation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mitigation\" : \"%.*s\"", riskAssessment->mitigation.size, riskAssessment->mitigation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &riskAssessment->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskAssessment_Prediction(Arena *arena, RiskAssessment_Prediction *riskAssessment_Prediction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskAssessment_Prediction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskAssessment_Prediction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskAssessment_Prediction->id.size, riskAssessment_Prediction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment_Prediction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment_Prediction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskAssessment_Prediction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment_Prediction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskAssessment_Prediction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskAssessment_Prediction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskAssessment_Prediction->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskAssessment_Prediction->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(riskAssessment_Prediction->probability_type == RiskAssessment_Prediction::ProbabilityType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", riskAssessment_Prediction->probability.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(riskAssessment_Prediction->probability_type == RiskAssessment_Prediction::ProbabilityType::Range)	
	{
			String8 to_add = Serialize_Range(arena, riskAssessment_Prediction->probability.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&riskAssessment_Prediction->qualitativeRisk)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskAssessment_Prediction->qualitativeRisk);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskAssessment_Prediction->relativeRisk)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"relativeRisk\" : \"%d\"", riskAssessment_Prediction->relativeRisk);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(riskAssessment_Prediction->when_type == RiskAssessment_Prediction::WhenType::Period)	
	{
			String8 to_add = Serialize_Period(arena, riskAssessment_Prediction->when.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(riskAssessment_Prediction->when_type == RiskAssessment_Prediction::WhenType::Range)	
	{
			String8 to_add = Serialize_Range(arena, riskAssessment_Prediction->when.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&riskAssessment_Prediction->rationale)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rationale\" : \"%.*s\"", riskAssessment_Prediction->rationale.size, riskAssessment_Prediction->rationale.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskEvidenceSynthesis(Arena *arena, RiskEvidenceSynthesis *riskEvidenceSynthesis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskEvidenceSynthesis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskEvidenceSynthesis->id.size, riskEvidenceSynthesis->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, riskEvidenceSynthesis->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", riskEvidenceSynthesis->implicitRules.size, riskEvidenceSynthesis->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", riskEvidenceSynthesis->language.size, riskEvidenceSynthesis->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, riskEvidenceSynthesis->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &riskEvidenceSynthesis->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", riskEvidenceSynthesis->url.size, riskEvidenceSynthesis->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &riskEvidenceSynthesis->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", riskEvidenceSynthesis->version.size, riskEvidenceSynthesis->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", riskEvidenceSynthesis->name.size, riskEvidenceSynthesis->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", riskEvidenceSynthesis->title.size, riskEvidenceSynthesis->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", riskEvidenceSynthesis->status.size, riskEvidenceSynthesis->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", riskEvidenceSynthesis->date.size, riskEvidenceSynthesis->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", riskEvidenceSynthesis->publisher.size, riskEvidenceSynthesis->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &riskEvidenceSynthesis->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", riskEvidenceSynthesis->description.size, riskEvidenceSynthesis->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &riskEvidenceSynthesis->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &riskEvidenceSynthesis->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &riskEvidenceSynthesis->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", riskEvidenceSynthesis->copyright.size, riskEvidenceSynthesis->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->approvalDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"approvalDate\" : \"%.*s\"", riskEvidenceSynthesis->approvalDate.size, riskEvidenceSynthesis->approvalDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->lastReviewDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastReviewDate\" : \"%.*s\"", riskEvidenceSynthesis->lastReviewDate.size, riskEvidenceSynthesis->lastReviewDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->effectivePeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, riskEvidenceSynthesis->effectivePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->topic)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->topic_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &riskEvidenceSynthesis->topic[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->author_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &riskEvidenceSynthesis->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->editor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->editor_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &riskEvidenceSynthesis->editor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->reviewer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->reviewer_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &riskEvidenceSynthesis->reviewer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->endorser)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->endorser_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &riskEvidenceSynthesis->endorser[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->relatedArtifact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->relatedArtifact_count; i++)
		{
			String8 to_add = Serialize_RelatedArtifact(arena, &riskEvidenceSynthesis->relatedArtifact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis->synthesisType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskEvidenceSynthesis->synthesisType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->studyType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskEvidenceSynthesis->studyType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->population)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskEvidenceSynthesis->population);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->exposure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskEvidenceSynthesis->exposure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->outcome)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, riskEvidenceSynthesis->outcome);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->sampleSize)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_RiskEvidenceSynthesis_SampleSize(arena, riskEvidenceSynthesis->sampleSize);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->riskEstimate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_RiskEvidenceSynthesis_RiskEstimate(arena, riskEvidenceSynthesis->riskEstimate);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis->certainty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis->certainty_count; i++)
		{
			String8 to_add = Serialize_RiskEvidenceSynthesis_Certainty(arena, &riskEvidenceSynthesis->certainty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskEvidenceSynthesis_SampleSize(Arena *arena, RiskEvidenceSynthesis_SampleSize *riskEvidenceSynthesis_SampleSize)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskEvidenceSynthesis_SampleSize->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_SampleSize->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskEvidenceSynthesis_SampleSize->id.size, riskEvidenceSynthesis_SampleSize->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_SampleSize->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_SampleSize->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_SampleSize->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_SampleSize->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_SampleSize->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_SampleSize->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_SampleSize->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", riskEvidenceSynthesis_SampleSize->description.size, riskEvidenceSynthesis_SampleSize->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_SampleSize->numberOfStudies)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, riskEvidenceSynthesis_SampleSize->numberOfStudies);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_SampleSize->numberOfParticipants)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, riskEvidenceSynthesis_SampleSize->numberOfParticipants);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskEvidenceSynthesis_RiskEstimate(Arena *arena, RiskEvidenceSynthesis_RiskEstimate *riskEvidenceSynthesis_RiskEstimate)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskEvidenceSynthesis_RiskEstimate->id.size, riskEvidenceSynthesis_RiskEstimate->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_RiskEstimate->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_RiskEstimate->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_RiskEstimate->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_RiskEstimate->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", riskEvidenceSynthesis_RiskEstimate->description.size, riskEvidenceSynthesis_RiskEstimate->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskEvidenceSynthesis_RiskEstimate->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", riskEvidenceSynthesis_RiskEstimate->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->unitOfMeasure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskEvidenceSynthesis_RiskEstimate->unitOfMeasure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->denominatorCount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, riskEvidenceSynthesis_RiskEstimate->denominatorCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->numeratorCount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, riskEvidenceSynthesis_RiskEstimate->numeratorCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate->precisionEstimate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_RiskEstimate->precisionEstimate_count; i++)
		{
			String8 to_add = Serialize_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate(arena, &riskEvidenceSynthesis_RiskEstimate->precisionEstimate[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate(Arena *arena, RiskEvidenceSynthesis_RiskEstimate_PrecisionEstimate *riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->id.size, riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->level)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"level\" : \"%d\"", riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->level);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->from)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"from\" : \"%d\"", riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->from);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->to)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"to\" : \"%d\"", riskEvidenceSynthesis_RiskEstimate_PrecisionEstimate->to);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskEvidenceSynthesis_Certainty(Arena *arena, RiskEvidenceSynthesis_Certainty *riskEvidenceSynthesis_Certainty)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskEvidenceSynthesis_Certainty->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskEvidenceSynthesis_Certainty->id.size, riskEvidenceSynthesis_Certainty->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_Certainty->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_Certainty->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty->rating)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty->rating_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &riskEvidenceSynthesis_Certainty->rating[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &riskEvidenceSynthesis_Certainty->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty->certaintySubcomponent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty->certaintySubcomponent_count; i++)
		{
			String8 to_add = Serialize_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent(arena, &riskEvidenceSynthesis_Certainty->certaintySubcomponent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RiskEvidenceSynthesis_Certainty_CertaintySubcomponent(Arena *arena, RiskEvidenceSynthesis_Certainty_CertaintySubcomponent *riskEvidenceSynthesis_Certainty_CertaintySubcomponent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&riskEvidenceSynthesis_Certainty_CertaintySubcomponent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty_CertaintySubcomponent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", riskEvidenceSynthesis_Certainty_CertaintySubcomponent->id.size, riskEvidenceSynthesis_Certainty_CertaintySubcomponent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_Certainty_CertaintySubcomponent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &riskEvidenceSynthesis_Certainty_CertaintySubcomponent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty_CertaintySubcomponent->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, riskEvidenceSynthesis_Certainty_CertaintySubcomponent->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &riskEvidenceSynthesis_Certainty_CertaintySubcomponent->rating[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&riskEvidenceSynthesis_Certainty_CertaintySubcomponent->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < riskEvidenceSynthesis_Certainty_CertaintySubcomponent->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &riskEvidenceSynthesis_Certainty_CertaintySubcomponent->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Schedule(Arena *arena, Schedule *schedule)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&schedule->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&schedule->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", schedule->id.size, schedule->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&schedule->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, schedule->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&schedule->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", schedule->implicitRules.size, schedule->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&schedule->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", schedule->language.size, schedule->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&schedule->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, schedule->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&schedule->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &schedule->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &schedule->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &schedule->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &schedule->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->active)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"active\" : \"%.*s\"", schedule->active ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&schedule->serviceCategory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->serviceCategory_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &schedule->serviceCategory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->serviceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->serviceType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &schedule->serviceType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->specialty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->specialty_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &schedule->specialty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->actor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < schedule->actor_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &schedule->actor[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&schedule->planningHorizon)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, schedule->planningHorizon);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&schedule->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", schedule->comment.size, schedule->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SearchParameter(Arena *arena, SearchParameter *searchParameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&searchParameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&searchParameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", searchParameter->id.size, searchParameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, searchParameter->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", searchParameter->implicitRules.size, searchParameter->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", searchParameter->language.size, searchParameter->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, searchParameter->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &searchParameter->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &searchParameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &searchParameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", searchParameter->url.size, searchParameter->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", searchParameter->version.size, searchParameter->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", searchParameter->name.size, searchParameter->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->derivedFrom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"derivedFrom\" : \"%.*s\"", searchParameter->derivedFrom.size, searchParameter->derivedFrom.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", searchParameter->status.size, searchParameter->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", searchParameter->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", searchParameter->date.size, searchParameter->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", searchParameter->publisher.size, searchParameter->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &searchParameter->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", searchParameter->description.size, searchParameter->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &searchParameter->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &searchParameter->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", searchParameter->purpose.size, searchParameter->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", searchParameter->code.size, searchParameter->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->base)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->base_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"base\" : \"%.*s\"", &searchParameter->base[i].size, &searchParameter->base[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", searchParameter->type.size, searchParameter->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", searchParameter->expression.size, searchParameter->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->xpath)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"xpath\" : \"%.*s\"", searchParameter->xpath.size, searchParameter->xpath.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->xpathUsage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"xpathUsage\" : \"%.*s\"", searchParameter->xpathUsage.size, searchParameter->xpathUsage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->target_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"target\" : \"%.*s\"", &searchParameter->target[i].size, &searchParameter->target[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->multipleOr)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"multipleOr\" : \"%.*s\"", searchParameter->multipleOr ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->multipleAnd)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"multipleAnd\" : \"%.*s\"", searchParameter->multipleAnd ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter->comparator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->comparator_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"comparator\" : \"%.*s\"", &searchParameter->comparator[i].size, &searchParameter->comparator[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->modifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->modifier_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"modifier\" : \"%.*s\"", &searchParameter->modifier[i].size, &searchParameter->modifier[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->chain)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->chain_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"chain\" : \"%.*s\"", &searchParameter->chain[i].size, &searchParameter->chain[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter->component)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter->component_count; i++)
		{
			String8 to_add = Serialize_SearchParameter_Component(arena, &searchParameter->component[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SearchParameter_Component(Arena *arena, SearchParameter_Component *searchParameter_Component)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&searchParameter_Component->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&searchParameter_Component->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", searchParameter_Component->id.size, searchParameter_Component->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter_Component->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter_Component->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &searchParameter_Component->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter_Component->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < searchParameter_Component->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &searchParameter_Component->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&searchParameter_Component->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", searchParameter_Component->definition.size, searchParameter_Component->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&searchParameter_Component->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", searchParameter_Component->expression.size, searchParameter_Component->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ServiceRequest(Arena *arena, ServiceRequest *serviceRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&serviceRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&serviceRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", serviceRequest->id.size, serviceRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, serviceRequest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", serviceRequest->implicitRules.size, serviceRequest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", serviceRequest->language.size, serviceRequest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, serviceRequest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &serviceRequest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &serviceRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &serviceRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &serviceRequest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->instantiatesCanonical_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", &serviceRequest->instantiatesCanonical[i].size, &serviceRequest->instantiatesCanonical[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->instantiatesUri_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", &serviceRequest->instantiatesUri[i].size, &serviceRequest->instantiatesUri[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->replaces)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->replaces_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->replaces[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->requisition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, serviceRequest->requisition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", serviceRequest->status.size, serviceRequest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", serviceRequest->intent.size, serviceRequest->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &serviceRequest->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", serviceRequest->priority.size, serviceRequest->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->doNotPerform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"doNotPerform\" : \"%.*s\"", serviceRequest->doNotPerform ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, serviceRequest->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->orderDetail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->orderDetail_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &serviceRequest->orderDetail[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(serviceRequest->quantity_type == ServiceRequest::QuantityType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, serviceRequest->quantity.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(serviceRequest->quantity_type == ServiceRequest::QuantityType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, serviceRequest->quantity.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(serviceRequest->quantity_type == ServiceRequest::QuantityType::Range)	
	{
			String8 to_add = Serialize_Range(arena, serviceRequest->quantity.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&serviceRequest->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, serviceRequest->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, serviceRequest->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(serviceRequest->occurrence_type == ServiceRequest::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", serviceRequest->occurrence.valueDateTime.size, serviceRequest->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(serviceRequest->occurrence_type == ServiceRequest::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, serviceRequest->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(serviceRequest->occurrence_type == ServiceRequest::OccurrenceType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, serviceRequest->occurrence.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(serviceRequest->asNeeded_type == ServiceRequest::AsNeededType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", serviceRequest->asNeeded.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(serviceRequest->asNeeded_type == ServiceRequest::AsNeededType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, serviceRequest->asNeeded.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&serviceRequest->authoredOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authoredOn\" : \"%.*s\"", serviceRequest->authoredOn.size, serviceRequest->authoredOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->requester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, serviceRequest->requester);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->performerType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, serviceRequest->performerType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->performer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->performer_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->performer[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->locationCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->locationCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &serviceRequest->locationCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->locationReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->locationReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->locationReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &serviceRequest->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->insurance_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->supportingInfo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->supportingInfo_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->supportingInfo[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->specimen)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->specimen_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->specimen[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->bodySite_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &serviceRequest->bodySite[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &serviceRequest->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&serviceRequest->patientInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"patientInstruction\" : \"%.*s\"", serviceRequest->patientInstruction.size, serviceRequest->patientInstruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&serviceRequest->relevantHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < serviceRequest->relevantHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &serviceRequest->relevantHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Slot(Arena *arena, Slot *slot)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&slot->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&slot->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", slot->id.size, slot->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, slot->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", slot->implicitRules.size, slot->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", slot->language.size, slot->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, slot->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < slot->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &slot->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&slot->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < slot->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &slot->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&slot->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < slot->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &slot->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&slot->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < slot->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &slot->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&slot->serviceCategory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < slot->serviceCategory_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &slot->serviceCategory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&slot->serviceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < slot->serviceType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &slot->serviceType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&slot->specialty)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < slot->specialty_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &slot->specialty[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&slot->appointmentType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, slot->appointmentType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->schedule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, slot->schedule);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", slot->status.size, slot->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"start\" : \"%.*s\"", slot->start.size, slot->start.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"end\" : \"%.*s\"", slot->end.size, slot->end.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->overbooked)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"overbooked\" : \"%.*s\"", slot->overbooked ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&slot->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", slot->comment.size, slot->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Specimen(Arena *arena, Specimen *specimen)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimen->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimen->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimen->id.size, specimen->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, specimen->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", specimen->implicitRules.size, specimen->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", specimen->language.size, specimen->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, specimen->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &specimen->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &specimen->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->accessionIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, specimen->accessionIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", specimen->status.size, specimen->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimen->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->subject)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, specimen->subject);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->receivedTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"receivedTime\" : \"%.*s\"", specimen->receivedTime.size, specimen->receivedTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->parent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->parent_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &specimen->parent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->request)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->request_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &specimen->request[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->collection)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Specimen_Collection(arena, specimen->collection);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen->processing)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->processing_count; i++)
		{
			String8 to_add = Serialize_Specimen_Processing(arena, &specimen->processing[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->container)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->container_count; i++)
		{
			String8 to_add = Serialize_Specimen_Container(arena, &specimen->container[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->condition_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &specimen->condition[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &specimen->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Specimen_Collection(Arena *arena, Specimen_Collection *specimen_Collection)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimen_Collection->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimen_Collection->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimen_Collection->id.size, specimen_Collection->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Collection->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Collection->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen_Collection->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen_Collection->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Collection->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen_Collection->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen_Collection->collector)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, specimen_Collection->collector);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(specimen_Collection->collected_type == Specimen_Collection::CollectedType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", specimen_Collection->collected.valueDateTime.size, specimen_Collection->collected.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(specimen_Collection->collected_type == Specimen_Collection::CollectedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, specimen_Collection->collected.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&specimen_Collection->duration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, specimen_Collection->duration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Collection->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, specimen_Collection->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Collection->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimen_Collection->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Collection->bodySite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimen_Collection->bodySite);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(specimen_Collection->fastingStatus_type == Specimen_Collection::FastingStatusType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, specimen_Collection->fastingStatus.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(specimen_Collection->fastingStatus_type == Specimen_Collection::FastingStatusType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, specimen_Collection->fastingStatus.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Specimen_Processing(Arena *arena, Specimen_Processing *specimen_Processing)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimen_Processing->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimen_Processing->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimen_Processing->id.size, specimen_Processing->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Processing->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Processing->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen_Processing->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen_Processing->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Processing->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen_Processing->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen_Processing->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", specimen_Processing->description.size, specimen_Processing->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Processing->procedure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimen_Processing->procedure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Processing->additive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Processing->additive_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &specimen_Processing->additive[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(specimen_Processing->time_type == Specimen_Processing::TimeType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", specimen_Processing->time.valueDateTime.size, specimen_Processing->time.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(specimen_Processing->time_type == Specimen_Processing::TimeType::Period)	
	{
			String8 to_add = Serialize_Period(arena, specimen_Processing->time.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Specimen_Container(Arena *arena, Specimen_Container *specimen_Container)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimen_Container->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimen_Container->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimen_Container->id.size, specimen_Container->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Container->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Container->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen_Container->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen_Container->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Container->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimen_Container->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen_Container->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimen_Container->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &specimen_Container->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimen_Container->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", specimen_Container->description.size, specimen_Container->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Container->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimen_Container->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Container->capacity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, specimen_Container->capacity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimen_Container->specimenQuantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, specimen_Container->specimenQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(specimen_Container->additive_type == Specimen_Container::AdditiveType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, specimen_Container->additive.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(specimen_Container->additive_type == Specimen_Container::AdditiveType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, specimen_Container->additive.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SpecimenDefinition(Arena *arena, SpecimenDefinition *specimenDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimenDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimenDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimenDefinition->id.size, specimenDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, specimenDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", specimenDefinition->implicitRules.size, specimenDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", specimenDefinition->language.size, specimenDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, specimenDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &specimenDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, specimenDefinition->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->typeCollected)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimenDefinition->typeCollected);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->patientPreparation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition->patientPreparation_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &specimenDefinition->patientPreparation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition->timeAspect)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"timeAspect\" : \"%.*s\"", specimenDefinition->timeAspect.size, specimenDefinition->timeAspect.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition->collection)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition->collection_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &specimenDefinition->collection[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition->typeTested)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition->typeTested_count; i++)
		{
			String8 to_add = Serialize_SpecimenDefinition_TypeTested(arena, &specimenDefinition->typeTested[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SpecimenDefinition_TypeTested(Arena *arena, SpecimenDefinition_TypeTested *specimenDefinition_TypeTested)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimenDefinition_TypeTested->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimenDefinition_TypeTested->id.size, specimenDefinition_TypeTested->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested->isDerived)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isDerived\" : \"%.*s\"", specimenDefinition_TypeTested->isDerived ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimenDefinition_TypeTested->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested->preference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preference\" : \"%.*s\"", specimenDefinition_TypeTested->preference.size, specimenDefinition_TypeTested->preference.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested->container)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SpecimenDefinition_TypeTested_Container(arena, specimenDefinition_TypeTested->container);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested->requirement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requirement\" : \"%.*s\"", specimenDefinition_TypeTested->requirement.size, specimenDefinition_TypeTested->requirement.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested->retentionTime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, specimenDefinition_TypeTested->retentionTime);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested->rejectionCriterion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested->rejectionCriterion_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &specimenDefinition_TypeTested->rejectionCriterion[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested->handling)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested->handling_count; i++)
		{
			String8 to_add = Serialize_SpecimenDefinition_TypeTested_Handling(arena, &specimenDefinition_TypeTested->handling[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SpecimenDefinition_TypeTested_Container(Arena *arena, SpecimenDefinition_TypeTested_Container *specimenDefinition_TypeTested_Container)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimenDefinition_TypeTested_Container->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimenDefinition_TypeTested_Container->id.size, specimenDefinition_TypeTested_Container->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested_Container->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested_Container->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested_Container->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested_Container->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->material)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimenDefinition_TypeTested_Container->material);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimenDefinition_TypeTested_Container->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->cap)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimenDefinition_TypeTested_Container->cap);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", specimenDefinition_TypeTested_Container->description.size, specimenDefinition_TypeTested_Container->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->capacity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, specimenDefinition_TypeTested_Container->capacity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(specimenDefinition_TypeTested_Container->minimumVolume_type == SpecimenDefinition_TypeTested_Container::MinimumVolumeType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, specimenDefinition_TypeTested_Container->minimumVolume.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(specimenDefinition_TypeTested_Container->minimumVolume_type == SpecimenDefinition_TypeTested_Container::MinimumVolumeType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", specimenDefinition_TypeTested_Container->minimumVolume.valueString.size, specimenDefinition_TypeTested_Container->minimumVolume.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&specimenDefinition_TypeTested_Container->additive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested_Container->additive_count; i++)
		{
			String8 to_add = Serialize_SpecimenDefinition_TypeTested_Container_Additive(arena, &specimenDefinition_TypeTested_Container->additive[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container->preparation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preparation\" : \"%.*s\"", specimenDefinition_TypeTested_Container->preparation.size, specimenDefinition_TypeTested_Container->preparation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SpecimenDefinition_TypeTested_Container_Additive(Arena *arena, SpecimenDefinition_TypeTested_Container_Additive *specimenDefinition_TypeTested_Container_Additive)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimenDefinition_TypeTested_Container_Additive->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container_Additive->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimenDefinition_TypeTested_Container_Additive->id.size, specimenDefinition_TypeTested_Container_Additive->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container_Additive->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested_Container_Additive->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested_Container_Additive->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Container_Additive->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested_Container_Additive->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested_Container_Additive->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(specimenDefinition_TypeTested_Container_Additive->additive_type == SpecimenDefinition_TypeTested_Container_Additive::AdditiveType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, specimenDefinition_TypeTested_Container_Additive->additive.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(specimenDefinition_TypeTested_Container_Additive->additive_type == SpecimenDefinition_TypeTested_Container_Additive::AdditiveType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, specimenDefinition_TypeTested_Container_Additive->additive.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SpecimenDefinition_TypeTested_Handling(Arena *arena, SpecimenDefinition_TypeTested_Handling *specimenDefinition_TypeTested_Handling)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", specimenDefinition_TypeTested_Handling->id.size, specimenDefinition_TypeTested_Handling->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested_Handling->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested_Handling->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < specimenDefinition_TypeTested_Handling->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &specimenDefinition_TypeTested_Handling->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->temperatureQualifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, specimenDefinition_TypeTested_Handling->temperatureQualifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->temperatureRange)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Range(arena, specimenDefinition_TypeTested_Handling->temperatureRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->maxDuration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Duration(arena, specimenDefinition_TypeTested_Handling->maxDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&specimenDefinition_TypeTested_Handling->instruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"instruction\" : \"%.*s\"", specimenDefinition_TypeTested_Handling->instruction.size, specimenDefinition_TypeTested_Handling->instruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureDefinition(Arena *arena, StructureDefinition *structureDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureDefinition->id.size, structureDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, structureDefinition->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", structureDefinition->implicitRules.size, structureDefinition->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", structureDefinition->language.size, structureDefinition->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, structureDefinition->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &structureDefinition->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", structureDefinition->url.size, structureDefinition->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &structureDefinition->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", structureDefinition->version.size, structureDefinition->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", structureDefinition->name.size, structureDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", structureDefinition->title.size, structureDefinition->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", structureDefinition->status.size, structureDefinition->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", structureDefinition->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", structureDefinition->date.size, structureDefinition->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", structureDefinition->publisher.size, structureDefinition->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &structureDefinition->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", structureDefinition->description.size, structureDefinition->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &structureDefinition->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &structureDefinition->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", structureDefinition->purpose.size, structureDefinition->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", structureDefinition->copyright.size, structureDefinition->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->keyword)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->keyword_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &structureDefinition->keyword[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->fhirVersion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"fhirVersion\" : \"%.*s\"", structureDefinition->fhirVersion.size, structureDefinition->fhirVersion.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->mapping)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->mapping_count; i++)
		{
			String8 to_add = Serialize_StructureDefinition_Mapping(arena, &structureDefinition->mapping[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", structureDefinition->kind.size, structureDefinition->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->abstract)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"abstract\" : \"%.*s\"", structureDefinition->abstract ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->context_count; i++)
		{
			String8 to_add = Serialize_StructureDefinition_Context(arena, &structureDefinition->context[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->contextInvariant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition->contextInvariant_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"contextInvariant\" : \"%.*s\"", &structureDefinition->contextInvariant[i].size, &structureDefinition->contextInvariant[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", structureDefinition->type.size, structureDefinition->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->baseDefinition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"baseDefinition\" : \"%.*s\"", structureDefinition->baseDefinition.size, structureDefinition->baseDefinition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->derivation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"derivation\" : \"%.*s\"", structureDefinition->derivation.size, structureDefinition->derivation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->snapshot)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_StructureDefinition_Snapshot(arena, structureDefinition->snapshot);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition->differential)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_StructureDefinition_Differential(arena, structureDefinition->differential);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureDefinition_Mapping(Arena *arena, StructureDefinition_Mapping *structureDefinition_Mapping)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureDefinition_Mapping->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureDefinition_Mapping->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureDefinition_Mapping->id.size, structureDefinition_Mapping->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Mapping->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Mapping->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Mapping->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Mapping->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Mapping->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Mapping->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Mapping->identity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"identity\" : \"%.*s\"", structureDefinition_Mapping->identity.size, structureDefinition_Mapping->identity.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Mapping->uri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uri\" : \"%.*s\"", structureDefinition_Mapping->uri.size, structureDefinition_Mapping->uri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Mapping->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", structureDefinition_Mapping->name.size, structureDefinition_Mapping->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Mapping->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", structureDefinition_Mapping->comment.size, structureDefinition_Mapping->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureDefinition_Context(Arena *arena, StructureDefinition_Context *structureDefinition_Context)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureDefinition_Context->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureDefinition_Context->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureDefinition_Context->id.size, structureDefinition_Context->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Context->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Context->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Context->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Context->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Context->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Context->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Context->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", structureDefinition_Context->type.size, structureDefinition_Context->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Context->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", structureDefinition_Context->expression.size, structureDefinition_Context->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureDefinition_Snapshot(Arena *arena, StructureDefinition_Snapshot *structureDefinition_Snapshot)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureDefinition_Snapshot->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureDefinition_Snapshot->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureDefinition_Snapshot->id.size, structureDefinition_Snapshot->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Snapshot->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Snapshot->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Snapshot->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Snapshot->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Snapshot->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Snapshot->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Snapshot->element)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Snapshot->element_count; i++)
		{
			String8 to_add = Serialize_ElementDefinition(arena, &structureDefinition_Snapshot->element[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureDefinition_Differential(Arena *arena, StructureDefinition_Differential *structureDefinition_Differential)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureDefinition_Differential->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureDefinition_Differential->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureDefinition_Differential->id.size, structureDefinition_Differential->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureDefinition_Differential->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Differential->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Differential->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Differential->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Differential->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureDefinition_Differential->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureDefinition_Differential->element)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureDefinition_Differential->element_count; i++)
		{
			String8 to_add = Serialize_ElementDefinition(arena, &structureDefinition_Differential->element[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap(Arena *arena, StructureMap *structureMap)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap->id.size, structureMap->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, structureMap->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", structureMap->implicitRules.size, structureMap->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", structureMap->language.size, structureMap->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, structureMap->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &structureMap->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", structureMap->url.size, structureMap->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &structureMap->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", structureMap->version.size, structureMap->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", structureMap->name.size, structureMap->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", structureMap->title.size, structureMap->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", structureMap->status.size, structureMap->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", structureMap->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", structureMap->date.size, structureMap->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", structureMap->publisher.size, structureMap->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &structureMap->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", structureMap->description.size, structureMap->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &structureMap->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &structureMap->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", structureMap->purpose.size, structureMap->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", structureMap->copyright.size, structureMap->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap->structure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->structure_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Structure(arena, &structureMap->structure[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->import)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->import_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"import\" : \"%.*s\"", &structureMap->import[i].size, &structureMap->import[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap->group)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap->group_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group(arena, &structureMap->group[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Structure(Arena *arena, StructureMap_Structure *structureMap_Structure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Structure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Structure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Structure->id.size, structureMap_Structure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Structure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Structure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Structure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Structure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Structure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Structure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Structure->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", structureMap_Structure->url.size, structureMap_Structure->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Structure->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", structureMap_Structure->mode.size, structureMap_Structure->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Structure->alias)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"alias\" : \"%.*s\"", structureMap_Structure->alias.size, structureMap_Structure->alias.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Structure->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", structureMap_Structure->documentation.size, structureMap_Structure->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Group(Arena *arena, StructureMap_Group *structureMap_Group)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Group->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Group->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Group->id.size, structureMap_Group->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", structureMap_Group->name.size, structureMap_Group->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group->extends)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"extends\" : \"%.*s\"", structureMap_Group->extends.size, structureMap_Group->extends.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group->typeMode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"typeMode\" : \"%.*s\"", structureMap_Group->typeMode.size, structureMap_Group->typeMode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", structureMap_Group->documentation.size, structureMap_Group->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group->input)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group->input_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group_Input(arena, &structureMap_Group->input[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group->rule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group->rule_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group_Rule(arena, &structureMap_Group->rule[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Group_Input(Arena *arena, StructureMap_Group_Input *structureMap_Group_Input)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Group_Input->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Group_Input->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Group_Input->id.size, structureMap_Group_Input->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Input->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Input->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Input->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Input->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Input->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Input->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Input->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", structureMap_Group_Input->name.size, structureMap_Group_Input->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Input->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", structureMap_Group_Input->type.size, structureMap_Group_Input->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Input->mode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mode\" : \"%.*s\"", structureMap_Group_Input->mode.size, structureMap_Group_Input->mode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Input->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", structureMap_Group_Input->documentation.size, structureMap_Group_Input->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Group_Rule(Arena *arena, StructureMap_Group_Rule *structureMap_Group_Rule)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Group_Rule->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Group_Rule->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Group_Rule->id.size, structureMap_Group_Rule->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", structureMap_Group_Rule->name.size, structureMap_Group_Rule->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule->source_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group_Rule_Source(arena, &structureMap_Group_Rule->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule->target_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group_Rule_Target(arena, &structureMap_Group_Rule->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule->rule)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule->rule_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group_Rule(arena, &structureMap_Group_Rule->rule[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule->dependent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule->dependent_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group_Rule_Dependent(arena, &structureMap_Group_Rule->dependent[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", structureMap_Group_Rule->documentation.size, structureMap_Group_Rule->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Group_Rule_Source(Arena *arena, StructureMap_Group_Rule_Source *structureMap_Group_Rule_Source)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Group_Rule_Source->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Group_Rule_Source->id.size, structureMap_Group_Rule_Source->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Source->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Source->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Source->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Source->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"context\" : \"%.*s\"", structureMap_Group_Rule_Source->context.size, structureMap_Group_Rule_Source->context.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->min)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, structureMap_Group_Rule_Source->min);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->max)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"max\" : \"%.*s\"", structureMap_Group_Rule_Source->max.size, structureMap_Group_Rule_Source->max.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", structureMap_Group_Rule_Source->type.size, structureMap_Group_Rule_Source->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueBase64Binary.size, structureMap_Group_Rule_Source->defaultValue.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueCanonical.size, structureMap_Group_Rule_Source->defaultValue.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueCode.size, structureMap_Group_Rule_Source->defaultValue.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueDate.size, structureMap_Group_Rule_Source->defaultValue.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueDateTime.size, structureMap_Group_Rule_Source->defaultValue.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", structureMap_Group_Rule_Source->defaultValue.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueId.size, structureMap_Group_Rule_Source->defaultValue.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueInstant.size, structureMap_Group_Rule_Source->defaultValue.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, structureMap_Group_Rule_Source->defaultValue.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueMarkdown.size, structureMap_Group_Rule_Source->defaultValue.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueOid.size, structureMap_Group_Rule_Source->defaultValue.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", structureMap_Group_Rule_Source->defaultValue.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueString.size, structureMap_Group_Rule_Source->defaultValue.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueTime.size, structureMap_Group_Rule_Source->defaultValue.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", structureMap_Group_Rule_Source->defaultValue.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueUri.size, structureMap_Group_Rule_Source->defaultValue.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueUrl.size, structureMap_Group_Rule_Source->defaultValue.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", structureMap_Group_Rule_Source->defaultValue.valueUuid.size, structureMap_Group_Rule_Source->defaultValue.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Address)	
	{
			String8 to_add = Serialize_Address(arena, structureMap_Group_Rule_Source->defaultValue.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Age)	
	{
			String8 to_add = Serialize_Age(arena, structureMap_Group_Rule_Source->defaultValue.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, structureMap_Group_Rule_Source->defaultValue.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, structureMap_Group_Rule_Source->defaultValue.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, structureMap_Group_Rule_Source->defaultValue.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, structureMap_Group_Rule_Source->defaultValue.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, structureMap_Group_Rule_Source->defaultValue.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Count)	
	{
			String8 to_add = Serialize_Count(arena, structureMap_Group_Rule_Source->defaultValue.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, structureMap_Group_Rule_Source->defaultValue.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, structureMap_Group_Rule_Source->defaultValue.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, structureMap_Group_Rule_Source->defaultValue.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, structureMap_Group_Rule_Source->defaultValue.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, structureMap_Group_Rule_Source->defaultValue.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, structureMap_Group_Rule_Source->defaultValue.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, structureMap_Group_Rule_Source->defaultValue.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, structureMap_Group_Rule_Source->defaultValue.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, structureMap_Group_Rule_Source->defaultValue.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, structureMap_Group_Rule_Source->defaultValue.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, structureMap_Group_Rule_Source->defaultValue.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, structureMap_Group_Rule_Source->defaultValue.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, structureMap_Group_Rule_Source->defaultValue.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, structureMap_Group_Rule_Source->defaultValue.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, structureMap_Group_Rule_Source->defaultValue.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, structureMap_Group_Rule_Source->defaultValue.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, structureMap_Group_Rule_Source->defaultValue.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, structureMap_Group_Rule_Source->defaultValue.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, structureMap_Group_Rule_Source->defaultValue.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, structureMap_Group_Rule_Source->defaultValue.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, structureMap_Group_Rule_Source->defaultValue.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, structureMap_Group_Rule_Source->defaultValue.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Source->defaultValue_type == StructureMap_Group_Rule_Source::DefaultValueType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, structureMap_Group_Rule_Source->defaultValue.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&structureMap_Group_Rule_Source->element)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"element\" : \"%.*s\"", structureMap_Group_Rule_Source->element.size, structureMap_Group_Rule_Source->element.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->listMode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"listMode\" : \"%.*s\"", structureMap_Group_Rule_Source->listMode.size, structureMap_Group_Rule_Source->listMode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->variable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"variable\" : \"%.*s\"", structureMap_Group_Rule_Source->variable.size, structureMap_Group_Rule_Source->variable.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"condition\" : \"%.*s\"", structureMap_Group_Rule_Source->condition.size, structureMap_Group_Rule_Source->condition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->check)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"check\" : \"%.*s\"", structureMap_Group_Rule_Source->check.size, structureMap_Group_Rule_Source->check.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Source->logMessage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"logMessage\" : \"%.*s\"", structureMap_Group_Rule_Source->logMessage.size, structureMap_Group_Rule_Source->logMessage.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Group_Rule_Target(Arena *arena, StructureMap_Group_Rule_Target *structureMap_Group_Rule_Target)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Group_Rule_Target->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Group_Rule_Target->id.size, structureMap_Group_Rule_Target->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Target->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Target->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Target->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Target->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->context)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"context\" : \"%.*s\"", structureMap_Group_Rule_Target->context.size, structureMap_Group_Rule_Target->context.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->contextType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"contextType\" : \"%.*s\"", structureMap_Group_Rule_Target->contextType.size, structureMap_Group_Rule_Target->contextType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->element)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"element\" : \"%.*s\"", structureMap_Group_Rule_Target->element.size, structureMap_Group_Rule_Target->element.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->variable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"variable\" : \"%.*s\"", structureMap_Group_Rule_Target->variable.size, structureMap_Group_Rule_Target->variable.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->listMode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Target->listMode_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"listMode\" : \"%.*s\"", &structureMap_Group_Rule_Target->listMode[i].size, &structureMap_Group_Rule_Target->listMode[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->listRuleId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"listRuleId\" : \"%.*s\"", structureMap_Group_Rule_Target->listRuleId.size, structureMap_Group_Rule_Target->listRuleId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->transform)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"transform\" : \"%.*s\"", structureMap_Group_Rule_Target->transform.size, structureMap_Group_Rule_Target->transform.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Target->parameter_count; i++)
		{
			String8 to_add = Serialize_StructureMap_Group_Rule_Target_Parameter(arena, &structureMap_Group_Rule_Target->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Group_Rule_Target_Parameter(Arena *arena, StructureMap_Group_Rule_Target_Parameter *structureMap_Group_Rule_Target_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Group_Rule_Target_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Target_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Group_Rule_Target_Parameter->id.size, structureMap_Group_Rule_Target_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Target_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Target_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Target_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Target_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Target_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Target_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(structureMap_Group_Rule_Target_Parameter->value_type == StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", structureMap_Group_Rule_Target_Parameter->value.valueId.size, structureMap_Group_Rule_Target_Parameter->value.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Target_Parameter->value_type == StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", structureMap_Group_Rule_Target_Parameter->value.valueString.size, structureMap_Group_Rule_Target_Parameter->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Target_Parameter->value_type == StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", structureMap_Group_Rule_Target_Parameter->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Target_Parameter->value_type == StructureMap_Group_Rule_Target_Parameter::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, structureMap_Group_Rule_Target_Parameter->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(structureMap_Group_Rule_Target_Parameter->value_type == StructureMap_Group_Rule_Target_Parameter::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", structureMap_Group_Rule_Target_Parameter->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_StructureMap_Group_Rule_Dependent(Arena *arena, StructureMap_Group_Rule_Dependent *structureMap_Group_Rule_Dependent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&structureMap_Group_Rule_Dependent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Dependent->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", structureMap_Group_Rule_Dependent->id.size, structureMap_Group_Rule_Dependent->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Dependent->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Dependent->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Dependent->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Dependent->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Dependent->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &structureMap_Group_Rule_Dependent->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&structureMap_Group_Rule_Dependent->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", structureMap_Group_Rule_Dependent->name.size, structureMap_Group_Rule_Dependent->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&structureMap_Group_Rule_Dependent->variable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < structureMap_Group_Rule_Dependent->variable_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"variable\" : \"%.*s\"", &structureMap_Group_Rule_Dependent->variable[i].size, &structureMap_Group_Rule_Dependent->variable[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Subscription(Arena *arena, Subscription *subscription)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&subscription->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&subscription->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", subscription->id.size, subscription->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, subscription->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", subscription->implicitRules.size, subscription->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", subscription->language.size, subscription->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, subscription->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < subscription->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &subscription->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&subscription->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < subscription->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &subscription->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&subscription->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < subscription->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &subscription->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&subscription->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", subscription->status.size, subscription->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < subscription->contact_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &subscription->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&subscription->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"end\" : \"%.*s\"", subscription->end.size, subscription->end.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->reason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"reason\" : \"%.*s\"", subscription->reason.size, subscription->reason.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->criteria)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"criteria\" : \"%.*s\"", subscription->criteria.size, subscription->criteria.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->error)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"error\" : \"%.*s\"", subscription->error.size, subscription->error.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription->channel)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Subscription_Channel(arena, subscription->channel);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Subscription_Channel(Arena *arena, Subscription_Channel *subscription_Channel)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&subscription_Channel->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&subscription_Channel->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", subscription_Channel->id.size, subscription_Channel->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription_Channel->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < subscription_Channel->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &subscription_Channel->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&subscription_Channel->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < subscription_Channel->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &subscription_Channel->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&subscription_Channel->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", subscription_Channel->type.size, subscription_Channel->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription_Channel->endpoint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"endpoint\" : \"%.*s\"", subscription_Channel->endpoint.size, subscription_Channel->endpoint.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription_Channel->payload)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"payload\" : \"%.*s\"", subscription_Channel->payload.size, subscription_Channel->payload.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&subscription_Channel->header)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < subscription_Channel->header_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"header\" : \"%.*s\"", &subscription_Channel->header[i].size, &subscription_Channel->header[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Substance(Arena *arena, Substance *substance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substance->id.size, substance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, substance->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", substance->implicitRules.size, substance->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", substance->language.size, substance->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, substance->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &substance->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &substance->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", substance->status.size, substance->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance->category_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &substance->category[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substance->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", substance->description.size, substance->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance->instance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance->instance_count; i++)
		{
			String8 to_add = Serialize_Substance_Instance(arena, &substance->instance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance->ingredient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance->ingredient_count; i++)
		{
			String8 to_add = Serialize_Substance_Ingredient(arena, &substance->ingredient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Substance_Instance(Arena *arena, Substance_Instance *substance_Instance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substance_Instance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substance_Instance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substance_Instance->id.size, substance_Instance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance_Instance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance_Instance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substance_Instance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance_Instance->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance_Instance->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substance_Instance->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance_Instance->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substance_Instance->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance_Instance->expiry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expiry\" : \"%.*s\"", substance_Instance->expiry.size, substance_Instance->expiry.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance_Instance->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, substance_Instance->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Substance_Ingredient(Arena *arena, Substance_Ingredient *substance_Ingredient)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substance_Ingredient->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substance_Ingredient->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substance_Ingredient->id.size, substance_Ingredient->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substance_Ingredient->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance_Ingredient->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substance_Ingredient->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance_Ingredient->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substance_Ingredient->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substance_Ingredient->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substance_Ingredient->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, substance_Ingredient->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substance_Ingredient->substance_type == Substance_Ingredient::SubstanceType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, substance_Ingredient->substance.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substance_Ingredient->substance_type == Substance_Ingredient::SubstanceType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, substance_Ingredient->substance.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceNucleicAcid(Arena *arena, SubstanceNucleicAcid *substanceNucleicAcid)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceNucleicAcid->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceNucleicAcid->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceNucleicAcid->id.size, substanceNucleicAcid->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, substanceNucleicAcid->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", substanceNucleicAcid->implicitRules.size, substanceNucleicAcid->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", substanceNucleicAcid->language.size, substanceNucleicAcid->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, substanceNucleicAcid->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &substanceNucleicAcid->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid->sequenceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceNucleicAcid->sequenceType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->numberOfSubunits)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, substanceNucleicAcid->numberOfSubunits);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->areaOfHybridisation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"areaOfHybridisation\" : \"%.*s\"", substanceNucleicAcid->areaOfHybridisation.size, substanceNucleicAcid->areaOfHybridisation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->oligoNucleotideType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceNucleicAcid->oligoNucleotideType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid->subunit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid->subunit_count; i++)
		{
			String8 to_add = Serialize_SubstanceNucleicAcid_Subunit(arena, &substanceNucleicAcid->subunit[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceNucleicAcid_Subunit(Arena *arena, SubstanceNucleicAcid_Subunit *substanceNucleicAcid_Subunit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceNucleicAcid_Subunit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceNucleicAcid_Subunit->id.size, substanceNucleicAcid_Subunit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid_Subunit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid_Subunit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->subunit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, substanceNucleicAcid_Subunit->subunit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%.*s\"", substanceNucleicAcid_Subunit->sequence.size, substanceNucleicAcid_Subunit->sequence.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->length)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, substanceNucleicAcid_Subunit->length);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->sequenceAttachment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, substanceNucleicAcid_Subunit->sequenceAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->fivePrime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceNucleicAcid_Subunit->fivePrime);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->threePrime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceNucleicAcid_Subunit->threePrime);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->linkage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit->linkage_count; i++)
		{
			String8 to_add = Serialize_SubstanceNucleicAcid_Subunit_Linkage(arena, &substanceNucleicAcid_Subunit->linkage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit->sugar)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit->sugar_count; i++)
		{
			String8 to_add = Serialize_SubstanceNucleicAcid_Subunit_Sugar(arena, &substanceNucleicAcid_Subunit->sugar[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceNucleicAcid_Subunit_Linkage(Arena *arena, SubstanceNucleicAcid_Subunit_Linkage *substanceNucleicAcid_Subunit_Linkage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceNucleicAcid_Subunit_Linkage->id.size, substanceNucleicAcid_Subunit_Linkage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit_Linkage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid_Subunit_Linkage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit_Linkage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid_Subunit_Linkage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->connectivity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"connectivity\" : \"%.*s\"", substanceNucleicAcid_Subunit_Linkage->connectivity.size, substanceNucleicAcid_Subunit_Linkage->connectivity.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceNucleicAcid_Subunit_Linkage->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", substanceNucleicAcid_Subunit_Linkage->name.size, substanceNucleicAcid_Subunit_Linkage->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Linkage->residueSite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"residueSite\" : \"%.*s\"", substanceNucleicAcid_Subunit_Linkage->residueSite.size, substanceNucleicAcid_Subunit_Linkage->residueSite.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceNucleicAcid_Subunit_Sugar(Arena *arena, SubstanceNucleicAcid_Subunit_Sugar *substanceNucleicAcid_Subunit_Sugar)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceNucleicAcid_Subunit_Sugar->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Sugar->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceNucleicAcid_Subunit_Sugar->id.size, substanceNucleicAcid_Subunit_Sugar->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Sugar->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit_Sugar->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid_Subunit_Sugar->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Sugar->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceNucleicAcid_Subunit_Sugar->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceNucleicAcid_Subunit_Sugar->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Sugar->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceNucleicAcid_Subunit_Sugar->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Sugar->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", substanceNucleicAcid_Subunit_Sugar->name.size, substanceNucleicAcid_Subunit_Sugar->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceNucleicAcid_Subunit_Sugar->residueSite)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"residueSite\" : \"%.*s\"", substanceNucleicAcid_Subunit_Sugar->residueSite.size, substanceNucleicAcid_Subunit_Sugar->residueSite.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstancePolymer(Arena *arena, SubstancePolymer *substancePolymer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substancePolymer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substancePolymer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substancePolymer->id.size, substancePolymer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, substancePolymer->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", substancePolymer->implicitRules.size, substancePolymer->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", substancePolymer->language.size, substancePolymer->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, substancePolymer->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &substancePolymer->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer->class_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer->class_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer->geometry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer->geometry);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer->copolymerConnectivity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer->copolymerConnectivity_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &substancePolymer->copolymerConnectivity[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer->modification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer->modification_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"modification\" : \"%.*s\"", &substancePolymer->modification[i].size, &substancePolymer->modification[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer->monomerSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer->monomerSet_count; i++)
		{
			String8 to_add = Serialize_SubstancePolymer_MonomerSet(arena, &substancePolymer->monomerSet[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer->repeat)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer->repeat_count; i++)
		{
			String8 to_add = Serialize_SubstancePolymer_Repeat(arena, &substancePolymer->repeat[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstancePolymer_MonomerSet(Arena *arena, SubstancePolymer_MonomerSet *substancePolymer_MonomerSet)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substancePolymer_MonomerSet->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substancePolymer_MonomerSet->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substancePolymer_MonomerSet->id.size, substancePolymer_MonomerSet->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_MonomerSet->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_MonomerSet->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_MonomerSet->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_MonomerSet->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_MonomerSet->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_MonomerSet->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_MonomerSet->ratioType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer_MonomerSet->ratioType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_MonomerSet->startingMaterial)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_MonomerSet->startingMaterial_count; i++)
		{
			String8 to_add = Serialize_SubstancePolymer_MonomerSet_StartingMaterial(arena, &substancePolymer_MonomerSet->startingMaterial[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstancePolymer_MonomerSet_StartingMaterial(Arena *arena, SubstancePolymer_MonomerSet_StartingMaterial *substancePolymer_MonomerSet_StartingMaterial)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substancePolymer_MonomerSet_StartingMaterial->id.size, substancePolymer_MonomerSet_StartingMaterial->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_MonomerSet_StartingMaterial->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_MonomerSet_StartingMaterial->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_MonomerSet_StartingMaterial->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_MonomerSet_StartingMaterial->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->material)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer_MonomerSet_StartingMaterial->material);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer_MonomerSet_StartingMaterial->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->isDefining)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isDefining\" : \"%.*s\"", substancePolymer_MonomerSet_StartingMaterial->isDefining ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_MonomerSet_StartingMaterial->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceAmount(arena, substancePolymer_MonomerSet_StartingMaterial->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstancePolymer_Repeat(Arena *arena, SubstancePolymer_Repeat *substancePolymer_Repeat)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substancePolymer_Repeat->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substancePolymer_Repeat->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substancePolymer_Repeat->id.size, substancePolymer_Repeat->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat->numberOfUnits)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, substancePolymer_Repeat->numberOfUnits);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat->averageMolecularFormula)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"averageMolecularFormula\" : \"%.*s\"", substancePolymer_Repeat->averageMolecularFormula.size, substancePolymer_Repeat->averageMolecularFormula.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat->repeatUnitAmountType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer_Repeat->repeatUnitAmountType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat->repeatUnit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat->repeatUnit_count; i++)
		{
			String8 to_add = Serialize_SubstancePolymer_Repeat_RepeatUnit(arena, &substancePolymer_Repeat->repeatUnit[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstancePolymer_Repeat_RepeatUnit(Arena *arena, SubstancePolymer_Repeat_RepeatUnit *substancePolymer_Repeat_RepeatUnit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substancePolymer_Repeat_RepeatUnit->id.size, substancePolymer_Repeat_RepeatUnit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat_RepeatUnit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat_RepeatUnit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->orientationOfPolymerisation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer_Repeat_RepeatUnit->orientationOfPolymerisation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->repeatUnit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"repeatUnit\" : \"%.*s\"", substancePolymer_Repeat_RepeatUnit->repeatUnit.size, substancePolymer_Repeat_RepeatUnit->repeatUnit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceAmount(arena, substancePolymer_Repeat_RepeatUnit->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation_count; i++)
		{
			String8 to_add = Serialize_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation(arena, &substancePolymer_Repeat_RepeatUnit->degreeOfPolymerisation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit->structuralRepresentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit->structuralRepresentation_count; i++)
		{
			String8 to_add = Serialize_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation(arena, &substancePolymer_Repeat_RepeatUnit->structuralRepresentation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation(Arena *arena, SubstancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation *substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->id.size, substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->degree)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->degree);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceAmount(arena, substancePolymer_Repeat_RepeatUnit_DegreeOfPolymerisation->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation(Arena *arena, SubstancePolymer_Repeat_RepeatUnit_StructuralRepresentation *substancePolymer_Repeat_RepeatUnit_StructuralRepresentation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->id.size, substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->representation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"representation\" : \"%.*s\"", substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->representation.size, substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->representation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->attachment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, substancePolymer_Repeat_RepeatUnit_StructuralRepresentation->attachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceProtein(Arena *arena, SubstanceProtein *substanceProtein)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceProtein->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceProtein->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceProtein->id.size, substanceProtein->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, substanceProtein->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", substanceProtein->implicitRules.size, substanceProtein->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", substanceProtein->language.size, substanceProtein->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, substanceProtein->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceProtein->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &substanceProtein->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceProtein->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceProtein->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceProtein->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceProtein->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceProtein->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceProtein->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceProtein->sequenceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceProtein->sequenceType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein->numberOfSubunits)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, substanceProtein->numberOfSubunits);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein->disulfideLinkage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceProtein->disulfideLinkage_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"disulfideLinkage\" : \"%.*s\"", &substanceProtein->disulfideLinkage[i].size, &substanceProtein->disulfideLinkage[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceProtein->subunit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceProtein->subunit_count; i++)
		{
			String8 to_add = Serialize_SubstanceProtein_Subunit(arena, &substanceProtein->subunit[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceProtein_Subunit(Arena *arena, SubstanceProtein_Subunit *substanceProtein_Subunit)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceProtein_Subunit->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceProtein_Subunit->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceProtein_Subunit->id.size, substanceProtein_Subunit->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceProtein_Subunit->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceProtein_Subunit->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceProtein_Subunit->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceProtein_Subunit->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceProtein_Subunit->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceProtein_Subunit->subunit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, substanceProtein_Subunit->subunit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sequence\" : \"%.*s\"", substanceProtein_Subunit->sequence.size, substanceProtein_Subunit->sequence.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->length)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, substanceProtein_Subunit->length);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->sequenceAttachment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, substanceProtein_Subunit->sequenceAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->nTerminalModificationId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceProtein_Subunit->nTerminalModificationId);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->nTerminalModification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"nTerminalModification\" : \"%.*s\"", substanceProtein_Subunit->nTerminalModification.size, substanceProtein_Subunit->nTerminalModification.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->cTerminalModificationId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceProtein_Subunit->cTerminalModificationId);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceProtein_Subunit->cTerminalModification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"cTerminalModification\" : \"%.*s\"", substanceProtein_Subunit->cTerminalModification.size, substanceProtein_Subunit->cTerminalModification.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceReferenceInformation(Arena *arena, SubstanceReferenceInformation *substanceReferenceInformation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceReferenceInformation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceReferenceInformation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceReferenceInformation->id.size, substanceReferenceInformation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, substanceReferenceInformation->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", substanceReferenceInformation->implicitRules.size, substanceReferenceInformation->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", substanceReferenceInformation->language.size, substanceReferenceInformation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, substanceReferenceInformation->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &substanceReferenceInformation->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", substanceReferenceInformation->comment.size, substanceReferenceInformation->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation->gene)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation->gene_count; i++)
		{
			String8 to_add = Serialize_SubstanceReferenceInformation_Gene(arena, &substanceReferenceInformation->gene[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation->geneElement)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation->geneElement_count; i++)
		{
			String8 to_add = Serialize_SubstanceReferenceInformation_GeneElement(arena, &substanceReferenceInformation->geneElement[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation->classification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation->classification_count; i++)
		{
			String8 to_add = Serialize_SubstanceReferenceInformation_Classification(arena, &substanceReferenceInformation->classification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation->target_count; i++)
		{
			String8 to_add = Serialize_SubstanceReferenceInformation_Target(arena, &substanceReferenceInformation->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceReferenceInformation_Gene(Arena *arena, SubstanceReferenceInformation_Gene *substanceReferenceInformation_Gene)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceReferenceInformation_Gene->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Gene->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceReferenceInformation_Gene->id.size, substanceReferenceInformation_Gene->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Gene->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Gene->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_Gene->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Gene->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Gene->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_Gene->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Gene->geneSequenceOrigin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Gene->geneSequenceOrigin);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Gene->gene)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Gene->gene);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Gene->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Gene->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceReferenceInformation_Gene->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceReferenceInformation_GeneElement(Arena *arena, SubstanceReferenceInformation_GeneElement *substanceReferenceInformation_GeneElement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceReferenceInformation_GeneElement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceReferenceInformation_GeneElement->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceReferenceInformation_GeneElement->id.size, substanceReferenceInformation_GeneElement->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_GeneElement->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_GeneElement->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_GeneElement->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_GeneElement->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_GeneElement->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_GeneElement->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_GeneElement->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_GeneElement->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_GeneElement->element)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceReferenceInformation_GeneElement->element);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_GeneElement->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_GeneElement->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceReferenceInformation_GeneElement->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceReferenceInformation_Classification(Arena *arena, SubstanceReferenceInformation_Classification *substanceReferenceInformation_Classification)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceReferenceInformation_Classification->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Classification->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceReferenceInformation_Classification->id.size, substanceReferenceInformation_Classification->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Classification->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Classification->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_Classification->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Classification->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Classification->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_Classification->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Classification->domain)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Classification->domain);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Classification->classification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Classification->classification);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Classification->subtype)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Classification->subtype_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &substanceReferenceInformation_Classification->subtype[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Classification->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Classification->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceReferenceInformation_Classification->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceReferenceInformation_Target(Arena *arena, SubstanceReferenceInformation_Target *substanceReferenceInformation_Target)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceReferenceInformation_Target->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Target->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceReferenceInformation_Target->id.size, substanceReferenceInformation_Target->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Target->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Target->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_Target->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Target->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Target->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceReferenceInformation_Target->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceReferenceInformation_Target->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceReferenceInformation_Target->target);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Target->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Target->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Target->interaction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Target->interaction);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Target->organism)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Target->organism);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Target->organismType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Target->organismType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substanceReferenceInformation_Target->amount_type == SubstanceReferenceInformation_Target::AmountType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, substanceReferenceInformation_Target->amount.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceReferenceInformation_Target->amount_type == SubstanceReferenceInformation_Target::AmountType::Range)	
	{
			String8 to_add = Serialize_Range(arena, substanceReferenceInformation_Target->amount.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceReferenceInformation_Target->amount_type == SubstanceReferenceInformation_Target::AmountType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", substanceReferenceInformation_Target->amount.valueString.size, substanceReferenceInformation_Target->amount.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&substanceReferenceInformation_Target->amountType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceReferenceInformation_Target->amountType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceReferenceInformation_Target->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceReferenceInformation_Target->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceReferenceInformation_Target->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSourceMaterial(Arena *arena, SubstanceSourceMaterial *substanceSourceMaterial)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSourceMaterial->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSourceMaterial->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSourceMaterial->id.size, substanceSourceMaterial->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, substanceSourceMaterial->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", substanceSourceMaterial->implicitRules.size, substanceSourceMaterial->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", substanceSourceMaterial->language.size, substanceSourceMaterial->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, substanceSourceMaterial->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &substanceSourceMaterial->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->sourceMaterialClass)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial->sourceMaterialClass);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->sourceMaterialType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial->sourceMaterialType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->sourceMaterialState)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial->sourceMaterialState);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->organismId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceSourceMaterial->organismId);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->organismName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"organismName\" : \"%.*s\"", substanceSourceMaterial->organismName.size, substanceSourceMaterial->organismName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->parentSubstanceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->parentSubstanceId_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &substanceSourceMaterial->parentSubstanceId[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->parentSubstanceName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->parentSubstanceName_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"parentSubstanceName\" : \"%.*s\"", &substanceSourceMaterial->parentSubstanceName[i].size, &substanceSourceMaterial->parentSubstanceName[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->countryOfOrigin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->countryOfOrigin_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &substanceSourceMaterial->countryOfOrigin[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->geographicalLocation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->geographicalLocation_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"geographicalLocation\" : \"%.*s\"", &substanceSourceMaterial->geographicalLocation[i].size, &substanceSourceMaterial->geographicalLocation[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->developmentStage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial->developmentStage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->fractionDescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->fractionDescription_count; i++)
		{
			String8 to_add = Serialize_SubstanceSourceMaterial_FractionDescription(arena, &substanceSourceMaterial->fractionDescription[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial->organism)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceSourceMaterial_Organism(arena, substanceSourceMaterial->organism);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial->partDescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial->partDescription_count; i++)
		{
			String8 to_add = Serialize_SubstanceSourceMaterial_PartDescription(arena, &substanceSourceMaterial->partDescription[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSourceMaterial_FractionDescription(Arena *arena, SubstanceSourceMaterial_FractionDescription *substanceSourceMaterial_FractionDescription)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSourceMaterial_FractionDescription->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSourceMaterial_FractionDescription->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSourceMaterial_FractionDescription->id.size, substanceSourceMaterial_FractionDescription->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_FractionDescription->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_FractionDescription->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_FractionDescription->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_FractionDescription->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_FractionDescription->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_FractionDescription->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_FractionDescription->fraction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"fraction\" : \"%.*s\"", substanceSourceMaterial_FractionDescription->fraction.size, substanceSourceMaterial_FractionDescription->fraction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_FractionDescription->materialType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_FractionDescription->materialType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSourceMaterial_Organism(Arena *arena, SubstanceSourceMaterial_Organism *substanceSourceMaterial_Organism)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSourceMaterial_Organism->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSourceMaterial_Organism->id.size, substanceSourceMaterial_Organism->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->family)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism->family);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->genus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism->genus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->species)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism->species);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->intraspecificType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism->intraspecificType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->intraspecificDescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intraspecificDescription\" : \"%.*s\"", substanceSourceMaterial_Organism->intraspecificDescription.size, substanceSourceMaterial_Organism->intraspecificDescription.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->author)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism->author_count; i++)
		{
			String8 to_add = Serialize_SubstanceSourceMaterial_Organism_Author(arena, &substanceSourceMaterial_Organism->author[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->hybrid)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceSourceMaterial_Organism_Hybrid(arena, substanceSourceMaterial_Organism->hybrid);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism->organismGeneral)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceSourceMaterial_Organism_OrganismGeneral(arena, substanceSourceMaterial_Organism->organismGeneral);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSourceMaterial_Organism_Author(Arena *arena, SubstanceSourceMaterial_Organism_Author *substanceSourceMaterial_Organism_Author)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSourceMaterial_Organism_Author->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Author->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSourceMaterial_Organism_Author->id.size, substanceSourceMaterial_Organism_Author->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Author->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism_Author->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism_Author->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Author->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism_Author->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism_Author->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Author->authorType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism_Author->authorType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Author->authorDescription)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authorDescription\" : \"%.*s\"", substanceSourceMaterial_Organism_Author->authorDescription.size, substanceSourceMaterial_Organism_Author->authorDescription.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSourceMaterial_Organism_Hybrid(Arena *arena, SubstanceSourceMaterial_Organism_Hybrid *substanceSourceMaterial_Organism_Hybrid)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSourceMaterial_Organism_Hybrid->id.size, substanceSourceMaterial_Organism_Hybrid->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism_Hybrid->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism_Hybrid->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism_Hybrid->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism_Hybrid->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->maternalOrganismId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"maternalOrganismId\" : \"%.*s\"", substanceSourceMaterial_Organism_Hybrid->maternalOrganismId.size, substanceSourceMaterial_Organism_Hybrid->maternalOrganismId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->maternalOrganismName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"maternalOrganismName\" : \"%.*s\"", substanceSourceMaterial_Organism_Hybrid->maternalOrganismName.size, substanceSourceMaterial_Organism_Hybrid->maternalOrganismName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->paternalOrganismId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"paternalOrganismId\" : \"%.*s\"", substanceSourceMaterial_Organism_Hybrid->paternalOrganismId.size, substanceSourceMaterial_Organism_Hybrid->paternalOrganismId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->paternalOrganismName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"paternalOrganismName\" : \"%.*s\"", substanceSourceMaterial_Organism_Hybrid->paternalOrganismName.size, substanceSourceMaterial_Organism_Hybrid->paternalOrganismName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_Hybrid->hybridType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism_Hybrid->hybridType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSourceMaterial_Organism_OrganismGeneral(Arena *arena, SubstanceSourceMaterial_Organism_OrganismGeneral *substanceSourceMaterial_Organism_OrganismGeneral)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSourceMaterial_Organism_OrganismGeneral->id.size, substanceSourceMaterial_Organism_OrganismGeneral->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism_OrganismGeneral->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism_OrganismGeneral->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_Organism_OrganismGeneral->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_Organism_OrganismGeneral->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->kingdom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism_OrganismGeneral->kingdom);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->phylum)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism_OrganismGeneral->phylum);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->class_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism_OrganismGeneral->class_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_Organism_OrganismGeneral->order)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_Organism_OrganismGeneral->order);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSourceMaterial_PartDescription(Arena *arena, SubstanceSourceMaterial_PartDescription *substanceSourceMaterial_PartDescription)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSourceMaterial_PartDescription->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSourceMaterial_PartDescription->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSourceMaterial_PartDescription->id.size, substanceSourceMaterial_PartDescription->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_PartDescription->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_PartDescription->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_PartDescription->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_PartDescription->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSourceMaterial_PartDescription->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSourceMaterial_PartDescription->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSourceMaterial_PartDescription->part)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_PartDescription->part);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSourceMaterial_PartDescription->partLocation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSourceMaterial_PartDescription->partLocation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification(Arena *arena, SubstanceSpecification *substanceSpecification)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification->id.size, substanceSpecification->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, substanceSpecification->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", substanceSpecification->implicitRules.size, substanceSpecification->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", substanceSpecification->language.size, substanceSpecification->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, substanceSpecification->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &substanceSpecification->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceSpecification->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->domain)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification->domain);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", substanceSpecification->description.size, substanceSpecification->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceSpecification->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", substanceSpecification->comment.size, substanceSpecification->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->moiety)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->moiety_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Moiety(arena, &substanceSpecification->moiety[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->property_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Property(arena, &substanceSpecification->property[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->referenceInformation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, substanceSpecification->referenceInformation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->structure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceSpecification_Structure(arena, substanceSpecification->structure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->code_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Code(arena, &substanceSpecification->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->name_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Name(arena, &substanceSpecification->name[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->molecularWeight)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->molecularWeight_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, &substanceSpecification->molecularWeight[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification->relationship_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Relationship(arena, &substanceSpecification->relationship[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification->nucleicAcid)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, substanceSpecification->nucleicAcid);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->polymer)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, substanceSpecification->polymer);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->protein)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, substanceSpecification->protein);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification->sourceMaterial)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, substanceSpecification->sourceMaterial);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Moiety(Arena *arena, SubstanceSpecification_Moiety *substanceSpecification_Moiety)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Moiety->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Moiety->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Moiety->id.size, substanceSpecification_Moiety->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Moiety->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Moiety->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Moiety->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Moiety->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Moiety->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Moiety->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Moiety->role)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Moiety->role);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Moiety->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceSpecification_Moiety->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Moiety->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", substanceSpecification_Moiety->name.size, substanceSpecification_Moiety->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Moiety->stereochemistry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Moiety->stereochemistry);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Moiety->opticalActivity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Moiety->opticalActivity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Moiety->molecularFormula)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"molecularFormula\" : \"%.*s\"", substanceSpecification_Moiety->molecularFormula.size, substanceSpecification_Moiety->molecularFormula.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substanceSpecification_Moiety->amount_type == SubstanceSpecification_Moiety::AmountType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, substanceSpecification_Moiety->amount.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceSpecification_Moiety->amount_type == SubstanceSpecification_Moiety::AmountType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", substanceSpecification_Moiety->amount.valueString.size, substanceSpecification_Moiety->amount.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Property(Arena *arena, SubstanceSpecification_Property *substanceSpecification_Property)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Property->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Property->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Property->id.size, substanceSpecification_Property->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Property->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Property->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Property->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Property->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Property->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Property->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Property->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Property->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Property->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Property->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Property->parameters)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"parameters\" : \"%.*s\"", substanceSpecification_Property->parameters.size, substanceSpecification_Property->parameters.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substanceSpecification_Property->definingSubstance_type == SubstanceSpecification_Property::DefiningSubstanceType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, substanceSpecification_Property->definingSubstance.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceSpecification_Property->definingSubstance_type == SubstanceSpecification_Property::DefiningSubstanceType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Property->definingSubstance.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substanceSpecification_Property->amount_type == SubstanceSpecification_Property::AmountType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, substanceSpecification_Property->amount.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceSpecification_Property->amount_type == SubstanceSpecification_Property::AmountType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", substanceSpecification_Property->amount.valueString.size, substanceSpecification_Property->amount.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Structure(Arena *arena, SubstanceSpecification_Structure *substanceSpecification_Structure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Structure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Structure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Structure->id.size, substanceSpecification_Structure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure->stereochemistry)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Structure->stereochemistry);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure->opticalActivity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Structure->opticalActivity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure->molecularFormula)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"molecularFormula\" : \"%.*s\"", substanceSpecification_Structure->molecularFormula.size, substanceSpecification_Structure->molecularFormula.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure->molecularFormulaByMoiety)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"molecularFormulaByMoiety\" : \"%.*s\"", substanceSpecification_Structure->molecularFormulaByMoiety.size, substanceSpecification_Structure->molecularFormulaByMoiety.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure->isotope)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure->isotope_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Structure_Isotope(arena, &substanceSpecification_Structure->isotope[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure->molecularWeight)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, substanceSpecification_Structure->molecularWeight);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceSpecification_Structure->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure->representation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure->representation_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Structure_Representation(arena, &substanceSpecification_Structure->representation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Structure_Isotope(Arena *arena, SubstanceSpecification_Structure_Isotope *substanceSpecification_Structure_Isotope)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Structure_Isotope->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Structure_Isotope->id.size, substanceSpecification_Structure_Isotope->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure_Isotope->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure_Isotope->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure_Isotope->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure_Isotope->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, substanceSpecification_Structure_Isotope->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Structure_Isotope->name);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->substitution)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Structure_Isotope->substitution);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->halfLife)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, substanceSpecification_Structure_Isotope->halfLife);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope->molecularWeight)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(arena, substanceSpecification_Structure_Isotope->molecularWeight);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Structure_Isotope_MolecularWeight(Arena *arena, SubstanceSpecification_Structure_Isotope_MolecularWeight *substanceSpecification_Structure_Isotope_MolecularWeight)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Structure_Isotope_MolecularWeight->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope_MolecularWeight->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Structure_Isotope_MolecularWeight->id.size, substanceSpecification_Structure_Isotope_MolecularWeight->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope_MolecularWeight->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure_Isotope_MolecularWeight->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure_Isotope_MolecularWeight->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure_Isotope_MolecularWeight->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope_MolecularWeight->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Structure_Isotope_MolecularWeight->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope_MolecularWeight->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Structure_Isotope_MolecularWeight->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Isotope_MolecularWeight->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, substanceSpecification_Structure_Isotope_MolecularWeight->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Structure_Representation(Arena *arena, SubstanceSpecification_Structure_Representation *substanceSpecification_Structure_Representation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Structure_Representation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Representation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Structure_Representation->id.size, substanceSpecification_Structure_Representation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Representation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure_Representation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure_Representation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Representation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Structure_Representation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Structure_Representation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Structure_Representation->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Structure_Representation->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Representation->representation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"representation\" : \"%.*s\"", substanceSpecification_Structure_Representation->representation.size, substanceSpecification_Structure_Representation->representation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Structure_Representation->attachment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, substanceSpecification_Structure_Representation->attachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Code(Arena *arena, SubstanceSpecification_Code *substanceSpecification_Code)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Code->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Code->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Code->id.size, substanceSpecification_Code->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Code->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Code->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Code->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Code->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Code->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Code->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Code->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Code->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Code->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Code->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Code->statusDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"statusDate\" : \"%.*s\"", substanceSpecification_Code->statusDate.size, substanceSpecification_Code->statusDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Code->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", substanceSpecification_Code->comment.size, substanceSpecification_Code->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Code->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Code->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceSpecification_Code->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Name(Arena *arena, SubstanceSpecification_Name *substanceSpecification_Name)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Name->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Name->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Name->id.size, substanceSpecification_Name->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Name->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Name->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", substanceSpecification_Name->name.size, substanceSpecification_Name->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Name->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Name->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name->preferred)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"preferred\" : \"%.*s\"", substanceSpecification_Name->preferred ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->language_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &substanceSpecification_Name->language[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->domain)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->domain_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &substanceSpecification_Name->domain[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &substanceSpecification_Name->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->synonym)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->synonym_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Name(arena, &substanceSpecification_Name->synonym[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->translation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->translation_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Name(arena, &substanceSpecification_Name->translation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->official)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->official_count; i++)
		{
			String8 to_add = Serialize_SubstanceSpecification_Name_Official(arena, &substanceSpecification_Name->official[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceSpecification_Name->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Name_Official(Arena *arena, SubstanceSpecification_Name_Official *substanceSpecification_Name_Official)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Name_Official->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Name_Official->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Name_Official->id.size, substanceSpecification_Name_Official->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name_Official->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name_Official->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Name_Official->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name_Official->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Name_Official->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Name_Official->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Name_Official->authority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Name_Official->authority);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name_Official->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Name_Official->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Name_Official->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", substanceSpecification_Name_Official->date.size, substanceSpecification_Name_Official->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceSpecification_Relationship(Arena *arena, SubstanceSpecification_Relationship *substanceSpecification_Relationship)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceSpecification_Relationship->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceSpecification_Relationship->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceSpecification_Relationship->id.size, substanceSpecification_Relationship->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Relationship->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Relationship->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Relationship->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceSpecification_Relationship->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Relationship->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceSpecification_Relationship->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substanceSpecification_Relationship->substance_type == SubstanceSpecification_Relationship::SubstanceType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, substanceSpecification_Relationship->substance.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceSpecification_Relationship->substance_type == SubstanceSpecification_Relationship::SubstanceType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Relationship->substance.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&substanceSpecification_Relationship->relationship)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Relationship->relationship);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Relationship->isDefining)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isDefining\" : \"%.*s\"", substanceSpecification_Relationship->isDefining ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substanceSpecification_Relationship->amount_type == SubstanceSpecification_Relationship::AmountType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, substanceSpecification_Relationship->amount.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceSpecification_Relationship->amount_type == SubstanceSpecification_Relationship::AmountType::Range)	
	{
			String8 to_add = Serialize_Range(arena, substanceSpecification_Relationship->amount.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceSpecification_Relationship->amount_type == SubstanceSpecification_Relationship::AmountType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, substanceSpecification_Relationship->amount.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceSpecification_Relationship->amount_type == SubstanceSpecification_Relationship::AmountType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", substanceSpecification_Relationship->amount.valueString.size, substanceSpecification_Relationship->amount.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&substanceSpecification_Relationship->amountRatioLowLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, substanceSpecification_Relationship->amountRatioLowLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Relationship->amountType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceSpecification_Relationship->amountType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceSpecification_Relationship->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceSpecification_Relationship->source_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &substanceSpecification_Relationship->source[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SupplyDelivery(Arena *arena, SupplyDelivery *supplyDelivery)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&supplyDelivery->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&supplyDelivery->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", supplyDelivery->id.size, supplyDelivery->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, supplyDelivery->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", supplyDelivery->implicitRules.size, supplyDelivery->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", supplyDelivery->language.size, supplyDelivery->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, supplyDelivery->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &supplyDelivery->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyDelivery->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyDelivery->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &supplyDelivery->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &supplyDelivery->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &supplyDelivery->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", supplyDelivery->status.size, supplyDelivery->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, supplyDelivery->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, supplyDelivery->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->suppliedItem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SupplyDelivery_SuppliedItem(arena, supplyDelivery->suppliedItem);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(supplyDelivery->occurrence_type == SupplyDelivery::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", supplyDelivery->occurrence.valueDateTime.size, supplyDelivery->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyDelivery->occurrence_type == SupplyDelivery::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, supplyDelivery->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyDelivery->occurrence_type == SupplyDelivery::OccurrenceType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, supplyDelivery->occurrence.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&supplyDelivery->supplier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, supplyDelivery->supplier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->destination)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, supplyDelivery->destination);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery->receiver)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery->receiver_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &supplyDelivery->receiver[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SupplyDelivery_SuppliedItem(Arena *arena, SupplyDelivery_SuppliedItem *supplyDelivery_SuppliedItem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&supplyDelivery_SuppliedItem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&supplyDelivery_SuppliedItem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", supplyDelivery_SuppliedItem->id.size, supplyDelivery_SuppliedItem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyDelivery_SuppliedItem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery_SuppliedItem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyDelivery_SuppliedItem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery_SuppliedItem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyDelivery_SuppliedItem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyDelivery_SuppliedItem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyDelivery_SuppliedItem->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, supplyDelivery_SuppliedItem->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(supplyDelivery_SuppliedItem->item_type == SupplyDelivery_SuppliedItem::ItemType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, supplyDelivery_SuppliedItem->item.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyDelivery_SuppliedItem->item_type == SupplyDelivery_SuppliedItem::ItemType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, supplyDelivery_SuppliedItem->item.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SupplyRequest(Arena *arena, SupplyRequest *supplyRequest)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&supplyRequest->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&supplyRequest->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", supplyRequest->id.size, supplyRequest->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, supplyRequest->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", supplyRequest->implicitRules.size, supplyRequest->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", supplyRequest->language.size, supplyRequest->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, supplyRequest->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &supplyRequest->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyRequest->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyRequest->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &supplyRequest->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", supplyRequest->status.size, supplyRequest->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->category)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, supplyRequest->category);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", supplyRequest->priority.size, supplyRequest->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(supplyRequest->item_type == SupplyRequest::ItemType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, supplyRequest->item.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyRequest->item_type == SupplyRequest::ItemType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, supplyRequest->item.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&supplyRequest->quantity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, supplyRequest->quantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->parameter_count; i++)
		{
			String8 to_add = Serialize_SupplyRequest_Parameter(arena, &supplyRequest->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(supplyRequest->occurrence_type == SupplyRequest::OccurrenceType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", supplyRequest->occurrence.valueDateTime.size, supplyRequest->occurrence.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyRequest->occurrence_type == SupplyRequest::OccurrenceType::Period)	
	{
			String8 to_add = Serialize_Period(arena, supplyRequest->occurrence.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyRequest->occurrence_type == SupplyRequest::OccurrenceType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, supplyRequest->occurrence.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&supplyRequest->authoredOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authoredOn\" : \"%.*s\"", supplyRequest->authoredOn.size, supplyRequest->authoredOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->requester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, supplyRequest->requester);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->supplier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->supplier_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &supplyRequest->supplier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->reasonCode_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &supplyRequest->reasonCode[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest->reasonReference_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &supplyRequest->reasonReference[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest->deliverFrom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, supplyRequest->deliverFrom);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest->deliverTo)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, supplyRequest->deliverTo);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SupplyRequest_Parameter(Arena *arena, SupplyRequest_Parameter *supplyRequest_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&supplyRequest_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&supplyRequest_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", supplyRequest_Parameter->id.size, supplyRequest_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&supplyRequest_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyRequest_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < supplyRequest_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &supplyRequest_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&supplyRequest_Parameter->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, supplyRequest_Parameter->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(supplyRequest_Parameter->value_type == SupplyRequest_Parameter::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, supplyRequest_Parameter->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyRequest_Parameter->value_type == SupplyRequest_Parameter::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, supplyRequest_Parameter->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyRequest_Parameter->value_type == SupplyRequest_Parameter::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, supplyRequest_Parameter->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(supplyRequest_Parameter->value_type == SupplyRequest_Parameter::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", supplyRequest_Parameter->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Task(Arena *arena, Task *task)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&task->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&task->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", task->id.size, task->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, task->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", task->implicitRules.size, task->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", task->language.size, task->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, task->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &task->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &task->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->instantiatesCanonical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesCanonical\" : \"%.*s\"", task->instantiatesCanonical.size, task->instantiatesCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->instantiatesUri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"instantiatesUri\" : \"%.*s\"", task->instantiatesUri.size, task->instantiatesUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->basedOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->basedOn_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &task->basedOn[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->groupIdentifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, task->groupIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->partOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->partOf_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &task->partOf[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", task->status.size, task->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->statusReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, task->statusReason);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->businessStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, task->businessStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->intent)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"intent\" : \"%.*s\"", task->intent.size, task->intent.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->priority)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"priority\" : \"%.*s\"", task->priority.size, task->priority.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, task->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", task->description.size, task->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->focus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, task->focus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->for_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, task->for_);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, task->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->executionPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, task->executionPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->authoredOn)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"authoredOn\" : \"%.*s\"", task->authoredOn.size, task->authoredOn.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->lastModified)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastModified\" : \"%.*s\"", task->lastModified.size, task->lastModified.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->requester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, task->requester);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->performerType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->performerType_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &task->performerType[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->owner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, task->owner);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->location)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, task->location);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->reasonCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, task->reasonCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->reasonReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, task->reasonReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->insurance)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->insurance_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &task->insurance[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &task->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->relevantHistory)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->relevantHistory_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &task->relevantHistory[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->restriction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Task_Restriction(arena, task->restriction);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task->input)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->input_count; i++)
		{
			String8 to_add = Serialize_Task_Input(arena, &task->input[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task->output)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task->output_count; i++)
		{
			String8 to_add = Serialize_Task_Output(arena, &task->output[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Task_Restriction(Arena *arena, Task_Restriction *task_Restriction)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&task_Restriction->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&task_Restriction->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", task_Restriction->id.size, task_Restriction->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task_Restriction->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task_Restriction->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task_Restriction->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task_Restriction->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task_Restriction->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task_Restriction->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task_Restriction->repetitions)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"repetitions\" : \"%d\"", task_Restriction->repetitions);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task_Restriction->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, task_Restriction->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task_Restriction->recipient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task_Restriction->recipient_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &task_Restriction->recipient[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Task_Input(Arena *arena, Task_Input *task_Input)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&task_Input->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&task_Input->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", task_Input->id.size, task_Input->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task_Input->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task_Input->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task_Input->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task_Input->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task_Input->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task_Input->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task_Input->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, task_Input->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(task_Input->value_type == Task_Input::ValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", task_Input->value.valueBase64Binary.size, task_Input->value.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", task_Input->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", task_Input->value.valueCanonical.size, task_Input->value.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", task_Input->value.valueCode.size, task_Input->value.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", task_Input->value.valueDate.size, task_Input->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", task_Input->value.valueDateTime.size, task_Input->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", task_Input->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", task_Input->value.valueId.size, task_Input->value.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", task_Input->value.valueInstant.size, task_Input->value.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, task_Input->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", task_Input->value.valueMarkdown.size, task_Input->value.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", task_Input->value.valueOid.size, task_Input->value.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", task_Input->value.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", task_Input->value.valueString.size, task_Input->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", task_Input->value.valueTime.size, task_Input->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", task_Input->value.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", task_Input->value.valueUri.size, task_Input->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", task_Input->value.valueUrl.size, task_Input->value.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", task_Input->value.valueUuid.size, task_Input->value.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Address)	
	{
			String8 to_add = Serialize_Address(arena, task_Input->value.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Age)	
	{
			String8 to_add = Serialize_Age(arena, task_Input->value.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, task_Input->value.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, task_Input->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, task_Input->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, task_Input->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, task_Input->value.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Count)	
	{
			String8 to_add = Serialize_Count(arena, task_Input->value.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, task_Input->value.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, task_Input->value.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, task_Input->value.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, task_Input->value.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, task_Input->value.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, task_Input->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, task_Input->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, task_Input->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, task_Input->value.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, task_Input->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, task_Input->value.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, task_Input->value.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, task_Input->value.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, task_Input->value.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, task_Input->value.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, task_Input->value.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, task_Input->value.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, task_Input->value.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, task_Input->value.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, task_Input->value.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, task_Input->value.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, task_Input->value.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Input->value_type == Task_Input::ValueType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, task_Input->value.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Task_Output(Arena *arena, Task_Output *task_Output)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&task_Output->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&task_Output->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", task_Output->id.size, task_Output->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&task_Output->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task_Output->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task_Output->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task_Output->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < task_Output->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &task_Output->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&task_Output->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, task_Output->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(task_Output->value_type == Task_Output::ValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", task_Output->value.valueBase64Binary.size, task_Output->value.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", task_Output->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", task_Output->value.valueCanonical.size, task_Output->value.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", task_Output->value.valueCode.size, task_Output->value.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", task_Output->value.valueDate.size, task_Output->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", task_Output->value.valueDateTime.size, task_Output->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", task_Output->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", task_Output->value.valueId.size, task_Output->value.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", task_Output->value.valueInstant.size, task_Output->value.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, task_Output->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", task_Output->value.valueMarkdown.size, task_Output->value.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", task_Output->value.valueOid.size, task_Output->value.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", task_Output->value.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", task_Output->value.valueString.size, task_Output->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", task_Output->value.valueTime.size, task_Output->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", task_Output->value.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", task_Output->value.valueUri.size, task_Output->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", task_Output->value.valueUrl.size, task_Output->value.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", task_Output->value.valueUuid.size, task_Output->value.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Address)	
	{
			String8 to_add = Serialize_Address(arena, task_Output->value.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Age)	
	{
			String8 to_add = Serialize_Age(arena, task_Output->value.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, task_Output->value.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, task_Output->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, task_Output->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, task_Output->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, task_Output->value.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Count)	
	{
			String8 to_add = Serialize_Count(arena, task_Output->value.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, task_Output->value.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, task_Output->value.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, task_Output->value.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, task_Output->value.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, task_Output->value.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, task_Output->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, task_Output->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, task_Output->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, task_Output->value.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, task_Output->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, task_Output->value.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, task_Output->value.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, task_Output->value.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, task_Output->value.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, task_Output->value.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, task_Output->value.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, task_Output->value.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, task_Output->value.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, task_Output->value.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, task_Output->value.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, task_Output->value.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, task_Output->value.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(task_Output->value_type == Task_Output::ValueType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, task_Output->value.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities(Arena *arena, TerminologyCapabilities *terminologyCapabilities)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities->id.size, terminologyCapabilities->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, terminologyCapabilities->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", terminologyCapabilities->implicitRules.size, terminologyCapabilities->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", terminologyCapabilities->language.size, terminologyCapabilities->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, terminologyCapabilities->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &terminologyCapabilities->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", terminologyCapabilities->url.size, terminologyCapabilities->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", terminologyCapabilities->version.size, terminologyCapabilities->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", terminologyCapabilities->name.size, terminologyCapabilities->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", terminologyCapabilities->title.size, terminologyCapabilities->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", terminologyCapabilities->status.size, terminologyCapabilities->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", terminologyCapabilities->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", terminologyCapabilities->date.size, terminologyCapabilities->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", terminologyCapabilities->publisher.size, terminologyCapabilities->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &terminologyCapabilities->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", terminologyCapabilities->description.size, terminologyCapabilities->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &terminologyCapabilities->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &terminologyCapabilities->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", terminologyCapabilities->purpose.size, terminologyCapabilities->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", terminologyCapabilities->copyright.size, terminologyCapabilities->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->kind)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"kind\" : \"%.*s\"", terminologyCapabilities->kind.size, terminologyCapabilities->kind.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->software)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TerminologyCapabilities_Software(arena, terminologyCapabilities->software);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->implementation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TerminologyCapabilities_Implementation(arena, terminologyCapabilities->implementation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->lockedDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lockedDate\" : \"%.*s\"", terminologyCapabilities->lockedDate ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->codeSystem)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities->codeSystem_count; i++)
		{
			String8 to_add = Serialize_TerminologyCapabilities_CodeSystem(arena, &terminologyCapabilities->codeSystem[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities->expansion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TerminologyCapabilities_Expansion(arena, terminologyCapabilities->expansion);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->codeSearch)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"codeSearch\" : \"%.*s\"", terminologyCapabilities->codeSearch.size, terminologyCapabilities->codeSearch.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->validateCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TerminologyCapabilities_ValidateCode(arena, terminologyCapabilities->validateCode);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->translation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TerminologyCapabilities_Translation(arena, terminologyCapabilities->translation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities->closure)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TerminologyCapabilities_Closure(arena, terminologyCapabilities->closure);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_Software(Arena *arena, TerminologyCapabilities_Software *terminologyCapabilities_Software)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_Software->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_Software->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_Software->id.size, terminologyCapabilities_Software->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Software->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Software->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Software->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Software->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Software->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Software->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Software->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", terminologyCapabilities_Software->name.size, terminologyCapabilities_Software->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Software->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", terminologyCapabilities_Software->version.size, terminologyCapabilities_Software->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_Implementation(Arena *arena, TerminologyCapabilities_Implementation *terminologyCapabilities_Implementation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_Implementation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_Implementation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_Implementation->id.size, terminologyCapabilities_Implementation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Implementation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Implementation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Implementation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Implementation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Implementation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Implementation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Implementation->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", terminologyCapabilities_Implementation->description.size, terminologyCapabilities_Implementation->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Implementation->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", terminologyCapabilities_Implementation->url.size, terminologyCapabilities_Implementation->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_CodeSystem(Arena *arena, TerminologyCapabilities_CodeSystem *terminologyCapabilities_CodeSystem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_CodeSystem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_CodeSystem->id.size, terminologyCapabilities_CodeSystem->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_CodeSystem->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_CodeSystem->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem->uri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uri\" : \"%.*s\"", terminologyCapabilities_CodeSystem->uri.size, terminologyCapabilities_CodeSystem->uri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem->version_count; i++)
		{
			String8 to_add = Serialize_TerminologyCapabilities_CodeSystem_Version(arena, &terminologyCapabilities_CodeSystem->version[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem->subsumption)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"subsumption\" : \"%.*s\"", terminologyCapabilities_CodeSystem->subsumption ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_CodeSystem_Version(Arena *arena, TerminologyCapabilities_CodeSystem_Version *terminologyCapabilities_CodeSystem_Version)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_CodeSystem_Version->id.size, terminologyCapabilities_CodeSystem_Version->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_CodeSystem_Version->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_CodeSystem_Version->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", terminologyCapabilities_CodeSystem_Version->code.size, terminologyCapabilities_CodeSystem_Version->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->isDefault)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isDefault\" : \"%.*s\"", terminologyCapabilities_CodeSystem_Version->isDefault ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->compositional)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"compositional\" : \"%.*s\"", terminologyCapabilities_CodeSystem_Version->compositional ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version->language_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", &terminologyCapabilities_CodeSystem_Version->language[i].size, &terminologyCapabilities_CodeSystem_Version->language[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->filter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version->filter_count; i++)
		{
			String8 to_add = Serialize_TerminologyCapabilities_CodeSystem_Version_Filter(arena, &terminologyCapabilities_CodeSystem_Version->filter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version->property_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"property\" : \"%.*s\"", &terminologyCapabilities_CodeSystem_Version->property[i].size, &terminologyCapabilities_CodeSystem_Version->property[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_CodeSystem_Version_Filter(Arena *arena, TerminologyCapabilities_CodeSystem_Version_Filter *terminologyCapabilities_CodeSystem_Version_Filter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version_Filter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version_Filter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_CodeSystem_Version_Filter->id.size, terminologyCapabilities_CodeSystem_Version_Filter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version_Filter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version_Filter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_CodeSystem_Version_Filter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version_Filter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version_Filter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_CodeSystem_Version_Filter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version_Filter->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", terminologyCapabilities_CodeSystem_Version_Filter->code.size, terminologyCapabilities_CodeSystem_Version_Filter->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_CodeSystem_Version_Filter->op)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_CodeSystem_Version_Filter->op_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"op\" : \"%.*s\"", &terminologyCapabilities_CodeSystem_Version_Filter->op[i].size, &terminologyCapabilities_CodeSystem_Version_Filter->op[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_Expansion(Arena *arena, TerminologyCapabilities_Expansion *terminologyCapabilities_Expansion)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_Expansion->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_Expansion->id.size, terminologyCapabilities_Expansion->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Expansion->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Expansion->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Expansion->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Expansion->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->hierarchical)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"hierarchical\" : \"%.*s\"", terminologyCapabilities_Expansion->hierarchical ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->paging)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"paging\" : \"%.*s\"", terminologyCapabilities_Expansion->paging ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->incomplete)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"incomplete\" : \"%.*s\"", terminologyCapabilities_Expansion->incomplete ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Expansion->parameter_count; i++)
		{
			String8 to_add = Serialize_TerminologyCapabilities_Expansion_Parameter(arena, &terminologyCapabilities_Expansion->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Expansion->textFilter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"textFilter\" : \"%.*s\"", terminologyCapabilities_Expansion->textFilter.size, terminologyCapabilities_Expansion->textFilter.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_Expansion_Parameter(Arena *arena, TerminologyCapabilities_Expansion_Parameter *terminologyCapabilities_Expansion_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_Expansion_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_Expansion_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_Expansion_Parameter->id.size, terminologyCapabilities_Expansion_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Expansion_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Expansion_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Expansion_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Expansion_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Expansion_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Expansion_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Expansion_Parameter->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", terminologyCapabilities_Expansion_Parameter->name.size, terminologyCapabilities_Expansion_Parameter->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Expansion_Parameter->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", terminologyCapabilities_Expansion_Parameter->documentation.size, terminologyCapabilities_Expansion_Parameter->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_ValidateCode(Arena *arena, TerminologyCapabilities_ValidateCode *terminologyCapabilities_ValidateCode)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_ValidateCode->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_ValidateCode->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_ValidateCode->id.size, terminologyCapabilities_ValidateCode->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_ValidateCode->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_ValidateCode->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_ValidateCode->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_ValidateCode->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_ValidateCode->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_ValidateCode->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_ValidateCode->translations)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"translations\" : \"%.*s\"", terminologyCapabilities_ValidateCode->translations ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_Translation(Arena *arena, TerminologyCapabilities_Translation *terminologyCapabilities_Translation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_Translation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_Translation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_Translation->id.size, terminologyCapabilities_Translation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Translation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Translation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Translation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Translation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Translation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Translation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Translation->needsMap)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"needsMap\" : \"%.*s\"", terminologyCapabilities_Translation->needsMap ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TerminologyCapabilities_Closure(Arena *arena, TerminologyCapabilities_Closure *terminologyCapabilities_Closure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&terminologyCapabilities_Closure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&terminologyCapabilities_Closure->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", terminologyCapabilities_Closure->id.size, terminologyCapabilities_Closure->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&terminologyCapabilities_Closure->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Closure->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Closure->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Closure->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < terminologyCapabilities_Closure->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &terminologyCapabilities_Closure->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&terminologyCapabilities_Closure->translation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"translation\" : \"%.*s\"", terminologyCapabilities_Closure->translation ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport(Arena *arena, TestReport *testReport)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport->id.size, testReport->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, testReport->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", testReport->implicitRules.size, testReport->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", testReport->language.size, testReport->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, testReport->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &testReport->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, testReport->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", testReport->name.size, testReport->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", testReport->status.size, testReport->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->testScript)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, testReport->testScript);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->result)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"result\" : \"%.*s\"", testReport->result.size, testReport->result.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->score)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"score\" : \"%d\"", testReport->score);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->tester)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"tester\" : \"%.*s\"", testReport->tester.size, testReport->tester.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->issued)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"issued\" : \"%.*s\"", testReport->issued.size, testReport->issued.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->participant)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport->participant_count; i++)
		{
			String8 to_add = Serialize_TestReport_Participant(arena, &testReport->participant[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport->setup)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestReport_Setup(arena, testReport->setup);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport->test)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport->test_count; i++)
		{
			String8 to_add = Serialize_TestReport_Test(arena, &testReport->test[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport->teardown)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestReport_Teardown(arena, testReport->teardown);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Participant(Arena *arena, TestReport_Participant *testReport_Participant)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Participant->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Participant->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Participant->id.size, testReport_Participant->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Participant->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Participant->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Participant->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Participant->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Participant->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Participant->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Participant->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", testReport_Participant->type.size, testReport_Participant->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Participant->uri)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"uri\" : \"%.*s\"", testReport_Participant->uri.size, testReport_Participant->uri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Participant->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", testReport_Participant->display.size, testReport_Participant->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Setup(Arena *arena, TestReport_Setup *testReport_Setup)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Setup->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Setup->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Setup->id.size, testReport_Setup->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup->action_count; i++)
		{
			String8 to_add = Serialize_TestReport_Setup_Action(arena, &testReport_Setup->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Setup_Action(Arena *arena, TestReport_Setup_Action *testReport_Setup_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Setup_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Setup_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Setup_Action->id.size, testReport_Setup_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup_Action->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestReport_Setup_Action_Operation(arena, testReport_Setup_Action->operation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action->assert)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestReport_Setup_Action_Assert(arena, testReport_Setup_Action->assert);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Setup_Action_Operation(Arena *arena, TestReport_Setup_Action_Operation *testReport_Setup_Action_Operation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Setup_Action_Operation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Setup_Action_Operation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Setup_Action_Operation->id.size, testReport_Setup_Action_Operation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action_Operation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup_Action_Operation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup_Action_Operation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup_Action_Operation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup_Action_Operation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup_Action_Operation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup_Action_Operation->result)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"result\" : \"%.*s\"", testReport_Setup_Action_Operation->result.size, testReport_Setup_Action_Operation->result.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action_Operation->message)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"message\" : \"%.*s\"", testReport_Setup_Action_Operation->message.size, testReport_Setup_Action_Operation->message.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action_Operation->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"detail\" : \"%.*s\"", testReport_Setup_Action_Operation->detail.size, testReport_Setup_Action_Operation->detail.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Setup_Action_Assert(Arena *arena, TestReport_Setup_Action_Assert *testReport_Setup_Action_Assert)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Setup_Action_Assert->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Setup_Action_Assert->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Setup_Action_Assert->id.size, testReport_Setup_Action_Assert->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action_Assert->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup_Action_Assert->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup_Action_Assert->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup_Action_Assert->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Setup_Action_Assert->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Setup_Action_Assert->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Setup_Action_Assert->result)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"result\" : \"%.*s\"", testReport_Setup_Action_Assert->result.size, testReport_Setup_Action_Assert->result.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action_Assert->message)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"message\" : \"%.*s\"", testReport_Setup_Action_Assert->message.size, testReport_Setup_Action_Assert->message.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Setup_Action_Assert->detail)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"detail\" : \"%.*s\"", testReport_Setup_Action_Assert->detail.size, testReport_Setup_Action_Assert->detail.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Test(Arena *arena, TestReport_Test *testReport_Test)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Test->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Test->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Test->id.size, testReport_Test->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Test->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Test->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Test->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Test->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Test->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Test->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Test->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", testReport_Test->name.size, testReport_Test->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Test->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testReport_Test->description.size, testReport_Test->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Test->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Test->action_count; i++)
		{
			String8 to_add = Serialize_TestReport_Test_Action(arena, &testReport_Test->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Test_Action(Arena *arena, TestReport_Test_Action *testReport_Test_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Test_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Test_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Test_Action->id.size, testReport_Test_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Test_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Test_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Test_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Test_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Test_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Test_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Test_Action->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestReport_Setup_Action_Operation(arena, testReport_Test_Action->operation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Test_Action->assert)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestReport_Setup_Action_Assert(arena, testReport_Test_Action->assert);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Teardown(Arena *arena, TestReport_Teardown *testReport_Teardown)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Teardown->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Teardown->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Teardown->id.size, testReport_Teardown->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Teardown->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Teardown->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Teardown->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Teardown->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Teardown->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Teardown->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Teardown->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Teardown->action_count; i++)
		{
			String8 to_add = Serialize_TestReport_Teardown_Action(arena, &testReport_Teardown->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestReport_Teardown_Action(Arena *arena, TestReport_Teardown_Action *testReport_Teardown_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testReport_Teardown_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testReport_Teardown_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testReport_Teardown_Action->id.size, testReport_Teardown_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testReport_Teardown_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Teardown_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Teardown_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Teardown_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testReport_Teardown_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testReport_Teardown_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testReport_Teardown_Action->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestReport_Setup_Action_Operation(arena, testReport_Teardown_Action->operation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript(Arena *arena, TestScript *testScript)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript->id.size, testScript->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, testScript->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", testScript->implicitRules.size, testScript->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", testScript->language.size, testScript->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, testScript->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &testScript->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", testScript->url.size, testScript->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, testScript->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", testScript->version.size, testScript->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", testScript->name.size, testScript->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", testScript->title.size, testScript->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", testScript->status.size, testScript->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", testScript->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", testScript->date.size, testScript->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", testScript->publisher.size, testScript->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &testScript->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testScript->description.size, testScript->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &testScript->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &testScript->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", testScript->purpose.size, testScript->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", testScript->copyright.size, testScript->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->origin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->origin_count; i++)
		{
			String8 to_add = Serialize_TestScript_Origin(arena, &testScript->origin[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->destination)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->destination_count; i++)
		{
			String8 to_add = Serialize_TestScript_Destination(arena, &testScript->destination[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->metadata)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Metadata(arena, testScript->metadata);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->fixture)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->fixture_count; i++)
		{
			String8 to_add = Serialize_TestScript_Fixture(arena, &testScript->fixture[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->profile_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &testScript->profile[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->variable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->variable_count; i++)
		{
			String8 to_add = Serialize_TestScript_Variable(arena, &testScript->variable[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->setup)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Setup(arena, testScript->setup);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript->test)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript->test_count; i++)
		{
			String8 to_add = Serialize_TestScript_Test(arena, &testScript->test[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript->teardown)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Teardown(arena, testScript->teardown);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Origin(Arena *arena, TestScript_Origin *testScript_Origin)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Origin->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Origin->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Origin->id.size, testScript_Origin->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Origin->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Origin->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Origin->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Origin->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Origin->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Origin->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Origin->index)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, testScript_Origin->index);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Origin->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, testScript_Origin->profile);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Destination(Arena *arena, TestScript_Destination *testScript_Destination)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Destination->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Destination->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Destination->id.size, testScript_Destination->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Destination->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Destination->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Destination->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Destination->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Destination->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Destination->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Destination->index)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, testScript_Destination->index);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Destination->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, testScript_Destination->profile);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Metadata(Arena *arena, TestScript_Metadata *testScript_Metadata)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Metadata->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Metadata->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Metadata->id.size, testScript_Metadata->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Metadata->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Metadata->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata->link_count; i++)
		{
			String8 to_add = Serialize_TestScript_Metadata_Link(arena, &testScript_Metadata->link[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata->capability)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata->capability_count; i++)
		{
			String8 to_add = Serialize_TestScript_Metadata_Capability(arena, &testScript_Metadata->capability[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Metadata_Link(Arena *arena, TestScript_Metadata_Link *testScript_Metadata_Link)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Metadata_Link->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Metadata_Link->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Metadata_Link->id.size, testScript_Metadata_Link->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata_Link->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata_Link->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Metadata_Link->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata_Link->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata_Link->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Metadata_Link->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata_Link->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", testScript_Metadata_Link->url.size, testScript_Metadata_Link->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata_Link->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testScript_Metadata_Link->description.size, testScript_Metadata_Link->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Metadata_Capability(Arena *arena, TestScript_Metadata_Capability *testScript_Metadata_Capability)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Metadata_Capability->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Metadata_Capability->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Metadata_Capability->id.size, testScript_Metadata_Capability->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata_Capability->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata_Capability->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Metadata_Capability->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata_Capability->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata_Capability->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Metadata_Capability->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata_Capability->required)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"required\" : \"%.*s\"", testScript_Metadata_Capability->required ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata_Capability->validated)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"validated\" : \"%.*s\"", testScript_Metadata_Capability->validated ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata_Capability->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testScript_Metadata_Capability->description.size, testScript_Metadata_Capability->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata_Capability->origin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata_Capability->origin_count; i++)
		{
			String8 to_add = Serialize_Integer(arena, &testScript_Metadata_Capability->origin[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata_Capability->destination)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, testScript_Metadata_Capability->destination);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Metadata_Capability->link)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Metadata_Capability->link_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"link\" : \"%.*s\"", &testScript_Metadata_Capability->link[i].size, &testScript_Metadata_Capability->link[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Metadata_Capability->capabilities)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"capabilities\" : \"%.*s\"", testScript_Metadata_Capability->capabilities.size, testScript_Metadata_Capability->capabilities.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Fixture(Arena *arena, TestScript_Fixture *testScript_Fixture)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Fixture->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Fixture->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Fixture->id.size, testScript_Fixture->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Fixture->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Fixture->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Fixture->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Fixture->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Fixture->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Fixture->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Fixture->autocreate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"autocreate\" : \"%.*s\"", testScript_Fixture->autocreate ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Fixture->autodelete)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"autodelete\" : \"%.*s\"", testScript_Fixture->autodelete ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Fixture->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, testScript_Fixture->resource);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Variable(Arena *arena, TestScript_Variable *testScript_Variable)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Variable->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Variable->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Variable->id.size, testScript_Variable->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Variable->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Variable->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Variable->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Variable->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Variable->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Variable->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", testScript_Variable->name.size, testScript_Variable->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->defaultValue)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"defaultValue\" : \"%.*s\"", testScript_Variable->defaultValue.size, testScript_Variable->defaultValue.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testScript_Variable->description.size, testScript_Variable->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", testScript_Variable->expression.size, testScript_Variable->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->headerField)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"headerField\" : \"%.*s\"", testScript_Variable->headerField.size, testScript_Variable->headerField.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->hint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"hint\" : \"%.*s\"", testScript_Variable->hint.size, testScript_Variable->hint.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", testScript_Variable->path.size, testScript_Variable->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Variable->sourceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sourceId\" : \"%.*s\"", testScript_Variable->sourceId.size, testScript_Variable->sourceId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Setup(Arena *arena, TestScript_Setup *testScript_Setup)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Setup->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Setup->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Setup->id.size, testScript_Setup->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup->action_count; i++)
		{
			String8 to_add = Serialize_TestScript_Setup_Action(arena, &testScript_Setup->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Setup_Action(Arena *arena, TestScript_Setup_Action *testScript_Setup_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Setup_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Setup_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Setup_Action->id.size, testScript_Setup_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Setup_Action_Operation(arena, testScript_Setup_Action->operation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action->assert)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Setup_Action_Assert(arena, testScript_Setup_Action->assert);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Setup_Action_Operation(Arena *arena, TestScript_Setup_Action_Operation *testScript_Setup_Action_Operation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Setup_Action_Operation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Setup_Action_Operation->id.size, testScript_Setup_Action_Operation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action_Operation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action_Operation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action_Operation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action_Operation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, testScript_Setup_Action_Operation->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"resource\" : \"%.*s\"", testScript_Setup_Action_Operation->resource.size, testScript_Setup_Action_Operation->resource.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->label)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"label\" : \"%.*s\"", testScript_Setup_Action_Operation->label.size, testScript_Setup_Action_Operation->label.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testScript_Setup_Action_Operation->description.size, testScript_Setup_Action_Operation->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->accept)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"accept\" : \"%.*s\"", testScript_Setup_Action_Operation->accept.size, testScript_Setup_Action_Operation->accept.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->contentType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"contentType\" : \"%.*s\"", testScript_Setup_Action_Operation->contentType.size, testScript_Setup_Action_Operation->contentType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->destination)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, testScript_Setup_Action_Operation->destination);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->encodeRequestUrl)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"encodeRequestUrl\" : \"%.*s\"", testScript_Setup_Action_Operation->encodeRequestUrl ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"method\" : \"%.*s\"", testScript_Setup_Action_Operation->method.size, testScript_Setup_Action_Operation->method.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->origin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, testScript_Setup_Action_Operation->origin);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->params)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"params\" : \"%.*s\"", testScript_Setup_Action_Operation->params.size, testScript_Setup_Action_Operation->params.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->requestHeader)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action_Operation->requestHeader_count; i++)
		{
			String8 to_add = Serialize_TestScript_Setup_Action_Operation_RequestHeader(arena, &testScript_Setup_Action_Operation->requestHeader[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->requestId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requestId\" : \"%.*s\"", testScript_Setup_Action_Operation->requestId.size, testScript_Setup_Action_Operation->requestId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->responseId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"responseId\" : \"%.*s\"", testScript_Setup_Action_Operation->responseId.size, testScript_Setup_Action_Operation->responseId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->sourceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sourceId\" : \"%.*s\"", testScript_Setup_Action_Operation->sourceId.size, testScript_Setup_Action_Operation->sourceId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->targetId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"targetId\" : \"%.*s\"", testScript_Setup_Action_Operation->targetId.size, testScript_Setup_Action_Operation->targetId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", testScript_Setup_Action_Operation->url.size, testScript_Setup_Action_Operation->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Setup_Action_Operation_RequestHeader(Arena *arena, TestScript_Setup_Action_Operation_RequestHeader *testScript_Setup_Action_Operation_RequestHeader)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Setup_Action_Operation_RequestHeader->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Operation_RequestHeader->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Setup_Action_Operation_RequestHeader->id.size, testScript_Setup_Action_Operation_RequestHeader->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation_RequestHeader->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action_Operation_RequestHeader->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action_Operation_RequestHeader->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Operation_RequestHeader->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action_Operation_RequestHeader->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action_Operation_RequestHeader->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Operation_RequestHeader->field)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"field\" : \"%.*s\"", testScript_Setup_Action_Operation_RequestHeader->field.size, testScript_Setup_Action_Operation_RequestHeader->field.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Operation_RequestHeader->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", testScript_Setup_Action_Operation_RequestHeader->value.size, testScript_Setup_Action_Operation_RequestHeader->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Setup_Action_Assert(Arena *arena, TestScript_Setup_Action_Assert *testScript_Setup_Action_Assert)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Setup_Action_Assert->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Setup_Action_Assert->id.size, testScript_Setup_Action_Assert->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action_Assert->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action_Assert->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Setup_Action_Assert->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Setup_Action_Assert->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->label)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"label\" : \"%.*s\"", testScript_Setup_Action_Assert->label.size, testScript_Setup_Action_Assert->label.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testScript_Setup_Action_Assert->description.size, testScript_Setup_Action_Assert->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->direction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"direction\" : \"%.*s\"", testScript_Setup_Action_Assert->direction.size, testScript_Setup_Action_Assert->direction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->compareToSourceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"compareToSourceId\" : \"%.*s\"", testScript_Setup_Action_Assert->compareToSourceId.size, testScript_Setup_Action_Assert->compareToSourceId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->compareToSourceExpression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"compareToSourceExpression\" : \"%.*s\"", testScript_Setup_Action_Assert->compareToSourceExpression.size, testScript_Setup_Action_Assert->compareToSourceExpression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->compareToSourcePath)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"compareToSourcePath\" : \"%.*s\"", testScript_Setup_Action_Assert->compareToSourcePath.size, testScript_Setup_Action_Assert->compareToSourcePath.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->contentType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"contentType\" : \"%.*s\"", testScript_Setup_Action_Assert->contentType.size, testScript_Setup_Action_Assert->contentType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", testScript_Setup_Action_Assert->expression.size, testScript_Setup_Action_Assert->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->headerField)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"headerField\" : \"%.*s\"", testScript_Setup_Action_Assert->headerField.size, testScript_Setup_Action_Assert->headerField.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->minimumId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"minimumId\" : \"%.*s\"", testScript_Setup_Action_Assert->minimumId.size, testScript_Setup_Action_Assert->minimumId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->navigationLinks)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"navigationLinks\" : \"%.*s\"", testScript_Setup_Action_Assert->navigationLinks ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->operator_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"operator_\" : \"%.*s\"", testScript_Setup_Action_Assert->operator_.size, testScript_Setup_Action_Assert->operator_.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", testScript_Setup_Action_Assert->path.size, testScript_Setup_Action_Assert->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->requestMethod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requestMethod\" : \"%.*s\"", testScript_Setup_Action_Assert->requestMethod.size, testScript_Setup_Action_Assert->requestMethod.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->requestURL)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requestURL\" : \"%.*s\"", testScript_Setup_Action_Assert->requestURL.size, testScript_Setup_Action_Assert->requestURL.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"resource\" : \"%.*s\"", testScript_Setup_Action_Assert->resource.size, testScript_Setup_Action_Assert->resource.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->response)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"response\" : \"%.*s\"", testScript_Setup_Action_Assert->response.size, testScript_Setup_Action_Assert->response.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->responseCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"responseCode\" : \"%.*s\"", testScript_Setup_Action_Assert->responseCode.size, testScript_Setup_Action_Assert->responseCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->sourceId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sourceId\" : \"%.*s\"", testScript_Setup_Action_Assert->sourceId.size, testScript_Setup_Action_Assert->sourceId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->validateProfileId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"validateProfileId\" : \"%.*s\"", testScript_Setup_Action_Assert->validateProfileId.size, testScript_Setup_Action_Assert->validateProfileId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", testScript_Setup_Action_Assert->value.size, testScript_Setup_Action_Assert->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Setup_Action_Assert->warningOnly)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"warningOnly\" : \"%.*s\"", testScript_Setup_Action_Assert->warningOnly ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Test(Arena *arena, TestScript_Test *testScript_Test)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Test->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Test->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Test->id.size, testScript_Test->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Test->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Test->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Test->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Test->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Test->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Test->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Test->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", testScript_Test->name.size, testScript_Test->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Test->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", testScript_Test->description.size, testScript_Test->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Test->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Test->action_count; i++)
		{
			String8 to_add = Serialize_TestScript_Test_Action(arena, &testScript_Test->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Test_Action(Arena *arena, TestScript_Test_Action *testScript_Test_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Test_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Test_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Test_Action->id.size, testScript_Test_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Test_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Test_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Test_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Test_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Test_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Test_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Test_Action->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Setup_Action_Operation(arena, testScript_Test_Action->operation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Test_Action->assert)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Setup_Action_Assert(arena, testScript_Test_Action->assert);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Teardown(Arena *arena, TestScript_Teardown *testScript_Teardown)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Teardown->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Teardown->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Teardown->id.size, testScript_Teardown->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Teardown->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Teardown->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Teardown->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Teardown->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Teardown->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Teardown->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Teardown->action)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Teardown->action_count; i++)
		{
			String8 to_add = Serialize_TestScript_Teardown_Action(arena, &testScript_Teardown->action[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TestScript_Teardown_Action(Arena *arena, TestScript_Teardown_Action *testScript_Teardown_Action)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&testScript_Teardown_Action->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&testScript_Teardown_Action->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", testScript_Teardown_Action->id.size, testScript_Teardown_Action->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&testScript_Teardown_Action->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Teardown_Action->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Teardown_Action->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Teardown_Action->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < testScript_Teardown_Action->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &testScript_Teardown_Action->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&testScript_Teardown_Action->operation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_TestScript_Setup_Action_Operation(arena, testScript_Teardown_Action->operation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet(Arena *arena, ValueSet *valueSet)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet->id.size, valueSet->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, valueSet->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", valueSet->implicitRules.size, valueSet->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", valueSet->language.size, valueSet->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, valueSet->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &valueSet->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", valueSet->url.size, valueSet->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &valueSet->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", valueSet->version.size, valueSet->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", valueSet->name.size, valueSet->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", valueSet->title.size, valueSet->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", valueSet->status.size, valueSet->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", valueSet->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", valueSet->date.size, valueSet->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", valueSet->publisher.size, valueSet->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &valueSet->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", valueSet->description.size, valueSet->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &valueSet->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &valueSet->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet->immutable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"immutable\" : \"%.*s\"", valueSet->immutable ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->purpose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"purpose\" : \"%.*s\"", valueSet->purpose.size, valueSet->purpose.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->copyright)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"copyright\" : \"%.*s\"", valueSet->copyright.size, valueSet->copyright.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->compose)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ValueSet_Compose(arena, valueSet->compose);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet->expansion)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ValueSet_Expansion(arena, valueSet->expansion);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Compose(Arena *arena, ValueSet_Compose *valueSet_Compose)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Compose->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Compose->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Compose->id.size, valueSet_Compose->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose->lockedDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lockedDate\" : \"%.*s\"", valueSet_Compose->lockedDate.size, valueSet_Compose->lockedDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose->inactive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"inactive\" : \"%.*s\"", valueSet_Compose->inactive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose->include)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose->include_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Compose_Include(arena, &valueSet_Compose->include[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose->exclude)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose->exclude_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Compose_Include(arena, &valueSet_Compose->exclude[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Compose_Include(Arena *arena, ValueSet_Compose_Include *valueSet_Compose_Include)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Compose_Include->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Compose_Include->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Compose_Include->id.size, valueSet_Compose_Include->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", valueSet_Compose_Include->system.size, valueSet_Compose_Include->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", valueSet_Compose_Include->version.size, valueSet_Compose_Include->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include->concept)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include->concept_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Compose_Include_Concept(arena, &valueSet_Compose_Include->concept[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include->filter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include->filter_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Compose_Include_Filter(arena, &valueSet_Compose_Include->filter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include->valueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include->valueSet_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"valueSet\" : \"%.*s\"", &valueSet_Compose_Include->valueSet[i].size, &valueSet_Compose_Include->valueSet[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Compose_Include_Concept(Arena *arena, ValueSet_Compose_Include_Concept *valueSet_Compose_Include_Concept)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Compose_Include_Concept->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Compose_Include_Concept->id.size, valueSet_Compose_Include_Concept->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include_Concept->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include_Concept->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include_Concept->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include_Concept->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", valueSet_Compose_Include_Concept->code.size, valueSet_Compose_Include_Concept->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", valueSet_Compose_Include_Concept->display.size, valueSet_Compose_Include_Concept->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept->designation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include_Concept->designation_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Compose_Include_Concept_Designation(arena, &valueSet_Compose_Include_Concept->designation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Compose_Include_Concept_Designation(Arena *arena, ValueSet_Compose_Include_Concept_Designation *valueSet_Compose_Include_Concept_Designation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Compose_Include_Concept_Designation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept_Designation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Compose_Include_Concept_Designation->id.size, valueSet_Compose_Include_Concept_Designation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept_Designation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include_Concept_Designation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include_Concept_Designation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept_Designation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include_Concept_Designation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include_Concept_Designation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept_Designation->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", valueSet_Compose_Include_Concept_Designation->language.size, valueSet_Compose_Include_Concept_Designation->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept_Designation->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, valueSet_Compose_Include_Concept_Designation->use);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Concept_Designation->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", valueSet_Compose_Include_Concept_Designation->value.size, valueSet_Compose_Include_Concept_Designation->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Compose_Include_Filter(Arena *arena, ValueSet_Compose_Include_Filter *valueSet_Compose_Include_Filter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Compose_Include_Filter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Filter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Compose_Include_Filter->id.size, valueSet_Compose_Include_Filter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Filter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include_Filter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include_Filter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Filter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Compose_Include_Filter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Compose_Include_Filter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Compose_Include_Filter->property)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"property\" : \"%.*s\"", valueSet_Compose_Include_Filter->property.size, valueSet_Compose_Include_Filter->property.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Filter->op)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"op\" : \"%.*s\"", valueSet_Compose_Include_Filter->op.size, valueSet_Compose_Include_Filter->op.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Compose_Include_Filter->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", valueSet_Compose_Include_Filter->value.size, valueSet_Compose_Include_Filter->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Expansion(Arena *arena, ValueSet_Expansion *valueSet_Expansion)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Expansion->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Expansion->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Expansion->id.size, valueSet_Expansion->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Expansion->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Expansion->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"identifier\" : \"%.*s\"", valueSet_Expansion->identifier.size, valueSet_Expansion->identifier.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion->timestamp)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"timestamp\" : \"%.*s\"", valueSet_Expansion->timestamp.size, valueSet_Expansion->timestamp.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion->total)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, valueSet_Expansion->total);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion->offset)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, valueSet_Expansion->offset);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion->parameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion->parameter_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Expansion_Parameter(arena, &valueSet_Expansion->parameter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion->contains)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion->contains_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Expansion_Contains(arena, &valueSet_Expansion->contains[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Expansion_Parameter(Arena *arena, ValueSet_Expansion_Parameter *valueSet_Expansion_Parameter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Expansion_Parameter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Expansion_Parameter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Expansion_Parameter->id.size, valueSet_Expansion_Parameter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Parameter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion_Parameter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Expansion_Parameter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion_Parameter->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion_Parameter->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Expansion_Parameter->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion_Parameter->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", valueSet_Expansion_Parameter->name.size, valueSet_Expansion_Parameter->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(valueSet_Expansion_Parameter->value_type == ValueSet_Expansion_Parameter::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", valueSet_Expansion_Parameter->value.valueString.size, valueSet_Expansion_Parameter->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(valueSet_Expansion_Parameter->value_type == ValueSet_Expansion_Parameter::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", valueSet_Expansion_Parameter->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(valueSet_Expansion_Parameter->value_type == ValueSet_Expansion_Parameter::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, valueSet_Expansion_Parameter->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(valueSet_Expansion_Parameter->value_type == ValueSet_Expansion_Parameter::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", valueSet_Expansion_Parameter->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(valueSet_Expansion_Parameter->value_type == ValueSet_Expansion_Parameter::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", valueSet_Expansion_Parameter->value.valueUri.size, valueSet_Expansion_Parameter->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(valueSet_Expansion_Parameter->value_type == ValueSet_Expansion_Parameter::ValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", valueSet_Expansion_Parameter->value.valueCode.size, valueSet_Expansion_Parameter->value.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(valueSet_Expansion_Parameter->value_type == ValueSet_Expansion_Parameter::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", valueSet_Expansion_Parameter->value.valueDateTime.size, valueSet_Expansion_Parameter->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ValueSet_Expansion_Contains(Arena *arena, ValueSet_Expansion_Contains *valueSet_Expansion_Contains)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&valueSet_Expansion_Contains->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&valueSet_Expansion_Contains->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", valueSet_Expansion_Contains->id.size, valueSet_Expansion_Contains->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Contains->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion_Contains->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Expansion_Contains->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion_Contains->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion_Contains->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &valueSet_Expansion_Contains->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion_Contains->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", valueSet_Expansion_Contains->system.size, valueSet_Expansion_Contains->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Contains->abstract)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"abstract\" : \"%.*s\"", valueSet_Expansion_Contains->abstract ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Contains->inactive)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"inactive\" : \"%.*s\"", valueSet_Expansion_Contains->inactive ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Contains->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", valueSet_Expansion_Contains->version.size, valueSet_Expansion_Contains->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Contains->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", valueSet_Expansion_Contains->code.size, valueSet_Expansion_Contains->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Contains->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", valueSet_Expansion_Contains->display.size, valueSet_Expansion_Contains->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&valueSet_Expansion_Contains->designation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion_Contains->designation_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Compose_Include_Concept_Designation(arena, &valueSet_Expansion_Contains->designation[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&valueSet_Expansion_Contains->contains)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < valueSet_Expansion_Contains->contains_count; i++)
		{
			String8 to_add = Serialize_ValueSet_Expansion_Contains(arena, &valueSet_Expansion_Contains->contains[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_VerificationResult(Arena *arena, VerificationResult *verificationResult)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&verificationResult->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&verificationResult->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", verificationResult->id.size, verificationResult->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, verificationResult->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", verificationResult->implicitRules.size, verificationResult->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", verificationResult->language.size, verificationResult->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, verificationResult->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &verificationResult->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult->target)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->target_count; i++)
		{
			String8 to_add = Serialize_Reference(arena, &verificationResult->target[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult->targetLocation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->targetLocation_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"targetLocation\" : \"%.*s\"", &verificationResult->targetLocation[i].size, &verificationResult->targetLocation[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult->need)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, verificationResult->need);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", verificationResult->status.size, verificationResult->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->statusDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"statusDate\" : \"%.*s\"", verificationResult->statusDate.size, verificationResult->statusDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->validationType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, verificationResult->validationType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->validationProcess)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->validationProcess_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &verificationResult->validationProcess[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult->frequency)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Timing(arena, verificationResult->frequency);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->lastPerformed)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastPerformed\" : \"%.*s\"", verificationResult->lastPerformed.size, verificationResult->lastPerformed.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->nextScheduled)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"nextScheduled\" : \"%.*s\"", verificationResult->nextScheduled.size, verificationResult->nextScheduled.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->failureAction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, verificationResult->failureAction);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->primarySource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->primarySource_count; i++)
		{
			String8 to_add = Serialize_VerificationResult_PrimarySource(arena, &verificationResult->primarySource[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult->attestation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_VerificationResult_Attestation(arena, verificationResult->attestation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult->validator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult->validator_count; i++)
		{
			String8 to_add = Serialize_VerificationResult_Validator(arena, &verificationResult->validator[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_VerificationResult_PrimarySource(Arena *arena, VerificationResult_PrimarySource *verificationResult_PrimarySource)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&verificationResult_PrimarySource->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&verificationResult_PrimarySource->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", verificationResult_PrimarySource->id.size, verificationResult_PrimarySource->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_PrimarySource->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_PrimarySource->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult_PrimarySource->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_PrimarySource->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_PrimarySource->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult_PrimarySource->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_PrimarySource->who)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, verificationResult_PrimarySource->who);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_PrimarySource->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_PrimarySource->type_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &verificationResult_PrimarySource->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_PrimarySource->communicationMethod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_PrimarySource->communicationMethod_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &verificationResult_PrimarySource->communicationMethod[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_PrimarySource->validationStatus)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, verificationResult_PrimarySource->validationStatus);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_PrimarySource->validationDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"validationDate\" : \"%.*s\"", verificationResult_PrimarySource->validationDate.size, verificationResult_PrimarySource->validationDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_PrimarySource->canPushUpdates)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, verificationResult_PrimarySource->canPushUpdates);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_PrimarySource->pushTypeAvailable)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_PrimarySource->pushTypeAvailable_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &verificationResult_PrimarySource->pushTypeAvailable[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_VerificationResult_Attestation(Arena *arena, VerificationResult_Attestation *verificationResult_Attestation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&verificationResult_Attestation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&verificationResult_Attestation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", verificationResult_Attestation->id.size, verificationResult_Attestation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_Attestation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult_Attestation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_Attestation->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_Attestation->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult_Attestation->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_Attestation->who)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, verificationResult_Attestation->who);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->onBehalfOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, verificationResult_Attestation->onBehalfOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->communicationMethod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, verificationResult_Attestation->communicationMethod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", verificationResult_Attestation->date.size, verificationResult_Attestation->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->sourceIdentityCertificate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sourceIdentityCertificate\" : \"%.*s\"", verificationResult_Attestation->sourceIdentityCertificate.size, verificationResult_Attestation->sourceIdentityCertificate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->proxyIdentityCertificate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"proxyIdentityCertificate\" : \"%.*s\"", verificationResult_Attestation->proxyIdentityCertificate.size, verificationResult_Attestation->proxyIdentityCertificate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->proxySignature)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Signature(arena, verificationResult_Attestation->proxySignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Attestation->sourceSignature)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Signature(arena, verificationResult_Attestation->sourceSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_VerificationResult_Validator(Arena *arena, VerificationResult_Validator *verificationResult_Validator)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&verificationResult_Validator->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&verificationResult_Validator->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", verificationResult_Validator->id.size, verificationResult_Validator->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Validator->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_Validator->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult_Validator->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_Validator->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < verificationResult_Validator->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &verificationResult_Validator->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&verificationResult_Validator->organization)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, verificationResult_Validator->organization);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Validator->identityCertificate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"identityCertificate\" : \"%.*s\"", verificationResult_Validator->identityCertificate.size, verificationResult_Validator->identityCertificate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&verificationResult_Validator->attestationSignature)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Signature(arena, verificationResult_Validator->attestationSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_VisionPrescription(Arena *arena, VisionPrescription *visionPrescription)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&visionPrescription->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&visionPrescription->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", visionPrescription->id.size, visionPrescription->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, visionPrescription->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", visionPrescription->implicitRules.size, visionPrescription->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", visionPrescription->language.size, visionPrescription->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, visionPrescription->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &visionPrescription->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &visionPrescription->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &visionPrescription->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription->identifier_count; i++)
		{
			String8 to_add = Serialize_Identifier(arena, &visionPrescription->identifier[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", visionPrescription->status.size, visionPrescription->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->created)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"created\" : \"%.*s\"", visionPrescription->created.size, visionPrescription->created.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->patient)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, visionPrescription->patient);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->encounter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, visionPrescription->encounter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->dateWritten)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"dateWritten\" : \"%.*s\"", visionPrescription->dateWritten.size, visionPrescription->dateWritten.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->prescriber)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, visionPrescription->prescriber);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription->lensSpecification)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription->lensSpecification_count; i++)
		{
			String8 to_add = Serialize_VisionPrescription_LensSpecification(arena, &visionPrescription->lensSpecification[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_VisionPrescription_LensSpecification(Arena *arena, VisionPrescription_LensSpecification *visionPrescription_LensSpecification)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&visionPrescription_LensSpecification->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&visionPrescription_LensSpecification->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", visionPrescription_LensSpecification->id.size, visionPrescription_LensSpecification->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription_LensSpecification->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &visionPrescription_LensSpecification->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription_LensSpecification->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription_LensSpecification->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &visionPrescription_LensSpecification->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription_LensSpecification->product)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, visionPrescription_LensSpecification->product);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->eye)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"eye\" : \"%.*s\"", visionPrescription_LensSpecification->eye.size, visionPrescription_LensSpecification->eye.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->sphere)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sphere\" : \"%d\"", visionPrescription_LensSpecification->sphere);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->cylinder)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"cylinder\" : \"%d\"", visionPrescription_LensSpecification->cylinder);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->axis)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, visionPrescription_LensSpecification->axis);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->prism)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription_LensSpecification->prism_count; i++)
		{
			String8 to_add = Serialize_VisionPrescription_LensSpecification_Prism(arena, &visionPrescription_LensSpecification->prism[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription_LensSpecification->add)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"add\" : \"%d\"", visionPrescription_LensSpecification->add);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->power)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"power\" : \"%d\"", visionPrescription_LensSpecification->power);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->backCurve)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"backCurve\" : \"%d\"", visionPrescription_LensSpecification->backCurve);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->diameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"diameter\" : \"%d\"", visionPrescription_LensSpecification->diameter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->duration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, visionPrescription_LensSpecification->duration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->color)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"color\" : \"%.*s\"", visionPrescription_LensSpecification->color.size, visionPrescription_LensSpecification->color.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->brand)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"brand\" : \"%.*s\"", visionPrescription_LensSpecification->brand.size, visionPrescription_LensSpecification->brand.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification->note)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription_LensSpecification->note_count; i++)
		{
			String8 to_add = Serialize_Annotation(arena, &visionPrescription_LensSpecification->note[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_VisionPrescription_LensSpecification_Prism(Arena *arena, VisionPrescription_LensSpecification_Prism *visionPrescription_LensSpecification_Prism)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&visionPrescription_LensSpecification_Prism->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&visionPrescription_LensSpecification_Prism->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", visionPrescription_LensSpecification_Prism->id.size, visionPrescription_LensSpecification_Prism->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification_Prism->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription_LensSpecification_Prism->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &visionPrescription_LensSpecification_Prism->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription_LensSpecification_Prism->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < visionPrescription_LensSpecification_Prism->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &visionPrescription_LensSpecification_Prism->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&visionPrescription_LensSpecification_Prism->amount)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"amount\" : \"%d\"", visionPrescription_LensSpecification_Prism->amount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&visionPrescription_LensSpecification_Prism->base)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"base\" : \"%.*s\"", visionPrescription_LensSpecification_Prism->base.size, visionPrescription_LensSpecification_Prism->base.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MetadataResource(Arena *arena, MetadataResource *metadataResource)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&metadataResource->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&metadataResource->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", metadataResource->id.size, metadataResource->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->meta)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Meta(arena, metadataResource->meta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->implicitRules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"implicitRules\" : \"%.*s\"", metadataResource->implicitRules.size, metadataResource->implicitRules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", metadataResource->language.size, metadataResource->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Narrative(arena, metadataResource->text);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->contained)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < metadataResource->contained_count; i++)
		{
			String8 to_add = Serialize_Resource(arena, &metadataResource->contained[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&metadataResource->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < metadataResource->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &metadataResource->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&metadataResource->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < metadataResource->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &metadataResource->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&metadataResource->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", metadataResource->url.size, metadataResource->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", metadataResource->version.size, metadataResource->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", metadataResource->name.size, metadataResource->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", metadataResource->title.size, metadataResource->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", metadataResource->status.size, metadataResource->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->experimental)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"experimental\" : \"%.*s\"", metadataResource->experimental ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->date)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"date\" : \"%.*s\"", metadataResource->date.size, metadataResource->date.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->publisher)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"publisher\" : \"%.*s\"", metadataResource->publisher.size, metadataResource->publisher.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < metadataResource->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &metadataResource->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&metadataResource->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", metadataResource->description.size, metadataResource->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&metadataResource->useContext)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < metadataResource->useContext_count; i++)
		{
			String8 to_add = Serialize_UsageContext(arena, &metadataResource->useContext[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&metadataResource->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < metadataResource->jurisdiction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &metadataResource->jurisdiction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Element(Arena *arena, Element *element)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&element->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&element->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", element->id.size, element->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&element->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < element->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &element->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_BackboneElement(Arena *arena, BackboneElement *backboneElement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&backboneElement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&backboneElement->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", backboneElement->id.size, backboneElement->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&backboneElement->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < backboneElement->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &backboneElement->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&backboneElement->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < backboneElement->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &backboneElement->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Integer(Arena *arena, Integer *integer)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&integer->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&integer->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", integer->id.size, integer->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&integer->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < integer->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &integer->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&integer->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", integer->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Xhtml(Arena *arena, Xhtml *xhtml)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&xhtml->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&xhtml->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", xhtml->id.size, xhtml->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&xhtml->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", xhtml->value.size, xhtml->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Address(Arena *arena, Address *address)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&address->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&address->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", address->id.size, address->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < address->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &address->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&address->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", address->use.size, address->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", address->type.size, address->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", address->text.size, address->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->line)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < address->line_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"line\" : \"%.*s\"", &address->line[i].size, &address->line[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&address->city)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"city\" : \"%.*s\"", address->city.size, address->city.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->district)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"district\" : \"%.*s\"", address->district.size, address->district.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->state)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"state\" : \"%.*s\"", address->state.size, address->state.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->postalCode)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"postalCode\" : \"%.*s\"", address->postalCode.size, address->postalCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->country)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"country\" : \"%.*s\"", address->country.size, address->country.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&address->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, address->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Age(Arena *arena, Age *age)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&age->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&age->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", age->id.size, age->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&age->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < age->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &age->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&age->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", age->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&age->comparator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comparator\" : \"%.*s\"", age->comparator.size, age->comparator.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&age->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"unit\" : \"%.*s\"", age->unit.size, age->unit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&age->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", age->system.size, age->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&age->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", age->code.size, age->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Annotation(Arena *arena, Annotation *annotation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&annotation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&annotation->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", annotation->id.size, annotation->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&annotation->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < annotation->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &annotation->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(annotation->author_type == Annotation::AuthorType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, annotation->author.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(annotation->author_type == Annotation::AuthorType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", annotation->author.valueString.size, annotation->author.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&annotation->time)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"time\" : \"%.*s\"", annotation->time.size, annotation->time.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&annotation->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", annotation->text.size, annotation->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Attachment(Arena *arena, Attachment *attachment)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&attachment->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&attachment->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", attachment->id.size, attachment->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < attachment->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &attachment->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&attachment->contentType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"contentType\" : \"%.*s\"", attachment->contentType.size, attachment->contentType.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", attachment->language.size, attachment->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->data)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"data\" : \"%.*s\"", attachment->data.size, attachment->data.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", attachment->url.size, attachment->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->size)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"size\" : \"%d\"", attachment->size);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->hash)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"hash\" : \"%.*s\"", attachment->hash.size, attachment->hash.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->title)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"title\" : \"%.*s\"", attachment->title.size, attachment->title.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&attachment->creation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"creation\" : \"%.*s\"", attachment->creation.size, attachment->creation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_CodeableConcept(Arena *arena, CodeableConcept *codeableConcept)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&codeableConcept->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&codeableConcept->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", codeableConcept->id.size, codeableConcept->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&codeableConcept->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeableConcept->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &codeableConcept->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeableConcept->coding)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < codeableConcept->coding_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &codeableConcept->coding[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&codeableConcept->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", codeableConcept->text.size, codeableConcept->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Coding(Arena *arena, Coding *coding)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&coding->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&coding->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", coding->id.size, coding->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coding->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < coding->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &coding->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&coding->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", coding->system.size, coding->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coding->version)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"version\" : \"%.*s\"", coding->version.size, coding->version.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coding->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", coding->code.size, coding->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coding->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", coding->display.size, coding->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&coding->userSelected)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"userSelected\" : \"%.*s\"", coding->userSelected ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ContactDetail(Arena *arena, ContactDetail *contactDetail)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contactDetail->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contactDetail->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contactDetail->id.size, contactDetail->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contactDetail->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contactDetail->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contactDetail->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contactDetail->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", contactDetail->name.size, contactDetail->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contactDetail->telecom)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contactDetail->telecom_count; i++)
		{
			String8 to_add = Serialize_ContactPoint(arena, &contactDetail->telecom[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ContactPoint(Arena *arena, ContactPoint *contactPoint)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contactPoint->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contactPoint->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contactPoint->id.size, contactPoint->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contactPoint->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contactPoint->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contactPoint->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contactPoint->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", contactPoint->system.size, contactPoint->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contactPoint->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", contactPoint->value.size, contactPoint->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contactPoint->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", contactPoint->use.size, contactPoint->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contactPoint->rank)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rank\" : \"%d\"", contactPoint->rank);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contactPoint->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, contactPoint->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Contributor(Arena *arena, Contributor *contributor)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&contributor->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&contributor->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", contributor->id.size, contributor->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contributor->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contributor->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &contributor->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&contributor->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", contributor->type.size, contributor->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contributor->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", contributor->name.size, contributor->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&contributor->contact)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < contributor->contact_count; i++)
		{
			String8 to_add = Serialize_ContactDetail(arena, &contributor->contact[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Count(Arena *arena, Count *count)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&count->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&count->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", count->id.size, count->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&count->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < count->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &count->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&count->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", count->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&count->comparator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comparator\" : \"%.*s\"", count->comparator.size, count->comparator.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&count->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"unit\" : \"%.*s\"", count->unit.size, count->unit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&count->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", count->system.size, count->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&count->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", count->code.size, count->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DataRequirement(Arena *arena, DataRequirement *dataRequirement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&dataRequirement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&dataRequirement->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", dataRequirement->id.size, dataRequirement->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &dataRequirement->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dataRequirement->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", dataRequirement->type.size, dataRequirement->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement->profile_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", &dataRequirement->profile[i].size, &dataRequirement->profile[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(dataRequirement->subject_type == DataRequirement::SubjectType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, dataRequirement->subject.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(dataRequirement->subject_type == DataRequirement::SubjectType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, dataRequirement->subject.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&dataRequirement->mustSupport)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement->mustSupport_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"mustSupport\" : \"%.*s\"", &dataRequirement->mustSupport[i].size, &dataRequirement->mustSupport[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dataRequirement->codeFilter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement->codeFilter_count; i++)
		{
			String8 to_add = Serialize_DataRequirement_CodeFilter(arena, &dataRequirement->codeFilter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dataRequirement->dateFilter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement->dateFilter_count; i++)
		{
			String8 to_add = Serialize_DataRequirement_DateFilter(arena, &dataRequirement->dateFilter[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dataRequirement->limit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"limit\" : \"%d\"", dataRequirement->limit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement->sort)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement->sort_count; i++)
		{
			String8 to_add = Serialize_DataRequirement_Sort(arena, &dataRequirement->sort[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DataRequirement_CodeFilter(Arena *arena, DataRequirement_CodeFilter *dataRequirement_CodeFilter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&dataRequirement_CodeFilter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&dataRequirement_CodeFilter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", dataRequirement_CodeFilter->id.size, dataRequirement_CodeFilter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_CodeFilter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement_CodeFilter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &dataRequirement_CodeFilter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dataRequirement_CodeFilter->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", dataRequirement_CodeFilter->path.size, dataRequirement_CodeFilter->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_CodeFilter->searchParam)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"searchParam\" : \"%.*s\"", dataRequirement_CodeFilter->searchParam.size, dataRequirement_CodeFilter->searchParam.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_CodeFilter->valueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"valueSet\" : \"%.*s\"", dataRequirement_CodeFilter->valueSet.size, dataRequirement_CodeFilter->valueSet.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_CodeFilter->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement_CodeFilter->code_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &dataRequirement_CodeFilter->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DataRequirement_DateFilter(Arena *arena, DataRequirement_DateFilter *dataRequirement_DateFilter)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&dataRequirement_DateFilter->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&dataRequirement_DateFilter->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", dataRequirement_DateFilter->id.size, dataRequirement_DateFilter->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_DateFilter->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement_DateFilter->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &dataRequirement_DateFilter->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dataRequirement_DateFilter->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", dataRequirement_DateFilter->path.size, dataRequirement_DateFilter->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_DateFilter->searchParam)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"searchParam\" : \"%.*s\"", dataRequirement_DateFilter->searchParam.size, dataRequirement_DateFilter->searchParam.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(dataRequirement_DateFilter->value_type == DataRequirement_DateFilter::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", dataRequirement_DateFilter->value.valueDateTime.size, dataRequirement_DateFilter->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(dataRequirement_DateFilter->value_type == DataRequirement_DateFilter::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, dataRequirement_DateFilter->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(dataRequirement_DateFilter->value_type == DataRequirement_DateFilter::ValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, dataRequirement_DateFilter->value.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_DataRequirement_Sort(Arena *arena, DataRequirement_Sort *dataRequirement_Sort)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&dataRequirement_Sort->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&dataRequirement_Sort->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", dataRequirement_Sort->id.size, dataRequirement_Sort->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_Sort->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dataRequirement_Sort->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &dataRequirement_Sort->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dataRequirement_Sort->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", dataRequirement_Sort->path.size, dataRequirement_Sort->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dataRequirement_Sort->direction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"direction\" : \"%.*s\"", dataRequirement_Sort->direction.size, dataRequirement_Sort->direction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Distance(Arena *arena, Distance *distance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&distance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&distance->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", distance->id.size, distance->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&distance->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < distance->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &distance->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&distance->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", distance->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&distance->comparator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comparator\" : \"%.*s\"", distance->comparator.size, distance->comparator.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&distance->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"unit\" : \"%.*s\"", distance->unit.size, distance->unit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&distance->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", distance->system.size, distance->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&distance->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", distance->code.size, distance->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Dosage(Arena *arena, Dosage *dosage)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&dosage->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&dosage->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", dosage->id.size, dosage->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dosage->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &dosage->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dosage->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dosage->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &dosage->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dosage->sequence)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, dosage->sequence);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", dosage->text.size, dosage->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->additionalInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dosage->additionalInstruction_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &dosage->additionalInstruction[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dosage->patientInstruction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"patientInstruction\" : \"%.*s\"", dosage->patientInstruction.size, dosage->patientInstruction.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->timing)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Timing(arena, dosage->timing);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(dosage->asNeeded_type == Dosage::AsNeededType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", dosage->asNeeded.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(dosage->asNeeded_type == Dosage::AsNeededType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, dosage->asNeeded.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&dosage->site)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, dosage->site);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->route)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, dosage->route);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->method)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, dosage->method);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->doseAndRate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dosage->doseAndRate_count; i++)
		{
			String8 to_add = Serialize_Dosage_DoseAndRate(arena, &dosage->doseAndRate[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dosage->maxDosePerPeriod)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Ratio(arena, dosage->maxDosePerPeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->maxDosePerAdministration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, dosage->maxDosePerAdministration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage->maxDosePerLifetime)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, dosage->maxDosePerLifetime);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Dosage_DoseAndRate(Arena *arena, Dosage_DoseAndRate *dosage_DoseAndRate)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&dosage_DoseAndRate->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&dosage_DoseAndRate->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", dosage_DoseAndRate->id.size, dosage_DoseAndRate->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&dosage_DoseAndRate->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < dosage_DoseAndRate->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &dosage_DoseAndRate->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&dosage_DoseAndRate->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, dosage_DoseAndRate->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(dosage_DoseAndRate->dose_type == Dosage_DoseAndRate::DoseType::Range)	
	{
			String8 to_add = Serialize_Range(arena, dosage_DoseAndRate->dose.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(dosage_DoseAndRate->dose_type == Dosage_DoseAndRate::DoseType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, dosage_DoseAndRate->dose.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(dosage_DoseAndRate->rate_type == Dosage_DoseAndRate::RateType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, dosage_DoseAndRate->rate.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(dosage_DoseAndRate->rate_type == Dosage_DoseAndRate::RateType::Range)	
	{
			String8 to_add = Serialize_Range(arena, dosage_DoseAndRate->rate.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(dosage_DoseAndRate->rate_type == Dosage_DoseAndRate::RateType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, dosage_DoseAndRate->rate.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Duration(Arena *arena, Duration *duration)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&duration->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&duration->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", duration->id.size, duration->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&duration->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < duration->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &duration->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&duration->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", duration->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&duration->comparator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comparator\" : \"%.*s\"", duration->comparator.size, duration->comparator.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&duration->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"unit\" : \"%.*s\"", duration->unit.size, duration->unit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&duration->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", duration->system.size, duration->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&duration->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", duration->code.size, duration->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition(Arena *arena, ElementDefinition *elementDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition->id.size, elementDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", elementDefinition->path.size, elementDefinition->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->representation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->representation_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"representation\" : \"%.*s\"", &elementDefinition->representation[i].size, &elementDefinition->representation[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition->sliceName)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sliceName\" : \"%.*s\"", elementDefinition->sliceName.size, elementDefinition->sliceName.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->sliceIsConstraining)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sliceIsConstraining\" : \"%.*s\"", elementDefinition->sliceIsConstraining ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->label)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"label\" : \"%.*s\"", elementDefinition->label.size, elementDefinition->label.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->code_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &elementDefinition->code[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition->slicing)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ElementDefinition_Slicing(arena, elementDefinition->slicing);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->short_)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"short_\" : \"%.*s\"", elementDefinition->short_.size, elementDefinition->short_.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->definition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"definition\" : \"%.*s\"", elementDefinition->definition.size, elementDefinition->definition.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", elementDefinition->comment.size, elementDefinition->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->requirements)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requirements\" : \"%.*s\"", elementDefinition->requirements.size, elementDefinition->requirements.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->alias)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->alias_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"alias\" : \"%.*s\"", &elementDefinition->alias[i].size, &elementDefinition->alias[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition->min)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"min\" : \"%d\"", elementDefinition->min);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->max)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"max\" : \"%.*s\"", elementDefinition->max.size, elementDefinition->max.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->base)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ElementDefinition_Base(arena, elementDefinition->base);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->contentReference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"contentReference\" : \"%.*s\"", elementDefinition->contentReference.size, elementDefinition->contentReference.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->type_count; i++)
		{
			String8 to_add = Serialize_ElementDefinition_Type(arena, &elementDefinition->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", elementDefinition->defaultValue.valueBase64Binary.size, elementDefinition->defaultValue.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", elementDefinition->defaultValue.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", elementDefinition->defaultValue.valueCanonical.size, elementDefinition->defaultValue.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", elementDefinition->defaultValue.valueCode.size, elementDefinition->defaultValue.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", elementDefinition->defaultValue.valueDate.size, elementDefinition->defaultValue.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", elementDefinition->defaultValue.valueDateTime.size, elementDefinition->defaultValue.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", elementDefinition->defaultValue.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", elementDefinition->defaultValue.valueId.size, elementDefinition->defaultValue.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", elementDefinition->defaultValue.valueInstant.size, elementDefinition->defaultValue.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, elementDefinition->defaultValue.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", elementDefinition->defaultValue.valueMarkdown.size, elementDefinition->defaultValue.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", elementDefinition->defaultValue.valueOid.size, elementDefinition->defaultValue.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", elementDefinition->defaultValue.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", elementDefinition->defaultValue.valueString.size, elementDefinition->defaultValue.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", elementDefinition->defaultValue.valueTime.size, elementDefinition->defaultValue.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", elementDefinition->defaultValue.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", elementDefinition->defaultValue.valueUri.size, elementDefinition->defaultValue.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", elementDefinition->defaultValue.valueUrl.size, elementDefinition->defaultValue.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", elementDefinition->defaultValue.valueUuid.size, elementDefinition->defaultValue.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Address)	
	{
			String8 to_add = Serialize_Address(arena, elementDefinition->defaultValue.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Age)	
	{
			String8 to_add = Serialize_Age(arena, elementDefinition->defaultValue.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, elementDefinition->defaultValue.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, elementDefinition->defaultValue.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, elementDefinition->defaultValue.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, elementDefinition->defaultValue.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, elementDefinition->defaultValue.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Count)	
	{
			String8 to_add = Serialize_Count(arena, elementDefinition->defaultValue.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, elementDefinition->defaultValue.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, elementDefinition->defaultValue.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, elementDefinition->defaultValue.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, elementDefinition->defaultValue.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, elementDefinition->defaultValue.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, elementDefinition->defaultValue.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, elementDefinition->defaultValue.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, elementDefinition->defaultValue.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, elementDefinition->defaultValue.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, elementDefinition->defaultValue.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, elementDefinition->defaultValue.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, elementDefinition->defaultValue.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, elementDefinition->defaultValue.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, elementDefinition->defaultValue.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, elementDefinition->defaultValue.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, elementDefinition->defaultValue.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, elementDefinition->defaultValue.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, elementDefinition->defaultValue.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, elementDefinition->defaultValue.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, elementDefinition->defaultValue.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, elementDefinition->defaultValue.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, elementDefinition->defaultValue.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->defaultValue_type == ElementDefinition::DefaultValueType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, elementDefinition->defaultValue.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&elementDefinition->meaningWhenMissing)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"meaningWhenMissing\" : \"%.*s\"", elementDefinition->meaningWhenMissing.size, elementDefinition->meaningWhenMissing.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->orderMeaning)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"orderMeaning\" : \"%.*s\"", elementDefinition->orderMeaning.size, elementDefinition->orderMeaning.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", elementDefinition->fixed.valueBase64Binary.size, elementDefinition->fixed.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", elementDefinition->fixed.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", elementDefinition->fixed.valueCanonical.size, elementDefinition->fixed.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", elementDefinition->fixed.valueCode.size, elementDefinition->fixed.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", elementDefinition->fixed.valueDate.size, elementDefinition->fixed.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", elementDefinition->fixed.valueDateTime.size, elementDefinition->fixed.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", elementDefinition->fixed.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", elementDefinition->fixed.valueId.size, elementDefinition->fixed.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", elementDefinition->fixed.valueInstant.size, elementDefinition->fixed.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, elementDefinition->fixed.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", elementDefinition->fixed.valueMarkdown.size, elementDefinition->fixed.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", elementDefinition->fixed.valueOid.size, elementDefinition->fixed.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", elementDefinition->fixed.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", elementDefinition->fixed.valueString.size, elementDefinition->fixed.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", elementDefinition->fixed.valueTime.size, elementDefinition->fixed.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", elementDefinition->fixed.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", elementDefinition->fixed.valueUri.size, elementDefinition->fixed.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", elementDefinition->fixed.valueUrl.size, elementDefinition->fixed.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", elementDefinition->fixed.valueUuid.size, elementDefinition->fixed.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Address)	
	{
			String8 to_add = Serialize_Address(arena, elementDefinition->fixed.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Age)	
	{
			String8 to_add = Serialize_Age(arena, elementDefinition->fixed.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, elementDefinition->fixed.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, elementDefinition->fixed.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, elementDefinition->fixed.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, elementDefinition->fixed.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, elementDefinition->fixed.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Count)	
	{
			String8 to_add = Serialize_Count(arena, elementDefinition->fixed.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, elementDefinition->fixed.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, elementDefinition->fixed.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, elementDefinition->fixed.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, elementDefinition->fixed.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Money)	
	{
			String8 to_add = Serialize_Money(arena, elementDefinition->fixed.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Period)	
	{
			String8 to_add = Serialize_Period(arena, elementDefinition->fixed.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, elementDefinition->fixed.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Range)	
	{
			String8 to_add = Serialize_Range(arena, elementDefinition->fixed.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, elementDefinition->fixed.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, elementDefinition->fixed.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, elementDefinition->fixed.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, elementDefinition->fixed.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, elementDefinition->fixed.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, elementDefinition->fixed.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, elementDefinition->fixed.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, elementDefinition->fixed.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, elementDefinition->fixed.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, elementDefinition->fixed.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, elementDefinition->fixed.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, elementDefinition->fixed.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, elementDefinition->fixed.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, elementDefinition->fixed.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->fixed_type == ElementDefinition::FixedType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, elementDefinition->fixed.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", elementDefinition->pattern.valueBase64Binary.size, elementDefinition->pattern.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", elementDefinition->pattern.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", elementDefinition->pattern.valueCanonical.size, elementDefinition->pattern.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", elementDefinition->pattern.valueCode.size, elementDefinition->pattern.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", elementDefinition->pattern.valueDate.size, elementDefinition->pattern.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", elementDefinition->pattern.valueDateTime.size, elementDefinition->pattern.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", elementDefinition->pattern.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", elementDefinition->pattern.valueId.size, elementDefinition->pattern.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", elementDefinition->pattern.valueInstant.size, elementDefinition->pattern.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, elementDefinition->pattern.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", elementDefinition->pattern.valueMarkdown.size, elementDefinition->pattern.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", elementDefinition->pattern.valueOid.size, elementDefinition->pattern.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", elementDefinition->pattern.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", elementDefinition->pattern.valueString.size, elementDefinition->pattern.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", elementDefinition->pattern.valueTime.size, elementDefinition->pattern.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", elementDefinition->pattern.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", elementDefinition->pattern.valueUri.size, elementDefinition->pattern.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", elementDefinition->pattern.valueUrl.size, elementDefinition->pattern.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", elementDefinition->pattern.valueUuid.size, elementDefinition->pattern.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Address)	
	{
			String8 to_add = Serialize_Address(arena, elementDefinition->pattern.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Age)	
	{
			String8 to_add = Serialize_Age(arena, elementDefinition->pattern.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, elementDefinition->pattern.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, elementDefinition->pattern.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, elementDefinition->pattern.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, elementDefinition->pattern.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, elementDefinition->pattern.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Count)	
	{
			String8 to_add = Serialize_Count(arena, elementDefinition->pattern.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, elementDefinition->pattern.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, elementDefinition->pattern.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, elementDefinition->pattern.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, elementDefinition->pattern.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Money)	
	{
			String8 to_add = Serialize_Money(arena, elementDefinition->pattern.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Period)	
	{
			String8 to_add = Serialize_Period(arena, elementDefinition->pattern.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, elementDefinition->pattern.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Range)	
	{
			String8 to_add = Serialize_Range(arena, elementDefinition->pattern.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, elementDefinition->pattern.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, elementDefinition->pattern.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, elementDefinition->pattern.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, elementDefinition->pattern.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, elementDefinition->pattern.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, elementDefinition->pattern.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, elementDefinition->pattern.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, elementDefinition->pattern.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, elementDefinition->pattern.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, elementDefinition->pattern.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, elementDefinition->pattern.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, elementDefinition->pattern.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, elementDefinition->pattern.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, elementDefinition->pattern.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->pattern_type == ElementDefinition::PatternType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, elementDefinition->pattern.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&elementDefinition->example)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->example_count; i++)
		{
			String8 to_add = Serialize_ElementDefinition_Example(arena, &elementDefinition->example[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(elementDefinition->minValue_type == ElementDefinition::MinValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", elementDefinition->minValue.valueDate.size, elementDefinition->minValue.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", elementDefinition->minValue.valueDateTime.size, elementDefinition->minValue.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", elementDefinition->minValue.valueInstant.size, elementDefinition->minValue.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", elementDefinition->minValue.valueTime.size, elementDefinition->minValue.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", elementDefinition->minValue.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, elementDefinition->minValue.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", elementDefinition->minValue.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", elementDefinition->minValue.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->minValue_type == ElementDefinition::MinValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, elementDefinition->minValue.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", elementDefinition->maxValue.valueDate.size, elementDefinition->maxValue.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", elementDefinition->maxValue.valueDateTime.size, elementDefinition->maxValue.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", elementDefinition->maxValue.valueInstant.size, elementDefinition->maxValue.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", elementDefinition->maxValue.valueTime.size, elementDefinition->maxValue.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", elementDefinition->maxValue.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, elementDefinition->maxValue.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", elementDefinition->maxValue.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", elementDefinition->maxValue.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition->maxValue_type == ElementDefinition::MaxValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, elementDefinition->maxValue.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&elementDefinition->maxLength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, elementDefinition->maxLength);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->condition_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"condition\" : \"%.*s\"", &elementDefinition->condition[i].size, &elementDefinition->condition[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition->constraint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->constraint_count; i++)
		{
			String8 to_add = Serialize_ElementDefinition_Constraint(arena, &elementDefinition->constraint[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition->mustSupport)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"mustSupport\" : \"%.*s\"", elementDefinition->mustSupport ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->isModifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isModifier\" : \"%.*s\"", elementDefinition->isModifier ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->isModifierReason)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isModifierReason\" : \"%.*s\"", elementDefinition->isModifierReason.size, elementDefinition->isModifierReason.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->isSummary)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"isSummary\" : \"%.*s\"", elementDefinition->isSummary ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->binding)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_ElementDefinition_Binding(arena, elementDefinition->binding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition->mapping)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition->mapping_count; i++)
		{
			String8 to_add = Serialize_ElementDefinition_Mapping(arena, &elementDefinition->mapping[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Slicing(Arena *arena, ElementDefinition_Slicing *elementDefinition_Slicing)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Slicing->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Slicing->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Slicing->id.size, elementDefinition_Slicing->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Slicing->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Slicing->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Slicing->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Slicing->discriminator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Slicing->discriminator_count; i++)
		{
			String8 to_add = Serialize_ElementDefinition_Slicing_Discriminator(arena, &elementDefinition_Slicing->discriminator[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Slicing->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", elementDefinition_Slicing->description.size, elementDefinition_Slicing->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Slicing->ordered)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"ordered\" : \"%.*s\"", elementDefinition_Slicing->ordered ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Slicing->rules)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"rules\" : \"%.*s\"", elementDefinition_Slicing->rules.size, elementDefinition_Slicing->rules.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Slicing_Discriminator(Arena *arena, ElementDefinition_Slicing_Discriminator *elementDefinition_Slicing_Discriminator)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Slicing_Discriminator->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Slicing_Discriminator->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Slicing_Discriminator->id.size, elementDefinition_Slicing_Discriminator->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Slicing_Discriminator->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Slicing_Discriminator->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Slicing_Discriminator->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Slicing_Discriminator->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", elementDefinition_Slicing_Discriminator->type.size, elementDefinition_Slicing_Discriminator->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Slicing_Discriminator->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", elementDefinition_Slicing_Discriminator->path.size, elementDefinition_Slicing_Discriminator->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Base(Arena *arena, ElementDefinition_Base *elementDefinition_Base)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Base->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Base->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Base->id.size, elementDefinition_Base->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Base->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Base->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Base->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Base->path)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"path\" : \"%.*s\"", elementDefinition_Base->path.size, elementDefinition_Base->path.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Base->min)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"min\" : \"%d\"", elementDefinition_Base->min);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Base->max)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"max\" : \"%.*s\"", elementDefinition_Base->max.size, elementDefinition_Base->max.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Type(Arena *arena, ElementDefinition_Type *elementDefinition_Type)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Type->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Type->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Type->id.size, elementDefinition_Type->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Type->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Type->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Type->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Type->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", elementDefinition_Type->code.size, elementDefinition_Type->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Type->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Type->profile_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", &elementDefinition_Type->profile[i].size, &elementDefinition_Type->profile[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Type->targetProfile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Type->targetProfile_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"targetProfile\" : \"%.*s\"", &elementDefinition_Type->targetProfile[i].size, &elementDefinition_Type->targetProfile[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Type->aggregation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Type->aggregation_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"aggregation\" : \"%.*s\"", &elementDefinition_Type->aggregation[i].size, &elementDefinition_Type->aggregation[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Type->versioning)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"versioning\" : \"%.*s\"", elementDefinition_Type->versioning.size, elementDefinition_Type->versioning.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Example(Arena *arena, ElementDefinition_Example *elementDefinition_Example)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Example->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Example->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Example->id.size, elementDefinition_Example->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Example->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Example->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Example->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Example->label)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"label\" : \"%.*s\"", elementDefinition_Example->label.size, elementDefinition_Example->label.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", elementDefinition_Example->value.valueBase64Binary.size, elementDefinition_Example->value.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", elementDefinition_Example->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", elementDefinition_Example->value.valueCanonical.size, elementDefinition_Example->value.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", elementDefinition_Example->value.valueCode.size, elementDefinition_Example->value.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", elementDefinition_Example->value.valueDate.size, elementDefinition_Example->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", elementDefinition_Example->value.valueDateTime.size, elementDefinition_Example->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", elementDefinition_Example->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", elementDefinition_Example->value.valueId.size, elementDefinition_Example->value.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", elementDefinition_Example->value.valueInstant.size, elementDefinition_Example->value.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, elementDefinition_Example->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", elementDefinition_Example->value.valueMarkdown.size, elementDefinition_Example->value.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", elementDefinition_Example->value.valueOid.size, elementDefinition_Example->value.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", elementDefinition_Example->value.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", elementDefinition_Example->value.valueString.size, elementDefinition_Example->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", elementDefinition_Example->value.valueTime.size, elementDefinition_Example->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", elementDefinition_Example->value.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", elementDefinition_Example->value.valueUri.size, elementDefinition_Example->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", elementDefinition_Example->value.valueUrl.size, elementDefinition_Example->value.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", elementDefinition_Example->value.valueUuid.size, elementDefinition_Example->value.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Address)	
	{
			String8 to_add = Serialize_Address(arena, elementDefinition_Example->value.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Age)	
	{
			String8 to_add = Serialize_Age(arena, elementDefinition_Example->value.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, elementDefinition_Example->value.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, elementDefinition_Example->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, elementDefinition_Example->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, elementDefinition_Example->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, elementDefinition_Example->value.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Count)	
	{
			String8 to_add = Serialize_Count(arena, elementDefinition_Example->value.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, elementDefinition_Example->value.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, elementDefinition_Example->value.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, elementDefinition_Example->value.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, elementDefinition_Example->value.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, elementDefinition_Example->value.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, elementDefinition_Example->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, elementDefinition_Example->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, elementDefinition_Example->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, elementDefinition_Example->value.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, elementDefinition_Example->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, elementDefinition_Example->value.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, elementDefinition_Example->value.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, elementDefinition_Example->value.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, elementDefinition_Example->value.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, elementDefinition_Example->value.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, elementDefinition_Example->value.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, elementDefinition_Example->value.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, elementDefinition_Example->value.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, elementDefinition_Example->value.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, elementDefinition_Example->value.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, elementDefinition_Example->value.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, elementDefinition_Example->value.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(elementDefinition_Example->value_type == ElementDefinition_Example::ValueType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, elementDefinition_Example->value.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Constraint(Arena *arena, ElementDefinition_Constraint *elementDefinition_Constraint)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Constraint->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Constraint->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Constraint->id.size, elementDefinition_Constraint->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Constraint->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Constraint->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Constraint->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Constraint->key)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"key\" : \"%.*s\"", elementDefinition_Constraint->key.size, elementDefinition_Constraint->key.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Constraint->requirements)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"requirements\" : \"%.*s\"", elementDefinition_Constraint->requirements.size, elementDefinition_Constraint->requirements.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Constraint->severity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"severity\" : \"%.*s\"", elementDefinition_Constraint->severity.size, elementDefinition_Constraint->severity.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Constraint->human)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"human\" : \"%.*s\"", elementDefinition_Constraint->human.size, elementDefinition_Constraint->human.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Constraint->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", elementDefinition_Constraint->expression.size, elementDefinition_Constraint->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Constraint->xpath)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"xpath\" : \"%.*s\"", elementDefinition_Constraint->xpath.size, elementDefinition_Constraint->xpath.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Constraint->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"source\" : \"%.*s\"", elementDefinition_Constraint->source.size, elementDefinition_Constraint->source.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Binding(Arena *arena, ElementDefinition_Binding *elementDefinition_Binding)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Binding->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Binding->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Binding->id.size, elementDefinition_Binding->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Binding->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Binding->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Binding->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Binding->strength)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"strength\" : \"%.*s\"", elementDefinition_Binding->strength.size, elementDefinition_Binding->strength.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Binding->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", elementDefinition_Binding->description.size, elementDefinition_Binding->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Binding->valueSet)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"valueSet\" : \"%.*s\"", elementDefinition_Binding->valueSet.size, elementDefinition_Binding->valueSet.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ElementDefinition_Mapping(Arena *arena, ElementDefinition_Mapping *elementDefinition_Mapping)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementDefinition_Mapping->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&elementDefinition_Mapping->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", elementDefinition_Mapping->id.size, elementDefinition_Mapping->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Mapping->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < elementDefinition_Mapping->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &elementDefinition_Mapping->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&elementDefinition_Mapping->identity)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"identity\" : \"%.*s\"", elementDefinition_Mapping->identity.size, elementDefinition_Mapping->identity.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Mapping->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", elementDefinition_Mapping->language.size, elementDefinition_Mapping->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Mapping->map)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"map\" : \"%.*s\"", elementDefinition_Mapping->map.size, elementDefinition_Mapping->map.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&elementDefinition_Mapping->comment)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comment\" : \"%.*s\"", elementDefinition_Mapping->comment.size, elementDefinition_Mapping->comment.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Expression(Arena *arena, Expression *expression)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&expression->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&expression->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", expression->id.size, expression->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&expression->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < expression->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &expression->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&expression->description)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"description\" : \"%.*s\"", expression->description.size, expression->description.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&expression->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", expression->name.size, expression->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&expression->language)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"language\" : \"%.*s\"", expression->language.size, expression->language.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&expression->expression)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"expression\" : \"%.*s\"", expression->expression.size, expression->expression.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&expression->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"reference\" : \"%.*s\"", expression->reference.size, expression->reference.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Extension(Arena *arena, Extension *extension)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&extension->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&extension->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", extension->id.size, extension->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&extension->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < extension->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &extension->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&extension->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", extension->url.size, extension->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(extension->value_type == Extension::ValueType::fhir_base64Binary)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBase64Binary\" : \"%.*s\"", extension->value.valueBase64Binary.size, extension->value.valueBase64Binary.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_boolean)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueBoolean\" : \"%.*s\"", extension->value.valueBoolean ? Str8Lit("true") : Str8Lit("false"));
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_canonical)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCanonical\" : \"%.*s\"", extension->value.valueCanonical.size, extension->value.valueCanonical.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_code)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueCode\" : \"%.*s\"", extension->value.valueCode.size, extension->value.valueCode.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", extension->value.valueDate.size, extension->value.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", extension->value.valueDateTime.size, extension->value.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_decimal)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDecimal\" : \"%d\"", extension->value.valueDecimal);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_id)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueId\" : \"%.*s\"", extension->value.valueId.size, extension->value.valueId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_instant)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueInstant\" : \"%.*s\"", extension->value.valueInstant.size, extension->value.valueInstant.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Integer)	
	{
			String8 to_add = Serialize_Integer(arena, extension->value.valueInteger);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_markdown)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueMarkdown\" : \"%.*s\"", extension->value.valueMarkdown.size, extension->value.valueMarkdown.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_oid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueOid\" : \"%.*s\"", extension->value.valueOid.size, extension->value.valueOid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_positiveInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valuePositiveInt\" : \"%d\"", extension->value.valuePositiveInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", extension->value.valueString.size, extension->value.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_time)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueTime\" : \"%.*s\"", extension->value.valueTime.size, extension->value.valueTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_unsignedInt)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUnsignedInt\" : \"%d\"", extension->value.valueUnsignedInt);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_uri)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUri\" : \"%.*s\"", extension->value.valueUri.size, extension->value.valueUri.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_url)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUrl\" : \"%.*s\"", extension->value.valueUrl.size, extension->value.valueUrl.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::fhir_uuid)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueUuid\" : \"%.*s\"", extension->value.valueUuid.size, extension->value.valueUuid.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Address)	
	{
			String8 to_add = Serialize_Address(arena, extension->value.valueAddress);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Age)	
	{
			String8 to_add = Serialize_Age(arena, extension->value.valueAge);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Annotation)	
	{
			String8 to_add = Serialize_Annotation(arena, extension->value.valueAnnotation);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Attachment)	
	{
			String8 to_add = Serialize_Attachment(arena, extension->value.valueAttachment);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, extension->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Coding)	
	{
			String8 to_add = Serialize_Coding(arena, extension->value.valueCoding);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::ContactPoint)	
	{
			String8 to_add = Serialize_ContactPoint(arena, extension->value.valueContactPoint);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Count)	
	{
			String8 to_add = Serialize_Count(arena, extension->value.valueCount);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Distance)	
	{
			String8 to_add = Serialize_Distance(arena, extension->value.valueDistance);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, extension->value.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::HumanName)	
	{
			String8 to_add = Serialize_HumanName(arena, extension->value.valueHumanName);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Identifier)	
	{
			String8 to_add = Serialize_Identifier(arena, extension->value.valueIdentifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Money)	
	{
			String8 to_add = Serialize_Money(arena, extension->value.valueMoney);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Period)	
	{
			String8 to_add = Serialize_Period(arena, extension->value.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, extension->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, extension->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Ratio)	
	{
			String8 to_add = Serialize_Ratio(arena, extension->value.valueRatio);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, extension->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::SampledData)	
	{
			String8 to_add = Serialize_SampledData(arena, extension->value.valueSampledData);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Signature)	
	{
			String8 to_add = Serialize_Signature(arena, extension->value.valueSignature);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, extension->value.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::ContactDetail)	
	{
			String8 to_add = Serialize_ContactDetail(arena, extension->value.valueContactDetail);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Contributor)	
	{
			String8 to_add = Serialize_Contributor(arena, extension->value.valueContributor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::DataRequirement)	
	{
			String8 to_add = Serialize_DataRequirement(arena, extension->value.valueDataRequirement);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Expression)	
	{
			String8 to_add = Serialize_Expression(arena, extension->value.valueExpression);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::ParameterDefinition)	
	{
			String8 to_add = Serialize_ParameterDefinition(arena, extension->value.valueParameterDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::RelatedArtifact)	
	{
			String8 to_add = Serialize_RelatedArtifact(arena, extension->value.valueRelatedArtifact);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::TriggerDefinition)	
	{
			String8 to_add = Serialize_TriggerDefinition(arena, extension->value.valueTriggerDefinition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::UsageContext)	
	{
			String8 to_add = Serialize_UsageContext(arena, extension->value.valueUsageContext);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Dosage)	
	{
			String8 to_add = Serialize_Dosage(arena, extension->value.valueDosage);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(extension->value_type == Extension::ValueType::Meta)	
	{
			String8 to_add = Serialize_Meta(arena, extension->value.valueMeta);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_HumanName(Arena *arena, HumanName *humanName)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&humanName->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&humanName->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", humanName->id.size, humanName->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&humanName->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < humanName->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &humanName->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&humanName->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", humanName->use.size, humanName->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&humanName->text)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"text\" : \"%.*s\"", humanName->text.size, humanName->text.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&humanName->family)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"family\" : \"%.*s\"", humanName->family.size, humanName->family.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&humanName->given)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < humanName->given_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"given\" : \"%.*s\"", &humanName->given[i].size, &humanName->given[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&humanName->prefix)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < humanName->prefix_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"prefix\" : \"%.*s\"", &humanName->prefix[i].size, &humanName->prefix[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&humanName->suffix)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < humanName->suffix_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"suffix\" : \"%.*s\"", &humanName->suffix[i].size, &humanName->suffix[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&humanName->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, humanName->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Identifier(Arena *arena, Identifier *identifier)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&identifier->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&identifier->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", identifier->id.size, identifier->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&identifier->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < identifier->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &identifier->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&identifier->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", identifier->use.size, identifier->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&identifier->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, identifier->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&identifier->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", identifier->system.size, identifier->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&identifier->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%.*s\"", identifier->value.size, identifier->value.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&identifier->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, identifier->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&identifier->assigner)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, identifier->assigner);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MarketingStatus(Arena *arena, MarketingStatus *marketingStatus)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&marketingStatus->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&marketingStatus->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", marketingStatus->id.size, marketingStatus->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&marketingStatus->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < marketingStatus->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &marketingStatus->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&marketingStatus->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < marketingStatus->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &marketingStatus->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&marketingStatus->country)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, marketingStatus->country);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&marketingStatus->jurisdiction)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, marketingStatus->jurisdiction);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&marketingStatus->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, marketingStatus->status);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&marketingStatus->dateRange)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Period(arena, marketingStatus->dateRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&marketingStatus->restoreDate)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"restoreDate\" : \"%.*s\"", marketingStatus->restoreDate.size, marketingStatus->restoreDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Meta(Arena *arena, Meta *meta)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&meta->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&meta->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", meta->id.size, meta->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&meta->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < meta->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &meta->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&meta->versionId)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"versionId\" : \"%.*s\"", meta->versionId.size, meta->versionId.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&meta->lastUpdated)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lastUpdated\" : \"%.*s\"", meta->lastUpdated.size, meta->lastUpdated.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&meta->source)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"source\" : \"%.*s\"", meta->source.size, meta->source.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&meta->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < meta->profile_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", &meta->profile[i].size, &meta->profile[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&meta->security)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < meta->security_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &meta->security[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&meta->tag)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < meta->tag_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &meta->tag[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Money(Arena *arena, Money *money)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&money->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&money->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", money->id.size, money->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&money->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < money->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &money->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&money->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", money->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&money->currency)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"currency\" : \"%.*s\"", money->currency.size, money->currency.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Narrative(Arena *arena, Narrative *narrative)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&narrative->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&narrative->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", narrative->id.size, narrative->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&narrative->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < narrative->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &narrative->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&narrative->status)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"status\" : \"%.*s\"", narrative->status.size, narrative->status.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&narrative->div)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Xhtml(arena, narrative->div);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ParameterDefinition(Arena *arena, ParameterDefinition *parameterDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&parameterDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&parameterDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", parameterDefinition->id.size, parameterDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameterDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < parameterDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &parameterDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&parameterDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", parameterDefinition->name.size, parameterDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameterDefinition->use)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"use\" : \"%.*s\"", parameterDefinition->use.size, parameterDefinition->use.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameterDefinition->min)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Integer(arena, parameterDefinition->min);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameterDefinition->max)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"max\" : \"%.*s\"", parameterDefinition->max.size, parameterDefinition->max.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameterDefinition->documentation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"documentation\" : \"%.*s\"", parameterDefinition->documentation.size, parameterDefinition->documentation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameterDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", parameterDefinition->type.size, parameterDefinition->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&parameterDefinition->profile)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"profile\" : \"%.*s\"", parameterDefinition->profile.size, parameterDefinition->profile.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Period(Arena *arena, Period *period)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&period->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&period->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", period->id.size, period->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&period->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < period->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &period->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&period->start)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"start\" : \"%.*s\"", period->start.size, period->start.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&period->end)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"end\" : \"%.*s\"", period->end.size, period->end.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Population(Arena *arena, Population *population)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&population->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&population->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", population->id.size, population->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&population->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < population->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &population->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&population->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < population->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &population->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(population->age_type == Population::AgeType::Range)	
	{
			String8 to_add = Serialize_Range(arena, population->age.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(population->age_type == Population::AgeType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, population->age.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&population->gender)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, population->gender);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&population->race)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, population->race);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&population->physiologicalCondition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, population->physiologicalCondition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ProdCharacteristic(Arena *arena, ProdCharacteristic *prodCharacteristic)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&prodCharacteristic->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&prodCharacteristic->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", prodCharacteristic->id.size, prodCharacteristic->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < prodCharacteristic->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &prodCharacteristic->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&prodCharacteristic->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < prodCharacteristic->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &prodCharacteristic->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&prodCharacteristic->height)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, prodCharacteristic->height);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->width)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, prodCharacteristic->width);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->depth)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, prodCharacteristic->depth);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->weight)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, prodCharacteristic->weight);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->nominalVolume)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, prodCharacteristic->nominalVolume);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->externalDiameter)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, prodCharacteristic->externalDiameter);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->shape)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"shape\" : \"%.*s\"", prodCharacteristic->shape.size, prodCharacteristic->shape.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&prodCharacteristic->color)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < prodCharacteristic->color_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"color\" : \"%.*s\"", &prodCharacteristic->color[i].size, &prodCharacteristic->color[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&prodCharacteristic->imprint)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < prodCharacteristic->imprint_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"imprint\" : \"%.*s\"", &prodCharacteristic->imprint[i].size, &prodCharacteristic->imprint[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&prodCharacteristic->image)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < prodCharacteristic->image_count; i++)
		{
			String8 to_add = Serialize_Attachment(arena, &prodCharacteristic->image[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&prodCharacteristic->scoring)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, prodCharacteristic->scoring);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_ProductShelfLife(Arena *arena, ProductShelfLife *productShelfLife)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&productShelfLife->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&productShelfLife->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", productShelfLife->id.size, productShelfLife->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&productShelfLife->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < productShelfLife->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &productShelfLife->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&productShelfLife->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < productShelfLife->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &productShelfLife->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&productShelfLife->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, productShelfLife->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&productShelfLife->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, productShelfLife->type);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&productShelfLife->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, productShelfLife->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&productShelfLife->specialPrecautionsForStorage)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < productShelfLife->specialPrecautionsForStorage_count; i++)
		{
			String8 to_add = Serialize_CodeableConcept(arena, &productShelfLife->specialPrecautionsForStorage[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Quantity(Arena *arena, Quantity *quantity)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&quantity->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&quantity->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", quantity->id.size, quantity->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&quantity->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < quantity->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &quantity->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&quantity->value)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"value\" : \"%d\"", quantity->value);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&quantity->comparator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"comparator\" : \"%.*s\"", quantity->comparator.size, quantity->comparator.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&quantity->unit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"unit\" : \"%.*s\"", quantity->unit.size, quantity->unit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&quantity->system)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"system\" : \"%.*s\"", quantity->system.size, quantity->system.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&quantity->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"code\" : \"%.*s\"", quantity->code.size, quantity->code.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Range(Arena *arena, Range *range)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&range->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&range->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", range->id.size, range->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&range->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < range->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &range->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&range->low)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, range->low);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&range->high)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, range->high);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Ratio(Arena *arena, Ratio *ratio)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&ratio->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&ratio->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", ratio->id.size, ratio->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&ratio->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < ratio->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &ratio->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&ratio->numerator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, ratio->numerator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&ratio->denominator)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, ratio->denominator);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Reference(Arena *arena, Reference *reference)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&reference->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&reference->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", reference->id.size, reference->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&reference->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < reference->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &reference->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&reference->reference)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"reference\" : \"%.*s\"", reference->reference.size, reference->reference.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&reference->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", reference->type.size, reference->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&reference->identifier)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Identifier(arena, reference->identifier);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&reference->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", reference->display.size, reference->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_RelatedArtifact(Arena *arena, RelatedArtifact *relatedArtifact)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&relatedArtifact->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&relatedArtifact->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", relatedArtifact->id.size, relatedArtifact->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedArtifact->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < relatedArtifact->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &relatedArtifact->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&relatedArtifact->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", relatedArtifact->type.size, relatedArtifact->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedArtifact->label)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"label\" : \"%.*s\"", relatedArtifact->label.size, relatedArtifact->label.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedArtifact->display)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"display\" : \"%.*s\"", relatedArtifact->display.size, relatedArtifact->display.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedArtifact->citation)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"citation\" : \"%.*s\"", relatedArtifact->citation.size, relatedArtifact->citation.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedArtifact->url)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"url\" : \"%.*s\"", relatedArtifact->url.size, relatedArtifact->url.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedArtifact->document)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Attachment(arena, relatedArtifact->document);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&relatedArtifact->resource)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"resource\" : \"%.*s\"", relatedArtifact->resource.size, relatedArtifact->resource.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SampledData(Arena *arena, SampledData *sampledData)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&sampledData->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&sampledData->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", sampledData->id.size, sampledData->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&sampledData->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < sampledData->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &sampledData->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&sampledData->origin)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, sampledData->origin);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&sampledData->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"period\" : \"%d\"", sampledData->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&sampledData->factor)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"factor\" : \"%d\"", sampledData->factor);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&sampledData->lowerLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"lowerLimit\" : \"%d\"", sampledData->lowerLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&sampledData->upperLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"upperLimit\" : \"%d\"", sampledData->upperLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&sampledData->dimensions)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"dimensions\" : \"%d\"", sampledData->dimensions);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&sampledData->data)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"data\" : \"%.*s\"", sampledData->data.size, sampledData->data.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Signature(Arena *arena, Signature *signature)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&signature->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&signature->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", signature->id.size, signature->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&signature->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < signature->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &signature->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&signature->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < signature->type_count; i++)
		{
			String8 to_add = Serialize_Coding(arena, &signature->type[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&signature->when)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"when\" : \"%.*s\"", signature->when.size, signature->when.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&signature->who)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, signature->who);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&signature->onBehalfOf)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Reference(arena, signature->onBehalfOf);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&signature->targetFormat)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"targetFormat\" : \"%.*s\"", signature->targetFormat.size, signature->targetFormat.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&signature->sigFormat)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"sigFormat\" : \"%.*s\"", signature->sigFormat.size, signature->sigFormat.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&signature->data)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"data\" : \"%.*s\"", signature->data.size, signature->data.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceAmount(Arena *arena, SubstanceAmount *substanceAmount)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceAmount->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceAmount->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceAmount->id.size, substanceAmount->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceAmount->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceAmount->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceAmount->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceAmount->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceAmount->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceAmount->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(substanceAmount->amount_type == SubstanceAmount::AmountType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, substanceAmount->amount.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceAmount->amount_type == SubstanceAmount::AmountType::Range)	
	{
			String8 to_add = Serialize_Range(arena, substanceAmount->amount.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(substanceAmount->amount_type == SubstanceAmount::AmountType::fhir_string)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueString\" : \"%.*s\"", substanceAmount->amount.valueString.size, substanceAmount->amount.valueString.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&substanceAmount->amountType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, substanceAmount->amountType);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceAmount->amountText)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"amountText\" : \"%.*s\"", substanceAmount->amountText.size, substanceAmount->amountText.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceAmount->referenceRange)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_SubstanceAmount_ReferenceRange(arena, substanceAmount->referenceRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SubstanceAmount_ReferenceRange(Arena *arena, SubstanceAmount_ReferenceRange *substanceAmount_ReferenceRange)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&substanceAmount_ReferenceRange->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&substanceAmount_ReferenceRange->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", substanceAmount_ReferenceRange->id.size, substanceAmount_ReferenceRange->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceAmount_ReferenceRange->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < substanceAmount_ReferenceRange->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &substanceAmount_ReferenceRange->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&substanceAmount_ReferenceRange->lowLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, substanceAmount_ReferenceRange->lowLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&substanceAmount_ReferenceRange->highLimit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Quantity(arena, substanceAmount_ReferenceRange->highLimit);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Timing(Arena *arena, Timing *timing)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&timing->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&timing->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", timing->id.size, timing->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < timing->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &timing->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&timing->modifierExtension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < timing->modifierExtension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &timing->modifierExtension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&timing->event)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < timing->event_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"event\" : \"%.*s\"", &timing->event[i].size, &timing->event[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&timing->repeat)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Timing_Repeat(arena, timing->repeat);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_CodeableConcept(arena, timing->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Timing_Repeat(Arena *arena, Timing_Repeat *timing_Repeat)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&timing_Repeat->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&timing_Repeat->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", timing_Repeat->id.size, timing_Repeat->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < timing_Repeat->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &timing_Repeat->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(timing_Repeat->bounds_type == Timing_Repeat::BoundsType::Duration)	
	{
			String8 to_add = Serialize_Duration(arena, timing_Repeat->bounds.valueDuration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(timing_Repeat->bounds_type == Timing_Repeat::BoundsType::Range)	
	{
			String8 to_add = Serialize_Range(arena, timing_Repeat->bounds.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(timing_Repeat->bounds_type == Timing_Repeat::BoundsType::Period)	
	{
			String8 to_add = Serialize_Period(arena, timing_Repeat->bounds.valuePeriod);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&timing_Repeat->count)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"count\" : \"%d\"", timing_Repeat->count);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->countMax)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"countMax\" : \"%d\"", timing_Repeat->countMax);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->duration)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"duration\" : \"%d\"", timing_Repeat->duration);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->durationMax)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"durationMax\" : \"%d\"", timing_Repeat->durationMax);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->durationUnit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"durationUnit\" : \"%.*s\"", timing_Repeat->durationUnit.size, timing_Repeat->durationUnit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->frequency)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"frequency\" : \"%d\"", timing_Repeat->frequency);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->frequencyMax)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"frequencyMax\" : \"%d\"", timing_Repeat->frequencyMax);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->period)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"period\" : \"%d\"", timing_Repeat->period);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->periodMax)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"periodMax\" : \"%d\"", timing_Repeat->periodMax);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->periodUnit)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"periodUnit\" : \"%.*s\"", timing_Repeat->periodUnit.size, timing_Repeat->periodUnit.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&timing_Repeat->dayOfWeek)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < timing_Repeat->dayOfWeek_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"dayOfWeek\" : \"%.*s\"", &timing_Repeat->dayOfWeek[i].size, &timing_Repeat->dayOfWeek[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&timing_Repeat->timeOfDay)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < timing_Repeat->timeOfDay_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"timeOfDay\" : \"%.*s\"", &timing_Repeat->timeOfDay[i].size, &timing_Repeat->timeOfDay[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&timing_Repeat->when)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < timing_Repeat->when_count; i++)
		{
			String8 to_add = PushStr8F(scratch.arena, "\"when\" : \"%.*s\"", &timing_Repeat->when[i].size, &timing_Repeat->when[i].str);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&timing_Repeat->offset)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"offset\" : \"%d\"", timing_Repeat->offset);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_TriggerDefinition(Arena *arena, TriggerDefinition *triggerDefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&triggerDefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&triggerDefinition->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", triggerDefinition->id.size, triggerDefinition->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&triggerDefinition->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < triggerDefinition->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &triggerDefinition->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&triggerDefinition->type)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"type\" : \"%.*s\"", triggerDefinition->type.size, triggerDefinition->type.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&triggerDefinition->name)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"name\" : \"%.*s\"", triggerDefinition->name.size, triggerDefinition->name.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(triggerDefinition->timing_type == TriggerDefinition::TimingType::Timing)	
	{
			String8 to_add = Serialize_Timing(arena, triggerDefinition->timing.valueTiming);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(triggerDefinition->timing_type == TriggerDefinition::TimingType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, triggerDefinition->timing.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(triggerDefinition->timing_type == TriggerDefinition::TimingType::fhir_date)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDate\" : \"%.*s\"", triggerDefinition->timing.valueDate.size, triggerDefinition->timing.valueDate.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(triggerDefinition->timing_type == TriggerDefinition::TimingType::fhir_dateTime)	
	{
			String8 to_add = PushStr8F(scratch.arena, "\"valueDateTime\" : \"%.*s\"", triggerDefinition->timing.valueDateTime.size, triggerDefinition->timing.valueDateTime.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


	if(*(boolean*)&triggerDefinition->data)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < triggerDefinition->data_count; i++)
		{
			String8 to_add = Serialize_DataRequirement(arena, &triggerDefinition->data[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&triggerDefinition->condition)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Expression(arena, triggerDefinition->condition);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_UsageContext(Arena *arena, UsageContext *usageContext)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&usageContext->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
	if(*(boolean*)&usageContext->id)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = PushStr8F(scratch.arena, "\"id\" : \"%.*s\"", usageContext->id.size, usageContext->id.str);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	if(*(boolean*)&usageContext->extension)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
		for(int i = 0; i < usageContext->extension_count; i++)
		{
			String8 to_add = Serialize_Extension(arena, &usageContext->extension[i]);
			Str8ListPush(scratch.arena, &result_list, to_add);
		}

	}
	if(*(boolean*)&usageContext->code)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
			String8 to_add = Serialize_Coding(arena, usageContext->code);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}
	if(usageContext->value_type == UsageContext::ValueType::CodeableConcept)	
	{
			String8 to_add = Serialize_CodeableConcept(arena, usageContext->value.valueCodeableConcept);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(usageContext->value_type == UsageContext::ValueType::Quantity)	
	{
			String8 to_add = Serialize_Quantity(arena, usageContext->value.valueQuantity);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(usageContext->value_type == UsageContext::ValueType::Range)	
	{
			String8 to_add = Serialize_Range(arena, usageContext->value.valueRange);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}
	else if(usageContext->value_type == UsageContext::ValueType::Reference)	
	{
			String8 to_add = Serialize_Reference(arena, usageContext->value.valueReference);
			Str8ListPush(scratch.arena, &result_list, to_add);

	}


Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_MoneyQuantity(Arena *arena, MoneyQuantity *moneyQuantity)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&moneyQuantity->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_SimpleQuantity(Arena *arena, SimpleQuantity *simpleQuantity)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&simpleQuantity->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Shareablemeasure(Arena *arena, Shareablemeasure *shareablemeasure)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&shareablemeasure->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Servicerequest_genetics(Arena *arena, Servicerequest_genetics *servicerequest_genetics)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&servicerequest_genetics->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Groupdefinition(Arena *arena, Groupdefinition *groupdefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&groupdefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Actualgroup(Arena *arena, Actualgroup *actualgroup)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&actualgroup->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Familymemberhistory_genetic(Arena *arena, Familymemberhistory_genetic *familymemberhistory_genetic)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&familymemberhistory_genetic->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Shareableactivitydefinition(Arena *arena, Shareableactivitydefinition *shareableactivitydefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&shareableactivitydefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Cdshooksrequestgroup(Arena *arena, Cdshooksrequestgroup *cdshooksrequestgroup)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&cdshooksrequestgroup->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Provenance_relevant_history(Arena *arena, Provenance_relevant_history *provenance_relevant_history)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&provenance_relevant_history->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Cqf_questionnaire(Arena *arena, Cqf_questionnaire *cqf_questionnaire)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&cqf_questionnaire->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Shareablevalueset(Arena *arena, Shareablevalueset *shareablevalueset)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&shareablevalueset->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Picoelement(Arena *arena, Picoelement *picoelement)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&picoelement->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Shareablecodesystem(Arena *arena, Shareablecodesystem *shareablecodesystem)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&shareablecodesystem->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Cdshooksguidanceresponse(Arena *arena, Cdshooksguidanceresponse *cdshooksguidanceresponse)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&cdshooksguidanceresponse->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Devicemetricobservation(Arena *arena, Devicemetricobservation *devicemetricobservation)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&devicemetricobservation->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Observation_genetics(Arena *arena, Observation_genetics *observation_genetics)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&observation_genetics->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Vitalsigns(Arena *arena, Vitalsigns *vitalsigns)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&vitalsigns->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bodyweight(Arena *arena, Bodyweight *bodyweight)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bodyweight->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Vitalspanel(Arena *arena, Vitalspanel *vitalspanel)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&vitalspanel->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bodyheight(Arena *arena, Bodyheight *bodyheight)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bodyheight->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Resprate(Arena *arena, Resprate *resprate)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&resprate->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Heartrate(Arena *arena, Heartrate *heartrate)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&heartrate->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bodytemp(Arena *arena, Bodytemp *bodytemp)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bodytemp->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Headcircum(Arena *arena, Headcircum *headcircum)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&headcircum->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Oxygensat(Arena *arena, Oxygensat *oxygensat)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&oxygensat->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bmi(Arena *arena, Bmi *bmi)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bmi->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Bp(Arena *arena, Bp *bp)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&bp->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Shareablelibrary(Arena *arena, Shareablelibrary *shareablelibrary)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&shareablelibrary->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Cqllibrary(Arena *arena, Cqllibrary *cqllibrary)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&cqllibrary->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Lipidprofile(Arena *arena, Lipidprofile *lipidprofile)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&lipidprofile->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Cholesterol(Arena *arena, Cholesterol *cholesterol)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&cholesterol->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Triglyceride(Arena *arena, Triglyceride *triglyceride)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&triglyceride->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Hdlcholesterol(Arena *arena, Hdlcholesterol *hdlcholesterol)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&hdlcholesterol->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Ldlcholesterol(Arena *arena, Ldlcholesterol *ldlcholesterol)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&ldlcholesterol->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Diagnosticreport_genetics(Arena *arena, Diagnosticreport_genetics *diagnosticreport_genetics)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&diagnosticreport_genetics->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Hlaresult(Arena *arena, Hlaresult *hlaresult)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&hlaresult->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Synthesis(Arena *arena, Synthesis *synthesis)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&synthesis->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Clinicaldocument(Arena *arena, Clinicaldocument *clinicaldocument)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&clinicaldocument->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Catalog(Arena *arena, Catalog *catalog)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&catalog->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Shareableplandefinition(Arena *arena, Shareableplandefinition *shareableplandefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&shareableplandefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Computableplandefinition(Arena *arena, Computableplandefinition *computableplandefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&computableplandefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Cdshooksserviceplandefinition(Arena *arena, Cdshooksserviceplandefinition *cdshooksserviceplandefinition)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&cdshooksserviceplandefinition->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Elementdefinition_de(Arena *arena, Elementdefinition_de *elementdefinition_de)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&elementdefinition_de->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Ehrsrle_auditevent(Arena *arena, Ehrsrle_auditevent *ehrsrle_auditevent)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&ehrsrle_auditevent->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

String8
Serialize_Ehrsrle_provenance(Arena *arena, Ehrsrle_provenance *ehrsrle_provenance)
{
Temp scratch = ScratchBegin(&arena, 1);
String8List result_list = {0};
Str8ListPush(scratch.arena, &result_list, Str8Lit("{\n"));
	if(*(boolean*)&ehrsrle_provenance->resourceType)
	{
		if(result_list.node_count > 1)
		{
			Str8ListPush(scratch.arena, &result_list, Str8Lit(",\n"));
		}

	}
Str8ListPush(scratch.arena, &result_list, Str8Lit("}\n"));
String8 result = Str8ListJoin(arena, result_list, 0);
ScratchEnd(scratch);
	return result;
}

